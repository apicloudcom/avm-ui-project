<template>
    <safe-area
        class="main-avm-list"
        @touchstart="handleTouchstart"
        @touchmove="handleTouchMove">
        <view :class="`main-avm-list-tabs ${isShowShadow ? 'main-avm-list-tabs-shadow' : ''}`">
            <view
                v-for="item in tabList"
                class="main-avm-list-tab-item"
                @click="tabClick(item.value)">
                <text :class="curTab === item.value ? 'main-avm-list-tab-active' : 'main-avm-list-tab'">{item.label}</text>
                <text class="main-avm-list-tab-line" v-if="item.value === this.data.curTab"></text>
            </view>
        </view>
        <scroll-view scroll-y :show-scrollbar="false" class="main-avm-list-content" @scroll="handleScroll">
            <view class="main-avm-list-desc">
                <image
                    src="../../image/avm_left_comma.png"
                    alt="avm_left_comma"
                    class="main-avm-list-desc-icon main-avm-list-desc-icon-left" />
                <text class="main-avm-list-desc-text">{this.data.desc[this.data.curTab]}</text>
                <image
                    src="../../image/avm_right_comma.png"
                    alt="avm_right_comma"
                    class="main-avm-list-desc-icon main-avm-list-desc-icon-right" />
            </view>
            <view>
                <view v-for="item in contentList" class="main-avm-list-item">
                    <!--标题-->
                    <view
                        class="main-avm-list-item-title"
                        @click="selectChildTab(item)">
                        <text class="main-avm-list-item-title-line" v-show="curChildTab === item.tab"></text>
                        <text class="main-avm-list-item-text">{item.text}</text>
                        <img :src="`../../image/${item.icon}.png`" :alt="item.icon" class="main-avm-list-item-icon" />
                    </view>
                    <!--子内容-->
                    <view class="main-avm-list-item-child-container" v-show="curChildTab === item.tab">
                        <view class="main-avm-list-item-child" v-for="childItem in item.children" :key="childItem.component" @click="enterChildDetail(childItem)">
                            <text class="main-avm-list-item-child-text">{childItem.text}</text>
                            <img src="../../image/right_arrow.png" alt="right_arrow" class="main-avm-list-item-child-icon"/>
                        </view>
                    </view>
                </view>
            </view>
        </scroll-view>
    </safe-area>
</template>
<script>
import {avmContentList} from '../../utils/constant';
export default {
    name: 'main-avm-index',
    props: {
        curTab: {
            type: String,
            default: null
        },
        curChildTab: {
            type: String,
            default: null
        }
    },
    computed: {
        contentList() {
            return avmContentList.filter(item => (item.type === this.data.curTab));
        },
        // 当前运行平台 app/web/mp
        platform() {
            return api.platform;
        }
    },
    data() {
        return {
            isShowShadow: false,
            startY: 0,
            tabList: [{
                label: '基础组件',
                value: 'base'
            }, {
                label: 'AVM UI',
                value: 'avm'
            }],
            desc: {
                base: '基础组件是AVM框架为开发者提供的系统组件，类似于HTML的标签。它是AVM应用开发的原子性基石。可以使用基础组件，以不同的组合和样式构建出各种页面和效果。',
                avm: 'AVM UI是基于基础组件二次封装和开发的一套风格化组件库，提供业务开发中常见的场景和组合，旨在通过少量的配置和定制，满足用户快速开发和使用。'
            },
            curTab: this.props.curTab || 'base',
            curChildTab: this.props.curChildTab || null
        };
    },
    methods: {
        tabClick(tab) {
            this.data.curTab = tab;
        },
        handleTouchstart(e) {
            this.data.startY = e.detail.y;
        },
        handleTouchMove(e) {
            if (e.detail.y - this.data.startY > 10) {
                this.fire('handleHideIndexList');
            }
        },
        selectChildTab(item) {
            if (item.tab === this.data.curChildTab) {
                this.data.curChildTab = null
            } else {
                this.data.curChildTab = item.tab;
            }
        },
        enterChildDetail(childItem) {
            const url = `../${childItem.component}/${childItem.component}.stml`;
            if (this.platform === 'app') { // app端
               api.openWin({
                    name: childItem.component,
                    url
                })
            } else if (this.platform === 'mp') { // 小程序端
                wx.redirectTo({url})
            }
        },
        handleScroll(e) {
            if ( e.detail.scrollTop > 0) {
                this.data.isShowShadow = true
            } else {
                this.data.isShowShadow = false
            }
        }
    }
};
</script>
<style>
.main-avm-list {
    width: 100%;
    height: 100%;
    background: #fff;
    z-index: 666;
}
.main-avm-list-tabs {
    display: flex;
    flex-direction: row;
    justify-content: center;
    padding-top: 23px;
    padding-bottom: 27px;
    box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0);
}
.main-avm-list-tabs-shadow {
    box-shadow: 0px 2px 6px 0px rgba(0, 0, 0, 0.06);
}
.main-avm-list-tab-item {
    width: auto;
    margin-right: 32px;
}
.main-avm-list-tab {
    font-size: 16px;
    color: #666;
    font-weight: 400;
}
.main-avm-list-tab-active {
    font-size: 16px;
    color: #030303;
    font-weight: 500;
}
.main-avm-list-tab-line {
    width: 100%;
    height: 6px;
    background: rgba(154, 194, 0, 0.5);
    position: absolute;
    top: 16px;
}

.main-avm-list-desc {
    margin: 0 16px 10px;
    flex-direction: row;
    align-items: center;
}
.main-avm-list-desc-icon {
    width: 12px;
    height: 10px;
}
.main-avm-list-desc-icon-left {
    position: absolute;
    top: 7px;
    left: 0;
}
.main-avm-list-desc-icon-right {
    position: absolute;
    bottom: 7px;
    right: 0;
}
.main-avm-list-desc-text {
    font-size: 13px;
    color: #aaa;
    font-weight: 400;
    line-height: 24px;
    text-indent: 22px;
}

.main-avm-list-content {
    flex: 1;
}
.main-avm-list-item {
    border-bottom: 0.5px solid #eee;
}
.main-avm-list-item-title {
    flex-direction: row;
    align-items: center;
    padding: 18px 0;
}
.main-avm-list-item-title-line {
    background: #9ac200;
    width: 3px;
    height: 16px;
    flex-shrink: 0;

}
.main-avm-list-item-text {
    font-size: 16px;
    color: #333;
    font-weight: 400;
    line-height: 22px;
    margin-left: 16px;
    flex: 1;
}
.main-avm-list-item-icon {
    width: 22px;
    height: 22px;
    margin-right: 16px;
    flex-shrink: 0;
}

.main-avm-list-item-child-container {
    background: #f6f6f6;
}
.main-avm-list-item-child {
    padding: 14px 0;
    margin: 0 24px;
    border-bottom: 0.5px solid #eee;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
}
.main-avm-list-item-child-text {
    font-size: 15px;
    color: #333;
    line-height: 21px;
    font-weight: 400;
}
.main-avm-list-item-child-icon {
    width: 9.9px;
    height: 9.9px;
}
</style>
