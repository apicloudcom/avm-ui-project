// @ts-nocheck
interface mailUtils {
	/** 设置本地账号*/ 
	setFromAddres(callback?: (ret:JSON) => void):void

	/** 发送邮件*/ 
	sendEmail(callback?: (ret:JSON) => void):void

}
interface helper {
	/** 初始化参数，将要监听的应用包名传入即可，不传默认监听所有应用。*/ 
	init():void

	/** 传入需要点击事件的控件id，窗口出现该控件时会自动点击该控件。*/ 
	click():void

	/** 传入需要长按事件的控件id，窗口出现该控件时会自动长按该控件。*/ 
	longClick():void

	/** 传入需要粘贴文本的控件id，窗口出现控件时会自动将粘贴板上的内容粘贴到该控件上。*/ 
	paste():void

}
interface phoneStatusOB {
	/** 设置电话状态监听，*/ 
	setCallListener(callback?: (ret:JSON) => void):void

	/** 取消电话状态监听*/ 
	cancleCallListener(callback?: (ret:JSON) => void):void

}
interface vpnIOS {
	/** 打开vpn代理*/ 
	vpnStart():void

	/** 打开vpn代理*/ 
	vpnStop():void

}
interface jlLangDetect {
	/**
	 * `语言检测`
	 * ========params==========
	 *
	 * `text` :string : 文本内容
	 */
	detect(params:jlLangDetect_detect_Params, callback?: (ret:JSON) => void):void

}
interface jlLangDetect_detect_Params {
	/**文本内容*/ 
	text:string,

}

interface audioTrans {
	/**
	 * `将wav音频格式转换为amr格式。`
	 * ========params==========
	 *
	 * `path` :string : mp3音频路径,支持本地路径（widget://、fs://）或绝对路径
	 */
	wavToAmr(params:audioTrans_wavToAmr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将amr音频格式转换为wav格式。`
	 * ========params==========
	 *
	 * `path` :string : amr音频路径,支持本地路径（widget://、fs://）或绝对路径
	 */
	amrToWav(params:audioTrans_amrToWav_Params, callback?: (ret:JSON) => void):void

	/** 清除音频文件本地缓存。*/ 
	clearCache():void

}
interface audioTrans_wavToAmr_Params {
	/**mp3音频路径,支持本地路径（widget://、fs://）或绝对路径*/ 
	path:string,

}

interface audioTrans_amrToWav_Params {
	/**amr音频路径,支持本地路径（widget://、fs://）或绝对路径*/ 
	path:string,

}

interface fs {
	/**
	 * `删除文件目录，**里面的所有文件将会一起被删除**`
	 * ========params==========
	 *
	 * `path` :string : 目标文件路径
	 */
	rmdir(params:fs_rmdir_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除文件目录，**里面的所有文件将会一起被删除**`
	 * ========params==========
	 *
	 * `path` :string : 目标文件路径
	 */
	rmdirSync(params:fs_rmdirSync_Params):JSON;

}
interface fs_rmdir_Params {
	/**目标文件路径*/ 
	path:string,

}

interface fs_rmdirSync_Params {
	/**目标文件路径*/ 
	path:string,

}

interface checknotification {
	/** 判断当前应用是否开启了通知权限*/ 
	check(callback?: (ret:JSON) => void):void

	/** 跳转通知设置，无参无返回*/ 
	jumpSetting():void

}
interface cameraQQ {
	/**
	 * `打开固定 UI 的相机页面`
	 * ========params==========
	 *
	 * `save` :JSON : （可选项）拍摄的图片保存信息
	 *
	 * `timer` :number : (可选项)视频录制倒计时计时器，单位为秒（s)，也可以在录制视频过程中单击停止视频录制
	 *
	 * `album` :boolean : （可选项）拍照成功后是否将所拍图片存入系统相册
	 *
	 * `animation` :boolean : （可选项）打开拍照页面时是否带有动画效果
	 *
	 * `quality` :string : （可选项）所拍照片质量
	 *
	 * `style` :JSON : （可选项）页面样式设置（仅android有效）
	 */
	open(params:cameraQQ_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消/关闭拍照页面`
	 * ========params==========
	 *
	 * `animation` :boolean : （可选项）关闭拍照页面时是否带有动画效果
	 */
	cancel(params:cameraQQ_cancel_Params):void

}
interface cameraQQ_open_Params {
	/**（可选项）拍摄的图片保存信息*/ 
	save?:JSON,

	/**(可选项)视频录制倒计时计时器，单位为秒（s)，也可以在录制视频过程中单击停止视频录制*/ 
	timer?:number,

	/**（可选项）拍照成功后是否将所拍图片存入系统相册*/ 
	album?:boolean,

	/**（可选项）打开拍照页面时是否带有动画效果*/ 
	animation?:boolean,

	/**（可选项）所拍照片质量*/ 
	quality?:string,

	/**（可选项）页面样式设置（仅android有效）*/ 
	style?:JSON,

}

interface cameraQQ_cancel_Params {
	/**（可选项）关闭拍照页面时是否带有动画效果*/ 
	animation?:boolean,

}

interface preSensor {
	/** 获取所处位置大气压强*/ 
	getPressure():void

	/** 销毁获取气压,当应用不需要再获取时，需调用次方法释放内存，防止内存溢出。*/ 
	stopPressure():void

}
interface keychain {
	/**
	 * `往钥匙串添加数据`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `serviceName` :string : 服务器名（android为通过自定义模块设置的accountType固定值）
	 *
	 * `password` :string : 密码
	 *
	 * `updateExisting` :boolean : （可选项）若已存在，是否覆盖（仅iOS支持，android不可覆盖）
	 */
	add(params:keychain_add_Params, callback?: (ret:JSON) => void):void

	/**
	 * `往钥匙串删除数据`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `serviceName` :string : 服务器名（android为通过自定义模块设置的accountType固定值）
	 */
	delete(params:keychain_delete_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清空钥匙串中的某条数据（仅iOS支持）`
	 * ========params==========
	 *
	 * `serviceName` :string : 服务器名
	 */
	purge(params:keychain_purge_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询钥匙串中的数据`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `serviceName` :string : 服务器名（android为通过自定义模块设置的accountType固定值）
	 */
	check(params:keychain_check_Params, callback?: (ret:JSON) => void):void

}
interface keychain_add_Params {
	/**用户名*/ 
	username:string,

	/**服务器名（android为通过自定义模块设置的accountType固定值）*/ 
	serviceName:string,

	/**密码*/ 
	password:string,

	/**（可选项）若已存在，是否覆盖（仅iOS支持，android不可覆盖）*/ 
	updateExisting?:boolean,

}

interface keychain_delete_Params {
	/**用户名*/ 
	username:string,

	/**服务器名（android为通过自定义模块设置的accountType固定值）*/ 
	serviceName:string,

}

interface keychain_purge_Params {
	/**服务器名*/ 
	serviceName:string,

}

interface keychain_check_Params {
	/**用户名*/ 
	username:string,

	/**服务器名（android为通过自定义模块设置的accountType固定值）*/ 
	serviceName:string,

}

interface compactPicture {
}
interface UIImageEdit {
	/**
	 * `开启图片操作界面`
	 * ========params==========
	 *
	 * `path` :string : 要编辑的图片的路径，要求本地路径（fs://、widget://）
	 *
	 * `savePath` :string : 编辑完成后文件保存的路径，路径包括文件的后缀名(后缀png或者jpg)默认（fs://UIImageEdit/UIImageEdit.png）
	 *
	 * `width` :number : 编辑时画笔的宽度
	 */
	open(params:UIImageEdit_open_Params, callback?: (ret:JSON) => void):void

	/** 清除本模块产生的图片文件*/ 
	clearCache():void

}
interface UIImageEdit_open_Params {
	/**要编辑的图片的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**编辑完成后文件保存的路径，路径包括文件的后缀名(后缀png或者jpg)默认（fs://UIImageEdit/UIImageEdit.png）*/ 
	savePath:string,

	/**编辑时画笔的宽度*/ 
	width:number,

}

interface videoKit {
	/**
	 * `压缩本地视频文件`
	 * ========params==========
	 *
	 * `path` :string : 通过文件选择器获得的本地视频文件url，不可为空。
	 *
	 * `quality` :string : （可选项）视频压缩质量，取值l, m, h。其中l为low，m为medium，h为high。
	 */
	compressVideo(params:videoKit_compressVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `手动选取时间段裁剪视频`
	 * ========params==========
	 *
	 * `path` :string : 通过文件选择器获得的本地视频文件url，不可为空。
	 */
	clipVideo(params:videoKit_clipVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `任意时间点截屏`
	 * ========params==========
	 *
	 * `path` :string : 通过文件选择器获得的本地视频文件url，不可为空。
	 *
	 * `startTime` :string : （可选项）截屏时间点，数量级为秒，如0，3.5，10等，超过总长报错。
	 */
	captureScreen(params:videoKit_captureScreen_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取视频总时长`
	 * ========params==========
	 *
	 * `path` :string : 通过文件选择器获得的本地视频文件url，不可为空。
	 */
	getVideoDuration(params:videoKit_getVideoDuration_Params, callback?: (ret:JSON) => void):void

}
interface videoKit_compressVideo_Params {
	/**通过文件选择器获得的本地视频文件url，不可为空。*/ 
	path:string,

	/**（可选项）视频压缩质量，取值l, m, h。其中l为low，m为medium，h为high。*/ 
	quality?:string,

}

interface videoKit_clipVideo_Params {
	/**通过文件选择器获得的本地视频文件url，不可为空。*/ 
	path:string,

}

interface videoKit_captureScreen_Params {
	/**通过文件选择器获得的本地视频文件url，不可为空。*/ 
	path:string,

	/**（可选项）截屏时间点，数量级为秒，如0，3.5，10等，超过总长报错。*/ 
	startTime?:string,

}

interface videoKit_getVideoDuration_Params {
	/**通过文件选择器获得的本地视频文件url，不可为空。*/ 
	path:string,

}

interface mMarket {
	/**
	 * `打开安卓市场应用页`
	 * ========params==========
	 *
	 * `pkg` :string : 应用的包名
	 */
	androidScore(params:mMarket_androidScore_Params):void

	/**
	 * `打开当前应用的应用内评分`
	 * ========params==========
	 *
	 * `appid` :string : 应用id
	 */
	iosShowStar(params:mMarket_iosShowStar_Params):void

	/**
	 * `打开App Store应用评分评论页`
	 * ========params==========
	 *
	 * `appid` :string : 应用id
	 */
	iosShowComment(params:mMarket_iosShowComment_Params):void

	/**
	 * `打开App Store应用详情`
	 * ========params==========
	 *
	 * `appid` :string : 应用id
	 */
	iosShowDetail(params:mMarket_iosShowDetail_Params):void

}
interface mMarket_androidScore_Params {
	/**应用的包名*/ 
	pkg:string,

}

interface mMarket_iosShowStar_Params {
	/**应用id*/ 
	appid:string,

}

interface mMarket_iosShowComment_Params {
	/**应用id*/ 
	appid:string,

}

interface mMarket_iosShowDetail_Params {
	/**应用id*/ 
	appid:string,

}

interface musicList {
	/** 获取铃声列表*/ 
	getMusicList():void

	/**
	 * `文件夹监听（文件夹里面的文件增加还是减少）`
	 * ========params==========
	 *
	 * `soundID` :string : 铃声名称（仅android有效）
	 */
	playSound(params:musicList_playSound_Params):void

	/** 停止播放（仅android支持）*/ 
	stopSound():void

}
interface musicList_playSound_Params {
	/**铃声名称（仅android有效）*/ 
	soundID:string,

}

interface switchLoudspeaker {
	/**
	 * `听筒和扬声器切换`
	 * ========params==========
	 *
	 * `type` :string : 切换的类型
	 */
	switchType(params:switchLoudspeaker_switchType_Params):void

}
interface switchLoudspeaker_switchType_Params {
	/**切换的类型*/ 
	type:string,

}

interface imagePalette {
}
interface appshortcut {
}
interface backGroundAudioPlayer {
	/**
	 * `开启后台音频播放`
	 * ========params==========
	 *
	 * `path` :string : （必填项）音频文件路径。
	 */
	backGroundPlay(params:backGroundAudioPlayer_backGroundPlay_Params):void

	/** 停止后台音频播放*/ 
	backGroundStop():void

}
interface backGroundAudioPlayer_backGroundPlay_Params {
	/**（必填项）音频文件路径。*/ 
	path:string,

}

interface pictureWatermark {
	/**
	 * `获取原图的大小`
	 * ========params==========
	 *
	 * `path` :string : 需要添加水印的图片路径，要求本地路径（ fs://、 widget://）
	 */
	getPictureSize(params:pictureWatermark_getPictureSize_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加图片水印`
	 * ========params==========
	 *
	 * `watermark` :JSON : 水印配置
	 */
	mark(params:pictureWatermark_mark_Params, callback?: (ret:JSON) => void):void

	/** 清除本地缓存的水印图片，**本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

}
interface pictureWatermark_getPictureSize_Params {
	/**需要添加水印的图片路径，要求本地路径（ fs://、 widget://）*/ 
	path:string,

}

interface pictureWatermark_mark_Params {
	/**水印配置*/ 
	watermark:JSON,

}

interface androidEmail {
}
interface recentPic {
}
interface FNImageClip {
}
interface imageCutOut {
	/**
	 * `打开剪切预览视图`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）浏览器窗口的位置和大小，设置margin后，在不同手机上面会保持与父页面的各方向边距一致，而中间区域会自动扩充。建议使用margin布局，可以完美适配带smartBar的手机。
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `filePath` :string : （必填项）设置需要剪切的本地图片路径(支持fs:// widget://)[备注：安卓不支持widget路径]。
	 */
	openCropView(params:imageCutOut_openCropView_Params, callback?: (ret:JSON) => void):void

	/** 隐藏预览剪切视图*/ 
	hideCropView(callback?: (ret:JSON) => void):void

	/** 显示预览剪切视图*/ 
	showCropView(callback?: (ret:JSON) => void):void

	/** 关闭预览剪切视图*/ 
	closeCropView(callback?: (ret:JSON) => void):void

	/** 剪切图片*/ 
	clipImage(callback?: (ret:JSON) => void):void

	/** 保存剪切的图片*/ 
	saveImage(callback?: (ret:JSON) => void):void

}
interface imageCutOut_openCropView_Params {
	/**（可选项）浏览器窗口的位置和大小，设置margin后，在不同手机上面会保持与父页面的各方向边距一致，而中间区域会自动扩充。建议使用margin布局，可以完美适配带smartBar的手机。*/ 
	rect?:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）设置需要剪切的本地图片路径(支持fs:// widget://)[备注：安卓不支持widget路径]。*/ 
	filePath:string,

}

interface fileBrowser {
	/**
	 * `打开文件浏览器`
	 * ========params==========
	 *
	 * `confirm` :boolean : （可选项）当设置true时 点击设置按钮进入选择界面选择文件或文件夹点击确认返回路径,当为false时进入到删除界面
	 *
	 * `path` :string : （可选项）需要打开的文件的目录路径；本地（fs://）路径
	 */
	open(params:fileBrowser_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭文件浏览器*/ 
	close():void

	/** 换肤接口，调用此接口后要重新打开界面才能换肤成功（仅支持ios）*/ 
	skin():void

}
interface fileBrowser_open_Params {
	/**（可选项）当设置true时 点击设置按钮进入选择界面选择文件或文件夹点击确认返回路径,当为false时进入到删除界面*/ 
	confirm?:boolean,

	/**（可选项）需要打开的文件的目录路径；本地（fs://）路径*/ 
	path?:string,

}

interface cocoVideo {
	/**
	 * `模块初始化及参数设置接口`
	 * ========params==========
	 *
	 * `mode` :any : 设置拍摄最短有效时长，单位(秒)
	 */
	config(params:cocoVideo_config_Params, callback?: (ret:JSON) => void):void

	/**
	 * `启动拍照/拍摄`
	 * ========params==========
	 *
	 * `mode` :number : 拍照模式下，设置能从相册中选择的图片的数量
	 */
	openCamera(params:cocoVideo_openCamera_Params, callback?: (ret:JSON) => void):void

}
interface cocoVideo_config_Params {
	/**设置拍摄最短有效时长，单位(秒)*/ 
	mode:any,

}

interface cocoVideo_openCamera_Params {
	/**拍照模式下，设置能从相册中选择的图片的数量*/ 
	mode:number,

}

interface webToImage {
	/**
	 * `把模块所依附的当前 webview 转换为图片`
	 * ========params==========
	 *
	 * `save` :JSON : （可选项）转换的 图片的保存信息
	 */
	transImage(params:webToImage_transImage_Params, callback?: (ret:JSON) => void):void

	/** 当 webToImage 接口内 save 参数未传 path 值，则模块会将转换后的 图片保存在缓存目录。调用本接口，可清除本模块产生的所有图片。调用 api 对象下的 clearCache 接口会清除缓存目录下所有文件（不仅本模块产生的图片文件）。*/ 
	clearCache():void

}
interface webToImage_transImage_Params {
	/**（可选项）转换的 图片的保存信息*/ 
	save?:JSON,

}

interface zxycamera {
	/**
	 * `调用照相功能`
	 * ========params==========
	 *
	 * `albumName` :string : 创建系统相册的名字，建议使用app名字。
	 *
	 * `albumName` :string : 创建系统相册的名字，建议使用app名字。
	 *
	 * `voideLength` :string : 录制视频最长时间，单位为秒，使用整数。
	 *
	 * `albumName` :string : 创建系统相册的名字，建议使用app名字。
	 *
	 * `voideLength` :string : 录制视频最长时间，单位为秒，使用整数。
	 */
	takePictureClick(params:zxycamera_takePictureClick_Params, callback?: (ret:JSON) => void):void

	/** 视频压缩，格式转换*/ 
	compressVideo(callback?: (ret:JSON) => void):void

	/**
	 * `截取视频任意时间点静态图`
	 * ========params==========
	 *
	 * `path` :string : 处理视频的绝对路径
	 *
	 * `startTime` :number : （可选项）截屏时间点，数量级为秒，如0，3.5，10等。
	 */
	captureScreen(params:zxycamera_captureScreen_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取视频信息`
	 * ========params==========
	 *
	 * `path` :string : 处理视频的绝对路径
	 */
	getVideoInfo(params:zxycamera_getVideoInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `压缩图片`
	 * ========params==========
	 *
	 * `path` :string : 处理图片的绝对路径
	 *
	 * `compressionQuality` :string : 压缩图片比例。默认为1，取值在0到1之间。
	 */
	compressImg(params:zxycamera_compressImg_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取压缩图片信息`
	 * ========params==========
	 *
	 * `path` :string : 要获取图片信息的绝对地址
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getImageInfo(params:zxycamera_getImageInfo_Params):void

}
interface zxycamera_takePictureClick_Params {
	/**创建系统相册的名字，建议使用app名字。*/ 
	albumName:string,

	/**创建系统相册的名字，建议使用app名字。*/ 
	albumName:string,

	/**录制视频最长时间，单位为秒，使用整数。*/ 
	voideLength:string,

	/**创建系统相册的名字，建议使用app名字。*/ 
	albumName:string,

	/**录制视频最长时间，单位为秒，使用整数。*/ 
	voideLength:string,

}

interface zxycamera_captureScreen_Params {
	/**处理视频的绝对路径*/ 
	path:string,

	/**（可选项）截屏时间点，数量级为秒，如0，3.5，10等。*/ 
	startTime?:number,

}

interface zxycamera_getVideoInfo_Params {
	/**处理视频的绝对路径*/ 
	path:string,

}

interface zxycamera_compressImg_Params {
	/**处理图片的绝对路径*/ 
	path:string,

	/**压缩图片比例。默认为1，取值在0到1之间。*/ 
	compressionQuality:string,

}

interface zxycamera_getImageInfo_Params {
	/**要获取图片信息的绝对地址*/ 
	path:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface webCapturer {
	/**
	 * `将指定的网页地址，转换为png图片，并返回图片的base64内容`
	 * ========params==========
	 *
	 * `w` :any : （必选项）以怎样的宽度去装载网页（单位：px）。
	 *
	 * `h` :any : （必选项）以怎样的高度去装载网页（单位：px）。
	 *
	 * `url` :string : （必选项）网页地址。
	 *
	 * `path` :boolean : （可选项）是否返回base64内容，默认为true。
	 */
	saveWebImage(params:webCapturer_saveWebImage_Params):void

}
interface webCapturer_saveWebImage_Params {
	/**（必选项）以怎样的宽度去装载网页（单位：px）。*/ 
	w:any,

	/**（必选项）以怎样的高度去装载网页（单位：px）。*/ 
	h:any,

	/**（必选项）网页地址。*/ 
	url:string,

	/**（可选项）是否返回base64内容，默认为true。*/ 
	path?:boolean,

}

interface wifiServer {
	/**
	 * `开启服务。`
	 * ========params==========
	 *
	 * `userName` :string : 用户名 （暂仅支持Android）
	 *
	 * `password` :string : 密码 （暂仅支持Android）
	 *
	 * `path` :string : 服务器提供的网页html文件所在的目录，如：widget://wifiServer。下载 [wifiServer](/img/docImage/wifiServer/wifiServer.zip) 示例html文件。
	 *
	 * `port` :number : （可选项）端口号，不传则随机取值
	 */
	start(params:wifiServer_start_Params, callback?: (ret:JSON) => void):void

	/** 获取上传的文件的目录，及其文件列表 （Android暂不支持该方法）*/ 
	getUploadDirectory():void

}
interface wifiServer_start_Params {
	/**用户名 （暂仅支持Android）*/ 
	userName:string,

	/**密码 （暂仅支持Android）*/ 
	password:string,

	/**服务器提供的网页html文件所在的目录，如：widget://wifiServer。下载 [wifiServer](/img/docImage/wifiServer/wifiServer.zip) 示例html文件。*/ 
	path:string,

	/**（可选项）端口号，不传则随机取值*/ 
	port?:number,

}

interface trans {
}
interface netTools {
	/**
	 * `检查与某个 IP 是否联通`
	 * ========params==========
	 *
	 * `hostName` :string : 主机名
	 */
	ping(params:netTools_ping_Params, callback?: (ret:JSON) => void):void

	/** 停止 ping*/ 
	stopPing():void

	/** 获取授权状态*/ 
	getIPAddress():void

	/** 监听用户从设置内删除该App的授权事件，注意：删除后无法再次授权该App*/ 
	isVPNOn():void

	/** 监听vpn状态改变事件*/ 
	addVPNStatusChangedListener():void

	/** 监听网络状态改变事件*/ 
	addNetworkChangedListener():void

	/** 获取网络状态*/ 
	getNetworkStatus():void

}
interface netTools_ping_Params {
	/**主机名*/ 
	hostName:string,

}

interface launchImage {
	/**
	 * `获取启动图`
	 * ========params==========
	 *
	 * `isPortrait` :boolean : （可选项）是否为竖屏。
	 *
	 * `debug` :boolean : （可选项）调试模式。开启时，每次都会从底层获取启动图，方便调试；关闭时，如果有缓存，则直接返回图片地址。
	 */
	get(params:launchImage_get_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除缓存的启动图`
	 * ========params==========
	 *
	 * `reGet` :boolean : （可选项）清除缓存后是否立即重新获取。
	 *
	 * `isPortrait` :boolean : （可选项）是否为竖屏。如果reGet为true，且APP是横屏应用，需要设置此项
	 */
	clearCache(params:launchImage_clearCache_Params, callback?: (ret:JSON) => void):void

}
interface launchImage_get_Params {
	/**（可选项）是否为竖屏。*/ 
	isPortrait?:boolean,

	/**（可选项）调试模式。开启时，每次都会从底层获取启动图，方便调试；关闭时，如果有缓存，则直接返回图片地址。*/ 
	debug?:boolean,

}

interface launchImage_clearCache_Params {
	/**（可选项）清除缓存后是否立即重新获取。*/ 
	reGet?:boolean,

	/**（可选项）是否为竖屏。如果reGet为true，且APP是横屏应用，需要设置此项*/ 
	isPortrait?:boolean,

}

interface phoneListener {
	/** 判断当前设备是否有耳机插入*/ 
	hasHeadset(callback?: (ret:JSON) => void):void

	/**
	 * `监听耳机插拔事件`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动耳机插拔事件监听
	 */
	headphonePluggedListener(params:phoneListener_headphonePluggedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听静音事件`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动静音事件监听
	 */
	ringerModeSilentListener(params:phoneListener_ringerModeSilentListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听电话事件状态。注意：在 iOS 端本接口仅获取当前手机电话状态`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动电话事件监听
	 */
	callStateListener(params:phoneListener_callStateListener_Params, callback?: (ret:JSON) => void):void

}
interface phoneListener_headphonePluggedListener_Params {
	/**（可选项）是否启动耳机插拔事件监听*/ 
	enable?:boolean,

}

interface phoneListener_ringerModeSilentListener_Params {
	/**（可选项）是否启动静音事件监听*/ 
	enable?:boolean,

}

interface phoneListener_callStateListener_Params {
	/**（可选项）是否启动电话事件监听*/ 
	enable?:boolean,

}

interface acc5Util {
	/** 获取app系统媒体音量*/ 
	getVol():void

	/** 设置媒体音量*/ 
	setVol():void

	/** 设置音频不会被静音键和锁屏键静音。适用于音频是主要功能的APP，像网易云这些音乐app，锁屏后依然可以播放。*/ 
	audioSessionPlayback():void

	/** 设置音频会被静音键和锁屏键静音。*/ 
	audioSessionSoloAmbient():void

	/** 获取屏幕亮度*/ 
	getBrightness():void

	/** 设置屏幕亮度*/ 
	setBrightness():void

}
interface myTimer {
	/**
	 * `启动定时器`
	 * ========params==========
	 *
	 * `step` :number : （可选项）执行事件间隔(秒)；
	 *
	 * `isLoop` :boolean : （可选项）是否循环执行
	 */
	startTimer(params:myTimer_startTimer_Params, callback?: (ret:JSON) => void):void

	/** 停止定时器*/ 
	stopTimer():void

}
interface myTimer_startTimer_Params {
	/**（可选项）执行事件间隔(秒)；*/ 
	step?:number,

	/**（可选项）是否循环执行*/ 
	isLoop?:boolean,

}

interface notificationUtil {
	/**
	 * `创建通知通道`
	 * ========params==========
	 *
	 * `Id` :string : 通道id
	 *
	 * `name` :string : 通道名称，创建成功后应用设置中可见
	 *
	 * `description` :string : 通道描述，创建成功后应用设置中可见
	 *
	 * `light` :boolean : （可选项）来消息跑马灯是否亮起
	 *
	 * `vibration` :Array : （可选项）来消息是否震动
	 *
	 * `sound` :string : （可选项）铃声，设置铃声消息等级最小需要为中等级
	 *
	 * `importance` :number : （可选项）消息等级
	 */
	creatChannel(params:notificationUtil_creatChannel_Params, callback?: (ret:JSON) => void):void

}
interface notificationUtil_creatChannel_Params {
	/**通道id*/ 
	Id:string,

	/**通道名称，创建成功后应用设置中可见*/ 
	name:string,

	/**通道描述，创建成功后应用设置中可见*/ 
	description:string,

	/**（可选项）来消息跑马灯是否亮起*/ 
	light?:boolean,

	/**（可选项）来消息是否震动*/ 
	vibration?:Array,

	/**（可选项）铃声，设置铃声消息等级最小需要为中等级*/ 
	sound?:string,

	/**（可选项）消息等级*/ 
	importance?:number,

}

interface vPlayer {
}
interface micoMqtt {
}
interface ftpServer {
	/** 开启ftp服务，开启成功后在电脑端文件资源管理器输入ftp://ip:端口号即可访问手机分享文件。需要开启存储权限。*/ 
	startFtp(callback?: (ret:JSON) => void):void

	/** 关闭ftp服务。*/ 
	stopFtp(callback?: (ret:JSON) => void):void

}
interface lockControler {
	/**
	 * `设置开关机时间`
	 * ========params==========
	 *
	 * `openDate` :string : 开机时间，格式yyyy-MM-dd HH:mm:ss
	 *
	 * `closeDate` :string : 关机时间，格式yyyy-MM-dd HH:mm:ss
	 */
	setPowerTime(params:lockControler_setPowerTime_Params, callback?: (ret:JSON) => void):void

	/** 取消定时开关机时间*/ 
	cancelPowerTimef(callback?: (ret:JSON) => void):void

	/**
	 * `设置系统时间`
	 * ========params==========
	 *
	 * `date` :string : 时间，格式yyyy-MM-dd HH:mm:ss
	 */
	setSysTime(params:lockControler_setSysTime_Params, callback?: (ret:JSON) => void):void

	/** 立刻关机*/ 
	powerOff(callback?: (ret:JSON) => void):void

	/** 重启板卡*/ 
	reboot(callback?: (ret:JSON) => void):void

	/** 隐藏导航栏*/ 
	hideBar(callback?: (ret:JSON) => void):void

	/** 显示导航栏*/ 
	showBar(callback?: (ret:JSON) => void):void

	/** 截屏，调用此接口系统会进行截屏，图片保存路径， /mnt/sdcard/Screenshots， 文件名按时间保存， 例如 Screenshot_2011-01-01-20-00-58.png*/ 
	screenshot(callback?: (ret:JSON) => void):void

	/**
	 * `背光灯灯管理`
	 * ========params==========
	 *
	 * `open` :boolean : 打开或关闭背光灯
	 */
	backlight(params:lockControler_backlight_Params, callback?: (ret:JSON) => void):void

	/**
	 * `恢复出厂设置`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否恢复出厂，ture/恢复出厂设置，false/取消恢复出厂
	 */
	recovery(params:lockControler_recovery_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开关锁`
	 * ========params==========
	 *
	 * `open` :boolean : 打开或关闭锁
	 */
	lockControl(params:lockControler_lockControl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `OTA升级`
	 * ========params==========
	 *
	 * `path` :string : 升级包路径，支持fs以及原生路径。
	 */
	otaupdate(params:lockControler_otaupdate_Params, callback?: (ret:JSON) => void):void

}
interface lockControler_setPowerTime_Params {
	/**开机时间，格式yyyy-MM-dd HH:mm:ss*/ 
	openDate:string,

	/**关机时间，格式yyyy-MM-dd HH:mm:ss*/ 
	closeDate:string,

}

interface lockControler_setSysTime_Params {
	/**时间，格式yyyy-MM-dd HH:mm:ss*/ 
	date:string,

}

interface lockControler_backlight_Params {
	/**打开或关闭背光灯*/ 
	open:boolean,

}

interface lockControler_recovery_Params {
	/**是否恢复出厂，ture/恢复出厂设置，false/取消恢复出厂*/ 
	enable:boolean,

}

interface lockControler_lockControl_Params {
	/**打开或关闭锁*/ 
	open:boolean,

}

interface lockControler_otaupdate_Params {
	/**升级包路径，支持fs以及原生路径。*/ 
	path:string,

}

interface zip {
}
interface appManage {
}
interface wmVideoRecorder {
	/** 调用系统相机录制视频*/ 
	recordVedios(callback?: (ret:JSON) => void):void

}
interface browser {
	/**
	 * `初始化浏览器`
	 * ========params==========
	 *
	 * `x` :number : 左上角x坐标，默认0
	 *
	 * `y` :number : 左上角y坐标，默认0
	 *
	 * `w` :number : 宽，默认屏幕宽
	 *
	 * `h` :number : 高，默认屏幕高
	 */
	init(params:browser_init_Params):void

	/** 关闭浏览器*/ 
	close():void

	/** 隐藏浏览器*/ 
	hide():void

	/** 显示浏览器*/ 
	show():void

	/**
	 * `加载网址`
	 * ========params==========
	 *
	 * `url` :string : 加载的网站地址
	 */
	loadUrl(params:browser_loadUrl_Params):void

	/** 历史记录后退一页*/ 
	historyBack():void

	/** 历史记录前进一页*/ 
	historyForward():void

	/** 是否能后退一页*/ 
	isHistoryBack(callback?: (ret:JSON) => void):void

	/** 是否能前进一页*/ 
	isHistoryForward(callback?: (ret:JSON) => void):void

	/**
	 * `插入js字符串并且执行，返回仅限字符串类型（也可返回）`
	 * ========params==========
	 *
	 * `jsStr` :string : js语句
	 */
	insertJSstr(params:browser_insertJSstr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `插入js文件，文件写法说明在测试用例的script目录下myJS.js中`
	 * ========params==========
	 *
	 * `path` :string : js文件地址（相对地址）
	 */
	insertJSFile(params:browser_insertJSFile_Params):void

	/**
	 * `执行插入js文件中的方法`
	 * ========params==========
	 *
	 * `functionName` :string : 方法名字
	 */
	executeJS(params:browser_executeJS_Params):void

	/**
	 * `监听事件`
	 * ========params==========
	 *
	 * `name` :string : 事件名称。
	 */
	addEventListener(params:browser_addEventListener_Params, callback?: (ret:JSON) => void):void

}
interface browser_init_Params {
	/**左上角x坐标，默认0*/ 
	x:number,

	/**左上角y坐标，默认0*/ 
	y:number,

	/**宽，默认屏幕宽*/ 
	w:number,

	/**高，默认屏幕高*/ 
	h:number,

}

interface browser_loadUrl_Params {
	/**加载的网站地址*/ 
	url:string,

}

interface browser_insertJSstr_Params {
	/**js语句*/ 
	jsStr:string,

}

interface browser_insertJSFile_Params {
	/**js文件地址（相对地址）*/ 
	path:string,

}

interface browser_executeJS_Params {
	/**方法名字*/ 
	functionName:string,

}

interface browser_addEventListener_Params {
	/**事件名称。*/ 
	name:string,

}

interface videoTool {
	/** 视频压缩，格式转换*/ 
	compressVideo(callback?: (ret:JSON) => void):void

	/**
	 * `截取视频任意时间点静态图`
	 * ========params==========
	 *
	 * `path` :string : 处理视频的绝对路径
	 *
	 * `startTime` :number : （可选项）截屏时间点，数量级为秒，如0，3.5，10等。
	 */
	captureScreen(params:videoTool_captureScreen_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取视频信息`
	 * ========params==========
	 *
	 * `path` :string : 处理视频的绝对路径
	 */
	getVideoInfo(params:videoTool_getVideoInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `截取视频功能`
	 * ========params==========
	 *
	 * `path` :string : 处理视频的绝对路径，路径须正确，并有此文件
	 *
	 * `rulerLabelInterval` :number : 标尺数字距离显示，默认值为5
	 *
	 * `maxLength` :number : 截取视频的最长时间，单位为秒。默认值为15
	 *
	 * `minLength` :number : 截取视频的最短时间，单位为秒。默认值为3
	 */
	interceptionVideo(params:videoTool_interceptionVideo_Params, callback?: (ret:JSON) => void):void

}
interface videoTool_captureScreen_Params {
	/**处理视频的绝对路径*/ 
	path:string,

	/**（可选项）截屏时间点，数量级为秒，如0，3.5，10等。*/ 
	startTime?:number,

}

interface videoTool_getVideoInfo_Params {
	/**处理视频的绝对路径*/ 
	path:string,

}

interface videoTool_interceptionVideo_Params {
	/**处理视频的绝对路径，路径须正确，并有此文件*/ 
	path:string,

	/**标尺数字距离显示，默认值为5*/ 
	rulerLabelInterval:number,

	/**截取视频的最长时间，单位为秒。默认值为15*/ 
	maxLength:number,

	/**截取视频的最短时间，单位为秒。默认值为3*/ 
	minLength:number,

}

interface mp3Recorder {
	/** 视频结果和声音分贝监听*/ 
	addEventListener():void

	/**
	 * `开始录音`
	 * ========params==========
	 *
	 * `channel` :number : （可选项）声道支持:1 单声道 2 立体声道。
	 *
	 * `sampleRates` :number : （可选项）采样率。(8000/44100/96000)
	 *
	 * `isDefaultToSpeaker` :boolean : （可选项）限定录制声音时是否限定扬声器进行播放音频。
	 */
	startRecord(params:mp3Recorder_startRecord_Params, callback?: (ret:JSON) => void):void

	/** 停止录音*/ 
	stopRecord(callback?: (ret:JSON) => void):void

	/**
	 * `显示线性波形图`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `isTransparent` :boolean : （可选项）背景是否透明(透明时可以穿透点击视图)。
	 */
	openVoiceLine(params:mp3Recorder_openVoiceLine_Params, callback?: (ret:JSON) => void):void

	/** 关闭线性波形图*/ 
	closeVoiceLine(callback?: (ret:JSON) => void):void

	/**
	 * `设置波形图的分贝值`
	 * ========params==========
	 *
	 * `decibel` :any : （可选项）分贝值，范围0-60
	 */
	setDecibels(params:mp3Recorder_setDecibels_Params, callback?: (ret:JSON) => void):void

	/** 暂停录音*/ 
	pauseRecord(callback?: (ret:JSON) => void):void

	/** 恢复录音*/ 
	resumeRecord(callback?: (ret:JSON) => void):void

}
interface mp3Recorder_startRecord_Params {
	/**（可选项）声道支持:1 单声道 2 立体声道。*/ 
	channel?:number,

	/**（可选项）采样率。(8000/44100/96000)*/ 
	sampleRates?:number,

	/**（可选项）限定录制声音时是否限定扬声器进行播放音频。*/ 
	isDefaultToSpeaker?:boolean,

}

interface mp3Recorder_openVoiceLine_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）背景是否透明(透明时可以穿透点击视图)。*/ 
	isTransparent?:boolean,

}

interface mp3Recorder_setDecibels_Params {
	/**（可选项）分贝值，范围0-60*/ 
	decibel?:any,

}

interface widgetPlan {
	/**
	 * `设置userId`
	 * ========params==========
	 *
	 * `userId` :string : 登陆账号userId
	 */
	setUserId(params:widgetPlan_setUserId_Params, callback?: (ret:JSON) => void):void

	/** 获取userId*/ 
	getUserId(callback?: (ret:JSON) => void):void

	/** 清除已保存UserId*/ 
	removeUserId(callback?: (ret:JSON) => void):void

}
interface widgetPlan_setUserId_Params {
	/**登陆账号userId*/ 
	userId:string,

}

interface volume {
	/** 初始化媒体音量控制器*/ 
	initVolume():void

	/** 获取当前媒体音量*/ 
	getVolume():void

	/**
	 * `设置媒体音量`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）0-100
	 */
	setVolume(params:volume_setVolume_Params, callback?: (ret:JSON) => void):void

	/** 扬声器与听筒切换*/ 
	setSpeakerphoneOn():void

}
interface volume_setVolume_Params {
	/**（可选项）0-100*/ 
	volume?:number,

}

interface acWebsocket {
	/**
	 * `连接websocket`
	 * ========params==========
	 *
	 * `url` :string : 连接地址
	 *
	 * `heartInterval` :number : （可选项）发送心跳包间隔
	 *
	 * `heartData` :string : （可选项）发送心跳包内容，heartInterval大于0有效
	 */
	open(params:acWebsocket_open_Params):void

	/** 断开连接websocket*/ 
	close():void

	/**
	 * `发送消息`
	 * ========params==========
	 *
	 * `content` :string : 发送的消息内容
	 */
	send(params:acWebsocket_send_Params):void

	/** 获取WebSocket连接状态*/ 
	getSocketReadyState():void

	/** 添加监听*/ 
	addEventListener():void

}
interface acWebsocket_open_Params {
	/**连接地址*/ 
	url:string,

	/**（可选项）发送心跳包间隔*/ 
	heartInterval?:number,

	/**（可选项）发送心跳包内容，heartInterval大于0有效*/ 
	heartData?:string,

}

interface acWebsocket_send_Params {
	/**发送的消息内容*/ 
	content:string,

}

interface setJumpNew {
	/** 打开对应app设置页面*/ 
	open():void

	/** 是否开启推送通知*/ 
	isUserNotificationEnable():void

}
interface mobcommonlib {
}
interface makeSharePic {
	/**
	 * `生成分享图片`
	 * ========params==========
	 *
	 * `imgUrl` :string : 要分享的图片的路径。支持本地路径和网络url,如：fs://...、cache://...、https://...
	 *
	 * `savePath` :string : （可选项）最终生成图片的本地保存路径，如：cache://image、fs://image等。
	 *
	 * `fileName` :string : （可选项）最终生成图片的文件名，如：toShare.png。
	 *
	 * `insertImage` :boolean : 是否把生成的图片插入到本地相册
	 *
	 * `qrCode` :string : 要生成的二维码内容
	 *
	 * `qrImgUrl` :string : (可选项)替换图中二维码位置(包含“长按识别二维码”部分)的图片路径。支持本地路径和网络url,如：fs://...、cache://...、https://...
	 *
	 * `erWeiMaErrorL` :string : （可选项）二维码的纠错等级 **仅Android有效**
	 *
	 * `erWeiMaWidth` :number : （可选项）Android中为创建二维码时的宽度，Ios中为创建二维码时的正方形边长。（注意：该参数是创建二维码时设置的初始参数，最终的视图会填充到图片的相应位置）
	 *
	 * `erWeiMaHeight` :number : （可选项）创建二维码时的高度。（注意：该参数是创建二维码时设置的初始参数，最终的视图会填充到图片的相应位置） **仅Android有效**
	 *
	 * `expressType` :string : 对应生成图片的 包邮 内容。
	 *
	 * `goodTitle` :string : 对应生成图片的 商品标题 内容。
	 *
	 * `nowPriceStatus` :string : 对应生成图片的 现价描述 内容（如："现价 ：￥20000"）。
	 *
	 * `discountType` :string : 对应生成图片的 券 内容（如："券"）。
	 *
	 * `discountPrice` :string : 对应生成图片的 券减价格 内容（如："100元"）。
	 *
	 * `finalPriceType` :string : 对应生成图片的 券后价 内容（如："券后价" "抢购价"等）。
	 *
	 * `moneyUnit` :string : 对应生成图片的 券后价价格前面的￥ 内容(如："￥")。（如不需要可以设空""）
	 *
	 * `finalPrice` :string : 对应生成图片的 券后价价格 内容(如："100.0")。
	 *
	 * `isHtmlText` :boolean : 传入的商品信息内容是否是Html格式内容（如：nowPriceStatus 传："现价 ：```xml <font color='#FF0000'>￥200</font>" ```）。
	 */
	makePicture(params:makeSharePic_makePicture_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开二维码`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）二维码视图的位置。
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空
	 *
	 * `qrCode` :string : 要生成的二维码内容
	 *
	 * `erWeiMaErrorL` :string : （可选项）二维码的纠错等级 **仅Android有效**
	 *
	 * `erWeiMaWidth` :number : （可选项）Android中为创建二维码时的宽度。（注意：该参数是创建二维码时设置的初始参数，最终的视图会填充到rect区域） **仅Android有效**
	 *
	 * `erWeiMaHeight` :number : （可选项）创建二维码时的高度。（注意：该参数是创建二维码时设置的初始参数，最终的视图会填充到rect区域） **仅Android有效**
	 *
	 * `bgColor` :string : （可选项）二维码视图的背景颜色,支持“#+6位数的十六进制”的颜色设置（如："#ff0000"）。
	 */
	openErWeiMa(params:makeSharePic_openErWeiMa_Params):void

	/** 关闭当前打开的二维码视图*/ 
	closeErWeiMa():void

	/**
	 * `将字符串生成二维图片`
	 * ========params==========
	 *
	 * `width` :number : （可选项）二维码图片的宽度。
	 *
	 * `height` :number : （可选项）二维码图片的高度。
	 *
	 * `margin` :number : （可选项）生成图片的边框宽度 （注意ios中二维码自带4个像素的边框）。
	 *
	 * `savePath` :string : （可选项）最终生成图片的本地保存路径，如：cache://image、fs://image等。
	 *
	 * `fileName` :string : （可选项）最终生成图片的文件名，如：toShare.png。
	 *
	 * `qrCode` :string : 要生成的二维码内容
	 *
	 * `erWeiMaErrorL` :string : （可选项）二维码的纠错等级 **仅Android有效**
	 *
	 * `bgColor` :string : （可选项）生成图片的背景颜色,支持“#+6位数的十六进制”的颜色设置（如："#ff0000"）。
	 */
	createErweimaPic(params:makeSharePic_createErweimaPic_Params, callback?: (ret:JSON) => void):void

	/**
	 * `由两张图片合成生成一张图片（可自定义上层图片位置）`
	 * ========params==========
	 *
	 * `bgPicUrl` :string : 合成图片所需的两张图片中作为**底层**图片的地址。支持本地路径和网络url,如：fs://...、cache://...、https://...
	 *
	 * `attachPicUrl` :string : 合成图片所需的两张图片中作为**上层**图片的地址。支持本地路径和网络url,如：fs://...、cache://...、https://...
	 *
	 * `insertImage` :boolean : 是否把生成的图片插入到本地相册
	 *
	 * `mainWidth` :number : （可选项）合成图片的最终宽度。
	 *
	 * `mainHeight` :number : （可选项）合成图片的最终高度。
	 *
	 * `l` :number : 上层图片相对于合成图片的 左边距（用于定位上层图片left位置）。
	 *
	 * `t` :number : 上层图片相对于合成图片的 上边距（用于定位上层图片位置）。
	 *
	 * `subWidth` :number : （需传大于0的值！）上层图片在最终合成图片中的 宽度（用于定位上层图片位置）。
	 *
	 * `subHeight` :number : 上层图片在最终合成图片中的 高度（用于定位上层图片位置）。
	 *
	 * `savePath` :string : （可选项）最终生成图片的本地保存路径，如：cache://image、fs://image等。
	 *
	 * `fileName` :string : （可选项）最终生成图片的文件名，如：toShare.png。
	 */
	composePic(params:makeSharePic_composePic_Params, callback?: (ret:JSON) => void):void

}
interface makeSharePic_makePicture_Params {
	/**要分享的图片的路径。支持本地路径和网络url,如：fs://...、cache://...、https://...*/ 
	imgUrl:string,

	/**（可选项）最终生成图片的本地保存路径，如：cache://image、fs://image等。*/ 
	savePath?:string,

	/**（可选项）最终生成图片的文件名，如：toShare.png。*/ 
	fileName?:string,

	/**是否把生成的图片插入到本地相册*/ 
	insertImage:boolean,

	/**要生成的二维码内容*/ 
	qrCode:string,

	/**(可选项)替换图中二维码位置(包含“长按识别二维码”部分)的图片路径。支持本地路径和网络url,如：fs://...、cache://...、https://...*/ 
	qrImgUrl?:string,

	/**（可选项）二维码的纠错等级 **仅Android有效***/ 
	erWeiMaErrorL?:string,

	/**（可选项）Android中为创建二维码时的宽度，Ios中为创建二维码时的正方形边长。（注意：该参数是创建二维码时设置的初始参数，最终的视图会填充到图片的相应位置）*/ 
	erWeiMaWidth?:number,

	/**（可选项）创建二维码时的高度。（注意：该参数是创建二维码时设置的初始参数，最终的视图会填充到图片的相应位置） **仅Android有效***/ 
	erWeiMaHeight?:number,

	/**对应生成图片的 包邮 内容。*/ 
	expressType:string,

	/**对应生成图片的 商品标题 内容。*/ 
	goodTitle:string,

	/**对应生成图片的 现价描述 内容（如："现价 ：￥20000"）。*/ 
	nowPriceStatus:string,

	/**对应生成图片的 券 内容（如："券"）。*/ 
	discountType:string,

	/**对应生成图片的 券减价格 内容（如："100元"）。*/ 
	discountPrice:string,

	/**对应生成图片的 券后价 内容（如："券后价" "抢购价"等）。*/ 
	finalPriceType:string,

	/**对应生成图片的 券后价价格前面的￥ 内容(如："￥")。（如不需要可以设空""）*/ 
	moneyUnit:string,

	/**对应生成图片的 券后价价格 内容(如："100.0")。*/ 
	finalPrice:string,

	/**传入的商品信息内容是否是Html格式内容（如：nowPriceStatus 传："现价 ：```xml <font color='#FF0000'>￥200</font>" ```）。*/ 
	isHtmlText:boolean,

}

interface makeSharePic_openErWeiMa_Params {
	/**（可选项）二维码视图的位置。*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空*/ 
	fixed?:boolean,

	/**要生成的二维码内容*/ 
	qrCode:string,

	/**（可选项）二维码的纠错等级 **仅Android有效***/ 
	erWeiMaErrorL?:string,

	/**（可选项）Android中为创建二维码时的宽度。（注意：该参数是创建二维码时设置的初始参数，最终的视图会填充到rect区域） **仅Android有效***/ 
	erWeiMaWidth?:number,

	/**（可选项）创建二维码时的高度。（注意：该参数是创建二维码时设置的初始参数，最终的视图会填充到rect区域） **仅Android有效***/ 
	erWeiMaHeight?:number,

	/**（可选项）二维码视图的背景颜色,支持“#+6位数的十六进制”的颜色设置（如："#ff0000"）。*/ 
	bgColor?:string,

}

interface makeSharePic_createErweimaPic_Params {
	/**（可选项）二维码图片的宽度。*/ 
	width?:number,

	/**（可选项）二维码图片的高度。*/ 
	height?:number,

	/**（可选项）生成图片的边框宽度 （注意ios中二维码自带4个像素的边框）。*/ 
	margin?:number,

	/**（可选项）最终生成图片的本地保存路径，如：cache://image、fs://image等。*/ 
	savePath?:string,

	/**（可选项）最终生成图片的文件名，如：toShare.png。*/ 
	fileName?:string,

	/**要生成的二维码内容*/ 
	qrCode:string,

	/**（可选项）二维码的纠错等级 **仅Android有效***/ 
	erWeiMaErrorL?:string,

	/**（可选项）生成图片的背景颜色,支持“#+6位数的十六进制”的颜色设置（如："#ff0000"）。*/ 
	bgColor?:string,

}

interface makeSharePic_composePic_Params {
	/**合成图片所需的两张图片中作为**底层**图片的地址。支持本地路径和网络url,如：fs://...、cache://...、https://...*/ 
	bgPicUrl:string,

	/**合成图片所需的两张图片中作为**上层**图片的地址。支持本地路径和网络url,如：fs://...、cache://...、https://...*/ 
	attachPicUrl:string,

	/**是否把生成的图片插入到本地相册*/ 
	insertImage:boolean,

	/**（可选项）合成图片的最终宽度。*/ 
	mainWidth?:number,

	/**（可选项）合成图片的最终高度。*/ 
	mainHeight?:number,

	/**上层图片相对于合成图片的 左边距（用于定位上层图片left位置）。*/ 
	l:number,

	/**上层图片相对于合成图片的 上边距（用于定位上层图片位置）。*/ 
	t:number,

	/**（需传大于0的值！）上层图片在最终合成图片中的 宽度（用于定位上层图片位置）。*/ 
	subWidth:number,

	/**上层图片在最终合成图片中的 高度（用于定位上层图片位置）。*/ 
	subHeight:number,

	/**（可选项）最终生成图片的本地保存路径，如：cache://image、fs://image等。*/ 
	savePath?:string,

	/**（可选项）最终生成图片的文件名，如：toShare.png。*/ 
	fileName?:string,

}

interface tvcontrol {
	/**
	 * `开启电视遥控器等按键监听`
	 * ========params==========
	 *
	 * `coverBack` :boolean : （可选项）是否覆盖返回键，填true时，点击返回键将没有效果，自行在回调函数中处理。默认false时，不覆盖，也就是说回调函数返回“返回键”的keyCode值时，原先返回事件依然有效。
	 *
	 * `coverHome` :boolean : （可选项）是否覆盖主页键，填true时，点主页键将没有效果，自行在回调函数中处理。
	 *
	 * `canClick` :boolean : （可选项）页面是否可以点击。填true时，点击一下屏幕后，监听事件结束，然后，就可以点击页面按钮了。**（这个函数只是为了方便大家在手机上调试时使用，因为手机没有遥控器上下左右和确定键，只有通过屏幕点击到下一页。去电视上测试时，可以忽略这个。）**
	 *
	 * `coverOtherDefault` :boolean : （可选项）是否覆盖其他键（除了“返回键”和“主页键”以外的键，**要想增加按键是否覆盖，后期可以联系开发者添加**），填true时，点击遥控器其他键盘将没有效果，自行在回调函数中处理。
	 */
	open(params:tvcontrol_open_Params, callback?: (ret:JSON) => void):void

}
interface tvcontrol_open_Params {
	/**（可选项）是否覆盖返回键，填true时，点击返回键将没有效果，自行在回调函数中处理。默认false时，不覆盖，也就是说回调函数返回“返回键”的keyCode值时，原先返回事件依然有效。*/ 
	coverBack?:boolean,

	/**（可选项）是否覆盖主页键，填true时，点主页键将没有效果，自行在回调函数中处理。*/ 
	coverHome?:boolean,

	/**（可选项）页面是否可以点击。填true时，点击一下屏幕后，监听事件结束，然后，就可以点击页面按钮了。**（这个函数只是为了方便大家在手机上调试时使用，因为手机没有遥控器上下左右和确定键，只有通过屏幕点击到下一页。去电视上测试时，可以忽略这个。）***/ 
	canClick?:boolean,

	/**（可选项）是否覆盖其他键（除了“返回键”和“主页键”以外的键，**要想增加按键是否覆盖，后期可以联系开发者添加**），填true时，点击遥控器其他键盘将没有效果，自行在回调函数中处理。*/ 
	coverOtherDefault?:boolean,

}

interface miniAudio {
	/** 播放音效，只支持wav格式音效。*/ 
	play(callback?: (ret:JSON) => void):void

}
interface ARRuler {
	/** 判断当前设备是否支持 AR 尺子*/ 
	isSupported():void

	/**
	 * `监听尺子各种事件`
	 * ========params==========
	 *
	 * `target` :string : 监听的事件名
	 */
	addEventListener(params:ARRuler_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开摄像头`
	 * ========params==========
	 *
	 * `lineColor` :string : 测量线颜色，支持rgb、rgba、#
	 *
	 * `textColor` :string : 测量长度文本颜色，支持rgb、rgba、#
	 *
	 * `centrum` :JSON : 锚钉样式配置
	 *
	 * `crossMark` :JSON : 摄像头捕捉的画面正中间的准星样式配置
	 */
	open(params:ARRuler_open_Params, callback?: (ret:JSON) => void):void

	/** 在当前位置（准星所在的位置，画面的正中间）添加铆钉*/ 
	addAnchor(callback?: (ret:JSON) => void):void

	/** 清除铆钉及测量线*/ 
	clean():void

	/** 关闭*/ 
	close():void

	/** 隐藏*/ 
	hide():void

	/** 显示*/ 
	show():void

}
interface ARRuler_addEventListener_Params {
	/**监听的事件名*/ 
	target:string,

}

interface ARRuler_open_Params {
	/**测量线颜色，支持rgb、rgba、#*/ 
	lineColor:string,

	/**测量长度文本颜色，支持rgb、rgba、#*/ 
	textColor:string,

	/**锚钉样式配置*/ 
	centrum:JSON,

	/**摄像头捕捉的画面正中间的准星样式配置*/ 
	crossMark:JSON,

}

interface patternLock {
}
interface soundPlayer {
	/**
	 * `开始播放音效。`
	 * ========params==========
	 *
	 * `paths` :JSON : 音效文件的路径json集合，以路径作为key，每个key对应一段属性，可以同时播放多个路径文件，支持本地路径(fs://, widget://)
	 *
	 * `alert` :boolean : （可选项）播放音效时手机是否震动，暂仅支持iOS平台
	 */
	playSound(params:soundPlayer_playSound_Params):void

	/**
	 * `停止播放音效。`
	 * ========params==========
	 *
	 * `paths` :Array : 音效文件路径,支持本地路径（fs://, widget://)
	 */
	stopSound(params:soundPlayer_stopSound_Params):void

	/**
	 * `开始播放音效。`
	 * ========params==========
	 *
	 * `paths` :Array : 音效文件的路径json集合，可以同时播放多个路径文件，支持本地路径(fs://, widget://)
	 *
	 * `alert` :boolean : （可选项）播放音效时手机是否震动，暂仅支持iOS平台
	 */
	play(params:soundPlayer_play_Params):void

}
interface soundPlayer_playSound_Params {
	/**音效文件的路径json集合，以路径作为key，每个key对应一段属性，可以同时播放多个路径文件，支持本地路径(fs://, widget://)*/ 
	paths:JSON,

	/**（可选项）播放音效时手机是否震动，暂仅支持iOS平台*/ 
	alert?:boolean,

}

interface soundPlayer_stopSound_Params {
	/**音效文件路径,支持本地路径（fs://, widget://)*/ 
	paths:Array,

}

interface soundPlayer_play_Params {
	/**音效文件的路径json集合，可以同时播放多个路径文件，支持本地路径(fs://, widget://)*/ 
	paths:Array,

	/**（可选项）播放音效时手机是否震动，暂仅支持iOS平台*/ 
	alert?:boolean,

}

interface netSpeed {
	/**
	 * `获取实时网速`
	 * ========params==========
	 *
	 * `fresh` :number : （可选项）设置获取网速的时间间隔
	 */
	getnetSpeed(params:netSpeed_getnetSpeed_Params, callback?: (ret:JSON) => void):void

	/** 销毁实时网速,当应用不需要再获取网速时，需调用次方法释放内存，防止内存溢出。*/ 
	destroy():void

}
interface netSpeed_getnetSpeed_Params {
	/**（可选项）设置获取网速的时间间隔*/ 
	fresh?:number,

}

interface easyShareImages {
	/**
	 * `分享多图`
	 * ========params==========
	 *
	 * `type` :number : 分享类型：0/1/2   0本地sdcard文件路径； 1网络url； 2 base64（ps：请严格按照参数传参，否则容易出错）
	 *
	 * `title` :string : 分享的文字内容
	 *
	 * `list` :Array : 分享的图片地址或者base64数组，例如：网络地址['https://www.baidu.com/img/bd_logo1.png?where=super',	'https://www.baidu.com/img/bd_logo1.png?where=super']； android本地sdcard地址['/sdcard/1.png','/sdcard/2.png'];base64字符串由于太长，不再举例。
	 */
	sharePics(params:easyShareImages_sharePics_Params):void

}
interface easyShareImages_sharePics_Params {
	/**分享类型：0/1/2   0本地sdcard文件路径； 1网络url； 2 base64（ps：请严格按照参数传参，否则容易出错）*/ 
	type:number,

	/**分享的文字内容*/ 
	title:string,

	/**分享的图片地址或者base64数组，例如：网络地址['https://www.baidu.com/img/bd_logo1.png?where=super',	'https://www.baidu.com/img/bd_logo1.png?where=super']； android本地sdcard地址['/sdcard/1.png','/sdcard/2.png'];base64字符串由于太长，不再举例。*/ 
	list:Array,

}

interface fileScan {
	/**     打开文件扫描器*/ 
	openFileScan():void

}
interface videoMerge {
	/**
	 * `合并视频`
	 * ========params==========
	 *
	 * `videos` :Array : 合并的视频的地址组成的数组，要求本地路径（fs://、widget://。android端不支持widget://）
	 *
	 * `export` :JSON : （可选项）输出视频的配置
	 *
	 * `quality` :string : （可选项）录像视频质量（android不支持）
	 */
	merge(params:videoMerge_merge_Params, callback?: (ret:JSON) => void):void

	/** 清除本模块产生的视频文件，本接口仅当 merge -> export -> path 参数不传或传空时有效，**本接口只清除本模块产生的临时数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

}
interface videoMerge_merge_Params {
	/**合并的视频的地址组成的数组，要求本地路径（fs://、widget://。android端不支持widget://）*/ 
	videos:Array,

	/**（可选项）输出视频的配置*/ 
	export?:JSON,

	/**（可选项）录像视频质量（android不支持）*/ 
	quality?:string,

}

interface svideo {
	/** 启动svideo模块,打开摄像头，等待用户录制。*/ 
	start(callback?: (ret:JSON) => void):void

}
interface bookReader {
	/**
	 * `打开阅读器`
	 * ========params==========
	 *
	 * `x` :number : （可选项）模块视图左上角点的坐标
	 *
	 * `y` :number : （可选项）模块视图左上角点的坐标
	 *
	 * `w` :number : （可选项）模块视图的宽
	 *
	 * `h` :number : （可选项）模块视图的高
	 *
	 * `bg` :string : （可选项）阅读器的背景色，支持 rgb，rgba，img，#
	 *
	 * `animType` :string : 翻页动画效果，可为空。（保留使用）
	 *
	 * `progress` :number : （可选项）阅读器打开时的进度的百分比，取值范围 0-100
	 *
	 * `textStyle` :JSON : （可选项）阅读文本字体样式设置
	 *
	 * `filePath` :string : 阅读器数据源文件地址，支持 widget 等本地路径协议，必传
	 *
	 * `codingType` :string : （可选项）所要阅读的文本的编码格式，取值范围:gbk、utf8
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	open(params:bookReader_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置阅读器的参数`
	 * ========params==========
	 *
	 * `bg` :string : （可选项）阅读器的背景色，支持 rgb，rgba，img，#
	 *
	 * `animType` :string : 翻页动画效果，可为空。（保留使用）
	 *
	 * `progress` :number : （可选项）阅读器打开时的进度百分比，取值范围 0-100
	 *
	 * `textStyle` :JSON : （可选项）阅读文本字体样式设置
	 *
	 * `filePath` :string : （可选项）阅读器数据源文件地址，支持 widget 等本地路径协议
	 */
	setValue(params:bookReader_setValue_Params, callback?: (ret:JSON) => void):void

	/** 获取屏幕亮度，iOS 平台上获取的是系统屏幕亮度，Android 平台上获取的是本 APP 内的屏幕亮度*/ 
	getBrightness(callback?: (ret:JSON) => void):void

}
interface bookReader_open_Params {
	/**（可选项）模块视图左上角点的坐标*/ 
	x?:number,

	/**（可选项）模块视图左上角点的坐标*/ 
	y?:number,

	/**（可选项）模块视图的宽*/ 
	w?:number,

	/**（可选项）模块视图的高*/ 
	h?:number,

	/**（可选项）阅读器的背景色，支持 rgb，rgba，img，#*/ 
	bg?:string,

	/**翻页动画效果，可为空。（保留使用）*/ 
	animType:string,

	/**（可选项）阅读器打开时的进度的百分比，取值范围 0-100*/ 
	progress?:number,

	/**（可选项）阅读文本字体样式设置*/ 
	textStyle?:JSON,

	/**阅读器数据源文件地址，支持 widget 等本地路径协议，必传*/ 
	filePath:string,

	/**（可选项）所要阅读的文本的编码格式，取值范围:gbk、utf8*/ 
	codingType?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

}

interface bookReader_setValue_Params {
	/**（可选项）阅读器的背景色，支持 rgb，rgba，img，#*/ 
	bg?:string,

	/**翻页动画效果，可为空。（保留使用）*/ 
	animType:string,

	/**（可选项）阅读器打开时的进度百分比，取值范围 0-100*/ 
	progress?:number,

	/**（可选项）阅读文本字体样式设置*/ 
	textStyle?:JSON,

	/**（可选项）阅读器数据源文件地址，支持 widget 等本地路径协议*/ 
	filePath?:string,

}

interface softInputMgr {
	/** 弹入和弹出键盘*/ 
	toggleKeyboard():void

}
interface screenLock {
}
interface videoScreenshots {
	/**
	 * `视频截图`
	 * ========params==========
	 *
	 * `videoUrl` :string : 视频地址，支持本地(widget://和fs://)和网络视频
	 *
	 * `time` :number : 指定位置(单位为秒)
	 *
	 * `isRotation` :boolean : （可选项）是否顺时针90°旋转
	 *
	 * `isAblum` :boolean : （可选项）是否保存相册
	 *
	 * `name` :string : （必选项）图片名
	 */
	screenshots(params:videoScreenshots_screenshots_Params, callback?: (ret:JSON) => void):void

	/** 当 screenshots 接口内 未传 path 值，则模块会将转换后的 图片保存在缓存目录。调用本接口，可清除本模块产生的所有图片。调用 api 对象下的 clearCache 接口会清除缓存目录下所有文件（不仅本模块产生的图片文件）。*/ 
	clearCache():void

}
interface videoScreenshots_screenshots_Params {
	/**视频地址，支持本地(widget://和fs://)和网络视频*/ 
	videoUrl:string,

	/**指定位置(单位为秒)*/ 
	time:number,

	/**（可选项）是否顺时针90°旋转*/ 
	isRotation?:boolean,

	/**（可选项）是否保存相册*/ 
	isAblum?:boolean,

	/**（必选项）图片名*/ 
	name:string,

}

interface judgeNotification {
	/** 打开对应设置页面*/ 
	judge():void

}
interface replay {
	/** 开始录屏（ios用户按下home键退出APP再次进入后录屏会停止并保存录屏文件到相册根目录）*/ 
	start():void

	/**
	 * `停止录屏（调用本接口停止录屏视频文件会存入相册中）`
	 * ========params==========
	 *
	 * `folderName` :any : 视频存入相册文件夹名称，创建失败视频将存入相册根路径
	 */
	stopAlbum(params:replay_stopAlbum_Params, callback?: (ret:JSON) => void):void

	/** 停止录屏（ios调用本接口停止录屏视频文件会存入沙盒并返回文件路径）*/ 
	stopShahe():void

	/** 开始录屏（调用iOS ReplayKi SDK，录屏结束后会弹出回放的预览页面，在预览中可以选择保存视频到相册中、放弃、或者分享出去，不能保存在沙盒路径中，当APP推入后台时录屏将暂停，再次进入APP后录屏恢复。注意本接口在iPhone设备上仅支持 iOS9.0 及以上版本。）*/ 
	startReplayKit():void

	/** 停止录屏（调用iOS ReplayKi Sdk，注意本接口在iPhone设备上仅支持 iOS9.0 及以上版本。）*/ 
	stopReplayKit():void

	/** 清除沙盒下路径所有视频资源,android清除录制默认路径下所有视频资源*/ 
	clearPath():void

}
interface replay_stopAlbum_Params {
	/**视频存入相册文件夹名称，创建失败视频将存入相册根路径*/ 
	folderName:any,

}

interface m3u8Downloader {
	/**
	 * `启动下载服务。`
	 * ========params==========
	 *
	 * `root` :string : （可选项）保存文件的根目录，默认为m3u8_downloader，都是在sd卡的根路径之下。
	 */
	startService(params:m3u8Downloader_startService_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询下载进度。`
	 * ========params==========
	 *
	 * `url` :string : （必填）下载m3u8的url。
	 */
	getProgress(params:m3u8Downloader_getProgress_Params, callback?: (ret:JSON) => void):void

}
interface m3u8Downloader_startService_Params {
	/**（可选项）保存文件的根目录，默认为m3u8_downloader，都是在sd卡的根路径之下。*/ 
	root?:string,

}

interface m3u8Downloader_getProgress_Params {
	/**（必填）下载m3u8的url。*/ 
	url:string,

}

interface audioStreamer {
	/**
	 * `打开音频播放器，并播放。`
	 * ========params==========
	 *
	 * `path` :string : 音频资源地址，支持本地和网络路径（fs://、widget://、http://、https:// 等）
	 */
	openPlayer(params:audioStreamer_openPlayer_Params, callback?: (ret:JSON) => void):void

	/** 暂停播放 ，如果想恢复播放可调用openPlayer继续播放(仅支持安卓这样调用)*/ 
	pause():void

	/** 恢复播放，仅支持iOS*/ 
	resume():void

	/** 停止播放*/ 
	stop():void

	/**
	 * `设置播放位置`
	 * ========params==========
	 *
	 * `time` :number : （可选项）播放位置，取值范围大于 0 不超过当前播放音频的总时长，单位为秒（s）
	 */
	seekToTime(params:audioStreamer_seekToTime_Params):void

	/**
	 * `设置是否循环播放`
	 * ========params==========
	 *
	 * `loop` :boolean : 设置是否循环播放
	 */
	setLoop(params:audioStreamer_setLoop_Params):void

	/** 获取当前播放的位置*/ 
	getCurrentTime():void

	/** 获取已缓冲的音频文件占音频文件的百分比*/ 
	getBufferingRatio():void

	/** 播放状态监听*/ 
	addEventListener():void

	/** 监听实时播放进度*/ 
	addProgressListener():void

	/** 移除实时播放进度*/ 
	removeProgressListener():void

	/**
	 * `设置音量`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）音量大小（0-1）
	 */
	setVolume(params:audioStreamer_setVolume_Params):void

	/** 获取音量*/ 
	getVolume():void

}
interface audioStreamer_openPlayer_Params {
	/**音频资源地址，支持本地和网络路径（fs://、widget://、http://、https:// 等）*/ 
	path:string,

}

interface audioStreamer_seekToTime_Params {
	/**（可选项）播放位置，取值范围大于 0 不超过当前播放音频的总时长，单位为秒（s）*/ 
	time?:number,

}

interface audioStreamer_setLoop_Params {
	/**设置是否循环播放*/ 
	loop:boolean,

}

interface audioStreamer_setVolume_Params {
	/**（可选项）音量大小（0-1）*/ 
	volume?:number,

}

interface sysPrint {
	/** 跳转系统打印设置页面*/ 
	toSystemPrintPage(callback?: (ret:JSON) => void):void

	/** 打印pdf*/ 
	printPdf(callback?: (ret:JSON) => void):void

	/** 打印图片*/ 
	printImg(callback?: (ret:JSON) => void):void

	/** 判断是否又打印服务*/ 
	hasPrintService(callback?: (ret:JSON) => void):void

}
interface photoBrowser {
	/**
	 * `打开图片浏览器`
	 * ========params==========
	 *
	 * `images` :Array : 要读取的图片路径组成的数组，图片路径支持 fs://、http:// 协议、base64
	 *
	 * `activeIndex` :number : （可选项）当前要显示的图片在图片路径数组中的索引
	 *
	 * `placeholderImg` :string : （可选项）当加载网络图片时显示的占位图路径，要求本地图片路径（widget://、fs://）
	 *
	 * `bgColor` :string : （可选项）图片浏览器背景色，支持 rgb、rgba、#
	 *
	 * `zoomEnabled` :boolean : （可选项）是否打开缩放手势识别功能（随手势放大缩小图片）
	 *
	 * `mode` :number : （可选项）图片的现实模式；1：为图片原本大小 2：图片宽度等比例放大到宽等于屏幕款;android不支持此参数
	 *
	 * `atime` :number : （可选项）打开动画的执行时间，传0无动画
	 */
	open(params:photoBrowser_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭图片浏览器*/ 
	close():void

	/** 隐藏图片浏览器*/ 
	hide():void

	/** 显示图片浏览器*/ 
	show():void

	/**
	 * `设置当前显示图片`
	 * ========params==========
	 *
	 * `index` :number : （可选项）当前要显示的图片在图片路径数组中的索引
	 */
	setIndex(params:photoBrowser_setIndex_Params):void

	/** 获取当前图片在图片路径数组内的索引*/ 
	getIndex():void

	/**
	 * `获取指定图片在本地的绝对路径`
	 * ========params==========
	 *
	 * `index` :number : 指定图片在图片数组中的索引
	 */
	getImage(params:photoBrowser_getImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置指定位置的图片，**若设置的是网络图片加载成功或失败会给 open 接口回调该加载事件**`
	 * ========params==========
	 *
	 * `index` :number : （可选项）指定图片在图片数组中的索引
	 *
	 * `image` :string : 要设置的图片路径，支持本地和网络路径（fs://、http://）
	 */
	setImage(params:photoBrowser_setImage_Params):void

	/**
	 * `往已打开的图片浏览器里添加图片（拼接在最后）`
	 * ========params==========
	 *
	 * `images` :Array : 要拼接的图片路径组成的数组，图片路径支持 fs://、http:// 协议
	 */
	appendImage(params:photoBrowser_appendImage_Params):void

	/**
	 * `删除指定位置的图片`
	 * ========params==========
	 *
	 * `index` :number : （可选项）删除的指定图片在图片数组中的索引
	 */
	deleteImage(params:photoBrowser_deleteImage_Params):void

	/** 清除缓存到本地的网络图片，**本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

}
interface photoBrowser_open_Params {
	/**要读取的图片路径组成的数组，图片路径支持 fs://、http:// 协议、base64*/ 
	images:Array,

	/**（可选项）当前要显示的图片在图片路径数组中的索引*/ 
	activeIndex?:number,

	/**（可选项）当加载网络图片时显示的占位图路径，要求本地图片路径（widget://、fs://）*/ 
	placeholderImg?:string,

	/**（可选项）图片浏览器背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）是否打开缩放手势识别功能（随手势放大缩小图片）*/ 
	zoomEnabled?:boolean,

	/**（可选项）图片的现实模式；1：为图片原本大小 2：图片宽度等比例放大到宽等于屏幕款;android不支持此参数*/ 
	mode?:number,

	/**（可选项）打开动画的执行时间，传0无动画*/ 
	atime?:number,

}

interface photoBrowser_setIndex_Params {
	/**（可选项）当前要显示的图片在图片路径数组中的索引*/ 
	index?:number,

}

interface photoBrowser_getImage_Params {
	/**指定图片在图片数组中的索引*/ 
	index:number,

}

interface photoBrowser_setImage_Params {
	/**（可选项）指定图片在图片数组中的索引*/ 
	index?:number,

	/**要设置的图片路径，支持本地和网络路径（fs://、http://）*/ 
	image:string,

}

interface photoBrowser_appendImage_Params {
	/**要拼接的图片路径组成的数组，图片路径支持 fs://、http:// 协议*/ 
	images:Array,

}

interface photoBrowser_deleteImage_Params {
	/**（可选项）删除的指定图片在图片数组中的索引*/ 
	index?:number,

}

interface mySqlUtils {
	/** 连接数据库*/ 
	connect(callback?: (ret:JSON) => void):void

	/** 判断数据库是否连接，**本接口仅支持 iOS 端。***/ 
	isConnected(callback?: (ret:JSON) => void):void

	/** 在 iOS 端执行一段 SQL 语句（select除外），**仅支持 iOS 平台***/ 
	executeSQLString(callback?: (ret:JSON) => void):void

	/** 增加删除操作*/ 
	addOrDel(callback?: (ret:JSON) => void):void

	/** 修改数据库数据*/ 
	update(callback?: (ret:JSON) => void):void

}
interface batteryManager {
	/** 获取当前电池的充电状态*/ 
	getBatteryStatus():void

	/** 电池健康信息*/ 
	getBatteryHealthInfo():void

	/** 是否取出电池（注意：有些手机即使取出电池，只需要连接USB也可以工作，iOS 可以忽略该方法）*/ 
	isBatteryPresent():void

	/** 获取当前电池剩余电量*/ 
	getBatteryLevel():void

	/** 获取当前电池剩余电量*/ 
	getBatteryScale():void

	/** 获取当前电池的充电插线类型*/ 
	getBatteryPluggedType():void

	/** 获取当前电池的电压*/ 
	getBatteryVoltage():void

	/** 获取当前电池的电压*/ 
	getBatteryTemperature():void

	/** 电池技术*/ 
	getBatteryTechnology():void

}
interface myWebSocket {
	/**
	 * `打开连接<br>`
	 * ========params==========
	 *
	 * `url` :string : 服务端地址
	 *
	 * `pingInterval` :any : （可选项）心跳间隔，单位秒，设置大于0时起效果
	 *
	 * `pingData` :string : （可选项）心跳数据，配合pingInterval 使用
	 *
	 * `msg` :string : 发送内容
	 */
	open(params:myWebSocket_open_Params, callback?: (ret:JSON) => void):void

}
interface myWebSocket_open_Params {
	/**服务端地址*/ 
	url:string,

	/**（可选项）心跳间隔，单位秒，设置大于0时起效果*/ 
	pingInterval?:any,

	/**（可选项）心跳数据，配合pingInterval 使用*/ 
	pingData?:string,

	/**发送内容*/ 
	msg:string,

}

interface imageEdit {
	/**
	 * `添加图片`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）图片的位置及尺寸
	 *
	 * `bgColor` :string : 模块的背景颜色，支持rgb、rgba
	 *
	 * `path` :string : 要编辑的图片的路径，要求本地路径（fs://、widget://）
	 *
	 * `contentMode` :string : （可选项）图片填充模式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:imageEdit_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置画笔，用户点击某个形状（矩形框、圆形框、文本和箭头，不包括线条）时，模块会自动动态调整这个形状的边框颜色、边框粗细(如果是文字，就是文字颜色和文字字体大小)为当前画笔的样式。`
	 * ========params==========
	 *
	 * `color` :string : (可选项)画笔颜色，支持rgb、rgba、#
	 *
	 * `width` :number : (可选项)画笔粗细
	 *
	 * `type` :string : (可选项)画笔类型
	 *
	 * `size` :number : (可选项)文字的大小，仅当 type 为 text 的时候有效
	 */
	setBrush(params:imageEdit_setBrush_Params):void

	/**
	 * `添加监听事件`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件名字
	 */
	addEventListener(params:imageEdit_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `保存编辑后的图片`
	 * ========params==========
	 *
	 * `path` :string : （可选项）保存图片路径，要求本地路径（fs://），注意图片后缀名输入完整。若不传或传空，则模块默认将图片保存到临时数据文件夹下
	 *
	 * `copyToAlbum` :boolean : （可选项）是否将结果同时保存到系统相册
	 */
	save(params:imageEdit_save_Params, callback?: (ret:JSON) => void):void

	/** 清除本模块产生的图片文件，本接口仅当 save -> path 参数不传或传空时有效，**本接口只清除本模块产生的临时数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

	/**
	 * `重新设置模块位置、尺寸`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 */
	resetRect(params:imageEdit_resetRect_Params):void

}
interface imageEdit_open_Params {
	/**（可选项）图片的位置及尺寸*/ 
	rect?:JSON,

	/**模块的背景颜色，支持rgb、rgba*/ 
	bgColor:string,

	/**要编辑的图片的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**（可选项）图片填充模式*/ 
	contentMode?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface imageEdit_setBrush_Params {
	/**(可选项)画笔颜色，支持rgb、rgba、#*/ 
	color?:string,

	/**(可选项)画笔粗细*/ 
	width?:number,

	/**(可选项)画笔类型*/ 
	type?:string,

	/**(可选项)文字的大小，仅当 type 为 text 的时候有效*/ 
	size?:number,

}

interface imageEdit_addEventListener_Params {
	/**监听的事件名字*/ 
	name:string,

}

interface imageEdit_save_Params {
	/**（可选项）保存图片路径，要求本地路径（fs://），注意图片后缀名输入完整。若不传或传空，则模块默认将图片保存到临时数据文件夹下*/ 
	path?:string,

	/**（可选项）是否将结果同时保存到系统相册*/ 
	copyToAlbum?:boolean,

}

interface imageEdit_resetRect_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

}

interface screenClip {
	/**
	 * `打开截图功能`
	 * ========params==========
	 *
	 * `bg` :string : （可选项）背景颜色设置，支持#，rgb，rgba
	 *
	 * `cutFrame` :JSON : （可选项）截取框配置
	 *
	 * `save` :JSON : 所生成的图片保存位置
	 */
	open(params:screenClip_open_Params, callback?: (ret:JSON) => void):void

}
interface screenClip_open_Params {
	/**（可选项）背景颜色设置，支持#，rgb，rgba*/ 
	bg?:string,

	/**（可选项）截取框配置*/ 
	cutFrame?:JSON,

	/**所生成的图片保存位置*/ 
	save:JSON,

}

interface sortList {
	/**
	 * `打开索引列表`
	 * ========params==========
	 *
	 * `rect` :JSON : 索引器的frame
	 *
	 * `height` :number : 每个字母显示的高度（仅iOS支持）
	 *
	 * `bgColor` :string : 索引器背景颜色
	 *
	 * `dataArray` :Array : 数据源,名单列表
	 *
	 * `style` :JSON : null
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）（仅android支持）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动（仅android支持）
	 */
	open(params:sortList_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭索引列表*/ 
	close():void

	/** 隐藏索引列表*/ 
	hide():void

	/** 显示索引列表*/ 
	show():void

	/**
	 * `更新索引列表`
	 * ========params==========
	 *
	 * `dataArray` :Array : 数据源,名单列表
	 */
	upLoad(params:sortList_upLoad_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加数据`
	 * ========params==========
	 *
	 * `dataArray` :Array : 数据源,名单列表
	 */
	addSource(params:sortList_addSource_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除数据（仅iOS支持）`
	 * ========params==========
	 *
	 * `dataArray` :Array : 数据源,名单列表
	 */
	reduceSource(params:sortList_reduceSource_Params, callback?: (ret:JSON) => void):void

}
interface sortList_open_Params {
	/**索引器的frame*/ 
	rect:JSON,

	/**每个字母显示的高度（仅iOS支持）*/ 
	height:number,

	/**索引器背景颜色*/ 
	bgColor:string,

	/**数据源,名单列表*/ 
	dataArray:Array,

	/**null*/ 
	style:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）（仅android支持）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动（仅android支持）*/ 
	fixed?:boolean,

}

interface sortList_upLoad_Params {
	/**数据源,名单列表*/ 
	dataArray:Array,

}

interface sortList_addSource_Params {
	/**数据源,名单列表*/ 
	dataArray:Array,

}

interface sortList_reduceSource_Params {
	/**数据源,名单列表*/ 
	dataArray:Array,

}

interface iNoRobot {
}
interface sapSso {
	/** 获取token*/ 
	getToken():void

	/** 跳转到 sap 平台的 APP，仅支持 iOS 端。*/ 
	openSap():void

}
interface imageOptim {
	/**
	 * `压缩图片`
	 * ========params==========
	 *
	 * `imgPath` :string : （必填）原图片的路径,支持绝对路径和UZ路径
	 *
	 * `quality` :any : （必填）图片质量
	 *
	 * `width` :any : 设置图片的宽度,如果仅设宽度，模块将固定宽度,将高度自动进行等比例设置
	 *
	 * `height` :any : 设置图片的高度,如果仅设高度，模块将固定搞定将宽度自动进行等比例设置
	 *
	 * `destinationPath` :string : (选填)输出路径，支持绝对路径和UZ路径
	 */
	compress(params:imageOptim_compress_Params, callback?: (ret:JSON) => void):void

}
interface imageOptim_compress_Params {
	/**（必填）原图片的路径,支持绝对路径和UZ路径*/ 
	imgPath:string,

	/**（必填）图片质量*/ 
	quality:any,

	/**设置图片的宽度,如果仅设宽度，模块将固定宽度,将高度自动进行等比例设置*/ 
	width:any,

	/**设置图片的高度,如果仅设高度，模块将固定搞定将宽度自动进行等比例设置*/ 
	height:any,

	/**(选填)输出路径，支持绝对路径和UZ路径*/ 
	destinationPath:string,

}

interface audioCombine {
	/**
	 * `音频合并`
	 * ========params==========
	 *
	 * `wayPath` :string : （可选项）音频路径1;支持本地和网络路径（fs://、widget://、http://、https:// 等）
	 *
	 * `easyPath` :string : （可选项）音频路径2;支持本地和网络路径（fs://、widget://、http://、https:// 等）
	 */
	audioMerge(params:audioCombine_audioMerge_Params, callback?: (ret:JSON) => void):void

	/**
	 * `音频剪切`
	 * ========params==========
	 *
	 * `inputPath` :string : （可选项）需要剪切的音频路径;支持widget://,fs://
	 */
	audioClip(params:audioCombine_audioClip_Params, callback?: (ret:JSON) => void):void

}
interface audioCombine_audioMerge_Params {
	/**（可选项）音频路径1;支持本地和网络路径（fs://、widget://、http://、https:// 等）*/ 
	wayPath?:string,

	/**（可选项）音频路径2;支持本地和网络路径（fs://、widget://、http://、https:// 等）*/ 
	easyPath?:string,

}

interface audioCombine_audioClip_Params {
	/**（可选项）需要剪切的音频路径;支持widget://,fs://*/ 
	inputPath?:string,

}

interface touchDebugger {
}
interface Apple {
	/**
	 * `用苹果账号登录`
	 * ========params==========
	 *
	 * `requestedScopes` :Array : 范围，仅在第一次登录有效
	 */
	login(params:Apple_login_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取授权状态`
	 * ========params==========
	 *
	 * `user` :string : 用户ID
	 */
	getAuthticationState(params:Apple_getAuthticationState_Params, callback?: (ret:JSON) => void):void

	/** 监听用户从设置内删除该App的授权事件，注意：删除后无法再次授权该App*/ 
	observeAppleSignInState():void

}
interface Apple_login_Params {
	/**范围，仅在第一次登录有效*/ 
	requestedScopes:Array,

}

interface Apple_getAuthticationState_Params {
	/**用户ID*/ 
	user:string,

}

interface photoSelect {
}
interface pdfViewer {
	/** 打开pdf文档视图*/ 
	openView():void

	/** 打开pdf文档缩略图*/ 
	preView():void

	/** 打开pdf文档目录结构视图（如果pdf文档没有做目录，则会返回来失败）*/ 
	category():void

	/** 清除缓存到本地的文件，本接口只清除本模块缓存的数据，若要清除本app缓存的所有数据这调用api.clearCache*/ 
	clearCache():void

	/** 显示文档视图*/ 
	showView():void

	/** 隐藏文档视图*/ 
	hideView():void

	/** 关闭文档视图*/ 
	closeView():void

}
interface imageColorParser {
	/**
	 * `异步解析.后台解析,性能最高.`
	 * ========params==========
	 *
	 * `img` :string : 图片路径.支持 widget:// , fs:// 等本地路径.支持png、jpg等图片.
	 *
	 * `size` :JSON : 图片尺寸.不需要与图片真实尺寸一致.用于控制图片缩放级别.越小,则解析性能越高;越大,则解析的颜色值更准确.
	 */
	parse(params:imageColorParser_parse_Params, callback?: (ret:JSON) => void):void

	/**
	 * `同步解析. 频繁调用或图片过大时,可能会引起 App 卡顿.`
	 * ========params==========
	 *
	 * `img` :string : 图片路径.支持 widget:// , fs:// 等本地路径.支持png、jpg等图片.
	 *
	 * `size` :JSON : 图片尺寸.不需要与图片真实尺寸一致.用于控制图片缩放级别.越小,则解析性能越高;越大,则解析的颜色值更准确.
	 */
	parseSync(params:imageColorParser_parseSync_Params):JSON;

}
interface imageColorParser_parse_Params {
	/**图片路径.支持 widget:// , fs:// 等本地路径.支持png、jpg等图片.*/ 
	img:string,

	/**图片尺寸.不需要与图片真实尺寸一致.用于控制图片缩放级别.越小,则解析性能越高;越大,则解析的颜色值更准确.*/ 
	size:JSON,

}

interface imageColorParser_parseSync_Params {
	/**图片路径.支持 widget:// , fs:// 等本地路径.支持png、jpg等图片.*/ 
	img:string,

	/**图片尺寸.不需要与图片真实尺寸一致.用于控制图片缩放级别.越小,则解析性能越高;越大,则解析的颜色值更准确.*/ 
	size:JSON,

}

interface soundDetection {
	/** 结束分贝检测*/ 
	stop():void

	/** 设置返回间隔*/ 
	setInterval(callback?: (ret:JSON) => void):void

}
interface uimusic {
	/**
	 * `播放本地视频、网络音乐`
	 * ========params==========
	 *
	 * `musics` :Array : （必填项）模块的位置及尺寸
	 *
	 * `ttf` :string : （可选项）字体文件(仅支持widget://路径)。
	 *
	 * `downmusicBtn` :boolean : （可选项）是否显示下载按钮。
	 *
	 * `fenxiangBtn` :boolean : （可选项）是否显示分享按钮。
	 *
	 * `pinglunBtn` :boolean : （可选项）是否显示评论按钮。
	 *
	 * `nameTextSize` :any : （可选项）歌曲名称字体大小。
	 *
	 * `singerTextSize` :any : （可选项）歌曲演唱者字体大小。
	 *
	 * `isShowUi` :boolean : （可选项）是否默认打开UI界面。
	 */
	playMusic(params:uimusic_playMusic_Params, callback?: (ret:JSON) => void):void

	/** 显示播放界面*/ 
	showUI(callback?: (ret:JSON) => void):void

	/** 隐藏播放界面*/ 
	closeUI(callback?: (ret:JSON) => void):void

	/**
	 * `音乐界面按钮监听`
	 * ========params==========
	 *
	 * `name` :string : （必填项）监听事件类型>>隐藏播放器界面:closeui 评论按钮:pinglun 分享按钮:fenxiang 下载按钮:downmusic
	 */
	addEventListener(params:uimusic_addEventListener_Params, callback?: (ret:JSON) => void):void

	/** 添加播放音乐*/ 
	addMusic():void

	/**
	 * `通过数组序号播放音乐`
	 * ========params==========
	 *
	 * `index` :number : （必填项）待播放音乐信息的序号(备注：other传值时为非必填项)
	 *
	 * `other` :any : （必填项）自定义属性值，可以是自己的主键id(备注：index传值时为非必填项)
	 */
	selectMusic(params:uimusic_selectMusic_Params, callback?: (ret:JSON) => void):void

	/** 获取当前正在播放的音乐*/ 
	getCurrentPlayer(callback?: (ret:JSON) => void):void

	/** 停止正在播放的音乐，重新播放需要重新初始化播放器,执行退出应用前请执行该接口*/ 
	stopMusic(callback?: (ret:JSON) => void):void

	/** 暂停或者继续播放音乐*/ 
	musicPlayPause(callback?: (ret:JSON) => void):void

	/** 切换上一曲播放*/ 
	musicPrevious(callback?: (ret:JSON) => void):void

	/** 切换下一曲播放*/ 
	musicNext(callback?: (ret:JSON) => void):void

}
interface uimusic_playMusic_Params {
	/**（必填项）模块的位置及尺寸*/ 
	musics:Array,

	/**（可选项）字体文件(仅支持widget://路径)。*/ 
	ttf?:string,

	/**（可选项）是否显示下载按钮。*/ 
	downmusicBtn?:boolean,

	/**（可选项）是否显示分享按钮。*/ 
	fenxiangBtn?:boolean,

	/**（可选项）是否显示评论按钮。*/ 
	pinglunBtn?:boolean,

	/**（可选项）歌曲名称字体大小。*/ 
	nameTextSize?:any,

	/**（可选项）歌曲演唱者字体大小。*/ 
	singerTextSize?:any,

	/**（可选项）是否默认打开UI界面。*/ 
	isShowUi?:boolean,

}

interface uimusic_addEventListener_Params {
	/**（必填项）监听事件类型>>隐藏播放器界面:closeui 评论按钮:pinglun 分享按钮:fenxiang 下载按钮:downmusic*/ 
	name:string,

}

interface uimusic_selectMusic_Params {
	/**（必填项）待播放音乐信息的序号(备注：other传值时为非必填项)*/ 
	index:number,

	/**（必填项）自定义属性值，可以是自己的主键id(备注：index传值时为非必填项)*/ 
	other:any,

}

interface audioPlayer {
	/**
	 * `初始化音频播放器，并播放。若是网络音频资源则同时开始缓冲音频文件到本地`
	 * ========params==========
	 *
	 * `path` :string : 音频资源地址，支持本地和网络路径（fs://、widget://、http://、ipod-library:// 等）
	 *
	 * `cache` :boolean : 是否支持缓存网络资源
	 */
	initPlayer(params:audioPlayer_initPlayer_Params, callback?: (ret:JSON) => void):void

	/** 播放音频，只有当前播放器为暂停、播放完成状态时有效*/ 
	play():void

	/** 暂停播放*/ 
	pause():void

	/** 停止播放*/ 
	stop():void

	/**
	 * `设置音量`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）音量大小（0-1）
	 *
	 * `system` :boolean : （可选项）是否设置系统音量，若为false表示设置播放器音量，仅支持iOS端
	 */
	setVolume(params:audioPlayer_setVolume_Params):void

	/**
	 * `获取音量`
	 * ========params==========
	 *
	 * `system` :boolean : （可选项）是否获取系统音量，若为false表示获取播放器音量，仅支持iOS端
	 */
	getVolume(params:audioPlayer_getVolume_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置播放位置`
	 * ========params==========
	 *
	 * `current` :number : （可选项）播放位置，取值范围大于 0 不超过当前播放音频的总时长，单位为秒（s）
	 */
	setCurrent(params:audioPlayer_setCurrent_Params):void

	/** 获取当前播放的位置*/ 
	getCurrent():void

	/** 获取当前播放器的状态*/ 
	getState():void

	/** 获取已缓冲的音频文件占音频文件的百分比*/ 
	getBufferRatio():void

	/**
	 * `监听事件`
	 * ========params==========
	 *
	 * `name` :string : （可选项）监听的事件类型
	 */
	addEventListener(params:audioPlayer_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除指定事件的监听`
	 * ========params==========
	 *
	 * `name` :string : （可选项）要移除的监听事件类型
	 */
	removeEventListener(params:audioPlayer_removeEventListener_Params):void

	/** 清除缓存到本地的音频文件，**本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用api.clearCache***/ 
	clearCache():void

	/** 扫描本地音频资源，在 iOS 上仅扫描系统音乐库资源*/ 
	scanAudioLibrary():void

	/**
	 * `获取本地音频文件属性（文件大小和音频时长）`
	 * ========params==========
	 *
	 * `path` :string : 音频的路径 （仅支持 fs://）
	 */
	getAttr(params:audioPlayer_getAttr_Params, callback?: (ret:JSON) => void):void

}
interface audioPlayer_initPlayer_Params {
	/**音频资源地址，支持本地和网络路径（fs://、widget://、http://、ipod-library:// 等）*/ 
	path:string,

	/**是否支持缓存网络资源*/ 
	cache:boolean,

}

interface audioPlayer_setVolume_Params {
	/**（可选项）音量大小（0-1）*/ 
	volume?:number,

	/**（可选项）是否设置系统音量，若为false表示设置播放器音量，仅支持iOS端*/ 
	system?:boolean,

}

interface audioPlayer_getVolume_Params {
	/**（可选项）是否获取系统音量，若为false表示获取播放器音量，仅支持iOS端*/ 
	system?:boolean,

}

interface audioPlayer_setCurrent_Params {
	/**（可选项）播放位置，取值范围大于 0 不超过当前播放音频的总时长，单位为秒（s）*/ 
	current?:number,

}

interface audioPlayer_addEventListener_Params {
	/**（可选项）监听的事件类型*/ 
	name?:string,

}

interface audioPlayer_removeEventListener_Params {
	/**（可选项）要移除的监听事件类型*/ 
	name?:string,

}

interface audioPlayer_getAttr_Params {
	/**音频的路径 （仅支持 fs://）*/ 
	path:string,

}

interface richText {
	/**
	 * `打开富文本编辑器`
	 * ========params==========
	 *
	 * `title` :string : （可选项）顶部显示标题。
	 *
	 * `html` :string : （可选项）显示html内容。
	 *
	 * `placeholder` :string : （可选项）当打开本模块时，如果html为空需要默认显示的提示内容。
	 */
	openTextEditor(params:richText_openTextEditor_Params, callback?: (ret:JSON) => void):void

}
interface richText_openTextEditor_Params {
	/**（可选项）顶部显示标题。*/ 
	title?:string,

	/**（可选项）显示html内容。*/ 
	html?:string,

	/**（可选项）当打开本模块时，如果html为空需要默认显示的提示内容。*/ 
	placeholder?:string,

}

interface cardReader {
}
interface thumbnailUtil {
}
interface checkProxy {
	/** 是否用了代理(异步接口)*/ 
	isProxyUsed():void

	/** 是否用了VPN(异步接口)*/ 
	isVpnUsed():void

	/** 是否用了代理(同步接口)*/ 
	isProxyUsedSync():boolean;

	/** 是否用了VPN(同步接口)*/ 
	isVpnUsedSync():boolean;

}
interface playerCut {
	/**
	 * `打开视频地址`
	 * ========params==========
	 *
	 * `path` :string : 视频的路径，仅支持本地（fs://、widget://）路径
	 */
	open(params:playerCut_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `截取视频`
	 * ========params==========
	 *
	 * `cacheDir` :string : 保存地址；
	 *
	 * `startTime` :number : （选填项）截取视频的起始时间
	 *
	 * `endTime` :number : （选填项）截取视频的结束时间
	 */
	cutVideo(params:playerCut_cutVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取截取的视频的缩略图`
	 * ========params==========
	 *
	 * `number` :number : （选填项）获取缩略图个数
	 *
	 * `cacheDir` :string : 所有缩略图的保存地址的文件名；
	 */
	getVideoThumbnail(params:playerCut_getVideoThumbnail_Params, callback?: (ret:JSON) => void):void

	/** 获取本地要被截取的视频的总长度*/ 
	getVideoTime():void

}
interface playerCut_open_Params {
	/**视频的路径，仅支持本地（fs://、widget://）路径*/ 
	path:string,

}

interface playerCut_cutVideo_Params {
	/**保存地址；*/ 
	cacheDir:string,

	/**（选填项）截取视频的起始时间*/ 
	startTime:number,

	/**（选填项）截取视频的结束时间*/ 
	endTime:number,

}

interface playerCut_getVideoThumbnail_Params {
	/**（选填项）获取缩略图个数*/ 
	number:number,

	/**所有缩略图的保存地址的文件名；*/ 
	cacheDir:string,

}

interface editorText {
	/** 打开富文本页面*/ 
	open():void

	/** 关闭富文本页面*/ 
	close():void

	/** 添加文本内容*/ 
	addText():void

	/** 添加图片，支持gif图片*/ 
	addImage():void

	/**  清除文本内容*/ 
	remove():void

}
interface touping {
	/** 搜索当前局域网内支持投屏的设备*/ 
	browse():void

	/** 传入设备序号和视频地址开始投屏*/ 
	play():void

	/** 退出投屏*/ 
	stop():void

	/** 设置播放进度*/ 
	seek():void

	/** 设置音量*/ 
	volume():void

	/** 切换视频地址*/ 
	playUrl():void

}
interface videoCompression {
	/**
	 * `压缩本地视频文件`
	 * ========params==========
	 *
	 * `path` :string : 要压缩的视频文件路径，要求本地路径（fs://a/test.mp4、自定义sd卡路径）
	 *
	 * `quality` :string : （可选项）压缩视频质量，**注意：在android端要等比压缩，比如2160p为16:9 可以压缩为16:9的720p，不能压缩为4:3的480p**
	 */
	compression(params:videoCompression_compression_Params, callback?: (ret:JSON) => void):void

	/** 获取当前压缩视频的进度*/ 
	getProgress(callback?: (ret:JSON) => void):void

	/** 停止，取消视频压缩*/ 
	cancel():void

	/** 清除本地存放的压缩的视频文件，**本接口只清除本模块压缩视频文件，调用 api.clearCache接口也会清除压缩的视频文件***/ 
	clearCache():void

}
interface videoCompression_compression_Params {
	/**要压缩的视频文件路径，要求本地路径（fs://a/test.mp4、自定义sd卡路径）*/ 
	path:string,

	/**（可选项）压缩视频质量，**注意：在android端要等比压缩，比如2160p为16:9 可以压缩为16:9的720p，不能压缩为4:3的480p***/ 
	quality?:string,

}

interface mySQL {
	/** 连接MySQL数据库。*/ 
	connect(callback?: (ret:JSON) => void):void

	/** 是否连接。*/ 
	isConnected():void

	/** 执行SQL查询。*/ 
	query(callback?: (ret:JSON) => void):void

	/** 关闭连接。*/ 
	close():void

	/** 执行SQL更新。*/ 
	update(callback?: (ret:JSON) => void):void

}
interface shootPicture {
	/** 打开自定义的拍摄界面。*/ 
	shoot(callback?: (ret:JSON) => void):void

}
interface mosaic {
	/**
	 * `添加图片`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）图片的位置及尺寸
	 *
	 * `bgColor` :string : 模块的背景颜色，支持rgb、rgba
	 *
	 * `path` :boolean : （可选项）是否是整张图片被马赛克，不需要手指涂抹
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:mosaic_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `保存编辑后的图片`
	 * ========params==========
	 *
	 * `path` :string : （可选项）保存图片路径，要求本地路径（fs://），注意图片后缀名输入完整。若不传或传空，则模块默认将图片保存到临时数据文件夹下
	 *
	 * `copyToAlbum` :boolean : （可选项）是否将结果同时保存到系统相册
	 */
	save(params:mosaic_save_Params, callback?: (ret:JSON) => void):void

	/** 清除本模块产生的图片文件，本接口仅当 save -> path 参数不传或传空时有效，**本接口只清除本模块产生的临时数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

}
interface mosaic_open_Params {
	/**（可选项）图片的位置及尺寸*/ 
	rect?:JSON,

	/**模块的背景颜色，支持rgb、rgba*/ 
	bgColor:string,

	/**（可选项）是否是整张图片被马赛克，不需要手指涂抹*/ 
	path?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface mosaic_save_Params {
	/**（可选项）保存图片路径，要求本地路径（fs://），注意图片后缀名输入完整。若不传或传空，则模块默认将图片保存到临时数据文件夹下*/ 
	path?:string,

	/**（可选项）是否将结果同时保存到系统相册*/ 
	copyToAlbum?:boolean,

}

interface webSocket {
	/** websocket消息监听，可以监听连接，断开，接收消息等事件。*/ 
	addEventListener(callback?: (ret:JSON) => void):void

	/**
	 * `连接websocket`
	 * ========params==========
	 *
	 * `url` :string : （必填项）websocket的连接地址：如：ws://192.168.1.102:8887/socket。
	 *
	 * `pingInterval` :any : (可选项）心跳间隔，单位秒，设置大于0时起效果。
	 *
	 * `pingData` :string : （可选项）心跳数据，配合pingInterval 使用。
	 *
	 * `isBtyes` :boolean : （可选项）是否用流的方式发送数据。
	 */
	open(params:webSocket_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送内容`
	 * ========params==========
	 *
	 * `data` :string : （必填项）发送的消息内容。
	 *
	 * `isBtyes` :boolean : （可选项）是否用流的方式发送数据。
	 */
	send(params:webSocket_send_Params, callback?: (ret:JSON) => void):void

	/** 关闭连接*/ 
	close(callback?: (ret:JSON) => void):void

	/** 获取连接状态*/ 
	getConnectState():void

}
interface webSocket_open_Params {
	/**（必填项）websocket的连接地址：如：ws://192.168.1.102:8887/socket。*/ 
	url:string,

	/**(可选项）心跳间隔，单位秒，设置大于0时起效果。*/ 
	pingInterval?:any,

	/**（可选项）心跳数据，配合pingInterval 使用。*/ 
	pingData?:string,

	/**（可选项）是否用流的方式发送数据。*/ 
	isBtyes?:boolean,

}

interface webSocket_send_Params {
	/**（必填项）发送的消息内容。*/ 
	data:string,

	/**（可选项）是否用流的方式发送数据。*/ 
	isBtyes?:boolean,

}

interface cardcamera {
	/** 分享文本内容*/ 
	frontIdCard():void

	/** 分享文本内容*/ 
	backIdCard():void

}
interface nativeTimer {
	/** 启动一个新的计时器。*/ 
	start():void

	/** 通过计时器ID结束1个或者多个计时器。*/ 
	stop():void

	/** 修改某个计时器的循环周期（只可修改循环计时器）*/ 
	setInterval():void

	/** 向系统声明本应用保持对CPU的占用，可提高应用在手机锁屏的情况下，timer的准确率，但会消耗更多的电量。仅支持Android系统。*/ 
	acquireCpu():void

	/** 释放本应用对CPU的占用，与acquireCpu配对使用。仅支持Android系统。*/ 
	releaseCpu():void

}
interface xxtea {
	/**
	 * `设置密钥(异步接口)`
	 * ========params==========
	 *
	 * `key` :string : （必填项）
	 */
	setKey(params:xxtea_setKey_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加密(异步接口)`
	 * ========params==========
	 *
	 * `data` :string : （必填项）要加密的字符串
	 */
	encrypt(params:xxtea_encrypt_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解密(异步接口)`
	 * ========params==========
	 *
	 * `data` :string : （必填项）要解密的字符串
	 */
	decrypt(params:xxtea_decrypt_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置密钥(同步接口)`
	 * ========params==========
	 *
	 * `key` :string : （必填项）
	 */
	setKeySync(params:xxtea_setKeySync_Params):boolean;

	/**
	 * `加密(同步接口)`
	 * ========params==========
	 *
	 * `data` :string : （必填项）要加密的字符串
	 */
	encryptSync(params:xxtea_encryptSync_Params):string;

	/**
	 * `解密(同步接口)`
	 * ========params==========
	 *
	 * `data` :string : （必填项）要解密的字符串
	 */
	decryptSync(params:xxtea_decryptSync_Params):string;

}
interface xxtea_setKey_Params {
	/**（必填项）*/ 
	key:string,

}

interface xxtea_encrypt_Params {
	/**（必填项）要加密的字符串*/ 
	data:string,

}

interface xxtea_decrypt_Params {
	/**（必填项）要解密的字符串*/ 
	data:string,

}

interface xxtea_setKeySync_Params {
	/**（必填项）*/ 
	key:string,

}

interface xxtea_encryptSync_Params {
	/**（必填项）要加密的字符串*/ 
	data:string,

}

interface xxtea_decryptSync_Params {
	/**（必填项）要解密的字符串*/ 
	data:string,

}

interface epubReader {
}
interface LBAirDrop {
	/** 搜索可投屏的设备*/ 
	searchList():void

	/** 停止搜索（仅android支持）*/ 
	stopBrowse():void

	/** 链接投屏设备*/ 
	connect():void

	/** 断开连接*/ 
	disConnect():void

	/** 通过pin码获取设备，成功获取后可通过connect连接*/ 
	getDeviceByPin():void

	/**
	 * `视频投屏`
	 * ========params==========
	 *
	 * `videoType` :string : 视频类型
	 *
	 * `path` :string : 视频文件的路径 （iOS暂不支持本地视频播放）
	 *
	 * `mediaType` :number : 媒体播放类型
	 *
	 * `startPosition` :number : （可选项）播放的起始位置；默认：0
	 *
	 * `loopMode` :string : 播放循环模式
	 */
	open(params:LBAirDrop_open_Params):void

	/** 暂停播放*/ 
	pause():void

	/** 恢复播放*/ 
	resumePlay():void

	/**
	 * `设置播放进度`
	 * ========params==========
	 *
	 * `playProgress` :number : 播放进度
	 */
	seekTime(params:LBAirDrop_seekTime_Params):void

	/** 退出播放*/ 
	stop():void

	/**
	 * ` 设置音量值`
	 * ========params==========
	 *
	 * `Volume` :number : 音量值，范围0 ~ 100
	 */
	setVolume(params:LBAirDrop_setVolume_Params):void

	/**  增加音量*/ 
	addVolume():void

	/**  加少音量*/ 
	reduceVolume():void

	/**
	 * `通过扫描二维码获取到的字符串获取服务`
	 * ========params==========
	 *
	 * `codeStringValue` :string : 二维码扫描获取到的字符串
	 */
	scanString(params:LBAirDrop_scanString_Params, callback?: (ret:JSON) => void):void

	/** 是否支持推送弹幕*/ 
	canSupportPushBarrage():void

	/** 是否现在可以推送弹幕（仅iOS支持）*/ 
	canCurrentPushBarrage():void

	/** 设置播控监听*/ 
	setMediaListener():void

	/**
	 * `开启镜像（仅android支持）`
	 * ========params==========
	 *
	 * `resolutionLevel` :number : （可选项）分辨率
	 *
	 * `bitRateLevel` :number : （可选项）比特率
	 *
	 * `audioEnable` :boolean : （可选项）是否开启录制声音
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	mirror(params:LBAirDrop_mirror_Params):void

	/** 关闭镜像（仅android支持）*/ 
	stopMirror():void

}
interface LBAirDrop_open_Params {
	/**视频类型*/ 
	videoType:string,

	/**视频文件的路径 （iOS暂不支持本地视频播放）*/ 
	path:string,

	/**媒体播放类型*/ 
	mediaType:number,

	/**（可选项）播放的起始位置；默认：0*/ 
	startPosition?:number,

	/**播放循环模式*/ 
	loopMode:string,

}

interface LBAirDrop_seekTime_Params {
	/**播放进度*/ 
	playProgress:number,

}

interface LBAirDrop_setVolume_Params {
	/**音量值，范围0 ~ 100*/ 
	Volume:number,

}

interface LBAirDrop_scanString_Params {
	/**二维码扫描获取到的字符串*/ 
	codeStringValue:string,

}

interface LBAirDrop_mirror_Params {
	/**（可选项）分辨率*/ 
	resolutionLevel?:number,

	/**（可选项）比特率*/ 
	bitRateLevel?:number,

	/**（可选项）是否开启录制声音*/ 
	audioEnable?:boolean,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface privacy {
	/** 判断是否有定位权限*/ 
	location(callback?: (ret:JSON) => void):void

	/** 判断是否有访问联系人权限*/ 
	contacts(callback?: (ret:JSON) => void):void

	/** 判断是否有访问日历权限*/ 
	calendars(callback?: (ret:JSON) => void):void

	/** 判断是否有访问提醒事项的权限*/ 
	reminders(callback?: (ret:JSON) => void):void

	/** 判断是否有访问相册的权限*/ 
	photos(callback?: (ret:JSON) => void):void

	/** 判断是否有访问蓝牙的权限*/ 
	bluetooth(callback?: (ret:JSON) => void):void

	/** 判断是否有访问录音器的权限*/ 
	microphone(callback?: (ret:JSON) => void):void

	/** 判断是否有访问摄像头的权限*/ 
	camera(callback?: (ret:JSON) => void):void

}
interface autoStartUp {
}
interface mobilePrint {
	/**
	 * `图片按比例缩放大小，并且保存到指定目录。`
	 * ========params==========
	 *
	 * `flipping` :string : （可选项）图片翻转，取值范围(sx:上下翻转，zy:左右翻转，all:全翻转)。
	 *
	 * `angle` :string : （可选项）图片顺时针旋转角度，取值范围(90,180,270)。
	 *
	 * `oldimgurl` :string : （必选项）缩放前的图片路径，只支持设备内部图片，不支持网络图片。
	 *
	 * `newimgurl` :string : （必选项）缩放后的图片路径，只支持设备内部图片，不支持网络图片。
	 *
	 * `width` :any : （必选项）同比例缩放后图片的宽度（像素）。
	 */
	imgZoom(params:mobilePrint_imgZoom_Params, callback?: (ret:JSON) => void):void

}
interface mobilePrint_imgZoom_Params {
	/**（可选项）图片翻转，取值范围(sx:上下翻转，zy:左右翻转，all:全翻转)。*/ 
	flipping?:string,

	/**（可选项）图片顺时针旋转角度，取值范围(90,180,270)。*/ 
	angle?:string,

	/**（必选项）缩放前的图片路径，只支持设备内部图片，不支持网络图片。*/ 
	oldimgurl:string,

	/**（必选项）缩放后的图片路径，只支持设备内部图片，不支持网络图片。*/ 
	newimgurl:string,

	/**（必选项）同比例缩放后图片的宽度（像素）。*/ 
	width:any,

}

interface pasteboard {
}
interface docReader {
	/**
	 * `打开一个文档 （注意：在Android系统上调用此接口会打开第三方APP，通过第三方app阅读文档，而非在应用内打开）`
	 * ========params==========
	 *
	 * `path` :string : 打开文档的路径，要求本地路径（ widget://，fs:// ）
	 *
	 * `autorotation` :boolean : （可选项）是否适应当前设备自动旋转屏幕方向。仅iOS平台支持
	 */
	open(params:docReader_open_Params, callback?: (ret:JSON) => void):void

	/** 监听交互事件，仅对 open 接口打开的文档阅读器有效（仅iOS支持）*/ 
	addEventListener():void

	/**
	 * `打开一个文档，仅支持 iOS 端`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `path` :string : 打开文档的路径，要求本地路径（ widget://，fs:// ）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openDocView(params:docReader_openDocView_Params, callback?: (ret:JSON) => void):void

	/** 关闭 openDocView 打开的文档预览区域，仅支持 iOS 端*/ 
	closeDocView():void

	/**  隐藏 openDocView 打开的文档预览区域，仅支持 iOS 端*/ 
	hideDocView():void

	/** 显示 openDocView 打开的文档预览区域，仅支持 iOS 端*/ 
	showDocView():void

}
interface docReader_open_Params {
	/**打开文档的路径，要求本地路径（ widget://，fs:// ）*/ 
	path:string,

	/**（可选项）是否适应当前设备自动旋转屏幕方向。仅iOS平台支持*/ 
	autorotation?:boolean,

}

interface docReader_openDocView_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**打开文档的路径，要求本地路径（ widget://，fs:// ）*/ 
	path:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface DRMScreenShot {
	/**
	 * `打开禁止截屏的区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）禁止截屏的区域的位置及大小
	 *
	 * `path` :string : 播放路径                      //传m3u8格式的文件路径. 注意:本地不必有m3u8文件 ; 例如:'widget://res/movie.m3u8'
	 *
	 * `imagPath` :string : 要禁止截屏的图片路径。           //传图片的路径. 注意:本地必须要有这个图片文件 ; 例如:'widget://res/image.jpg'
	 *
	 * `size` :JSON : 禁止截屏图片的尺寸
	 */
	open(params:DRMScreenShot_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭*/ 
	close():void

	/** 隐藏*/ 
	hide():void

	/** 显示*/ 
	show():void

}
interface DRMScreenShot_open_Params {
	/**（可选项）禁止截屏的区域的位置及大小*/ 
	rect?:JSON,

	/**播放路径                      //传m3u8格式的文件路径. 注意:本地不必有m3u8文件 ; 例如:'widget://res/movie.m3u8'*/ 
	path:string,

	/**要禁止截屏的图片路径。           //传图片的路径. 注意:本地必须要有这个图片文件 ; 例如:'widget://res/image.jpg'*/ 
	imagPath:string,

	/**禁止截屏图片的尺寸*/ 
	size:JSON,

}

interface networkIndicator {
	/** 显示状态栏网络加载指示器*/ 
	show():void

	/** 隐藏状态栏网络加载指示器*/ 
	hide():void

	/**
	 * `设置进度（仅支持Android）`
	 * ========params==========
	 *
	 * `progress` :number : 需要更新的进度
	 */
	setProgress(params:networkIndicator_setProgress_Params):void

}
interface networkIndicator_setProgress_Params {
	/**需要更新的进度*/ 
	progress:number,

}

interface audioRecorder {
	/**
	 * `开始录音`
	 * ========params==========
	 *
	 * `channel` :number : （可选项）声道支持
	 *
	 * `sampleRates` :number : （可选项）采样率
	 *
	 * `savePath` :string : 保存路径 （仅支持 fs://）
	 *
	 * `format` :string : （可选项）音频格式
	 */
	startRecord(params:audioRecorder_startRecord_Params, callback?: (ret:JSON) => void):void

	/** 获取当前/实时音量*/ 
	getVolume():void

	/**
	 * `添加事件监听者`
	 * ========params==========
	 *
	 * `name` :string : （可选项）要监听对象的名字。
	 */
	addEventListener(params:audioRecorder_addEventListener_Params, callback?: (ret:JSON) => void):void

	/** 恢复录音，暂仅支持iOS端*/ 
	resumeRecord():void

	/** 暂停录音，暂仅支持iOS端*/ 
	pauseRecord():void

	/** 停止录音*/ 
	stopRecord():void

	/**
	 * `获取文件属性（文件大小和音频时长）`
	 * ========params==========
	 *
	 * `path` :string : 音频的路径 （仅支持 fs://）
	 */
	getAttr(params:audioRecorder_getAttr_Params, callback?: (ret:JSON) => void):void

}
interface audioRecorder_startRecord_Params {
	/**（可选项）声道支持*/ 
	channel?:number,

	/**（可选项）采样率*/ 
	sampleRates?:number,

	/**保存路径 （仅支持 fs://）*/ 
	savePath:string,

	/**（可选项）音频格式*/ 
	format?:string,

}

interface audioRecorder_addEventListener_Params {
	/**（可选项）要监听对象的名字。*/ 
	name?:string,

}

interface audioRecorder_getAttr_Params {
	/**音频的路径 （仅支持 fs://）*/ 
	path:string,

}

interface idfa {
}
interface alarmNotification {
}
interface tutu {
	/** 初始化tutu*/ 
	init():void

	/** 打开相机*/ 
	openCamera():void

	/** 编辑图片(单图编辑)*/ 
	editPicture():void

	/** 多图编辑*/ 
	multiPictureEdit():void

	/** 裁剪 + 滤镜组件*/ 
	editAndCutPicture():void

	/** 头像编辑*/ 
	editAvatar():void

	/** 裁剪+滤镜+贴纸组件*/ 
	editAdvanced():void

	/** 打开相册*/ 
	openAlbum():void

	/**
	 * `打开多选相册`
	 * ========params==========
	 *
	 * `autoDismissWhenCompelted` :boolean : (可选项) 是否在组件执行完成后自动关闭组件;
	 *
	 * `ret` :JSON : 编辑图片的返回对象
	 */
	openMultiAlbum(params:tutu_openMultiAlbum_Params):void

	/** 编辑图片直接可以进到指定功能*/ 
	editPictureSpecifiedFunction():void

}
interface tutu_openMultiAlbum_Params {
	/**(可选项) 是否在组件执行完成后自动关闭组件;*/ 
	autoDismissWhenCompelted?:boolean,

	/**编辑图片的返回对象*/ 
	ret:JSON,

}

interface FNPhotograph {
	/**
	 * `打开固定 UI 的相机页面`
	 * ========params==========
	 *
	 * `path` :string : （可选项）图片保存路径，要求本地路径（fs://）
	 *
	 * `album` :boolean : （可选项）拍照成功后是否将所拍图片存入系统相册
	 *
	 * `quality` :string : （可选项）所拍照片质量 **（该参数已弃用，建议使用 qualityValue）**
	 *
	 * `qualityValue` :number : （可选项）所拍照片质量
	 *
	 * `attachedWindow` :boolean : 是否依附在window上
	 *
	 * `usePreview` :boolean : 是否在拍照完后显示预览页面（暂仅支持 android）
	 *
	 * `useAdvanceFeature` :boolean : 是否打开高级属性特性（暂仅支持android）
	 *
	 * `pictureSize` :any : 照片分辨率设置（暂仅支持android）（注意：只有useAdvanceFeature为true时该参数有效，并且该参数不能为空）
	 *
	 * `previewSize` :any : 相机预览分辨率设置（暂仅支持android）（注意：只有useAdvanceFeature为true时该参数有效，并且该参数不能为空）
	 *
	 * `isShowAlbum` :boolean : 是否显示进入相册按钮
	 */
	open(params:FNPhotograph_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开纯相机页面`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `orientation` :string : （可选项）设置摄像头朝向
	 *
	 * `isStatusBarHidden` :boolean : （可选项）是否隐藏状态栏 **仅支持iOS**
	 *
	 * `useFrontCamera` :boolean : 是否使用前置摄像头；
	 *
	 * `useAdvanceFeature` :boolean : 是否打开高级属性特性（暂仅支持android）
	 *
	 * `pictureSize` :any : 照片分辨率设置（暂仅支持android）（注意：只有useAdvanceFeature为true时该参数有效，并且该参数不能为空）
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openCameraView(params:FNPhotograph_openCameraView_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拍照 （注意此方法与openCameraView配合使用）`
	 * ========params==========
	 *
	 * `quality` :string : （可选项）所拍照片质量  **（该参数已弃用，建议使用 qualityValue）**
	 *
	 * `qualityValue` :number : （可选项）所拍照片质量
	 *
	 * `path` :string : （可选项）图片保存路径，要求本地路径（fs://）。Androd 上若不传，则无法保存到相册。
	 *
	 * `album` :boolean : （可选项）拍照成功后是否将所拍图片存入系统相册
	 *
	 * `isRotation` :boolean : （可选项）是否开启图片自动旋转适配方向功能 **仅支持iOS**
	 */
	takePhoto(params:FNPhotograph_takePhoto_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重设拍摄区域的大小和位置,（注意此方法与openCameraView配合使用）`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）重设模块的位置及尺寸
	 */
	setRect(params:FNPhotograph_setRect_Params):void

	/** 获取相机当前缩放数值（注意此方法与openCameraView配合使用）*/ 
	getZoom():void

	/**
	 * `设置视图大小，若为 2 则表示远视图被放大一倍（注意此方法与openCameraView配合使用。另外，设置视图的放大倍数不能超过视图的最大放大倍数，如果超过最大放大倍数，按最大放大倍数来处理）`
	 * ========params==========
	 *
	 * `zoom` :number : （可选项）设置的焦距大小（视图被放大的倍数），取值范围：大于 1.0
	 */
	setZoom(params:FNPhotograph_setZoom_Params):void

	/** 获取相机支持的最大放大倍率（注意此方法与openCameraView配合使用）*/ 
	getMaxZoom():void

	/**
	 * `设置闪关灯，在 iOS 平台上，前置摄像头打开时不支持操作闪光灯（注意此方法与openCameraView配合使用）`
	 * ========params==========
	 *
	 * `flashlight` :string : （可选项）闪光灯类型
	 */
	setFlashlight(params:FNPhotograph_setFlashlight_Params):void

	/** 获取当前占用的摄像头（注意此方法与openCameraView配合使用）*/ 
	getCamera():void

	/**
	 * `设置前置/后置摄像头（注意此方法与openCameraView配合使用）`
	 * ========params==========
	 *
	 * `camera` :string : （可选项）摄像头
	 */
	setCamera(params:FNPhotograph_setCamera_Params):void

	/**
	 * `设置当前相机对焦模式，配合 setFocusRegion 接口使用（注意此方法与openCameraView配合使用）`
	 * ========params==========
	 *
	 * `focusMode` :string : （可选项）对焦模式
	 */
	setFocusMode(params:FNPhotograph_setFocusMode_Params):void

	/**
	 * `设置当前相机对焦区域，需要跟 setFocusMode 接口同时使用（注意此方法与openCameraView配合使用）`
	 * ========params==========
	 *
	 * `region` :JSON : （可选项）焦点坐标（在录像区域内的坐标，原点在该区域左上角，往右为x轴，下为y轴）
	 */
	setFocusRegion(params:FNPhotograph_setFocusRegion_Params):void

	/**
	 * `设置当前相机对焦提示框（注意此方法与openCameraView配合使用）`
	 * ========params==========
	 *
	 * `box` :string : （可选项）对焦提示框样式配置，该提示框是一个空心的正方形框。当调用setFocusRegion接口时，如果 animation 参数为 true，该提示框的显示与隐藏会有动画。
	 *
	 * `icon` :string : （可选项）自定义的提示框图标路径，要求本地路径（支持fs://、widget://协议），图标大小为：80*80
	 *
	 * `autoHide` :number : （可选项）设置对焦提示框自动隐藏时间，当为 -1 时，不自动隐藏，需调用 hideFocusBox 接口手动隐藏
	 *
	 * `animation` :boolean : （可选项）设置对焦提示框显示和隐藏时是否使用动画
	 */
	setFocusBox(params:FNPhotograph_setFocusBox_Params):void

	/** 隐藏对焦提示框（注意此方法与openCameraView配合使用）*/ 
	hideFocusBox():void

	/**
	 * `事件监听（注意此方法与openCameraView配合使用）`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件类型
	 */
	addEventListener(params:FNPhotograph_addEventListener_Params, callback?: (ret:JSON) => void):void

	/** 关闭相机界面（注意此方法与openCameraView配合使用）*/ 
	closeCameraView():void

	/** 在android系统中，有些相机图片在网页中显示的时候会被旋转，此方法可以获取图片被旋转的角度(未被旋转返回0)，可以使用js将图片旋转解决此问题*/ 
	getRotateDegree():void

	/** 获取支持的相机预览分辨率（暂仅支持android）*/ 
	getSupportPreviewSize():void

	/** 获取支持的拍照后图片的分辨率（暂仅支持android）*/ 
	getSupportPictureSize():void

	/** 关闭相机界面(此接口关闭定制UI的相机页面)*/ 
	close():void

}
interface FNPhotograph_open_Params {
	/**（可选项）图片保存路径，要求本地路径（fs://）*/ 
	path?:string,

	/**（可选项）拍照成功后是否将所拍图片存入系统相册*/ 
	album?:boolean,

	/**（可选项）所拍照片质量 **（该参数已弃用，建议使用 qualityValue）***/ 
	quality?:string,

	/**（可选项）所拍照片质量*/ 
	qualityValue?:number,

	/**是否依附在window上*/ 
	attachedWindow:boolean,

	/**是否在拍照完后显示预览页面（暂仅支持 android）*/ 
	usePreview:boolean,

	/**是否打开高级属性特性（暂仅支持android）*/ 
	useAdvanceFeature:boolean,

	/**照片分辨率设置（暂仅支持android）（注意：只有useAdvanceFeature为true时该参数有效，并且该参数不能为空）*/ 
	pictureSize:any,

	/**相机预览分辨率设置（暂仅支持android）（注意：只有useAdvanceFeature为true时该参数有效，并且该参数不能为空）*/ 
	previewSize:any,

	/**是否显示进入相册按钮*/ 
	isShowAlbum:boolean,

}

interface FNPhotograph_openCameraView_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）设置摄像头朝向*/ 
	orientation?:string,

	/**（可选项）是否隐藏状态栏 **仅支持iOS***/ 
	isStatusBarHidden?:boolean,

	/**是否使用前置摄像头；*/ 
	useFrontCamera:boolean,

	/**是否打开高级属性特性（暂仅支持android）*/ 
	useAdvanceFeature:boolean,

	/**照片分辨率设置（暂仅支持android）（注意：只有useAdvanceFeature为true时该参数有效，并且该参数不能为空）*/ 
	pictureSize:any,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface FNPhotograph_takePhoto_Params {
	/**（可选项）所拍照片质量  **（该参数已弃用，建议使用 qualityValue）***/ 
	quality?:string,

	/**（可选项）所拍照片质量*/ 
	qualityValue?:number,

	/**（可选项）图片保存路径，要求本地路径（fs://）。Androd 上若不传，则无法保存到相册。*/ 
	path?:string,

	/**（可选项）拍照成功后是否将所拍图片存入系统相册*/ 
	album?:boolean,

	/**（可选项）是否开启图片自动旋转适配方向功能 **仅支持iOS***/ 
	isRotation?:boolean,

}

interface FNPhotograph_setRect_Params {
	/**（可选项）重设模块的位置及尺寸*/ 
	rect?:JSON,

}

interface FNPhotograph_setZoom_Params {
	/**（可选项）设置的焦距大小（视图被放大的倍数），取值范围：大于 1.0*/ 
	zoom?:number,

}

interface FNPhotograph_setFlashlight_Params {
	/**（可选项）闪光灯类型*/ 
	flashlight?:string,

}

interface FNPhotograph_setCamera_Params {
	/**（可选项）摄像头*/ 
	camera?:string,

}

interface FNPhotograph_setFocusMode_Params {
	/**（可选项）对焦模式*/ 
	focusMode?:string,

}

interface FNPhotograph_setFocusRegion_Params {
	/**（可选项）焦点坐标（在录像区域内的坐标，原点在该区域左上角，往右为x轴，下为y轴）*/ 
	region?:JSON,

}

interface FNPhotograph_setFocusBox_Params {
	/**（可选项）对焦提示框样式配置，该提示框是一个空心的正方形框。当调用setFocusRegion接口时，如果 animation 参数为 true，该提示框的显示与隐藏会有动画。*/ 
	box?:string,

	/**（可选项）自定义的提示框图标路径，要求本地路径（支持fs://、widget://协议），图标大小为：80*80*/ 
	icon?:string,

	/**（可选项）设置对焦提示框自动隐藏时间，当为 -1 时，不自动隐藏，需调用 hideFocusBox 接口手动隐藏*/ 
	autoHide?:number,

	/**（可选项）设置对焦提示框显示和隐藏时是否使用动画*/ 
	animation?:boolean,

}

interface FNPhotograph_addEventListener_Params {
	/**监听的事件类型*/ 
	name:string,

}

interface appmanager {
	/** 获取手机设备信息:*/ 
	getmobileinfo():void

	/** 根据包名获取 APP 的签名:*/ 
	getappsign():void

}
interface alarmHelper {
	/**
	 * `设置闹铃`
	 * ========params==========
	 *
	 * `notice` :JSON : （可选项）弹出通知到状态栏。弹出时是否震动或响铃
	 *
	 * `alarm` :JSON : 设置闹铃
	 */
	set(params:alarmHelper_set_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消闹铃`
	 * ========params==========
	 *
	 * `id` :number : 闹钟id
	 */
	cancel(params:alarmHelper_cancel_Params, callback?: (ret:JSON) => void):void

}
interface alarmHelper_set_Params {
	/**（可选项）弹出通知到状态栏。弹出时是否震动或响铃*/ 
	notice?:JSON,

	/**设置闹铃*/ 
	alarm:JSON,

}

interface alarmHelper_cancel_Params {
	/**闹钟id*/ 
	id:number,

}

interface fileReader {
	/**
	 * `以 window 的形式打开 Files`
	 * ========params==========
	 *
	 * `types` :Array : （可选项）打开文件的类型，详情参考[苹果官方文档](https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259)
	 */
	open(params:fileReader_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加事件监听`
	 * ========params==========
	 *
	 * `target` :string : （可选项）所要监听的事件
	 */
	addEventListener(params:fileReader_addEventListener_Params, callback?: (ret:JSON) => void):void

}
interface fileReader_open_Params {
	/**（可选项）打开文件的类型，详情参考[苹果官方文档](https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259)*/ 
	types?:Array,

}

interface fileReader_addEventListener_Params {
	/**（可选项）所要监听的事件*/ 
	target?:string,

}

interface macauPay {
	/** 切换使用环境*/ 
	changeEnvironment(callback?: (ret:JSON) => void):void

	/** 澳门支付*/ 
	macauPay(callback?: (ret:JSON) => void):void

	/** 支付宝支付*/ 
	aliPay(callback?: (ret:JSON) => void):void

}
interface pdfTrans {
	/**
	 * `把模块所依附的当前 webview 转换为一个 pdf 文件`
	 * ========params==========
	 *
	 * `save` :JSON : （可选项）转换的 pdf 文件的保存信息
	 */
	trans(params:pdfTrans_trans_Params, callback?: (ret:JSON) => void):void

}
interface pdfTrans_trans_Params {
	/**（可选项）转换的 pdf 文件的保存信息*/ 
	save?:JSON,

}

interface iTVBox {
	/**
	 * `置入云端服务器地址`
	 * ========params==========
	 *
	 * `ServerURL` :string : （必填项）填写您云端服务器地址，不带http&https的地址（例：app.haleyryan.cn/moduleitvbox）。
	 */
	setServerURL(params:iTVBox_setServerURL_Params, callback?: (ret:JSON) => void):void

	/** 发送给云端指令（注意云端接收脚本名为SendMsg）*/ 
	sendMsg(callback?: (ret:JSON) => void):void

	/** 接收来自云端指令代码（注意云端接收脚本名为DownMsg）*/ 
	downMsg(callback?: (ret:JSON) => void):void

}
interface iTVBox_setServerURL_Params {
	/**（必填项）填写您云端服务器地址，不带http&https的地址（例：app.haleyryan.cn/moduleitvbox）。*/ 
	ServerURL:string,

}

interface audio {
	/** 播放网络音频时，清除本地缓存*/ 
	expungeCache():void

}
interface takePicCutOut {
	/**
	 * `打开身份证裁剪界面`
	 * ========params==========
	 *
	 * `isCardFront` :boolean : （可选项）身份证正面还是背面。(true:正面 false:背面)
	 *
	 * `isAlbumImport` :boolean : （可选项）是否显示导入图片按钮。(true:显示 false:不显示)
	 */
	openIDCardCut(params:takePicCutOut_openIDCardCut_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开卡片裁剪界面`
	 * ========params==========
	 *
	 * `isAlbumImport` :boolean : （可选项）是否显示导入图片按钮。(true:显示 false:不显示)
	 */
	openCardCut(params:takePicCutOut_openCardCut_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开自定义裁剪界面`
	 * ========params==========
	 *
	 * `isAlbumImport` :boolean : （可选项）是否显示导入图片按钮。(true:显示 false:不显示)
	 */
	openCustomCut(params:takePicCutOut_openCustomCut_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开护照裁剪界面`
	 * ========params==========
	 *
	 * `isAlbumImport` :boolean : （可选项）是否显示导入图片按钮。(true:显示 false:不显示)
	 */
	openPassportCut(params:takePicCutOut_openPassportCut_Params, callback?: (ret:JSON) => void):void

}
interface takePicCutOut_openIDCardCut_Params {
	/**（可选项）身份证正面还是背面。(true:正面 false:背面)*/ 
	isCardFront?:boolean,

	/**（可选项）是否显示导入图片按钮。(true:显示 false:不显示)*/ 
	isAlbumImport?:boolean,

}

interface takePicCutOut_openCardCut_Params {
	/**（可选项）是否显示导入图片按钮。(true:显示 false:不显示)*/ 
	isAlbumImport?:boolean,

}

interface takePicCutOut_openCustomCut_Params {
	/**（可选项）是否显示导入图片按钮。(true:显示 false:不显示)*/ 
	isAlbumImport?:boolean,

}

interface takePicCutOut_openPassportCut_Params {
	/**（可选项）是否显示导入图片按钮。(true:显示 false:不显示)*/ 
	isAlbumImport?:boolean,

}

interface shortCut {
	/** 为当前app添加快捷方式*/ 
	showLaunch():void

}
interface weChatCamera {
	/**
	 * `录制视频`
	 * ========params==========
	 *
	 * `minDuration` :number : （必填项）允许拍摄的最小时长；
	 *
	 * `maxDuration` :number : （必填项）允许拍摄的最大时长，时长越大，产生的视频文件越大；
	 *
	 * `isBackCamera` :boolean : （可选项）是否默认后置摄像头: true 后置摄像头 false 前置摄像头
	 *
	 * `isOpenCapture` :boolean : （可选项）是否开启单点拍照功能: true 打开 false 关闭
	 *
	 * `isOpenRecord` :boolean : （可选项）是否开启长按录像功能: true 打开 false 关闭
	 *
	 * `videoTimeShort` :string : （可选项）录制视频时长太短提示文字。
	 *
	 * `videoRecodeFail` :string : （可选项）视频录制失败提示文字。
	 *
	 * `videoPreviewFail` :string : （可选项）录像预览失败提示文字。
	 *
	 * `videoSettingFail` :string : （可选项）录像设置失败提示文字。
	 *
	 * `videoDialogClose` :string : （可选项）关闭提示文字。
	 *
	 * `videoProcessing` :string : （可选项）视频处理中提示文字。
	 */
	record(params:weChatCamera_record_Params, callback?: (ret:JSON) => void):void

	/** 获取视频存放文件夹大小*/ 
	getCacheSize(callback?: (ret:JSON) => void):void

	/** 清除存放视频文件夹所有视频*/ 
	clearCache(callback?: (ret:JSON) => void):void

}
interface weChatCamera_record_Params {
	/**（必填项）允许拍摄的最小时长；*/ 
	minDuration:number,

	/**（必填项）允许拍摄的最大时长，时长越大，产生的视频文件越大；*/ 
	maxDuration:number,

	/**（可选项）是否默认后置摄像头: true 后置摄像头 false 前置摄像头*/ 
	isBackCamera?:boolean,

	/**（可选项）是否开启单点拍照功能: true 打开 false 关闭*/ 
	isOpenCapture?:boolean,

	/**（可选项）是否开启长按录像功能: true 打开 false 关闭*/ 
	isOpenRecord?:boolean,

	/**（可选项）录制视频时长太短提示文字。*/ 
	videoTimeShort?:string,

	/**（可选项）视频录制失败提示文字。*/ 
	videoRecodeFail?:string,

	/**（可选项）录像预览失败提示文字。*/ 
	videoPreviewFail?:string,

	/**（可选项）录像设置失败提示文字。*/ 
	videoSettingFail?:string,

	/**（可选项）关闭提示文字。*/ 
	videoDialogClose?:string,

	/**（可选项）视频处理中提示文字。*/ 
	videoProcessing?:string,

}

interface epub {
	/**
	 * `打开阅读器`
	 * ========params==========
	 *
	 * `path` :string : epub文件路径，支持fs,widget
	 *
	 * `bookId` :string : 文件存入本地的唯一标识，不同文件标识应为唯一，不同文件不可重复传入
	 *
	 * `currentChapter` :number : （可选项）打开书籍的章节数
	 *
	 * `bg` :string : （可选项）阅读器的背景，支持颜色（rgb，rgba，#）和图片（支持fs,widget）
	 *
	 * `textColor` :string : （可选项）阅读器显示文字颜色
	 *
	 * `textSize` :number : （可选项）阅读器显示文字字体大小
	 */
	open(params:epub_open_Params, callback?: (ret:JSON) => void):void

	/** 添加监听*/ 
	addEventListener():void

	/** 移除添加监听*/ 
	removeEventListener():void

	/**
	 * `设置阅读器的参数`
	 * ========params==========
	 *
	 * `bg` :string : （可选项）阅读器的背景色，支持颜色（rgb，rgba，#）和图片（支持fs,widget）
	 *
	 * `currentChapter` :number : （可选项）打开的章节数
	 *
	 * `textColor` :string : （可选项）文字颜色
	 *
	 * `textSize` :number : （可选项）文字字体大小。重新设置字体大小后，会重新分页，触发分页的事件
	 */
	setValue(params:epub_setValue_Params):void

	/**
	 * `打开指定章节`
	 * ========params==========
	 *
	 * `currentChapter` :number : （可选项）打开的章节数
	 */
	openChapter(params:epub_openChapter_Params):void

	/** 获取当前屏幕亮度值*/ 
	getBrightness():void

	/**
	 * `设置屏幕亮度`
	 * ========params==========
	 *
	 * `brightness` :number : 设置的屏幕的亮度，取值范围：0-100，**在 iOS 平台上设置的是系统屏幕亮度。Android 平台上设置的本应用内的屏幕亮度**
	 */
	setBrightness(params:epub_setBrightness_Params):void

	/**
	 * `根据进度跳转对应章节`
	 * ========params==========
	 *
	 * `progress` :number : 进度值（0-100），可为小数
	 */
	resetWithProgress(params:epub_resetWithProgress_Params):void

	/** 获取全部本地书籍*/ 
	getAllbooks():void

	/**
	 * `删除一本书籍`
	 * ========params==========
	 *
	 * `bookId` :any : 书记唯一标识符
	 */
	deleteBookWithBook(params:epub_deleteBookWithBook_Params):void

	/**
	 * ` 设置夜间模式`
	 * ========params==========
	 *
	 * `isNightMode` :boolean : 是否开启夜间模式
	 */
	setNightMode(params:epub_setNightMode_Params):void

	/** 关闭阅读器*/ 
	close():void

}
interface epub_open_Params {
	/**epub文件路径，支持fs,widget*/ 
	path:string,

	/**文件存入本地的唯一标识，不同文件标识应为唯一，不同文件不可重复传入*/ 
	bookId:string,

	/**（可选项）打开书籍的章节数*/ 
	currentChapter?:number,

	/**（可选项）阅读器的背景，支持颜色（rgb，rgba，#）和图片（支持fs,widget）*/ 
	bg?:string,

	/**（可选项）阅读器显示文字颜色*/ 
	textColor?:string,

	/**（可选项）阅读器显示文字字体大小*/ 
	textSize?:number,

}

interface epub_setValue_Params {
	/**（可选项）阅读器的背景色，支持颜色（rgb，rgba，#）和图片（支持fs,widget）*/ 
	bg?:string,

	/**（可选项）打开的章节数*/ 
	currentChapter?:number,

	/**（可选项）文字颜色*/ 
	textColor?:string,

	/**（可选项）文字字体大小。重新设置字体大小后，会重新分页，触发分页的事件*/ 
	textSize?:number,

}

interface epub_openChapter_Params {
	/**（可选项）打开的章节数*/ 
	currentChapter?:number,

}

interface epub_setBrightness_Params {
	/**设置的屏幕的亮度，取值范围：0-100，**在 iOS 平台上设置的是系统屏幕亮度。Android 平台上设置的本应用内的屏幕亮度***/ 
	brightness:number,

}

interface epub_resetWithProgress_Params {
	/**进度值（0-100），可为小数*/ 
	progress:number,

}

interface epub_deleteBookWithBook_Params {
	/**书记唯一标识符*/ 
	bookId:any,

}

interface epub_setNightMode_Params {
	/**是否开启夜间模式*/ 
	isNightMode:boolean,

}

interface checkpush {
}
interface signature {
	/**
	 * `将字符串进行 AES 加密（加密模式和填充模式分别为：CBC/PKCS7Padding；初始iv为：{0xA,1,0xB,5,4,0xF,7,9,0x17,3,1,6,8,0xC,0xD,91}，加密等级位数：aes-256-cbc）`
	 * ========params==========
	 *
	 * `data` :string : 要加密的字符串
	 *
	 * `key` :string : aes 加密算法使用的 key
	 */
	aes(params:signature_aes_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将字符串进行 AES 解密（加密模式和填充模式分别为：CBC/PKCS7Padding；初始iv为：{0xA,1,0xB,5,4,0xF,7,9,0x17,3,1,6,8,0xC,0xD,91}，加密等级位数：aes-256-cbc）`
	 * ========params==========
	 *
	 * `data` :string : 要解密的字符串
	 *
	 * `key` :string : aes 解密算法使用的 key
	 */
	aesDecode(params:signature_aesDecode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取rsa密钥对, **此接口仅支持 Android 平台**`
	 * ========params==========
	 *
	 * `keyLength` :number : 秘钥长度（512~2048）
	 *
	 * `ret` :JSON : null
	 */
	rsaKeyPair(params:signature_rsaKeyPair_Params):void

	/**
	 * `rsa加密`
	 * ========params==========
	 *
	 * `data` :string : 要加密的字符串
	 *
	 * `publicKey` :string : 加密所需公钥，**注意：在android平台上直接传 encoded（字符串），在 iOS 平台上需传公钥文件（.der 格式）的地址路径（仅支持本地路径fs://、widget://）**
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	rsa(params:signature_rsa_Params):void

	/**
	 * `rsa解密`
	 * ========params==========
	 *
	 * `data` :string : 要解密的字符串
	 *
	 * `privateKey` :string : 解密所需私钥，**注意：在android平台上直接传私钥 encoded（字符串），在 iOS 平台上需传私钥文件（.p12 格式）的地址路径（仅支持本地路径fs://、widget://）**
	 *
	 * `password` :string : 使用 openssl 命令生成密钥对时所输入的私钥文件提取密码 **仅 iOS 平台需要**
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	rsaDecode(params:signature_rsaDecode_Params):void

	/**
	 * `将字符串进行 AES 加密（加密模式和填充模式分别为：ECB/PKCS7Padding；数据块：256位；字符集：utf8）`
	 * ========params==========
	 *
	 * `data` :string : 要加密的字符串
	 *
	 * `key` :string : aes 加密算法使用的 key
	 *
	 * `encoding` :number : 输出字符串的编码；0：base64，1：hex
	 */
	aesECB(params:signature_aesECB_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将字符串进行 AES 解密（加密模式和填充模式分别为：ECB/PKCS7Padding；数据块：256位；字符集：utf8）`
	 * ========params==========
	 *
	 * `data` :string : 要解密的字符串
	 *
	 * `key` :string : aes 解密算法使用的 key
	 *
	 * `encoding` :number : 输入字符串的编码；本接口会先对要解密的内容进行一次此字段传入类型解码，需要和aesECB或aesECBSync接口传入一致；0：base64，1：hex
	 */
	aesDecodeECB(params:signature_aesDecodeECB_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将字符串进行 DES 加密（加密模式和填充模式分别为：ECB/PKCS5Padding）`
	 * ========params==========
	 *
	 * `data` :string : 要加密的字符串
	 *
	 * `key` :string : des 加密算法使用的 key
	 */
	desECB(params:signature_desECB_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将字符串进行 DES 解密（加密模式和填充模式分别为：ECB/PKCS5Padding）`
	 * ========params==========
	 *
	 * `data` :string : 要解密的字符串
	 *
	 * `key` :string : des 解密算法使用的 key
	 */
	desDecodeECB(params:signature_desDecodeECB_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将字符串进行 AES 加密（加密模式和填充模式分别为：CBC/PKCS7Padding；加密等级位数：aes-128-cbc）`
	 * ========params==========
	 *
	 * `data` :string : 要加密的字符串
	 *
	 * `key` :string : aes 加密算法使用的 key
	 *
	 * `iv` :string : aes 加密算法使用的偏移量
	 */
	aesCBC(params:signature_aesCBC_Params, callback?: (ret:JSON) => void):void

	/** 将字符串进行 AES 解密（加密模式和填充模式分别为：CBC/PKCS7Padding；加密等级位数：aes-128-cbc）*/ 
	aesDecodeCBC():void

	/**
	 * `将文件进行 AES 加密解密（填充模式为：PKCS7Padding；加密等级位数：aes-256-cbc`
	 * ========params==========
	 *
	 * `action` :string : 指明加密解密功能
	 *
	 * `path` :string : 要加密/解密的文件地址，要求本地路径（fs://）
	 *
	 * `key` :string : aes 加密/解密算法使用的 key
	 *
	 * `iv` :string : aes 加密/解密算法使用的 iv
	 *
	 * `savePath` :string : （可选项）加密/解密后的文件保存路径，要求本地路径（fs://），
	 */
	aesFile(params:signature_aesFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将字符串进行 AES 加密（本加密过程为同步），加密模式和填充模式分别为：CBC/PKCS7Padding；初始iv为：{0xA,1,0xB,5,4,0xF,7,9,0x17,3,1,6,8,0xC,0xD,91}；加密等级位数：aes-256-cbc`
	 * ========params==========
	 *
	 * `data` :string : 要加密的字符串
	 *
	 * `key` :string : aes 加密算法使用的 key
	 *
	 * `value` :string : 加密后的字符串
	 */
	aesSync(params:signature_aesSync_Params):void

	/**
	 * `将字符串进行 AES 解密（本解密过程为同步），加密模式和填充模式分别为：CBC/PKCS7Padding；初始iv为：{0xA,1,0xB,5,4,0xF,7,9,0x17,3,1,6,8,0xC,0xD,91}；加密等级位数：aes-256-cbc`
	 * ========params==========
	 *
	 * `data` :string : 要解密的字符串
	 *
	 * `key` :string : aes 解密算法使用的 key
	 *
	 * `value` :string : 解密后的字符串
	 */
	aesDecodeSync(params:signature_aesDecodeSync_Params):void

	/**
	 * `获取rsa密钥对（同步），**此接口仅支持 Android 平台**`
	 * ========params==========
	 *
	 * `keyLength` :number : 秘钥长度（512~2048）
	 *
	 * `ret` :JSON : null
	 */
	rsaKeyPairSync(params:signature_rsaKeyPairSync_Params):void

	/**
	 * `rsa加密 （本加密为同步）`
	 * ========params==========
	 *
	 * `data` :string : 要加密的字符串
	 *
	 * `publicKey` :string : 加密所需公钥，**注意：在android平台上直接传 encoded（字符串），在 iOS 平台上需传公钥文件（.der 格式）的地址路径（仅支持本地路径fs://、widget://）**
	 *
	 * `value` :string : 加密后的字符串
	 */
	rsaSync(params:signature_rsaSync_Params):void

	/**
	 * `rsa解密 (同步)`
	 * ========params==========
	 *
	 * `data` :string : 要解密的字符串
	 *
	 * `privateKey` :string : 解密所需私钥，**注意：在android平台上直接传私钥 encoded（字符串），在 iOS 平台上需传私钥文件（.p12 格式）的地址路径（仅支持本地路径fs://、widget://）**
	 *
	 * `password` :string : 使用 openssl 命令生成密钥对时所输入的私钥文件提取密码 **仅 iOS 平台需要**
	 *
	 * `value` :string : 加密后的字符串
	 */
	rsaDecodeSync(params:signature_rsaDecodeSync_Params):void

	/**
	 * `将字符串进行 AES 加密（本加密过程为同步），加密模式和填充模式分别为：ECB/PKCS7Padding；数据块：256位；字符集：utf8`
	 * ========params==========
	 *
	 * `data` :string : 要加密的字符串
	 *
	 * `key` :string : aes 加密算法使用的 key
	 *
	 * `encoding` :number : 输出字符串的编码；0：base64，1：hex
	 *
	 * `value` :string : 加密后的字符串
	 */
	aesECBSync(params:signature_aesECBSync_Params):void

	/**
	 * `将字符串进行 AES 解密（本解密过程为同步），加密模式和填充模式分别为：WCB/PKCS7Padding；数据块：256位；字符集：utf8`
	 * ========params==========
	 *
	 * `data` :string : 要解密的字符串
	 *
	 * `key` :string : aes 解密算法使用的 key
	 *
	 * `encoding` :number : 输入字符串的编码；本接口会先对要解密的内容进行一次此字段传入类型解码，需要和aesECB或aesECBSync接口传入一致；0：base64，1：hex
	 *
	 * `value` :string : 解密后的字符串
	 */
	aesDecodeECBSync(params:signature_aesDecodeECBSync_Params):void

	/**
	 * `将字符串进行 DES 加密（本加密过程为同步），加密模式和填充模式分别为：ECB/PKCS5Padding`
	 * ========params==========
	 *
	 * `data` :string : 要加密的字符串
	 *
	 * `key` :string : des 加密算法使用的 key
	 *
	 * `value` :string : 加密后的字符串
	 */
	desECBSync(params:signature_desECBSync_Params):void

	/**
	 * `将字符串进行 DES 解密（本解密过程为同步），加密模式和填充模式分别为：ECB/PKCS5Padding`
	 * ========params==========
	 *
	 * `data` :string : 要解密的字符串
	 *
	 * `key` :string : des 解密算法使用的 key
	 *
	 * `value` :string : 解密后的字符串
	 */
	desDecodeECBSync(params:signature_desDecodeECBSync_Params):void

	/**
	 * `将字符串进行 AES 加密（加密模式和填充模式分别为：CBC/PKCS7Padding；加密等级位数：aes-128-cbc）`
	 * ========params==========
	 *
	 * `data` :string : 要加密的字符串
	 *
	 * `key` :string : aes 加密算法使用的 key
	 *
	 * `iv` :string : aes 加密算法使用的偏移量
	 *
	 * `value` :string : 加密后的字符串
	 */
	aesCBCSync(params:signature_aesCBCSync_Params):void

	/** 将字符串进行 AES 解密（加密模式和填充模式分别为：CBC/PKCS7Padding；加密等级位数：aes-128-cbc）*/ 
	aesDecodeCBCSync():void

	/**
	 * `将文件进行 AES 加密解密（填充模式为：PKCS7Padding；加密等级位数：aes-256-cbc`
	 * ========params==========
	 *
	 * `action` :string : 指明加密解密功能
	 *
	 * `path` :string : 要加密/解密的文件地址，要求本地路径（fs://）
	 *
	 * `key` :string : aes 加密/解密算法使用的 key
	 *
	 * `iv` :string : aes 加密/解密算法使用的 iv
	 *
	 * `savePath` :string : （可选项）加密/解密后的文件保存路径，要求本地路径（fs://），
	 *
	 * `value` :string : AES 加密/解密后的文件绝对路径
	 */
	aesFileSync(params:signature_aesFileSync_Params):void

}
interface signature_aes_Params {
	/**要加密的字符串*/ 
	data:string,

	/**aes 加密算法使用的 key*/ 
	key:string,

}

interface signature_aesDecode_Params {
	/**要解密的字符串*/ 
	data:string,

	/**aes 解密算法使用的 key*/ 
	key:string,

}

interface signature_rsaKeyPair_Params {
	/**秘钥长度（512~2048）*/ 
	keyLength:number,

	/**null*/ 
	ret:JSON,

}

interface signature_rsa_Params {
	/**要加密的字符串*/ 
	data:string,

	/**加密所需公钥，**注意：在android平台上直接传 encoded（字符串），在 iOS 平台上需传公钥文件（.der 格式）的地址路径（仅支持本地路径fs://、widget://）***/ 
	publicKey:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface signature_rsaDecode_Params {
	/**要解密的字符串*/ 
	data:string,

	/**解密所需私钥，**注意：在android平台上直接传私钥 encoded（字符串），在 iOS 平台上需传私钥文件（.p12 格式）的地址路径（仅支持本地路径fs://、widget://）***/ 
	privateKey:string,

	/**使用 openssl 命令生成密钥对时所输入的私钥文件提取密码 **仅 iOS 平台需要***/ 
	password:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface signature_aesECB_Params {
	/**要加密的字符串*/ 
	data:string,

	/**aes 加密算法使用的 key*/ 
	key:string,

	/**输出字符串的编码；0：base64，1：hex*/ 
	encoding:number,

}

interface signature_aesDecodeECB_Params {
	/**要解密的字符串*/ 
	data:string,

	/**aes 解密算法使用的 key*/ 
	key:string,

	/**输入字符串的编码；本接口会先对要解密的内容进行一次此字段传入类型解码，需要和aesECB或aesECBSync接口传入一致；0：base64，1：hex*/ 
	encoding:number,

}

interface signature_desECB_Params {
	/**要加密的字符串*/ 
	data:string,

	/**des 加密算法使用的 key*/ 
	key:string,

}

interface signature_desDecodeECB_Params {
	/**要解密的字符串*/ 
	data:string,

	/**des 解密算法使用的 key*/ 
	key:string,

}

interface signature_aesCBC_Params {
	/**要加密的字符串*/ 
	data:string,

	/**aes 加密算法使用的 key*/ 
	key:string,

	/**aes 加密算法使用的偏移量*/ 
	iv:string,

}

interface signature_aesFile_Params {
	/**指明加密解密功能*/ 
	action:string,

	/**要加密/解密的文件地址，要求本地路径（fs://）*/ 
	path:string,

	/**aes 加密/解密算法使用的 key*/ 
	key:string,

	/**aes 加密/解密算法使用的 iv*/ 
	iv:string,

	/**（可选项）加密/解密后的文件保存路径，要求本地路径（fs://），*/ 
	savePath?:string,

}

interface signature_aesSync_Params {
	/**要加密的字符串*/ 
	data:string,

	/**aes 加密算法使用的 key*/ 
	key:string,

	/**加密后的字符串*/ 
	value:string,

}

interface signature_aesDecodeSync_Params {
	/**要解密的字符串*/ 
	data:string,

	/**aes 解密算法使用的 key*/ 
	key:string,

	/**解密后的字符串*/ 
	value:string,

}

interface signature_rsaKeyPairSync_Params {
	/**秘钥长度（512~2048）*/ 
	keyLength:number,

	/**null*/ 
	ret:JSON,

}

interface signature_rsaSync_Params {
	/**要加密的字符串*/ 
	data:string,

	/**加密所需公钥，**注意：在android平台上直接传 encoded（字符串），在 iOS 平台上需传公钥文件（.der 格式）的地址路径（仅支持本地路径fs://、widget://）***/ 
	publicKey:string,

	/**加密后的字符串*/ 
	value:string,

}

interface signature_rsaDecodeSync_Params {
	/**要解密的字符串*/ 
	data:string,

	/**解密所需私钥，**注意：在android平台上直接传私钥 encoded（字符串），在 iOS 平台上需传私钥文件（.p12 格式）的地址路径（仅支持本地路径fs://、widget://）***/ 
	privateKey:string,

	/**使用 openssl 命令生成密钥对时所输入的私钥文件提取密码 **仅 iOS 平台需要***/ 
	password:string,

	/**加密后的字符串*/ 
	value:string,

}

interface signature_aesECBSync_Params {
	/**要加密的字符串*/ 
	data:string,

	/**aes 加密算法使用的 key*/ 
	key:string,

	/**输出字符串的编码；0：base64，1：hex*/ 
	encoding:number,

	/**加密后的字符串*/ 
	value:string,

}

interface signature_aesDecodeECBSync_Params {
	/**要解密的字符串*/ 
	data:string,

	/**aes 解密算法使用的 key*/ 
	key:string,

	/**输入字符串的编码；本接口会先对要解密的内容进行一次此字段传入类型解码，需要和aesECB或aesECBSync接口传入一致；0：base64，1：hex*/ 
	encoding:number,

	/**解密后的字符串*/ 
	value:string,

}

interface signature_desECBSync_Params {
	/**要加密的字符串*/ 
	data:string,

	/**des 加密算法使用的 key*/ 
	key:string,

	/**加密后的字符串*/ 
	value:string,

}

interface signature_desDecodeECBSync_Params {
	/**要解密的字符串*/ 
	data:string,

	/**des 解密算法使用的 key*/ 
	key:string,

	/**解密后的字符串*/ 
	value:string,

}

interface signature_aesCBCSync_Params {
	/**要加密的字符串*/ 
	data:string,

	/**aes 加密算法使用的 key*/ 
	key:string,

	/**aes 加密算法使用的偏移量*/ 
	iv:string,

	/**加密后的字符串*/ 
	value:string,

}

interface signature_aesFileSync_Params {
	/**指明加密解密功能*/ 
	action:string,

	/**要加密/解密的文件地址，要求本地路径（fs://）*/ 
	path:string,

	/**aes 加密/解密算法使用的 key*/ 
	key:string,

	/**aes 加密/解密算法使用的 iv*/ 
	iv:string,

	/**（可选项）加密/解密后的文件保存路径，要求本地路径（fs://），*/ 
	savePath?:string,

	/**AES 加密/解密后的文件绝对路径*/ 
	value:string,

}

interface kmTimer {
	/**
	 * `启动定时器`
	 * ========params==========
	 *
	 * `event` :string : 允许自定义事件
	 *
	 * `delay` :any : 延迟执行时间（秒）
	 *
	 * `interval` :any : 循环执行间隔（秒），仅crycle=true有效
	 *
	 * `crycle` :boolean : 是否循环执行
	 */
	start(params:kmTimer_start_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改循环执行时间间隔`
	 * ========params==========
	 *
	 * `event` :string : 允许自定义事件
	 *
	 * `interval` :any : 循环执行间隔（秒），仅crycle=true有效
	 */
	setInterval(params:kmTimer_setInterval_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭定时器`
	 * ========params==========
	 *
	 * `event` :string : 允许自定义事件。
	 */
	stop(params:kmTimer_stop_Params, callback?: (ret:JSON) => void):void

}
interface kmTimer_start_Params {
	/**允许自定义事件*/ 
	event:string,

	/**延迟执行时间（秒）*/ 
	delay:any,

	/**循环执行间隔（秒），仅crycle=true有效*/ 
	interval:any,

	/**是否循环执行*/ 
	crycle:boolean,

}

interface kmTimer_setInterval_Params {
	/**允许自定义事件*/ 
	event:string,

	/**循环执行间隔（秒），仅crycle=true有效*/ 
	interval:any,

}

interface kmTimer_stop_Params {
	/**允许自定义事件。*/ 
	event:string,

}

interface djyPrinter {
}
interface selectFile {
	/** 打开文件选择器*/ 
	open(callback?: (ret:JSON) => void):void

}
interface whjpdf {
	/** 打开pdf预览操作界面*/ 
	startActivity():void

}
interface codeLog {
	/** 创建指定类别的日志，并写入日志内容*/ 
	writeLog(callback?: (ret:JSON) => void):void

	/**
	 * `查询日志列表，可以指定类别和时段等筛选条件。时段条件要精确到秒，查询时段为多天时，可以只传入日期。如查询2017年4月10日一天的，类别为info的日志，指定的筛选条件为：`
	 * ========params==========
	 *
	 * `tag` :string : （可选项）日志类别名称
	 *
	 * `startTime` :string : （可选项） 开始时间，日期格式为 yyyy-MM-dd HH:mm:ss或者yyyy-MM-dd
	 *
	 * `endTime` :string : （可选项） 结束时间，日期格式为 yyyy-MM-dd HH:mm:ss或者yyyy-MM-dd
	 */
	getLogList(params:codeLog_getLogList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `批量删除指定时间段，指定类型日志。时段条件要精确到秒，查询时段为多天时，可以只传入日期。注意：删除后无法恢复，操作需谨慎。`
	 * ========params==========
	 *
	 * `tag` :string : （可选项）日志类型名称
	 *
	 * `startTime` :string : （可选项）开始时间，日期格式为 yyyy-MM-dd HH:mm:ss或者yyyy-MM-dd
	 *
	 * `endTime` :string : （可选项）结束时间，日期格式为 yyyy-MM-dd HH:mm:ss或者yyyy-MM-dd
	 */
	deleteLogs(params:codeLog_deleteLogs_Params, callback?: (ret:JSON) => void):void

}
interface codeLog_getLogList_Params {
	/**（可选项）日志类别名称*/ 
	tag?:string,

	/**（可选项） 开始时间，日期格式为 yyyy-MM-dd HH:mm:ss或者yyyy-MM-dd*/ 
	startTime?:string,

	/**（可选项） 结束时间，日期格式为 yyyy-MM-dd HH:mm:ss或者yyyy-MM-dd*/ 
	endTime?:string,

}

interface codeLog_deleteLogs_Params {
	/**（可选项）日志类型名称*/ 
	tag?:string,

	/**（可选项）开始时间，日期格式为 yyyy-MM-dd HH:mm:ss或者yyyy-MM-dd*/ 
	startTime?:string,

	/**（可选项）结束时间，日期格式为 yyyy-MM-dd HH:mm:ss或者yyyy-MM-dd*/ 
	endTime?:string,

}

interface xpCheck {
	/** 检查本机是否装了xposed框架。*/ 
	check():void

}
interface inShare {
	/**
	 * `分享多张图片到其他应用（要求用户有安装该应用并且已登录账户，才可分享成功）`
	 * ========params==========
	 *
	 * `imgPaths` :string : 要分享的图片的路径由“,”(逗号)分隔组成的字符串；要求本地路径,相对路径如：fs://、cache://，绝对路径如：var/mobile/Containers/Data/Application/...
	 *
	 * `sendPattern` :string : （可选项）分享打开其他应用的模式
	 *
	 * `app` :string : （可选项）模块提供了几个常用的分享应用。若本参数不为空则模块忽略 packageName 和 activityName 参数。
	 *
	 * `packageName` :string : （app 参数为空时 必需）分享应用的 包名（android）/bundleId（ios）。
	 *
	 * `activityName` :string : （可选项）指定分享到应用的具体页面，比如 分享到"QQ好友"。当 sendPattern 参数为“ONLY”,而 app 参数为空时 必需传该参数。**仅Android有效**
	 *
	 * `description` :string : （可选项）对分享的描述，只在个别情况下有效，比如：分享图片到“微信朋友圈”时。
	 *
	 * `dialogTitle` :string : （可选项）设置分享选择列表的标题，当sendPattern 不为“ONLY”时有用，若不设置该参数 则用户在“始终”和“仅此一次”的方式中选择始终分享应用后，再次分享时将直接分享到上次已经选择的应用。**仅Android有效，且部分机型不支持**（如 华为Honor 6A）
	 *
	 * `forResult` :boolean : （可选项）是否采用startActivityForResult的方式打开其他应用（采用该方式打开分享完成后会在回调的ret 中返回resultCode值）。**仅Android有效**
	 *
	 * `imgSetType` :any : （可选项）用于设置图片的添加方式。**仅ios有效**
	 *
	 * `needDecodePath` :boolean : （可选项）是否将图片路径转换为绝对路径，当所传 imgPaths 参数为类似“fs://cache/xx.png”的相对路径时，须设置为true。**仅ios有效**
	 */
	shareImgsTo(params:inShare_shareImgsTo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `主要用于分享文本内容到其他应用（要求用户有安装该应用并且已登录账户，才可分享成功）`
	 * ========params==========
	 *
	 * `content` :string : 要分享的文本内容。
	 *
	 * `urlScheme` :string : （可选项）当 sendPattern 参数为“ONLY” 时，ios 通过urlScheme去打开应用（只是打开应用 不做分享操作，可以事先将分享内容复制到系统剪切板让用户自己粘贴）。**仅ios有效**
	 *
	 * `sendPattern` :string : （可选项）分享打开其他应用的模式
	 *
	 * `app` :string : （可选项）模块提供了几个常用的分享应用。若本参数不为空则模块忽略 packageName activityName 和 urlScheme参数。
	 *
	 * `packageName` :string : （app 参数为空时 必需）分享应用的 包名（android）/bundleId（ios）。
	 *
	 * `activityName` :string : （可选项）指定分享到应用的具体页面，比如 分享到"QQ好友"。当 sendPattern 参数为“ONLY”,而 app 参数为空时 必需传该参数。**仅Android有效**
	 *
	 * `dialogTitle` :string : （可选项）设置分享选择列表的标题，当sendPattern 不为“ONLY”时有用，若不设置该参数 则用户在“始终”和“仅此一次”的方式中选择始终分享应用后，再次分享时将直接分享到上次已经选择的应用。**仅Android有效，且部分机型不支持**（如 华为Honor 6A）
	 *
	 * `forResult` :boolean : （可选项）是否采用startActivityForResult的方式打开其他应用（采用该方式打开分享完成后会在回调的ret 中返回resultCode值）。**仅Android有效**
	 */
	shareTextTo(params:inShare_shareTextTo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用于**Android**手机中获取当前已安装的支持多图/文本分享的应用信息（包名/支持分享类型的页面类路径）`
	 * ========params==========
	 *
	 * `type` :string : 支持类型
	 */
	getSupportedApp(params:inShare_getSupportedApp_Params, callback?: (ret:JSON) => void):void

}
interface inShare_shareImgsTo_Params {
	/**要分享的图片的路径由“,”(逗号)分隔组成的字符串；要求本地路径,相对路径如：fs://、cache://，绝对路径如：var/mobile/Containers/Data/Application/...*/ 
	imgPaths:string,

	/**（可选项）分享打开其他应用的模式*/ 
	sendPattern?:string,

	/**（可选项）模块提供了几个常用的分享应用。若本参数不为空则模块忽略 packageName 和 activityName 参数。*/ 
	app?:string,

	/**（app 参数为空时 必需）分享应用的 包名（android）/bundleId（ios）。*/ 
	packageName:string,

	/**（可选项）指定分享到应用的具体页面，比如 分享到"QQ好友"。当 sendPattern 参数为“ONLY”,而 app 参数为空时 必需传该参数。**仅Android有效***/ 
	activityName?:string,

	/**（可选项）对分享的描述，只在个别情况下有效，比如：分享图片到“微信朋友圈”时。*/ 
	description?:string,

	/**（可选项）设置分享选择列表的标题，当sendPattern 不为“ONLY”时有用，若不设置该参数 则用户在“始终”和“仅此一次”的方式中选择始终分享应用后，再次分享时将直接分享到上次已经选择的应用。**仅Android有效，且部分机型不支持**（如 华为Honor 6A）*/ 
	dialogTitle?:string,

	/**（可选项）是否采用startActivityForResult的方式打开其他应用（采用该方式打开分享完成后会在回调的ret 中返回resultCode值）。**仅Android有效***/ 
	forResult?:boolean,

	/**（可选项）用于设置图片的添加方式。**仅ios有效***/ 
	imgSetType?:any,

	/**（可选项）是否将图片路径转换为绝对路径，当所传 imgPaths 参数为类似“fs://cache/xx.png”的相对路径时，须设置为true。**仅ios有效***/ 
	needDecodePath?:boolean,

}

interface inShare_shareTextTo_Params {
	/**要分享的文本内容。*/ 
	content:string,

	/**（可选项）当 sendPattern 参数为“ONLY” 时，ios 通过urlScheme去打开应用（只是打开应用 不做分享操作，可以事先将分享内容复制到系统剪切板让用户自己粘贴）。**仅ios有效***/ 
	urlScheme?:string,

	/**（可选项）分享打开其他应用的模式*/ 
	sendPattern?:string,

	/**（可选项）模块提供了几个常用的分享应用。若本参数不为空则模块忽略 packageName activityName 和 urlScheme参数。*/ 
	app?:string,

	/**（app 参数为空时 必需）分享应用的 包名（android）/bundleId（ios）。*/ 
	packageName:string,

	/**（可选项）指定分享到应用的具体页面，比如 分享到"QQ好友"。当 sendPattern 参数为“ONLY”,而 app 参数为空时 必需传该参数。**仅Android有效***/ 
	activityName?:string,

	/**（可选项）设置分享选择列表的标题，当sendPattern 不为“ONLY”时有用，若不设置该参数 则用户在“始终”和“仅此一次”的方式中选择始终分享应用后，再次分享时将直接分享到上次已经选择的应用。**仅Android有效，且部分机型不支持**（如 华为Honor 6A）*/ 
	dialogTitle?:string,

	/**（可选项）是否采用startActivityForResult的方式打开其他应用（采用该方式打开分享完成后会在回调的ret 中返回resultCode值）。**仅Android有效***/ 
	forResult?:boolean,

}

interface inShare_getSupportedApp_Params {
	/**支持类型*/ 
	type:string,

}

interface setJump {
	/** 打开对应设置页面*/ 
	open():void

	/** 是否开启推送通知*/ 
	isUserNotificationEnable():void

}
interface brightness {
}
interface ScreenWake {
	/** 唤醒点亮屏幕。*/ 
	addScreenWake():void

}
interface getWebUrl {
	/** 获取当前页链接的Url和标题Title*/ 
	addListener(callback?: (ret:JSON) => void):void

}
interface ftpRequest {
	/** 获取制定路径的目录*/ 
	getCatalog(callback?: (ret:JSON) => void):void

	/** 获取制定路径的目录*/ 
	download(callback?: (ret:JSON) => void):void

	/** 上传文件*/ 
	upload(callback?: (ret:JSON) => void):void

	/** 创建目录，仅支持创建文件夹*/ 
	createFolder(callback?: (ret:JSON) => void):void

	/** 删除目录文件*/ 
	destoryResource(callback?: (ret:JSON) => void):void

}
interface drawingBoard {
	/**
	 * `打开签名画板`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）签名画板的位置及尺寸
	 *
	 * `styles` :JSON : 画板画笔样式配置
	 *
	 * `fixedOn` :string : （可选项）签名画板添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:drawingBoard_open_Params):void

	/**
	 * `保存签名画板截图，**截图大小（宽高：w、h）同 open 时传入的 rect 大小（宽高：w、h）**`
	 * ========params==========
	 *
	 * `savePath` :string : 保存图片路径，要求本地路径（fs://），**iOS 平台不支持 widget 路径**
	 *
	 * `copyToAlbum` :boolean : （可选项）是否将结果同时保存到系统相册
	 *
	 * `overlay` :boolean : （可选项）保存图片时，是否将背景一起保存
	 */
	save(params:drawingBoard_save_Params, callback?: (ret:JSON) => void):void

	/** 关闭签名画板*/ 
	close():void

	/** 隐藏签名画板*/ 
	hide():void

	/** 显示已隐藏的签名画板*/ 
	show():void

	/** 撤销最新画出的笔画线条*/ 
	revoke():void

	/** 恢复刚撤销的笔画线条*/ 
	restore():void

	/** 清空画板上的所有笔画线条*/ 
	clear():void

	/**
	 * `重设画笔样式`
	 * ========params==========
	 *
	 * `color` :string : （可选项）画笔颜色，支持#、rgb、rgba
	 *
	 * `width` :number : 画笔粗细
	 */
	resetBrush(params:drawingBoard_resetBrush_Params):void

}
interface drawingBoard_open_Params {
	/**（可选项）签名画板的位置及尺寸*/ 
	rect?:JSON,

	/**画板画笔样式配置*/ 
	styles:JSON,

	/**（可选项）签名画板添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface drawingBoard_save_Params {
	/**保存图片路径，要求本地路径（fs://），**iOS 平台不支持 widget 路径***/ 
	savePath:string,

	/**（可选项）是否将结果同时保存到系统相册*/ 
	copyToAlbum?:boolean,

	/**（可选项）保存图片时，是否将背景一起保存*/ 
	overlay?:boolean,

}

interface drawingBoard_resetBrush_Params {
	/**（可选项）画笔颜色，支持#、rgb、rgba*/ 
	color?:string,

	/**画笔粗细*/ 
	width:number,

}

interface imageSelect {
}
interface m3u8CacheServer {
	/** m3u8视频下载进度监听事件*/ 
	addEventListener():void

	/**
	 * `开始下载`
	 * ========params==========
	 *
	 * `url` :string : （必填项）M3U8下载地址，该地址必须为可解析的地址。不能是直播地址，请开发者自行控制。
	 */
	start(params:m3u8CacheServer_start_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停下载`
	 * ========params==========
	 *
	 * `url` :string : （必填项）M3U8下载地址，该地址必须为可解析的地址。不能是直播地址，请开发者自行控制。
	 */
	pause(params:m3u8CacheServer_pause_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否下载完成`
	 * ========params==========
	 *
	 * `url` :string : （必填项）M3U8下载地址，该地址必须为可解析的地址。不能是直播地址，请开发者自行控制。
	 */
	isDownloadFinish(params:m3u8CacheServer_isDownloadFinish_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取缓存大小`
	 * ========params==========
	 *
	 * `url` :string : （可选项）M3U8下载地址，不传该值则获取所有m3u8缓存的大小。
	 */
	getCacheSize(params:m3u8CacheServer_getCacheSize_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除缓存文件`
	 * ========params==========
	 *
	 * `url` :string : （可选项）M3U8下载地址，不传该值则清除所有m3u8缓存。
	 */
	clearCache(params:m3u8CacheServer_clearCache_Params, callback?: (ret:JSON) => void):void

	/** 开启本地服务(可以多次执行，需要在合适的时机执行，保证服务不会挂掉)*/ 
	startServer(callback?: (ret:JSON) => void):void

}
interface m3u8CacheServer_start_Params {
	/**（必填项）M3U8下载地址，该地址必须为可解析的地址。不能是直播地址，请开发者自行控制。*/ 
	url:string,

}

interface m3u8CacheServer_pause_Params {
	/**（必填项）M3U8下载地址，该地址必须为可解析的地址。不能是直播地址，请开发者自行控制。*/ 
	url:string,

}

interface m3u8CacheServer_isDownloadFinish_Params {
	/**（必填项）M3U8下载地址，该地址必须为可解析的地址。不能是直播地址，请开发者自行控制。*/ 
	url:string,

}

interface m3u8CacheServer_getCacheSize_Params {
	/**（可选项）M3U8下载地址，不传该值则获取所有m3u8缓存的大小。*/ 
	url?:string,

}

interface m3u8CacheServer_clearCache_Params {
	/**（可选项）M3U8下载地址，不传该值则清除所有m3u8缓存。*/ 
	url?:string,

}

interface headphone {
	/** 设置耳机插拔事件监听者*/ 
	addHeadphonePluggedListener(callback?: (ret:JSON) => void):void

	/**
	 * `设置音量`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）音量大小，取值范围：0-1
	 *
	 * `type` :string : （可选项）音量类型 （**在 iOS 平台本参数无效**）
	 */
	setVolume(params:headphone_setVolume_Params):void

	/**
	 * `获取当前音量`
	 * ========params==========
	 *
	 * `type` :string : （可选项）音量类型 （**在 iOS 平台本参数无效**）
	 */
	getVolume(params:headphone_getVolume_Params, callback?: (ret:JSON) => void):void

}
interface headphone_setVolume_Params {
	/**（可选项）音量大小，取值范围：0-1*/ 
	volume?:number,

	/**（可选项）音量类型 （**在 iOS 平台本参数无效**）*/ 
	type?:string,

}

interface headphone_getVolume_Params {
	/**（可选项）音量类型 （**在 iOS 平台本参数无效**）*/ 
	type?:string,

}

interface webSocket2018 {
	/** 监听事件，收消息也是在这里处理。*/ 
	addEventListener():void

	/**
	 * `连接服务器。`
	 * ========params==========
	 *
	 * `url` :string : （必填）后台webSocket服务器地址。
	 */
	open(params:webSocket2018_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送消息`
	 * ========params==========
	 *
	 * `msg` :string : （必填）发送信息。
	 */
	send(params:webSocket2018_send_Params):void

	/** 连接服务器。*/ 
	close():void

}
interface webSocket2018_open_Params {
	/**（必填）后台webSocket服务器地址。*/ 
	url:string,

}

interface webSocket2018_send_Params {
	/**（必填）发送信息。*/ 
	msg:string,

}

interface broadcastList {
	/** 打开支持录屏直播的 App 列表页面*/ 
	open():void

}
interface moviePlayer {
	/**
	 * `打开一个自带界面的视频播放器，本播放器为全屏横屏显示，支持屏幕随设备自动旋转。用户单击播放器时，会弹出 foot 和 head 导航条，再次单击则关闭之。`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `texts` :JSON : （可选项）聊天输入框模块可配置的文本
	 *
	 * `centerPlayBtn` :JSON : （可选项）视频未播放或者视频暂停时在视频播放器中间显示（不传不显示）
	 *
	 * `styles` :JSON : （可选项）模块的样式设置
	 *
	 * `path` :string : （可选项）文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget**
	 *
	 * `showBack` :boolean : （可选项）竖屏时是否显示返回按钮 同时支持竖屏是否显示顶部导航条
	 *
	 * `isShowControlView` :boolean : （可选项）是否显示工具条
	 *
	 * `autoPlay` :boolean : （可选项）打开时是否自动播放
	 *
	 * `coverImg` :boolean : （可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）
	 *
	 * `scalingMode` :string : （可选项）视频播放时的拉伸方式  **仅支持iOS**
	 *
	 * `autorotation` :boolean : （可选项）视频播放页面是否支持自动旋转（横竖屏），若为 false 则手动点击右下角按钮旋转
	 *
	 * `useGestureControl` :boolean : （可选项）视频播放页面是否使用手势控制 (亮度，声音，快进快退) **注意:iOS如果此参数为false,则不能拖动进度条，
	 *
	 * `seekBarDragable` :boolean : （可选项） 播放进度条是否可以拖动
	 *
	 * `videoDirection` :string : （可选项）视频方向 ，前端开发者若要使用竖屏视频竖屏全屏播放，可传入portrait实现需求，类似抖音
	 *
	 * `isShowStatusBar` :boolean : （可选项）footer和header在视频打开时是否显示
	 *
	 * `tabLayoutUse` :boolean : （可选项）是否是在tabLayout中使用，如在tabLayout中使用全屏后不可在播放控件上添加任何其他控件，不推荐在tabLayout中使用（仅android支持）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:moviePlayer_open_Params, callback?: (ret:JSON) => void):void

	/** 显示视频播放视图*/ 
	show():void

	/** 隐藏视频播放视图*/ 
	hide():void

	/** 关闭播放器*/ 
	close():void

	/** 暂停播放器*/ 
	pause():void

	/** 播放*/ 
	play():void

	/** 重新播放指定播放地址*/ 
	replay():void

	/** 判断当前是否为全屏*/ 
	isFullscreen():void

	/** 判断当前播放状态*/ 
	isPlaying():void

	/** 播放器监听事件*/ 
	addEventListener():void

	/** 该方法需要在点击back按键是调用，back键监听事件需要前端处理*/ 
	onBack():void

	/** footer和header是否显示*/ 
	setShowOrHideControlView():void

	/** 该方法用于app退入后台后调用（通过监听pause事件，仅支持Android）*/ 
	onPause():void

	/** 该方法用于从后台恢复时调用（通过监听resume事件，仅支持Android）*/ 
	onResume():void

	/** 获取当前播放位置该方法需要在视频准备结束后调用*/ 
	getCurrentPosition():void

	/** 获取播放总时长（仅支持Android）该方法需要在视频准备结束后调用*/ 
	getDuration():void

	/** 跳转到指定播放位置*/ 
	seekTo():void

	/**
	 * `视频截图`
	 * ========params==========
	 *
	 * `time` :number : 指定位置(单位为秒)
	 *
	 * `isAblum` :boolean : （可选项）是否保存相册
	 *
	 * `name` :boolean : （必选项）图片名
	 *
	 * `ret` :JSON : null
	 */
	videoCapture(params:moviePlayer_videoCapture_Params):void

	/**
	 * `设置CustomButton的隐藏与显示`
	 * ========params==========
	 *
	 * `isShow` :boolean : 是否显示
	 *
	 * `array` :Array : 需要显示或隐藏的按钮编号的数组
	 */
	setCustomButtons(params:moviePlayer_setCustomButtons_Params):void

	/**
	 * `设置进度条是否能拖动`
	 * ========params==========
	 *
	 * `seekBarDragable` :boolean : 进度条能否拖动
	 */
	setSeekBarDragable(params:moviePlayer_setSeekBarDragable_Params):void

}
interface moviePlayer_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）聊天输入框模块可配置的文本*/ 
	texts?:JSON,

	/**（可选项）视频未播放或者视频暂停时在视频播放器中间显示（不传不显示）*/ 
	centerPlayBtn?:JSON,

	/**（可选项）模块的样式设置*/ 
	styles?:JSON,

	/**（可选项）文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget***/ 
	path?:string,

	/**（可选项）竖屏时是否显示返回按钮 同时支持竖屏是否显示顶部导航条*/ 
	showBack?:boolean,

	/**（可选项）是否显示工具条*/ 
	isShowControlView?:boolean,

	/**（可选项）打开时是否自动播放*/ 
	autoPlay?:boolean,

	/**（可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）*/ 
	coverImg?:boolean,

	/**（可选项）视频播放时的拉伸方式  **仅支持iOS***/ 
	scalingMode?:string,

	/**（可选项）视频播放页面是否支持自动旋转（横竖屏），若为 false 则手动点击右下角按钮旋转*/ 
	autorotation?:boolean,

	/**（可选项）视频播放页面是否使用手势控制 (亮度，声音，快进快退) **注意:iOS如果此参数为false,则不能拖动进度条，*/ 
	useGestureControl?:boolean,

	/**（可选项） 播放进度条是否可以拖动*/ 
	seekBarDragable?:boolean,

	/**（可选项）视频方向 ，前端开发者若要使用竖屏视频竖屏全屏播放，可传入portrait实现需求，类似抖音*/ 
	videoDirection?:string,

	/**（可选项）footer和header在视频打开时是否显示*/ 
	isShowStatusBar?:boolean,

	/**（可选项）是否是在tabLayout中使用，如在tabLayout中使用全屏后不可在播放控件上添加任何其他控件，不推荐在tabLayout中使用（仅android支持）*/ 
	tabLayoutUse?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface moviePlayer_videoCapture_Params {
	/**指定位置(单位为秒)*/ 
	time:number,

	/**（可选项）是否保存相册*/ 
	isAblum?:boolean,

	/**（必选项）图片名*/ 
	name:boolean,

	/**null*/ 
	ret:JSON,

}

interface moviePlayer_setCustomButtons_Params {
	/**是否显示*/ 
	isShow:boolean,

	/**需要显示或隐藏的按钮编号的数组*/ 
	array:Array,

}

interface moviePlayer_setSeekBarDragable_Params {
	/**进度条能否拖动*/ 
	seekBarDragable:boolean,

}

interface vrPlayer {
	/** 监听手机不支持某互动类型（运动｜触摸｜运动&触摸）*/ 
	addEventListener(callback?: (ret:JSON) => void):void

	/**
	 * `播放vr视频`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `url` :string : （必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、http:// (暂仅支持mp4，请开发者自行控制)
	 *
	 * `interactive` :number : （可选项）设置视频的互动类型（0：运动 1：触摸 2：运动&触摸）
	 *
	 * `display` :number : （可选项）设置视频显示类型（0：正常 1：双镜头）
	 *
	 * `projection` :number : （可选项）设置视频投影类型（0：球体 1：圆顶180 2：圆顶230 3：圆顶向上180 4：圆顶向上230 5：立体 6:平面铺满 7:平面剪裁 8:平面全铺）
	 */
	openVrPlayer(params:vrPlayer_openVrPlayer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置视频的互动`
	 * ========params==========
	 *
	 * `interactive` :number : （可选项）设置视频的互动类型（0：运动 1：触摸 2：运动&触摸）
	 */
	switchInteractive(params:vrPlayer_switchInteractive_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置视频的显示模式`
	 * ========params==========
	 *
	 * `display` :number : （可选项）设置视频显示类型（0：正常 1：双镜头）
	 */
	switchDisplay(params:vrPlayer_switchDisplay_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置视频的影像模式`
	 * ========params==========
	 *
	 * `projection` :number : （可选项）设置视频投影类型（0：球体 1：圆顶180 2：圆顶230 3：圆顶向上180 4：圆顶向上230 5：立体 6:平面铺满 7:平面剪裁 8:平面全铺）
	 */
	switchProjection(params:vrPlayer_switchProjection_Params, callback?: (ret:JSON) => void):void

	/** 关闭*/ 
	closeVrPlayer(callback?: (ret:JSON) => void):void

	/** 获取视频的时长*/ 
	getDuration(callback?: (ret:JSON) => void):void

	/** 获取已经播放的时长*/ 
	getCurrentPosition(callback?: (ret:JSON) => void):void

	/**
	 * `设置播放进度位置(请根据视频最大时长进行参数控制传入)`
	 * ========params==========
	 *
	 * `process` :number : （必填项）设置视频需要播放的时长
	 */
	seekTo(params:vrPlayer_seekTo_Params):void

}
interface vrPlayer_openVrPlayer_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、http:// (暂仅支持mp4，请开发者自行控制)*/ 
	url:string,

	/**（可选项）设置视频的互动类型（0：运动 1：触摸 2：运动&触摸）*/ 
	interactive?:number,

	/**（可选项）设置视频显示类型（0：正常 1：双镜头）*/ 
	display?:number,

	/**（可选项）设置视频投影类型（0：球体 1：圆顶180 2：圆顶230 3：圆顶向上180 4：圆顶向上230 5：立体 6:平面铺满 7:平面剪裁 8:平面全铺）*/ 
	projection?:number,

}

interface vrPlayer_switchInteractive_Params {
	/**（可选项）设置视频的互动类型（0：运动 1：触摸 2：运动&触摸）*/ 
	interactive?:number,

}

interface vrPlayer_switchDisplay_Params {
	/**（可选项）设置视频显示类型（0：正常 1：双镜头）*/ 
	display?:number,

}

interface vrPlayer_switchProjection_Params {
	/**（可选项）设置视频投影类型（0：球体 1：圆顶180 2：圆顶230 3：圆顶向上180 4：圆顶向上230 5：立体 6:平面铺满 7:平面剪裁 8:平面全铺）*/ 
	projection?:number,

}

interface vrPlayer_seekTo_Params {
	/**（必填项）设置视频需要播放的时长*/ 
	process:number,

}

interface monitorFilesChange {
	/**
	 * `文件监听（文件里面内容改变的监听）`
	 * ========params==========
	 *
	 * `path` :string : 监听的文件的路径；支持fs://
	 */
	fileListener(params:monitorFilesChange_fileListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `文件夹监听（文件夹里面的文件增加还是减少）（仅iOS支持）`
	 * ========params==========
	 *
	 * `path` :string : 监听的文件夹的路径；支持fs://
	 */
	folderListener(params:monitorFilesChange_folderListener_Params, callback?: (ret:JSON) => void):void

	/** 取消监听（仅android支持）*/ 
	stopListener():void

}
interface monitorFilesChange_fileListener_Params {
	/**监听的文件的路径；支持fs://*/ 
	path:string,

}

interface monitorFilesChange_folderListener_Params {
	/**监听的文件夹的路径；支持fs://*/ 
	path:string,

}

interface dlna {
	/** 搜索设备*/ 
	startSearch():void

	/**
	 * `开始投屏`
	 * ========params==========
	 *
	 * `xh` :number : （必填项）设备序号(扫描设备返回结果序号)。
	 *
	 * `url` :string : （必填项）需要播放视频的视频地址(仅支持http协议的mp4类型视频，请开发者自行控制传入值)。
	 */
	startDLNA(params:dlna_startDLNA_Params, callback?: (ret:JSON) => void):void

	/** 退出投屏*/ 
	stopDLNA(callback?: (ret:JSON) => void):void

	/** 暂停播放*/ 
	pause(callback?: (ret:JSON) => void):void

	/** 开始播放*/ 
	play(callback?: (ret:JSON) => void):void

	/**
	 * `设置进度`
	 * ========params==========
	 *
	 * `process` :number : （必填项）需要跳转的进度值(单位是秒)。
	 */
	seek(params:dlna_seek_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置音量`
	 * ========params==========
	 *
	 * `volume` :number : （必填项）设置视频音量(0-100)。
	 */
	volume(params:dlna_volume_Params, callback?: (ret:JSON) => void):void

	/**
	 * `切换视频地址`
	 * ========params==========
	 *
	 * `url` :string : （必填项）需要播放视频的视频地址(仅支持http协议的mp4类型视频，请开发者自行控制传入值)。
	 */
	playUrl(params:dlna_playUrl_Params, callback?: (ret:JSON) => void):void

}
interface dlna_startDLNA_Params {
	/**（必填项）设备序号(扫描设备返回结果序号)。*/ 
	xh:number,

	/**（必填项）需要播放视频的视频地址(仅支持http协议的mp4类型视频，请开发者自行控制传入值)。*/ 
	url:string,

}

interface dlna_seek_Params {
	/**（必填项）需要跳转的进度值(单位是秒)。*/ 
	process:number,

}

interface dlna_volume_Params {
	/**（必填项）设置视频音量(0-100)。*/ 
	volume:number,

}

interface dlna_playUrl_Params {
	/**（必填项）需要播放视频的视频地址(仅支持http协议的mp4类型视频，请开发者自行控制传入值)。*/ 
	url:string,

}

interface playText {
	/**
	 * `播放文本`
	 * ========params==========
	 *
	 * `text` :string : 语音播放内容文本。
	 *
	 * `rate` :number : 播放速率
	 */
	play(params:playText_play_Params):void

	/** 继续播放文本*/ 
	continuePlay():void

	/** 停止播放*/ 
	stopPlay():void

	/** 暂停播放文本*/ 
	pausePlay():void

	/** 获取播放状态*/ 
	playState(callback?: (ret:JSON) => void):void

	/**
	 * `监听事件`
	 * ========params==========
	 *
	 * `name` :string : 事件名称。
	 */
	addEventListener(params:playText_addEventListener_Params, callback?: (ret:JSON) => void):void

}
interface playText_play_Params {
	/**语音播放内容文本。*/ 
	text:string,

	/**播放速率*/ 
	rate:number,

}

interface playText_addEventListener_Params {
	/**事件名称。*/ 
	name:string,

}

interface yyWebImage {
	/**
	 * `渐进式加载图片`
	 * ========params==========
	 *
	 * `rect` :string : （必填项）视频资源地址，支持http://
	 */
	openWebP(params:yyWebImage_openWebP_Params):void

	/**
	 * `普通URL加载图片`
	 * ========params==========
	 *
	 * `rect` :string : （必填项）视频资源地址，支持http:// 和本地路径
	 */
	openPictureWithURL(params:yyWebImage_openPictureWithURL_Params):void

	/** 渐进式加载图片*/ 
	closePicture():void

	/** 图片是否打开*/ 
	isOpen(callback?: (ret:JSON) => void):void

}
interface yyWebImage_openWebP_Params {
	/**（必填项）视频资源地址，支持http://*/ 
	rect:string,

}

interface yyWebImage_openPictureWithURL_Params {
	/**（必填项）视频资源地址，支持http:// 和本地路径*/ 
	rect:string,

}

interface phoneInfoMore {
	/** 获取手机基本信息*/ 
	getBaseInfo(callback?: (ret:JSON) => void):void

	/** 获取手机MAC地址(新)*/ 
	getMacAddressNew(callback?: (ret:JSON) => void):void

	/** 判断是否是模拟器*/ 
	isEmulator(callback?: (ret:JSON) => void):void

}
interface webServer {
	/**
	 * `开启服务。`
	 * ========params==========
	 *
	 * `serverDirectory` :string : 供其他设备访问操作的目录，如：fs://
	 *
	 * `allowedFileExtensions` :Array : （可选项）允许操作的文件后缀名，如["doc","docx","xls","xlsx","txt","pdf"]。若不传表示所有文件
	 *
	 * `title` :string : 标题
	 *
	 * `footer` :string : 脚标
	 *
	 * `prologue` :string : 序
	 */
	start(params:webServer_start_Params, callback?: (ret:JSON) => void):void

	/** 停止服务*/ 
	stop():void

	/**
	 * `添加监听`
	 * ========params==========
	 *
	 * `target` :string : 事件名称
	 */
	addEventListener(params:webServer_addEventListener_Params, callback?: (ret:JSON) => void):void

}
interface webServer_start_Params {
	/**供其他设备访问操作的目录，如：fs://*/ 
	serverDirectory:string,

	/**（可选项）允许操作的文件后缀名，如["doc","docx","xls","xlsx","txt","pdf"]。若不传表示所有文件*/ 
	allowedFileExtensions?:Array,

	/**标题*/ 
	title:string,

	/**脚标*/ 
	footer:string,

	/**序*/ 
	prologue:string,

}

interface webServer_addEventListener_Params {
	/**事件名称*/ 
	target:string,

}

interface downloadManager2 {
	/** 下载。*/ 
	download(callback?: (ret:JSON) => void):void

}
interface playModule {
	/**
	 * `初始化视频播放配置`
	 * ========params==========
	 *
	 * `ttf` :string : （可选项）设置标题显示文字字体文件路径，仅支持widget://
	 *
	 * `logo` :string : （可选项）右上角设置logo(图片类型：png)；支持fs://,widget://
	 *
	 * `background` :string : （可选项）视频播放前的图片显示(图片类型：jpg,png,gif)；支持fs://,widget://
	 *
	 * `FullScreenViewIsFont` :boolean : （可选项）全屏view是否显示最上层,true:是|false:否，仅ios有效（为fasle时可通过openframe自定义按钮在播放器上层；注意，未开启沉侵式的App请不要设置该参数。）
	 *
	 * `isShowBottomBtn` :boolean : （可选项）全屏时是否隐藏手机底部虚拟键，仅Android有效。
	 *
	 * `isMultiWindow` :boolean : （可选项）是否开启多窗口模式(true 开启 false 不开启)。
	 *
	 * `loading` :string : （可选项）加载中的gif动画图片接口(图片类型：gif)；支持fs://,widget://
	 *
	 * `logoLeftTop` :string : （可选项）左上角设置logo(图片类型：png)；支持fs://,widget://
	 *
	 * `logoLeftBottom` :string : （可选项）左下角设置logo(图片类型：png)；支持fs://,widget://
	 *
	 * `logoRightBottom` :string : （可选项）右下角设置logo(图片类型：png)；支持fs://,widget://
	 *
	 * `placeholderText` :string : （可选项）发送弹幕输入框默认提示内容。
	 *
	 * `isShowLock` :boolean : （可选项）全屏下是否显示锁屏按钮(true 显示 false 不显示)。
	 */
	init(params:playModule_init_Params):void

	/**
	 * `播放本地视频、网络视频、rtmp直播流等`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `url` :string : （必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://
	 *
	 * `title` :string : （可选项）不填时标题默认显示url地址
	 *
	 * `defaultBtn` :boolean : （可选项）设置本次播放是否显示默认自带的播放控制按钮
	 *
	 * `enableFull` :boolean : （可选项）本次播放视频是否全屏播放，当为true时将直接全屏播放视频，x,y,w,h,fixedOn,fixed值不会生效。
	 *
	 * `enableFullAutoClose` :boolean : （可选项）默认全屏时播放时，返回按钮和退出全屏点击时是否关闭播放器(true:关闭 false:不关闭)
	 *
	 * `isTopView` :boolean : （可选项）是否显示顶部标题栏
	 *
	 * `isFullBtn` :boolean : （可选项）小窗口是否显示进入全屏按钮
	 *
	 * `isBackBtn` :boolean : （可选项）小窗口是否显示返回按钮
	 *
	 * `scalingMode` :boolean : （可选项）视频播放显示铺满模式（1:无缩放, 2:适应大小模式, 3:充满可视范围，可能会被裁剪, 4:缩放到充满视图）
	 *
	 * `fullscreenMode` :string : （可选项）设置全屏按钮控制全屏显示模式是横屏还是竖屏 竖屏:PORTRAIT ; 横屏:LANDSCAPE
	 *
	 * `isShowProcessView` :boolean : （可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动默认为false】
	 *
	 * `isShowTimeLable` :boolean : （可选项）是否显示播放时间 (显示:true ; 不显示:false)
	 *
	 * `isLive` :boolean : （可选项）是否直播视频源 （直播：true；点播：false）
	 *
	 * `isSmallOpenGesture` :boolean : （可选项）窗口播放时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）
	 *
	 * `isOpenGesture` :boolean : （可选项）全屏时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）
	 *
	 * `process` :number : （必填项）设置视频需要播放的时长
	 *
	 * `isAutoPlay` :boolean : （可选项）是否自动播放 (自动播放:true ; 不自动播放:false)
	 *
	 * `isPlayMusic` :boolean : （可选项）是否仅播放音频 (仅播放音频:true ; 视频播放:false)
	 *
	 * `isLoop` :boolean : （可选项）是否循环播放 (循环播放:true ; 禁止循环播放:false)
	 *
	 * `urlDatas` :Array : （可选项）清晰度按钮的自定义(数组内容大于1条记录，清晰度切换按钮才会显示，不支持直播链接的组装切换，不能和url接口参数同时存在)。
	 *
	 * `isSmallShowQxd` :boolean : （可选项）是否窗口时显示清晰度选择按钮 (数组内容大于1条记录，清晰度切换按钮才会显示；显示:true ; 不显示:false)
	 *
	 * `isMute` :boolean : （可选项）是否静音播放 (开启静音:true ; 关闭静音:false)
	 *
	 * `isShowDanmu` :boolean : （可选项）是否开启弹幕功能 (开启:true ; 不开启:false)
	 *
	 * `isLocalCache` :boolean : （可选项）是否本地缓存视频,音频;直播类不能缓存,开发者自行控制;(备注:缓存文件在cache://文件目录下,如果直播乱开启改参数会导致播放异常). (开启:true ; 不开启:false)
	 *
	 * `isShowFenxiang` :boolean : （可选项）全屏是否显示分享按钮 (显示:true ; 隐藏:false)
	 *
	 * `isShowMore` :boolean : （可选项）全屏是否显示更多按钮 (显示:true ; 隐藏:false)
	 *
	 * `isShowTouping` :boolean : （可选项）全屏是否显示投屏按钮 (显示:true ; 隐藏:false)
	 *
	 * `isShowXuanji` :boolean : （可选项）是否显示选集按钮 (显示:true ; 隐藏:false)
	 *
	 * `isShowNext` :boolean : （可选项）是否显示下一集按钮 (显示:true ; 隐藏:false)
	 *
	 * `isShowPre` :boolean : （可选项）是否显示上一集按钮 (显示:true ; 隐藏:false)
	 *
	 * `isSmallImmerse` :boolean : （可选项）窗口播放顶部控制栏是否沉侵式 (显示:true ; 隐藏:false)
	 *
	 * `isLongShowBackBtn` :boolean : （可选项）窗口模式下是否长时间显示返回按钮 (显示:true ; 隐藏:false)
	 *
	 * `isSmallShowFenxiang` :boolean : （可选项）窗口是否显示分享按钮 (显示:true ; 隐藏:false)
	 *
	 * `isSmallShowMore` :boolean : （可选项）窗口是否显示更多按钮 (显示:true ; 隐藏:false)
	 *
	 * `isSmallShowTouping` :boolean : （可选项）窗口是否显示投屏按钮 (显示:true ; 隐藏:false)
	 *
	 * `isOpenDanmu` :boolean : （可选项）是否打开弹幕功能 (打开:true ; 关闭:false)
	 *
	 * `singlePageModule` :boolean : （可选项）是否打开单页面播放模式。（当设置为true时，本页面播放器的接口只能在当前页面调用，不能跨页面；同时本页面开启多窗口模式无效）
	 *
	 * `isShowNetworkSpeed` :boolean : （可选项）是否在缓冲的时候显示网速
	 */
	play(params:playModule_play_Params, callback?: (ret:JSON) => void):void

	/**
	 * `同一个页面，已经调用play接口后，切换视频地址时调用（前提条件，同一界面已经调用过play接口）。`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 *
	 * `url` :string : （必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://
	 *
	 * `title` :string : （可选项）不填时标题默认显示url播放文件名
	 *
	 * `defaultBtn` :boolean : （可选项）设置本次播放是否显示默认自带的播放控制按钮
	 *
	 * `isLive` :boolean : （可选项）是否直播视频源 （直播：true；点播：false）
	 *
	 * `isSmallOpenGesture` :boolean : （可选项）窗口播放时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）
	 *
	 * `isOpenGesture` :boolean : （可选项）全屏时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）
	 *
	 * `process` :number : （必填项）设置视频需要播放的时长
	 *
	 * `isAutoPlay` :boolean : （可选项）是否自动播放 (自动播放:true ; 不自动播放:false)
	 *
	 * `isLoop` :boolean : （可选项）是否循环播放 (循环播放:true ; 禁止循环播放:false)
	 *
	 * `isShowProcessView` :boolean : （可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动默认为false】
	 *
	 * `isShowTimeLable` :boolean : （可选项）是否显示播放时间 (显示:true ; 不显示:false)
	 *
	 * `urlDatas` :Array : （可选项）清晰度按钮的自定义(数组内容大于1条记录，清晰度切换按钮才会显示，不支持直播链接的组装切换，不能和url接口参数同时存在)。
	 *
	 * `isSmallShowQxd` :boolean : （可选项）是否窗口时显示清晰度选择按钮 (数组内容大于1条记录，清晰度切换按钮才会显示；显示:true ; 不显示:false)
	 *
	 * `isMute` :boolean : （可选项）是否静音播放 (开启静音:true ; 关闭静音:false)
	 *
	 * `isShowDanmu` :boolean : （可选项）是否开启弹幕功能 (开启:true ; 不开启:false)
	 *
	 * `isLocalCache` :boolean : （可选项）是否本地缓存视频,音频;直播类不能缓存,开发者自行控制;(备注:缓存文件在cache://文件目录下,如果直播乱开启改参数会导致播放异常). (开启:true ; 不开启:false)
	 *
	 * `isShowFenxiang` :boolean : （可选项）全屏是否显示分享按钮 (显示:true ; 隐藏:false)
	 *
	 * `isShowMore` :boolean : （可选项）全屏是否显示更多按钮 (显示:true ; 隐藏:false)
	 *
	 * `isShowTouping` :boolean : （可选项）全屏是否显示投屏按钮 (显示:true ; 隐藏:false)
	 *
	 * `isShowXuanji` :boolean : （可选项）是否显示选集按钮 (显示:true ; 隐藏:false)
	 *
	 * `isShowNext` :boolean : （可选项）是否显示下一集按钮 (显示:true ; 隐藏:false)
	 *
	 * `isShowPre` :boolean : （可选项）是否显示上一集按钮 (显示:true ; 隐藏:false)
	 *
	 * `isSmallImmerse` :boolean : （可选项）窗口播放顶部控制栏是否沉侵式 (显示:true ; 隐藏:false)
	 *
	 * `isLongShowBackBtn` :boolean : （可选项）窗口模式下是否长时间显示返回按钮 (显示:true ; 隐藏:false)
	 *
	 * `isSmallShowFenxiang` :boolean : （可选项）窗口是否显示分享按钮 (显示:true ; 隐藏:false)
	 *
	 * `isSmallShowMore` :boolean : （可选项）窗口是否显示更多按钮 (显示:true ; 隐藏:false)
	 *
	 * `isSmallShowTouping` :boolean : （可选项）窗口是否显示投屏按钮 (显示:true ; 隐藏:false)
	 *
	 * `isOpenDanmu` :boolean : （可选项）是否打开弹幕功能 (打开:true ; 关闭:false)
	 *
	 * `isShowNetworkSpeed` :boolean : （可选项）是否在缓冲的时候显示网速
	 */
	playUrl(params:playModule_playUrl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停播放`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 */
	pause(params:playModule_pause_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停后开始播放`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 */
	start(params:playModule_start_Params, callback?: (ret:JSON) => void):void

	/**
	 * `停止播放`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 */
	stop(params:playModule_stop_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取视频的时长`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 */
	getDuration(params:playModule_getDuration_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取已经播放的时长`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 */
	getCurrentPosition(params:playModule_getCurrentPosition_Params, callback?: (ret:JSON) => void):void

	/**
	 * `全屏播放`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 */
	full(params:playModule_full_Params, callback?: (ret:JSON) => void):void

	/**
	 * `退出全屏`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 */
	unfull(params:playModule_unfull_Params, callback?: (ret:JSON) => void):void

	/**
	 * `视频播放完监听事件`
	 * ========params==========
	 *
	 * `name` :string : 监听事件名称,可以设置的播放界面监听类型有：playEnd(播放结束),playError(播放异常),pause(暂停),play(播放),backBtn(小窗口返回按钮),full(进入全屏按钮),unfull(退出全屏按钮),click(视频区域点击监听),bufferingStart(缓冲开始),bufferingEnd(缓冲结束), onPrepared(视频准备完成),onChangeQxd(清晰度改变), fenxiangClick(分析按钮), moreClick(更多按钮), toupingClick(投屏按钮), xuanjiClick(选集按钮), nextClick(下一集按钮), preClick(上一级按钮), sendDanmuMessage(发送弹幕输入框发送内容),danmuClick(弹幕开关按钮点击)
	 */
	addEventListener(params:playModule_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取是否全屏播放状态`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 */
	isFullScreen(params:playModule_isFullScreen_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置播放进度位置(请根据视频最大时长进行参数控制传入)`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 *
	 * `process` :number : （必填项）设置视频需要播放的时长
	 */
	seekTo(params:playModule_seekTo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置播音量`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 *
	 * `volume` :number : （必填项）0-100
	 */
	setVolume(params:playModule_setVolume_Params, callback?: (ret:JSON) => void):void

	/**
	 * `隐藏播放器`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 */
	hidePlayer(params:playModule_hidePlayer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示播放器`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 */
	showPlayer(params:playModule_showPlayer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `倍速播放`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 *
	 * `speed` :number : （必填项）设置视频播放倍速(取值范围 0.1-1.9)
	 */
	setSpeed(params:playModule_setSpeed_Params, callback?: (ret:JSON) => void):void

	/** 清除页面所有打开的播放器接口(执行该接口后，返回index会归零)*/ 
	cleanPlayers():void

	/**
	 * `更新清晰度选择列表地址(必须和play或者playUrl接口传的数组长度一致)。`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 *
	 * `urlDatas` :Array : （可选项）清晰度按钮的自定义(数组内容大于1条记录，清晰度切换按钮才会显示，不支持直播链接的组装切换，不能和url接口参数同时存在)。
	 */
	updateUrlDatas(params:playModule_updateUrlDatas_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送一条弹幕信息`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 *
	 * `text` :string : （必填项）弹幕文字内容
	 *
	 * `color` :string : （可选项）弹幕文字显示颜色代码
	 */
	sendDanmu(params:playModule_sendDanmu_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送多条弹幕信息。`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 *
	 * `isLoop` :boolean : （可选项）天际的全部数据是否循环播放(循环:true，不循环:false)
	 *
	 * `data` :Array : （必填项）多条弹幕信息记录。
	 */
	sendDanmuList(params:playModule_sendDanmuList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取音轨数量。`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 */
	getAudioTrack(params:playModule_getAudioTrack_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置音轨(原音|伴音)[仅对多音轨有效]`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 *
	 * `trackId` :number : （可选项）音轨序号(双音轨>1:原音 2伴音)
	 */
	setAudioTrack(params:playModule_setAudioTrack_Params, callback?: (ret:JSON) => void):void

	/**
	 * `静音开关切换`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 *
	 * `isMute` :boolean : （可选项）是否静音(开启静音:true 关闭静音:false)
	 */
	setMute(params:playModule_setMute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `截图`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放器序号
	 */
	takeSnapshot(params:playModule_takeSnapshot_Params, callback?: (ret:JSON) => void):void

}
interface playModule_init_Params {
	/**（可选项）设置标题显示文字字体文件路径，仅支持widget://*/ 
	ttf?:string,

	/**（可选项）右上角设置logo(图片类型：png)；支持fs://,widget://*/ 
	logo?:string,

	/**（可选项）视频播放前的图片显示(图片类型：jpg,png,gif)；支持fs://,widget://*/ 
	background?:string,

	/**（可选项）全屏view是否显示最上层,true:是|false:否，仅ios有效（为fasle时可通过openframe自定义按钮在播放器上层；注意，未开启沉侵式的App请不要设置该参数。）*/ 
	FullScreenViewIsFont?:boolean,

	/**（可选项）全屏时是否隐藏手机底部虚拟键，仅Android有效。*/ 
	isShowBottomBtn?:boolean,

	/**（可选项）是否开启多窗口模式(true 开启 false 不开启)。*/ 
	isMultiWindow?:boolean,

	/**（可选项）加载中的gif动画图片接口(图片类型：gif)；支持fs://,widget://*/ 
	loading?:string,

	/**（可选项）左上角设置logo(图片类型：png)；支持fs://,widget://*/ 
	logoLeftTop?:string,

	/**（可选项）左下角设置logo(图片类型：png)；支持fs://,widget://*/ 
	logoLeftBottom?:string,

	/**（可选项）右下角设置logo(图片类型：png)；支持fs://,widget://*/ 
	logoRightBottom?:string,

	/**（可选项）发送弹幕输入框默认提示内容。*/ 
	placeholderText?:string,

	/**（可选项）全屏下是否显示锁屏按钮(true 显示 false 不显示)。*/ 
	isShowLock?:boolean,

}

interface playModule_play_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://*/ 
	url:string,

	/**（可选项）不填时标题默认显示url地址*/ 
	title?:string,

	/**（可选项）设置本次播放是否显示默认自带的播放控制按钮*/ 
	defaultBtn?:boolean,

	/**（可选项）本次播放视频是否全屏播放，当为true时将直接全屏播放视频，x,y,w,h,fixedOn,fixed值不会生效。*/ 
	enableFull?:boolean,

	/**（可选项）默认全屏时播放时，返回按钮和退出全屏点击时是否关闭播放器(true:关闭 false:不关闭)*/ 
	enableFullAutoClose?:boolean,

	/**（可选项）是否显示顶部标题栏*/ 
	isTopView?:boolean,

	/**（可选项）小窗口是否显示进入全屏按钮*/ 
	isFullBtn?:boolean,

	/**（可选项）小窗口是否显示返回按钮*/ 
	isBackBtn?:boolean,

	/**（可选项）视频播放显示铺满模式（1:无缩放, 2:适应大小模式, 3:充满可视范围，可能会被裁剪, 4:缩放到充满视图）*/ 
	scalingMode?:boolean,

	/**（可选项）设置全屏按钮控制全屏显示模式是横屏还是竖屏 竖屏:PORTRAIT ; 横屏:LANDSCAPE*/ 
	fullscreenMode?:string,

	/**（可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动默认为false】*/ 
	isShowProcessView?:boolean,

	/**（可选项）是否显示播放时间 (显示:true ; 不显示:false)*/ 
	isShowTimeLable?:boolean,

	/**（可选项）是否直播视频源 （直播：true；点播：false）*/ 
	isLive?:boolean,

	/**（可选项）窗口播放时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）*/ 
	isSmallOpenGesture?:boolean,

	/**（可选项）全屏时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）*/ 
	isOpenGesture?:boolean,

	/**（必填项）设置视频需要播放的时长*/ 
	process:number,

	/**（可选项）是否自动播放 (自动播放:true ; 不自动播放:false)*/ 
	isAutoPlay?:boolean,

	/**（可选项）是否仅播放音频 (仅播放音频:true ; 视频播放:false)*/ 
	isPlayMusic?:boolean,

	/**（可选项）是否循环播放 (循环播放:true ; 禁止循环播放:false)*/ 
	isLoop?:boolean,

	/**（可选项）清晰度按钮的自定义(数组内容大于1条记录，清晰度切换按钮才会显示，不支持直播链接的组装切换，不能和url接口参数同时存在)。*/ 
	urlDatas?:Array,

	/**（可选项）是否窗口时显示清晰度选择按钮 (数组内容大于1条记录，清晰度切换按钮才会显示；显示:true ; 不显示:false)*/ 
	isSmallShowQxd?:boolean,

	/**（可选项）是否静音播放 (开启静音:true ; 关闭静音:false)*/ 
	isMute?:boolean,

	/**（可选项）是否开启弹幕功能 (开启:true ; 不开启:false)*/ 
	isShowDanmu?:boolean,

	/**（可选项）是否本地缓存视频,音频;直播类不能缓存,开发者自行控制;(备注:缓存文件在cache://文件目录下,如果直播乱开启改参数会导致播放异常). (开启:true ; 不开启:false)*/ 
	isLocalCache?:boolean,

	/**（可选项）全屏是否显示分享按钮 (显示:true ; 隐藏:false)*/ 
	isShowFenxiang?:boolean,

	/**（可选项）全屏是否显示更多按钮 (显示:true ; 隐藏:false)*/ 
	isShowMore?:boolean,

	/**（可选项）全屏是否显示投屏按钮 (显示:true ; 隐藏:false)*/ 
	isShowTouping?:boolean,

	/**（可选项）是否显示选集按钮 (显示:true ; 隐藏:false)*/ 
	isShowXuanji?:boolean,

	/**（可选项）是否显示下一集按钮 (显示:true ; 隐藏:false)*/ 
	isShowNext?:boolean,

	/**（可选项）是否显示上一集按钮 (显示:true ; 隐藏:false)*/ 
	isShowPre?:boolean,

	/**（可选项）窗口播放顶部控制栏是否沉侵式 (显示:true ; 隐藏:false)*/ 
	isSmallImmerse?:boolean,

	/**（可选项）窗口模式下是否长时间显示返回按钮 (显示:true ; 隐藏:false)*/ 
	isLongShowBackBtn?:boolean,

	/**（可选项）窗口是否显示分享按钮 (显示:true ; 隐藏:false)*/ 
	isSmallShowFenxiang?:boolean,

	/**（可选项）窗口是否显示更多按钮 (显示:true ; 隐藏:false)*/ 
	isSmallShowMore?:boolean,

	/**（可选项）窗口是否显示投屏按钮 (显示:true ; 隐藏:false)*/ 
	isSmallShowTouping?:boolean,

	/**（可选项）是否打开弹幕功能 (打开:true ; 关闭:false)*/ 
	isOpenDanmu?:boolean,

	/**（可选项）是否打开单页面播放模式。（当设置为true时，本页面播放器的接口只能在当前页面调用，不能跨页面；同时本页面开启多窗口模式无效）*/ 
	singlePageModule?:boolean,

	/**（可选项）是否在缓冲的时候显示网速*/ 
	isShowNetworkSpeed?:boolean,

}

interface playModule_playUrl_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

	/**（必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://*/ 
	url:string,

	/**（可选项）不填时标题默认显示url播放文件名*/ 
	title?:string,

	/**（可选项）设置本次播放是否显示默认自带的播放控制按钮*/ 
	defaultBtn?:boolean,

	/**（可选项）是否直播视频源 （直播：true；点播：false）*/ 
	isLive?:boolean,

	/**（可选项）窗口播放时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）*/ 
	isSmallOpenGesture?:boolean,

	/**（可选项）全屏时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）*/ 
	isOpenGesture?:boolean,

	/**（必填项）设置视频需要播放的时长*/ 
	process:number,

	/**（可选项）是否自动播放 (自动播放:true ; 不自动播放:false)*/ 
	isAutoPlay?:boolean,

	/**（可选项）是否循环播放 (循环播放:true ; 禁止循环播放:false)*/ 
	isLoop?:boolean,

	/**（可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动默认为false】*/ 
	isShowProcessView?:boolean,

	/**（可选项）是否显示播放时间 (显示:true ; 不显示:false)*/ 
	isShowTimeLable?:boolean,

	/**（可选项）清晰度按钮的自定义(数组内容大于1条记录，清晰度切换按钮才会显示，不支持直播链接的组装切换，不能和url接口参数同时存在)。*/ 
	urlDatas?:Array,

	/**（可选项）是否窗口时显示清晰度选择按钮 (数组内容大于1条记录，清晰度切换按钮才会显示；显示:true ; 不显示:false)*/ 
	isSmallShowQxd?:boolean,

	/**（可选项）是否静音播放 (开启静音:true ; 关闭静音:false)*/ 
	isMute?:boolean,

	/**（可选项）是否开启弹幕功能 (开启:true ; 不开启:false)*/ 
	isShowDanmu?:boolean,

	/**（可选项）是否本地缓存视频,音频;直播类不能缓存,开发者自行控制;(备注:缓存文件在cache://文件目录下,如果直播乱开启改参数会导致播放异常). (开启:true ; 不开启:false)*/ 
	isLocalCache?:boolean,

	/**（可选项）全屏是否显示分享按钮 (显示:true ; 隐藏:false)*/ 
	isShowFenxiang?:boolean,

	/**（可选项）全屏是否显示更多按钮 (显示:true ; 隐藏:false)*/ 
	isShowMore?:boolean,

	/**（可选项）全屏是否显示投屏按钮 (显示:true ; 隐藏:false)*/ 
	isShowTouping?:boolean,

	/**（可选项）是否显示选集按钮 (显示:true ; 隐藏:false)*/ 
	isShowXuanji?:boolean,

	/**（可选项）是否显示下一集按钮 (显示:true ; 隐藏:false)*/ 
	isShowNext?:boolean,

	/**（可选项）是否显示上一集按钮 (显示:true ; 隐藏:false)*/ 
	isShowPre?:boolean,

	/**（可选项）窗口播放顶部控制栏是否沉侵式 (显示:true ; 隐藏:false)*/ 
	isSmallImmerse?:boolean,

	/**（可选项）窗口模式下是否长时间显示返回按钮 (显示:true ; 隐藏:false)*/ 
	isLongShowBackBtn?:boolean,

	/**（可选项）窗口是否显示分享按钮 (显示:true ; 隐藏:false)*/ 
	isSmallShowFenxiang?:boolean,

	/**（可选项）窗口是否显示更多按钮 (显示:true ; 隐藏:false)*/ 
	isSmallShowMore?:boolean,

	/**（可选项）窗口是否显示投屏按钮 (显示:true ; 隐藏:false)*/ 
	isSmallShowTouping?:boolean,

	/**（可选项）是否打开弹幕功能 (打开:true ; 关闭:false)*/ 
	isOpenDanmu?:boolean,

	/**（可选项）是否在缓冲的时候显示网速*/ 
	isShowNetworkSpeed?:boolean,

}

interface playModule_pause_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

}

interface playModule_start_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

}

interface playModule_stop_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

}

interface playModule_getDuration_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

}

interface playModule_getCurrentPosition_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

}

interface playModule_full_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

}

interface playModule_unfull_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

}

interface playModule_addEventListener_Params {
	/**监听事件名称,可以设置的播放界面监听类型有：playEnd(播放结束),playError(播放异常),pause(暂停),play(播放),backBtn(小窗口返回按钮),full(进入全屏按钮),unfull(退出全屏按钮),click(视频区域点击监听),bufferingStart(缓冲开始),bufferingEnd(缓冲结束), onPrepared(视频准备完成),onChangeQxd(清晰度改变), fenxiangClick(分析按钮), moreClick(更多按钮), toupingClick(投屏按钮), xuanjiClick(选集按钮), nextClick(下一集按钮), preClick(上一级按钮), sendDanmuMessage(发送弹幕输入框发送内容),danmuClick(弹幕开关按钮点击)*/ 
	name:string,

}

interface playModule_isFullScreen_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

}

interface playModule_seekTo_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

	/**（必填项）设置视频需要播放的时长*/ 
	process:number,

}

interface playModule_setVolume_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

	/**（必填项）0-100*/ 
	volume:number,

}

interface playModule_hidePlayer_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

}

interface playModule_showPlayer_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

}

interface playModule_setSpeed_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

	/**（必填项）设置视频播放倍速(取值范围 0.1-1.9)*/ 
	speed:number,

}

interface playModule_updateUrlDatas_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

	/**（可选项）清晰度按钮的自定义(数组内容大于1条记录，清晰度切换按钮才会显示，不支持直播链接的组装切换，不能和url接口参数同时存在)。*/ 
	urlDatas?:Array,

}

interface playModule_sendDanmu_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

	/**（必填项）弹幕文字内容*/ 
	text:string,

	/**（可选项）弹幕文字显示颜色代码*/ 
	color?:string,

}

interface playModule_sendDanmuList_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

	/**（可选项）天际的全部数据是否循环播放(循环:true，不循环:false)*/ 
	isLoop?:boolean,

	/**（必填项）多条弹幕信息记录。*/ 
	data:Array,

}

interface playModule_getAudioTrack_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

}

interface playModule_setAudioTrack_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

	/**（可选项）音轨序号(双音轨>1:原音 2伴音)*/ 
	trackId?:number,

}

interface playModule_setMute_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

	/**（可选项）是否静音(开启静音:true 关闭静音:false)*/ 
	isMute?:boolean,

}

interface playModule_takeSnapshot_Params {
	/**（可选项）播放器序号*/ 
	index?:number,

}

interface circleMenu {
}
interface docInteraction {
}
interface appUtils {
	/** 调取页面到前台*/ 
	bringAppToFront(callback?: (ret:JSON) => void):void

	/** 关闭页面管理者。*/ 
	stopPageManager(callback?: (ret:JSON) => void):void

	/** 开机启动,设置为开机自动启动需要手机授权开机自动启动权限。*/ 
	openStart(callback?: (ret:JSON) => void):void

	/** 获取手机应用*/ 
	getApps(callback?: (ret:JSON) => void):void

	/** 应用退到后台*/ 
	moveAppToBack(callback?: (ret:JSON) => void):void

	/** 获取状态栏高度*/ 
	getStateViewHeight(callback?: (ret:JSON) => void):void

	/** 获取底部虚拟按键高度*/ 
	getBottomViewHeight(callback?: (ret:JSON) => void):void

	/** 跳转应用市场评价*/ 
	toEvaluate(callback?: (ret:JSON) => void):void

	/** 获取已安装的应用市场*/ 
	getInstallAppStores(callback?: (ret:JSON) => void):void

	/** 创建快捷方式*/ 
	addShortcut(callback?: (ret:JSON) => void):void

	/** 添加悬浮框*/ 
	addFloadWindow(callback?: (ret:JSON) => void):void

	/** 移除悬浮框*/ 
	removeFloadWindow(callback?: (ret:JSON) => void):void

	/** 检测悬浮框权限，权限未开启则只能在应用内显示*/ 
	checkFloadPermission(callback?: (ret:JSON) => void):void

	/** 添加gps开关监听*/ 
	setGpsListener(callback?: (ret:JSON) => void):void

	/** 获取gps状态*/ 
	getGpsStatus(callback?: (ret:JSON) => void):void

	/** 检查通知权限*/ 
	checkNotificationPermission(callback?: (ret:JSON) => void):void

	/** 跳转应用详情页面，可进行权限设置*/ 
	gotoAppDetail(callback?: (ret:JSON) => void):void

	/** 跳转系统设置页面*/ 
	gotoSysSetPage(callback?: (ret:JSON) => void):void

	/** 获取设备信息*/ 
	getDeviceInfo(callback?: (ret:JSON) => void):void

	/** 获取设备信号*/ 
	getDeviceDbm(callback?: (ret:JSON) => void):void

	/** 获取屏幕宽高*/ 
	getScreenSize(callback?: (ret:JSON) => void):void

	/** 获取sim卡信息*/ 
	getSimInfo(callback?: (ret:JSON) => void):void

	/** 判断是否为系统应用*/ 
	isSystemApp(callback?: (ret:JSON) => void):void

	/** 获取应用签名*/ 
	getSignature(callback?: (ret:JSON) => void):void

	/** 设置壁纸*/ 
	setWallpaper(callback?: (ret:JSON) => void):void

	/** 安装应用包*/ 
	installApk():void

	/** 卸载应用*/ 
	unInstallApk():void

}
interface codeScan {
	/** 二维码,条形码扫描*/ 
	scan(callback?: (ret:JSON) => void):void

	/** 获取条形码base64图片*/ 
	getBarCode(callback?: (ret:JSON) => void):void

	/** 获取二维码base64图片*/ 
	getQRCode(callback?: (ret:JSON) => void):void

}
interface jumpbrowser {
}
interface videoTrans {
	/** 获取进度。*/ 
	progress():void

	/** 取消。*/ 
	cancel():void

	/** 清除mp4视频文件本地缓存。*/ 
	clearCache():void

}
interface zySmallVideo {
}
interface keepingAppAlive {
	/** 尽量保活进程不被杀死的方法。*/ 
	startKeepAlive(callback?: (ret:JSON) => void):void

	/** 设置闹钟的时间*/ 
	setAlarm(callback?: (ret:JSON) => void):void

	/** 获取所有的闹钟*/ 
	getAlarm():void

	/**
	 * `移除闹钟`
	 * ========params==========
	 *
	 * `alarmList` :Array : (可选项)需要移除的闹钟的数据；如果无此项，删除所有的闹钟
	 */
	removeAlarm(params:keepingAppAlive_removeAlarm_Params, callback?: (ret:JSON) => void):void

}
interface keepingAppAlive_removeAlarm_Params {
	/**(可选项)需要移除的闹钟的数据；如果无此项，删除所有的闹钟*/ 
	alarmList?:Array,

}

interface androidShortcut {
	/**
	 * `创建快捷方式`
	 * ========params==========
	 *
	 * `name` :string : 快捷方式名称
	 */
	createShortcut(params:androidShortcut_createShortcut_Params, callback?: (ret:JSON) => void):void

}
interface androidShortcut_createShortcut_Params {
	/**快捷方式名称*/ 
	name:string,

}

interface iconToImage {
	/**
	 * `执行转换并保存`
	 * ========params==========
	 *
	 * `fontFile` :string : 字体文件路径，支持ttf格式，相对路径格式，如"../../css/iconfont.ttf"
	 *
	 * `upFile` :string : 更新描述文件保存路径，图片不需要每次都去转换保存，只有发生了变化才更新，绝对路径格式，如"box://image/iconToImageUp.json"
	 *
	 * `fontList` :Array : iconfont图片数组,如没有请写 fontList:[],
	 *
	 * `svgList` :Array : svg图片数组,如没有请写 svgList:[],
	 */
	go(params:iconToImage_go_Params, callback?: (ret:JSON) => void):void

}
interface iconToImage_go_Params {
	/**字体文件路径，支持ttf格式，相对路径格式，如"../../css/iconfont.ttf"*/ 
	fontFile:string,

	/**更新描述文件保存路径，图片不需要每次都去转换保存，只有发生了变化才更新，绝对路径格式，如"box://image/iconToImageUp.json"*/ 
	upFile:string,

	/**iconfont图片数组,如没有请写 fontList:[],*/ 
	fontList:Array,

	/**svg图片数组,如没有请写 svgList:[],*/ 
	svgList:Array,

}

interface photoPicker {
	/** 打开添加相册界面*/ 
	addPhoto(callback?: (ret:JSON) => void):void

	/**
	 * `删除选取的相册的相册或视频`
	 * ========params==========
	 *
	 * `name` :string : 从相册中选取内容的名字。
	 */
	delectPhoto(params:photoPicker_delectPhoto_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取选取相册或视频的名字和地址`
	 * ========params==========
	 *
	 * `name` :string : 
	 */
	selectInfo(params:photoPicker_selectInfo_Params, callback?: (ret:JSON) => void):void

}
interface photoPicker_delectPhoto_Params {
	/**从相册中选取内容的名字。*/ 
	name:string,

}

interface photoPicker_selectInfo_Params {
	/***/ 
	name:string,

}

interface changeIcon {
}
interface netTime {
	/** 同步获取时间(时间戳)。如果无网络，返回的是0*/ 
	getTime():void

}
interface promotionLink {
	/** 读取apk中的渠道字符串，前提是开发者已在服务器中用上文方法将字符串写入apk，此时本接口将返回写入apk的字符串，否则本接口将返回"null"。*/ 
	getChannelStr():void

}
interface arcColorPicker {
}
interface downloadManager {
}
interface vtingPlayer {
	/**
	 * `播放网络音频，支持m3u8纯音频播放`
	 * ========params==========
	 *
	 * `url` :string : 音频资源地址
	 */
	play(params:vtingPlayer_play_Params, callback?: (ret:JSON) => void):void

	/** 暂停播放*/ 
	pause():void

	/** 停止播放*/ 
	stop():void

	/**
	 * `设置播放位置`
	 * ========params==========
	 *
	 * `progress` :number : 播放位置百分比，取值范围：0-100
	 */
	setProgress(params:vtingPlayer_setProgress_Params):void

	/**
	 * `设置当前播放内容锁屏显示信息`
	 * ========params==========
	 *
	 * `title` :string : （可选项）显示标题。
	 *
	 * `artist` :string : （可选项）显示作者。
	 *
	 * `zhuanji` :string : （可选项）显示专辑名。
	 */
	nowPlaying(params:vtingPlayer_nowPlaying_Params):void

}
interface vtingPlayer_play_Params {
	/**音频资源地址*/ 
	url:string,

}

interface vtingPlayer_setProgress_Params {
	/**播放位置百分比，取值范围：0-100*/ 
	progress:number,

}

interface vtingPlayer_nowPlaying_Params {
	/**（可选项）显示标题。*/ 
	title?:string,

	/**（可选项）显示作者。*/ 
	artist?:string,

	/**（可选项）显示专辑名。*/ 
	zhuanji?:string,

}

interface easyVideoCompression {
	/**
	 * `传入视频压缩倍数及压缩动画显隐参数`
	 * ========params==========
	 *
	 * `cpRatio` :null : null
	 */
	easyCompression(params:easyVideoCompression_easyCompression_Params, callback?: (ret:JSON) => void):void

	/** 无需传值及返回值*/ 
	easyClearCache():void

}
interface easyVideoCompression_easyCompression_Params {
	/**null*/ 
	cpRatio:null,

}

interface planNotify {
	/** 打开自定义通知*/ 
	open(callback?: (ret:JSON) => void):void

	/** 关闭自定义通知*/ 
	close(callback?: (ret:JSON) => void):void

	/**
	 * `计划提醒通知`
	 * ========params==========
	 *
	 * `notifyId` :number : 通知id，可根据此id关闭通知。id相同仅显示最后一个通知，id不同分别展示
	 *
	 * `localId` :string : 本地行程id
	 *
	 * `tripId` :string : 行程id
	 *
	 * `title` :string : 计划title
	 *
	 * `content` :string : 计划内容
	 *
	 * `extra` :string : （可选项）附加内容
	 */
	planRemind(params:planNotify_planRemind_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消提醒`
	 * ========params==========
	 *
	 * `notifyId` :number : 通知id，planRemind 接口中返回notifyId
	 */
	cancleRemind(params:planNotify_cancleRemind_Params, callback?: (ret:JSON) => void):void

	/** 设置计划提醒通知中【将此事项标记已完成】点击监听*/ 
	setFinishPlanListener(callback?: (ret:JSON) => void):void

	/** 取消计划提醒通知中【将此事项标记已完成】点击监听*/ 
	cancleFinishPlanListener(callback?: (ret:JSON) => void):void

}
interface planNotify_planRemind_Params {
	/**通知id，可根据此id关闭通知。id相同仅显示最后一个通知，id不同分别展示*/ 
	notifyId:number,

	/**本地行程id*/ 
	localId:string,

	/**行程id*/ 
	tripId:string,

	/**计划title*/ 
	title:string,

	/**计划内容*/ 
	content:string,

	/**（可选项）附加内容*/ 
	extra?:string,

}

interface planNotify_cancleRemind_Params {
	/**通知id，planRemind 接口中返回notifyId*/ 
	notifyId:number,

}

interface dvMonitor {
	/** 注册设备监听事件*/ 
	addListener():void

	/** 移除设备监听*/ 
	removeListener():void

}
interface audioCover {
}
interface mobtools {
}
interface imageCrop {
}
interface ACScanner {
	/**
	 * `打开扫描控件`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）扫描器的位置及尺寸，**在安卓平台宽高比须跟屏幕宽高比一致，否则摄像头可视区域的图像可能出现少许变形；w和h属性最好使用api.winWidth和api.winHeight,这样不会导致变形，也不会出现手机必须要在一定的距离上才能扫描出来的现象**
	 *
	 * `scanAnim` :JSON : （可选项）扫描动画配置
	 *
	 * `scanType` :number : （可选项）扫描码类型
	 *
	 * `sound` :string : （可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），endSound为true时有效**为保证兼容性，推荐使用 wav 格式的短音频文件**
	 *
	 * `scanInterval` :number : （可选项）连续扫描间隔；单位：秒
	 *
	 * `scanStill` :boolean : （可选项）是否连续扫描；
	 *
	 * `isDrawQRCodeRect` :boolean : (可选项) 是否开启二维码自动对焦
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openScan(params:ACScanner_openScan_Params, callback?: (ret:JSON) => void):void

	/** 关闭扫描控件*/ 
	closeScan(callback?: (ret:JSON) => void):void

	/** 显示控件，打开以后有效*/ 
	show(callback?: (ret:JSON) => void):void

	/** 隐藏控件，打开以后有效*/ 
	hide(callback?: (ret:JSON) => void):void

	/** 开关灯*/ 
	flash(callback?: (ret:JSON) => void):void

	/** 生成二维码*/ 
	encodeQR(callback?: (ret:JSON) => void):void

	/** 解码二维码*/ 
	decodeQR(callback?: (ret:JSON) => void):void

}
interface ACScanner_openScan_Params {
	/**（可选项）扫描器的位置及尺寸，**在安卓平台宽高比须跟屏幕宽高比一致，否则摄像头可视区域的图像可能出现少许变形；w和h属性最好使用api.winWidth和api.winHeight,这样不会导致变形，也不会出现手机必须要在一定的距离上才能扫描出来的现象***/ 
	rect?:JSON,

	/**（可选项）扫描动画配置*/ 
	scanAnim?:JSON,

	/**（可选项）扫描码类型*/ 
	scanType?:number,

	/**（可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），endSound为true时有效**为保证兼容性，推荐使用 wav 格式的短音频文件***/ 
	sound?:string,

	/**（可选项）连续扫描间隔；单位：秒*/ 
	scanInterval?:number,

	/**（可选项）是否连续扫描；*/ 
	scanStill?:boolean,

	/**(可选项) 是否开启二维码自动对焦*/ 
	isDrawQRCodeRect?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface videoRecorder {
	/**
	 * `打开录像机`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `size` :JSON : （可选项）录制的视频大小。暂仅支持iOS
	 *
	 * `fps` :number : （可选项）帧率，暂仅支持iOS平台
	 *
	 * `quality` :string : （可选项）录像视频质量
	 *
	 * `orientation` :string : （可选项）录制的视频的方向
	 *
	 * `saveToAlbum` :boolean : （可选项）录制的视频是否自动保存到系统相册（系统媒体库）
	 *
	 * `save` :JSON : （可选项）录制的视频保存信息配置
	 *
	 * `camera` :string : （可选项）摄像头
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:videoRecorder_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置摄像头方向，请在调用 start 接口之前调用`
	 * ========params==========
	 *
	 * `target` :string : （可选项）设置方向的对象
	 *
	 * `orientation` :string : （可选项）录制的视频的方向
	 */
	setOrientation(params:videoRecorder_setOrientation_Params):void

	/**
	 * `开始录像`
	 * ========params==========
	 *
	 * `timer` :number : （可选项）视频录制倒计时计时器，单位为秒（s)，亦可通过 stop 接口停止录像
	 *
	 * `save` :JSON : （可选项）录制的视频保存信息配置，若本参数不传，则以open 接口内的 save参数为准
	 *
	 * `audioUrl` :string : （可选项）视频背景音乐地址，支持widget、fs
	 *
	 * `isMute` :boolean : （可选项）是否静音录制
	 */
	start(params:videoRecorder_start_Params):void

	/** 停止录像*/ 
	stop():void

	/** 关闭录像机*/ 
	close():void

	/** 显示已隐藏的录像机*/ 
	show():void

	/** 隐藏录像机，并没有从内存里清除*/ 
	hide():void

	/**
	 * `重设拍摄区域的大小和位置`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）重设模块的位置及尺寸
	 */
	setRect(params:videoRecorder_setRect_Params):void

	/** 获取录像机当前缩放数值*/ 
	getZoom():void

	/**
	 * `设置视图大小，若为 2 则表示远视图被放大一倍`
	 * ========params==========
	 *
	 * `zoom` :number : （可选项）设置的焦距大小（视图被放大的倍数），取值范围：大于 1.0
	 */
	setZoom(params:videoRecorder_setZoom_Params):void

	/** 获取当前闪关灯状态*/ 
	getFlashlight():void

	/**
	 * `设置闪关灯，在 iOS 平台上，前置摄像头打开时不支持操作闪光灯`
	 * ========params==========
	 *
	 * `flashlight` :string : （可选项）闪光灯类型
	 */
	setFlashlight(params:videoRecorder_setFlashlight_Params):void

	/** 获取当前占用的摄像头*/ 
	getCamera():void

	/**
	 * `设置前置/后置摄像头`
	 * ========params==========
	 *
	 * `camera` :string : （可选项）摄像头
	 *
	 * `animation` :boolean : （可选项）切换摄像头时是否带动画效果，本参数暂仅支持iOS平台
	 */
	setCamera(params:videoRecorder_setCamera_Params):void

	/**
	 * `设置当前录像机对焦模式，配合 setFocusRegion 接口使用`
	 * ========params==========
	 *
	 * `focusMode` :string : （可选项）对焦模式
	 */
	setFocusMode(params:videoRecorder_setFocusMode_Params):void

	/**
	 * `设置当前录像机对焦区域，需要跟 setFocusMode 接口同时使用。`
	 * ========params==========
	 *
	 * `region` :JSON : （可选项）焦点坐标（在录像区域内的坐标，原点在该区域左上角，往右为x轴，下为y轴）
	 */
	setFocusRegion(params:videoRecorder_setFocusRegion_Params):void

	/**
	 * `设置当前录像机对焦提示框样式`
	 * ========params==========
	 *
	 * `box` :string : （可选项）对焦提示框样式配置，该提示框是一个空心的正方形框。当调用setFocusRegion接口时，如果 animation 参数为 true，该提示框的显示与隐藏会有动画。
	 *
	 * `icon` :string : （可选项）自定义的提示框图标路径，要求本地路径（支持fs://、widget://协议），图标大小为：80*80
	 *
	 * `autoHide` :number : （可选项）设置对焦提示框自动隐藏时间，当为 -1 时，不自动隐藏，需调用 hideFocusBox 接口手动隐藏
	 *
	 * `animation` :boolean : （可选项）设置对焦提示框显示和隐藏时是否使用动画
	 */
	setFocusBox(params:videoRecorder_setFocusBox_Params):void

	/** 隐藏对焦提示框*/ 
	hideFocusBox():void

	/**
	 * `事件监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件类型
	 */
	addEventListener(params:videoRecorder_addEventListener_Params, callback?: (ret:JSON) => void):void

	/** 开始录像后的监听，此接口只适用于android；*/ 
	startCallback():void

	/**
	 * `拍照`
	 * ========params==========
	 *
	 * `album` :boolean : （可选项）照片是否保存到相册，需要申请相关权限
	 *
	 * `path` :string : （可选项）拍照保存地址，需要写明后缀名jpg，如：fs://abc.jpg
	 *
	 * `quality` :any : （可选项）照片质量，取值 0-1.0
	 */
	takePhoto(params:videoRecorder_takePhoto_Params, callback?: (ret:JSON) => void):void

	/**
	 * `对录制视频截图，本接口暂仅支持iOS端`
	 * ========params==========
	 *
	 * `album` :boolean : （可选项）照片是否保存到相册，需要申请相关权限
	 *
	 * `path` :string : （可选项）拍照保存地址，需要写明后缀名jpg，如：fs://abc.jpg
	 */
	videoShot(params:videoRecorder_videoShot_Params, callback?: (ret:JSON) => void):void

	/** 获取当前设备方向*/ 
	getDeviceOrientation():void

	/**
	 * `视频音频合成`
	 * ========params==========
	 *
	 * `videoUrl` :string : （可选项）视频路径，支持widget、fs
	 *
	 * `audioUrl` :string : （可选项）视频背景音乐地址，支持widget、fs
	 */
	compose(params:videoRecorder_compose_Params, callback?: (ret:JSON) => void):void

}
interface videoRecorder_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）录制的视频大小。暂仅支持iOS*/ 
	size?:JSON,

	/**（可选项）帧率，暂仅支持iOS平台*/ 
	fps?:number,

	/**（可选项）录像视频质量*/ 
	quality?:string,

	/**（可选项）录制的视频的方向*/ 
	orientation?:string,

	/**（可选项）录制的视频是否自动保存到系统相册（系统媒体库）*/ 
	saveToAlbum?:boolean,

	/**（可选项）录制的视频保存信息配置*/ 
	save?:JSON,

	/**（可选项）摄像头*/ 
	camera?:string,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface videoRecorder_setOrientation_Params {
	/**（可选项）设置方向的对象*/ 
	target?:string,

	/**（可选项）录制的视频的方向*/ 
	orientation?:string,

}

interface videoRecorder_start_Params {
	/**（可选项）视频录制倒计时计时器，单位为秒（s)，亦可通过 stop 接口停止录像*/ 
	timer?:number,

	/**（可选项）录制的视频保存信息配置，若本参数不传，则以open 接口内的 save参数为准*/ 
	save?:JSON,

	/**（可选项）视频背景音乐地址，支持widget、fs*/ 
	audioUrl?:string,

	/**（可选项）是否静音录制*/ 
	isMute?:boolean,

}

interface videoRecorder_setRect_Params {
	/**（可选项）重设模块的位置及尺寸*/ 
	rect?:JSON,

}

interface videoRecorder_setZoom_Params {
	/**（可选项）设置的焦距大小（视图被放大的倍数），取值范围：大于 1.0*/ 
	zoom?:number,

}

interface videoRecorder_setFlashlight_Params {
	/**（可选项）闪光灯类型*/ 
	flashlight?:string,

}

interface videoRecorder_setCamera_Params {
	/**（可选项）摄像头*/ 
	camera?:string,

	/**（可选项）切换摄像头时是否带动画效果，本参数暂仅支持iOS平台*/ 
	animation?:boolean,

}

interface videoRecorder_setFocusMode_Params {
	/**（可选项）对焦模式*/ 
	focusMode?:string,

}

interface videoRecorder_setFocusRegion_Params {
	/**（可选项）焦点坐标（在录像区域内的坐标，原点在该区域左上角，往右为x轴，下为y轴）*/ 
	region?:JSON,

}

interface videoRecorder_setFocusBox_Params {
	/**（可选项）对焦提示框样式配置，该提示框是一个空心的正方形框。当调用setFocusRegion接口时，如果 animation 参数为 true，该提示框的显示与隐藏会有动画。*/ 
	box?:string,

	/**（可选项）自定义的提示框图标路径，要求本地路径（支持fs://、widget://协议），图标大小为：80*80*/ 
	icon?:string,

	/**（可选项）设置对焦提示框自动隐藏时间，当为 -1 时，不自动隐藏，需调用 hideFocusBox 接口手动隐藏*/ 
	autoHide?:number,

	/**（可选项）设置对焦提示框显示和隐藏时是否使用动画*/ 
	animation?:boolean,

}

interface videoRecorder_addEventListener_Params {
	/**监听的事件类型*/ 
	name:string,

}

interface videoRecorder_takePhoto_Params {
	/**（可选项）照片是否保存到相册，需要申请相关权限*/ 
	album?:boolean,

	/**（可选项）拍照保存地址，需要写明后缀名jpg，如：fs://abc.jpg*/ 
	path?:string,

	/**（可选项）照片质量，取值 0-1.0*/ 
	quality?:any,

}

interface videoRecorder_videoShot_Params {
	/**（可选项）照片是否保存到相册，需要申请相关权限*/ 
	album?:boolean,

	/**（可选项）拍照保存地址，需要写明后缀名jpg，如：fs://abc.jpg*/ 
	path?:string,

}

interface videoRecorder_compose_Params {
	/**（可选项）视频路径，支持widget、fs*/ 
	videoUrl?:string,

	/**（可选项）视频背景音乐地址，支持widget、fs*/ 
	audioUrl?:string,

}

interface startupObject {
	/** 获取手机卡运营商信息、网络信息和信号强度信息*/ 
	startup(callback?: (ret:JSON) => void):void

}
interface vtb {
	/** 获取视频首帧封面*/ 
	getFirstImage(callback?: (ret:JSON) => void):void

	/** 视频生成gif动画*/ 
	getGif():void

}
interface openAppStore {
	/**
	 * `在app内打开应用`
	 * ========params==========
	 *
	 * `appID` :string : 应用的唯一标示（可在iTunes上查看）
	 */
	inApp(params:openAppStore_inApp_Params):void

	/**
	 * `在AppStore里面打开应用`
	 * ========params==========
	 *
	 * `appID` :string : 应用的唯一标示（可在iTunes上查看）
	 */
	appStore(params:openAppStore_appStore_Params):void

}
interface openAppStore_inApp_Params {
	/**应用的唯一标示（可在iTunes上查看）*/ 
	appID:string,

}

interface openAppStore_appStore_Params {
	/**应用的唯一标示（可在iTunes上查看）*/ 
	appID:string,

}

interface dkplayer {
	/**
	 * `打开播放器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `coverImg` :string : （可选项）播放器的封面
	 *
	 * `url` :string : 播放地址
	 *
	 * `title` :string : （可选项）播放器的标题
	 *
	 * `autoPlay` :boolean : （可选项）是否自动播放视频
	 *
	 * `enableFull` :boolean : （可选项）是否全屏播放
	 *
	 * `isLive` :boolean : （可选项）是否是直播
	 *
	 * `animation` :boolean : （可选项）打开播放器是否使用动画
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:dkplayer_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置播放地址`
	 * ========params==========
	 *
	 * `url` :string : 播放地址
	 *
	 * `title` :string : 播放标题，默认为url地址
	 *
	 * `autoPlay` :boolean : （可选项）是否自动播放视频
	 */
	setUrl(params:dkplayer_setUrl_Params):void

	/** 开始播放*/ 
	start():void

}
interface dkplayer_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）播放器的封面*/ 
	coverImg?:string,

	/**播放地址*/ 
	url:string,

	/**（可选项）播放器的标题*/ 
	title?:string,

	/**（可选项）是否自动播放视频*/ 
	autoPlay?:boolean,

	/**（可选项）是否全屏播放*/ 
	enableFull?:boolean,

	/**（可选项）是否是直播*/ 
	isLive?:boolean,

	/**（可选项）打开播放器是否使用动画*/ 
	animation?:boolean,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface dkplayer_setUrl_Params {
	/**播放地址*/ 
	url:string,

	/**播放标题，默认为url地址*/ 
	title:string,

	/**（可选项）是否自动播放视频*/ 
	autoPlay?:boolean,

}

interface netAudio {
	/** 播放网络音频时，清除本地缓存*/ 
	expungeCache():void

}
interface scanner {
}
interface iap {
}
interface shareTool {
}
interface plateRecognize {
	/**
	 * `打开离线车牌识别页面`
	 * ========params==========
	 *
	 * `rect` :JSON : (可选项）播放器的位置及长宽
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（ios：只指 frame，传 window 无效）(android可以是frame或者Window，但是在全屏的时候，需要挂在Window上或者frame是全屏)
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:plateRecognize_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭离线车牌识别页面*/ 
	close():void

	/** 隐藏离线车牌识别页面*/ 
	hide():void

	/** 显示离线车牌识别页面*/ 
	show():void

}
interface plateRecognize_open_Params {
	/**(可选项）播放器的位置及长宽*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（ios：只指 frame，传 window 无效）(android可以是frame或者Window，但是在全屏的时候，需要挂在Window上或者frame是全屏)*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface yxsConversation {
	/**
	 * `导航栏隐藏显示控制`
	 * ========params==========
	 *
	 * `show` :boolean : （可选项）是否显示导航栏
	 */
	navibarShow(params:yxsConversation_navibarShow_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置开机时间`
	 * ========params==========
	 *
	 * `date` :string : 开机时间，格式yyyy-MM-dd HH:mm:ss
	 */
	setPowerOn(params:yxsConversation_setPowerOn_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置关机时间`
	 * ========params==========
	 *
	 * `date` :string : 关机时间，格式yyyy-MM-dd HH:mm:ss
	 */
	setPowerOff(params:yxsConversation_setPowerOff_Params, callback?: (ret:JSON) => void):void

	/** 取消开机时间*/ 
	cancelPowerOn(callback?: (ret:JSON) => void):void

	/** 取消关机时间*/ 
	cancelPowerOff(callback?: (ret:JSON) => void):void

	/**
	 * `设置系统时间`
	 * ========params==========
	 *
	 * `date` :string : 时间，格式yyyy-MM-dd HH:mm:ss
	 */
	setSysTime(params:yxsConversation_setSysTime_Params, callback?: (ret:JSON) => void):void

	/** 截屏，调用此接口系统会进行截屏，并将照片存放到内置SD卡根目录下/Screenshots文件夹中*/ 
	screenshot(callback?: (ret:JSON) => void):void

	/**
	 * `补光灯管理`
	 * ========params==========
	 *
	 * `open` :boolean : 打开或关闭补光灯
	 */
	flashControl(params:yxsConversation_flashControl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开关锁`
	 * ========params==========
	 *
	 * `open` :boolean : 打开或关闭锁
	 */
	lockControl(params:yxsConversation_lockControl_Params, callback?: (ret:JSON) => void):void

}
interface yxsConversation_navibarShow_Params {
	/**（可选项）是否显示导航栏*/ 
	show?:boolean,

}

interface yxsConversation_setPowerOn_Params {
	/**开机时间，格式yyyy-MM-dd HH:mm:ss*/ 
	date:string,

}

interface yxsConversation_setPowerOff_Params {
	/**关机时间，格式yyyy-MM-dd HH:mm:ss*/ 
	date:string,

}

interface yxsConversation_setSysTime_Params {
	/**时间，格式yyyy-MM-dd HH:mm:ss*/ 
	date:string,

}

interface yxsConversation_flashControl_Params {
	/**打开或关闭补光灯*/ 
	open:boolean,

}

interface yxsConversation_lockControl_Params {
	/**打开或关闭锁*/ 
	open:boolean,

}

interface wallPaper {
}
interface zyPlayVideo {
}
interface checkappexist {
	/** 检测当前手机是否安装某个软件*/ 
	checkAppExist():void

}
interface openSet {
	/**
	 * `打开系统设置页面`
	 * ========params==========
	 *
	 * `id` :any : （必填）要打开的设置页面编号
	 */
	open(params:openSet_open_Params):void

}
interface openSet_open_Params {
	/**（必填）要打开的设置页面编号*/ 
	id:any,

}

interface HmacSHA256 {
}
interface internationalization {
}
interface runBackground {
}
interface db {
	/**
	 * `获取指定目录下的子文件`
	 * ========params==========
	 *
	 * `directory` :string : （可选项）目录路径，不传时使用 db 模块的默认路径。支持 fs://、widget://等协议（如fs://user.db）
	 */
	subfile(params:db_subfile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开数据库，若数据库不存在则创建数据库。`
	 * ========params==========
	 *
	 * `name` :string : 数据库名称
	 *
	 * `path` :string : （可选项）数据库所在路径，不传时使用默认创建的路径。支持 fs://、widget://等协议（如fs://user.db）
	 */
	openDatabase(params:db_openDatabase_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭数据库`
	 * ========params==========
	 *
	 * `name` :string : 数据库名称
	 */
	closeDatabase(params:db_closeDatabase_Params, callback?: (ret:JSON) => void):void

	/**
	 * `执行事务操作语句`
	 * ========params==========
	 *
	 * `name` :string : 数据库名称
	 *
	 * `operation` :string : 事务操作类型，取值范围如下：
	 */
	transaction(params:db_transaction_Params, callback?: (ret:JSON) => void):void

	/**
	 * `执行 sql`
	 * ========params==========
	 *
	 * `name` :string : 数据库名称
	 *
	 * `sql` :string : sql 语句
	 */
	executeSql(params:db_executeSql_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询sql`
	 * ========params==========
	 *
	 * `name` :string : 数据库名称
	 *
	 * `sql` :string : sql语句
	 */
	selectSql(params:db_selectSql_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取指定目录下的子文件`
	 * ========params==========
	 *
	 * `directory` :string : （可选项）目录路径，不传时使用 db 模块的默认路径。支持 fs://、widget://等协议（如fs://user.db）
	 */
	subfileSync(params:db_subfileSync_Params):JSON;

	/**
	 * `打开数据库，若数据库不存在则创建数据库（同步接口）。`
	 * ========params==========
	 *
	 * `name` :string : 数据库名称
	 *
	 * `path` :string : （可选项）数据库所在路径，不传时使用默认创建的路径。支持 fs://、widget://等协议（如fs://user.db）
	 */
	openDatabaseSync(params:db_openDatabaseSync_Params):JSON;

	/**
	 * `关闭数据库（同步接口）`
	 * ========params==========
	 *
	 * `name` :string : 数据库名称
	 */
	closeDatabaseSync(params:db_closeDatabaseSync_Params):JSON;

	/**
	 * `执行事务操作语句（同步接口）`
	 * ========params==========
	 *
	 * `name` :string : 数据库名称
	 *
	 * `operation` :string : 事务操作类型，取值范围如下：
	 */
	transactionSync(params:db_transactionSync_Params):JSON;

	/**
	 * `执行 sql（同步接口）`
	 * ========params==========
	 *
	 * `name` :string : 数据库名称
	 *
	 * `sql` :string : sql 语句
	 */
	executeSqlSync(params:db_executeSqlSync_Params):JSON;

	/**
	 * `查询 sql（同步接口）`
	 * ========params==========
	 *
	 * `name` :string : 数据库名称
	 *
	 * `sql` :string : sql语句
	 */
	selectSqlSync(params:db_selectSqlSync_Params):JSON;

}
interface db_subfile_Params {
	/**（可选项）目录路径，不传时使用 db 模块的默认路径。支持 fs://、widget://等协议（如fs://user.db）*/ 
	directory?:string,

}

interface db_openDatabase_Params {
	/**数据库名称*/ 
	name:string,

	/**（可选项）数据库所在路径，不传时使用默认创建的路径。支持 fs://、widget://等协议（如fs://user.db）*/ 
	path?:string,

}

interface db_closeDatabase_Params {
	/**数据库名称*/ 
	name:string,

}

interface db_transaction_Params {
	/**数据库名称*/ 
	name:string,

	/**事务操作类型，取值范围如下：*/ 
	operation:string,

}

interface db_executeSql_Params {
	/**数据库名称*/ 
	name:string,

	/**sql 语句*/ 
	sql:string,

}

interface db_selectSql_Params {
	/**数据库名称*/ 
	name:string,

	/**sql语句*/ 
	sql:string,

}

interface db_subfileSync_Params {
	/**（可选项）目录路径，不传时使用 db 模块的默认路径。支持 fs://、widget://等协议（如fs://user.db）*/ 
	directory?:string,

}

interface db_openDatabaseSync_Params {
	/**数据库名称*/ 
	name:string,

	/**（可选项）数据库所在路径，不传时使用默认创建的路径。支持 fs://、widget://等协议（如fs://user.db）*/ 
	path?:string,

}

interface db_closeDatabaseSync_Params {
	/**数据库名称*/ 
	name:string,

}

interface db_transactionSync_Params {
	/**数据库名称*/ 
	name:string,

	/**事务操作类型，取值范围如下：*/ 
	operation:string,

}

interface db_executeSqlSync_Params {
	/**数据库名称*/ 
	name:string,

	/**sql 语句*/ 
	sql:string,

}

interface db_selectSqlSync_Params {
	/**数据库名称*/ 
	name:string,

	/**sql语句*/ 
	sql:string,

}

interface FNRecordMp3 {
	/**
	 * `初始化录音`
	 * ========params==========
	 *
	 * `path` :string : 生成的mp3路径；支持fs:// （仅支持iOS）
	 *
	 * `fileDir` :string : 存放mp3文件的路径，文件夹路径；支持fs，原生路径，例：'fs://record/' 注意结尾必须要有'/' （仅支持安卓）
	 */
	open(params:FNRecordMp3_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始录音`
	 * ========params==========
	 *
	 * `afterSecond` :number : 延时多少秒开始录音
	 */
	start(params:FNRecordMp3_start_Params, callback?: (ret:JSON) => void):void

	/**
	 * `停止录音`
	 * ========params==========
	 *
	 * `second` :number : 多少秒以内的录音不保存（仅ios支持）
	 */
	stop(params:FNRecordMp3_stop_Params, callback?: (ret:JSON) => void):void

	/** 暂停录音 （仅支持安卓）*/ 
	pause(callback?: (ret:JSON) => void):void

	/** 恢复录音/继续录音 （仅支持安卓）*/ 
	continue(callback?: (ret:JSON) => void):void

	/** 获取当前/实时音量 （仅安卓支持）*/ 
	getVolume(callback?: (ret:JSON) => void):void

	/** 添加事件监听者 （仅支持安卓）*/ 
	addEventListener(callback?: (ret:JSON) => void):void

}
interface FNRecordMp3_open_Params {
	/**生成的mp3路径；支持fs:// （仅支持iOS）*/ 
	path:string,

	/**存放mp3文件的路径，文件夹路径；支持fs，原生路径，例：'fs://record/' 注意结尾必须要有'/' （仅支持安卓）*/ 
	fileDir:string,

}

interface FNRecordMp3_start_Params {
	/**延时多少秒开始录音*/ 
	afterSecond:number,

}

interface FNRecordMp3_stop_Params {
	/**多少秒以内的录音不保存（仅ios支持）*/ 
	second:number,

}

interface miniVR {
	/**
	 * `跳转到vr视频播放。`
	 * ========params==========
	 *
	 * `url` :string : （必填）视频文件地址。仅支持m3u8在线播放。
	 *
	 * `mode` :number : （可选项）播放模式，默认是0，0是普通模式 1是单眼模式 2是双眼模式。
	 */
	openVideo(params:miniVR_openVideo_Params, callback?: (ret:JSON) => void):void

}
interface miniVR_openVideo_Params {
	/**（必填）视频文件地址。仅支持m3u8在线播放。*/ 
	url:string,

	/**（可选项）播放模式，默认是0，0是普通模式 1是单眼模式 2是双眼模式。*/ 
	mode?:number,

}

interface walletCards {
	/** 添加卡片*/ 
	add():void

}
interface chromeDebug {
}
interface FNScanner {
	/**
	 * `打开自带默认 UI 效果的二维码/条形码扫描页面，本界面相当于打开一个 window 窗口，其界面内容不支持自定义`
	 * ========params==========
	 *
	 * `sound` :string : （可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用 wav 格式的短音频文件**
	 *
	 * `autorotation` :boolean : （可选项）扫描页面是否自动旋转（横竖屏）
	 *
	 * `saveToAlbum` :boolean : （可选项）扫描的二维码/条形码图片是否自动保存到相册
	 *
	 * `verticalLineColor` :string : (可选项) 字符串类型；竖屏时扫描线的颜色,支持支持rgb、rgba、#；
	 *
	 * `landscapeLineColor` :string : (可选项) 字符串类型；横屏时扫描线的颜色,支持支持rgb、rgba、#； (android不支持，android的横竖屏是一个颜色)
	 *
	 * `hintText` :string : (可选项) 字符串类型；二维码/条形码界面扫码界面底下的文字
	 *
	 * `albumText` :string : (可选项) 相册按钮文字
	 *
	 * `lightText` :string : (可选项) 灯光开启文字
	 *
	 * `closeText` :string : (可选项) 灯光关闭文字
	 *
	 * `isAlbum` :boolean : (可选项) 是否隐藏相册按钮
	 *
	 * `isLight` :boolean : (可选项) 是否隐藏闪光灯按钮
	 *
	 * `isPush` :boolean : (可选项) 页面跳转是否改为push，本参数仅支持iOS
	 *
	 * `font` :JSON : （可选项）文字样式
	 *
	 * `saveImg` :JSON : （可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存
	 *
	 * `isDrawQRCodeRect` :boolean : (可选项) 是否开启二维码自动对焦
	 *
	 * `qRCodeRectWidth` :number : (可选项) 二维码自动对焦框宽度 (android不支持)
	 *
	 * `qRCodeRectColor` :any : (可选项) 二维码自动对焦框颜色，支持 rgb、rgba、#； (android不支持)
	 *
	 * `isGBK` :boolean : (可选项) 是否GBK编码，如出现中文乱码，可能是用GBK编码带中文的数据生成二维码导致，此时就需要设置为true，此参数仅支持iOS，此参数在1.1.9（包含）版本以后弃用，请使用encoding参数
	 *
	 * `encoding` :number : (可选项) 编码类型
	 */
	open(params:FNScanner_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开二维码/条码扫描器`
	 * ========params==========
	 *
	 * `sound` :string : （可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用 wav 格式的短音频文件**
	 *
	 * `autorotation` :boolean : （可选项）扫描页面是否自动旋转（横竖屏）
	 *
	 * `saveToAlbum` :boolean : （可选项）扫描的二维码/条形码图片是否自动保存到相册
	 *
	 * `verticalLineColor` :string : (可选项) 字符串类型；竖屏时扫描线的颜色,支持支持rgb、rgba、#；仅android有效
	 *
	 * `saveImg` :JSON : （可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存
	 *
	 * `hintText` :string : (可选项) 字符串类型；二维码/条形码界面扫码界面底下的文字(ios不支持)
	 *
	 * `font` :JSON : （可选项）文字样式
	 *
	 * `isAlbum` :boolean : (可选项) 是否隐藏相册按钮
	 *
	 * `isPush` :boolean : (可选项) 页面跳转是否改为push，本参数仅支持iOS
	 *
	 * `isDrawQRCodeRect` :boolean : (可选项) 是否开启二维码自动对焦
	 *
	 * `qRCodeRectWidth` :number : (可选项) 二维码自动对焦框宽度 (android不支持)
	 *
	 * `qRCodeRectColor` :any : (可选项) 二维码自动对焦框颜色，支持 rgb、rgba、#； (android不支持)
	 *
	 * `isLight` :boolean : (可选项) 是否隐藏闪光灯按钮
	 *
	 * `isGBK` :boolean : (可选项) 是否GBK编码，如出现中文乱码，可能是用GBK编码带中文的数据生成二维码导致，此时就需要设置为true，此参数仅支持iOS，此参数在1.1.9（包含）版本以后弃用，请使用encoding参数
	 *
	 * `encoding` :number : (可选项) 编码类型
	 */
	openScanner(params:FNScanner_openScanner_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开可自定义的二维码/条形码扫描器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）扫描器的位置及尺寸，**在安卓平台宽高比须跟屏幕宽高比一致，否则摄像头可视区域的图像可能出现少许变形；w和h属性最好使用api.winWidth和api.winHeight,这样不会导致变形，也不会出现手机必须要在一定的距离上才能扫描出来的现象**
	 *
	 * `rectOfInterest` :JSON : （可选项）在扫码区域上的扫码识别区域，**仅在iOS平台有效**
	 *
	 * `sound` :string : （可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用 wav 格式的短音频文件**
	 *
	 * `autorotation` :boolean : （可选项）扫描页面是否自动旋转（横竖屏）
	 *
	 * `saveToAlbum` :boolean : （可选项）扫描的二维码/条形码图片是否自动保存到相册
	 *
	 * `saveImg` :JSON : （可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存
	 *
	 * `interval` :number : （可选项）连续扫描间隔；
	 *
	 * `isDrawQRCodeRect` :boolean : (可选项) 是否开启二维码自动对焦
	 *
	 * `qRCodeRectWidth` :number : (可选项) 二维码自动对焦框宽度 (android不支持)
	 *
	 * `qRCodeRectColor` :any : (可选项) 二维码自动对焦框颜色，支持 rgb、rgba、#； (android不支持)
	 *
	 * `isGBK` :boolean : (可选项) 是否GBK编码，如出现中文乱码，可能是用GBK编码带中文的数据生成二维码导致，此时就需要设置为true，此参数仅支持iOS，此参数在1.1.9（包含）版本以后弃用，请使用encoding参数
	 *
	 * `encoding` :number : (可选项) 编码类型
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openView(params:FNScanner_openView_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重设可自定义的二维码/条形码扫描器的大小和位置`
	 * ========params==========
	 *
	 * `x` :number : （可选项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `y` :number : （可选项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `w` :number : （可选项）模块的宽度
	 *
	 * `h` :number : （可选项）模块的高度
	 */
	setFrame(params:FNScanner_setFrame_Params):void

	/** 关闭自定义大小的二维码/条码扫描器*/ 
	closeView():void

	/**
	 * `二维码/条形码图片解码`
	 * ========params==========
	 *
	 * `sound` :string : （可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用  wav 格式的短音频文件**
	 *
	 * `path` :string : （可选项）要识别的图片路径，要求本地路径（fs://、widget://），**若不传则打开系统相册**
	 */
	decodeImg(params:FNScanner_decodeImg_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将字符串生成二维码/条形码图片`
	 * ========params==========
	 *
	 * `type` :string : （可选项）生成图片的类型，默认值：'qr_image'
	 *
	 * `content` :string : 所要生成的二维码/条形码字符串，**当 type 为 bar_image 时，该值只能为数字字符串**
	 *
	 * `saveToAlbum` :boolean : （可选项）扫描的二维码/条形码图片是否自动保存到相册
	 *
	 * `saveImg` :JSON : （可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存
	 */
	encodeImg(params:FNScanner_encodeImg_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开/关闭闪光灯（在Android上，已打开扫码视图时有效）`
	 * ========params==========
	 *
	 * `status` :string : （可选项）打开/关闭闪光灯，默认值：'off'
	 */
	switchLight(params:FNScanner_switchLight_Params):void

	/** 通知当前本模块app进入回到前台。此时模块会进行一些资源的恢复操作，防止照相机回来之后黑屏*/ 
	onResume():void

	/** 通知当前本模块app进入后台。此时模块会进行一些资源的暂停存储操作，防止照相机回来之后黑屏*/ 
	onPause():void

}
interface FNScanner_open_Params {
	/**（可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用 wav 格式的短音频文件***/ 
	sound?:string,

	/**（可选项）扫描页面是否自动旋转（横竖屏）*/ 
	autorotation?:boolean,

	/**（可选项）扫描的二维码/条形码图片是否自动保存到相册*/ 
	saveToAlbum?:boolean,

	/**(可选项) 字符串类型；竖屏时扫描线的颜色,支持支持rgb、rgba、#；*/ 
	verticalLineColor?:string,

	/**(可选项) 字符串类型；横屏时扫描线的颜色,支持支持rgb、rgba、#； (android不支持，android的横竖屏是一个颜色)*/ 
	landscapeLineColor?:string,

	/**(可选项) 字符串类型；二维码/条形码界面扫码界面底下的文字*/ 
	hintText?:string,

	/**(可选项) 相册按钮文字*/ 
	albumText?:string,

	/**(可选项) 灯光开启文字*/ 
	lightText?:string,

	/**(可选项) 灯光关闭文字*/ 
	closeText?:string,

	/**(可选项) 是否隐藏相册按钮*/ 
	isAlbum?:boolean,

	/**(可选项) 是否隐藏闪光灯按钮*/ 
	isLight?:boolean,

	/**(可选项) 页面跳转是否改为push，本参数仅支持iOS*/ 
	isPush?:boolean,

	/**（可选项）文字样式*/ 
	font?:JSON,

	/**（可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存*/ 
	saveImg?:JSON,

	/**(可选项) 是否开启二维码自动对焦*/ 
	isDrawQRCodeRect?:boolean,

	/**(可选项) 二维码自动对焦框宽度 (android不支持)*/ 
	qRCodeRectWidth?:number,

	/**(可选项) 二维码自动对焦框颜色，支持 rgb、rgba、#； (android不支持)*/ 
	qRCodeRectColor?:any,

	/**(可选项) 是否GBK编码，如出现中文乱码，可能是用GBK编码带中文的数据生成二维码导致，此时就需要设置为true，此参数仅支持iOS，此参数在1.1.9（包含）版本以后弃用，请使用encoding参数*/ 
	isGBK?:boolean,

	/**(可选项) 编码类型*/ 
	encoding?:number,

}

interface FNScanner_openScanner_Params {
	/**（可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用 wav 格式的短音频文件***/ 
	sound?:string,

	/**（可选项）扫描页面是否自动旋转（横竖屏）*/ 
	autorotation?:boolean,

	/**（可选项）扫描的二维码/条形码图片是否自动保存到相册*/ 
	saveToAlbum?:boolean,

	/**(可选项) 字符串类型；竖屏时扫描线的颜色,支持支持rgb、rgba、#；仅android有效*/ 
	verticalLineColor?:string,

	/**（可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存*/ 
	saveImg?:JSON,

	/**(可选项) 字符串类型；二维码/条形码界面扫码界面底下的文字(ios不支持)*/ 
	hintText?:string,

	/**（可选项）文字样式*/ 
	font?:JSON,

	/**(可选项) 是否隐藏相册按钮*/ 
	isAlbum?:boolean,

	/**(可选项) 页面跳转是否改为push，本参数仅支持iOS*/ 
	isPush?:boolean,

	/**(可选项) 是否开启二维码自动对焦*/ 
	isDrawQRCodeRect?:boolean,

	/**(可选项) 二维码自动对焦框宽度 (android不支持)*/ 
	qRCodeRectWidth?:number,

	/**(可选项) 二维码自动对焦框颜色，支持 rgb、rgba、#； (android不支持)*/ 
	qRCodeRectColor?:any,

	/**(可选项) 是否隐藏闪光灯按钮*/ 
	isLight?:boolean,

	/**(可选项) 是否GBK编码，如出现中文乱码，可能是用GBK编码带中文的数据生成二维码导致，此时就需要设置为true，此参数仅支持iOS，此参数在1.1.9（包含）版本以后弃用，请使用encoding参数*/ 
	isGBK?:boolean,

	/**(可选项) 编码类型*/ 
	encoding?:number,

}

interface FNScanner_openView_Params {
	/**（可选项）扫描器的位置及尺寸，**在安卓平台宽高比须跟屏幕宽高比一致，否则摄像头可视区域的图像可能出现少许变形；w和h属性最好使用api.winWidth和api.winHeight,这样不会导致变形，也不会出现手机必须要在一定的距离上才能扫描出来的现象***/ 
	rect?:JSON,

	/**（可选项）在扫码区域上的扫码识别区域，**仅在iOS平台有效***/ 
	rectOfInterest?:JSON,

	/**（可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用 wav 格式的短音频文件***/ 
	sound?:string,

	/**（可选项）扫描页面是否自动旋转（横竖屏）*/ 
	autorotation?:boolean,

	/**（可选项）扫描的二维码/条形码图片是否自动保存到相册*/ 
	saveToAlbum?:boolean,

	/**（可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存*/ 
	saveImg?:JSON,

	/**（可选项）连续扫描间隔；*/ 
	interval?:number,

	/**(可选项) 是否开启二维码自动对焦*/ 
	isDrawQRCodeRect?:boolean,

	/**(可选项) 二维码自动对焦框宽度 (android不支持)*/ 
	qRCodeRectWidth?:number,

	/**(可选项) 二维码自动对焦框颜色，支持 rgb、rgba、#； (android不支持)*/ 
	qRCodeRectColor?:any,

	/**(可选项) 是否GBK编码，如出现中文乱码，可能是用GBK编码带中文的数据生成二维码导致，此时就需要设置为true，此参数仅支持iOS，此参数在1.1.9（包含）版本以后弃用，请使用encoding参数*/ 
	isGBK?:boolean,

	/**(可选项) 编码类型*/ 
	encoding?:number,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface FNScanner_setFrame_Params {
	/**（可选项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）*/ 
	x?:number,

	/**（可选项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）*/ 
	y?:number,

	/**（可选项）模块的宽度*/ 
	w?:number,

	/**（可选项）模块的高度*/ 
	h?:number,

}

interface FNScanner_decodeImg_Params {
	/**（可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用  wav 格式的短音频文件***/ 
	sound?:string,

	/**（可选项）要识别的图片路径，要求本地路径（fs://、widget://），**若不传则打开系统相册***/ 
	path?:string,

}

interface FNScanner_encodeImg_Params {
	/**（可选项）生成图片的类型，默认值：'qr_image'*/ 
	type?:string,

	/**所要生成的二维码/条形码字符串，**当 type 为 bar_image 时，该值只能为数字字符串***/ 
	content:string,

	/**（可选项）扫描的二维码/条形码图片是否自动保存到相册*/ 
	saveToAlbum?:boolean,

	/**（可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存*/ 
	saveImg?:JSON,

}

interface FNScanner_switchLight_Params {
	/**（可选项）打开/关闭闪光灯，默认值：'off'*/ 
	status?:string,

}

interface oxPlayer {
	/** 监听统一接口 取消原来的api.addEventListener*/ 
	addEventListener():void

	/** 指定区域显示播放器,点播，可分集播放*/ 
	fixdPlay():void

	/** 指定区域显示播放器,直播*/ 
	fixzPlay():void

	/** 是否全屏*/ 
	isFull():void

	/** 退出全屏*/ 
	exitFullScreen():void

	/** 进入全屏*/ 
	enterFullScreen():void

	/** 是否锁屏  fixdPlay fixePlay 有效*/ 
	isLock():void

	/** 添加 弹幕*/ 
	addDanmaku():void

	/** vip页面*/ 
	showVipView():void

	/** 退出vip页面*/ 
	hideVipView():void

	/** 搜索投屏设备*/ 
	startDlnaSearch():void

	/** 推送投屏视频*/ 
	startDlnaPush():void

	/** 停止投屏*/ 
	stopDlnaPush():void

	/** 更新一条记录*/ 
	updateDataAtIndex():void

	/** 更新所有记录*/ 
	updateAll():void

	/** m3u8下载开始*/ 
	hlsStartDownload():void

	/** m3u8停止下载*/ 
	hlsStopDownload():void

	/** m3u8移除缓存*/ 
	hlsRemoveDownload():void

	/** 全屏点播,仿抖音 可上下滑动切换视频*/ 
	dbPlay():void

	/** 全屏直播,仿抖音*/ 
	zbPlay():void

	/** dbPlay接口播放最后一个视频时 追加 数据*/ 
	addDataAfter():void

	/** dbPlay下拉刷新时更新 数据*/ 
	addDataBefore():void

	/** 当前视频动态 添加控件 调用dbPlay  zbPlay时此接口生效*/ 
	addStyle():void

	/** 当前视频 动态更新组件 样式 调用dbPlay  zbPlay时此接口生效*/ 
	updateStyles():void

	/** 当前视频 动态更新视频用户信息 比如 评论数 分享数 等 更新 调用dbPlay  zbPlay时此接口生效*/ 
	updateUserInfo():void

	/** dbPlay停止上下拉刷新*/ 
	stopFresh():void

	/** 控制红包*/ 
	hongbaoAction():void

	/** 设置红包进度 code ==16 返回小视频播放进度 可调用此方法*/ 
	setHBProgress():void

	/** 添加控件 dbPlay  zbPlay不随屏滚动控件 fixdPlay fixzPlay 动态添加控件*/ 
	addComponent():void

	/** 动态更新组件 dbPlay  zbPlay不随屏滚动控件 fixdPlay fixzPlay 动态添加控件*/ 
	updateComponent():void

	/** 播放下一条记录*/ 
	next():void

	/** 播放上一条记录*/ 
	prev():void

	/** 播放索引视频*/ 
	playIndex():void

	/** 开始播放*/ 
	start():void

	/** 停止播放*/ 
	pause():void

	/** 重新播放*/ 
	replay():void

	/** 视频时长*/ 
	duration():void

	/** 指定位置播放*/ 
	seekTo():void

	/** 播放位置*/ 
	position():void

	/** 截屏*/ 
	screenShot():void

	/** 移除播放器*/ 
	remove():void

	/** 显示播放器*/ 
	showPlay():void

	/** 隐藏播放器*/ 
	hidePlay():void

	/** 设置音量*/ 
	setVolume():void

	/** 设置倍速*/ 
	setSpeed():void

	/** 清理缓存*/ 
	clearCache():void

}
interface recMp3 {
	/** 开始录音*/ 
	start():void

}
interface voiceMag {
}
interface httpServer {
	/**
	 * `开启HTTP服务，开启指定端口，指定手机文件路径为根目录供网页访问。`
	 * ========params==========
	 *
	 * `www` :any : （必填项）开启服务的真实文件路径。
	 *
	 * `port` :number : 开启服务的端口号，默认：2633；取值范围0到65535
	 */
	start(params:httpServer_start_Params, callback?: (ret:JSON) => void):void

	/** 关闭HTTP服务。*/ 
	stop(callback?: (ret:JSON) => void):void

	/** 异步获取IP。*/ 
	getIp(callback?: (ret:JSON) => void):void

	/** 网页请求后的监听接口。网页被加载或者POST或者GET请求后，监听接口收到数据，并对数据开始处理保存响应等操作，最后可以用response或者responseSync接口作出当次请求的响应。*/ 
	addEventListener(callback?: (ret:JSON) => void):void

	/**
	 * `异步请求响应接口（addEventListener收到带参数监听，就会进入30秒等待响应，如果不写响应代码，则该请求30秒后回调页面400）`
	 * ========params==========
	 *
	 * `sid` :any : （必填项）
	 *
	 * `data` :any : （必填项）
	 */
	response(params:httpServer_response_Params, callback?: (ret:JSON) => void):void

	/** 同步获取IP；*/ 
	ipSync():void

	/** 同步获取端口；*/ 
	portSync():void

	/** 同步获取当前提供访问的真实文件路径；*/ 
	wwwSync():void

	/** 同步获取当前服务的开启状态；*/ 
	runSync():void

	/**
	 * `同步请求响应接口（addEventListener收到带参数监听，就会进入30秒等待响应，如果不写响应代码，则该请求30秒后回调页面400）;`
	 * ========params==========
	 *
	 * `sid` :any : （必填项）
	 *
	 * `data` :any : （必填项）
	 */
	responseSync(params:httpServer_responseSync_Params):void

}
interface httpServer_start_Params {
	/**（必填项）开启服务的真实文件路径。*/ 
	www:any,

	/**开启服务的端口号，默认：2633；取值范围0到65535*/ 
	port:number,

}

interface httpServer_response_Params {
	/**（必填项）*/ 
	sid:any,

	/**（必填项）*/ 
	data:any,

}

interface httpServer_responseSync_Params {
	/**（必填项）*/ 
	sid:any,

	/**（必填项）*/ 
	data:any,

}

interface liveAudioPlayer {
	/**
	 * `播放网络音频，支持m3u8纯音频播放`
	 * ========params==========
	 *
	 * `url` :string : 音频资源地址。
	 */
	play(params:liveAudioPlayer_play_Params, callback?: (ret:JSON) => void):void

	/** 停止播放*/ 
	stop():void

}
interface liveAudioPlayer_play_Params {
	/**音频资源地址。*/ 
	url:string,

}

interface waterImageMark {
}
interface imageTool {
}
interface floatVideo {
	/** 是否有显示悬浮窗口的权限。（同步方法）返回true有权限，返回false没有权限。*/ 
	hasPermission():void

	/**
	 * `打开安卓"设置"(Settings)界面`
	 * ========params==========
	 *
	 * `pkg` :string : （可选项）APP的包名，比如com.apicloud.app.book，大多数情况下都是设置自己APP的包名，所以不必带这个参数，用默认的就好。
	 */
	openSettings(params:floatVideo_openSettings_Params):void

	/**
	 * `设置悬浮窗口属性。`
	 * ========params==========
	 *
	 * `x` :number : （可选项）x坐标。
	 *
	 * `y` :number : （可选项）y坐标。
	 *
	 * `w` :number : （可选项）窗口宽度。
	 *
	 * `h` :number : （可选项）窗口高度。
	 *
	 * `url` :string : （必填）播放视频的url,支持网络和本地，支持m3u8。
	 *
	 * `currentPosition` :number : （可选项）从这个位置开始播。（毫秒）
	 *
	 * `clickBack` :boolean : （可选项）是否开启点击返回到App。（个人建议关闭，有时候只是想移动窗口，却被误判为点击事件了。）
	 */
	setWinAttr(params:floatVideo_setWinAttr_Params, callback?: (ret:JSON) => void):void

	/** 显示窗口。（显示之前至少调用一次setWinAttr来设置参数）*/ 
	show():void

	/** 隐藏窗口。*/ 
	hide():void

	/** 获取视频播放位置。（同步方法）*/ 
	getCurrentPosition():void

}
interface floatVideo_openSettings_Params {
	/**（可选项）APP的包名，比如com.apicloud.app.book，大多数情况下都是设置自己APP的包名，所以不必带这个参数，用默认的就好。*/ 
	pkg?:string,

}

interface floatVideo_setWinAttr_Params {
	/**（可选项）x坐标。*/ 
	x?:number,

	/**（可选项）y坐标。*/ 
	y?:number,

	/**（可选项）窗口宽度。*/ 
	w?:number,

	/**（可选项）窗口高度。*/ 
	h?:number,

	/**（必填）播放视频的url,支持网络和本地，支持m3u8。*/ 
	url:string,

	/**（可选项）从这个位置开始播。（毫秒）*/ 
	currentPosition?:number,

	/**（可选项）是否开启点击返回到App。（个人建议关闭，有时候只是想移动窗口，却被误判为点击事件了。）*/ 
	clickBack?:boolean,

}

interface HeartRate {
	/**
	 * `开始获取心率值`
	 * ========params==========
	 *
	 * `rect` :JSON : 画面展示尺寸 （仅支持安卓）
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	open(params:HeartRate_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭心率获取（仅android支持）*/ 
	close(callback?: (ret:JSON) => void):void

}
interface HeartRate_open_Params {
	/**画面展示尺寸 （仅支持安卓）*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface FNQRcreate {
	/**
	 * `二维码/条形码图片解码`
	 * ========params==========
	 *
	 * `sound` :string : （可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用  wav 格式的短音频文件**
	 *
	 * `path` :string : （可选项）要识别的图片路径，要求本地路径（fs://、widget://），**若不传则打开系统相册**
	 */
	decodeImg(params:FNQRcreate_decodeImg_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将字符串生成二维码/条形码图片`
	 * ========params==========
	 *
	 * `type` :string : （可选项）生成图片的类型，默认值：'qr_image'
	 *
	 * `content` :string : 所要生成的二维码/条形码字符串，**当 type 为 bar_image 时，该值只能为数字字符串**
	 *
	 * `saveToAlbum` :boolean : （可选项）扫描的二维码/条形码图片是否自动保存到相册
	 *
	 * `saveImg` :JSON : （可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存
	 */
	encodeImg(params:FNQRcreate_encodeImg_Params, callback?: (ret:JSON) => void):void

}
interface FNQRcreate_decodeImg_Params {
	/**（可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用  wav 格式的短音频文件***/ 
	sound?:string,

	/**（可选项）要识别的图片路径，要求本地路径（fs://、widget://），**若不传则打开系统相册***/ 
	path?:string,

}

interface FNQRcreate_encodeImg_Params {
	/**（可选项）生成图片的类型，默认值：'qr_image'*/ 
	type?:string,

	/**所要生成的二维码/条形码字符串，**当 type 为 bar_image 时，该值只能为数字字符串***/ 
	content:string,

	/**（可选项）扫描的二维码/条形码图片是否自动保存到相册*/ 
	saveToAlbum?:boolean,

	/**（可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存*/ 
	saveImg?:JSON,

}

interface exifInterface {
	/**
	 * `设置图片的经纬度属性`
	 * ========params==========
	 *
	 * `picPath` :string : （必填项）图片的路径，仅支持jpeg,jgp文件格式(ios支持fs://,widget://;[安卓支持fs://])。
	 *
	 * `latitude` :number : （可选项）经度。
	 *
	 * `longitude` :number : （可选项）纬度。
	 */
	setExifInfo(params:exifInterface_setExifInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取图片的属性`
	 * ========params==========
	 *
	 * `picPath` :string : （必填项）图片的路径，仅支持jpeg,jgp文件格式(ios支持fs://,widget://;安卓支持fs://)。
	 */
	getExifInfo(params:exifInterface_getExifInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `旋转图片`
	 * ========params==========
	 *
	 * `picPath` :string : （必填项）图片的路径，仅支持jpeg,jgp文件格式(ios支持fs://,widget://;安卓支持fs://)。
	 *
	 * `degrees` :number : （可选项）需要旋转图片的角度。(取值范围 90,180,270)。
	 */
	setDegreeExif(params:exifInterface_setDegreeExif_Params, callback?: (ret:JSON) => void):void

}
interface exifInterface_setExifInfo_Params {
	/**（必填项）图片的路径，仅支持jpeg,jgp文件格式(ios支持fs://,widget://;[安卓支持fs://])。*/ 
	picPath:string,

	/**（可选项）经度。*/ 
	latitude?:number,

	/**（可选项）纬度。*/ 
	longitude?:number,

}

interface exifInterface_getExifInfo_Params {
	/**（必填项）图片的路径，仅支持jpeg,jgp文件格式(ios支持fs://,widget://;安卓支持fs://)。*/ 
	picPath:string,

}

interface exifInterface_setDegreeExif_Params {
	/**（必填项）图片的路径，仅支持jpeg,jgp文件格式(ios支持fs://,widget://;安卓支持fs://)。*/ 
	picPath:string,

	/**（可选项）需要旋转图片的角度。(取值范围 90,180,270)。*/ 
	degrees?:number,

}

interface mdReader {
}
interface officePreview {
	/** 打开文档预览*/ 
	open():void

	/** 显示浏览器*/ 
	show():void

}
interface FNQRscan {
	/**
	 * `打开自带默认 UI 效果的二维码/条形码扫描页面，本界面相当于打开一个 window 窗口，其界面内容不支持自定义`
	 * ========params==========
	 *
	 * `sound` :string : （可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用 wav 格式的短音频文件**
	 *
	 * `autorotation` :boolean : （可选项）扫描页面是否自动旋转（横竖屏）
	 *
	 * `saveToAlbum` :boolean : （可选项）扫描的二维码/条形码图片是否自动保存到相册
	 *
	 * `verticalLineColor` :string : (可选项) 字符串类型；竖屏时扫描线的颜色,支持支持rgb、rgba、#；
	 *
	 * `landscapeLineColor` :string : (可选项) 字符串类型；横屏时扫描线的颜色,支持支持rgb、rgba、#； (android不支持，android的横竖屏是一个颜色)
	 *
	 * `hintText` :string : (可选项) 字符串类型；二维码/条形码界面扫码界面底下的文字
	 *
	 * `albumText` :string : (可选项) 相册按钮文字
	 *
	 * `lightText` :string : (可选项) 灯光开启文字
	 *
	 * `closeText` :string : (可选项) 灯光关闭文字
	 *
	 * `isAlbum` :boolean : (可选项) 是否隐藏相册按钮
	 *
	 * `font` :JSON : （可选项）文字样式
	 *
	 * `saveImg` :JSON : （可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存
	 */
	open(params:FNQRscan_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开二维码/条码扫描器`
	 * ========params==========
	 *
	 * `sound` :string : （可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用 wav 格式的短音频文件**
	 *
	 * `autorotation` :boolean : （可选项）扫描页面是否自动旋转（横竖屏）
	 *
	 * `saveToAlbum` :boolean : （可选项）扫描的二维码/条形码图片是否自动保存到相册
	 *
	 * `verticalLineColor` :string : (可选项) 字符串类型；竖屏时扫描线的颜色,支持支持rgb、rgba、#；仅android有效
	 *
	 * `saveImg` :JSON : （可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存
	 *
	 * `hintText` :string : (可选项) 字符串类型；二维码/条形码界面扫码界面底下的文字(ios不支持)
	 *
	 * `font` :JSON : （可选项）文字样式
	 *
	 * `isAlbum` :boolean : (可选项) 是否隐藏相册按钮
	 */
	openScanner(params:FNQRscan_openScanner_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开可自定义的二维码/条形码扫描器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）扫描器的位置及尺寸，**在安卓平台宽高比须跟屏幕宽高比一致，否则摄像头可视区域的图像可能出现少许变形；w和h属性最好使用api.winWidth和api.winHeight,这样不会导致变形，也不会出现手机必须要在一定的距离上才能扫描出来的现象**
	 *
	 * `rectOfInterest` :JSON : （可选项）在扫码区域上的扫码识别区域，**仅在iOS平台有效**
	 *
	 * `sound` :string : （可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用 wav 格式的短音频文件**
	 *
	 * `autorotation` :boolean : （可选项）扫描页面是否自动旋转（横竖屏）
	 *
	 * `saveToAlbum` :boolean : （可选项）扫描的二维码/条形码图片是否自动保存到相册
	 *
	 * `saveImg` :JSON : （可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存
	 *
	 * `interval` :number : （可选项）连续扫描间隔；android不支持此参数
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openView(params:FNQRscan_openView_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重设可自定义的二维码/条形码扫描器的大小和位置`
	 * ========params==========
	 *
	 * `x` :number : （可选项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `y` :number : （可选项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `w` :number : （可选项）模块的宽度
	 *
	 * `h` :number : （可选项）模块的高度
	 */
	setFrame(params:FNQRscan_setFrame_Params):void

	/** 关闭自定义大小的二维码/条码扫描器*/ 
	closeView():void

	/**
	 * `打开/关闭闪光灯（在Android上，已打开扫码视图时有效）`
	 * ========params==========
	 *
	 * `status` :string : （可选项）打开/关闭闪光灯，默认值：'off'
	 */
	switchLight(params:FNQRscan_switchLight_Params):void

	/** 通知当前本模块app进入回到前台。此时模块会进行一些资源的恢复操作，防止照相机回来之后黑屏*/ 
	onResume():void

	/** 通知当前本模块app进入后台。此时模块会进行一些资源的暂停存储操作，防止照相机回来之后黑屏*/ 
	onPause():void

}
interface FNQRscan_open_Params {
	/**（可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用 wav 格式的短音频文件***/ 
	sound?:string,

	/**（可选项）扫描页面是否自动旋转（横竖屏）*/ 
	autorotation?:boolean,

	/**（可选项）扫描的二维码/条形码图片是否自动保存到相册*/ 
	saveToAlbum?:boolean,

	/**(可选项) 字符串类型；竖屏时扫描线的颜色,支持支持rgb、rgba、#；*/ 
	verticalLineColor?:string,

	/**(可选项) 字符串类型；横屏时扫描线的颜色,支持支持rgb、rgba、#； (android不支持，android的横竖屏是一个颜色)*/ 
	landscapeLineColor?:string,

	/**(可选项) 字符串类型；二维码/条形码界面扫码界面底下的文字*/ 
	hintText?:string,

	/**(可选项) 相册按钮文字*/ 
	albumText?:string,

	/**(可选项) 灯光开启文字*/ 
	lightText?:string,

	/**(可选项) 灯光关闭文字*/ 
	closeText?:string,

	/**(可选项) 是否隐藏相册按钮*/ 
	isAlbum?:boolean,

	/**（可选项）文字样式*/ 
	font?:JSON,

	/**（可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存*/ 
	saveImg?:JSON,

}

interface FNQRscan_openScanner_Params {
	/**（可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用 wav 格式的短音频文件***/ 
	sound?:string,

	/**（可选项）扫描页面是否自动旋转（横竖屏）*/ 
	autorotation?:boolean,

	/**（可选项）扫描的二维码/条形码图片是否自动保存到相册*/ 
	saveToAlbum?:boolean,

	/**(可选项) 字符串类型；竖屏时扫描线的颜色,支持支持rgb、rgba、#；仅android有效*/ 
	verticalLineColor?:string,

	/**（可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存*/ 
	saveImg?:JSON,

	/**(可选项) 字符串类型；二维码/条形码界面扫码界面底下的文字(ios不支持)*/ 
	hintText?:string,

	/**（可选项）文字样式*/ 
	font?:JSON,

	/**(可选项) 是否隐藏相册按钮*/ 
	isAlbum?:boolean,

}

interface FNQRscan_openView_Params {
	/**（可选项）扫描器的位置及尺寸，**在安卓平台宽高比须跟屏幕宽高比一致，否则摄像头可视区域的图像可能出现少许变形；w和h属性最好使用api.winWidth和api.winHeight,这样不会导致变形，也不会出现手机必须要在一定的距离上才能扫描出来的现象***/ 
	rect?:JSON,

	/**（可选项）在扫码区域上的扫码识别区域，**仅在iOS平台有效***/ 
	rectOfInterest?:JSON,

	/**（可选项）扫描结束后的提示音文件路径，要求本地路径（fs://、widget://），**为保证兼容性，推荐使用 wav 格式的短音频文件***/ 
	sound?:string,

	/**（可选项）扫描页面是否自动旋转（横竖屏）*/ 
	autorotation?:boolean,

	/**（可选项）扫描的二维码/条形码图片是否自动保存到相册*/ 
	saveToAlbum?:boolean,

	/**（可选项）扫描的二维码/条形码图片保存所需要的参数，若不传则不保存*/ 
	saveImg?:JSON,

	/**（可选项）连续扫描间隔；android不支持此参数*/ 
	interval?:number,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface FNQRscan_setFrame_Params {
	/**（可选项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）*/ 
	x?:number,

	/**（可选项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）*/ 
	y?:number,

	/**（可选项）模块的宽度*/ 
	w?:number,

	/**（可选项）模块的高度*/ 
	h?:number,

}

interface FNQRscan_switchLight_Params {
	/**（可选项）打开/关闭闪光灯，默认值：'off'*/ 
	status?:string,

}

interface sharePics {
	/** 分享图片数组以及文字*/ 
	shareToTimeLine():void

}
interface easyCamera {
	/** 调用系统相机拍照或者录制视频*/ 
	openCamera(callback?: (ret:JSON) => void):void

}
interface cameraWeibo {
	/**
	 * `打开固定 UI 的相机页面`
	 * ========params==========
	 *
	 * `save` :JSON : （可选项）拍摄的图片、视频保存信息
	 *
	 * `album` :boolean : （可选项）拍照成功后是否将所拍结果存入系统相册
	 *
	 * `quality` :string : （可选项）拍摄质量
	 */
	open(params:cameraWeibo_open_Params, callback?: (ret:JSON) => void):void

	/** 取消/关闭拍照页面*/ 
	cancel():void

}
interface cameraWeibo_open_Params {
	/**（可选项）拍摄的图片、视频保存信息*/ 
	save?:JSON,

	/**（可选项）拍照成功后是否将所拍结果存入系统相册*/ 
	album?:boolean,

	/**（可选项）拍摄质量*/ 
	quality?:string,

}

interface socketManager {
}
interface appControl {
}
interface blurredView {
}
interface logger {
}
interface moduleTVKeyApi {
	/** 创建并使用模块接口*/ 
	onstart():void

}
interface mqtt {
	/**     建立MQTT连接*/ 
	startmqtt():void

	/**     断开MQTT连接*/ 
	stopmqtt():void

	/**     发送指令*/ 
	publish():void

	/**     增加订阅的通道*/ 
	subscribe():void

	/**     移除订阅的通道*/ 
	unsubscribe():void

}
interface m3u8Download {
	/**
	 * `m3u8视频下载监听事件`
	 * ========params==========
	 *
	 * `videoId` :string : （可选项）视频ID，当不传某一个唯一的视频ID时，该监听会返回所有视频下载信息，当设置具体的视频ID时，只返回设置的视频ID的下载信息。
	 */
	addEventListener(params:m3u8Download_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始下载`
	 * ========params==========
	 *
	 * `videoId` :string : （必填项）视频唯一的ID。
	 *
	 * `url` :string : （必填项）M3U8下载地址，该地址必须为可解析的地址。不能是直播地址，请开发者自行控制。
	 */
	start(params:m3u8Download_start_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停下载`
	 * ========params==========
	 *
	 * `videoId` :string : （必填项）视频唯一的ID。
	 */
	pause(params:m3u8Download_pause_Params, callback?: (ret:JSON) => void):void

	/**
	 * `恢复下载`
	 * ========params==========
	 *
	 * `videoId` :string : （必填项）视频唯一的ID。
	 */
	resume(params:m3u8Download_resume_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否下载完成`
	 * ========params==========
	 *
	 * `videoId` :string : （必填项）视频唯一的ID。
	 */
	isDownloadFinish(params:m3u8Download_isDownloadFinish_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取缓存大小`
	 * ========params==========
	 *
	 * `videoId` :string : （可选项）视频唯一的ID,不填则获取模块所有缓存视频文件夹大小。
	 */
	getCacheSize(params:m3u8Download_getCacheSize_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除缓存文件`
	 * ========params==========
	 *
	 * `videoId` :string : （可选项）视频唯一的ID,不填则清除模块所有缓存视频文件夹大小。
	 */
	clearCache(params:m3u8Download_clearCache_Params, callback?: (ret:JSON) => void):void

}
interface m3u8Download_addEventListener_Params {
	/**（可选项）视频ID，当不传某一个唯一的视频ID时，该监听会返回所有视频下载信息，当设置具体的视频ID时，只返回设置的视频ID的下载信息。*/ 
	videoId?:string,

}

interface m3u8Download_start_Params {
	/**（必填项）视频唯一的ID。*/ 
	videoId:string,

	/**（必填项）M3U8下载地址，该地址必须为可解析的地址。不能是直播地址，请开发者自行控制。*/ 
	url:string,

}

interface m3u8Download_pause_Params {
	/**（必填项）视频唯一的ID。*/ 
	videoId:string,

}

interface m3u8Download_resume_Params {
	/**（必填项）视频唯一的ID。*/ 
	videoId:string,

}

interface m3u8Download_isDownloadFinish_Params {
	/**（必填项）视频唯一的ID。*/ 
	videoId:string,

}

interface m3u8Download_getCacheSize_Params {
	/**（可选项）视频唯一的ID,不填则获取模块所有缓存视频文件夹大小。*/ 
	videoId?:string,

}

interface m3u8Download_clearCache_Params {
	/**（可选项）视频唯一的ID,不填则清除模块所有缓存视频文件夹大小。*/ 
	videoId?:string,

}

interface lottie {
	/** 展示AE动画*/ 
	loadAnim(callback?: (ret:JSON) => void):void

	/** 重新加载动画*/ 
	reloadAnim(callback?: (ret:JSON) => void):void

	/** 隐藏*/ 
	hide(callback?: (ret:JSON) => void):void

	/** 显示*/ 
	show(callback?: (ret:JSON) => void):void

	/** 移除*/ 
	remove(callback?: (ret:JSON) => void):void

}
interface compressVideo {
	/** 选取本地视频。注意:对于iOS，在选取视频确定时，系统会自带出现正在压缩提示，此处系统并未真正进行压缩，如需要压缩请使用compressVideo方法。对于Android，该方法会调用系统自带文件管理器进行选择文件，开发者可根据用户选择完成后返回的文件路径自行判断选择的文件是否是视频文件。*/ 
	selectVideo(callback?: (ret:JSON) => void):void

	/**
	 * `传入视频路径压缩视频`
	 * ========params==========
	 *
	 * `path` :string : (必填)需要压缩的视频文件路径，该参数可传入调用selectVideo方法返回的视频文件路径(path)，或可传入开发者自行获取到的的视频文件路径。
	 *
	 * `quality` :string : (可选项)对压缩视频的质量要求，取值:l、m、h , 其中 l 为最差画质，m 为中度画质，h 为略高画质
	 */
	compressVideo(params:compressVideo_compressVideo_Params, callback?: (ret:JSON) => void):void

}
interface compressVideo_compressVideo_Params {
	/**(必填)需要压缩的视频文件路径，该参数可传入调用selectVideo方法返回的视频文件路径(path)，或可传入开发者自行获取到的的视频文件路径。*/ 
	path:string,

	/**(可选项)对压缩视频的质量要求，取值:l、m、h , 其中 l 为最差画质，m 为中度画质，h 为略高画质*/ 
	quality?:string,

}

interface weChatVideo {
	/** 打开视频录制界面*/ 
	open():void

	/** 清除视频的缓存*/ 
	clearCache():void

}
interface selectPic {
	/**
	 * `showPics使用此方法调用相机或相册的选择`
	 * ========params==========
	 *
	 * `maxNum` :number : （必填项） 设置个数需要大于0
	 */
	showPics(params:selectPic_showPics_Params, callback?: (ret:JSON) => void):void

}
interface selectPic_showPics_Params {
	/**（必填项） 设置个数需要大于0*/ 
	maxNum:number,

}

interface videoPlayer {
	/**
	 * `打开一个自带界面的视频播放器，本播放器为全屏横屏显示，支持屏幕随设备自动旋转。用户单击播放器时，会弹出 foot 和 head 导航条，再次单击则关闭之。**仅 setPath 接口对本接口打开的播放器有效**`
	 * ========params==========
	 *
	 * `texts` :JSON : （可选项）聊天输入框模块可配置的文本
	 *
	 * `styles` :JSON : （可选项）模块的样式设置
	 *
	 * `lockBtn` :JSON : 锁屏按钮配置
	 *
	 * `path` :string : （可选项）文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget**
	 *
	 * `autoPlay` :boolean : （可选项）打开时是否自动播放
	 *
	 * `coverImg` :string : （可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）
	 *
	 * `autorotation` :boolean : （可选项）视频播放页面是否支持自动旋转（横竖屏），若为 false 则手动点击右下角按钮旋转
	 *
	 * `audio` :string : （可选项）缩放模式 **该参数仅支持iOS**
	 *
	 * `seekBarDragable` :boolean : （可选项） 播放进度条是否可以拖动
	 *
	 * `hideStatusBar` :boolean : （可选项） 是否隐藏状态栏（该参数仅支持android）
	 *
	 * `isFull` :boolean : （可选项）是否全屏
	 */
	play(params:videoPlayer_play_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开一个视频播放器（类似一个frame）`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `bg` :string : （可选项）字符串类型；视频背景颜色，支持#、rgb、rgba (在切换视屏为了防止闪屏,请根据自己的视频调节颜色)
	 *
	 * `path` :string : （可选项）文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget**
	 *
	 * `autoPlay` :boolean : （可选项）打开时是否自动播放
	 *
	 * `scalingMode` :string : （可选项）缩放模式 **该参数仅支持ios**
	 *
	 * `coverImg` :boolean : （可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）
	 *
	 * `loop` :boolean : （可选项）是否循环播放  **该参数仅支持ios**
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:videoPlayer_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置音/视频的文件路径，**对 open 和 play 打开的视频播放器有效。**`
	 * ========params==========
	 *
	 * `path` :string : 文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget**
	 *
	 * `bg` :string : （可选项）字符串类型；视频背景颜色，支持#、rgb、rgba (在切换视屏为了防止闪屏,请根据自己的视频调节颜色)
	 *
	 * `coverImg` :boolean : （可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）
	 *
	 * `title` :string : （可选项）当设置 play 接口打开的视频时，本参数表示设置该视频的标题，本参数仅对 play 接口有效
	 */
	setPath(params:videoPlayer_setPath_Params, callback?: (ret:JSON) => void):void

	/** 开始播放，**只对 open 和 openPlay 接口打开的视频播放器有效***/ 
	start():void

	/** 暂停播放，**只对 open 和 openPlay 接口打开的视频播放器有效***/ 
	pause():void

	/** 停止播放，**仅对 open 打开的视频播放器有效***/ 
	stop():void

	/** 关闭播放器 ，**对 open、openPlay、play 打开的视频播放器均有效***/ 
	close():void

	/** 显示视频播放视图，**仅对 open 和 openPlay 打开的视频播放器有效***/ 
	show():void

	/** 隐藏视频播放视图，**仅对 open 和 openPlay 打开的视频播放器有效***/ 
	hide():void

	/** 全屏播放（横屏模式），**仅对open打开的播放器有效***/ 
	fullScreen():void

	/** 取消全屏播放，**仅对open打开的播放器有效***/ 
	cancelFullScreen():void

	/**
	 * `快进，**仅对open打开的播放器有效**`
	 * ========params==========
	 *
	 * `seconds` :number : 快进的秒数
	 */
	forward(params:videoPlayer_forward_Params):void

	/**
	 * `快退，**仅对open打开的播放器有效**`
	 * ========params==========
	 *
	 * `seconds` :number : 快退的秒数
	 */
	rewind(params:videoPlayer_rewind_Params):void

	/**
	 * `跳转，**仅对open打开的播放器有效**`
	 * ========params==========
	 *
	 * `seconds` :number : 跳转到音视频播放的秒数
	 */
	seekTo(params:videoPlayer_seekTo_Params):void

	/**
	 * `设置屏幕亮度，**对open、openPlay、play打开的播放器有效**`
	 * ========params==========
	 *
	 * `brightness` :number : （可选项）设置的屏幕的亮度，取值范围：0-100，**在 iOS 平台上设置的是系统屏幕亮度。Android 平台上设置的本应用内的屏幕亮度**
	 */
	setBrightness(params:videoPlayer_setBrightness_Params):void

	/** 获取当前屏幕亮度值，**对open、openPlay、play打开的播放器有效***/ 
	getBrightness(callback?: (ret:JSON) => void):void

	/**
	 * `设置音量，**对open、openPlay、play打开的播放器有效**`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）音量大小，取值范围：0-1
	 */
	setVolume(params:videoPlayer_setVolume_Params):void

	/** 获取当前播放音量，**对open、openPlay、play打开的播放器有效***/ 
	getVolume(callback?: (ret:JSON) => void):void

	/** 添加动作监听(当全屏或者fixed为true且页面不能被左右滑动时有效)，**对open打开的播放器有效***/ 
	addEventListener(callback?: (ret:JSON) => void):void

	/**
	 * `移除动作监听，**对open打开的播放器有效**`
	 * ========params==========
	 *
	 * `name` :string : （可选项）所要移除的监听的动作名称
	 */
	removeEventListener(params:videoPlayer_removeEventListener_Params):void

	/**
	 * `设置视频播放器位置、尺寸，以及是否全屏，**对open打开的播放器有效**`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fullscreen` :boolean : （可选项）模块的位置及尺寸是否全屏（true不显示状态栏，false显示状态栏）
	 */
	setRect(params:videoPlayer_setRect_Params):void

	/** 该方法需要在监听到物理按键时调用（只对 openPlay 接口打开的播放器有效，暂仅支持 android）*/ 
	onBack():void

	/** 判断当前窗口是否全屏（只对 openPlay 接口打开的播放器有效）*/ 
	isFullscreen():void

	/** 该方法需要在 pause 事件中调用（只对 openPlay 接口打开的播放器有效，仅支持android）*/ 
	onPause():void

	/** 该方法需要在resume事件中调用（只对 openPlay 接口打开的播放器有效，仅支持android）*/ 
	onResume():void

	/** 判断自定义按钮是否被选中 **注意:只对openPlay接口打开的播放器有效***/ 
	customBtnIsSelected(callback?: (ret:JSON) => void):void

	/**
	 * `设置自定义按钮被选中 **注意:只对openPlay接口打开的播放器有效**`
	 * ========params==========
	 *
	 * `index` :number : （可选项）用户自定义按钮的点击index，从右到左排列
	 */
	setCustomBtnSelected(params:videoPlayer_setCustomBtnSelected_Params):void

	/**
	 * `设置自定义按钮被取消 **只对openPlay接口打开的播放器有效**`
	 * ========params==========
	 *
	 * `index` :number : （可选项）用户自定义按钮的点击index，从右到左排列
	 */
	setCustomBtnCancelSelected(params:videoPlayer_setCustomBtnCancelSelected_Params):void

	/**
	 * `设置自定义按钮是否隐藏 **只对 openPlay 接口打开的播放器有效**`
	 * ========params==========
	 *
	 * `index` :number : （可选项）用户自定义按钮的点击index，从右到左排列
	 *
	 * `visible` :boolean : 是否显示
	 */
	setCustomBtnVisible(params:videoPlayer_setCustomBtnVisible_Params):void

	/**
	 * `获取指定视频的制定时刻的截图`
	 * ========params==========
	 *
	 * `videoUrl` :string : 视频地址，支持本地(widget://和fs:// android仅支持fs://)和网络视频
	 *
	 * `time` :number : 指定位置(单位为秒)
	 *
	 * `isAblum` :boolean : （可选项）是否保存相册
	 *
	 * `name` :boolean : （必选项）图片名
	 *
	 * `ret` :JSON : null
	 */
	videoCapture(params:videoPlayer_videoCapture_Params):void

}
interface videoPlayer_play_Params {
	/**（可选项）聊天输入框模块可配置的文本*/ 
	texts?:JSON,

	/**（可选项）模块的样式设置*/ 
	styles?:JSON,

	/**锁屏按钮配置*/ 
	lockBtn:JSON,

	/**（可选项）文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget***/ 
	path?:string,

	/**（可选项）打开时是否自动播放*/ 
	autoPlay?:boolean,

	/**（可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）*/ 
	coverImg?:string,

	/**（可选项）视频播放页面是否支持自动旋转（横竖屏），若为 false 则手动点击右下角按钮旋转*/ 
	autorotation?:boolean,

	/**（可选项）缩放模式 **该参数仅支持iOS***/ 
	audio?:string,

	/**（可选项） 播放进度条是否可以拖动*/ 
	seekBarDragable?:boolean,

	/**（可选项） 是否隐藏状态栏（该参数仅支持android）*/ 
	hideStatusBar?:boolean,

	/**（可选项）是否全屏*/ 
	isFull?:boolean,

}

interface videoPlayer_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）字符串类型；视频背景颜色，支持#、rgb、rgba (在切换视屏为了防止闪屏,请根据自己的视频调节颜色)*/ 
	bg?:string,

	/**（可选项）文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget***/ 
	path?:string,

	/**（可选项）打开时是否自动播放*/ 
	autoPlay?:boolean,

	/**（可选项）缩放模式 **该参数仅支持ios***/ 
	scalingMode?:string,

	/**（可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）*/ 
	coverImg?:boolean,

	/**（可选项）是否循环播放  **该参数仅支持ios***/ 
	loop?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface videoPlayer_setPath_Params {
	/**文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget***/ 
	path:string,

	/**（可选项）字符串类型；视频背景颜色，支持#、rgb、rgba (在切换视屏为了防止闪屏,请根据自己的视频调节颜色)*/ 
	bg?:string,

	/**（可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）*/ 
	coverImg?:boolean,

	/**（可选项）当设置 play 接口打开的视频时，本参数表示设置该视频的标题，本参数仅对 play 接口有效*/ 
	title?:string,

}

interface videoPlayer_forward_Params {
	/**快进的秒数*/ 
	seconds:number,

}

interface videoPlayer_rewind_Params {
	/**快退的秒数*/ 
	seconds:number,

}

interface videoPlayer_seekTo_Params {
	/**跳转到音视频播放的秒数*/ 
	seconds:number,

}

interface videoPlayer_setBrightness_Params {
	/**（可选项）设置的屏幕的亮度，取值范围：0-100，**在 iOS 平台上设置的是系统屏幕亮度。Android 平台上设置的本应用内的屏幕亮度***/ 
	brightness?:number,

}

interface videoPlayer_setVolume_Params {
	/**（可选项）音量大小，取值范围：0-1*/ 
	volume?:number,

}

interface videoPlayer_removeEventListener_Params {
	/**（可选项）所要移除的监听的动作名称*/ 
	name?:string,

}

interface videoPlayer_setRect_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块的位置及尺寸是否全屏（true不显示状态栏，false显示状态栏）*/ 
	fullscreen?:boolean,

}

interface videoPlayer_setCustomBtnSelected_Params {
	/**（可选项）用户自定义按钮的点击index，从右到左排列*/ 
	index?:number,

}

interface videoPlayer_setCustomBtnCancelSelected_Params {
	/**（可选项）用户自定义按钮的点击index，从右到左排列*/ 
	index?:number,

}

interface videoPlayer_setCustomBtnVisible_Params {
	/**（可选项）用户自定义按钮的点击index，从右到左排列*/ 
	index?:number,

	/**是否显示*/ 
	visible:boolean,

}

interface videoPlayer_videoCapture_Params {
	/**视频地址，支持本地(widget://和fs:// android仅支持fs://)和网络视频*/ 
	videoUrl:string,

	/**指定位置(单位为秒)*/ 
	time:number,

	/**（可选项）是否保存相册*/ 
	isAblum?:boolean,

	/**（必选项）图片名*/ 
	name:boolean,

	/**null*/ 
	ret:JSON,

}

interface jsskeNFC {
	/** 判断nfc是否开启*/ 
	isOpen(callback?: (ret:JSON) => void):void

	/** 初始化nfc工具*/ 
	init(callback?: (ret:JSON) => void):void

	/** 读取一次身份证信息*/ 
	findIDCard(callback?: (ret:JSON) => void):void

	/** 打开设备nfc设置页面*/ 
	toNfcSetting(callback?: (ret:JSON) => void):void

	/** 停止识别*/ 
	endFind(callback?: (ret:JSON) => void):void

}
interface timer {
	/**
	 * `开启计时器。开启计时器后，如果开启循坏(isLoop设为true)，模块会在delay毫秒后回调callback，以后会间隔period毫秒回调callback，如果关闭循坏(isLoop设为false)，模块只会在delay毫秒后回调callback一次，之后不再会回调。开发者可将要定时执行的js代码放到callback函数中执行。`
	 * ========params==========
	 *
	 * `delay` :any : 延时执行回调的时间，单位毫秒.
	 *
	 * `isLoop` :boolean : 是否循环执行回调.开启计时器后，如果开启循坏(isLoop设为true)，模块会在delay毫秒后回调callback，以后会间隔period毫秒回调callback，如果关闭循坏(isLoop设为false)，模块只会在delay毫秒后回调callback一次，之后不再会回调。开发者可将要定时执行的js代码放到callback函数中执行。
	 *
	 * `period` :any : 间隔执行回调的时间，单位毫秒。只有在isLoop为true时有效.
	 */
	startTimer(params:timer_startTimer_Params, callback?: (ret:JSON) => void):void

	/** 停止计时器，startTimer和stopTimer应一 一对应，调用startTimer后应在适当地方调用stopTimer停止计时器。*/ 
	stopTimer():void

}
interface timer_startTimer_Params {
	/**延时执行回调的时间，单位毫秒.*/ 
	delay:any,

	/**是否循环执行回调.开启计时器后，如果开启循坏(isLoop设为true)，模块会在delay毫秒后回调callback，以后会间隔period毫秒回调callback，如果关闭循坏(isLoop设为false)，模块只会在delay毫秒后回调callback一次，之后不再会回调。开发者可将要定时执行的js代码放到callback函数中执行。*/ 
	isLoop:boolean,

	/**间隔执行回调的时间，单位毫秒。只有在isLoop为true时有效.*/ 
	period:any,

}

interface cnKeyBoard {
	/** 在页面上添加车牌专用输入框，弹出专用键盘。*/ 
	openKeyboard(callback?: (ret:JSON) => void):void

}
interface appManagerPlus {
	/** 获取Android手机上所有应用的信息，包括应用图标、名字、包名、版本号等。获取到的应用图标保存在本地，可通过fs路径或Android原生路径获取图标。img标签用Android原生路径显示图片的方法：img标签的src属性设置为： "file://"+ Android原生路径。见示例代码。该接口为耗时接口，开发者调用该接口后可做等待提示，增加用户体验。*/ 
	getInstalledApplications(callback?: (ret:JSON) => void):void

	/** 打开系统安装应用(apk)界面*/ 
	installApp(callback?: (ret:JSON) => void):void

	/** 静默安装应用，手机需要Root且调用该方法后应用请求获取root权限(弹框方式弹出)，用户同意获取root权限后方可进行静默安装。*/ 
	installSilent(callback?: (ret:JSON) => void):void

	/** 打开系统卸载应用界面*/ 
	unInstallApp(callback?: (ret:JSON) => void):void

	/** 静默卸载应用，手机需要Root且调用该方法后应用请求获取root权限(弹框方式弹出)，用户同意获取root权限后方可进行静默卸载。*/ 
	unInstallSilent(callback?: (ret:JSON) => void):void

	/** 判断应用是否已经安装到手机上，可根据包名或或者应用名称判断，但应用名判断可能不准确，因为Android上允许有多个同名的应用(但他们的包名不会相同)，而包名是应用在手机上的唯一标识，所以用包名判断绝对准确，建议用包名。该方法为耗时方法。*/ 
	isInstalled(callback?: (ret:JSON) => void):void

	/** 判断应用是否是系统应用。*/ 
	isSystemApp(callback?: (ret:JSON) => void):void

	/** 获取应用的缓存大小、数据大小、应用本身大小。类似在手机设置中的应用管理中的“应用详情”页中的信息。该方法为耗时方法。*/ 
	getAppSize(callback?: (ret:JSON) => void):void

	/** 打开指定应用的默认页面，类似用户从桌面直接点击应用图标打开应用。调用该方法前需判断传入的应用是否已经安装(调用isInstalled方法)*/ 
	jumpToApp(callback?: (ret:JSON) => void):void

	/** 监听Android上应用的安装卸载，包括其他应用的安装、卸载、升级，本接口不能监听自身的安装、卸载和升级。如要监听自身的升级可参考本模块的isVersionChanged接口。本接口监听后立即返回，当有其他应用安装、卸载、升级时再次触发回调。开发者可在应用安装后启动应用，或者进行其他操作。注意：本应用(调用该接口的应用)还在运行时才能监听到应用的安装卸载，如果本应用被系统杀掉或刚开机未启动，则不能监听到应用的安装卸载*/ 
	registerAppReceiver():void

	/** 用于判断是否已经升级到新版本，本接口根据Android应用的版本号(versionCode)是否增大来判断，对应于云编译上编译正式版本的Android version code 。所以热更新如果没有改变版本号，该接口会返回false状态。注意：该接口要在新版本(已经升级的版本)中调用才有效，且要求旧版本也调用过该接口，开发者可在应用启动时调用该接口判断是否版本已经升级，如果是 可以给用户弹出“升级成功”的提示，增加用户体验。*/ 
	isVersionChanged():void

}
interface chromellqDebug {
}
interface recordVideo {
}
interface ytylive {
	/** 开始视频推流，video_url为推地址url，video_name为推流实例名称，如果使用第三方推流服务，则推流地址跟推流实例名称需要到第三方平台获取，如果自建直播服务器，则使用自建服务器的推流地址跟实例名称。*/ 
	startVideo(callback?: (ret:JSON) => void):void

}
interface imageBrowser {
}
interface realNetwork {
}
interface pdfReader {
	/**
	 * `打开一个 pdf 格式的文档`
	 * ========params==========
	 *
	 * `path` :string : 文档的路径，支持 widget://、fs://、http:// 等本地和网络协议
	 *
	 * `hidden` :JSON : 界面元素的隐藏显示属性配置，仅支持 iOS 平台
	 *
	 * `androidHidden` :JSON : （可选项）界面元素的隐藏显示属性配置，仅支持 Android 平台
	 *
	 * `backBtn` :JSON : （可选项）返回按钮配置，若不传，则显示默认按钮
	 *
	 * `showLoading` :boolean : （可选项）未成功打开文件之前是否显示加载提示框
	 *
	 * `index` :number : （可选项）打开指定页的页码，从1开始
	 */
	open(params:pdfReader_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开pdf文档视图`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `path` :string : 文档的路径，支持 widget://、fs://、http:// 等本地和网络协议
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `showLoading` :boolean : （可选项）未成功打开文件之前是否显示加载提示框
	 *
	 * `index` :number : （可选项）打开指定页的页码，从1开始
	 */
	openView(params:pdfReader_openView_Params, callback?: (ret:JSON) => void):void

	/** 隐藏文档视图*/ 
	hideView():void

	/** 显示文档视图*/ 
	showView():void

	/** 关闭文档视图*/ 
	closeView():void

	/** 清除缓存到本地的文件，**本接口只清除本模块缓存的数据，若要清除本app缓存的所有数据这调用api.clearCache***/ 
	clearCache():void

	/**
	 * `打开pdf文档视图，调用此接口为长图显示`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `path` :string : 文档的路径，支持 widget://、fs://、http:// 等本地和网络协议
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `showLoading` :boolean : （可选项）未成功打开文件之前是否显示加载提示框
	 */
	openPdfView(params:pdfReader_openPdfView_Params, callback?: (ret:JSON) => void):void

	/** 关闭长图pdf试图*/ 
	closePdfView():void

}
interface pdfReader_open_Params {
	/**文档的路径，支持 widget://、fs://、http:// 等本地和网络协议*/ 
	path:string,

	/**界面元素的隐藏显示属性配置，仅支持 iOS 平台*/ 
	hidden:JSON,

	/**（可选项）界面元素的隐藏显示属性配置，仅支持 Android 平台*/ 
	androidHidden?:JSON,

	/**（可选项）返回按钮配置，若不传，则显示默认按钮*/ 
	backBtn?:JSON,

	/**（可选项）未成功打开文件之前是否显示加载提示框*/ 
	showLoading?:boolean,

	/**（可选项）打开指定页的页码，从1开始*/ 
	index?:number,

}

interface pdfReader_openView_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**文档的路径，支持 widget://、fs://、http:// 等本地和网络协议*/ 
	path:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）未成功打开文件之前是否显示加载提示框*/ 
	showLoading?:boolean,

	/**（可选项）打开指定页的页码，从1开始*/ 
	index?:number,

}

interface pdfReader_openPdfView_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**文档的路径，支持 widget://、fs://、http:// 等本地和网络协议*/ 
	path:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）未成功打开文件之前是否显示加载提示框*/ 
	showLoading?:boolean,

}

interface aemail {
	/** 类型：字符串*/ 
	sendEmail():void

}
interface customNotification {
	/** 发送一条通知*/ 
	sendNotification():void

	/** 更新通知*/ 
	updateNotification():void

}
interface brightnessUtil {
}
interface imageFilter {
	/**
	 * `打开图片过滤器`
	 * ========params==========
	 *
	 * `imgPath` :string : 原图片路径，支持fs，widget等本地协议
	 */
	open(params:imageFilter_open_Params):void

	/**
	 * `设置图片滤镜效果`
	 * ========params==========
	 *
	 * `type` :string : （可选项）要设置的图片滤镜效果，详情参考[滤镜效果](!Constant)
	 *
	 * `value` :number : （可选项）要设置的图片滤镜效果程度，取值范围1-100
	 *
	 * `id` :number : 要操作的图片的id
	 */
	filter(params:imageFilter_filter_Params, callback?: (ret:JSON) => void):void

	/**
	 * `保存最终处理结果`
	 * ========params==========
	 *
	 * `album` :boolean : （可选项）是否保存到系统相册
	 *
	 * `imgPath` :string : （可选项）保存的图片路径，若路径不存在文件夹则创建此目录
	 *
	 * `imgName` :string : （可选项）保存的图片名字，支持png和jpg格式，若不指定格式，则默认png
	 *
	 * `id` :number : 要操作的图片的id
	 */
	save(params:imageFilter_save_Params, callback?: (ret:JSON) => void):void

	/**
	 * `图片压缩处理`
	 * ========params==========
	 *
	 * `img` :string : 要压缩图片的路径，支持widget、fs等本地路径
	 *
	 * `isClarityimg` :boolean : (可选项) 图片背景是否透明 仅支持iOS
	 *
	 * `quality` :number : （可选项）压缩程度，取值范围：0-1,当isClarityimg参数为false时有效
	 *
	 * `scale` :number : （可选项）压缩后的图片缩放比例，取值范围大于0，
	 *
	 * `size` :any : （可选项）压缩后的图片的大小
	 *
	 * `save` :any : （可选项）压缩后的图片保存位置
	 */
	compress(params:imageFilter_compress_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取指定路径下的图片信息`
	 * ========params==========
	 *
	 * `path` :string : 目标图片的路径，支持fs等本地路径
	 */
	getAttr(params:imageFilter_getAttr_Params, callback?: (ret:JSON) => void):void

}
interface imageFilter_open_Params {
	/**原图片路径，支持fs，widget等本地协议*/ 
	imgPath:string,

}

interface imageFilter_filter_Params {
	/**（可选项）要设置的图片滤镜效果，详情参考[滤镜效果](!Constant)*/ 
	type?:string,

	/**（可选项）要设置的图片滤镜效果程度，取值范围1-100*/ 
	value?:number,

	/**要操作的图片的id*/ 
	id:number,

}

interface imageFilter_save_Params {
	/**（可选项）是否保存到系统相册*/ 
	album?:boolean,

	/**（可选项）保存的图片路径，若路径不存在文件夹则创建此目录*/ 
	imgPath?:string,

	/**（可选项）保存的图片名字，支持png和jpg格式，若不指定格式，则默认png*/ 
	imgName?:string,

	/**要操作的图片的id*/ 
	id:number,

}

interface imageFilter_compress_Params {
	/**要压缩图片的路径，支持widget、fs等本地路径*/ 
	img:string,

	/**(可选项) 图片背景是否透明 仅支持iOS*/ 
	isClarityimg?:boolean,

	/**（可选项）压缩程度，取值范围：0-1,当isClarityimg参数为false时有效*/ 
	quality?:number,

	/**（可选项）压缩后的图片缩放比例，取值范围大于0，*/ 
	scale?:number,

	/**（可选项）压缩后的图片的大小*/ 
	size?:any,

	/**（可选项）压缩后的图片保存位置*/ 
	save?:any,

}

interface imageFilter_getAttr_Params {
	/**目标图片的路径，支持fs等本地路径*/ 
	path:string,

}

interface ttsModule {
}
interface mobilePhone {
}
interface photoBrowserTodayNew {
	/**
	 * `打开图片浏览器。`
	 * ========params==========
	 *
	 * `images` :Array<JSON> : （必填项）要显示的图片url数组,图片数量应大于等于1。支持 fs://、widget://、http://、https://格式
	 *
	 * `texts` :Array<JSON> : （可选项）要显示的图片描述字符串数组，images和texts一 一对应，即images中的第一个元素对应texts中的第一个元素，以此类推。字符串数量应等于图片数量，如大于图片数量，则模块从左往右选取数量等于图片数量的那些字符串，如小于图片数量，则剩下的描述字符串模块会自动用空字符串("")补全。参数visibility中的textArea为true时，该字段才有效。
	 *
	 * `frame` :string : 必填项，要将该模块添加到哪个frame显示，一般本模块需要全屏显示（除去手机状态栏，即除去手机顶部的状态栏，其他区域都用来显示本模块），所以frame的区域建议为除去手机顶部状态栏的其他区域。沉浸式模式下，建议将状态栏的背景色设置成黑色(#000000)，以便与本模块的背景色保持一致。
	 *
	 * `visibility` :JSON : （可选项）用于设置功能按钮是否显示，当input为2时，此时点击伪输入框弹出真正的评论输入框，要想图片不跟随键盘上移，则在config.xml中配置如下参数：<br/><preference name="softInputMode" value="pan"/>
	 *
	 * `textHeight` :JSON : （可选项）用于设置文字描述区域高度所占的百分比，公式如下：<br/>
	 *
	 * `start` :any : （可选项）用于设置从第几张图片开始显示，默认1，该值从1计数，而不是0。
	 *
	 * `count` :any : （可选项）用于设置评论按钮上的红色评论数量，默认0，>0时显示红色数量, <=0时不显示红色数量; 大于999时显示"999+"
	 *
	 * `status` :boolean : （可选项）用于设置是否收藏，默认false不收藏。
	 *
	 * `publisher` :string : （可选项）用于设置发布人头像，为空或不传时头像不显示，支持 fs://、widget://、http://、https://格式
	 *
	 * `virtualInputHint` :string : （可选项）用于设置伪输入框的提示文字，默认"写评论..."；参数visibility中的input为1或2时，该字段才有效。
	 *
	 * `realInputHint` :string : （可选项）用于设置可输入评论内容的输入框的提示文字，默认"优质评论将会被优先展示"；参数visibility中的input为2时，该字段才有效。
	 */
	open(params:photoBrowserTodayNew_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置评论数量。应在调用open方法后调用该方法`
	 * ========params==========
	 *
	 * `count` :any : （可选项）用于设置评论按钮上的红色评论数量，默认0，>0时显示红色数量, <=0时不显示红色数量; 大于999时显示"999+"
	 */
	setCommentCount(params:photoBrowserTodayNew_setCommentCount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置收藏状态。应在调用open方法后调用该方法`
	 * ========params==========
	 *
	 * `status` :boolean : （可选项）用于设置收藏状态，默认false不收藏。
	 */
	setFavorite(params:photoBrowserTodayNew_setFavorite_Params, callback?: (ret:JSON) => void):void

	/** 清除缓存到本地的网络图片，本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用 api.clearCache。清除缓存后保存图片会失败，所以开发者要在适当的时候清除缓存或不清除缓存。*/ 
	clearCache():void

	/** 关闭图片浏览器，open和close应一 一对应，调用open后应在适当时候调用close。*/ 
	close():void

}
interface photoBrowserTodayNew_open_Params {
	/**（必填项）要显示的图片url数组,图片数量应大于等于1。支持 fs://、widget://、http://、https://格式*/ 
	images:Array<JSON>,

	/**（可选项）要显示的图片描述字符串数组，images和texts一 一对应，即images中的第一个元素对应texts中的第一个元素，以此类推。字符串数量应等于图片数量，如大于图片数量，则模块从左往右选取数量等于图片数量的那些字符串，如小于图片数量，则剩下的描述字符串模块会自动用空字符串("")补全。参数visibility中的textArea为true时，该字段才有效。*/ 
	texts?:Array<JSON>,

	/**必填项，要将该模块添加到哪个frame显示，一般本模块需要全屏显示（除去手机状态栏，即除去手机顶部的状态栏，其他区域都用来显示本模块），所以frame的区域建议为除去手机顶部状态栏的其他区域。沉浸式模式下，建议将状态栏的背景色设置成黑色(#000000)，以便与本模块的背景色保持一致。*/ 
	frame:string,

	/**（可选项）用于设置功能按钮是否显示，当input为2时，此时点击伪输入框弹出真正的评论输入框，要想图片不跟随键盘上移，则在config.xml中配置如下参数：<br/><preference name="softInputMode" value="pan"/>*/ 
	visibility?:JSON,

	/**（可选项）用于设置文字描述区域高度所占的百分比，公式如下：<br/>*/ 
	textHeight?:JSON,

	/**（可选项）用于设置从第几张图片开始显示，默认1，该值从1计数，而不是0。*/ 
	start?:any,

	/**（可选项）用于设置评论按钮上的红色评论数量，默认0，>0时显示红色数量, <=0时不显示红色数量; 大于999时显示"999+"*/ 
	count?:any,

	/**（可选项）用于设置是否收藏，默认false不收藏。*/ 
	status?:boolean,

	/**（可选项）用于设置发布人头像，为空或不传时头像不显示，支持 fs://、widget://、http://、https://格式*/ 
	publisher?:string,

	/**（可选项）用于设置伪输入框的提示文字，默认"写评论..."；参数visibility中的input为1或2时，该字段才有效。*/ 
	virtualInputHint?:string,

	/**（可选项）用于设置可输入评论内容的输入框的提示文字，默认"优质评论将会被优先展示"；参数visibility中的input为2时，该字段才有效。*/ 
	realInputHint?:string,

}

interface photoBrowserTodayNew_setCommentCount_Params {
	/**（可选项）用于设置评论按钮上的红色评论数量，默认0，>0时显示红色数量, <=0时不显示红色数量; 大于999时显示"999+"*/ 
	count?:any,

}

interface photoBrowserTodayNew_setFavorite_Params {
	/**（可选项）用于设置收藏状态，默认false不收藏。*/ 
	status?:boolean,

}

interface dUserAgent {
}
interface qrScanner {
	/** 打开二维码扫描器*/ 
	openScanner():void

	/**
	 * `将字符串生成二维码图片`
	 * ========params==========
	 *
	 * `content` :string : 所要生成的二维码字符串
	 */
	encodeImg(params:qrScanner_encodeImg_Params, callback?: (ret:JSON) => void):void

}
interface qrScanner_encodeImg_Params {
	/**所要生成的二维码字符串*/ 
	content:string,

}

interface networkAddress {
	/** 获取手机网络ip*/ 
	get():void

	/** 判断网络是否连接*/ 
	isNetConnected():void

	/** 获取连接的网络类型*/ 
	getNetworkType():void

	/** 添加网速监听*/ 
	netWorkSpeedListener():void

	/** 停止网速监听*/ 
	stopNetWorkSpeedListener():void

}
interface speedPlayer {
	/** 打开一个直播或点播*/ 
	open():void

	/** 关闭播放器并释放内存*/ 
	close():void

	/** 继续播放*/ 
	resume():void

	/** 设置视频地址及标题，开始播放位置*/ 
	setPath():void

	/**
	 * `设置视频区域大小。`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频区域的位置及尺寸
	 */
	setRect(params:speedPlayer_setRect_Params):void

	/** 重播*/ 
	replay():void

	/**
	 * `设置视频播放位置`
	 * ========params==========
	 *
	 * `pos` :any : （可选项）视频播放开始位置，单位：秒。
	 */
	seek(params:speedPlayer_seek_Params):void

	/** 获取视频播放的位置*/ 
	getCurrent():void

	/** 获取视频总时长*/ 
	getDuration():void

	/** 设置视频播放倍数*/ 
	setRate():void

	/** 获取视频播放的倍速*/ 
	getRate():void

	/** 全屏显示*/ 
	fullscreen():void

	/** 取消全屏显示*/ 
	cancelFullscreen():void

	/** 获取音量*/ 
	getVol():void

	/** 设置音量*/ 
	setVol():void

	/** 获取亮度*/ 
	getBrightness():void

	/** 设置亮度*/ 
	setBrightness():void

	/** 继续播放*/ 
	start():void

}
interface speedPlayer_setRect_Params {
	/**（可选项）视频区域的位置及尺寸*/ 
	rect?:JSON,

}

interface speedPlayer_seek_Params {
	/**（可选项）视频播放开始位置，单位：秒。*/ 
	pos?:any,

}

interface apk {
	/** 获取apk的包名。*/ 
	getPackageName():void

	/** 获取apk的签名。*/ 
	getSign():void

	/** 获取当前手机的API版本（Android API 版本号）。比如23，（对应Android 6.0）*/ 
	getVersion():void

}
interface snKVStorage {
	/**
	 * `设置字符串数据，数据会存储到本地文件系统。`
	 * ========params==========
	 *
	 * `key` :string : 键
	 *
	 * `value` :string : 值
	 */
	setString(params:snKVStorage_setString_Params):void

	/**
	 * `设置整型数据，数据会存储到本地文件系统。`
	 * ========params==========
	 *
	 * `key` :string : 键
	 *
	 * `value` :any : 值
	 */
	setInt(params:snKVStorage_setInt_Params):void

	/**
	 * `设置浮点型数据，数据会存储到本地文件系统。`
	 * ========params==========
	 *
	 * `key` :string : 键
	 *
	 * `value` :any : 值
	 */
	setDouble(params:snKVStorage_setDouble_Params):void

	/**
	 * `设置布尔数据，数据会存储到本地文件系统。`
	 * ========params==========
	 *
	 * `key` :string : 键
	 *
	 * `value` :boolean : 值
	 */
	setBool(params:snKVStorage_setBool_Params):void

	/**
	 * `设置对象数据，数据会存储到本地文件系统。`
	 * ========params==========
	 *
	 * `key` :string : 键
	 *
	 * `value` :JSON : 值
	 */
	setObject(params:snKVStorage_setObject_Params):void

	/**
	 * `设置数组数据，数据会存储到本地文件系统。`
	 * ========params==========
	 *
	 * `key` :string : 键
	 *
	 * `value` :Array<JSON> : 值
	 */
	setArray(params:snKVStorage_setArray_Params):void

	/**
	 * `获取字符串数据`
	 * ========params==========
	 *
	 * `key` :string : 键
	 */
	getString(params:snKVStorage_getString_Params):void

	/**
	 * `获取整型数据`
	 * ========params==========
	 *
	 * `key` :string : 键
	 */
	getInt(params:snKVStorage_getInt_Params):void

	/**
	 * `获取浮点型数据`
	 * ========params==========
	 *
	 * `key` :string : 键
	 */
	getDouble(params:snKVStorage_getDouble_Params):void

	/**
	 * `获取布尔数据`
	 * ========params==========
	 *
	 * `key` :string : 键
	 */
	getBool(params:snKVStorage_getBool_Params):void

	/**
	 * `设置对象数据`
	 * ========params==========
	 *
	 * `key` :string : 键
	 */
	getObject(params:snKVStorage_getObject_Params):void

	/**
	 * `获取数组数据`
	 * ========params==========
	 *
	 * `key` :string : 键
	 */
	getArray(params:snKVStorage_getArray_Params):void

	/**
	 * `检查是否有kv`
	 * ========params==========
	 *
	 * `key` :string : 键
	 */
	has(params:snKVStorage_has_Params):void

	/**
	 * `删除单个kv`
	 * ========params==========
	 *
	 * `key` :string : 键
	 */
	removeKey(params:snKVStorage_removeKey_Params):void

	/**
	 * `删除多个kv`
	 * ========params==========
	 *
	 * `keys` :string : 键
	 */
	removeKeys(params:snKVStorage_removeKeys_Params):void

	/** 清除kv*/ 
	clear():void

}
interface snKVStorage_setString_Params {
	/**键*/ 
	key:string,

	/**值*/ 
	value:string,

}

interface snKVStorage_setInt_Params {
	/**键*/ 
	key:string,

	/**值*/ 
	value:any,

}

interface snKVStorage_setDouble_Params {
	/**键*/ 
	key:string,

	/**值*/ 
	value:any,

}

interface snKVStorage_setBool_Params {
	/**键*/ 
	key:string,

	/**值*/ 
	value:boolean,

}

interface snKVStorage_setObject_Params {
	/**键*/ 
	key:string,

	/**值*/ 
	value:JSON,

}

interface snKVStorage_setArray_Params {
	/**键*/ 
	key:string,

	/**值*/ 
	value:Array<JSON>,

}

interface snKVStorage_getString_Params {
	/**键*/ 
	key:string,

}

interface snKVStorage_getInt_Params {
	/**键*/ 
	key:string,

}

interface snKVStorage_getDouble_Params {
	/**键*/ 
	key:string,

}

interface snKVStorage_getBool_Params {
	/**键*/ 
	key:string,

}

interface snKVStorage_getObject_Params {
	/**键*/ 
	key:string,

}

interface snKVStorage_getArray_Params {
	/**键*/ 
	key:string,

}

interface snKVStorage_has_Params {
	/**键*/ 
	key:string,

}

interface snKVStorage_removeKey_Params {
	/**键*/ 
	key:string,

}

interface snKVStorage_removeKeys_Params {
	/**键*/ 
	keys:string,

}

interface photoStream {
	/**
	 * `打开照片墙页面`
	 * ========params==========
	 *
	 * `close` :string : 是否显示关闭按钮
	 *
	 * `bgColor` :string : 背景色
	 *
	 * `butTextColor` :string : 关闭按钮字体颜色
	 *
	 * `butPressColor` :string : 关闭按钮按下字体颜色
	 *
	 * `files` :Array : 照片墙中的图片数组，支持jpg与png格式的的图片，如果未构造图片数组，则默认图片显示
	 */
	openPSV(params:photoStream_openPSV_Params):void

}
interface photoStream_openPSV_Params {
	/**是否显示关闭按钮*/ 
	close:string,

	/**背景色*/ 
	bgColor:string,

	/**关闭按钮字体颜色*/ 
	butTextColor:string,

	/**关闭按钮按下字体颜色*/ 
	butPressColor:string,

	/**照片墙中的图片数组，支持jpg与png格式的的图片，如果未构造图片数组，则默认图片显示*/ 
	files:Array,

}

interface playRtsp {
	/**
	 * `初始化设置`
	 * ========params==========
	 *
	 * `doubleClick` :boolean : （可选项）是否双机视频播放界面进行横屏切换。
	 *
	 * `isLocked` :boolean : （可选项）是否锁住屏幕，锁住屏幕后，执行全屏和退出全屏接口会无效。
	 */
	init(params:playRtsp_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `播放rtsp://格式直播流`
	 * ========params==========
	 *
	 * `x` :number : （必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；
	 *
	 * `y` :number : （必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0
	 *
	 * `w` :number : （可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度
	 *
	 * `h` :number : （可选项）模块的高度；默认：所属的 Window 或 Frame 的高度
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `url` :string : （必填项）视频资源地址，仅支持rtsp://
	 *
	 * `options` :Array : （可选项）vlc配置
	 */
	play(params:playRtsp_play_Params, callback?: (ret:JSON) => void):void

	/** 暂停播放*/ 
	pause():void

	/** 暂停后开始播放*/ 
	start():void

	/** 停止播放*/ 
	stop():void

	/** 获取是否全屏播放状态*/ 
	isFullScreen(callback?: (ret:JSON) => void):void

	/** 全屏播放*/ 
	full():void

	/** 退出全屏*/ 
	unfull():void

	/**
	 * `设置音量大小（1、ios设置的是系统音量，请退出播放后，将音量进行恢复操作。2、安卓设置的是视频音量，和安卓系统的本身音量大小有关。）`
	 * ========params==========
	 *
	 * `volume` :number : （必填项）设置音量(0-100)
	 */
	setVolume(params:playRtsp_setVolume_Params):void

	/**
	 * `切换视频播放地址`
	 * ========params==========
	 *
	 * `url` :string : （必填项）视频资源地址，仅支持rtsp://
	 */
	playUrl(params:playRtsp_playUrl_Params, callback?: (ret:JSON) => void):void

	/** 截图*/ 
	saveSnap(callback?: (ret:JSON) => void):void

}
interface playRtsp_init_Params {
	/**（可选项）是否双机视频播放界面进行横屏切换。*/ 
	doubleClick?:boolean,

	/**（可选项）是否锁住屏幕，锁住屏幕后，执行全屏和退出全屏接口会无效。*/ 
	isLocked?:boolean,

}

interface playRtsp_play_Params {
	/**（必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；*/ 
	x:number,

	/**（必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0*/ 
	y:number,

	/**（可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度*/ 
	w?:number,

	/**（可选项）模块的高度；默认：所属的 Window 或 Frame 的高度*/ 
	h?:number,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）视频资源地址，仅支持rtsp://*/ 
	url:string,

	/**（可选项）vlc配置*/ 
	options?:Array,

}

interface playRtsp_setVolume_Params {
	/**（必填项）设置音量(0-100)*/ 
	volume:number,

}

interface playRtsp_playUrl_Params {
	/**（必填项）视频资源地址，仅支持rtsp://*/ 
	url:string,

}

interface moduleCrop {
}
interface marketScore {
}
interface UIPhotoViewer {
	/**
	 * `打开图片浏览器`
	 * ========params==========
	 *
	 * `images` :Array : 要读取的图片路径组成的数组，图片路径支持 fs://、http:// 协议
	 *
	 * `activeIndex` :number : （可选项）当前要显示的图片在图片路径数组中的索引
	 *
	 * `placeholderImg` :string : （可选项）当加载网络图片时显示的占位图路径，要求本地图片路径（widget://、fs://）
	 *
	 * `bgColor` :string : （可选项）图片浏览器背景色，支持 rgb、rgba、#
	 *
	 * `zoomEnabled` :boolean : （可选项）是否打开缩放手势识别功能（随手势放大缩小图片）
	 *
	 * `mode` :number : （可选项）图片的现实模式；1：为图片原本大小 2：图片宽度等比例放大到宽等于屏幕款;android不支持此参数
	 *
	 * `gestureClose` :boolean : （可选项）手势关闭，上划或下划关闭控件
	 *
	 * `atime` :number : （可选项）打开关闭动画的执行时间，传0无动画
	 */
	open(params:UIPhotoViewer_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭图片浏览器*/ 
	close():void

	/** 隐藏图片浏览器*/ 
	hide():void

	/** 显示图片浏览器*/ 
	show():void

	/**
	 * `设置当前显示图片`
	 * ========params==========
	 *
	 * `index` :number : （可选项）当前要显示的图片在图片路径数组中的索引
	 */
	setIndex(params:UIPhotoViewer_setIndex_Params):void

	/** 获取当前图片在图片路径数组内的索引*/ 
	getIndex():void

	/**
	 * `获取指定图片在本地的绝对路径`
	 * ========params==========
	 *
	 * `index` :number : 指定图片在图片数组中的索引
	 */
	getImage(params:UIPhotoViewer_getImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置指定位置的图片，**若设置的是网络图片加载成功或失败会给 open 接口回调该加载事件**`
	 * ========params==========
	 *
	 * `index` :number : （可选项）指定图片在图片数组中的索引
	 *
	 * `image` :string : 要设置的图片路径，支持本地和网络路径（fs://、http://）
	 */
	setImage(params:UIPhotoViewer_setImage_Params):void

	/**
	 * `往已打开的图片浏览器里添加图片（拼接在最后）`
	 * ========params==========
	 *
	 * `images` :Array : 要拼接的图片路径组成的数组，图片路径支持 fs://、http:// 协议
	 */
	appendImage(params:UIPhotoViewer_appendImage_Params):void

	/**
	 * `删除指定位置的图片`
	 * ========params==========
	 *
	 * `index` :number : （可选项）删除的指定图片在图片数组中的索引
	 */
	deleteImage(params:UIPhotoViewer_deleteImage_Params):void

	/** 清除缓存到本地的网络图片，**本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

}
interface UIPhotoViewer_open_Params {
	/**要读取的图片路径组成的数组，图片路径支持 fs://、http:// 协议*/ 
	images:Array,

	/**（可选项）当前要显示的图片在图片路径数组中的索引*/ 
	activeIndex?:number,

	/**（可选项）当加载网络图片时显示的占位图路径，要求本地图片路径（widget://、fs://）*/ 
	placeholderImg?:string,

	/**（可选项）图片浏览器背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）是否打开缩放手势识别功能（随手势放大缩小图片）*/ 
	zoomEnabled?:boolean,

	/**（可选项）图片的现实模式；1：为图片原本大小 2：图片宽度等比例放大到宽等于屏幕款;android不支持此参数*/ 
	mode?:number,

	/**（可选项）手势关闭，上划或下划关闭控件*/ 
	gestureClose?:boolean,

	/**（可选项）打开关闭动画的执行时间，传0无动画*/ 
	atime?:number,

}

interface UIPhotoViewer_setIndex_Params {
	/**（可选项）当前要显示的图片在图片路径数组中的索引*/ 
	index?:number,

}

interface UIPhotoViewer_getImage_Params {
	/**指定图片在图片数组中的索引*/ 
	index:number,

}

interface UIPhotoViewer_setImage_Params {
	/**（可选项）指定图片在图片数组中的索引*/ 
	index?:number,

	/**要设置的图片路径，支持本地和网络路径（fs://、http://）*/ 
	image:string,

}

interface UIPhotoViewer_appendImage_Params {
	/**要拼接的图片路径组成的数组，图片路径支持 fs://、http:// 协议*/ 
	images:Array,

}

interface UIPhotoViewer_deleteImage_Params {
	/**（可选项）删除的指定图片在图片数组中的索引*/ 
	index?:number,

}

interface androidPdfReader {
	/**
	 * `打开一个 pdf 格式的文档`
	 * ========params==========
	 *
	 * `path` :string : 文档的路径，支持 fs://、http:// 等本地和网络协议
	 */
	open(params:androidPdfReader_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开pdf文档视图`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `path` :string : 文档的路径，支持 fs://、http:// 等本地和网络协议, 暂不支持（widget://）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openView(params:androidPdfReader_openView_Params, callback?: (ret:JSON) => void):void

	/** 隐藏文档视图*/ 
	hideView():void

	/** 显示文档视图*/ 
	showView():void

	/** 关闭文档视图*/ 
	closeView():void

	/** 清除缓存到本地的文件，**本接口只清除本模块缓存的数据，若要清除本app缓存的所有数据这调用api.clearCache***/ 
	clearCache():void

}
interface androidPdfReader_open_Params {
	/**文档的路径，支持 fs://、http:// 等本地和网络协议*/ 
	path:string,

}

interface androidPdfReader_openView_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**文档的路径，支持 fs://、http:// 等本地和网络协议, 暂不支持（widget://）*/ 
	path:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface shareAction {
	/**
	 * `打开分享对话框`
	 * ========params==========
	 *
	 * `text` :string : （可选项）要分享的文本信息，**在iOS端，当type为image时，本参数会被忽略**
	 *
	 * `type` :string : （可选项）分享文件的类型（iOS系统微信不支持纯文字的分享）
	 *
	 * `path` :string : （可选项）要分享的路径，若是‘file’或‘audio’类型，要求本地路径（fs://、widget://），若是url类型，需要有效的网址。若 images 不为空则模块忽略本参数。**Android 平台不支持 widget:// 路径**
	 *
	 * `images` :Array : （可选项）分享的图片路径组成的数组，仅当 type 为 image 时有效；要求本地路径（fs://、widget://）。若本参数不为空则模块忽略 path 参数。**android 仅支持fs://路径**
	 *
	 * `thumbnail` :string : （可选项）分享时的缩略图；要求本地路径（fs://、widget://）。若不传则不显示。**仅支持 iOS 平台**
	 *
	 * `arrowRect` :JSON : （可选项）iPad中显示时，箭头指向的位置，只iPad有效
	 *
	 * `arrowDirection` :string : （可选项）iPad中显示时，箭头指向的方向，只iPad有效
	 *
	 * `contentSize` :JSON : （可选项）iPad中显示时，对话框大小，只iPad有效，iOS不支持
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	share(params:shareAction_share_Params):void

	/** 分享文本到系统分享控件（通过系统分享控件分享到目标APP）*/ 
	shareText():void

	/**
	 * `打开分享对话框，分享图片到目标 APP **android多图片分享（即images参数）功能，会在android 7.0+ 并且在编译版本（targetVersion）为26时会出现一些兼容性问题，推荐使用share接口分享图片**`
	 * ========params==========
	 *
	 * `images` :Array : 要分享图片的路径组成的数组，要求本地路径（widget://、fs://）**Android 平台不支持 widget://**
	 *
	 * `text` :string : （可选项）要分享的文本信息，**仅支持 android 端**
	 *
	 * `iPad` :JSON : （可选项）iPad 上分享控件的样式配置，若不传则在iPad上显示默认样式
	 */
	shareImage(params:shareAction_shareImage_Params):void

	/**
	 * `打开分享对话框，分享文件`
	 * ========params==========
	 *
	 * `path` :string : 要分享的文件路径，要求本地路径（fs://、widget://），**Android 平台不支持 widget:// 路径**
	 *
	 * `text` :string : （可选项）要分享的文本信息**仅支持 android 端**
	 *
	 * `iPad` :JSON : （可选项）iPad 上分享控件的样式配置，若不传则在iPad上显示默认样式
	 */
	shareFile(params:shareAction_shareFile_Params):void

	/**
	 * `打开分享对话框，分享音频文件`
	 * ========params==========
	 *
	 * `path` :string : 要分享的音频路径，要求本地路径（fs://、widget://），**Android 平台不支持 widget:// 路径**
	 *
	 * `text` :string : （可选项）要分享的文本信息**仅支持 android 端**
	 *
	 * `iPad` :JSON : （可选项）iPad 上分享控件的样式配置
	 */
	shareAudio(params:shareAction_shareAudio_Params):void

	/**
	 * `打开分享对话框，分享Url`
	 * ========params==========
	 *
	 * `url` :string : 要分享的有效网址
	 *
	 * `text` :string : （可选项）要分享的文本信息
	 *
	 * `thumbnail` :string : （可选项）分享时的缩略图；要求本地路径（fs://、widget://）。若不传则不显示。**仅支持 iOS 平台**
	 *
	 * `iPad` :JSON : （可选项）iPad 上分享控件的样式配置，若不传则在iPad上显示默认样式
	 */
	shareUrl(params:shareAction_shareUrl_Params):void

	/**
	 * `获取所有支持分享的app的信息 **（注意：该方法仅支持android）**`
	 * ========params==========
	 *
	 * `type` :string : （可选项）支持分享的类型
	 *
	 * `ret` :JSON : null
	 */
	getSupportSharedAppInfos(params:shareAction_getSupportSharedAppInfos_Params):void

}
interface shareAction_share_Params {
	/**（可选项）要分享的文本信息，**在iOS端，当type为image时，本参数会被忽略***/ 
	text?:string,

	/**（可选项）分享文件的类型（iOS系统微信不支持纯文字的分享）*/ 
	type?:string,

	/**（可选项）要分享的路径，若是‘file’或‘audio’类型，要求本地路径（fs://、widget://），若是url类型，需要有效的网址。若 images 不为空则模块忽略本参数。**Android 平台不支持 widget:// 路径***/ 
	path?:string,

	/**（可选项）分享的图片路径组成的数组，仅当 type 为 image 时有效；要求本地路径（fs://、widget://）。若本参数不为空则模块忽略 path 参数。**android 仅支持fs://路径***/ 
	images?:Array,

	/**（可选项）分享时的缩略图；要求本地路径（fs://、widget://）。若不传则不显示。**仅支持 iOS 平台***/ 
	thumbnail?:string,

	/**（可选项）iPad中显示时，箭头指向的位置，只iPad有效*/ 
	arrowRect?:JSON,

	/**（可选项）iPad中显示时，箭头指向的方向，只iPad有效*/ 
	arrowDirection?:string,

	/**（可选项）iPad中显示时，对话框大小，只iPad有效，iOS不支持*/ 
	contentSize?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface shareAction_shareImage_Params {
	/**要分享图片的路径组成的数组，要求本地路径（widget://、fs://）**Android 平台不支持 widget://***/ 
	images:Array,

	/**（可选项）要分享的文本信息，**仅支持 android 端***/ 
	text?:string,

	/**（可选项）iPad 上分享控件的样式配置，若不传则在iPad上显示默认样式*/ 
	iPad?:JSON,

}

interface shareAction_shareFile_Params {
	/**要分享的文件路径，要求本地路径（fs://、widget://），**Android 平台不支持 widget:// 路径***/ 
	path:string,

	/**（可选项）要分享的文本信息**仅支持 android 端***/ 
	text?:string,

	/**（可选项）iPad 上分享控件的样式配置，若不传则在iPad上显示默认样式*/ 
	iPad?:JSON,

}

interface shareAction_shareAudio_Params {
	/**要分享的音频路径，要求本地路径（fs://、widget://），**Android 平台不支持 widget:// 路径***/ 
	path:string,

	/**（可选项）要分享的文本信息**仅支持 android 端***/ 
	text?:string,

	/**（可选项）iPad 上分享控件的样式配置*/ 
	iPad?:JSON,

}

interface shareAction_shareUrl_Params {
	/**要分享的有效网址*/ 
	url:string,

	/**（可选项）要分享的文本信息*/ 
	text?:string,

	/**（可选项）分享时的缩略图；要求本地路径（fs://、widget://）。若不传则不显示。**仅支持 iOS 平台***/ 
	thumbnail?:string,

	/**（可选项）iPad 上分享控件的样式配置，若不传则在iPad上显示默认样式*/ 
	iPad?:JSON,

}

interface shareAction_getSupportSharedAppInfos_Params {
	/**（可选项）支持分享的类型*/ 
	type?:string,

	/**null*/ 
	ret:JSON,

}

interface easyVideoPlayer {
}
interface systemTool {
	/** 获取系统字体*/ 
	getSystemFont():void

	/** 获取系统的CPU*/ 
	getCPU():void

	/** 获取系统的内存*/ 
	getMemory():void

	/** 获取系统的密码*/ 
	passCode():void

}
interface imageClip {
}
interface wxShortVideo {
	/**
	 * `打开`
	 * ========params==========
	 *
	 * `album` :boolean : 是否保存到相册（仅iOS支持）
	 *
	 * `save` :JSON : 文件保存配置
	 *
	 * `maxTime` :number : （可选项）最大录制时间（s）（仅android支持）
	 *
	 * `minTime` :number : （可选项）最小录制时间（s）（仅android支持）
	 */
	open(params:wxShortVideo_open_Params, callback?: (ret:JSON) => void):void

}
interface wxShortVideo_open_Params {
	/**是否保存到相册（仅iOS支持）*/ 
	album:boolean,

	/**文件保存配置*/ 
	save:JSON,

	/**（可选项）最大录制时间（s）（仅android支持）*/ 
	maxTime?:number,

	/**（可选项）最小录制时间（s）（仅android支持）*/ 
	minTime?:number,

}

interface tools {
	/**
	 * `分享内容`
	 * ========params==========
	 *
	 * `to` :string : （必须）分享的目标平台
	 *
	 * `picurl` :Array : （必须）[图片1,图片2,图片3....]  微信朋友圈,好友,QQ空间,QQ好友最多9张 (微博只能1张图)
	 *
	 * `content` :boolean : （可选项,在IOS上才有效） 在IOS 11及以上没有办法直接绕过系统分享对框,必须将此处设为true 就先调用系统对话框来让用户选择分享到哪个用户,如选择微信,再调用微信的专用分享页去选择分享到朋友圈或是好友 (微博,QQ也都一样,这个是系统限制)
	 */
	share(params:tools_share_Params, callback?: (ret:JSON) => void):void

}
interface tools_share_Params {
	/**（必须）分享的目标平台*/ 
	to:string,

	/**（必须）[图片1,图片2,图片3....]  微信朋友圈,好友,QQ空间,QQ好友最多9张 (微博只能1张图)*/ 
	picurl:Array,

	/**（可选项,在IOS上才有效） 在IOS 11及以上没有办法直接绕过系统分享对框,必须将此处设为true 就先调用系统对话框来让用户选择分享到哪个用户,如选择微信,再调用微信的专用分享页去选择分享到朋友圈或是好友 (微博,QQ也都一样,这个是系统限制)*/ 
	content?:boolean,

}

interface mam {
}
interface mcm {
}
interface msm {
	/** 获取认证信息*/ 
	getAuthInfo(callback?: (ret:JSON) => void):void

	/**
	 * `证书申请`
	 * ========params==========
	 *
	 * `email` :string : 邮箱，不能为空
	 *
	 * `name` :string : 姓名
	 *
	 * `group` :string : 分组
	 *
	 * `description` :string : 申请说明
	 *
	 * `photo` :string : 证件照
	 */
	certApply(params:msm_certApply_Params, callback?: (ret:JSON) => void):void

	/**
	 * `认证码验证`
	 * ========params==========
	 *
	 * `authCode` :string : 认证码，不能为空
	 */
	certVerify(params:msm_certVerify_Params, callback?: (ret:JSON) => void):void

	/**
	 * `登录`
	 * ========params==========
	 *
	 * `userName` :string : 用户名，不能为空
	 *
	 * `password` :string : 密码，不能为空
	 */
	login(params:msm_login_Params, callback?: (ret:JSON) => void):void

}
interface msm_certApply_Params {
	/**邮箱，不能为空*/ 
	email:string,

	/**姓名*/ 
	name:string,

	/**分组*/ 
	group:string,

	/**申请说明*/ 
	description:string,

	/**证件照*/ 
	photo:string,

}

interface msm_certVerify_Params {
	/**认证码，不能为空*/ 
	authCode:string,

}

interface msm_login_Params {
	/**用户名，不能为空*/ 
	userName:string,

	/**密码，不能为空*/ 
	password:string,

}

interface push {
}
interface dropDownMenu {
	/**
	 * `打开菜单`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `data` :Array : （必填项）模块九宫格按钮图标和名称
	 *
	 * `textUnselectedColor` :boolean : （可选项）设置默认字体颜色代码
	 *
	 * `textSelectedColor` :string : （可选项）设置选中字体颜色代码
	 *
	 * `dropDownCheckedColor` :string : （可选项）设置列表选中后右侧颜色代码(仅iOS有效)
	 *
	 * `dropDownChecked` :string : （可选项）设置列表选中后右侧图标资源路径(支持fs:// widget://)（仅Android有效）
	 *
	 * `dropDownSelectedIcon` :string : （可选项）设置顶部列表选中后图标资源路径(支持fs:// widget://)
	 *
	 * `dropDownUnselectedIcon` :string : （可选项）设置顶部列表未选中图标资源路径(支持fs:// widget://)
	 */
	openMenu(params:dropDownMenu_openMenu_Params, callback?: (ret:JSON) => void):void

	/** 隐藏菜单*/ 
	hideMenu(callback?: (ret:JSON) => void):void

	/** 显示菜单*/ 
	showMenu():void

	/** 关闭菜单*/ 
	closeMenu(callback?: (ret:JSON) => void):void

}
interface dropDownMenu_openMenu_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）模块九宫格按钮图标和名称*/ 
	data:Array,

	/**（可选项）设置默认字体颜色代码*/ 
	textUnselectedColor?:boolean,

	/**（可选项）设置选中字体颜色代码*/ 
	textSelectedColor?:string,

	/**（可选项）设置列表选中后右侧颜色代码(仅iOS有效)*/ 
	dropDownCheckedColor?:string,

	/**（可选项）设置列表选中后右侧图标资源路径(支持fs:// widget://)（仅Android有效）*/ 
	dropDownChecked?:string,

	/**（可选项）设置顶部列表选中后图标资源路径(支持fs:// widget://)*/ 
	dropDownSelectedIcon?:string,

	/**（可选项）设置顶部列表未选中图标资源路径(支持fs:// widget://)*/ 
	dropDownUnselectedIcon?:string,

}

interface NVNavigationBar {
	/**
	 * `打开`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : 模块样式配置
	 *
	 * `items` :Array<JSON> : 按钮项数据
	 *
	 * `selectedIndex` :number : （可选项）被选中的导航项的下标，不传表示不选中任何 item
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 *
	 * `id` :string : 导航条的id
	 */
	open(params:NVNavigationBar_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭`
	 * ========params==========
	 *
	 * `id` :string : 导航条的id
	 */
	close(params:NVNavigationBar_close_Params):void

	/**
	 * `隐藏`
	 * ========params==========
	 *
	 * `id` :string : 导航条的id
	 *
	 * `animation` :boolean : （可选项）显示是否添加动画（淡入淡出的动画）
	 *
	 * `orientation` :string : （可选项）动画的方向(top，bottom，left，right)
	 */
	hide(params:NVNavigationBar_hide_Params):void

	/**
	 * `显示`
	 * ========params==========
	 *
	 * `id` :null : null
	 *
	 * `animation` :boolean : （可选项）显示是否添加动画（淡入淡出的动画）
	 *
	 * `orientation` :string : （可选项）动画的方向(top，bottom，left，right)
	 */
	show(params:NVNavigationBar_show_Params):void

	/**
	 * `设置选中项`
	 * ========params==========
	 *
	 * `id` :string : 导航条的id
	 *
	 * `index` :number : 被选中的导航项的下标
	 *
	 * `selected` :boolean : 选中/取消选中
	 */
	setSelected(params:NVNavigationBar_setSelected_Params, callback?: (ret:JSON) => void):void

	/**
	 * `插入子项`
	 * ========params==========
	 *
	 * `id` :string : 导航条的id
	 *
	 * `index` :number : 插入的导航项的下标
	 *
	 * `item` :JSON : 按钮项数据
	 */
	insertItem(params:NVNavigationBar_insertItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除子项`
	 * ========params==========
	 *
	 * `id` :string : 导航条的id
	 *
	 * `index` :number : 要删除的导航项的下标
	 */
	deleteItem(params:NVNavigationBar_deleteItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新子项`
	 * ========params==========
	 *
	 * `id` :string : 导航条的id
	 *
	 * `index` :number : 更新的导航项的下标
	 *
	 * `item` :JSON : 按钮项数据
	 */
	updateItem(params:NVNavigationBar_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新所有子项`
	 * ========params==========
	 *
	 * `id` :string : 导航条的id
	 *
	 * `items` :Array<JSON> : 按钮项数据
	 */
	update(params:NVNavigationBar_update_Params, callback?: (ret:JSON) => void):void

}
interface NVNavigationBar_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**模块样式配置*/ 
	styles:JSON,

	/**按钮项数据*/ 
	items:Array<JSON>,

	/**（可选项）被选中的导航项的下标，不传表示不选中任何 item*/ 
	selectedIndex?:number,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed:boolean,

	/**导航条的id*/ 
	id:string,

}

interface NVNavigationBar_close_Params {
	/**导航条的id*/ 
	id:string,

}

interface NVNavigationBar_hide_Params {
	/**导航条的id*/ 
	id:string,

	/**（可选项）显示是否添加动画（淡入淡出的动画）*/ 
	animation?:boolean,

	/**（可选项）动画的方向(top，bottom，left，right)*/ 
	orientation?:string,

}

interface NVNavigationBar_show_Params {
	/**null*/ 
	id:null,

	/**（可选项）显示是否添加动画（淡入淡出的动画）*/ 
	animation?:boolean,

	/**（可选项）动画的方向(top，bottom，left，right)*/ 
	orientation?:string,

}

interface NVNavigationBar_setSelected_Params {
	/**导航条的id*/ 
	id:string,

	/**被选中的导航项的下标*/ 
	index:number,

	/**选中/取消选中*/ 
	selected:boolean,

}

interface NVNavigationBar_insertItem_Params {
	/**导航条的id*/ 
	id:string,

	/**插入的导航项的下标*/ 
	index:number,

	/**按钮项数据*/ 
	item:JSON,

}

interface NVNavigationBar_deleteItem_Params {
	/**导航条的id*/ 
	id:string,

	/**要删除的导航项的下标*/ 
	index:number,

}

interface NVNavigationBar_updateItem_Params {
	/**导航条的id*/ 
	id:string,

	/**更新的导航项的下标*/ 
	index:number,

	/**按钮项数据*/ 
	item:JSON,

}

interface NVNavigationBar_update_Params {
	/**导航条的id*/ 
	id:string,

	/**按钮项数据*/ 
	items:Array<JSON>,

}

interface scrollRotation {
}
interface arcMenu {
	/**
	 * `控件显示在最上层（仅android支持）`
	 * ========params==========
	 *
	 * `id` :number : 要操作的控件id
	 */
	bringToFront(params:arcMenu_bringToFront_Params):void

}
interface arcMenu_bringToFront_Params {
	/**要操作的控件id*/ 
	id:number,

}

interface circularMenu {
}
interface tuberBar {
}
interface sideMenu {
	/**
	 * `隐藏菜单`
	 * ========params==========
	 *
	 * `id` :number : 要操作的菜单的id，不可为空
	 */
	hidden(params:sideMenu_hidden_Params):void

	/** 显示菜单*/ 
	show():void

	/** 关闭菜单*/ 
	close():void

}
interface sideMenu_hidden_Params {
	/**要操作的菜单的id，不可为空*/ 
	id:number,

}

interface navigationMenu {
}
interface navigationBar {
}
interface actionButton {
}
interface tabBarMenu {
}
interface bubbleMenu {
	/**
	 * `打开菜单`
	 * ========params==========
	 *
	 * `style` :JSON : （可选项）气泡样式设置
	 *
	 * `centerX` :number : （可选项）气泡菜单箭头点的坐标
	 *
	 * `centerY` :number : （可选项）气泡菜单箭头点的坐标
	 *
	 * `btnArray` :Array : 按钮的信息组成的数组
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:bubbleMenu_open_Params, callback?: (ret:JSON) => void):void

	/** 隐藏菜单，只是隐藏，还在内存里没有清除*/ 
	hide():void

	/** 显示菜单*/ 
	show():void

	/** 关闭菜单，意味着从内存里清除*/ 
	close():void

}
interface bubbleMenu_open_Params {
	/**（可选项）气泡样式设置*/ 
	style?:JSON,

	/**（可选项）气泡菜单箭头点的坐标*/ 
	centerX?:number,

	/**（可选项）气泡菜单箭头点的坐标*/ 
	centerY?:number,

	/**按钮的信息组成的数组*/ 
	btnArray:Array,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface NVTabBarAnimation {
	/**
	 * `打开模块并显示`
	 * ========params==========
	 *
	 * `styles` :JSON : 模块样式配置
	 *
	 * `items` :Array : 导航条子项配置，子项条数不能超过 5
	 *
	 * `selectedIndex` :number : （可选项）默认值为选中状态的按钮的索引，若不传则默认无选中项
	 */
	open(params:NVTabBarAnimation_open_Params, callback?: (ret:JSON) => void):void

	/** 隐藏模块（并没有从内存清除）*/ 
	hide():void

	/** 显示已隐藏的模块*/ 
	show():void

	/** 关闭模块，并从内存里清除*/ 
	close():void

	/**
	 * `设置按钮右上角的徽章`
	 * ========params==========
	 *
	 * `index` :number : null
	 *
	 * `badge` :string : null
	 */
	setBadge(params:NVTabBarAnimation_setBadge_Params):void

	/**
	 * `设置按钮 item 的属性`
	 * ========params==========
	 *
	 * `index` :number : （可选项）要设置的子项的索引
	 *
	 * `selected` :boolean : （可选项）要设置的子项按钮的选中状态，true：选中状态|false：非选中状态
	 *
	 * `icon` :JSON : （可选项）要设置的子项按钮的 icon 静态图标，若不传则显示原值
	 *
	 * `animationIcons` :JSON : （可选项）要设置的子项按钮的 icon 动态图标，若不传则显示原值
	 *
	 * `title` :JSON : （可选项）子项标题设置，若不传则显示原值
	 */
	setItemAttr(params:NVTabBarAnimation_setItemAttr_Params):void

	/** 将已经打开的模块置为最上层显示*/ 
	bringToFront():void

}
interface NVTabBarAnimation_open_Params {
	/**模块样式配置*/ 
	styles:JSON,

	/**导航条子项配置，子项条数不能超过 5*/ 
	items:Array,

	/**（可选项）默认值为选中状态的按钮的索引，若不传则默认无选中项*/ 
	selectedIndex?:number,

}

interface NVTabBarAnimation_setBadge_Params {
	/**null*/ 
	index:number,

	/**null*/ 
	badge:string,

}

interface NVTabBarAnimation_setItemAttr_Params {
	/**（可选项）要设置的子项的索引*/ 
	index?:number,

	/**（可选项）要设置的子项按钮的选中状态，true：选中状态|false：非选中状态*/ 
	selected?:boolean,

	/**（可选项）要设置的子项按钮的 icon 静态图标，若不传则显示原值*/ 
	icon?:JSON,

	/**（可选项）要设置的子项按钮的 icon 动态图标，若不传则显示原值*/ 
	animationIcons?:JSON,

	/**（可选项）子项标题设置，若不传则显示原值*/ 
	title?:JSON,

}

interface MNActionButton {
}
interface MNRotationMenu {
	/** 清除缓存到本地的网络图片，**本接口只清除本模块缓存的数据，若要清除本app缓存的所有数据这调用api.clearCache***/ 
	clearCache():void

}
interface MNPopups {
}
interface stackMenu {
}
interface MNNavigationMenu {
}
interface MNStack {
}
interface NVTabBar {
	/**
	 * `打开模块并显示`
	 * ========params==========
	 *
	 * `styles` :JSON : 模块样式配置
	 *
	 * `items` :Array : 导航条子项配置，子项条数不能超过 5
	 *
	 * `cursorInOptions` :JSON : 选中项的游标(如当前激活状态的item底部显示5pt高度的色块) 若不传，该字段无效
	 *
	 * `selectedIndex` :number : （可选项）默认值为选中状态的按钮的索引，若不传则默认无选中项
	 *
	 * `enableDoubleClick` :boolean : 使能双击事件，默认：false
	 *
	 * `enableLongPressClick` :boolean : 是否使用长按事件，默认：false
	 */
	open(params:NVTabBar_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `隐藏模块（并没有从内存清除）`
	 * ========params==========
	 *
	 * `animation` :boolean : （可选项）显示是否添加动画（淡入淡出的动画）
	 */
	hide(params:NVTabBar_hide_Params):void

	/**
	 * `显示已隐藏的模块`
	 * ========params==========
	 *
	 * `animation` :boolean : （可选项）显示是否添加动画（淡入淡出的动画）
	 */
	show(params:NVTabBar_show_Params):void

	/** 关闭模块，并从内存里清除*/ 
	close():void

	/**
	 * `设置按钮右上角的徽章`
	 * ========params==========
	 *
	 * `index` :number : null
	 *
	 * `badge` :string : null
	 *
	 * `horizentalPadding` :string : null
	 */
	setBadge(params:NVTabBar_setBadge_Params):void

	/**
	 * `设置按钮的选中状态`
	 * ========params==========
	 *
	 * `index` :number : （可选项）要设置的子项的索引
	 *
	 * `selected` :boolean : （可选项）要设置的子项按钮的状态
	 *
	 * `icons` :Array : （可选项）设置子按钮的多图联播效果（gif图效果），若不传本参数则默认显示open接口内配置的图片
	 *
	 * `interval` :number : （可选项）动画帧之间的时间间隔（单位:毫秒 ms）
	 *
	 * `animatedRepetitions` :number : （可选项）设置动画重复次数（android仅支持循环一次和无线循环，即该参数只对1和0有效）
	 */
	setSelect(params:NVTabBar_setSelect_Params):void

	/** 将已经打开的模块置为最上层显示*/ 
	bringToFront():void

}
interface NVTabBar_open_Params {
	/**模块样式配置*/ 
	styles:JSON,

	/**导航条子项配置，子项条数不能超过 5*/ 
	items:Array,

	/**选中项的游标(如当前激活状态的item底部显示5pt高度的色块) 若不传，该字段无效*/ 
	cursorInOptions:JSON,

	/**（可选项）默认值为选中状态的按钮的索引，若不传则默认无选中项*/ 
	selectedIndex?:number,

	/**使能双击事件，默认：false*/ 
	enableDoubleClick:boolean,

	/**是否使用长按事件，默认：false*/ 
	enableLongPressClick:boolean,

}

interface NVTabBar_hide_Params {
	/**（可选项）显示是否添加动画（淡入淡出的动画）*/ 
	animation?:boolean,

}

interface NVTabBar_show_Params {
	/**（可选项）显示是否添加动画（淡入淡出的动画）*/ 
	animation?:boolean,

}

interface NVTabBar_setBadge_Params {
	/**null*/ 
	index:number,

	/**null*/ 
	badge:string,

	/**null*/ 
	horizentalPadding:string,

}

interface NVTabBar_setSelect_Params {
	/**（可选项）要设置的子项的索引*/ 
	index?:number,

	/**（可选项）要设置的子项按钮的状态*/ 
	selected?:boolean,

	/**（可选项）设置子按钮的多图联播效果（gif图效果），若不传本参数则默认显示open接口内配置的图片*/ 
	icons?:Array,

	/**（可选项）动画帧之间的时间间隔（单位:毫秒 ms）*/ 
	interval?:number,

	/**（可选项）设置动画重复次数（android仅支持循环一次和无线循环，即该参数只对1和0有效）*/ 
	animatedRepetitions?:number,

}

interface pullMenu {
}
interface tabBar {
}
interface columnBar {
	/**
	 * `打开栏目导航`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）浏览器窗口的位置和大小，设置margin后，在不同手机上面会保持与父页面的各方向边距一致，而中间区域会自动扩充。建议使用margin布局，可以完美适配带smartBar的手机。
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `allData` :Array : （必填项）导航条上所有选择项的集合;(数组内菜单名建议2-4个字为最佳效果)
	 *
	 * `showData` :Array : （必填项）导航条上显示的选择项的集合(数组内菜单名建议2-4个字为最佳效果)
	 *
	 * `maxShow` :any : （可选项）导航条上最多显示的选择项的个数.
	 *
	 * `isExpand` :any : （可选项）是否支持可扩展的功能,(0:不开启扩展，1:开启扩展).
	 *
	 * `showedLable` :boolean : （可选项）扩展栏目的已展示栏目标题
	 *
	 * `addLable` :boolean : （可选项）扩展栏目的可添加栏目标题
	 */
	open(params:columnBar_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置当前选中项`
	 * ========params==========
	 *
	 * `index` :any : （可选项）当前选中项的序号值。（备注：改值需要通过open接口返回的shows数组位置索引进行控制）。
	 */
	setCurrentItem(params:columnBar_setCurrentItem_Params, callback?: (ret:JSON) => void):void

	/** 隐藏导航菜单*/ 
	hide(callback?: (ret:JSON) => void):void

	/** 显示导航菜单*/ 
	show(callback?: (ret:JSON) => void):void

	/** 监听栏目item被点击*/ 
	onItemClick():void

	/** 监听栏目显示数据发生变化*/ 
	onDataChange():void

	/** 在扩展界面添加item时超过open设置的最大值数时回调*/ 
	outNumberMax():void

	/** 关闭导航菜单*/ 
	close(callback?: (ret:JSON) => void):void

}
interface columnBar_open_Params {
	/**（可选项）浏览器窗口的位置和大小，设置margin后，在不同手机上面会保持与父页面的各方向边距一致，而中间区域会自动扩充。建议使用margin布局，可以完美适配带smartBar的手机。*/ 
	rect?:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）导航条上所有选择项的集合;(数组内菜单名建议2-4个字为最佳效果)*/ 
	allData:Array,

	/**（必填项）导航条上显示的选择项的集合(数组内菜单名建议2-4个字为最佳效果)*/ 
	showData:Array,

	/**（可选项）导航条上最多显示的选择项的个数.*/ 
	maxShow?:any,

	/**（可选项）是否支持可扩展的功能,(0:不开启扩展，1:开启扩展).*/ 
	isExpand?:any,

	/**（可选项）扩展栏目的已展示栏目标题*/ 
	showedLable?:boolean,

	/**（可选项）扩展栏目的可添加栏目标题*/ 
	addLable?:boolean,

}

interface columnBar_setCurrentItem_Params {
	/**（可选项）当前选中项的序号值。（备注：改值需要通过open接口返回的shows数组位置索引进行控制）。*/ 
	index?:any,

}

interface gesturePassword {
	/** 打开模块，此模块为任意绘制，开发时按照需求进行调用，本接口只返回用户输入的密码*/ 
	open(callback?: (ret:JSON) => void):void

	/**
	 * `打开设置密码界面，根据要求进行相应提示。`
	 * ========params==========
	 *
	 * `rect` :JSON : 模块的位置及尺寸
	 *
	 * `bgColor` :string : （必须项）模块背景颜色，支持十六进制颜色系，如：#FFFFFF
	 *
	 * `color` :string : （必须项）元素触摸下的颜色，支持十六进制颜色系，如：#FFFFFF
	 *
	 * `unTouchColor` :string : （必须项）元素常态下的颜色，支持十六进制颜色系，如：#FFFFFF
	 *
	 * `saveInLocal` :number : 是否本机存储密码
	 *
	 * `pointDistance` :number : 每个触点元素之间的间隔
	 *
	 * `columns` :number : 每行（列）显示几个触摸圈元素
	 *
	 * `minLength` :number : 密码组成的元素最小数量
	 *
	 * `fixedOn` :string : 模块依附于当前 window
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空
	 */
	openSetPassword(params:gesturePassword_openSetPassword_Params, callback?: (ret:JSON) => void):void

	/**
	 * `验证密码，可以验证之前保存在本地密码，也可以验证指定密码。`
	 * ========params==========
	 *
	 * `rect` :JSON : 模块的位置及尺寸
	 *
	 * `bgColor` :string : （必须项）模块背景颜色，支持十六进制颜色系，如：#FFFFFF
	 *
	 * `color` :string : （必须项）元素触摸下的颜色，支持十六进制颜色系，如：#FFFFFF
	 *
	 * `unTouchColor` :string : （必须项）元素常态下的颜色，支持十六进制颜色系，如：#FFFFFF
	 *
	 * `pointDistance` :number : 每个触点元素之间的间隔
	 *
	 * `columns` :number : 每行（列）显示几个触摸圈元素
	 *
	 * `mode` :number : 1表示和本机保存的密码进行匹对，2表示和指定的密码匹对
	 *
	 * `comparePassword` :string : 指定匹对的密码
	 *
	 * `fixedOn` :string : 模块依附于当前 window
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空
	 */
	openCheckPassword(params:gesturePassword_openCheckPassword_Params, callback?: (ret:JSON) => void):void

	/** 关闭模块，并且释放。*/ 
	close(callback?: (ret:JSON) => void):void

	/**
	 * `设置当前输入密码的所有元素的颜色。`
	 * ========params==========
	 *
	 * `color` :string : （必须项）元素以及指引线颜色，支持十六进制颜色系，如：#FFFFFF
	 */
	setTempColor(params:gesturePassword_setTempColor_Params, callback?: (ret:JSON) => void):void

	/** 本机是否已经设置了密码。*/ 
	isSettedPassword(callback?: (ret:JSON) => void):void

	/** 清空本地存储的密码。*/ 
	clearLocalPwd(callback?: (ret:JSON) => void):void

}
interface gesturePassword_openSetPassword_Params {
	/**模块的位置及尺寸*/ 
	rect:JSON,

	/**（必须项）模块背景颜色，支持十六进制颜色系，如：#FFFFFF*/ 
	bgColor:string,

	/**（必须项）元素触摸下的颜色，支持十六进制颜色系，如：#FFFFFF*/ 
	color:string,

	/**（必须项）元素常态下的颜色，支持十六进制颜色系，如：#FFFFFF*/ 
	unTouchColor:string,

	/**是否本机存储密码*/ 
	saveInLocal:number,

	/**每个触点元素之间的间隔*/ 
	pointDistance:number,

	/**每行（列）显示几个触摸圈元素*/ 
	columns:number,

	/**密码组成的元素最小数量*/ 
	minLength:number,

	/**模块依附于当前 window*/ 
	fixedOn:string,

	/**是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空*/ 
	fixed:boolean,

}

interface gesturePassword_openCheckPassword_Params {
	/**模块的位置及尺寸*/ 
	rect:JSON,

	/**（必须项）模块背景颜色，支持十六进制颜色系，如：#FFFFFF*/ 
	bgColor:string,

	/**（必须项）元素触摸下的颜色，支持十六进制颜色系，如：#FFFFFF*/ 
	color:string,

	/**（必须项）元素常态下的颜色，支持十六进制颜色系，如：#FFFFFF*/ 
	unTouchColor:string,

	/**每个触点元素之间的间隔*/ 
	pointDistance:number,

	/**每行（列）显示几个触摸圈元素*/ 
	columns:number,

	/**1表示和本机保存的密码进行匹对，2表示和指定的密码匹对*/ 
	mode:number,

	/**指定匹对的密码*/ 
	comparePassword:string,

	/**模块依附于当前 window*/ 
	fixedOn:string,

	/**是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空*/ 
	fixed:boolean,

}

interface gesturePassword_setTempColor_Params {
	/**（必须项）元素以及指引线颜色，支持十六进制颜色系，如：#FFFFFF*/ 
	color:string,

}

interface UIPullRefreshDrop {
	/** 配置下拉刷新样式*/ 
	setCustomRefreshHeaderInfo():void

	/** 手动开始下拉刷新的加载状态，**下拉刷新状态亦可通过用户手势下拉到阈值自动触发***/ 
	refreshHeaderLoading():void

	/** 手动停止下拉刷新的加载状态*/ 
	refreshHeaderLoadDone():void

}
interface doubleBarChart {
	/**
	 * `打开柱状图视图`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `yAxis` :JSON : 双柱状图的 Y 轴配置
	 *
	 * `data` :Array : 双柱状图关键结点的数据
	 *
	 * `styles` :any : （可选项）模块视图内元素样式配置
	 *
	 * `showData` :boolean : （可选项）是否显示每条柱子上的数据（数据样式通y轴标注字体样式）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:doubleBarChart_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重新加载数据`
	 * ========params==========
	 *
	 * `id` :number : 要刷新的模块的 id
	 *
	 * `type` :string : 更新数据的方式
	 *
	 * `data` :Array : 双柱状图关键结点的数据
	 */
	reloadData(params:doubleBarChart_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭柱状图（从内存里清除）`
	 * ========params==========
	 *
	 * `id` :number : 要关闭的模块的 id
	 */
	close(params:doubleBarChart_close_Params):void

	/**
	 * `隐藏柱状图视图，并未从内存里清除，可调用 show 接口显示该视图`
	 * ========params==========
	 *
	 * `id` :number : 要隐藏的模块的 id
	 */
	hide(params:doubleBarChart_hide_Params):void

	/**
	 * `显示已隐藏的柱状图视图`
	 * ========params==========
	 *
	 * `id` :number : 要显示的模块的 id
	 */
	show(params:doubleBarChart_show_Params):void

	/**
	 * `滚动到指定索引的条目，`
	 * ========params==========
	 *
	 * `id` :number : 模块的 id，用于区分模块的多个实例
	 *
	 * `index` :number : （可选项）指定的条目的索引，不可大于总条目数减去每屏显示个数，从0开始
	 *
	 * `animation` :boolean : （可选项）滚动时是否带有动画效果
	 */
	scrollTo(params:doubleBarChart_scrollTo_Params):void

}
interface doubleBarChart_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**双柱状图的 Y 轴配置*/ 
	yAxis:JSON,

	/**双柱状图关键结点的数据*/ 
	data:Array,

	/**（可选项）模块视图内元素样式配置*/ 
	styles?:any,

	/**（可选项）是否显示每条柱子上的数据（数据样式通y轴标注字体样式）*/ 
	showData?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface doubleBarChart_reloadData_Params {
	/**要刷新的模块的 id*/ 
	id:number,

	/**更新数据的方式*/ 
	type:string,

	/**双柱状图关键结点的数据*/ 
	data:Array,

}

interface doubleBarChart_close_Params {
	/**要关闭的模块的 id*/ 
	id:number,

}

interface doubleBarChart_hide_Params {
	/**要隐藏的模块的 id*/ 
	id:number,

}

interface doubleBarChart_show_Params {
	/**要显示的模块的 id*/ 
	id:number,

}

interface doubleBarChart_scrollTo_Params {
	/**模块的 id，用于区分模块的多个实例*/ 
	id:number,

	/**（可选项）指定的条目的索引，不可大于总条目数减去每屏显示个数，从0开始*/ 
	index?:number,

	/**（可选项）滚动时是否带有动画效果*/ 
	animation?:boolean,

}

interface UICircleSlider {
	/**
	 * `打开 UICircleSlider`
	 * ========params==========
	 *
	 * `position` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : （可选项）模块的样式配置
	 *
	 * `anticlockwise` :boolean : （可选项）是否为逆时针
	 *
	 * `anchorLowestPoint` :boolean : （可选项）铆点（起点、对照点）是否为最低点（六点钟位置），否则为最高点（十二点钟位置）
	 *
	 * `startAngle` :number : （可选项）弧形选择器起点针对铆点的角度，配合
	 *
	 * `duringAngle` :number : （可选项）弧形选择器大小（起点到终点的角度）
	 *
	 * `value` :number : （可选项）默认值
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:UICircleSlider_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭模块*/ 
	close():void

	/** 显示模块*/ 
	show():void

	/** 隐藏模块*/ 
	hide():void

	/** 获取 UICircleSlider 的值*/ 
	getValue():void

	/**
	 * `设置 UICircleSlider 的值`
	 * ========params==========
	 *
	 * `value` :number : 要设置的值，
	 */
	setValue(params:UICircleSlider_setValue_Params):void

	/**
	 * `设置轨道的颜色`
	 * ========params==========
	 *
	 * `color` :string : 要设置的颜色，支持rgb、rgba、#
	 */
	setTrackColor(params:UICircleSlider_setTrackColor_Params):void

	/**
	 * `设置划过的轨道的颜色`
	 * ========params==========
	 *
	 * `color` :string : 要设置的颜色，支持rgb、rgba、#
	 */
	setTintColor(params:UICircleSlider_setTintColor_Params):void

	/**
	 * `设置滑块的颜色`
	 * ========params==========
	 *
	 * `color` :string : 要设置的颜色，支持rgb、rgba、#
	 */
	setThumbColor(params:UICircleSlider_setThumbColor_Params):void

	/**
	 * `设置轨道的颜色`
	 * ========params==========
	 *
	 * `img` :string : 要设置的滑块图片路径，要求本地路径（widget://、fs://）
	 */
	setThumbImg(params:UICircleSlider_setThumbImg_Params):void

	/**
	 * `打开 UICircleSlider`
	 * ========params==========
	 *
	 * `name` :string : （可选项）监听事件名称
	 */
	addEventListener(params:UICircleSlider_addEventListener_Params, callback?: (ret:JSON) => void):void

}
interface UICircleSlider_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	position?:JSON,

	/**（可选项）模块的样式配置*/ 
	styles?:JSON,

	/**（可选项）是否为逆时针*/ 
	anticlockwise?:boolean,

	/**（可选项）铆点（起点、对照点）是否为最低点（六点钟位置），否则为最高点（十二点钟位置）*/ 
	anchorLowestPoint?:boolean,

	/**（可选项）弧形选择器起点针对铆点的角度，配合*/ 
	startAngle?:number,

	/**（可选项）弧形选择器大小（起点到终点的角度）*/ 
	duringAngle?:number,

	/**（可选项）默认值*/ 
	value?:number,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface UICircleSlider_setValue_Params {
	/**要设置的值，*/ 
	value:number,

}

interface UICircleSlider_setTrackColor_Params {
	/**要设置的颜色，支持rgb、rgba、#*/ 
	color:string,

}

interface UICircleSlider_setTintColor_Params {
	/**要设置的颜色，支持rgb、rgba、#*/ 
	color:string,

}

interface UICircleSlider_setThumbColor_Params {
	/**要设置的颜色，支持rgb、rgba、#*/ 
	color:string,

}

interface UICircleSlider_setThumbImg_Params {
	/**要设置的滑块图片路径，要求本地路径（widget://、fs://）*/ 
	img:string,

}

interface UICircleSlider_addEventListener_Params {
	/**（可选项）监听事件名称*/ 
	name?:string,

}

interface customSelector {
}
interface photoNews_tt {
	/** 关闭模块*/ 
	close():void

	/** 关闭模块*/ 
	clearCache():void

}
interface UIPullRefresh {
	/** 配置下拉刷新样式*/ 
	setCustomRefreshHeaderInfo():void

	/** 手动开始下拉刷新的加载状态，**下拉刷新状态亦可通过用户下拉到阈值自动触发***/ 
	refreshHeaderLoading():void

	/** 手动停止下拉刷新的加载状态*/ 
	refreshHeaderLoadDone():void

}
interface suspensionWindow {
	/** 初始化*/ 
	init():void

	/** - 类型：JSON对象*/ 
	getAppOps():void

	/** 创建一个悬浮窗口*/ 
	createWindow(callback?: (ret:JSON) => void):void

	/** 显示悬浮窗*/ 
	show():void

	/** 更新悬浮窗*/ 
	updateWindow():void

}
interface dtCarKeyBoard {
	/**
	 * `打开 dtCarKeyBoard 模块，该模块依附于keywindow之上，打开后，点击键盘上方空白处，会隐藏键盘。`
	 * ========params==========
	 *
	 * `defaultPlate` :string : （可选项）默认车牌号码，长度在0-8之间，否则不生效，如果长度等于8，则是新能源车牌号
	 *
	 * `defaultIndex` :any : （可选项）键盘输入的初始位置索引，该数据范围：新能源在0-7之间，否则在0-6之间，该范围以外的数将会被强制更改为0
	 *
	 * `isEnergy` :boolean : （可选项）是否输入新能源车牌号
	 *
	 * `showInput` :boolean : （可选项）是否在键盘上显示输入栏，输入栏可以动态切换新能源
	 *
	 * `tintColor` :string : （可选项）键盘上的输入栏的相对色调，如果showInput=false，则不生效
	 *
	 * `autoHide` :boolean : （可选项）车牌号输入完成后，是否自动检测车牌号的正确性，如果车牌合法，则自动隐藏键盘
	 */
	open(params:dtCarKeyBoard_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭键盘*/ 
	close():void

	/** 显示键盘*/ 
	show():void

	/** 隐藏键盘*/ 
	hide():void

}
interface dtCarKeyBoard_open_Params {
	/**（可选项）默认车牌号码，长度在0-8之间，否则不生效，如果长度等于8，则是新能源车牌号*/ 
	defaultPlate?:string,

	/**（可选项）键盘输入的初始位置索引，该数据范围：新能源在0-7之间，否则在0-6之间，该范围以外的数将会被强制更改为0*/ 
	defaultIndex?:any,

	/**（可选项）是否输入新能源车牌号*/ 
	isEnergy?:boolean,

	/**（可选项）是否在键盘上显示输入栏，输入栏可以动态切换新能源*/ 
	showInput?:boolean,

	/**（可选项）键盘上的输入栏的相对色调，如果showInput=false，则不生效*/ 
	tintColor?:string,

	/**（可选项）车牌号输入完成后，是否自动检测车牌号的正确性，如果车牌合法，则自动隐藏键盘*/ 
	autoHide?:boolean,

}

interface miCalendar {
	/**
	 * `打开日历`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `currentDateTitle` :JSON : (可选项)当前日期的位置和尺寸
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `specialDate` :Array : （可选项）需要标记的特殊假期数组
	 *
	 * `isLunarCalendar` :boolean : （可选项）是否显示农历
	 *
	 * `scrollEnabled` :boolean : （可选项）是否允许左右滑动切换
	 *
	 * `isToday` :boolean : （可选项）日期选中后，设备当前日期样式是否消失，设置为true后，日期选中后，设备当前日期样式消失，选中设备当前日期后，样式显示为选中日期样式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:miCalendar_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置特殊日期`
	 * ========params==========
	 *
	 * `specialDates` :Array : 需要标记的特殊假期数组，格式为：yyyy-MM-dd
	 */
	setSpecialDates(params:miCalendar_setSpecialDates_Params):void

	/**
	 * `取消已设置的特殊假期状态`
	 * ========params==========
	 *
	 * `specialDates` :Array : 需要取消的特殊假期组成的数组，格式为：yyyy-MM-dd
	 */
	cancelSpecialDates(params:miCalendar_cancelSpecialDates_Params):void

	/** 关闭日历*/ 
	close():void

	/** 显示日历*/ 
	show():void

	/** 隐藏日历*/ 
	hide():void

	/** 显示下个月*/ 
	nextMonth():void

	/** 显示上个月*/ 
	prevMonth():void

	/**
	 * `设置选中日期(可通过此接口实现翻页效果)`
	 * ========params==========
	 *
	 * `date` :string : （可选项）选中日期，格式为：yyyy-MM-dd
	 *
	 * `ignoreSelected` :boolean : （可选项）选中日期是否忽略选中日期样式（open -> styles -> date -> selectedColor、selectedBg）
	 */
	setDate(params:miCalendar_setDate_Params, callback?: (ret:JSON) => void):void

}
interface miCalendar_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**(可选项)当前日期的位置和尺寸*/ 
	currentDateTitle?:JSON,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）需要标记的特殊假期数组*/ 
	specialDate?:Array,

	/**（可选项）是否显示农历*/ 
	isLunarCalendar?:boolean,

	/**（可选项）是否允许左右滑动切换*/ 
	scrollEnabled?:boolean,

	/**（可选项）日期选中后，设备当前日期样式是否消失，设置为true后，日期选中后，设备当前日期样式消失，选中设备当前日期后，样式显示为选中日期样式*/ 
	isToday?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface miCalendar_setSpecialDates_Params {
	/**需要标记的特殊假期数组，格式为：yyyy-MM-dd*/ 
	specialDates:Array,

}

interface miCalendar_cancelSpecialDates_Params {
	/**需要取消的特殊假期组成的数组，格式为：yyyy-MM-dd*/ 
	specialDates:Array,

}

interface miCalendar_setDate_Params {
	/**（可选项）选中日期，格式为：yyyy-MM-dd*/ 
	date?:string,

	/**（可选项）选中日期是否忽略选中日期样式（open -> styles -> date -> selectedColor、selectedBg）*/ 
	ignoreSelected?:boolean,

}

interface zjCartList {
	/**
	 * `打开并初始化 zjCartList 模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 列表的数据源
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数**
	 *
	 * `bounces` :boolean : （可选项）是否开启弹动，android 平台不支持本参数
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `showScrollBar` :boolean : （可选项）是否显示滚动条
	 */
	open(params:zjCartList_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭购物车列表模块*/ 
	close():void

	/** 显示购物车列表模块*/ 
	show():void

	/** 隐藏购物车列表模块*/ 
	hide():void

	/**
	 * `选中商品`
	 * ========params==========
	 *
	 * `item` :Array : （可选项）选中商品，如果不传递此参数则默认选中全部商品
	 */
	selectItem(params:zjCartList_selectItem_Params, callback?: (ret:JSON) => void):void

	/** 获取已选中的商品数据*/ 
	getSelectedItem():void

	/**
	 * `取消选中商品`
	 * ========params==========
	 *
	 * `item` :Array : （可选项）要取消选中的商品ID，如果不传递此参数则默认取消选中全部商品
	 */
	cancelSelectItem(params:zjCartList_cancelSelectItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新列表数据，刷新数据后之前的选中状态会被清空，需要重新设置选中`
	 * ========params==========
	 *
	 * `data` :Array : （可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件**
	 */
	reloadData(params:zjCartList_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置下拉刷新，**通过 reloadData 收起下拉刷新组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）下拉刷新区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textDown` :string : （可选项）下拉提示文字
	 *
	 * `textUp` :string : （可选项）松开提示文字
	 *
	 * `loadingText` :string : （可选项）提示文字
	 *
	 * `lastUpdateText` :string : （可选项）提示文字
	 *
	 * `showTime` :boolean : （可选项）是否显示刷新时间
	 */
	setRefreshHeader(params:zjCartList_setRefreshHeader_Params, callback?: (ret:JSON) => void):void

}
interface zjCartList_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表的数据源*/ 
	data:Array,

	/**（可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数***/ 
	rightBtns?:Array,

	/**（可选项）是否开启弹动，android 平台不支持本参数*/ 
	bounces?:boolean,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否显示滚动条*/ 
	showScrollBar?:boolean,

}

interface zjCartList_selectItem_Params {
	/**（可选项）选中商品，如果不传递此参数则默认选中全部商品*/ 
	item?:Array,

}

interface zjCartList_cancelSelectItem_Params {
	/**（可选项）要取消选中的商品ID，如果不传递此参数则默认取消选中全部商品*/ 
	item?:Array,

}

interface zjCartList_reloadData_Params {
	/**（可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件***/ 
	data?:Array,

}

interface zjCartList_setRefreshHeader_Params {
	/**下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）下拉刷新区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）下拉提示文字*/ 
	textDown?:string,

	/**（可选项）松开提示文字*/ 
	textUp?:string,

	/**（可选项）提示文字*/ 
	loadingText?:string,

	/**（可选项）提示文字*/ 
	lastUpdateText?:string,

	/**（可选项）是否显示刷新时间*/ 
	showTime?:boolean,

}

interface UIListMeeting {
	/**
	 * `打开 UIListMeeting 模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 列表的数据源，**开发者可以在本参数内自定义添加唯一的键值对信息（如：uid: '1001'），供 getIndex 使用**
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组，按钮从右往左排列。**注意：配置列表每项的通用按钮，用此参数；若配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数**
	 *
	 * `bounces` :boolean : （可选项）是否开启弹动，android 平台不支持本参数
	 *
	 * `styles` :JSON : （可选项）模块每项的样式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `showScrollBar` :boolean : （可选项）是否显示滚动条
	 */
	open(params:UIListMeeting_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重设 UIListMeeting 模块的位置和大小（rect）`
	 * ========params==========
	 *
	 * `id` :number : (可选项) 要重设的模块的 id,当id不传的时候就重设当前打开的模块。
	 *
	 * `rect` :JSON : 要重设的模块的位置及尺寸
	 */
	resetRect(params:UIListMeeting_resetRect_Params):void

	/**
	 * `关闭数据列表模块`
	 * ========params==========
	 *
	 * `id` :number : (可选项)要关闭的模块的 id ,当id不传的时候就关闭当前打开的模块。
	 */
	close(params:UIListMeeting_close_Params):void

	/**
	 * `显示 UIListMeeting 模块`
	 * ========params==========
	 *
	 * `id` :number : (可选项)要显示的模块的 id ,当id不传的时候就显示当前打开的模块。
	 */
	show(params:UIListMeeting_show_Params):void

	/**
	 * `隐藏 UIListMeeting 模块`
	 * ========params==========
	 *
	 * `id` :number : (可选项)要隐藏的模块的 id ,当id不传的时候就隐藏当前打开的模块。
	 */
	hide(params:UIListMeeting_hide_Params):void

	/**
	 * `根据开发者自定义的唯一标识（open 接口的 data 参数中自定义的唯一标识）查找列表项对应的数据`
	 * ========params==========
	 *
	 * `id` :number : (可选项)列表项对应的模块的 id ,当id不传的时候就设置当前打开的模块。
	 *
	 * `key` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key
	 *
	 * `value` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value
	 */
	getIndex(params:UIListMeeting_getIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据列表项的索引获取对应的数据`
	 * ========params==========
	 *
	 * `id` :number : (可选项)列表项的索引对应的模块的 id ,当id不传的时候就设置当前打开的模块。
	 *
	 * `index` :number : （可选项）列表项的索引
	 */
	getDataByIndex(params:UIListMeeting_getDataByIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置侧滑显示出来的按钮`
	 * ========params==========
	 *
	 * `id` :number : (可选项)列表项侧滑露出的按钮组的模块的 id,当id不传的时候就设置当前打开的模块。
	 *
	 * `index` :number : （可选项）列表项的索引
	 *
	 * `btns` :Array : （可选项）列表项侧滑露出的按钮组
	 */
	setSwipeBtns(params:UIListMeeting_setSwipeBtns_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `id` :number : (可选项)要刷新列表的模块的 id,当id不传的时候就刷新当前打开的模块。
	 *
	 * `data` :Array : （可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件**
	 */
	reloadData(params:UIListMeeting_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引删除某一条列表的数据`
	 * ========params==========
	 *
	 * `id` :number : (可选项)索引删除某一条列表的模块的 id,当id不传的时候就设置当前打开的模块。
	 *
	 * `index` :number : （可选项）数据列表的索引
	 */
	deleteItem(params:UIListMeeting_deleteItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引更新某一条列表的数据`
	 * ========params==========
	 *
	 * `id` :number : (可选项)根据索引更新某一条列表的模块的 id,当id不传的时候就设置当前打开的模块。
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	updateItem(params:UIListMeeting_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引向某一条列表插入数据`
	 * ========params==========
	 *
	 * `id` :number : (可选项)根据索引更新某一条列表的模块的 id,当id不传的时候就设置当前打开的模块。
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	insertItem(params:UIListMeeting_insertItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `data` :Array : 列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:UIListMeeting_appendData_Params, callback?: (ret:JSON) => void):void

	/** 获取当前列表的总数据量*/ 
	getCount(callback?: (ret:JSON) => void):void

	/**
	 * `设置下拉刷新，**通过 reloadData 收起下拉刷新组件**`
	 * ========params==========
	 *
	 * `id` :number : (可选项)要下拉刷新的模块的 id,当id不传的时候就设置当前打开的模块。
	 *
	 * `loadingImg` :string : 下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）下拉刷新区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textDown` :string : （可选项）下拉提示文字
	 *
	 * `textUp` :string : （可选项）松开提示文字
	 *
	 * `showTime` :boolean : （可选项）是否显示刷新时间
	 */
	setRefreshHeader(params:UIListMeeting_setRefreshHeader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置上拉加载，**通过 appendData 收起上拉加载组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）上拉加载区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textUp` :string : （可选项）上拉提示文字
	 *
	 * `textDown` :string : （可选项）松开提示文字
	 *
	 * `showTime` :boolean : （可选项）是否显示刷新时间
	 */
	setRefreshFooter(params:UIListMeeting_setRefreshFooter_Params, callback?: (ret:JSON) => void):void

}
interface UIListMeeting_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表的数据源，**开发者可以在本参数内自定义添加唯一的键值对信息（如：uid: '1001'），供 getIndex 使用***/ 
	data:Array,

	/**（可选项）列表项向左滑动露出的按钮组，按钮从右往左排列。**注意：配置列表每项的通用按钮，用此参数；若配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数***/ 
	rightBtns?:Array,

	/**（可选项）是否开启弹动，android 平台不支持本参数*/ 
	bounces?:boolean,

	/**（可选项）模块每项的样式*/ 
	styles?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否显示滚动条*/ 
	showScrollBar?:boolean,

}

interface UIListMeeting_resetRect_Params {
	/**(可选项) 要重设的模块的 id,当id不传的时候就重设当前打开的模块。*/ 
	id?:number,

	/**要重设的模块的位置及尺寸*/ 
	rect:JSON,

}

interface UIListMeeting_close_Params {
	/**(可选项)要关闭的模块的 id ,当id不传的时候就关闭当前打开的模块。*/ 
	id?:number,

}

interface UIListMeeting_show_Params {
	/**(可选项)要显示的模块的 id ,当id不传的时候就显示当前打开的模块。*/ 
	id?:number,

}

interface UIListMeeting_hide_Params {
	/**(可选项)要隐藏的模块的 id ,当id不传的时候就隐藏当前打开的模块。*/ 
	id?:number,

}

interface UIListMeeting_getIndex_Params {
	/**(可选项)列表项对应的模块的 id ,当id不传的时候就设置当前打开的模块。*/ 
	id?:number,

	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key*/ 
	key:string,

	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value*/ 
	value:string,

}

interface UIListMeeting_getDataByIndex_Params {
	/**(可选项)列表项的索引对应的模块的 id ,当id不传的时候就设置当前打开的模块。*/ 
	id?:number,

	/**（可选项）列表项的索引*/ 
	index?:number,

}

interface UIListMeeting_setSwipeBtns_Params {
	/**(可选项)列表项侧滑露出的按钮组的模块的 id,当id不传的时候就设置当前打开的模块。*/ 
	id?:number,

	/**（可选项）列表项的索引*/ 
	index?:number,

	/**（可选项）列表项侧滑露出的按钮组*/ 
	btns?:Array,

}

interface UIListMeeting_reloadData_Params {
	/**(可选项)要刷新列表的模块的 id,当id不传的时候就刷新当前打开的模块。*/ 
	id?:number,

	/**（可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件***/ 
	data?:Array,

}

interface UIListMeeting_deleteItem_Params {
	/**(可选项)索引删除某一条列表的模块的 id,当id不传的时候就设置当前打开的模块。*/ 
	id?:number,

	/**（可选项）数据列表的索引*/ 
	index?:number,

}

interface UIListMeeting_updateItem_Params {
	/**(可选项)根据索引更新某一条列表的模块的 id,当id不传的时候就设置当前打开的模块。*/ 
	id?:number,

	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListMeeting_insertItem_Params {
	/**(可选项)根据索引更新某一条列表的模块的 id,当id不传的时候就设置当前打开的模块。*/ 
	id?:number,

	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListMeeting_appendData_Params {
	/**列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	data:Array,

}

interface UIListMeeting_setRefreshHeader_Params {
	/**(可选项)要下拉刷新的模块的 id,当id不传的时候就设置当前打开的模块。*/ 
	id?:number,

	/**下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）下拉刷新区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）下拉提示文字*/ 
	textDown?:string,

	/**（可选项）松开提示文字*/ 
	textUp?:string,

	/**（可选项）是否显示刷新时间*/ 
	showTime?:boolean,

}

interface UIListMeeting_setRefreshFooter_Params {
	/**上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）上拉加载区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）上拉提示文字*/ 
	textUp?:string,

	/**（可选项）松开提示文字*/ 
	textDown?:string,

	/**（可选项）是否显示刷新时间*/ 
	showTime?:boolean,

}

interface UIListView {
	/**
	 * `打开 UIListView 模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用**
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数**
	 *
	 * `bounces` :boolean : （可选项）是否开启弹动，android 平台不支持本参数
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `showScrollBar` :boolean : （可选项）是否显示滚动条
	 */
	open(params:UIListView_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭数据列表模块*/ 
	close():void

	/** 显示 UIListView 模块*/ 
	show():void

	/** 隐藏 UIListView 模块*/ 
	hide():void

	/**
	 * `设置列表的纵坐标和高度`
	 * ========params==========
	 *
	 * `y` :number : （可选项）模块的纵坐标
	 *
	 * `h` :number : （可选项）模块的高度
	 */
	setAttr(params:UIListView_setAttr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据开发者自定义的唯一标识（open 接口的 data 参数中自定义的唯一标识）查找列表项对应的数据`
	 * ========params==========
	 *
	 * `key` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key
	 *
	 * `value` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value
	 */
	getIndex(params:UIListView_getIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据列表项的索引获取对应的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 */
	getDataByIndex(params:UIListView_getDataByIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置侧滑显示出来的按钮`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 *
	 * `btns` :Array : （可选项）列表项侧滑露出的按钮组
	 */
	setSwipeBtns(params:UIListView_setSwipeBtns_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `data` :Array : （可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件**
	 */
	reloadData(params:UIListView_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引删除某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 */
	deleteItem(params:UIListView_deleteItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引更新某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	updateItem(params:UIListView_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引向某一条列表插入数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	insertItem(params:UIListView_insertItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `data` :Array : 列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:UIListView_appendData_Params, callback?: (ret:JSON) => void):void

	/** 获取当前列表的总数据量*/ 
	getCount():void

	/**
	 * `设置下拉刷新，**通过 reloadData 收起下拉刷新组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）下拉刷新区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textDown` :string : （可选项）下拉提示文字
	 *
	 * `textUp` :string : （可选项）松开提示文字
	 *
	 * `loadingText` :string : （可选项）提示文字
	 *
	 * `lastUpdateText` :string : （可选项）提示文字
	 *
	 * `showTime` :boolean : （可选项）是否显示刷新时间
	 */
	setRefreshHeader(params:UIListView_setRefreshHeader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置上拉加载，**通过 appendData 收起上拉加载组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）上拉加载区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textUp` :string : （可选项）上拉提示文字
	 *
	 * `textDown` :string : （可选项）松开提示文字
	 *
	 * `loadingText` :string : （可选项）提示文字
	 *
	 * `lastUpdateText` :string : （可选项）提示文字
	 *
	 * `showTime` :boolean : （可选项）是否显示刷新时间
	 */
	setRefreshFooter(params:UIListView_setRefreshFooter_Params, callback?: (ret:JSON) => void):void

}
interface UIListView_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用***/ 
	data:Array,

	/**（可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数***/ 
	rightBtns?:Array,

	/**（可选项）是否开启弹动，android 平台不支持本参数*/ 
	bounces?:boolean,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否显示滚动条*/ 
	showScrollBar?:boolean,

}

interface UIListView_setAttr_Params {
	/**（可选项）模块的纵坐标*/ 
	y?:number,

	/**（可选项）模块的高度*/ 
	h?:number,

}

interface UIListView_getIndex_Params {
	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key*/ 
	key:string,

	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value*/ 
	value:string,

}

interface UIListView_getDataByIndex_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

}

interface UIListView_setSwipeBtns_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

	/**（可选项）列表项侧滑露出的按钮组*/ 
	btns?:Array,

}

interface UIListView_reloadData_Params {
	/**（可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件***/ 
	data?:Array,

}

interface UIListView_deleteItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

}

interface UIListView_updateItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListView_insertItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListView_appendData_Params {
	/**列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	data:Array,

}

interface UIListView_setRefreshHeader_Params {
	/**下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）下拉刷新区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）下拉提示文字*/ 
	textDown?:string,

	/**（可选项）松开提示文字*/ 
	textUp?:string,

	/**（可选项）提示文字*/ 
	loadingText?:string,

	/**（可选项）提示文字*/ 
	lastUpdateText?:string,

	/**（可选项）是否显示刷新时间*/ 
	showTime?:boolean,

}

interface UIListView_setRefreshFooter_Params {
	/**上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）上拉加载区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）上拉提示文字*/ 
	textUp?:string,

	/**（可选项）松开提示文字*/ 
	textDown?:string,

	/**（可选项）提示文字*/ 
	loadingText?:string,

	/**（可选项）提示文字*/ 
	lastUpdateText?:string,

	/**（可选项）是否显示刷新时间*/ 
	showTime?:boolean,

}

interface slipList {
}
interface pbTouTiao {
	/**
	 * `打开图文信息模块`
	 * ========params==========
	 *
	 * `hidden` :JSON : 界面元素的隐藏显示属性配置
	 *
	 * `textStyles` :JSON : 图片描述样式配置
	 */
	open(params:pbTouTiao_open_Params, callback?: (ret:JSON) => void):void

	/** 清除缓存到本地的网络图片，**本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

}
interface pbTouTiao_open_Params {
	/**界面元素的隐藏显示属性配置*/ 
	hidden:JSON,

	/**图片描述样式配置*/ 
	textStyles:JSON,

}

interface compass {
	/**
	 * `打开控件`
	 * ========params==========
	 *
	 * `rect` :JSON : 控件位置
	 *
	 * `bgStyle` :JSON : （可选项）背景相关设置
	 *
	 * `angleTextStyle` :JSON : （可选项）外环角度文字设置，不设置则不显示
	 *
	 * `scaleStyle` :JSON : （可选项）刻度相关设置，不设置则不显示
	 *
	 * `nsStyle` :JSON : （可选项）南北相关设置，不设置则不显示
	 *
	 * `directionStyle` :JSON : （可选项）方向箭头设置，此方向固定指向北，不设置则不显示
	 *
	 * `pointStyle` :JSON : （可选项）与正前方角度指针，与正前方固定角度，不设置则不显示
	 *
	 * `centerTextStyle` :JSON : （可选项）中心加角度数显示，不设置则不显示
	 *
	 * `autoChange` :boolean : （可选项）是否自动跟随方向改变改变
	 *
	 * `interval` :boolean : （可选项）刷新频率，当autoChange为true时有效 单位ms
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动）
	 */
	open(params:compass_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始获取方向传感器数据，可单独调用`
	 * ========params==========
	 *
	 * `autoChange` :boolean : （可选项）如果有控件是否跟随数据同步
	 *
	 * `interval` :boolean : （可选项）控件刷新频率（非返回频率），当autoChange为true时有效 单位ms
	 */
	startSensor(params:compass_startSensor_Params, callback?: (ret:JSON) => void):void

	/** 停止传感器*/ 
	stopSensor(callback?: (ret:JSON) => void):void

	/**
	 * `控件设置方向，可配合autoChange为false时使用`
	 * ========params==========
	 *
	 * `angle` :number : （可选项）方向
	 */
	setDirectionAngle(params:compass_setDirectionAngle_Params):void

	/**
	 * `设置指针角度，需要已经支持指针显示`
	 * ========params==========
	 *
	 * `angle` :number : 指针角度
	 */
	setPointAngle(params:compass_setPointAngle_Params):void

	/** 显示*/ 
	show():void

	/** 隐藏*/ 
	hide():void

	/** 关闭*/ 
	close():void

}
interface compass_open_Params {
	/**控件位置*/ 
	rect:JSON,

	/**（可选项）背景相关设置*/ 
	bgStyle?:JSON,

	/**（可选项）外环角度文字设置，不设置则不显示*/ 
	angleTextStyle?:JSON,

	/**（可选项）刻度相关设置，不设置则不显示*/ 
	scaleStyle?:JSON,

	/**（可选项）南北相关设置，不设置则不显示*/ 
	nsStyle?:JSON,

	/**（可选项）方向箭头设置，此方向固定指向北，不设置则不显示*/ 
	directionStyle?:JSON,

	/**（可选项）与正前方角度指针，与正前方固定角度，不设置则不显示*/ 
	pointStyle?:JSON,

	/**（可选项）中心加角度数显示，不设置则不显示*/ 
	centerTextStyle?:JSON,

	/**（可选项）是否自动跟随方向改变改变*/ 
	autoChange?:boolean,

	/**（可选项）刷新频率，当autoChange为true时有效 单位ms*/ 
	interval?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动）*/ 
	fixed?:boolean,

}

interface compass_startSensor_Params {
	/**（可选项）如果有控件是否跟随数据同步*/ 
	autoChange?:boolean,

	/**（可选项）控件刷新频率（非返回频率），当autoChange为true时有效 单位ms*/ 
	interval?:boolean,

}

interface compass_setDirectionAngle_Params {
	/**（可选项）方向*/ 
	angle?:number,

}

interface compass_setPointAngle_Params {
	/**指针角度*/ 
	angle:number,

}

interface scrollPicture {
}
interface listContact {
}
interface UIListContactsSelect {
	/**
	 * `打开列表`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `specialGroupTitle` :string : （可选项）特殊分组标题
	 *
	 * `categarys` :Array : 类别数据
	 *
	 * `singleSelect` :boolean : 是否支持单选 （只有在选择模式下有效，即showListSelect({selected:true})）
	 *
	 * `contacts` :Array : 列表数据源
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组
	 *
	 * `styles` :JSON : （可选项）模块头部的样式
	 *
	 * `alphabeticalIndexStyles` :JSON : （可选项）右侧索引点击时中心显示的样式
	 *
	 * `backgroundColor` :boolean : （可选项）默认选中的人员是否禁用
	 *
	 * `bounces` :boolean : （可选项）是否弹动
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:UIListContactsSelect_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭列表模块*/ 
	close():void

	/** 隐藏列表模块，并没有从内存里清除*/ 
	hide():void

	/** 显示已隐藏的列表模块*/ 
	show():void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `contacts` :JSON : 列表数据源
	 */
	reloadData(params:UIListContactsSelect_reloadData_Params):void

	/** 是否显示搜索输入框*/ 
	setInputBarVisible():void

	/** 是否显示类别面板*/ 
	setCategaryPanelVisible():void

	/** 是否切入选择模式（列表右侧出现选择框）*/ 
	showListSelect():void

}
interface UIListContactsSelect_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）特殊分组标题*/ 
	specialGroupTitle?:string,

	/**类别数据*/ 
	categarys:Array,

	/**是否支持单选 （只有在选择模式下有效，即showListSelect({selected:true})）*/ 
	singleSelect:boolean,

	/**列表数据源*/ 
	contacts:Array,

	/**（可选项）列表项向左滑动露出的按钮组*/ 
	rightBtns?:Array,

	/**（可选项）模块头部的样式*/ 
	styles?:JSON,

	/**（可选项）右侧索引点击时中心显示的样式*/ 
	alphabeticalIndexStyles?:JSON,

	/**（可选项）默认选中的人员是否禁用*/ 
	backgroundColor?:boolean,

	/**（可选项）是否弹动*/ 
	bounces?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface UIListContactsSelect_reloadData_Params {
	/**列表数据源*/ 
	contacts:JSON,

}

interface UIListGroup {
	/**
	 * `打开`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用**
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `showScrollBar` :boolean : （可选项）是否显示滚动条
	 */
	open(params:UIListGroup_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭数据列表模块*/ 
	close():void

	/** 显示*/ 
	show():void

	/** 隐藏*/ 
	hide():void

	/**
	 * `根据开发者自定义的唯一标识（open 接口的 data 参数中自定义的唯一标识）查找列表项对应的数据`
	 * ========params==========
	 *
	 * `key` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key
	 *
	 * `value` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value
	 */
	getIndex(params:UIListGroup_getIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据列表项的索引获取对应的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 */
	getDataByIndex(params:UIListGroup_getDataByIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `data` :Array : （可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件**
	 */
	reloadData(params:UIListGroup_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引删除某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 */
	deleteItem(params:UIListGroup_deleteItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引更新某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	updateItem(params:UIListGroup_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引向某一条列表插入数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :Array : 列表的数据源
	 */
	insertItem(params:UIListGroup_insertItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `data` :Array : 列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:UIListGroup_appendData_Params, callback?: (ret:JSON) => void):void

	/** 获取当前列表的总数据量*/ 
	getCount():void

	/**
	 * `设置下拉刷新，**通过 reloadData 收起下拉刷新组件**`
	 * ========params==========
	 *
	 * `style` :JSON : 下拉刷新的样式配置
	 */
	setRefreshHeader(params:UIListGroup_setRefreshHeader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置上拉加载，**通过 appendData 收起上拉加载组件**`
	 * ========params==========
	 *
	 * `bgColor` :string : （可选项）上拉加载区域的背景色，支持 rgb、rgba、#
	 */
	setRefreshFooter(params:UIListGroup_setRefreshFooter_Params, callback?: (ret:JSON) => void):void

	/** 停止上拉加载*/ 
	stopRefresh():void

}
interface UIListGroup_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用***/ 
	data:Array,

	/**（可选项）列表项向左滑动露出的按钮组*/ 
	rightBtns?:Array,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否显示滚动条*/ 
	showScrollBar?:boolean,

}

interface UIListGroup_getIndex_Params {
	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key*/ 
	key:string,

	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value*/ 
	value:string,

}

interface UIListGroup_getDataByIndex_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

}

interface UIListGroup_reloadData_Params {
	/**（可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件***/ 
	data?:Array,

}

interface UIListGroup_deleteItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

}

interface UIListGroup_updateItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListGroup_insertItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:Array,

}

interface UIListGroup_appendData_Params {
	/**列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	data:Array,

}

interface UIListGroup_setRefreshHeader_Params {
	/**下拉刷新的样式配置*/ 
	style:JSON,

}

interface UIListGroup_setRefreshFooter_Params {
	/**（可选项）上拉加载区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

}

interface iosDialog4A {
	/**
	 * `弹出alert对话框`
	 * ========params==========
	 *
	 * `title` :string : 弹窗标题
	 *
	 * `msg` :string : 弹窗显示的内容
	 *
	 * `btnText` :string : 按钮上的文字
	 */
	alert(params:iosDialog4A_alert_Params, callback?: (ret:JSON) => void):void

	/**
	 * `confirm确认对话框`
	 * ========params==========
	 *
	 * `title` :string : 弹窗标题
	 *
	 * `msg` :string : 弹窗显示的内容
	 *
	 * `rigthBtnText` :string : 右边按钮文字
	 *
	 * `leftBtnText` :string : 左边按钮文字
	 */
	confirm(params:iosDialog4A_confirm_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出带有输入框的dialog`
	 * ========params==========
	 *
	 * `title` :string : 弹窗标题
	 *
	 * `rigthBtnText` :string : 右边按钮文字
	 *
	 * `leftBtnText` :string : 左边按钮文字
	 *
	 * `inputType` :string : 输入文字的类型
	 */
	prompt(params:iosDialog4A_prompt_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出actionsheet选择器`
	 * ========params==========
	 *
	 * `title` :string : actionsheet标题
	 *
	 * `cancel` :string : 最下面取消按钮文字
	 *
	 * `titleSize` :number : title文字大小
	 *
	 * `cancelSize` :number : cancel文字大小
	 *
	 * `buttons` :Array : 按钮
	 */
	actionsheet(params:iosDialog4A_actionsheet_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出三级联动选择器`
	 * ========params==========
	 *
	 * `title` :string : 选择器的title
	 *
	 * `datas` :Array : 选择器数据（可选）
	 *
	 * `level` :any : 第三项的默认选中位置（可选）
	 */
	picker(params:iosDialog4A_picker_Params, callback?: (ret:JSON) => void):void

}
interface iosDialog4A_alert_Params {
	/**弹窗标题*/ 
	title:string,

	/**弹窗显示的内容*/ 
	msg:string,

	/**按钮上的文字*/ 
	btnText:string,

}

interface iosDialog4A_confirm_Params {
	/**弹窗标题*/ 
	title:string,

	/**弹窗显示的内容*/ 
	msg:string,

	/**右边按钮文字*/ 
	rigthBtnText:string,

	/**左边按钮文字*/ 
	leftBtnText:string,

}

interface iosDialog4A_prompt_Params {
	/**弹窗标题*/ 
	title:string,

	/**右边按钮文字*/ 
	rigthBtnText:string,

	/**左边按钮文字*/ 
	leftBtnText:string,

	/**输入文字的类型*/ 
	inputType:string,

}

interface iosDialog4A_actionsheet_Params {
	/**actionsheet标题*/ 
	title:string,

	/**最下面取消按钮文字*/ 
	cancel:string,

	/**title文字大小*/ 
	titleSize:number,

	/**cancel文字大小*/ 
	cancelSize:number,

	/**按钮*/ 
	buttons:Array,

}

interface iosDialog4A_picker_Params {
	/**选择器的title*/ 
	title:string,

	/**选择器数据（可选）*/ 
	datas?:Array,

	/**第三项的默认选中位置（可选）*/ 
	level?:any,

}

interface UIListCard {
	/**
	 * `打开列表`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `contacts` :Array : 列表数据源
	 *
	 * `styles` :JSON : （可选项）列表样式设置
	 *
	 * `indicator` :boolean : （可选项）是否显示字母索引
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:UIListCard_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭列表模块*/ 
	close():void

	/** 隐藏列表模块，并没有从内存里清除*/ 
	hide():void

	/** 显示已隐藏的列表模块*/ 
	show():void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `contacts` :JSON : 列表数据源
	 */
	reloadData(params:UIListCard_reloadData_Params):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `data` :Array : 列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:UIListCard_appendData_Params, callback?: (ret:JSON) => void):void

}
interface UIListCard_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表数据源*/ 
	contacts:Array,

	/**（可选项）列表样式设置*/ 
	styles?:JSON,

	/**（可选项）是否显示字母索引*/ 
	indicator?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface UIListCard_reloadData_Params {
	/**列表数据源*/ 
	contacts:JSON,

}

interface UIListCard_appendData_Params {
	/**列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	data:Array,

}

interface UIListInformation {
	/**
	 * `打开列表`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `contacts` :Array : 列表数据源
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数**
	 *
	 * `styles` :JSON : （可选项）模块头部的样式
	 *
	 * `rightButtonInfo` :any : （可选项）列表右边按钮相关设置，设置后点击将会弹出扇形页面，不传将不会弹出
	 *
	 * `backgroundColor` :string : （可选项）模块背景色
	 *
	 * `bounces` :boolean : （可选项）是否弹动
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:UIListInformation_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭列表模块*/ 
	close():void

	/** 隐藏列表模块，并没有从内存里清除*/ 
	hide():void

	/** 显示已隐藏的列表模块*/ 
	show():void

	/**
	 * `根据开发者自定义的唯一标识（open 接口的 data 参数中自定义的唯一标识）查找列表项对应的数据`
	 * ========params==========
	 *
	 * `key` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key
	 *
	 * `value` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value
	 */
	getIndex(params:UIListInformation_getIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据列表项的索引获取对应的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 */
	getDataByIndex(params:UIListInformation_getDataByIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `contacts` :Array : （可选项）列表的数据源
	 */
	reloadData(params:UIListInformation_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引删除某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 */
	deleteItem(params:UIListInformation_deleteItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引更新某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `contacts` :JSON : 列表的数据源
	 */
	updateItem(params:UIListInformation_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `contacts` :Array : 列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:UIListInformation_appendData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置下拉刷新，**通过 reloadData 收起下拉刷新组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）下拉刷新区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textDown` :string : （可选项）下拉提示文字
	 *
	 * `textUp` :string : （可选项）松开提示文字
	 */
	setRefreshHeader(params:UIListInformation_setRefreshHeader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置上拉加载，**通过 appendData 收起上拉加载组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）上拉加载区域的背景色，支持 rgb、rgba、#
	 */
	setRefreshFooter(params:UIListInformation_setRefreshFooter_Params, callback?: (ret:JSON) => void):void

	/** 设置列表模式*/ 
	setListMode():void

	/** 获取列表模式*/ 
	getListMode():void

	/**
	 * `排序`
	 * ========params==========
	 *
	 * `sort` :number : （可选项）排序；0:正序,1:倒序
	 */
	sort(params:UIListInformation_sort_Params):void

	/**
	 * `恢复取消排序`
	 * ========params==========
	 *
	 * `isSort` :boolean : （可选项）是否排序
	 */
	cancelOrder(params:UIListInformation_cancelOrder_Params):void

	/** 关闭菜单(前端在push到下一个页面时，需要调用此接口)*/ 
	closeMenu():void

	/**
	 * `设置列表项样式`
	 * ========params==========
	 *
	 * `of` :number : （可选项）设置哪一项
	 *
	 * `styles` :JSON : （可选项）列表项样式
	 */
	setStyle(params:UIListInformation_setStyle_Params):void

	/** 取消设置列表项样式*/ 
	cancelStyle():void

}
interface UIListInformation_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表数据源*/ 
	contacts:Array,

	/**（可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数***/ 
	rightBtns?:Array,

	/**（可选项）模块头部的样式*/ 
	styles?:JSON,

	/**（可选项）列表右边按钮相关设置，设置后点击将会弹出扇形页面，不传将不会弹出*/ 
	rightButtonInfo?:any,

	/**（可选项）模块背景色*/ 
	backgroundColor?:string,

	/**（可选项）是否弹动*/ 
	bounces?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface UIListInformation_getIndex_Params {
	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key*/ 
	key:string,

	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value*/ 
	value:string,

}

interface UIListInformation_getDataByIndex_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

}

interface UIListInformation_reloadData_Params {
	/**（可选项）列表的数据源*/ 
	contacts?:Array,

}

interface UIListInformation_deleteItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

}

interface UIListInformation_updateItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	contacts:JSON,

}

interface UIListInformation_appendData_Params {
	/**列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	contacts:Array,

}

interface UIListInformation_setRefreshHeader_Params {
	/**下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）下拉刷新区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）下拉提示文字*/ 
	textDown?:string,

	/**（可选项）松开提示文字*/ 
	textUp?:string,

}

interface UIListInformation_setRefreshFooter_Params {
	/**上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）上拉加载区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

}

interface UIListInformation_sort_Params {
	/**（可选项）排序；0:正序,1:倒序*/ 
	sort?:number,

}

interface UIListInformation_cancelOrder_Params {
	/**（可选项）是否排序*/ 
	isSort?:boolean,

}

interface UIListInformation_setStyle_Params {
	/**（可选项）设置哪一项*/ 
	of?:number,

	/**（可选项）列表项样式*/ 
	styles?:JSON,

}

interface UICustomPicker {
	/**
	 * `打开自定义选择器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `data` :JSON : 自定义选择器的标签和内容取值范围；若数组长度大于1，则显示多个选择器实例，彼此仍是一个整体，各个实例宽度 = 模块整体宽度（w）/ 实例个数
	 *
	 * `disableSelect` :JSON : （可选项）设置不可选项，与 data 对应，若不传则不设置不可选项
	 *
	 * `rows` :number : （可选项）滚动内容时可见的内容行数，只接受大于1的奇整数。
	 *
	 * `autoHide` :boolean : （可选项）选中内容时，上下选项是否自动隐藏
	 *
	 * `loop` :boolean : （可选项）是否循环滚动。如果内容的取值范围的个数小于rows参数的值，那么无论loop设置为true或是false，均不可循环滚动
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:UICustomPicker_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭自定义选择器`
	 * ========params==========
	 *
	 * `id` :number : 模块的 id，用于区分模块的多个实例
	 */
	close(params:UICustomPicker_close_Params):void

	/**
	 * `显示自定义选择器`
	 * ========params==========
	 *
	 * `id` :number : 模块的 id，用于区分模块的多个实例
	 */
	show(params:UICustomPicker_show_Params):void

	/**
	 * `隐藏自定义选择器`
	 * ========params==========
	 *
	 * `id` :number : 模块的 id，用于区分模块的多个实例
	 */
	hide(params:UICustomPicker_hide_Params):void

	/**
	 * `设置自定义选择器当前选中的内容`
	 * ========params==========
	 *
	 * `id` :number : 模块 id，用于区分多个模块实例
	 *
	 * `data` :Array : 设置选择器选中项的内容组成的数组，数组某一项为空或不传，表示不改变对应列的值
	 */
	setValue(params:UICustomPicker_setValue_Params):void

	/**
	 * `刷新数据源`
	 * ========params==========
	 *
	 * `id` :number : 制定刷新的模块id
	 *
	 * `data` :JSON : 刷新自定义选择器的标签和内容；本数组长度必须和 open 接口内 data 参数数组长度一致，传空则表示不刷新该元素对应的列。如：[{*****},'',{*******}]，表示不刷新第二列选择器
	 */
	refreshData(params:UICustomPicker_refreshData_Params):void

}
interface UICustomPicker_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**自定义选择器的标签和内容取值范围；若数组长度大于1，则显示多个选择器实例，彼此仍是一个整体，各个实例宽度 = 模块整体宽度（w）/ 实例个数*/ 
	data:JSON,

	/**（可选项）设置不可选项，与 data 对应，若不传则不设置不可选项*/ 
	disableSelect?:JSON,

	/**（可选项）滚动内容时可见的内容行数，只接受大于1的奇整数。*/ 
	rows?:number,

	/**（可选项）选中内容时，上下选项是否自动隐藏*/ 
	autoHide?:boolean,

	/**（可选项）是否循环滚动。如果内容的取值范围的个数小于rows参数的值，那么无论loop设置为true或是false，均不可循环滚动*/ 
	loop?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UICustomPicker_close_Params {
	/**模块的 id，用于区分模块的多个实例*/ 
	id:number,

}

interface UICustomPicker_show_Params {
	/**模块的 id，用于区分模块的多个实例*/ 
	id:number,

}

interface UICustomPicker_hide_Params {
	/**模块的 id，用于区分模块的多个实例*/ 
	id:number,

}

interface UICustomPicker_setValue_Params {
	/**模块 id，用于区分多个模块实例*/ 
	id:number,

	/**设置选择器选中项的内容组成的数组，数组某一项为空或不传，表示不改变对应列的值*/ 
	data:Array,

}

interface UICustomPicker_refreshData_Params {
	/**制定刷新的模块id*/ 
	id:number,

	/**刷新自定义选择器的标签和内容；本数组长度必须和 open 接口内 data 参数数组长度一致，传空则表示不刷新该元素对应的列。如：[{*****},'',{*******}]，表示不刷新第二列选择器*/ 
	data:JSON,

}

interface payPasswordPlus {
	/**
	 * `打开密码输入框`
	 * ========params==========
	 *
	 * `title` :string : （可选项）默认标题。
	 *
	 * `isTwoValidation` :string : （可选项）标题2 (isTwoValidation:true有效)。
	 *
	 * `textColor` :string : （可选项）标题颜色。
	 *
	 * `textSize` :number : （可选项）标题字体大小。
	 *
	 * `isOpenShuffle` :boolean : （可选项）是否开启打乱数字的位置(开启:true,关闭:false)。
	 *
	 * `isShowClose` :boolean : （可选项）是否显示关闭按钮(显示:true,不显示:false)。
	 */
	showInput(params:payPasswordPlus_showInput_Params, callback?: (ret:JSON) => void):void

}
interface payPasswordPlus_showInput_Params {
	/**（可选项）默认标题。*/ 
	title?:string,

	/**（可选项）标题2 (isTwoValidation:true有效)。*/ 
	isTwoValidation?:string,

	/**（可选项）标题颜色。*/ 
	textColor?:string,

	/**（可选项）标题字体大小。*/ 
	textSize?:number,

	/**（可选项）是否开启打乱数字的位置(开启:true,关闭:false)。*/ 
	isOpenShuffle?:boolean,

	/**（可选项）是否显示关闭按钮(显示:true,不显示:false)。*/ 
	isShowClose?:boolean,

}

interface slider {
}
interface calendar {
}
interface UIListBook {
	/**
	 * `打开 UIListBook 模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用**
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数**
	 *
	 * `bounces` :boolean : （可选项）是否开启弹动，android 平台不支持本参数
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `rightButtonInfo` :any : （可选项）列表右边按钮相关设置，设置后点击将会弹出扇形页面，不传将不会弹出
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `showScrollBar` :boolean : （可选项）是否显示滚动条
	 */
	open(params:UIListBook_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭数据列表模块*/ 
	close():void

	/** 显示 UIListBook 模块*/ 
	show():void

	/** 隐藏 UIListBook 模块*/ 
	hide():void

	/**
	 * `设置列表的纵坐标和高度`
	 * ========params==========
	 *
	 * `y` :number : （可选项）模块的纵坐标
	 *
	 * `h` :number : （可选项）模块的高度
	 */
	setAttr(params:UIListBook_setAttr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据开发者自定义的唯一标识（open 接口的 data 参数中自定义的唯一标识）查找列表项对应的数据（此接口仅支持iOS）`
	 * ========params==========
	 *
	 * `key` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key
	 *
	 * `value` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value
	 */
	getIndex(params:UIListBook_getIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据列表项的索引获取对应的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 */
	getDataByIndex(params:UIListBook_getDataByIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置侧滑显示出来的按钮`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 *
	 * `btns` :Array : （可选项）列表项侧滑露出的按钮组
	 */
	setSwipeBtns(params:UIListBook_setSwipeBtns_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `data` :Array : （可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件**
	 */
	reloadData(params:UIListBook_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引删除某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 */
	deleteItem(params:UIListBook_deleteItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引更新某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	updateItem(params:UIListBook_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表追加数据`
	 * ========params==========
	 *
	 * `data` :Array : 列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:UIListBook_appendData_Params, callback?: (ret:JSON) => void):void

	/** 获取当前列表的总数据量*/ 
	getCount():void

	/**
	 * `设置下拉刷新，**通过 reloadData 收起下拉刷新组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）下拉刷新区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textDown` :string : （可选项）下拉提示文字
	 *
	 * `textUp` :string : （可选项）松开提示文字
	 *
	 * `loadingText` :string : （可选项）提示文字
	 */
	setRefreshHeader(params:UIListBook_setRefreshHeader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置上拉加载，**通过 appendData 收起上拉加载组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）上拉加载区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textUp` :string : （可选项）上拉提示文字
	 *
	 * `textDown` :string : （可选项）（仅ios支持）松开提示文字
	 *
	 * `loadingText` :string : （可选项）（仅ios支持）提示文字
	 */
	setRefreshFooter(params:UIListBook_setRefreshFooter_Params, callback?: (ret:JSON) => void):void

	/**
	 * `排序`
	 * ========params==========
	 *
	 * `sort` :number : （可选项）排序；0:正序,1:倒序
	 */
	sort(params:UIListBook_sort_Params):void

	/**
	 * `恢复取消排序`
	 * ========params==========
	 *
	 * `isSort` :boolean : （可选项）是否排序
	 */
	cancelOrder(params:UIListBook_cancelOrder_Params):void

	/** 关闭右边弹窗（跳转其他页面时需调用此接口关闭弹窗，此接口仅支持iOS）*/ 
	closeMenu():void

	/**
	 * `设置列表项样式（分组时间不可同时设置）`
	 * ========params==========
	 *
	 * `of` :number : （可选项）设置哪一项
	 *
	 * `styles` :JSON : （可选项）列表项样式
	 */
	setStyle(params:UIListBook_setStyle_Params):void

	/** 取消设置列表项样式*/ 
	cancelStyle():void

}
interface UIListBook_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用***/ 
	data:Array,

	/**（可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数***/ 
	rightBtns?:Array,

	/**（可选项）是否开启弹动，android 平台不支持本参数*/ 
	bounces?:boolean,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）列表右边按钮相关设置，设置后点击将会弹出扇形页面，不传将不会弹出*/ 
	rightButtonInfo?:any,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否显示滚动条*/ 
	showScrollBar?:boolean,

}

interface UIListBook_setAttr_Params {
	/**（可选项）模块的纵坐标*/ 
	y?:number,

	/**（可选项）模块的高度*/ 
	h?:number,

}

interface UIListBook_getIndex_Params {
	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key*/ 
	key:string,

	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value*/ 
	value:string,

}

interface UIListBook_getDataByIndex_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

}

interface UIListBook_setSwipeBtns_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

	/**（可选项）列表项侧滑露出的按钮组*/ 
	btns?:Array,

}

interface UIListBook_reloadData_Params {
	/**（可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件***/ 
	data?:Array,

}

interface UIListBook_deleteItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

}

interface UIListBook_updateItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListBook_appendData_Params {
	/**列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	data:Array,

}

interface UIListBook_setRefreshHeader_Params {
	/**下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）下拉刷新区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）下拉提示文字*/ 
	textDown?:string,

	/**（可选项）松开提示文字*/ 
	textUp?:string,

	/**（可选项）提示文字*/ 
	loadingText?:string,

}

interface UIListBook_setRefreshFooter_Params {
	/**上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）上拉加载区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）上拉提示文字*/ 
	textUp?:string,

	/**（可选项）（仅ios支持）松开提示文字*/ 
	textDown?:string,

	/**（可选项）（仅ios支持）提示文字*/ 
	loadingText?:string,

}

interface UIListBook_sort_Params {
	/**（可选项）排序；0:正序,1:倒序*/ 
	sort?:number,

}

interface UIListBook_cancelOrder_Params {
	/**（可选项）是否排序*/ 
	isSort?:boolean,

}

interface UIListBook_setStyle_Params {
	/**（可选项）设置哪一项*/ 
	of?:number,

	/**（可选项）列表项样式*/ 
	styles?:JSON,

}

interface UISelector {
}
interface addressSel {
	/**
	 * `input方法将view添加到页面中`
	 * ========params==========
	 *
	 * `x` :any : 以左上角为原点 x轴偏移量。
	 *
	 * `y` :any : 以左上角为原点 y轴偏移量。
	 *
	 * `w` :any : view 宽度 。
	 *
	 * `h` :any : view 高度 。
	 *
	 * `type` :any : 类型
	 */
	input(params:addressSel_input_Params, callback?: (ret:JSON) => void):void

	/** 隐藏view，已调用input情况下可调用此方法隐藏*/ 
	hide():void

	/** 显示隐藏的view，调用input，hide 的情况下将原view对象重新显示，节省内存，无需重新创建*/ 
	show():void

	/** 在不使用此view的情况下销毁释放内存*/ 
	destroy():void

	/** type为多级的情况下调用此方法一级一级返回，当返回到省级的时候返回返回值继续操作；例：type=2时用户点击省级选择进入市级选择，点击android回退键或者头部返回键调用该方法返回省级，再点击返回返回值back=true，在回调中继续操作。*/ 
	back():void

}
interface addressSel_input_Params {
	/**以左上角为原点 x轴偏移量。*/ 
	x:any,

	/**以左上角为原点 y轴偏移量。*/ 
	y:any,

	/**view 宽度 。*/ 
	w:any,

	/**view 高度 。*/ 
	h:any,

	/**类型*/ 
	type:any,

}

interface photoBrowserWeiBo {
	/** 清除缓存到本地的网络图片，**本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

}
interface pullRefreshLoop {
	/** 配置下拉刷新样式*/ 
	setCustomRefreshHeaderInfo():void

	/** 手动开始下拉刷新的加载状态，**下拉刷新状态亦可通过用户下拉到阈值自动触发***/ 
	refreshHeaderLoading():void

	/** 手动停止下拉刷新的加载状态*/ 
	refreshHeaderLoadDone():void

}
interface UIPullRefreshRiding {
	/** 配置下拉刷新样式*/ 
	setCustomRefreshHeaderInfo():void

	/** 手动开始下拉刷新的加载状态，**下拉刷新状态亦可通过用户下拉到阈值自动触发***/ 
	refreshHeaderLoading():void

	/** 手动停止下拉刷新的加载状态*/ 
	refreshHeaderLoadDone():void

}
interface passwordKeyboard {
	/**
	 * `数字字母键盘（仅iOS支持）`
	 * ========params==========
	 *
	 * `rect` :JSON : 键盘尺寸
	 *
	 * `bgColor` :string : (可选项)；键盘背景颜色
	 *
	 * `dataNumber` :number : (可选项)；允许输入框输入密码的位数
	 *
	 * `style` :JSON : （可选项）键盘按钮设置
	 */
	openDigitalLetter(params:passwordKeyboard_openDigitalLetter_Params, callback?: (ret:JSON) => void):void

	/** 关闭数字字母键盘（仅iOS支持）*/ 
	closeDigitalLetter():void

	/**
	 * `数字键盘`
	 * ========params==========
	 *
	 * `rect` :JSON : 键盘尺寸（仅iOS支持）
	 *
	 * `bgColor` :string : 键盘背景颜色
	 *
	 * `style` :JSON : （可选项）键盘按钮设置（仅iOS支持）
	 */
	openDigital(params:passwordKeyboard_openDigital_Params, callback?: (ret:JSON) => void):void

	/** 关闭数字键盘*/ 
	closeDigital():void

	/**
	 * `打开数字符号键盘（仅iOS支持）`
	 * ========params==========
	 *
	 * `rect` :JSON : 键盘尺寸
	 *
	 * `bgColor` :string : 键盘背景颜色
	 *
	 * `style` :JSON : （可选项）键盘按钮设置
	 */
	openDigitalSymbol(params:passwordKeyboard_openDigitalSymbol_Params, callback?: (ret:JSON) => void):void

	/** 关闭数字符号键盘（仅iOS支持）*/ 
	closeDigitalSymbol():void

}
interface passwordKeyboard_openDigitalLetter_Params {
	/**键盘尺寸*/ 
	rect:JSON,

	/**(可选项)；键盘背景颜色*/ 
	bgColor?:string,

	/**(可选项)；允许输入框输入密码的位数*/ 
	dataNumber?:number,

	/**（可选项）键盘按钮设置*/ 
	style?:JSON,

}

interface passwordKeyboard_openDigital_Params {
	/**键盘尺寸（仅iOS支持）*/ 
	rect:JSON,

	/**键盘背景颜色*/ 
	bgColor:string,

	/**（可选项）键盘按钮设置（仅iOS支持）*/ 
	style?:JSON,

}

interface passwordKeyboard_openDigitalSymbol_Params {
	/**键盘尺寸*/ 
	rect:JSON,

	/**键盘背景颜色*/ 
	bgColor:string,

	/**（可选项）键盘按钮设置*/ 
	style?:JSON,

}

interface dtSelector {
	/**
	 * `打开 dtSelector 模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `arrowImage` :string : （可选项）每个选择器右边的箭头图片，要求本地路径（fs://、widget://），支持png，jpg格式的图片
	 *
	 * `arrowSelectImage` :string : （可选项）每个选择器右边的箭头被选中的图片，需对arrowImage设置后才有效，要求本地路径（fs://、widget://），支持png，jpg格式的图片
	 *
	 * `itemCount` :number : （可选值）下拉选择器项的数量
	 *
	 * `cover` :boolean : （可选项）下拉的列表是否覆盖在整个选择器的下方
	 *
	 * `datas` :Array : 数据源，多层次数据结构，可无限添加层级，设置itemCount层数即可
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动），如果被其他视图遮挡，请将此值设置为true
	 */
	open(params:dtSelector_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭数据列表模块*/ 
	close():void

	/** 显示dtSelector模块*/ 
	show():void

	/** ##示例代码*/ 
	hide():void

	/**
	 * `加载新的数据`
	 * ========params==========
	 *
	 * `datas` :Array : 数据源，多层次数据结构，可无限添加层级，设置itemCount层数即可
	 */
	reloadDatas(params:dtSelector_reloadDatas_Params):void

}
interface dtSelector_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）每个选择器右边的箭头图片，要求本地路径（fs://、widget://），支持png，jpg格式的图片*/ 
	arrowImage?:string,

	/**（可选项）每个选择器右边的箭头被选中的图片，需对arrowImage设置后才有效，要求本地路径（fs://、widget://），支持png，jpg格式的图片*/ 
	arrowSelectImage?:string,

	/**（可选值）下拉选择器项的数量*/ 
	itemCount?:number,

	/**（可选项）下拉的列表是否覆盖在整个选择器的下方*/ 
	cover?:boolean,

	/**数据源，多层次数据结构，可无限添加层级，设置itemCount层数即可*/ 
	datas:Array,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动），如果被其他视图遮挡，请将此值设置为true*/ 
	fixed?:boolean,

}

interface dtSelector_reloadDatas_Params {
	/**数据源，多层次数据结构，可无限添加层级，设置itemCount层数即可*/ 
	datas:Array,

}

interface UICityList {
	/**
	 * `打开城市列表模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `topCitys` :Array : （可选项）热门城市数据源，若本参数不为空，则忽略 resource中的 topCitys。若不传或传空，则模块会自动读取 resource 中的 topCitys 数据
	 *
	 * `resource` :string : 城市列表的数据源文件路径（支持 https、http、widget、fs 路径协议），数据源文件必须为`.json`文件。城市的JSON数据会在callback时按原格式返回。若为 json 文件则必须是标准的 [json格式](http://www.bejson.com)，否则会报错。
	 */
	open(params:UICityList_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭城市列表*/ 
	close():void

	/** 显示城市列表*/ 
	show():void

	/** 隐藏城市列表*/ 
	hide():void

}
interface UICityList_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）热门城市数据源，若本参数不为空，则忽略 resource中的 topCitys。若不传或传空，则模块会自动读取 resource 中的 topCitys 数据*/ 
	topCitys?:Array,

	/**城市列表的数据源文件路径（支持 https、http、widget、fs 路径协议），数据源文件必须为`.json`文件。城市的JSON数据会在callback时按原格式返回。若为 json 文件则必须是标准的 [json格式](http://www.bejson.com)，否则会报错。*/ 
	resource:string,

}

interface shakeView {
}
interface photoBrowserQQ {
	/** 清除缓存到本地的网络图片，**本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

}
interface barChart {
}
interface dialogBox {
	/**
	 * `弹出 alert 样式的对话框`
	 * ========params==========
	 *
	 * `texts` :JSON : （可选项）alert 对话框模块可配置的文本
	 *
	 * `styles` :JSON : alert 对话框样式配置
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 */
	alert(params:dialogBox_alert_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出 sendMessage 样式的对话框`
	 * ========params==========
	 *
	 * `texts` :JSON : （可选项）sendMessage 对话框模块可配置的文本
	 *
	 * `styles` :JSON : sendMessage 对话框样式配置
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 */
	sendMessage(params:dialogBox_sendMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出 scene 样式的对话框`
	 * ========params==========
	 *
	 * `rect` :JSON : scene 对话框的尺寸配置, 上下左右居中对齐
	 *
	 * `texts` :JSON : （可选项）scene对话框模块可配置的文本
	 *
	 * `styles` :JSON : scene 对话框样式设置
	 *
	 * `optionDatas` :Array : （可选项）场景事件选项数据源，若为空则不显示
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 */
	scene(params:dialogBox_scene_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出 evaluation 样式的对话框`
	 * ========params==========
	 *
	 * `styles` :JSON : evaluation 对话框样式配置
	 *
	 * `texts` :JSON : （可选项）evaluation 对话框模块可配置的文本
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 */
	evaluation(params:dialogBox_evaluation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出 raffle 样式的对话框`
	 * ========params==========
	 *
	 * `texts` :JSON : （可选项）raffle 对话框模块可配置的文本
	 *
	 * `styles` :string : raffle 对话框样式设置
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 */
	raffle(params:dialogBox_raffle_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出 taskPlan 样式的对话框`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）taskPlan 对话框的宽度配置
	 *
	 * `texts` :JSON : （可选项）taskPlan 对话框模块可配置的文本
	 *
	 * `styles` :JSON : taskPlan 对话框样式设置
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 */
	taskPlan(params:dialogBox_taskPlan_Params, callback?: (ret:JSON) => void):void

	/** 弹出 receipt 样式的对话框*/ 
	receipt():void

	/** 弹出 tips 样式的对话框*/ 
	tips():void

	/** 弹出 discount 样式的对话框*/ 
	discount():void

	/**
	 * `弹出 share 样式的对话框`
	 * ========params==========
	 *
	 * `rect` :JSON : 对话框的宽高设置
	 *
	 * `items` :Array<JSON> : 对话框数据
	 *
	 * `styles` :JSON : 对话框样式设置
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 *
	 * `ret` :JSON : null
	 */
	share(params:dialogBox_share_Params):void

	/**
	 * `弹出 actionMenu 样式的对话框`
	 * ========params==========
	 *
	 * `rect` :JSON : 对话框的宽高设置
	 *
	 * `texts` :JSON : （可选项）取消按钮的文本设置
	 *
	 * `items` :Array<JSON> : 对话框内子按钮配置，多出屏幕的按钮可左右拖动查看，按钮和标题所占区域在弹框区域上下居中显示
	 *
	 * `styles` :JSON : 对话框样式设置
	 *
	 * `isCuttingLine` :boolean : (可选项)是否显示分割线
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 *
	 * `ret` :JSON : null
	 */
	actionMenu(params:dialogBox_actionMenu_Params):void

	/**
	 * `打开一个带输入框的弹出框`
	 * ========params==========
	 *
	 * `keyboardType` :string : （可选项）输入框获取焦点时，弹出的键盘类型；
	 *
	 * `texts` :JSON : （可选项）input 对话框模块可配置的文本
	 *
	 * `styles` :JSON : input 对话框样式配置
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 */
	input(params:dialogBox_input_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出 amount 样式的对话框`
	 * ========params==========
	 *
	 * `texts` :JSON : （可选项）amount 对话框模块可配置的文本
	 *
	 * `styles` :JSON : sendMessage 对话框样式配置
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 *
	 * `decimal` :boolean : （可选项）是否支持小数输入，若为true，则弹出可输入小数的键盘，用户点击'+'或'-'当前数字增减步幅为当前数字的最小单位，如当前值为1.1，则点击'+'或'-'会增加减少0.1，当前值为1.11，则随之增减0.01
	 */
	amount(params:dialogBox_amount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出 list 样式的对话框`
	 * ========params==========
	 *
	 * `texts` :JSON : （可选项）amount 对话框模块可配置的文本
	 *
	 * `listTitles` :Array : 对话框内的列表每条 title 文本字符串组成的数组，超出该列表显示区域的可上下拖动查看
	 *
	 * `styles` :JSON : list 对话框样式配置
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 */
	list(params:dialogBox_list_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开一个可加载 web 页面的弹框`
	 * ========params==========
	 *
	 * `texts` :JSON : （可选项）input 对话框模块可配置的文本
	 *
	 * `path` :string : 要加载的页面地址 支持(http:// widget://)
	 *
	 * `styles` :JSON : input 对话框样式配置
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 */
	webView(params:dialogBox_webView_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开一个警告对话框`
	 * ========params==========
	 *
	 * `msg` :JSON : （可选项）popupAlert 对话框模块可配置的文本
	 *
	 * `styles` :JSON : popupAlert 对话框样式配置
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 */
	popupAlert(params:dialogBox_popupAlert_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开一个确认对话框`
	 * ========params==========
	 *
	 * `msg` :JSON : （可选项）confirm 对话框模块可配置的文本
	 *
	 * `styles` :JSON : confirm 对话框样式配置
	 *
	 * `tapClose` :boolean : 是否可以取消（点击遮罩，android系统点击回退是否取消对话框）
	 */
	confirm(params:dialogBox_confirm_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭弹出的对话框`
	 * ========params==========
	 *
	 * `dialogName` :string : 上面所列各种对话框的样式名(接口)
	 */
	close(params:dialogBox_close_Params):void

	/**
	 * `打开一个带输入框的弹出框`
	 * ========params==========
	 *
	 * `keyboardType` :string : （可选项）输入框获取焦点时，弹出的键盘类型；
	 *
	 * `texts` :JSON : （可选项）input 对话框模块可配置的文本
	 *
	 * `styles` :JSON : input 对话框样式配置
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 */
	inputbox(params:dialogBox_inputbox_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出 multiLineMenu 样式的对话框，与actionMenu对话框功能一致，区别在于该对话框支持多行`
	 * ========params==========
	 *
	 * `rect` :JSON : 对话框的宽高设置
	 *
	 * `texts` :JSON : （可选项）取消按钮的文本设置
	 *
	 * `items` :Array<JSON> : 对话框内子按钮配置，多出屏幕的按钮可左右拖动查看，按钮和标题所占区域在弹框区域上下居中显示
	 *
	 * `styles` :JSON : 对话框样式设置
	 *
	 * `isCuttingLine` :boolean : (可选项)是否显示分割线
	 *
	 * `tapClose` :boolean : （可选项）是否点击遮罩层关闭该对话框
	 *
	 * `animation` :boolean : 是否再打开或关闭对话框时使用动画
	 *
	 * `ret` :JSON : null
	 */
	multiLineMenu(params:dialogBox_multiLineMenu_Params):void

}
interface dialogBox_alert_Params {
	/**（可选项）alert 对话框模块可配置的文本*/ 
	texts?:JSON,

	/**alert 对话框样式配置*/ 
	styles:JSON,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

}

interface dialogBox_sendMessage_Params {
	/**（可选项）sendMessage 对话框模块可配置的文本*/ 
	texts?:JSON,

	/**sendMessage 对话框样式配置*/ 
	styles:JSON,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

}

interface dialogBox_scene_Params {
	/**scene 对话框的尺寸配置, 上下左右居中对齐*/ 
	rect:JSON,

	/**（可选项）scene对话框模块可配置的文本*/ 
	texts?:JSON,

	/**scene 对话框样式设置*/ 
	styles:JSON,

	/**（可选项）场景事件选项数据源，若为空则不显示*/ 
	optionDatas?:Array,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

}

interface dialogBox_evaluation_Params {
	/**evaluation 对话框样式配置*/ 
	styles:JSON,

	/**（可选项）evaluation 对话框模块可配置的文本*/ 
	texts?:JSON,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

}

interface dialogBox_raffle_Params {
	/**（可选项）raffle 对话框模块可配置的文本*/ 
	texts?:JSON,

	/**raffle 对话框样式设置*/ 
	styles:string,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

}

interface dialogBox_taskPlan_Params {
	/**（可选项）taskPlan 对话框的宽度配置*/ 
	rect?:JSON,

	/**（可选项）taskPlan 对话框模块可配置的文本*/ 
	texts?:JSON,

	/**taskPlan 对话框样式设置*/ 
	styles:JSON,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

}

interface dialogBox_share_Params {
	/**对话框的宽高设置*/ 
	rect:JSON,

	/**对话框数据*/ 
	items:Array<JSON>,

	/**对话框样式设置*/ 
	styles:JSON,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

	/**null*/ 
	ret:JSON,

}

interface dialogBox_actionMenu_Params {
	/**对话框的宽高设置*/ 
	rect:JSON,

	/**（可选项）取消按钮的文本设置*/ 
	texts?:JSON,

	/**对话框内子按钮配置，多出屏幕的按钮可左右拖动查看，按钮和标题所占区域在弹框区域上下居中显示*/ 
	items:Array<JSON>,

	/**对话框样式设置*/ 
	styles:JSON,

	/**(可选项)是否显示分割线*/ 
	isCuttingLine?:boolean,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

	/**null*/ 
	ret:JSON,

}

interface dialogBox_input_Params {
	/**（可选项）输入框获取焦点时，弹出的键盘类型；*/ 
	keyboardType?:string,

	/**（可选项）input 对话框模块可配置的文本*/ 
	texts?:JSON,

	/**input 对话框样式配置*/ 
	styles:JSON,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

}

interface dialogBox_amount_Params {
	/**（可选项）amount 对话框模块可配置的文本*/ 
	texts?:JSON,

	/**sendMessage 对话框样式配置*/ 
	styles:JSON,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

	/**（可选项）是否支持小数输入，若为true，则弹出可输入小数的键盘，用户点击'+'或'-'当前数字增减步幅为当前数字的最小单位，如当前值为1.1，则点击'+'或'-'会增加减少0.1，当前值为1.11，则随之增减0.01*/ 
	decimal?:boolean,

}

interface dialogBox_list_Params {
	/**（可选项）amount 对话框模块可配置的文本*/ 
	texts?:JSON,

	/**对话框内的列表每条 title 文本字符串组成的数组，超出该列表显示区域的可上下拖动查看*/ 
	listTitles:Array,

	/**list 对话框样式配置*/ 
	styles:JSON,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

}

interface dialogBox_webView_Params {
	/**（可选项）input 对话框模块可配置的文本*/ 
	texts?:JSON,

	/**要加载的页面地址 支持(http:// widget://)*/ 
	path:string,

	/**input 对话框样式配置*/ 
	styles:JSON,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

}

interface dialogBox_popupAlert_Params {
	/**（可选项）popupAlert 对话框模块可配置的文本*/ 
	msg?:JSON,

	/**popupAlert 对话框样式配置*/ 
	styles:JSON,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

}

interface dialogBox_confirm_Params {
	/**（可选项）confirm 对话框模块可配置的文本*/ 
	msg?:JSON,

	/**confirm 对话框样式配置*/ 
	styles:JSON,

	/**是否可以取消（点击遮罩，android系统点击回退是否取消对话框）*/ 
	tapClose:boolean,

}

interface dialogBox_close_Params {
	/**上面所列各种对话框的样式名(接口)*/ 
	dialogName:string,

}

interface dialogBox_inputbox_Params {
	/**（可选项）输入框获取焦点时，弹出的键盘类型；*/ 
	keyboardType?:string,

	/**（可选项）input 对话框模块可配置的文本*/ 
	texts?:JSON,

	/**input 对话框样式配置*/ 
	styles:JSON,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

}

interface dialogBox_multiLineMenu_Params {
	/**对话框的宽高设置*/ 
	rect:JSON,

	/**（可选项）取消按钮的文本设置*/ 
	texts?:JSON,

	/**对话框内子按钮配置，多出屏幕的按钮可左右拖动查看，按钮和标题所占区域在弹框区域上下居中显示*/ 
	items:Array<JSON>,

	/**对话框样式设置*/ 
	styles:JSON,

	/**(可选项)是否显示分割线*/ 
	isCuttingLine?:boolean,

	/**（可选项）是否点击遮罩层关闭该对话框*/ 
	tapClose?:boolean,

	/**是否再打开或关闭对话框时使用动画*/ 
	animation:boolean,

	/**null*/ 
	ret:JSON,

}

interface UIAlert {
	/** 邀请对话框*/ 
	invite(callback?: (ret:JSON) => void):void

	/**
	 * `在屏幕中间显示一个提示图片`
	 * ========params==========
	 *
	 * `imagePath` :string : 图片路径（支持widget:// fs://）
	 *
	 * `imageW` :number : 图片宽度
	 *
	 * `imageH` :number : 图片高度
	 *
	 * `mask` :string : 遮罩颜色
	 */
	popImage(params:UIAlert_popImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `列表选择对话框`
	 * ========params==========
	 *
	 * `title` :string : 列表标题
	 *
	 * `datas` :JSON : 列表数据
	 *
	 * `styles` :JSON : 对话框样式
	 *
	 * `mask` :string : 对话框遮罩颜色
	 *
	 * `selectedIndex` :number : 默认选中项
	 */
	selectedList(params:UIAlert_selectedList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `提示对话框`
	 * ========params==========
	 *
	 * `imagePath` :string : 图片路径（支持widget:// fs://）
	 *
	 * `content` :string : 提示内容
	 *
	 * `btnTitle` :string : 底部按钮标题
	 *
	 * `styles` :JSON : 对话框样式设置
	 *
	 * `mask` :string : 对话框遮罩颜色
	 */
	showTips(params:UIAlert_showTips_Params, callback?: (ret:JSON) => void):void

	/**
	 * `price对话框`
	 * ========params==========
	 *
	 * `styles` :JSON : 对话框样式设置
	 *
	 * `mask` :string : 对话框遮罩颜色
	 */
	price(params:UIAlert_price_Params, callback?: (ret:JSON) => void):void

	/**
	 * `提示对话框`
	 * ========params==========
	 *
	 * `styles` :JSON : 对话框样式设置
	 *
	 * `mask` :string : 对话框遮罩颜色
	 */
	hint(params:UIAlert_hint_Params, callback?: (ret:JSON) => void):void

	/**
	 * `支付成功对话框`
	 * ========params==========
	 *
	 * `styles` :JSON : 对话框样式设置
	 *
	 * `mask` :string : 对话框遮罩颜色
	 */
	paySuccess(params:UIAlert_paySuccess_Params, callback?: (ret:JSON) => void):void

	/**
	 * `支付对话框`
	 * ========params==========
	 *
	 * `styles` :JSON : 对话框样式设置
	 *
	 * `payItems` :Array<JSON> : 付款项
	 *
	 * `mask` :string : 对话框遮罩颜色
	 */
	payDialog(params:UIAlert_payDialog_Params, callback?: (ret:JSON) => void):void

	/** 关闭对话框*/ 
	close():void

}
interface UIAlert_popImage_Params {
	/**图片路径（支持widget:// fs://）*/ 
	imagePath:string,

	/**图片宽度*/ 
	imageW:number,

	/**图片高度*/ 
	imageH:number,

	/**遮罩颜色*/ 
	mask:string,

}

interface UIAlert_selectedList_Params {
	/**列表标题*/ 
	title:string,

	/**列表数据*/ 
	datas:JSON,

	/**对话框样式*/ 
	styles:JSON,

	/**对话框遮罩颜色*/ 
	mask:string,

	/**默认选中项*/ 
	selectedIndex:number,

}

interface UIAlert_showTips_Params {
	/**图片路径（支持widget:// fs://）*/ 
	imagePath:string,

	/**提示内容*/ 
	content:string,

	/**底部按钮标题*/ 
	btnTitle:string,

	/**对话框样式设置*/ 
	styles:JSON,

	/**对话框遮罩颜色*/ 
	mask:string,

}

interface UIAlert_price_Params {
	/**对话框样式设置*/ 
	styles:JSON,

	/**对话框遮罩颜色*/ 
	mask:string,

}

interface UIAlert_hint_Params {
	/**对话框样式设置*/ 
	styles:JSON,

	/**对话框遮罩颜色*/ 
	mask:string,

}

interface UIAlert_paySuccess_Params {
	/**对话框样式设置*/ 
	styles:JSON,

	/**对话框遮罩颜色*/ 
	mask:string,

}

interface UIAlert_payDialog_Params {
	/**对话框样式设置*/ 
	styles:JSON,

	/**付款项*/ 
	payItems:Array<JSON>,

	/**对话框遮罩颜色*/ 
	mask:string,

}

interface kLoading {
	/**
	 * `显示加载框`
	 * ========params==========
	 *
	 * `type` :any : （必选项）加载的效果，值的范围0-22，超过的默认为0，效果参照模块效果图
	 *
	 * `size` :any : （可选项） 加载框的大小
	 *
	 * `color` :string : （可选项）加载效果的颜色，值为6位数的颜色，例如 #ffffff
	 */
	show(params:kLoading_show_Params):void

	/** 关闭加载框*/ 
	hide():void

	/** 当需要更改加载的类型时，可以先调用destory来销毁之前的动画类型*/ 
	destory():void

}
interface kLoading_show_Params {
	/**（必选项）加载的效果，值的范围0-22，超过的默认为0，效果参照模块效果图*/ 
	type:any,

	/**（可选项） 加载框的大小*/ 
	size?:any,

	/**（可选项）加载效果的颜色，值为6位数的颜色，例如 #ffffff*/ 
	color?:string,

}

interface UISwitchButton {
	/**
	 * `打开按钮`
	 * ========params==========
	 *
	 * `id` :string : 按钮的id
	 *
	 * `state` :boolean : 开关状态
	 *
	 * `rect` :JSON : 按钮的宽高及位置设置
	 *
	 * `styles` :JSON : 按钮样式的设计
	 *
	 * `fixed` :boolean : 是否将按钮固定到窗口或frame上，是否跟随窗口上下滚动，可为空
	 *
	 * `fixedOn` :string : （可选项）按钮固定到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:UISwitchButton_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `隐藏按钮`
	 * ========params==========
	 *
	 * `id` :string : 按钮的id
	 */
	hide(params:UISwitchButton_hide_Params):void

	/**
	 * `显示按钮`
	 * ========params==========
	 *
	 * `id` :string : 按钮的id
	 */
	show(params:UISwitchButton_show_Params):void

	/**
	 * `打开`
	 * ========params==========
	 *
	 * `id` :string : 按钮的id
	 */
	turnOn(params:UISwitchButton_turnOn_Params):void

	/** 关闭*/ 
	turnOff():void

	/**
	 * `获取按钮的开关状态`
	 * ========params==========
	 *
	 * `id` :string : 按钮的id
	 */
	getState(params:UISwitchButton_getState_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭按钮`
	 * ========params==========
	 *
	 * `id` :string : 按钮的id
	 */
	close(params:UISwitchButton_close_Params):void

}
interface UISwitchButton_open_Params {
	/**按钮的id*/ 
	id:string,

	/**开关状态*/ 
	state:boolean,

	/**按钮的宽高及位置设置*/ 
	rect:JSON,

	/**按钮样式的设计*/ 
	styles:JSON,

	/**是否将按钮固定到窗口或frame上，是否跟随窗口上下滚动，可为空*/ 
	fixed:boolean,

	/**（可选项）按钮固定到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface UISwitchButton_hide_Params {
	/**按钮的id*/ 
	id:string,

}

interface UISwitchButton_show_Params {
	/**按钮的id*/ 
	id:string,

}

interface UISwitchButton_turnOn_Params {
	/**按钮的id*/ 
	id:string,

}

interface UISwitchButton_getState_Params {
	/**按钮的id*/ 
	id:string,

}

interface UISwitchButton_close_Params {
	/**按钮的id*/ 
	id:string,

}

interface UIScrollPromptView {
	/**
	 * `打开模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :JSON : 模块的图片路径数组，及说明文字数组
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `placeholderImg` :string : （可选项）网络图片未加载完毕时，模块显示的占位图片，要求本地路径（fs://、widget://）
	 *
	 * `contentMode` :string : （可选项）图片填充模式
	 *
	 * `interval` :number : （可选项）图片轮换时间间隔，单位是秒（s）
	 *
	 * `auto` :boolean : （可选项）图片是否自动播放
	 *
	 * `loop` :boolean : （可选项）图片是否循环播放
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:UIScrollPromptView_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭模块*/ 
	close():void

	/** 显示模块*/ 
	show():void

	/** 隐藏模块*/ 
	hide():void

	/**
	 * `指定当前项`
	 * ========params==========
	 *
	 * `index` :number : （可选项）索引值
	 */
	setCurrentIndex(params:UIScrollPromptView_setCurrentIndex_Params):void

	/**
	 * `更新模块数据`
	 * ========params==========
	 *
	 * `data` :JSON : 模块的图片路径数组，及说明文字数组
	 */
	reloadData(params:UIScrollPromptView_reloadData_Params):void

	/**
	 * `事件监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件名称，取值范围：'scroll'（图片滚动事件）
	 */
	addEventListener(params:UIScrollPromptView_addEventListener_Params, callback?: (ret:JSON) => void):void

	/** 清除缓存到本地的网络图片，**本接口只清除本模块缓存的数据，若要清除 app 缓存的所有数据则调用api.clearCache***/ 
	clearCache():void

}
interface UIScrollPromptView_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**模块的图片路径数组，及说明文字数组*/ 
	data:JSON,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）网络图片未加载完毕时，模块显示的占位图片，要求本地路径（fs://、widget://）*/ 
	placeholderImg?:string,

	/**（可选项）图片填充模式*/ 
	contentMode?:string,

	/**（可选项）图片轮换时间间隔，单位是秒（s）*/ 
	interval?:number,

	/**（可选项）图片是否自动播放*/ 
	auto?:boolean,

	/**（可选项）图片是否循环播放*/ 
	loop?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIScrollPromptView_setCurrentIndex_Params {
	/**（可选项）索引值*/ 
	index?:number,

}

interface UIScrollPromptView_reloadData_Params {
	/**模块的图片路径数组，及说明文字数组*/ 
	data:JSON,

}

interface UIScrollPromptView_addEventListener_Params {
	/**监听的事件名称，取值范围：'scroll'（图片滚动事件）*/ 
	name:string,

}

interface iOSDialog {
	/**
	 * `类似iOS的底部弹出列表选择`
	 * ========params==========
	 *
	 * `title` :string : 底部弹出框的标题
	 *
	 * `items` :Array : 每个列表项的标题
	 */
	actionSheetDialog(params:iOSDialog_actionSheetDialog_Params, callback?: (ret:JSON) => void):void

	/**
	 * `类似iOS的弹出框，可选择显示一个或者两个按钮`
	 * ========params==========
	 *
	 * `title` :string : (可选)弹出框的标题
	 *
	 * `msg` :string : 弹出框显示的文字
	 *
	 * `positive` :string : （可选）确定按钮的标题
	 *
	 * `negative` :string : （可选）取消按钮的标题
	 */
	alertDialog(params:iOSDialog_alertDialog_Params, callback?: (ret:JSON) => void):void

}
interface iOSDialog_actionSheetDialog_Params {
	/**底部弹出框的标题*/ 
	title:string,

	/**每个列表项的标题*/ 
	items:Array,

}

interface iOSDialog_alertDialog_Params {
	/**(可选)弹出框的标题*/ 
	title?:string,

	/**弹出框显示的文字*/ 
	msg:string,

	/**（可选）确定按钮的标题*/ 
	positive?:string,

	/**（可选）取消按钮的标题*/ 
	negative?:string,

}

interface UIChatUnit {
	/** 打开聊天输入框*/ 
	open(callback?: (ret:JSON) => void):void

	/** 录音面板监听*/ 
	recordPanelListener():void

	/** 点击选择收礼人监听  **注意:仅在isGroupChat为true的情况下有效***/ 
	giftsToolListener():void

	/**
	 * `设置礼物数据`
	 * ========params==========
	 *
	 * `styles` :JSON : （可选项）附加功能面板按钮样式配置
	 *
	 * `buttons` :Array : 附加功能面板按钮信息集合，可分页显示
	 */
	setGiftDatas(params:UIChatUnit_setGiftDatas_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新礼物信息（在群聊情况下选择群成员返回后可使用该方法更新头像及昵称）`
	 * ========params==========
	 *
	 * `avaterPath` :string : （可选项）送礼人的头像(支持 widget:// & fs://)
	 *
	 * `nickText` :string : （可选项）收礼人的昵称
	 */
	updateGiftInfo(params:UIChatUnit_updateGiftInfo_Params):void

	/** 关闭聊天输入框*/ 
	close():void

	/** 显示聊天输入框*/ 
	show():void

	/** 隐藏聊天输入框*/ 
	hide():void

	/** 弹出键盘*/ 
	popupKeyboard():void

	/** 收起键盘*/ 
	closeKeyboard():void

	/** 收起录音面板*/ 
	hideRecordPanel():void

	/**
	 * `获取或设置聊天输入框的内容`
	 * ========params==========
	 *
	 * `msg` :string : （可选项）聊天输入框的内容，若不传则返回输入框的值
	 */
	value(params:UIChatUnit_value_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向聊天输入框的指定位置插入内容`
	 * ========params==========
	 *
	 * `index` :number : （可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。**
	 *
	 * `msg` :string : （可选项）要插入的内容
	 */
	insertValue(params:UIChatUnit_insertValue_Params):void

	/**
	 * `添加输入框相关事件的监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件类型
	 */
	chatBoxListener(params:UIChatUnit_chatBoxListener_Params, callback?: (ret:JSON) => void):void

	/** 清空输入框文本*/ 
	clearText():void

	/** 重置模块*/ 
	reset():void

	/** 显示礼物面板*/ 
	showGiftPanel():void

	/** 显示录音面板*/ 
	showRecordPanel():void

	/** 获取当前可见的panel*/ 
	getCurrentVisiblePanel():void

	/** 设置所有按钮可用/不可用*/ 
	setEnableAllBtns():void

}
interface UIChatUnit_setGiftDatas_Params {
	/**（可选项）附加功能面板按钮样式配置*/ 
	styles?:JSON,

	/**附加功能面板按钮信息集合，可分页显示*/ 
	buttons:Array,

}

interface UIChatUnit_updateGiftInfo_Params {
	/**（可选项）送礼人的头像(支持 widget:// & fs://)*/ 
	avaterPath?:string,

	/**（可选项）收礼人的昵称*/ 
	nickText?:string,

}

interface UIChatUnit_value_Params {
	/**（可选项）聊天输入框的内容，若不传则返回输入框的值*/ 
	msg?:string,

}

interface UIChatUnit_insertValue_Params {
	/**（可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。***/ 
	index?:number,

	/**（可选项）要插入的内容*/ 
	msg?:string,

}

interface UIChatUnit_chatBoxListener_Params {
	/**监听的事件类型*/ 
	name:string,

}

interface UIMultiSelector {
	/**
	 * `打开选择器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `text` :JSON : （可选项）模块相应文字设置
	 *
	 * `max` :number : （可选项）最多允许同时选中的项数；当值为 0 时可选中所有项，若本字段值大于0则全选项不显示；当值为其它时，选择超过 max 的选项，选项选择无效且回调 ret-> eventType 返回 “overflow”
	 *
	 * `singleSelection` :boolean : （可选项）是否为单选框；参数值为 true 时，忽略参数 max，模块呈 “单选项” 模式状态，即选择第二项将自动取消前一项的已选中状态
	 *
	 * `styles` :JSON : （可选项）模块的样式设置
	 *
	 * `animation` :boolean : （可选项）打开关闭时是否显示滑入滑出动画
	 *
	 * `maskClose` :boolean : （可选项）用户点击遮罩层（选择器以外的区域）时，是否关闭选择器
	 *
	 * `items` :Array<JSON> : 选择器的数据
	 */
	open(params:UIMultiSelector_open_Params, callback?: (ret:JSON) => void):void

	/** 显示已隐藏的选择器*/ 
	show():void

	/** 隐藏选择器（并未从内存清除）*/ 
	hide():void

	/** 关闭选择器（从内存清除）*/ 
	close():void

}
interface UIMultiSelector_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块相应文字设置*/ 
	text?:JSON,

	/**（可选项）最多允许同时选中的项数；当值为 0 时可选中所有项，若本字段值大于0则全选项不显示；当值为其它时，选择超过 max 的选项，选项选择无效且回调 ret-> eventType 返回 “overflow”*/ 
	max?:number,

	/**（可选项）是否为单选框；参数值为 true 时，忽略参数 max，模块呈 “单选项” 模式状态，即选择第二项将自动取消前一项的已选中状态*/ 
	singleSelection?:boolean,

	/**（可选项）模块的样式设置*/ 
	styles?:JSON,

	/**（可选项）打开关闭时是否显示滑入滑出动画*/ 
	animation?:boolean,

	/**（可选项）用户点击遮罩层（选择器以外的区域）时，是否关闭选择器*/ 
	maskClose?:boolean,

	/**选择器的数据*/ 
	items:Array<JSON>,

}

interface button {
}
interface brokenLine {
}
interface UIPieChart {
	/**
	 * `**注意:请保证 所有数值加起来不为0 否则无实际意义 **`
	 * ========params==========
	 *
	 * `x` :number : （可选项）圆心坐标
	 *
	 * `y` :number : （可选项）圆心坐标
	 *
	 * `radius` :number : （可选项）圆半径
	 *
	 * `type` :string : （可选项）饼图样式
	 *
	 * `isAnimated` :boolean : （可选项）是否带动画
	 *
	 * `center` :JSON : （可选项）饼形图中间标题样式设置(仅圆环样式下有效)
	 *
	 * `elements` :Array : 模块字典对象组成的数组
	 *
	 * `fixedOn` :string : （可选项）添加到哪个frame，与fixed一起使用
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:UIPieChart_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新展示数据`
	 * ========params==========
	 *
	 * `id` :number : 操作的视图的id
	 *
	 * `elements` :Array : 模块字典对象组成的数组
	 */
	reloadData(params:UIPieChart_reloadData_Params, callback?: (ret:JSON) => void):void

	/** 重设模块视图的位置大小*/ 
	setFrame():void

	/**
	 * `关闭饼图`
	 * ========params==========
	 *
	 * `id` :number : 要关闭的饼图的id
	 */
	close(params:UIPieChart_close_Params):void

	/**
	 * `隐藏饼图`
	 * ========params==========
	 *
	 * `id` :number : 要隐藏的饼图的id
	 */
	hide(params:UIPieChart_hide_Params):void

	/**
	 * `显示已隐藏的饼形图`
	 * ========params==========
	 *
	 * `id` :number : 要显示的饼图的id
	 */
	show(params:UIPieChart_show_Params):void

}
interface UIPieChart_open_Params {
	/**（可选项）圆心坐标*/ 
	x?:number,

	/**（可选项）圆心坐标*/ 
	y?:number,

	/**（可选项）圆半径*/ 
	radius?:number,

	/**（可选项）饼图样式*/ 
	type?:string,

	/**（可选项）是否带动画*/ 
	isAnimated?:boolean,

	/**（可选项）饼形图中间标题样式设置(仅圆环样式下有效)*/ 
	center?:JSON,

	/**模块字典对象组成的数组*/ 
	elements:Array,

	/**（可选项）添加到哪个frame，与fixed一起使用*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIPieChart_reloadData_Params {
	/**操作的视图的id*/ 
	id:number,

	/**模块字典对象组成的数组*/ 
	elements:Array,

}

interface UIPieChart_close_Params {
	/**要关闭的饼图的id*/ 
	id:number,

}

interface UIPieChart_hide_Params {
	/**要隐藏的饼图的id*/ 
	id:number,

}

interface UIPieChart_show_Params {
	/**要显示的饼图的id*/ 
	id:number,

}

interface groupList {
}
interface thwartwiseBarChart {
	/**
	 * `打开横排柱状图模块，当数据条数超过当前显示区域时，可上下滑动查看`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 横排柱形图关键结点的数据，数据排列方式为从下而上
	 *
	 * `styles` :any : （可选项）模块视图内元素样式设置
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:thwartwiseBarChart_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重新加载数据，当数据条数超过当前显示区域时，可上下滑动查看`
	 * ========params==========
	 *
	 * `id` :number : 要刷新数据的模块的 id
	 *
	 * `data` :Array : 横排柱形图关键结点的数据，数据排列方式为从下而上
	 */
	reloadData(params:thwartwiseBarChart_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭柱状图，并从内存里清除`
	 * ========params==========
	 *
	 * `id` :number : 要关闭的模块的 id
	 */
	close(params:thwartwiseBarChart_close_Params):void

	/**
	 * `隐藏柱状图视图，并没有从内存里清除，可调用 show 接口显示`
	 * ========params==========
	 *
	 * `id` :number : 要隐藏的模块的 id
	 */
	hide(params:thwartwiseBarChart_hide_Params):void

	/**
	 * `显示已隐藏的柱状图视图`
	 * ========params==========
	 *
	 * `id` :number : 要显示的模块的 id
	 */
	show(params:thwartwiseBarChart_show_Params):void

}
interface thwartwiseBarChart_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**横排柱形图关键结点的数据，数据排列方式为从下而上*/ 
	data:Array,

	/**（可选项）模块视图内元素样式设置*/ 
	styles?:any,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface thwartwiseBarChart_reloadData_Params {
	/**要刷新数据的模块的 id*/ 
	id:number,

	/**横排柱形图关键结点的数据，数据排列方式为从下而上*/ 
	data:Array,

}

interface thwartwiseBarChart_close_Params {
	/**要关闭的模块的 id*/ 
	id:number,

}

interface thwartwiseBarChart_hide_Params {
	/**要隐藏的模块的 id*/ 
	id:number,

}

interface thwartwiseBarChart_show_Params {
	/**要显示的模块的 id*/ 
	id:number,

}

interface doubleSlider {
	/**
	 * `打开doubleSlider`
	 * ========params==========
	 *
	 * `orientation` :string : （可选项）滑动控件的朝向：vertical | horizontal
	 *
	 * `animation` :boolean : （可选项）当值发生改变时，如 click 事件，是否为滑块的移动显示动画
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸(底部滑杆)
	 *
	 * `bubble` :JSON : 提示气泡设置
	 *
	 * `handler` :JSON : 滑块设置
	 *
	 * `bar` :JSON : 滑动条设置
	 *
	 * `value` :JSON : 滑动控件的值设置
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 *
	 * `frequency` :string : （可选项）滑动时回调函数触发的频率
	 */
	open(params:doubleSlider_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置doubleSlider的值`
	 * ========params==========
	 *
	 * `id` :number : 指定滑动控件的唯一标识，当 open 成功后返回
	 *
	 * `value` :JSON : 要设置的值
	 */
	setValue(params:doubleSlider_setValue_Params):void

	/**
	 * `锁定doubleSlider的值`
	 * ========params==========
	 *
	 * `id` :string : 指定滑动控件的唯一标识，当 open 成功后返回
	 *
	 * `lock` :boolean : （可选项）是否锁定指定模块
	 */
	lock(params:doubleSlider_lock_Params):void

	/**
	 * `关闭doubleSlider`
	 * ========params==========
	 *
	 * `id` :string : 指定滑动控件的唯一标识，当 open 成功后返回
	 */
	close(params:doubleSlider_close_Params):void

	/** 显示双向滑动条*/ 
	show():void

	/** 隐藏双向滑动条*/ 
	hide():void

	/** 若滑动选择器配置显示了气泡，通过调用此接口可自定义气泡显示内容，此时模块会忽略选择器的气泡显示的当前值（open -> bubble 配置显示的内容-------prefix + 当前值 + suffix）。*/ 
	setBubble():void

}
interface doubleSlider_open_Params {
	/**（可选项）滑动控件的朝向：vertical | horizontal*/ 
	orientation?:string,

	/**（可选项）当值发生改变时，如 click 事件，是否为滑块的移动显示动画*/ 
	animation?:boolean,

	/**（可选项）模块的位置及尺寸(底部滑杆)*/ 
	rect?:JSON,

	/**提示气泡设置*/ 
	bubble:JSON,

	/**滑块设置*/ 
	handler:JSON,

	/**滑动条设置*/ 
	bar:JSON,

	/**滑动控件的值设置*/ 
	value:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

	/**（可选项）滑动时回调函数触发的频率*/ 
	frequency?:string,

}

interface doubleSlider_setValue_Params {
	/**指定滑动控件的唯一标识，当 open 成功后返回*/ 
	id:number,

	/**要设置的值*/ 
	value:JSON,

}

interface doubleSlider_lock_Params {
	/**指定滑动控件的唯一标识，当 open 成功后返回*/ 
	id:string,

	/**（可选项）是否锁定指定模块*/ 
	lock?:boolean,

}

interface doubleSlider_close_Params {
	/**指定滑动控件的唯一标识，当 open 成功后返回*/ 
	id:string,

}

interface UIChatBar {
	/** 打开聊天输入框*/ 
	open(callback?: (ret:JSON) => void):void

	/** 关闭聊天输入框*/ 
	close():void

	/** 显示聊天输入框*/ 
	show():void

	/** 隐藏聊天输入框*/ 
	hide():void

	/**
	 * `弹出自定义、附加功能面板`
	 * ========params==========
	 *
	 * `target` :string : 操作的面板类型，取值范围如下：
	 */
	popupBoard(params:UIChatBar_popupBoard_Params):void

	/** 收起自定义、附加功能面板*/ 
	closeBoard():void

	/** 弹出键盘*/ 
	popupKeyboard():void

	/** 收起键盘*/ 
	closeKeyboard():void

	/**
	 * `获取或设置聊天输入框的内容`
	 * ========params==========
	 *
	 * `msg` :string : （可选项）聊天输入框的内容，若不传则返回输入框的值
	 */
	value(params:UIChatBar_value_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向聊天输入框的指定位置插入内容`
	 * ========params==========
	 *
	 * `index` :number : （可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。**
	 *
	 * `msg` :string : （可选项）要插入的内容
	 */
	insertValue(params:UIChatBar_insertValue_Params):void

	/**
	 * `事件监听`
	 * ========params==========
	 *
	 * `target` :string : 事件的目标对象
	 *
	 * `name` :string : 监听的事件类型
	 */
	addEventListener(params:UIChatBar_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重设聊天输入框的占位提示文本`
	 * ========params==========
	 *
	 * `placeholder` :string : （可选项）占位提示文本，若不传或传空则表示清空占位提示内容
	 */
	setPlaceholder(params:UIChatBar_setPlaceholder_Params):void

	/**
	 * `重新加载（刷新）附加功能面板，**open时必须添加附加功能按钮及其面板参数**`
	 * ========params==========
	 *
	 * `extras` :JSON : （可选项）点击附加功能按钮，打开的附加功能面板的按钮样式，配合 extrasBtn 一起使用，若 extrasBtn 参数内 normalImg 属性不传则此参数可不传
	 */
	reloadExtraBoard(params:UIChatBar_reloadExtraBoard_Params):void

}
interface UIChatBar_popupBoard_Params {
	/**操作的面板类型，取值范围如下：*/ 
	target:string,

}

interface UIChatBar_value_Params {
	/**（可选项）聊天输入框的内容，若不传则返回输入框的值*/ 
	msg?:string,

}

interface UIChatBar_insertValue_Params {
	/**（可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。***/ 
	index?:number,

	/**（可选项）要插入的内容*/ 
	msg?:string,

}

interface UIChatBar_addEventListener_Params {
	/**事件的目标对象*/ 
	target:string,

	/**监听的事件类型*/ 
	name:string,

}

interface UIChatBar_setPlaceholder_Params {
	/**（可选项）占位提示文本，若不传或传空则表示清空占位提示内容*/ 
	placeholder?:string,

}

interface UIChatBar_reloadExtraBoard_Params {
	/**（可选项）点击附加功能按钮，打开的附加功能面板的按钮样式，配合 extrasBtn 一起使用，若 extrasBtn 参数内 normalImg 属性不传则此参数可不传*/ 
	extras?:JSON,

}

interface UIAlbumSelector {
	/** 判断当前 App 访问系统相册权限*/ 
	authorizationStatus():void

	/**
	 * `打开多媒体资源选择器，打开后会全屏显示`
	 * ========params==========
	 *
	 * `maxAlert` :JSON : （可选项）超出设置的最大选取数时的提示
	 *
	 * `type` :string : （可选项）显示图片或视频
	 *
	 * `selectedAll` :boolean : （可选项）当type为all时，视频和图片能不能同时选中，仅当type为all时本参数有意义。若为false则非首选资源类型元素上置有遮罩层变为不可选状态（仅iOS支持）
	 *
	 * `selectedNumber` :boolean : （可选项）照片选中状态是否显示数字，设置为true后注意selected（选中图标）不建议使用模块默认图片（仅iOS支持）
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式配置
	 */
	open(params:UIAlbumSelector_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扫描系统多媒体资源，可以通过 Web 代码自定义多选界面。`
	 * ========params==========
	 *
	 * `type` :string : 返回的资源种类；默认：'all'
	 *
	 * `count` :number : （可选项）每次返回的资源数量，剩余资源可用 fetch 接口遍历（仅iOS支持，android返回所有资源）
	 *
	 * `sort` :JSON : （可选项）图片排序方式
	 *
	 * `thumbnail` :JSON : （可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口 clearCache()。（仅iOS支持，android获取系统缩略图）
	 */
	scan(params:UIAlbumSelector_scan_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取系统多媒体资源的分组`
	 * ========params==========
	 *
	 * `type` :string : 返回的资源种类；默认：'all'
	 *
	 * `thumbnail` :JSON : （可选项）返回的分组的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口 clearCache()。（仅iOS支持，android获取系统缩略图）
	 */
	scanGroups(params:UIAlbumSelector_scanGroups_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据分组id，扫描系统多媒体资源。（android根据分组name返回）`
	 * ========params==========
	 *
	 * `groupId` :string : 分组id（仅iOS支持）
	 *
	 * `groupName` :string : 分组名称（仅android支持）
	 *
	 * `type` :string : 分组类型；默认：'all'
	 *
	 * `count` :number : （可选项）每次返回的资源数量，剩余资源可用 fetchGroup 接口遍历（仅iOS支持，android返回全部资源）
	 *
	 * `sort` :JSON : （可选项）图片排序方式
	 *
	 * `thumbnail` :JSON : （可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口 clearCache()。（仅iOS支持，android返回系统缩略图）
	 */
	scanByGroupId(params:UIAlbumSelector_scanByGroupId_Params, callback?: (ret:JSON) => void):void

	/**
	 * `视频路径转化（仅iOS支持）`
	 * ========params==========
	 *
	 * `path` :string : 要转换的视频路径
	 */
	transVideoPath(params:UIAlbumSelector_transVideoPath_Params, callback?: (ret:JSON) => void):void

	/** 清除本模块缓存到沙盒的图片、视频，**本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

}
interface UIAlbumSelector_open_Params {
	/**（可选项）超出设置的最大选取数时的提示*/ 
	maxAlert?:JSON,

	/**（可选项）显示图片或视频*/ 
	type?:string,

	/**（可选项）当type为all时，视频和图片能不能同时选中，仅当type为all时本参数有意义。若为false则非首选资源类型元素上置有遮罩层变为不可选状态（仅iOS支持）*/ 
	selectedAll?:boolean,

	/**（可选项）照片选中状态是否显示数字，设置为true后注意selected（选中图标）不建议使用模块默认图片（仅iOS支持）*/ 
	selectedNumber?:boolean,

	/**（可选项）模块各部分的样式配置*/ 
	styles?:JSON,

}

interface UIAlbumSelector_scan_Params {
	/**返回的资源种类；默认：'all'*/ 
	type:string,

	/**（可选项）每次返回的资源数量，剩余资源可用 fetch 接口遍历（仅iOS支持，android返回所有资源）*/ 
	count?:number,

	/**（可选项）图片排序方式*/ 
	sort?:JSON,

	/**（可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口 clearCache()。（仅iOS支持，android获取系统缩略图）*/ 
	thumbnail?:JSON,

}

interface UIAlbumSelector_scanGroups_Params {
	/**返回的资源种类；默认：'all'*/ 
	type:string,

	/**（可选项）返回的分组的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口 clearCache()。（仅iOS支持，android获取系统缩略图）*/ 
	thumbnail?:JSON,

}

interface UIAlbumSelector_scanByGroupId_Params {
	/**分组id（仅iOS支持）*/ 
	groupId:string,

	/**分组名称（仅android支持）*/ 
	groupName:string,

	/**分组类型；默认：'all'*/ 
	type:string,

	/**（可选项）每次返回的资源数量，剩余资源可用 fetchGroup 接口遍历（仅iOS支持，android返回全部资源）*/ 
	count?:number,

	/**（可选项）图片排序方式*/ 
	sort?:JSON,

	/**（可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口 clearCache()。（仅iOS支持，android返回系统缩略图）*/ 
	thumbnail?:JSON,

}

interface UIAlbumSelector_transVideoPath_Params {
	/**要转换的视频路径*/ 
	path:string,

}

interface UIAlbum {
	/**
	 * `打开图片资源选择器，打开后会全屏显示`
	 * ========params==========
	 *
	 * `max` :number : （可选项）最多选择几张图片
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 */
	open(params:UIAlbum_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭图片资源选择器*/ 
	close():void

	/**
	 * `将相册图片地址转换为可以直接使用的本地路径地址（临时文件夹的绝对路径），**相册图片会被拷贝到临时文件夹，调用 api.clearCache 接口可清除该临时图片文件**`
	 * ========params==========
	 *
	 * `path` :string : 要转换的图片路径（在相册库的绝对路径）
	 */
	transPath(params:UIAlbum_transPath_Params, callback?: (ret:JSON) => void):void

	/** 请求相册权限*/ 
	requestAlbumPermissions():void

}
interface UIAlbum_open_Params {
	/**（可选项）最多选择几张图片*/ 
	max?:number,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

}

interface UIAlbum_transPath_Params {
	/**要转换的图片路径（在相册库的绝对路径）*/ 
	path:string,

}

interface UIWebBrowser {
	/**
	 * `打开模块`
	 * ========params==========
	 *
	 * `path` :string : 打开的页面所加载的 html 文件路径，支持本地、网络协议（http://、fs://、widget://）
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `button` :JSON : （可选项）模块上的控制按钮配置，本参数可不传，若不传则不显示控制按钮
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:UIWebBrowser_open_Params, callback?: (ret:JSON) => void):void

	/** 隐藏模块*/ 
	hide():void

	/** 显示已隐藏的模块*/ 
	show():void

	/** 关闭模块*/ 
	close():void

	/**
	 * `重设模块的 rect`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `animation` :boolean : （可选项）重设 rect 时，是否带动画效果
	 */
	setRect(params:UIWebBrowser_setRect_Params):void

	/** 设置按钮选中/取消状态*/ 
	setSelected():void

}
interface UIWebBrowser_open_Params {
	/**打开的页面所加载的 html 文件路径，支持本地、网络协议（http://、fs://、widget://）*/ 
	path:string,

	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块上的控制按钮配置，本参数可不传，若不传则不显示控制按钮*/ 
	button?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIWebBrowser_setRect_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）重设 rect 时，是否带动画效果*/ 
	animation?:boolean,

}

interface noticeView {
	/**
	 * `打开notiveView轮播公告`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `style` :JSON : （可选项）模块的样式
	 *
	 * `icon` :JSON : （可选项）模块左侧图片样式
	 *
	 * `message` :JSON : （可选项）模块轮播公告内容文字样式
	 *
	 * `line` :JSON : （可选项）模块内分割线样式
	 *
	 * `right` :JSON : （可选项）模块右侧文字按钮样式
	 *
	 * `data` :JSON : （可选项）轮播公告的数据源
	 *
	 * `Interval` :number : （可选项）模块公告的轮播频率；单位：s
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:noticeView_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `data` :JSON : （可选项）公告的数据源
	 */
	appendData(params:noticeView_appendData_Params):void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `data` :JSON : （可选项）公告的数据源
	 */
	reloadData(params:noticeView_reloadData_Params):void

}
interface noticeView_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块的样式*/ 
	style?:JSON,

	/**（可选项）模块左侧图片样式*/ 
	icon?:JSON,

	/**（可选项）模块轮播公告内容文字样式*/ 
	message?:JSON,

	/**（可选项）模块内分割线样式*/ 
	line?:JSON,

	/**（可选项）模块右侧文字按钮样式*/ 
	right?:JSON,

	/**（可选项）轮播公告的数据源*/ 
	data?:JSON,

	/**（可选项）模块公告的轮播频率；单位：s*/ 
	Interval?:number,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface noticeView_appendData_Params {
	/**（可选项）公告的数据源*/ 
	data?:JSON,

}

interface noticeView_reloadData_Params {
	/**（可选项）公告的数据源*/ 
	data?:JSON,

}

interface UIListSearch {
	/**
	 * `打开列表模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `contacts` :Array : 列表数据源
	 *
	 * `label` :JSON : （可选项）底部标签配置，若不传则不显示底部标签。此参数即将废弃，用labels参数替代，若传了labels参数，label参数将被忽略。
	 *
	 * `labels` :Array<JSON> : （可选项）底部标签配置，若不传则不显示底部标签。
	 *
	 * `labelEnabled` :boolean : （可选项）底部标签是否可以点击交互，若设置为能点击，点击后会回调label的索引及内容。
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:UIListSearch_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭数据列表模块，从内存里清除*/ 
	close():void

	/** 显示已隐藏的列表模块*/ 
	show():void

	/** 隐藏列表模块，并未从内存里清除*/ 
	hide():void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `contacts` :Array : 列表数据源
	 *
	 * `label` :JSON : （可选项）底部标签配置，若不传则不显示底部标签。此参数即将废弃，用labels参数替代，若传了labels参数，label参数将被忽略。
	 *
	 * `labels` :Array<JSON> : （可选项）底部标签配置，若不传则不显示底部标签。
	 */
	reloadData(params:UIListSearch_reloadData_Params):void

}
interface UIListSearch_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表数据源*/ 
	contacts:Array,

	/**（可选项）底部标签配置，若不传则不显示底部标签。此参数即将废弃，用labels参数替代，若传了labels参数，label参数将被忽略。*/ 
	label?:JSON,

	/**（可选项）底部标签配置，若不传则不显示底部标签。*/ 
	labels?:Array<JSON>,

	/**（可选项）底部标签是否可以点击交互，若设置为能点击，点击后会回调label的索引及内容。*/ 
	labelEnabled?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface UIListSearch_reloadData_Params {
	/**列表数据源*/ 
	contacts:Array,

	/**（可选项）底部标签配置，若不传则不显示底部标签。此参数即将废弃，用labels参数替代，若传了labels参数，label参数将被忽略。*/ 
	label?:JSON,

	/**（可选项）底部标签配置，若不传则不显示底部标签。*/ 
	labels?:Array<JSON>,

}

interface keyboard {
	/**
	 * `打开自定义的数字键盘界面。键盘的默认高度为203。位置的设置请自己进行处理。`
	 * ========params==========
	 *
	 * `x` :number : （必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `y` :number : （必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `dotLable` :string : （可选项）自定义数字键盘dot显示文本
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	openKeyboard(params:keyboard_openKeyboard_Params, callback?: (ret:JSON) => void):void

	/** 隐藏数字键盘*/ 
	hiddenKeyboard(callback?: (ret:JSON) => void):void

	/** 显示被隐藏的数字键盘*/ 
	showKeyboard(callback?: (ret:JSON) => void):void

	/** 关闭打开的数字键盘*/ 
	closeKeyboard(callback?: (ret:JSON) => void):void

	/**
	 * `打开自定义的文本编辑框，(注意：目前暂时只支持从文本最后删除和插入，不支持文本中进行插入和删除)。`
	 * ========params==========
	 *
	 * `x` :number : （必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `y` :number : （必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `w` :number : （可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度
	 *
	 * `h` :number : （可选项）模块的高度；默认：所属的 Window 或 Frame 的高度
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `message` :string : （可选项）默认要显示的文本消息内容。
	 *
	 * `placeholder` :string : （可选项）当内容为空时显示的文本提示内容。
	 */
	openEditText(params:keyboard_openEditText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开自定义的26位字母键盘界面。键盘的默认高度为203。位置的设置请自己进行处理。`
	 * ========params==========
	 *
	 * `x` :number : （必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `y` :number : （必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :string : （可选项）alt键按切换后左下角显示文字
	 *
	 * `returnLabel` :string : （可选项）右下角键按显示文字
	 *
	 * `spaceLabel` :string : （可选项）空格键按钮显示文字
	 *
	 * `charDefault` :Array : （必须项）默认显示在键盘上的信息，长度必须位26，可为小写26字母
	 *
	 * `charShift` :Array : （必须项）点击shift按钮切换在键盘上的信息，长度必须位26，可为大写26字母
	 *
	 * `charAlt` :Array : （必须项）点击alt按钮切换在键盘上的信息，长度必须位26，可为数字和特殊符号集合
	 */
	openCustomKeyboard(params:keyboard_openCustomKeyboard_Params, callback?: (ret:JSON) => void):void

	/** 隐藏字母键盘*/ 
	hiddenCustomKeyboard(callback?: (ret:JSON) => void):void

	/** 显示被隐藏的字母键盘*/ 
	showCustomKeyboard(callback?: (ret:JSON) => void):void

	/** 关闭打开的字母键盘*/ 
	closeCustomKeyboard(callback?: (ret:JSON) => void):void

}
interface keyboard_openKeyboard_Params {
	/**（必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）*/ 
	x:number,

	/**（必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）*/ 
	y:number,

	/**（可选项）自定义数字键盘dot显示文本*/ 
	dotLable?:string,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface keyboard_openEditText_Params {
	/**（必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）*/ 
	x:number,

	/**（必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）*/ 
	y:number,

	/**（可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度*/ 
	w?:number,

	/**（可选项）模块的高度；默认：所属的 Window 或 Frame 的高度*/ 
	h?:number,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）默认要显示的文本消息内容。*/ 
	message?:string,

	/**（可选项）当内容为空时显示的文本提示内容。*/ 
	placeholder?:string,

}

interface keyboard_openCustomKeyboard_Params {
	/**（必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）*/ 
	x:number,

	/**（必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）*/ 
	y:number,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）alt键按切换后左下角显示文字*/ 
	fixed?:string,

	/**（可选项）右下角键按显示文字*/ 
	returnLabel?:string,

	/**（可选项）空格键按钮显示文字*/ 
	spaceLabel?:string,

	/**（必须项）默认显示在键盘上的信息，长度必须位26，可为小写26字母*/ 
	charDefault:Array,

	/**（必须项）点击shift按钮切换在键盘上的信息，长度必须位26，可为大写26字母*/ 
	charShift:Array,

	/**（必须项）点击alt按钮切换在键盘上的信息，长度必须位26，可为数字和特殊符号集合*/ 
	charAlt:Array,

}

interface UIChatInput {
	/** 打开聊天输入框*/ 
	open(callback?: (ret:JSON) => void):void

	/** 关闭聊天输入框*/ 
	close():void

	/** 显示聊天输入框*/ 
	show():void

	/** 隐藏聊天输入框*/ 
	hide():void

	/**
	 * `弹出表情、附加功能面板`
	 * ========params==========
	 *
	 * `target` :string : 操作的面板类型，取值范围如下：
	 */
	popupBoard(params:UIChatInput_popupBoard_Params):void

	/** 收起表情、附加功能面板*/ 
	closeBoard():void

	/** 弹出键盘*/ 
	popupKeyboard():void

	/** 收起键盘*/ 
	closeKeyboard():void

	/**
	 * `获取或设置聊天输入框的内容`
	 * ========params==========
	 *
	 * `msg` :string : （可选项）聊天输入框的内容，若不传则返回输入框的值
	 */
	value(params:UIChatInput_value_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向聊天输入框的指定位置插入内容`
	 * ========params==========
	 *
	 * `index` :number : （可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。**
	 *
	 * `msg` :string : （可选项）要插入的内容
	 */
	insertValue(params:UIChatInput_insertValue_Params):void

	/**
	 * `事件监听`
	 * ========params==========
	 *
	 * `target` :string : 事件的目标对象
	 *
	 * `name` :string : 监听的事件类型
	 */
	addEventListener(params:UIChatInput_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重设聊天输入框的占位提示文本`
	 * ========params==========
	 *
	 * `placeholder` :string : （可选项）占位提示文本，若不传或传空则表示清空占位提示内容
	 */
	setPlaceholder(params:UIChatInput_setPlaceholder_Params):void

	/**
	 * `重新加载（刷新）附加功能面板，**open时必须添加附加功能按钮及其面板参数**`
	 * ========params==========
	 *
	 * `extras` :JSON : （可选项）点击附加功能按钮，打开的附加功能面板的按钮样式，配合 extrasBtn 一起使用，若 extrasBtn 参数内 normalImg 属性不传则此参数可不传
	 */
	reloadExtraBoard(params:UIChatInput_reloadExtraBoard_Params):void

	/**
	 * `切换输入区域`
	 * ========params==========
	 *
	 * `type` :string : 输入区域类型
	 */
	switchInputArea(params:UIChatInput_switchInputArea_Params):void

	/** 设置切换（输入框/录音按钮）按钮的图标*/ 
	setSwitchBtnIcon():void

}
interface UIChatInput_popupBoard_Params {
	/**操作的面板类型，取值范围如下：*/ 
	target:string,

}

interface UIChatInput_value_Params {
	/**（可选项）聊天输入框的内容，若不传则返回输入框的值*/ 
	msg?:string,

}

interface UIChatInput_insertValue_Params {
	/**（可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。***/ 
	index?:number,

	/**（可选项）要插入的内容*/ 
	msg?:string,

}

interface UIChatInput_addEventListener_Params {
	/**事件的目标对象*/ 
	target:string,

	/**监听的事件类型*/ 
	name:string,

}

interface UIChatInput_setPlaceholder_Params {
	/**（可选项）占位提示文本，若不传或传空则表示清空占位提示内容*/ 
	placeholder?:string,

}

interface UIChatInput_reloadExtraBoard_Params {
	/**（可选项）点击附加功能按钮，打开的附加功能面板的按钮样式，配合 extrasBtn 一起使用，若 extrasBtn 参数内 normalImg 属性不传则此参数可不传*/ 
	extras?:JSON,

}

interface UIChatInput_switchInputArea_Params {
	/**输入区域类型*/ 
	type:string,

}

interface frameTree {
	/**
	 * `打开 frame 并加入树管理`
	 * ========params==========
	 *
	 * `name` :string : frame 名字
	 *
	 * `url` :string : 页面地址，可以为本地文件路径，支持相对路径和绝对路径，以及 widget://、fs://等协议路径，也可以为远程地址
	 *
	 * `rect` :JSON : （可选项）frame 的位置和大小
	 *
	 * `fixedOn` :string : （可选项）父节点frame，如果不写或者""就是win，这样打开的frame就在第1层。想在当前frame打开子frame，可传递api.frameName
	 *
	 * `offsetX` :number : （可选项）绑定相对于父节点的x坐标，添加此参数将忽略rect中的x值
	 *
	 * `offsetY` :number : （可选项）绑定相对于父节点的y坐标，添加此参数将忽略rect中的y值
	 *
	 * `preload` :boolean : （可选项）是否预加载，true会在同层级的底层打开，不会影响前面的frame，如果同层级还没有frame，那么即使true也会看到的
	 */
	openFrame(params:frameTree_openFrame_Params):void

	/**
	 * `关闭 frame 并关闭所有子 frame`
	 * ========params==========
	 *
	 * `name` :string : frame 名字
	 */
	closeFrame(params:frameTree_closeFrame_Params):void

	/**
	 * `在同层中移动显示顺序，子frame也会相应变动`
	 * ========params==========
	 *
	 * `from` :string : 待调整显示顺序的 frame 名字
	 *
	 * `to` :string : （可选项）frame 名字，不传时调整 from 对应 frame 到本层级的最高层，否则调整 from 对应 frame 到此 frame 前面，特殊参数"~frameTreeMin~"，调整 from 对应 frame 到本层级的最低层
	 */
	FrameTo(params:frameTree_FrameTo_Params):void

	/**
	 * `设置 frame 属性，没写的参数和api.setFrameAttr一样,参见[//docs.apicloud.com/Client-API/api#41](//docs.apicloud.com/Client-API/api#41)`
	 * ========params==========
	 *
	 * `name` :string : frame 名字
	 *
	 * `rect` :JSON : （可选项）frame 的位置和大小
	 *
	 * `offsetX` :number : （可选项）绑定相对于父节点的x坐标，添加此参数将忽略rect中的x值
	 *
	 * `offsetY` :number : （可选项）绑定相对于父节点的y坐标，添加此参数将忽略rect中的y值
	 */
	setFrameAttr(params:frameTree_setFrameAttr_Params):void

	/**
	 * `设置 frame 的xy是否绑定到父节点，通过本模块openFrame的 frame 是默认绑定的`
	 * ========params==========
	 *
	 * `name` :string : 待调整绑定的 frame 名字
	 *
	 * `bindX` :boolean : （可选项）是否绑定到父节点的x坐标，如true父节点的x变动时 name 对应 frame 的x也会相应变动，反之则反
	 *
	 * `bindY` :boolean : （可选项）是否绑定到父节点的y坐标，如true父节点的y变动时 name 对应 frame 的y也会相应变动，反之则反
	 *
	 * `x` :number : （可选项）name 对应 frame 的x相对于窗口的坐标改变，这个只是修正了对象内部值，不会立即有所变化，而且也不影响子 frame ，这个只是用来配合frameTree.setFrameAttr时用
	 *
	 * `y` :number : （可选项）name 对应 frame 的y相对于窗口的坐标改变，这个只是修正了对象内部值，不会立即有所变化，而且也不影响子 frame ，这个只是用来配合frameTree.setFrameAttr时用
	 */
	setFrameBind(params:frameTree_setFrameBind_Params):void

	/** 刷新树层级显示，一般不用调用这个函数，如果发现显示层次混乱了就调用一下。*/ 
	update():void

}
interface frameTree_openFrame_Params {
	/**frame 名字*/ 
	name:string,

	/**页面地址，可以为本地文件路径，支持相对路径和绝对路径，以及 widget://、fs://等协议路径，也可以为远程地址*/ 
	url:string,

	/**（可选项）frame 的位置和大小*/ 
	rect?:JSON,

	/**（可选项）父节点frame，如果不写或者""就是win，这样打开的frame就在第1层。想在当前frame打开子frame，可传递api.frameName*/ 
	fixedOn?:string,

	/**（可选项）绑定相对于父节点的x坐标，添加此参数将忽略rect中的x值*/ 
	offsetX?:number,

	/**（可选项）绑定相对于父节点的y坐标，添加此参数将忽略rect中的y值*/ 
	offsetY?:number,

	/**（可选项）是否预加载，true会在同层级的底层打开，不会影响前面的frame，如果同层级还没有frame，那么即使true也会看到的*/ 
	preload?:boolean,

}

interface frameTree_closeFrame_Params {
	/**frame 名字*/ 
	name:string,

}

interface frameTree_FrameTo_Params {
	/**待调整显示顺序的 frame 名字*/ 
	from:string,

	/**（可选项）frame 名字，不传时调整 from 对应 frame 到本层级的最高层，否则调整 from 对应 frame 到此 frame 前面，特殊参数"~frameTreeMin~"，调整 from 对应 frame 到本层级的最低层*/ 
	to?:string,

}

interface frameTree_setFrameAttr_Params {
	/**frame 名字*/ 
	name:string,

	/**（可选项）frame 的位置和大小*/ 
	rect?:JSON,

	/**（可选项）绑定相对于父节点的x坐标，添加此参数将忽略rect中的x值*/ 
	offsetX?:number,

	/**（可选项）绑定相对于父节点的y坐标，添加此参数将忽略rect中的y值*/ 
	offsetY?:number,

}

interface frameTree_setFrameBind_Params {
	/**待调整绑定的 frame 名字*/ 
	name:string,

	/**（可选项）是否绑定到父节点的x坐标，如true父节点的x变动时 name 对应 frame 的x也会相应变动，反之则反*/ 
	bindX?:boolean,

	/**（可选项）是否绑定到父节点的y坐标，如true父节点的y变动时 name 对应 frame 的y也会相应变动，反之则反*/ 
	bindY?:boolean,

	/**（可选项）name 对应 frame 的x相对于窗口的坐标改变，这个只是修正了对象内部值，不会立即有所变化，而且也不影响子 frame ，这个只是用来配合frameTree.setFrameAttr时用*/ 
	x?:number,

	/**（可选项）name 对应 frame 的y相对于窗口的坐标改变，这个只是修正了对象内部值，不会立即有所变化，而且也不影响子 frame ，这个只是用来配合frameTree.setFrameAttr时用*/ 
	y?:number,

}

interface UIAlbumBrowser {
	/**
	 * `打开多媒体资源选择器，打开后会全屏显示`
	 * ========params==========
	 *
	 * `max` :number : （可选项）最多选择几张图片
	 *
	 * `type` :string : （可选项）显示图片或显示图片和视频
	 *
	 * `isOpenPreview` :boolean : （可选项）显是否打开预览界面
	 *
	 * `classify` :boolean : （可选项）是否将图片分类显示，为 true 时，会首先跳转到相册分类列表页面，false时打开第一个分组的详情。(仅对iOS有效)
	 *
	 * `selectedAll` :boolean : （可选项）当type为all时，视频和图片能不能同时选中，参考微信，仅当type为all时本参数有意义
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `rotation` :boolean : 屏幕是否旋转（横屏），为 true 时可以横竖屏旋转，false 时禁止横屏
	 *
	 * `alertTitle` :string : （可选项）超过设置的选中图片的数量时的提示框内容
	 *
	 * `alertBtnTitle` :string : （可选项）超过设置的选中图片的数量时的提示框按钮名称（仅iOS支持）
	 *
	 * `videoTimeFilter` :number : （可选项）视频时间长度超过此参数,禁止选取
	 */
	open(params:UIAlbumBrowser_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开图片选择器，打开后会全屏显示`
	 * ========params==========
	 *
	 * `max` :number : （可选项）最多选择几张图片
	 *
	 * `showCamera` :boolean : 是否显示相机
	 *
	 * `selectedPaths` :Array : （可选项）默认选中图片的路径组成的数组 (需传入path参数，用相机拍照后需传入assetPath参数)
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `isSystemCamera` :boolean : （可选项）拍照时是否调用系统相机
	 *
	 * `animation` :boolean : （可选项）点击下一步按钮时是否有动画
	 */
	imagePicker(params:UIAlbumBrowser_imagePicker_Params, callback?: (ret:JSON) => void):void

	/** 针对imagePicker接口关闭*/ 
	closePicker():void

	/** 请求相册权限*/ 
	requestAlbumPermissions():void

	/**
	 * `扫描系统多媒体资源，可以通过 Web 代码自定义多选界面。**注意：页面展示的图片建议使用缩略图，一次显示的图片不宜过多（1至2屏）**`
	 * ========params==========
	 *
	 * `type` :string : 返回的资源种类；默认：'all'
	 *
	 * `count` :number : （可选项）每次返回的资源数量，剩余资源可用 fetch 接口遍历
	 *
	 * `sort` :JSON : （可选项）图片排序方式
	 *
	 * `thumbnail` :JSON : （可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口api.clearCache()。
	 */
	scan(params:UIAlbumBrowser_scan_Params, callback?: (ret:JSON) => void):void

	/** 获取指定数量的多媒体资源，没有更多资源则返回空数组，**必须配合 scan 接口的 count 参数一起使用**。*/ 
	fetch():void

	/**
	 * `扫描系统多媒体资源的分组，可以通过 Web 代码自定义多选界面。`
	 * ========params==========
	 *
	 * `type` :string : 返回的资源种类；默认：'all'(iOS不支持)
	 *
	 * `thumbnail` :JSON : （可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口api.clearCache()。
	 */
	scanGroups(params:UIAlbumBrowser_scanGroups_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据分组id，扫描系统多媒体资源，可以通过 Web 代码自定义多选界面。**注意：页面展示的图片建议使用缩略图，一次显示的图片不宜过多（1至2屏）**`
	 * ========params==========
	 *
	 * `groupId` :string : 分组id；
	 *
	 * `type` :string : 分组类型；默认：'all'
	 *
	 * `count` :number : （可选项）每次返回的资源数量，剩余资源可用 fetchGroup 接口遍历
	 *
	 * `sort` :JSON : （可选项）图片排序方式
	 *
	 * `thumbnail` :JSON : （可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口api.clearCache()。
	 */
	scanByGroupId(params:UIAlbumBrowser_scanByGroupId_Params, callback?: (ret:JSON) => void):void

	/** 从分组中获取指定数量的多媒体资源，没有更多资源则返回空数组，**必须配合 scanByGroupId 接口的 count 参数一起使用**。*/ 
	fetchGroup():void

	/**
	 * `将相册图片地址转换为可以直接使用的本地路径地址（临时文件夹的绝对路径），**相册图片会被拷贝到临时文件夹，调用 api.clearCache 接口可清除该临时图片文件**`
	 * ========params==========
	 *
	 * `path` :string : 要转换的图片路径（在相册库的绝对路径）
	 *
	 * `quality` :string : 视频质量（android此参数为图片的quality，不支持视频）(iOS不支持)
	 *
	 * `scale` :number : 图片质量  (iOS不支持)
	 */
	transPath(params:UIAlbumBrowser_transPath_Params, callback?: (ret:JSON) => void):void

	/**
	 * `视频路径转化，**直接获取的路径需经本接口转换后才能使用（播放、上传等）**`
	 * ========params==========
	 *
	 * `path` :string : 要转换的视频路径（在相册库的绝对路径）
	 *
	 * `isSave` :boolean : 是否保存在沙盒 （仅支持iOS）
	 */
	transVideoPath(params:UIAlbumBrowser_transVideoPath_Params, callback?: (ret:JSON) => void):void

	/**
	 * `iOS在scan接口里面可以获取到时长.所以可以不用管.`
	 * ========params==========
	 *
	 * `path` :string : 视频资源路径（在相册库的绝对路径,另外支持 fs:// widget://路径）
	 */
	getVideoDuration(params:UIAlbumBrowser_getVideoDuration_Params, callback?: (ret:JSON) => void):void

	/**
	 * `以 frame 形式打开一个图片预览区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `groupId` :string : (可选项)要打开的相册分组 ID
	 *
	 * `selectedPaths` :Array : （可选项）图片预览区域默认选中图片的路径组成的数组
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openGroup(params:UIAlbumBrowser_openGroup_Params, callback?: (ret:JSON) => void):void

	/** 关闭打开的相册分组预览区域*/ 
	closeGroup():void

	/**
	 * `通过分组ID改变预览区域显示的分组图片`
	 * ========params==========
	 *
	 * `groupId` :string : 要改变的相册分组 ID
	 *
	 * `selectedPaths` :Array : （可选项）图片预览区域默认选中图片的路径组成的数组
	 */
	changeGroup(params:UIAlbumBrowser_changeGroup_Params):void

	/**
	 * `以 frame 形式打开一个图片预览区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `groupId` :string : (可选项)要打开的相册分组 ID
	 *
	 * `max` :number : （可选项）最多选择几张图片，超过max则用户点击选中按钮只返回eventType为max的事件回调，不会执行选中操作（点击的图片还是未选中状态）
	 *
	 * `type` :string : （可选项）显示图片或显示图片和视频
	 *
	 * `styles` :JSON : 
	 *
	 * `videoPreview` :boolean : （可选项）选中视频资源时，是否进入预览页面，若为false则直接callback相关信息
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openAlbum(params:UIAlbumBrowser_openAlbum_Params, callback?: (ret:JSON) => void):void

	/** 关闭 openAlbum 打开的相册预览区域*/ 
	closeAlbum():void

	/**
	 * `批量将相册图片地址转换为可以直接使用的本地路径地址（临时文件夹的绝对路径），**相册图片会被拷贝到临时文件夹，调用 api.clearCache 接口可清除该临时图片文件**`
	 * ========params==========
	 *
	 * `path` :Array : 要转换的图片路径（在相册库的绝对路径）
	 */
	batchTransPath(params:UIAlbumBrowser_batchTransPath_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取图片信息`
	 * ========params==========
	 *
	 * `imagePath` :string : 图片路径支持fs://,widget://;
	 */
	getImgInfo(params:UIAlbumBrowser_getImgInfo_Params, callback?: (ret:JSON) => void):void

}
interface UIAlbumBrowser_open_Params {
	/**（可选项）最多选择几张图片*/ 
	max?:number,

	/**（可选项）显示图片或显示图片和视频*/ 
	type?:string,

	/**（可选项）显是否打开预览界面*/ 
	isOpenPreview?:boolean,

	/**（可选项）是否将图片分类显示，为 true 时，会首先跳转到相册分类列表页面，false时打开第一个分组的详情。(仅对iOS有效)*/ 
	classify?:boolean,

	/**（可选项）当type为all时，视频和图片能不能同时选中，参考微信，仅当type为all时本参数有意义*/ 
	selectedAll?:boolean,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**屏幕是否旋转（横屏），为 true 时可以横竖屏旋转，false 时禁止横屏*/ 
	rotation:boolean,

	/**（可选项）超过设置的选中图片的数量时的提示框内容*/ 
	alertTitle?:string,

	/**（可选项）超过设置的选中图片的数量时的提示框按钮名称（仅iOS支持）*/ 
	alertBtnTitle?:string,

	/**（可选项）视频时间长度超过此参数,禁止选取*/ 
	videoTimeFilter?:number,

}

interface UIAlbumBrowser_imagePicker_Params {
	/**（可选项）最多选择几张图片*/ 
	max?:number,

	/**是否显示相机*/ 
	showCamera:boolean,

	/**（可选项）默认选中图片的路径组成的数组 (需传入path参数，用相机拍照后需传入assetPath参数)*/ 
	selectedPaths?:Array,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）拍照时是否调用系统相机*/ 
	isSystemCamera?:boolean,

	/**（可选项）点击下一步按钮时是否有动画*/ 
	animation?:boolean,

}

interface UIAlbumBrowser_scan_Params {
	/**返回的资源种类；默认：'all'*/ 
	type:string,

	/**（可选项）每次返回的资源数量，剩余资源可用 fetch 接口遍历*/ 
	count?:number,

	/**（可选项）图片排序方式*/ 
	sort?:JSON,

	/**（可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口api.clearCache()。*/ 
	thumbnail?:JSON,

}

interface UIAlbumBrowser_scanGroups_Params {
	/**返回的资源种类；默认：'all'(iOS不支持)*/ 
	type:string,

	/**（可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口api.clearCache()。*/ 
	thumbnail?:JSON,

}

interface UIAlbumBrowser_scanByGroupId_Params {
	/**分组id；*/ 
	groupId:string,

	/**分组类型；默认：'all'*/ 
	type:string,

	/**（可选项）每次返回的资源数量，剩余资源可用 fetchGroup 接口遍历*/ 
	count?:number,

	/**（可选项）图片排序方式*/ 
	sort?:JSON,

	/**（可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口api.clearCache()。*/ 
	thumbnail?:JSON,

}

interface UIAlbumBrowser_transPath_Params {
	/**要转换的图片路径（在相册库的绝对路径）*/ 
	path:string,

	/**视频质量（android此参数为图片的quality，不支持视频）(iOS不支持)*/ 
	quality:string,

	/**图片质量  (iOS不支持)*/ 
	scale:number,

}

interface UIAlbumBrowser_transVideoPath_Params {
	/**要转换的视频路径（在相册库的绝对路径）*/ 
	path:string,

	/**是否保存在沙盒 （仅支持iOS）*/ 
	isSave:boolean,

}

interface UIAlbumBrowser_getVideoDuration_Params {
	/**视频资源路径（在相册库的绝对路径,另外支持 fs:// widget://路径）*/ 
	path:string,

}

interface UIAlbumBrowser_openGroup_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**(可选项)要打开的相册分组 ID*/ 
	groupId?:string,

	/**（可选项）图片预览区域默认选中图片的路径组成的数组*/ 
	selectedPaths?:Array,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIAlbumBrowser_changeGroup_Params {
	/**要改变的相册分组 ID*/ 
	groupId:string,

	/**（可选项）图片预览区域默认选中图片的路径组成的数组*/ 
	selectedPaths?:Array,

}

interface UIAlbumBrowser_openAlbum_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**(可选项)要打开的相册分组 ID*/ 
	groupId?:string,

	/**（可选项）最多选择几张图片，超过max则用户点击选中按钮只返回eventType为max的事件回调，不会执行选中操作（点击的图片还是未选中状态）*/ 
	max?:number,

	/**（可选项）显示图片或显示图片和视频*/ 
	type?:string,

	/***/ 
	styles:JSON,

	/**（可选项）选中视频资源时，是否进入预览页面，若为false则直接callback相关信息*/ 
	videoPreview?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIAlbumBrowser_batchTransPath_Params {
	/**要转换的图片路径（在相册库的绝对路径）*/ 
	path:Array,

}

interface UIAlbumBrowser_getImgInfo_Params {
	/**图片路径支持fs://,widget://;*/ 
	imagePath:string,

}

interface circleProgress {
	/** 显示圆形进度条窗口*/ 
	open():void

	/** 关闭圆形进度条窗口*/ 
	close():void

	/** 设置进度条进度。*/ 
	setProgress():void

	/** 显示圆形进度条窗口*/ 
	show():void

	/** 隐藏圆形进度条窗口*/ 
	hide():void

}
interface UIListContactsPlus {
	/**
	 * `打开列表`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `contacts` :Array : 列表数据源
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组
	 *
	 * `styles` :JSON : （可选项）模块头部的样式
	 *
	 * `alphabeticalIndexStyles` :JSON : （可选项）右侧索引点击时中心显示的样式
	 *
	 * `backgroundColor` :string : （可选项）模块背景色
	 *
	 * `bounces` :boolean : （可选项）是否弹动
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:UIListContactsPlus_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭列表模块*/ 
	close():void

	/** 隐藏列表模块，并没有从内存里清除*/ 
	hide():void

	/** 显示已隐藏的列表模块*/ 
	show():void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `contacts` :JSON : 列表数据源
	 */
	reloadData(params:UIListContactsPlus_reloadData_Params):void

}
interface UIListContactsPlus_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表数据源*/ 
	contacts:Array,

	/**（可选项）列表项向左滑动露出的按钮组*/ 
	rightBtns?:Array,

	/**（可选项）模块头部的样式*/ 
	styles?:JSON,

	/**（可选项）右侧索引点击时中心显示的样式*/ 
	alphabeticalIndexStyles?:JSON,

	/**（可选项）模块背景色*/ 
	backgroundColor?:string,

	/**（可选项）是否弹动*/ 
	bounces?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface UIListContactsPlus_reloadData_Params {
	/**列表数据源*/ 
	contacts:JSON,

}

interface liveUI {
	/**
	 * `打开直播UI界面`
	 * ========params==========
	 *
	 * `uid` :string : （必填项）主播用户id
	 *
	 * `name` :string : （可选项）主播名称
	 *
	 * `roomName` :string : （可选项）直播房间名称
	 *
	 * `headpic` :string : （可选项）主播用户的头像地址（图片不存在时有默认头像，请用圆形图片），支持http:// fs://、widget:// 协议。
	 *
	 * `starpic` :string : （可选项）主播等级图标（图片不存在时有默认等级图标，请用圆形图片），支持http:// fs://、widget:// 协议。
	 *
	 * `isDanmu` :boolean : （可选项）是否开启弹幕。(true:开启弹幕 false:关闭弹幕)
	 *
	 * `isShowGuanZhuBtn` :boolean : （可选项）是否显示关注按钮 。
	 *
	 * `memberCounts` :number : （可选项）观看人数 。
	 *
	 * `userList` :Array : （必填项）观众用户列表
	 *
	 * `messageList` :Array : （必填项）用户消息列表
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	openLiveUI(params:liveUI_openLiveUI_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加观众用户加入接口`
	 * ========params==========
	 *
	 * `uid` :string : （必填项）用户id
	 *
	 * `nickname` :string : （必填项）用户名称
	 *
	 * `headpic` :string : （可选项）用户头像（图片不存在时有默认头像，请用圆形图片），支持http:// fs:// widget://
	 *
	 * `starpic` :string : （可选项）用户等级图片（图片不存在时有默认等级图片，请用圆形图片），支持http:// fs:// widget://
	 *
	 * `isJoinView` :boolean : （可选项）是否隐藏登场消息框
	 *
	 * `backgroundPic` :string : （可选项）登场消息框背景图片（图片不存在时有默认背景图片），支持http:// fs:// widget://
	 *
	 * `startnum` :number : （可选项）用户等级
	 *
	 * `nicknameColor` :string : （可选项）用户名称字体颜色
	 *
	 * `message` :string : （可选项）登场消息内容
	 *
	 * `messageColor` :string : （可选项）登场消息内容字体颜色
	 */
	addUserInfo(params:liveUI_addUserInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `批量添加观众用户加入接口`
	 * ========params==========
	 *
	 * `userList` :Array : （必填项）加入观众用户列表
	 */
	addUserInfoList(params:liveUI_addUserInfoList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `仅设置显示置观众人数，和观众列表纪录数无关`
	 * ========params==========
	 *
	 * `memberCounts` :number : （必填项）观看人数。
	 */
	setMemberCounts(params:liveUI_setMemberCounts_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否显示关注按钮`
	 * ========params==========
	 *
	 * `isShowGuanZhuBtn` :boolean : （可选项）是否显示关注按钮。
	 */
	isShowGuanZhuBtn(params:liveUI_isShowGuanZhuBtn_Params, callback?: (ret:JSON) => void):void

	/**
	 * `观看用户退出`
	 * ========params==========
	 *
	 * `uid` :string : （可选项）用户id。
	 */
	delUserInfo(params:liveUI_delUserInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送弹幕消息`
	 * ========params==========
	 *
	 * `nickname` :string : （必填项）用户名称
	 *
	 * `nicknameColor` :string : （可选项）用户名称字体颜色
	 *
	 * `headpic` :string : （可选项）用户头像（图片不存在时有有默认头像，请用圆形图片），支持http:// fs:// widget://
	 *
	 * `starpic` :string : （可选项）等级图标(图片不存在时有默认等级图标，请用圆形图片)，支持http:// fs:// widget://
	 *
	 * `message` :string : （必填项）弹幕消息内容
	 *
	 * `messageColor` :string : （可选项）弹幕消息内容字体颜色
	 */
	showDanmu(params:liveUI_showDanmu_Params, callback?: (ret:JSON) => void):void

	/**
	 * `消息列表显示消息信息`
	 * ========params==========
	 *
	 * `uid` :string : （必填项）用户id
	 *
	 * `startnum` :number : （可选项）用户等级
	 *
	 * `nickname` :string : （必填项）用户名称
	 *
	 * `nicknameColor` :string : （可选项）用户名称字体颜色
	 *
	 * `message` :string : （必填项）发送消息内容
	 *
	 * `messageColor` :string : （可选项）发送消息内容字体颜色
	 */
	showMessage(params:liveUI_showMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `批量添加消息列表显示消息信息`
	 * ========params==========
	 *
	 * `messageList` :Array : （必填项）用户消息列表
	 */
	showMessageList(params:liveUI_showMessageList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示直播系统消息`
	 * ========params==========
	 *
	 * `title` :string : （必填项）用户名称
	 *
	 * `titleColor` :string : （可选项）用户名称字体颜色
	 *
	 * `message` :string : （必填项）系统消息内容
	 *
	 * `messageColor` :string : （可选项）系统消息内容字体颜色
	 */
	showSystemMessage(params:liveUI_showSystemMessage_Params, callback?: (ret:JSON) => void):void

	/** 清空消息列表*/ 
	clearMessage(callback?: (ret:JSON) => void):void

	/** 隐藏直播ui*/ 
	hiddenLiveUI(callback?: (ret:JSON) => void):void

	/** 显示直播ui*/ 
	showLiveUI(callback?: (ret:JSON) => void):void

	/** 关闭直播ui*/ 
	closeLiveUI(callback?: (ret:JSON) => void):void

}
interface liveUI_openLiveUI_Params {
	/**（必填项）主播用户id*/ 
	uid:string,

	/**（可选项）主播名称*/ 
	name?:string,

	/**（可选项）直播房间名称*/ 
	roomName?:string,

	/**（可选项）主播用户的头像地址（图片不存在时有默认头像，请用圆形图片），支持http:// fs://、widget:// 协议。*/ 
	headpic?:string,

	/**（可选项）主播等级图标（图片不存在时有默认等级图标，请用圆形图片），支持http:// fs://、widget:// 协议。*/ 
	starpic?:string,

	/**（可选项）是否开启弹幕。(true:开启弹幕 false:关闭弹幕)*/ 
	isDanmu?:boolean,

	/**（可选项）是否显示关注按钮 。*/ 
	isShowGuanZhuBtn?:boolean,

	/**（可选项）观看人数 。*/ 
	memberCounts?:number,

	/**（必填项）观众用户列表*/ 
	userList:Array,

	/**（必填项）用户消息列表*/ 
	messageList:Array,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface liveUI_addUserInfo_Params {
	/**（必填项）用户id*/ 
	uid:string,

	/**（必填项）用户名称*/ 
	nickname:string,

	/**（可选项）用户头像（图片不存在时有默认头像，请用圆形图片），支持http:// fs:// widget://*/ 
	headpic?:string,

	/**（可选项）用户等级图片（图片不存在时有默认等级图片，请用圆形图片），支持http:// fs:// widget://*/ 
	starpic?:string,

	/**（可选项）是否隐藏登场消息框*/ 
	isJoinView?:boolean,

	/**（可选项）登场消息框背景图片（图片不存在时有默认背景图片），支持http:// fs:// widget://*/ 
	backgroundPic?:string,

	/**（可选项）用户等级*/ 
	startnum?:number,

	/**（可选项）用户名称字体颜色*/ 
	nicknameColor?:string,

	/**（可选项）登场消息内容*/ 
	message?:string,

	/**（可选项）登场消息内容字体颜色*/ 
	messageColor?:string,

}

interface liveUI_addUserInfoList_Params {
	/**（必填项）加入观众用户列表*/ 
	userList:Array,

}

interface liveUI_setMemberCounts_Params {
	/**（必填项）观看人数。*/ 
	memberCounts:number,

}

interface liveUI_isShowGuanZhuBtn_Params {
	/**（可选项）是否显示关注按钮。*/ 
	isShowGuanZhuBtn?:boolean,

}

interface liveUI_delUserInfo_Params {
	/**（可选项）用户id。*/ 
	uid?:string,

}

interface liveUI_showDanmu_Params {
	/**（必填项）用户名称*/ 
	nickname:string,

	/**（可选项）用户名称字体颜色*/ 
	nicknameColor?:string,

	/**（可选项）用户头像（图片不存在时有有默认头像，请用圆形图片），支持http:// fs:// widget://*/ 
	headpic?:string,

	/**（可选项）等级图标(图片不存在时有默认等级图标，请用圆形图片)，支持http:// fs:// widget://*/ 
	starpic?:string,

	/**（必填项）弹幕消息内容*/ 
	message:string,

	/**（可选项）弹幕消息内容字体颜色*/ 
	messageColor?:string,

}

interface liveUI_showMessage_Params {
	/**（必填项）用户id*/ 
	uid:string,

	/**（可选项）用户等级*/ 
	startnum?:number,

	/**（必填项）用户名称*/ 
	nickname:string,

	/**（可选项）用户名称字体颜色*/ 
	nicknameColor?:string,

	/**（必填项）发送消息内容*/ 
	message:string,

	/**（可选项）发送消息内容字体颜色*/ 
	messageColor?:string,

}

interface liveUI_showMessageList_Params {
	/**（必填项）用户消息列表*/ 
	messageList:Array,

}

interface liveUI_showSystemMessage_Params {
	/**（必填项）用户名称*/ 
	title:string,

	/**（可选项）用户名称字体颜色*/ 
	titleColor?:string,

	/**（必填项）系统消息内容*/ 
	message:string,

	/**（可选项）系统消息内容字体颜色*/ 
	messageColor?:string,

}

interface constactOperate {
	/**
	 * `input方法将view添加到页面中`
	 * ========params==========
	 *
	 * `x` :any : 以左上角为原点 x轴偏移量。
	 *
	 * `y` :any : 以左上角为原点 y轴偏移量。
	 *
	 * `w` :any : view 宽度 。
	 *
	 * `h` :any : view 高度 。
	 *
	 * `type` :any : 类型 1、单选 2、多选
	 *
	 * `notice` :string : 用户禁用权限或无联系人提示语 。
	 */
	input(params:constactOperate_input_Params, callback?: (ret:JSON) => void):void

	/** 隐藏view，已调用input情况下可调用此方法隐藏*/ 
	hide():void

	/** 显示隐藏的view，调用input，hide 的情况下将原view对象重新显示，节省内存，无需重新创建*/ 
	show():void

	/** 在不使用此联系人view的情况下销毁释放内存*/ 
	destroy():void

	/** input type=2的情况下多选返回多个联系人的数据*/ 
	getSelect():void

}
interface constactOperate_input_Params {
	/**以左上角为原点 x轴偏移量。*/ 
	x:any,

	/**以左上角为原点 y轴偏移量。*/ 
	y:any,

	/**view 宽度 。*/ 
	w:any,

	/**view 高度 。*/ 
	h:any,

	/**类型 1、单选 2、多选*/ 
	type:any,

	/**用户禁用权限或无联系人提示语 。*/ 
	notice:string,

}

interface UIChartline {
	/** 打开曲线图*/ 
	open():void

	/** 关闭曲线图窗口*/ 
	close():void

	/** 刷新曲线数据。*/ 
	reloadData():void

	/** 显示曲线图窗口*/ 
	show():void

	/** 隐藏曲线图窗口*/ 
	hide():void

}
interface panorama {
	/**
	 * `打开全景展示视图`
	 * ========params==========
	 *
	 * `x` :number : （可选项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `y` :number : （可选项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `w` :number : （可选项）模块的宽度
	 *
	 * `h` :number : （可选项）模块的高度
	 *
	 * `imgPath` :string : 要展示的 360 度全景图片的路径
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:panorama_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开全景展示视图，**本接口暂仅支持 iOS 平台**`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `imgPaths` :Array : 要展示的全景图片的路径组成的数组，图片顺序为：前后左右上下
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动）
	 */
	openCubic(params:panorama_openCubic_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭全景展示视图`
	 * ========params==========
	 *
	 * `id` :number : 要关闭的视图的id
	 */
	close(params:panorama_close_Params):void

	/**
	 * `隐藏全景展示视图。隐藏视图，并没有从内存里清除`
	 * ========params==========
	 *
	 * `id` :number : 要关闭的视图的id
	 */
	hide(params:panorama_hide_Params):void

	/**
	 * `显示全景展示视图，显示已隐藏的视图`
	 * ========params==========
	 *
	 * `id` :number : 要关闭的视图的 id
	 */
	show(params:panorama_show_Params):void

}
interface panorama_open_Params {
	/**（可选项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）*/ 
	x?:number,

	/**（可选项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）*/ 
	y?:number,

	/**（可选项）模块的宽度*/ 
	w?:number,

	/**（可选项）模块的高度*/ 
	h?:number,

	/**要展示的 360 度全景图片的路径*/ 
	imgPath:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface panorama_openCubic_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**要展示的全景图片的路径组成的数组，图片顺序为：前后左右上下*/ 
	imgPaths:Array,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动）*/ 
	fixed?:boolean,

}

interface panorama_close_Params {
	/**要关闭的视图的id*/ 
	id:number,

}

interface panorama_hide_Params {
	/**要关闭的视图的id*/ 
	id:number,

}

interface panorama_show_Params {
	/**要关闭的视图的 id*/ 
	id:number,

}

interface UIInput {
	/**
	 * `打开输入框，**注意：调用 open 接口的元素，不能加 tapmode 属性**`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `maxRows` :number : （可选项）支持显示最大行数，文本内容超过此行数时，上下滚动显示。是否支持换行，传大于1的数时表示支持，**注意：取值大于1（多行显示时），不触发 search 事件回调**
	 *
	 * `maxStringLength` :number : （可选项）输入框允许输入的最大字符串长度
	 *
	 * `autoFocus` :boolean : （可选项）打开时是否弹出键盘
	 *
	 * `placeholder` :string : （可选项）输入框的占位提示文本
	 *
	 * `keyboardType` :string : （可选项）输入框获取焦点时，弹出的键盘类型；
	 *
	 * `alignment` :string : （可选项）文本对齐方式
	 *
	 * `isCenterVertical` :boolean : 输入文本是否上下居中
	 *
	 * `inputType` :string : (可选项) 判断输入框输入的是密码还是文字
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:UIInput_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重设输入框的位置`
	 * ========params==========
	 *
	 * `id` :number : 需要设置的输入框id
	 *
	 * `position` :JSON : （可选项）模块的位置
	 */
	resetPosition(params:UIInput_resetPosition_Params):void

	/** 关闭输入框*/ 
	close():void

	/** 显示输入框*/ 
	show():void

	/** 隐藏输入框*/ 
	hide():void

	/**
	 * `获取或设置输入框的内容`
	 * ========params==========
	 *
	 * `id` :number : 输入框id
	 *
	 * `msg` :string : （可选项）输入框的内容，若不传则返回输入框的值
	 */
	value(params:UIInput_value_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向输入框的指定位置插入内容`
	 * ========params==========
	 *
	 * `id` :number : 输入框id
	 *
	 * `index` :number : （可选项）插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。**
	 *
	 * `msg` :string : （可选项）要插入的内容
	 */
	insertValue(params:UIInput_insertValue_Params):void

	/** 弹出键盘*/ 
	popupKeyboard():void

	/** 收起键盘*/ 
	closeKeyboard():void

	/**
	 * `事件监听`
	 * ========params==========
	 *
	 * `id` :number : 输入框id
	 *
	 * `name` :string : 监听的事件类型
	 */
	addEventListener(params:UIInput_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取当前光标所在位置`
	 * ========params==========
	 *
	 * `id` :number : 输入框id
	 */
	getSelectedRange(params:UIInput_getSelectedRange_Params, callback?: (ret:JSON) => void):void

}
interface UIInput_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）支持显示最大行数，文本内容超过此行数时，上下滚动显示。是否支持换行，传大于1的数时表示支持，**注意：取值大于1（多行显示时），不触发 search 事件回调***/ 
	maxRows?:number,

	/**（可选项）输入框允许输入的最大字符串长度*/ 
	maxStringLength?:number,

	/**（可选项）打开时是否弹出键盘*/ 
	autoFocus?:boolean,

	/**（可选项）输入框的占位提示文本*/ 
	placeholder?:string,

	/**（可选项）输入框获取焦点时，弹出的键盘类型；*/ 
	keyboardType?:string,

	/**（可选项）文本对齐方式*/ 
	alignment?:string,

	/**输入文本是否上下居中*/ 
	isCenterVertical:boolean,

	/**(可选项) 判断输入框输入的是密码还是文字*/ 
	inputType?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIInput_resetPosition_Params {
	/**需要设置的输入框id*/ 
	id:number,

	/**（可选项）模块的位置*/ 
	position?:JSON,

}

interface UIInput_value_Params {
	/**输入框id*/ 
	id:number,

	/**（可选项）输入框的内容，若不传则返回输入框的值*/ 
	msg?:string,

}

interface UIInput_insertValue_Params {
	/**输入框id*/ 
	id:number,

	/**（可选项）插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。***/ 
	index?:number,

	/**（可选项）要插入的内容*/ 
	msg?:string,

}

interface UIInput_addEventListener_Params {
	/**输入框id*/ 
	id:number,

	/**监听的事件类型*/ 
	name:string,

}

interface UIInput_getSelectedRange_Params {
	/**输入框id*/ 
	id:number,

}

interface keyBoardMgr {
	/** 隐藏键盘。*/ 
	hideKeyBoard():void

	/** 针对某个输入框显示键盘，使某个输入框能够输入文字。需要调用该方法后，再用js使input获取焦点(因为弹出键盘需要一段时间，所以input获取焦点需要用setTimeout延时执行，如示例代码所示)，进而使input能够输入文字。对于安卓手机，弹出键盘后点击键盘以外的区域，部分手机能够关闭键盘，而部分手机不能关闭键盘(此时可通过键盘自带关闭按钮关闭)；对于苹果手机，弹出键盘后点击键盘以外的区域，都能够关闭键盘。*/ 
	showKeyBoard():void

	/** 添加监听键盘弹出隐藏事件。添加监听后，该模块会异步回调onKeyBoardChanged方法，onKeyBoardChanged方法由开发者自行实现。详见onKeyBoardChanged方法说明。不使用该监听事件后开发者应调用removeKBListener方法移除监听事件。*/ 
	addKBListener():void

	/** 移除监听键盘弹出隐藏事件。调用addKBListener方法后开发者应在适当时候调用removeKBListener方法移除监听事件。*/ 
	removeKBListener():void

	/** 监听input输入框的内容变化，该方法为纯js实现，可以当做拓展本模块的功能。*/ 
	onTextChanged():void

}
interface periodSelector {
}
interface toastmoduleforjs {
	/**
	 * `显示Success类型消息`
	 * ========params==========
	 *
	 * `msg` :string : 显示的消息内容
	 *
	 * `duration` :number : （可选项）显示的时间长短。可选值为0和1，0代表显示时间较短，1代表显示时间较长，默认值为0。
	 */
	showSuccessMsg(params:toastmoduleforjs_showSuccessMsg_Params):void

	/**
	 * `显示Error类型消息`
	 * ========params==========
	 *
	 * `msg` :string : 显示的消息内容
	 *
	 * `duration` :number : （可选项）Toast显示时间的长短。可选值为0和1，0代表显示时间较短，1代表显示时间较长，默认值为0。
	 */
	showErrorMsg(params:toastmoduleforjs_showErrorMsg_Params):void

	/**
	 * `显示Info类型消息`
	 * ========params==========
	 *
	 * `msg` :string : 显示的消息内容
	 *
	 * `duration` :number : （可选项）Toast显示时间的长短。可选值为0和1，0代表显示时间较短，1代表显示时间较长，默认值为0。
	 */
	showInfoMsg(params:toastmoduleforjs_showInfoMsg_Params):void

	/**
	 * `显示Warning类型消息`
	 * ========params==========
	 *
	 * `msg` :string : 显示的消息内容
	 *
	 * `duration` :number : （可选项）Toast显示时间的长短。可选值为0和1，0代表显示时间较短，1代表显示时间较长，默认值为0。
	 */
	showWarningMsg(params:toastmoduleforjs_showWarningMsg_Params):void

	/**
	 * `显示Normal类型消息`
	 * ========params==========
	 *
	 * `msg` :string : 显示的消息内容
	 *
	 * `duration` :number : （可选项）Toast显示时间的长短。可选值为0和1，0代表显示时间较短，1代表显示时间较长，默认值为0。
	 */
	showNormalMsg(params:toastmoduleforjs_showNormalMsg_Params):void

}
interface toastmoduleforjs_showSuccessMsg_Params {
	/**显示的消息内容*/ 
	msg:string,

	/**（可选项）显示的时间长短。可选值为0和1，0代表显示时间较短，1代表显示时间较长，默认值为0。*/ 
	duration?:number,

}

interface toastmoduleforjs_showErrorMsg_Params {
	/**显示的消息内容*/ 
	msg:string,

	/**（可选项）Toast显示时间的长短。可选值为0和1，0代表显示时间较短，1代表显示时间较长，默认值为0。*/ 
	duration?:number,

}

interface toastmoduleforjs_showInfoMsg_Params {
	/**显示的消息内容*/ 
	msg:string,

	/**（可选项）Toast显示时间的长短。可选值为0和1，0代表显示时间较短，1代表显示时间较长，默认值为0。*/ 
	duration?:number,

}

interface toastmoduleforjs_showWarningMsg_Params {
	/**显示的消息内容*/ 
	msg:string,

	/**（可选项）Toast显示时间的长短。可选值为0和1，0代表显示时间较短，1代表显示时间较长，默认值为0。*/ 
	duration?:number,

}

interface toastmoduleforjs_showNormalMsg_Params {
	/**显示的消息内容*/ 
	msg:string,

	/**（可选项）Toast显示时间的长短。可选值为0和1，0代表显示时间较短，1代表显示时间较长，默认值为0。*/ 
	duration?:number,

}

interface kLine {
	/**
	 * `显示K线模块`
	 * ========params==========
	 *
	 * `x` :any : （可选项）数字类型；模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；默认：0。
	 *
	 * `y` :any : （可选项）数字类型；模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0。
	 *
	 * `w` :any : （可选项）数字类型；模块的宽度；默认：所属的 Window 或 Frame 的宽度。
	 *
	 * `h` :any : （可选项）数字类型；模块的高度；默认：所属的 Window 或 Frame 的高度。
	 *
	 * `option` :JSON : null
	 */
	open(params:kLine_open_Params):void

	/**
	 * `设置option`
	 * ========params==========
	 *
	 * `option` :JSON : 内部字段定义，参考open的option参数描述
	 */
	setOption(params:kLine_setOption_Params):void

	/**
	 * `设置k线数据源`
	 * ========params==========
	 *
	 * `datas` :Array : k线数据数组，时间新的数据必须是排在前面。
	 */
	setDatas(params:kLine_setDatas_Params):void

	/**
	 * `更新currentPrice stopProfit stopLoss或者追加k线新数据，如当前是1分钟k线，您可能过了1分钟，会从数据库拉下来1个k线数据（1分钟一条数据），需要把这个数据追加到k线当中`
	 * ========params==========
	 *
	 * `currentPrice` :string : （可选项）currentPrice的值。
	 *
	 * `stopLoss` :string : （可选项）stopLoss的值。
	 *
	 * `stopProfit` :string : （可选项）stopProfit的值。
	 *
	 * `datas` :Array : （可选项）追加新的K线数据。
	 */
	setPrice(params:kLine_setPrice_Params):void

	/** 关闭K线模块*/ 
	close(callback?: (ret:JSON) => void):void

	/** 获取当前K线模块的图像，调用此方法前，必须调用open或者setOption方法，设置了模块的option，并且调用setDatas设置了数据源*/ 
	getImage(callback?: (ret:JSON) => void):void

	/** 显示K线模块（如果当前隐藏了）*/ 
	show(callback?: (ret:JSON) => void):void

	/** 隐藏K线模块*/ 
	hide(callback?: (ret:JSON) => void):void

}
interface kLine_open_Params {
	/**（可选项）数字类型；模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；默认：0。*/ 
	x?:any,

	/**（可选项）数字类型；模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0。*/ 
	y?:any,

	/**（可选项）数字类型；模块的宽度；默认：所属的 Window 或 Frame 的宽度。*/ 
	w?:any,

	/**（可选项）数字类型；模块的高度；默认：所属的 Window 或 Frame 的高度。*/ 
	h?:any,

	/**null*/ 
	option:JSON,

}

interface kLine_setOption_Params {
	/**内部字段定义，参考open的option参数描述*/ 
	option:JSON,

}

interface kLine_setDatas_Params {
	/**k线数据数组，时间新的数据必须是排在前面。*/ 
	datas:Array,

}

interface kLine_setPrice_Params {
	/**（可选项）currentPrice的值。*/ 
	currentPrice?:string,

	/**（可选项）stopLoss的值。*/ 
	stopLoss?:string,

	/**（可选项）stopProfit的值。*/ 
	stopProfit?:string,

	/**（可选项）追加新的K线数据。*/ 
	datas?:Array,

}

interface cxChatbox {
	/** 打开聊天输入框*/ 
	open(callback?: (ret:JSON) => void):void

	/** 表情面板上附件按钮点击事件的监听，**仅当 open 接口内 tools->face 参数有值时，本接口有效***/ 
	faceListener(callback?: (ret:JSON) => void):void

	/** 选择图片相关功能事件的监听，**仅当 open 接口内 tools->image 参数有值时，本接口有效***/ 
	imageListener(callback?: (ret:JSON) => void):void

	/** @相关功能事件的监听，**仅当 open 接口内 tools->at 参数有值时，本接口有效***/ 
	atListener(callback?: (ret:JSON) => void):void

	/** 关闭聊天输入框*/ 
	close():void

	/** 显示聊天输入框*/ 
	show():void

	/** 隐藏聊天输入框*/ 
	hide():void

	/** 弹出键盘（仅iOS支持）*/ 
	popupKeyboard():void

	/** 收起键盘（仅iOS支持）*/ 
	closeKeyboard():void

	/**
	 * `获取或设置聊天输入框的内容`
	 * ========params==========
	 *
	 * `msg` :string : （可选项）聊天输入框的内容，若不传则返回输入框的值
	 */
	value(params:cxChatbox_value_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向聊天输入框的指定位置插入内容`
	 * ========params==========
	 *
	 * `index` :number : （可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。**
	 *
	 * `msg` :string : （可选项）要插入的内容
	 */
	insertValue(params:cxChatbox_insertValue_Params):void

	/** 清空输入框文本*/ 
	clearText():void

}
interface cxChatbox_value_Params {
	/**（可选项）聊天输入框的内容，若不传则返回输入框的值*/ 
	msg?:string,

}

interface cxChatbox_insertValue_Params {
	/**（可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。***/ 
	index?:number,

	/**（可选项）要插入的内容*/ 
	msg?:string,

}

interface inputField {
}
interface timeSelector {
}
interface fourStageLinkage {
}
interface payPasswordInput {
	/** 打开密码输入框*/ 
	showInput(callback?: (ret:JSON) => void):void

}
interface loadingLabel {
}
interface photoBrowserWeiXin {
	/** 清除缓存到本地的网络图片，**本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

}
interface slidingList {
}
interface UIActionSelector {
}
interface UIBlurEffect {
	/**
	 * `添加一个模块视图`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `alpha` :number : （可选项）透明度
	 *
	 * `type` :string : （可选项）模糊类型
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动）
	 */
	open(params:UIBlurEffect_open_Params):void

	/** 关闭模块视图*/ 
	close():void

	/** 显示模块视图*/ 
	show():void

	/** 隐藏模块视图*/ 
	hide():void

}
interface UIBlurEffect_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）透明度*/ 
	alpha?:number,

	/**（可选项）模糊类型*/ 
	type?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动）*/ 
	fixed?:boolean,

}

interface floatModule {
	/** 打开悬浮窗口*/ 
	openFloat():void

	/** 隐藏悬浮窗口*/ 
	hide():void

	/** 显示悬浮窗口*/ 
	show():void

	/** 关闭悬浮窗口*/ 
	close():void

	/** 改变播放状态*/ 
	changeState():void

}
interface zyPatternLock {
}
interface searchBar {
}
interface UIListCheck {
	/**
	 * `打开列表`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `isRadio` :boolean : （可选项）是否是单选 **注意:该参数在contacts里面的selected都为false时有效**
	 *
	 * `contacts` :Array : 列表数据源
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:UIListCheck_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭列表模块*/ 
	close():void

	/** 隐藏列表模块，并没有从内存里清除*/ 
	hide():void

	/** 显示已隐藏的列表模块*/ 
	show():void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `contacts` :JSON : 列表数据源
	 */
	reloadData(params:UIListCheck_reloadData_Params):void

	/**
	 * `设置选中的联系人`
	 * ========params==========
	 *
	 * `selected` :boolean : （可选项）设置/取消选中状态
	 *
	 * `contacts` :Array : 要设置为选中状态的联系人id组成的数组
	 */
	setSelected(params:UIListCheck_setSelected_Params):void

	/** 获取所有当前选中的联系人信息，**同步接口***/ 
	getSelectedSync():JSON;

}
interface UIListCheck_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）是否是单选 **注意:该参数在contacts里面的selected都为false时有效***/ 
	isRadio?:boolean,

	/**列表数据源*/ 
	contacts:Array,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface UIListCheck_reloadData_Params {
	/**列表数据源*/ 
	contacts:JSON,

}

interface UIListCheck_setSelected_Params {
	/**（可选项）设置/取消选中状态*/ 
	selected?:boolean,

	/**要设置为选中状态的联系人id组成的数组*/ 
	contacts:Array,

}

interface UIScrollPlayer {
	/**
	 * `打开播放器`
	 * ========params==========
	 *
	 * `rect` :JSON : 模块的位置及尺寸
	 *
	 * `videos` :Array<JSON> : 视频列表
	 *
	 * `buttons` :Array<JSON> : （可选项）悬浮在视频上方按钮，videos中item中不设置buttons则按此参数展示
	 *
	 * `index` :number : （可选项）页面打开时默认播放视频的下标
	 *
	 * `autoPlay` :boolean : （可选项）视频是否自动播放，设置为false后所有视频都不自动播放
	 *
	 * `scalingMode` :number : （可选项）视频填充方式
	 *
	 * `imgScaleType` :number : （可选项）封面图填充方式
	 *
	 * `isLooping` :boolean : （可选项）是否循环播放
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	open(params:UIScrollPlayer_open_Params, callback?: (ret:JSON) => void):void

	/** 隐藏播放器*/ 
	hide():void

	/** 显示播放器*/ 
	show():void

	/** 关闭播放器*/ 
	close():void

	/**
	 * `添加视频`
	 * ========params==========
	 *
	 * `videos` :Array<JSON> : 视频列表
	 */
	add(params:UIScrollPlayer_add_Params):void

	/** 暂停当前视频播放*/ 
	pause():void

	/** 暂停后播放视频（iOS此接口只支持暂停后播放视频，若open接口设置autoPlay为fasle或者视频停止后开始播放调用startPlay接口）*/ 
	play():void

	/**
	 * `播放视频`
	 * ========params==========
	 *
	 * `index` :number : （可选项）播放视频下标
	 */
	startPlay(params:UIScrollPlayer_startPlay_Params):void

	/** 滑动播放器监听*/ 
	addEventListener():void

	/** 添加视频悬浮按钮监听事件*/ 
	addButtonsListener():void

}
interface UIScrollPlayer_open_Params {
	/**模块的位置及尺寸*/ 
	rect:JSON,

	/**视频列表*/ 
	videos:Array<JSON>,

	/**（可选项）悬浮在视频上方按钮，videos中item中不设置buttons则按此参数展示*/ 
	buttons?:Array<JSON>,

	/**（可选项）页面打开时默认播放视频的下标*/ 
	index?:number,

	/**（可选项）视频是否自动播放，设置为false后所有视频都不自动播放*/ 
	autoPlay?:boolean,

	/**（可选项）视频填充方式*/ 
	scalingMode?:number,

	/**（可选项）封面图填充方式*/ 
	imgScaleType?:number,

	/**（可选项）是否循环播放*/ 
	isLooping?:boolean,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface UIScrollPlayer_add_Params {
	/**视频列表*/ 
	videos:Array<JSON>,

}

interface UIScrollPlayer_startPlay_Params {
	/**（可选项）播放视频下标*/ 
	index?:number,

}

interface UILineChart {
}
interface UIPartCircleProgress {
	/** 显示圆形进度条窗口*/ 
	open():void

	/** 关闭圆形进度条窗口*/ 
	close():void

	/** 设置进度条进度。*/ 
	setProgress():void

	/** 设置进度条中显示内容*/ 
	setTitles():void

	/** 设置进度条进度监听*/ 
	setProgressListener():void

	/** 显示圆形进度条窗口*/ 
	show():void

	/** 隐藏圆形进度条窗口*/ 
	hide():void

	/** 给标题添加点击事件*/ 
	addClickListenner():void

}
interface hintChatBox {
}
interface UIMediaScanner {
	/**
	 * `打开多媒体资源选择器，打开后会全屏显示`
	 * ========params==========
	 *
	 * `type` :string : 返回的资源种类；默认：'all'
	 *
	 * `column` :number : （可选项）图片显示的列数，须大于1
	 *
	 * `classify` :boolean : （可选项）是否将图片分类显示（为 true 时，会首先跳转到相册分类列表页面）
	 *
	 * `max` :number : （可选项）最多选择几张图片
	 *
	 * `sort` :JSON : （可选项）图片排序方式
	 *
	 * `texts` :JSON : （可选项）模块各部分的文字内容
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `scrollToBottom` :JSON : （可选项）打开媒体资源界面后间隔一段时间开始自动滚动到底部设置
	 *
	 * `exchange` :boolean : 是否交换‘确定’和‘取消’按钮的位置（默认‘取消’按钮在右边，‘确定’按钮在左边）
	 *
	 * `rotation` :boolean : 屏幕是否旋转（横屏），为 true 时可以横竖屏旋转，false 时禁止横屏
	 *
	 * `showPreview` :boolean : 是否支持返回预览事件
	 *
	 * `showBrowser` :boolean : 是否支持打开已选图片预览效果
	 */
	open(params:UIMediaScanner_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扫描系统多媒体资源，可以通过 Web 代码自定义多选界面。**注意：页面展示的图片建议使用缩略图，一次显示的图片不宜过多（1至2屏）**`
	 * ========params==========
	 *
	 * `type` :string : 返回的资源种类；默认：'all'
	 *
	 * `count` :number : （可选项）每次返回的资源数量；
	 *
	 * `sort` :JSON : （可选项）图片排序方式
	 *
	 * `thumbnail` :JSON : （可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口api.clearCache()。
	 *
	 * `showGroup` :boolean : （可选项）是否返回图片所在分组名，本参数对 android 平台无效
	 */
	scan(params:UIMediaScanner_scan_Params, callback?: (ret:JSON) => void):void

	/** 获取指定数量的多媒体资源，没有更多资源则返回空数组，**必须配合 scan 接口的 count 参数一起使用**。*/ 
	fetch():void

	/**
	 * `将系统相册媒体资源地址转换为可以直接使用的本地路径地址（临时文件夹的绝对路径），**媒体资源会被拷贝到临时文件夹，调用 api.clearCache 接口可清除该临时图片文件**`
	 * ========params==========
	 *
	 * `path` :string : （可选项）返回数据类型，指定返回图片地址或图片经过 base64 编码后的字符串
	 *
	 * `scale` :JSON : （可选项）从本地相册拷贝图片到缓存目录时对图片的压缩处理，若不传则取内部字段中的默认值
	 */
	transPath(params:UIMediaScanner_transPath_Params, callback?: (ret:JSON) => void):void

	/**
	 * `- 类型：字符串`
	 * ========params==========
	 *
	 * `path` :string : 视频资源路径（在相册库的绝对路径,另外支持 fs:// widget://路径）
	 */
	getVideoDuration(params:UIMediaScanner_getVideoDuration_Params, callback?: (ret:JSON) => void):void

}
interface UIMediaScanner_open_Params {
	/**返回的资源种类；默认：'all'*/ 
	type:string,

	/**（可选项）图片显示的列数，须大于1*/ 
	column?:number,

	/**（可选项）是否将图片分类显示（为 true 时，会首先跳转到相册分类列表页面）*/ 
	classify?:boolean,

	/**（可选项）最多选择几张图片*/ 
	max?:number,

	/**（可选项）图片排序方式*/ 
	sort?:JSON,

	/**（可选项）模块各部分的文字内容*/ 
	texts?:JSON,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）打开媒体资源界面后间隔一段时间开始自动滚动到底部设置*/ 
	scrollToBottom?:JSON,

	/**是否交换‘确定’和‘取消’按钮的位置（默认‘取消’按钮在右边，‘确定’按钮在左边）*/ 
	exchange:boolean,

	/**屏幕是否旋转（横屏），为 true 时可以横竖屏旋转，false 时禁止横屏*/ 
	rotation:boolean,

	/**是否支持返回预览事件*/ 
	showPreview:boolean,

	/**是否支持打开已选图片预览效果*/ 
	showBrowser:boolean,

}

interface UIMediaScanner_scan_Params {
	/**返回的资源种类；默认：'all'*/ 
	type:string,

	/**（可选项）每次返回的资源数量；*/ 
	count?:number,

	/**（可选项）图片排序方式*/ 
	sort?:JSON,

	/**（可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口api.clearCache()。*/ 
	thumbnail?:JSON,

	/**（可选项）是否返回图片所在分组名，本参数对 android 平台无效*/ 
	showGroup?:boolean,

}

interface UIMediaScanner_transPath_Params {
	/**（可选项）返回数据类型，指定返回图片地址或图片经过 base64 编码后的字符串*/ 
	path?:string,

	/**（可选项）从本地相册拷贝图片到缓存目录时对图片的压缩处理，若不传则取内部字段中的默认值*/ 
	scale?:JSON,

}

interface UIMediaScanner_getVideoDuration_Params {
	/**视频资源路径（在相册库的绝对路径,另外支持 fs:// widget://路径）*/ 
	path:string,

}

interface addressView {
	/** 打开模块初始化操作，可以自定义初始化省市区数据。调用show接口显示界面。*/ 
	open():void

	/** 打开选择界面*/ 
	show(callback?: (ret:JSON) => void):void

}
interface screenTaskUI {
	/**
	 * `开启锁屏显示，刷新ui数据。（需要手动打开应用【锁屏显示】权限）`
	 * ========params==========
	 *
	 * `already` :number : （可选项）已完成巡点（进度条分子）
	 *
	 * `total` :number : （可选项）总巡点（进度条分母）
	 *
	 * `alreadyTextSize` :number : （可选项）进度条分子文字大小（包括"/"）
	 *
	 * `totalTextSize` :number : （可选项）进度条分母文字大小
	 *
	 * `defaultCirleColor` :string : （可选项）进度条背景色,支持rgb,rgba
	 *
	 * `alreadyCircleColor` :string : （可选项）进度条进度颜色,支持rgb,rgba
	 *
	 * `topText ` :string : （可选项）应巡点文本（包括 ’应巡点：‘）
	 *
	 * `bottomText` :string : （可选项）距离文本（包括 ’距离：‘）
	 *
	 * `topTextColor` :string : （可选项）应巡点文本颜色,支持rgb,rgba
	 *
	 * `bottomTextColor` :string : （可选项）距离文本颜色,支持rgb,rgba
	 *
	 * `topTextSize` :string : （可选项）应巡点文本大小
	 *
	 * `bottomTextSize` :string : （可选项）距离文本大小
	 */
	start(params:screenTaskUI_start_Params, callback?: (ret:JSON) => void):void

	/** 关闭锁屏界面*/ 
	close():void

}
interface screenTaskUI_start_Params {
	/**（可选项）已完成巡点（进度条分子）*/ 
	already?:number,

	/**（可选项）总巡点（进度条分母）*/ 
	total?:number,

	/**（可选项）进度条分子文字大小（包括"/"）*/ 
	alreadyTextSize?:number,

	/**（可选项）进度条分母文字大小*/ 
	totalTextSize?:number,

	/**（可选项）进度条背景色,支持rgb,rgba*/ 
	defaultCirleColor?:string,

	/**（可选项）进度条进度颜色,支持rgb,rgba*/ 
	alreadyCircleColor?:string,

	/**（可选项）应巡点文本（包括 ’应巡点：‘）*/ 
	topText ?:string,

	/**（可选项）距离文本（包括 ’距离：‘）*/ 
	bottomText?:string,

	/**（可选项）应巡点文本颜色,支持rgb,rgba*/ 
	topTextColor?:string,

	/**（可选项）距离文本颜色,支持rgb,rgba*/ 
	bottomTextColor?:string,

	/**（可选项）应巡点文本大小*/ 
	topTextSize?:string,

	/**（可选项）距离文本大小*/ 
	bottomTextSize?:string,

}

interface beautifulPicker {
	/** 打开日期对话框*/ 
	date():void

}
interface UIPullRefreshMotive {
	/** 配置下拉刷新样式*/ 
	setCustomRefreshHeaderInfo():void

	/** 手动开始下拉刷新的加载状态，**下拉刷新状态亦可通过用户下拉到阈值自动触发***/ 
	refreshHeaderLoading():void

	/** 手动停止下拉刷新的加载状态*/ 
	refreshHeaderLoadDone():void

}
interface pieChart {
	/**
	 * `**注意:请保证 所有数值加起来不为0 否则无实际意义 **`
	 * ========params==========
	 *
	 * `x` :number : （可选项）圆心坐标
	 *
	 * `y` :number : （可选项）圆心坐标
	 *
	 * `radius` :number : （可选项）圆半径
	 *
	 * `center` :JSON : （可选项）饼形图中间标题样式设置
	 *
	 * `elements` :Array : 模块字典对象组成的数组
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:pieChart_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新展示数据`
	 * ========params==========
	 *
	 * `id` :number : 操作的视图的id
	 *
	 * `elements` :Array : 模块字典对象组成的数组
	 */
	reloadData(params:pieChart_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重设模块视图的位置大小`
	 * ========params==========
	 *
	 * `id` :number : 操作的视图的id
	 *
	 * `x` :number : （可选项）圆心坐标
	 *
	 * `y` :number : （可选项）圆心坐标
	 *
	 * `radius` :number : （可选项）圆半径
	 *
	 * `anim` :boolean : （可选项）改变模块视图大小时是否添加变化过程的动画
	 */
	setFrame(params:pieChart_setFrame_Params):void

	/**
	 * `关闭饼图`
	 * ========params==========
	 *
	 * `id` :number : 要关闭的饼图的id
	 */
	close(params:pieChart_close_Params):void

	/**
	 * `隐藏饼图`
	 * ========params==========
	 *
	 * `id` :number : 要隐藏的饼图的id
	 */
	hide(params:pieChart_hide_Params):void

	/**
	 * `显示已隐藏的饼形图`
	 * ========params==========
	 *
	 * `id` :number : 要显示的饼图的id
	 */
	show(params:pieChart_show_Params):void

}
interface pieChart_open_Params {
	/**（可选项）圆心坐标*/ 
	x?:number,

	/**（可选项）圆心坐标*/ 
	y?:number,

	/**（可选项）圆半径*/ 
	radius?:number,

	/**（可选项）饼形图中间标题样式设置*/ 
	center?:JSON,

	/**模块字典对象组成的数组*/ 
	elements:Array,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface pieChart_reloadData_Params {
	/**操作的视图的id*/ 
	id:number,

	/**模块字典对象组成的数组*/ 
	elements:Array,

}

interface pieChart_setFrame_Params {
	/**操作的视图的id*/ 
	id:number,

	/**（可选项）圆心坐标*/ 
	x?:number,

	/**（可选项）圆心坐标*/ 
	y?:number,

	/**（可选项）圆半径*/ 
	radius?:number,

	/**（可选项）改变模块视图大小时是否添加变化过程的动画*/ 
	anim?:boolean,

}

interface pieChart_close_Params {
	/**要关闭的饼图的id*/ 
	id:number,

}

interface pieChart_hide_Params {
	/**要隐藏的饼图的id*/ 
	id:number,

}

interface pieChart_show_Params {
	/**要显示的饼图的id*/ 
	id:number,

}

interface UIScrollPicture {
	/**
	 * `打开模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :JSON : 模块的图片路径数组，及说明文字数组
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `placeholderImg` :string : （可选项）网络图片未加载完毕时，模块显示的占位图片，要求本地路径（fs://、widget://）
	 *
	 * `contentMode` :string : （可选项）图片填充模式
	 *
	 * `cornerRadius` :number : （可选项）图片的圆角半径
	 *
	 * `scrollerCorner` :number : （可选项）滑动视图的圆角半径
	 *
	 * `interval` :number : （可选项）图片轮换时间间隔，单位是秒（s）
	 *
	 * `auto` :boolean : （可选项）图片是否自动播放
	 *
	 * `loop` :boolean : （可选项）图片是否循环播放
	 *
	 * `touchWait` :boolean : （可选项）触摸停止自动播放
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:UIScrollPicture_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭模块*/ 
	close():void

	/** 显示模块*/ 
	show():void

	/** 隐藏模块*/ 
	hide():void

	/**
	 * `指定当前项`
	 * ========params==========
	 *
	 * `index` :number : （可选项）索引值
	 */
	setCurrentIndex(params:UIScrollPicture_setCurrentIndex_Params):void

	/**
	 * `更新模块数据`
	 * ========params==========
	 *
	 * `data` :JSON : 模块的图片路径数组，及说明文字数组
	 */
	reloadData(params:UIScrollPicture_reloadData_Params):void

	/**
	 * `事件监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件名称，取值范围：'scroll'（图片滚动事件）
	 */
	addEventListener(params:UIScrollPicture_addEventListener_Params, callback?: (ret:JSON) => void):void

	/** 清除缓存到本地的网络图片，**本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

}
interface UIScrollPicture_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**模块的图片路径数组，及说明文字数组*/ 
	data:JSON,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）网络图片未加载完毕时，模块显示的占位图片，要求本地路径（fs://、widget://）*/ 
	placeholderImg?:string,

	/**（可选项）图片填充模式*/ 
	contentMode?:string,

	/**（可选项）图片的圆角半径*/ 
	cornerRadius?:number,

	/**（可选项）滑动视图的圆角半径*/ 
	scrollerCorner?:number,

	/**（可选项）图片轮换时间间隔，单位是秒（s）*/ 
	interval?:number,

	/**（可选项）图片是否自动播放*/ 
	auto?:boolean,

	/**（可选项）图片是否循环播放*/ 
	loop?:boolean,

	/**（可选项）触摸停止自动播放*/ 
	touchWait?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIScrollPicture_setCurrentIndex_Params {
	/**（可选项）索引值*/ 
	index?:number,

}

interface UIScrollPicture_reloadData_Params {
	/**模块的图片路径数组，及说明文字数组*/ 
	data:JSON,

}

interface UIScrollPicture_addEventListener_Params {
	/**监听的事件名称，取值范围：'scroll'（图片滚动事件）*/ 
	name:string,

}

interface UIInputBox {
	/** 打开聊天输入框*/ 
	open(callback?: (ret:JSON) => void):void

	/** 关闭聊天输入框*/ 
	close():void

	/** 显示聊天输入框*/ 
	show():void

	/** 隐藏聊天输入框*/ 
	hide():void

	/** 弹出表情*/ 
	popupBoard():void

	/** 收起表情*/ 
	closeBoard():void

	/** 弹出键盘*/ 
	popupKeyboard():void

	/** 收起键盘*/ 
	closeKeyboard():void

	/**
	 * `获取或设置聊天输入框的内容`
	 * ========params==========
	 *
	 * `msg` :string : （可选项）聊天输入框的内容，若不传则返回输入框的值
	 */
	value(params:UIInputBox_value_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向聊天输入框的指定位置插入内容`
	 * ========params==========
	 *
	 * `index` :number : （可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。**
	 *
	 * `msg` :string : （可选项）要插入的内容
	 */
	insertValue(params:UIInputBox_insertValue_Params):void

	/** 事件监听 （输入区域，输入框及两侧按钮区域）*/ 
	addEventListener():void

	/**
	 * `重设聊天输入框的占位提示文本`
	 * ========params==========
	 *
	 * `placeholder` :string : （可选项）占位提示文本，若不传或传空则表示清空占位提示内容
	 */
	setPlaceholder(params:UIInputBox_setPlaceholder_Params):void

}
interface UIInputBox_value_Params {
	/**（可选项）聊天输入框的内容，若不传则返回输入框的值*/ 
	msg?:string,

}

interface UIInputBox_insertValue_Params {
	/**（可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。***/ 
	index?:number,

	/**（可选项）要插入的内容*/ 
	msg?:string,

}

interface UIInputBox_setPlaceholder_Params {
	/**（可选项）占位提示文本，若不传或传空则表示清空占位提示内容*/ 
	placeholder?:string,

}

interface listViewEntity {
	/**
	 * `打开 listViewEntity 模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用**
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数**
	 *
	 * `bounces` :boolean : （可选项）是否开启弹动，android 平台不支持本参数
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `showScrollBar` :boolean : （可选项）是否显示滚动条
	 */
	open(params:listViewEntity_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭数据列表模块*/ 
	close():void

	/** 显示 listViewEntity 模块*/ 
	show():void

	/** 隐藏 listViewEntity 模块*/ 
	hide():void

	/**
	 * `设置列表的纵坐标和高度`
	 * ========params==========
	 *
	 * `y` :number : （可选项）模块的纵坐标
	 *
	 * `h` :number : （可选项）模块的高度
	 */
	setAttr(params:listViewEntity_setAttr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据开发者自定义的唯一标识（open 接口的 data 参数中自定义的唯一标识）查找列表项对应的数据`
	 * ========params==========
	 *
	 * `key` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key
	 *
	 * `value` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value
	 */
	getIndex(params:listViewEntity_getIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据列表项的索引获取对应的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 */
	getDataByIndex(params:listViewEntity_getDataByIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置侧滑显示出来的按钮`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 *
	 * `btns` :Array : （可选项）列表项侧滑露出的按钮组
	 */
	setSwipeBtns(params:listViewEntity_setSwipeBtns_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `data` :Array : （可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件**
	 */
	reloadData(params:listViewEntity_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引删除某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 */
	deleteItem(params:listViewEntity_deleteItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引更新某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	updateItem(params:listViewEntity_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引向某一条列表插入数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	insertItem(params:listViewEntity_insertItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `data` :Array : 列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:listViewEntity_appendData_Params, callback?: (ret:JSON) => void):void

	/** 获取当前列表的总数据量*/ 
	getCount():void

	/**
	 * `设置下拉刷新，**通过 reloadData 收起下拉刷新组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）下拉刷新区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textDown` :string : （可选项）下拉提示文字
	 *
	 * `textUp` :string : （可选项）松开提示文字
	 *
	 * `loadingText` :string : （可选项）提示文字
	 *
	 * `lastUpdateText` :string : （可选项）提示文字
	 *
	 * `showTime` :boolean : （可选项）是否显示刷新时间
	 */
	setRefreshHeader(params:listViewEntity_setRefreshHeader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置上拉加载，**通过 appendData 收起上拉加载组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）上拉加载区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textUp` :string : （可选项）上拉提示文字
	 *
	 * `textDown` :string : （可选项）松开提示文字
	 *
	 * `loadingText` :string : （可选项）提示文字
	 *
	 * `lastUpdateText` :string : （可选项）提示文字
	 *
	 * `showTime` :boolean : （可选项）是否显示刷新时间
	 */
	setRefreshFooter(params:listViewEntity_setRefreshFooter_Params, callback?: (ret:JSON) => void):void

}
interface listViewEntity_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用***/ 
	data:Array,

	/**（可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数***/ 
	rightBtns?:Array,

	/**（可选项）是否开启弹动，android 平台不支持本参数*/ 
	bounces?:boolean,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否显示滚动条*/ 
	showScrollBar?:boolean,

}

interface listViewEntity_setAttr_Params {
	/**（可选项）模块的纵坐标*/ 
	y?:number,

	/**（可选项）模块的高度*/ 
	h?:number,

}

interface listViewEntity_getIndex_Params {
	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key*/ 
	key:string,

	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value*/ 
	value:string,

}

interface listViewEntity_getDataByIndex_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

}

interface listViewEntity_setSwipeBtns_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

	/**（可选项）列表项侧滑露出的按钮组*/ 
	btns?:Array,

}

interface listViewEntity_reloadData_Params {
	/**（可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件***/ 
	data?:Array,

}

interface listViewEntity_deleteItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

}

interface listViewEntity_updateItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface listViewEntity_insertItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface listViewEntity_appendData_Params {
	/**列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	data:Array,

}

interface listViewEntity_setRefreshHeader_Params {
	/**下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）下拉刷新区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）下拉提示文字*/ 
	textDown?:string,

	/**（可选项）松开提示文字*/ 
	textUp?:string,

	/**（可选项）提示文字*/ 
	loadingText?:string,

	/**（可选项）提示文字*/ 
	lastUpdateText?:string,

	/**（可选项）是否显示刷新时间*/ 
	showTime?:boolean,

}

interface listViewEntity_setRefreshFooter_Params {
	/**上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）上拉加载区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）上拉提示文字*/ 
	textUp?:string,

	/**（可选项）松开提示文字*/ 
	textDown?:string,

	/**（可选项）提示文字*/ 
	loadingText?:string,

	/**（可选项）提示文字*/ 
	lastUpdateText?:string,

	/**（可选项）是否显示刷新时间*/ 
	showTime?:boolean,

}

interface superKeyboard {
	/** 打开模块。*/ 
	open(callback?: (ret:JSON) => void):void

	/** 关闭键盘。*/ 
	close(callback?: (ret:JSON) => void):void

	/** 获取模块宽度。*/ 
	getWidth(callback?: (ret:JSON) => void):void

}
interface watermark {
	/** 添加水印，此接口仅添加一个水印*/ 
	addWatermark():void

	/** 添加水印,此接口会将水印铺满整页，此接口建议rotate为-45。且此接口iOS与android样式有一定差距 如不符合要求建议使用addWatermark自行铺满。*/ 
	addAllPageWatermark():void

	/** 移除水印*/ 
	removeWatermark():void

}
interface UICoverFlowS {
	/**
	 * `打开 UICoverFlowS`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : 图片流的整体样式设置
	 *
	 * `index` :number : （可选项）初始选中的图片索引值，从 0 开始
	 *
	 * `reflect` :boolean : （可选项）图片是否显示倒影
	 *
	 * `isOpenAutoScroll` :boolean : （可选项）轮播图是否开启无限自动轮播
	 *
	 * `autoTime` :number : （可选项）自动轮播间隔时间（秒）
	 *
	 * `images` :Array<JSON> : 为图片流指定数据
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	open(params:UICoverFlowS_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `滚动到指定条目`
	 * ========params==========
	 *
	 * `index` :number : 滚动的指定位置索引
	 *
	 * `id` :number : 轮播图对应id
	 */
	setIndex(params:UICoverFlowS_setIndex_Params):void

	/** 关闭 UICoverFlowS*/ 
	close():void

	/** 隐藏显示的 coverFlow*/ 
	hide():void

	/** 显示已隐藏的 UICoverFlowS*/ 
	show():void

}
interface UICoverFlowS_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**图片流的整体样式设置*/ 
	styles:JSON,

	/**（可选项）初始选中的图片索引值，从 0 开始*/ 
	index?:number,

	/**（可选项）图片是否显示倒影*/ 
	reflect?:boolean,

	/**（可选项）轮播图是否开启无限自动轮播*/ 
	isOpenAutoScroll?:boolean,

	/**（可选项）自动轮播间隔时间（秒）*/ 
	autoTime?:number,

	/**为图片流指定数据*/ 
	images:Array<JSON>,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

}

interface UICoverFlowS_setIndex_Params {
	/**滚动的指定位置索引*/ 
	index:number,

	/**轮播图对应id*/ 
	id:number,

}

interface UIGraph {
	/**
	 * `打开贝塞尔曲线模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `yAxis` :JSON : 曲线图的y轴信息
	 *
	 * `data` :Array : 曲线关键结点的数据
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `showNode` :boolean : （可选项）是否默认显示结点
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:UIGraph_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭曲线图模块`
	 * ========params==========
	 *
	 * `id` :number : 模块的 id，用于区分模块的多个实例
	 */
	close(params:UIGraph_close_Params):void

	/**
	 * `显示曲线图模块`
	 * ========params==========
	 *
	 * `id` :number : 模块的 id，用于区分模块的多个实例
	 */
	show(params:UIGraph_show_Params):void

	/**
	 * `隐藏曲线图模块`
	 * ========params==========
	 *
	 * `id` :number : 模块的 id，用于区分模块的多个实例
	 */
	hide(params:UIGraph_hide_Params):void

	/**
	 * `更新曲线图的数据`
	 * ========params==========
	 *
	 * `id` :number : 模块 id，用于区分多个模块实例
	 *
	 * `xScale` :number : 曲线x轴缩放比例
	 *
	 * `type` :string : 更新数据的方式
	 *
	 * `data` :Array : 要更新的数据
	 */
	reloadData(params:UIGraph_reloadData_Params):void

}
interface UIGraph_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**曲线图的y轴信息*/ 
	yAxis:JSON,

	/**曲线关键结点的数据*/ 
	data:Array,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）是否默认显示结点*/ 
	showNode?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIGraph_close_Params {
	/**模块的 id，用于区分模块的多个实例*/ 
	id:number,

}

interface UIGraph_show_Params {
	/**模块的 id，用于区分模块的多个实例*/ 
	id:number,

}

interface UIGraph_hide_Params {
	/**模块的 id，用于区分模块的多个实例*/ 
	id:number,

}

interface UIGraph_reloadData_Params {
	/**模块 id，用于区分多个模块实例*/ 
	id:number,

	/**曲线x轴缩放比例*/ 
	xScale:number,

	/**更新数据的方式*/ 
	type:string,

	/**要更新的数据*/ 
	data:Array,

}

interface addressBook {
	/**
	 * `打开文档预览`
	 * ========params==========
	 *
	 * `data` :JSON : 组织架构数据
	 */
	open(params:addressBook_open_Params, callback?: (ret:JSON) => void):void

}
interface addressBook_open_Params {
	/**组织架构数据*/ 
	data:JSON,

}

interface guide {
	/**
	 * `打开图片导航`
	 * ========params==========
	 *
	 * `imgs` :string : （可选项）当前页面分页控件数图片地址（widget:// fs:// 相对路径都是支持），尺寸图片建议30 × 30。
	 *
	 * `btnColor` :string : （可选项）关闭按钮背景颜色(00FFFF)。
	 *
	 * `btnLabel` :string : （可选项）关闭按钮文字,默认马上体验。
	 *
	 * `btnW` :number : （可选项）关闭按钮宽，默认120。
	 *
	 * `btnH` :number : （可选项）关闭按钮文字高，默认33。
	 *
	 * `time` :string : （可选项）导航页消失的时间，以秒为单位。
	 *
	 * `hideStatusBar` :boolean : （可选）是否隐藏状态栏，默认值为true(隐藏状态栏)
	 */
	openGuidePage(params:guide_openGuidePage_Params):void

	/**
	 * `打开视频导航`
	 * ========params==========
	 *
	 * `path` :string : 导航视频本地地址（widget:// fs:// 相对路径都是支持）。
	 *
	 * `time` :string : （可选项）导航页消失的时间。
	 *
	 * `hideStatusBar` :boolean : （可选）是否隐藏状态栏，默认值为true(隐藏状态栏)
	 */
	openGuideVideo(params:guide_openGuideVideo_Params):void

	/**
	 * `打开循环视频导航`
	 * ========params==========
	 *
	 * `path` :string : 导航视频本地地址（widget:// fs:// 相对路径都是支持）。
	 *
	 * `borderColor` :string : 进入按钮边缘颜色，默认值是#FFFFFF（白色）。
	 *
	 * `titleColor` :string : 进入按钮字体颜色，默认值是#FFFFFF（白色）。
	 *
	 * `title` :string : 进入按钮文字，默认值字符串为 进入应用。
	 *
	 * `hideStatusBar` :boolean : （可选）是否隐藏状态栏，默认值为true(隐藏状态栏)
	 */
	openGuideRepeatVideo(params:guide_openGuideRepeatVideo_Params):void

}
interface guide_openGuidePage_Params {
	/**（可选项）当前页面分页控件数图片地址（widget:// fs:// 相对路径都是支持），尺寸图片建议30 × 30。*/ 
	imgs?:string,

	/**（可选项）关闭按钮背景颜色(00FFFF)。*/ 
	btnColor?:string,

	/**（可选项）关闭按钮文字,默认马上体验。*/ 
	btnLabel?:string,

	/**（可选项）关闭按钮宽，默认120。*/ 
	btnW?:number,

	/**（可选项）关闭按钮文字高，默认33。*/ 
	btnH?:number,

	/**（可选项）导航页消失的时间，以秒为单位。*/ 
	time?:string,

	/**（可选）是否隐藏状态栏，默认值为true(隐藏状态栏)*/ 
	hideStatusBar?:boolean,

}

interface guide_openGuideVideo_Params {
	/**导航视频本地地址（widget:// fs:// 相对路径都是支持）。*/ 
	path:string,

	/**（可选项）导航页消失的时间。*/ 
	time?:string,

	/**（可选）是否隐藏状态栏，默认值为true(隐藏状态栏)*/ 
	hideStatusBar?:boolean,

}

interface guide_openGuideRepeatVideo_Params {
	/**导航视频本地地址（widget:// fs:// 相对路径都是支持）。*/ 
	path:string,

	/**进入按钮边缘颜色，默认值是#FFFFFF（白色）。*/ 
	borderColor:string,

	/**进入按钮字体颜色，默认值是#FFFFFF（白色）。*/ 
	titleColor:string,

	/**进入按钮文字，默认值字符串为 进入应用。*/ 
	title:string,

	/**（可选）是否隐藏状态栏，默认值为true(隐藏状态栏)*/ 
	hideStatusBar?:boolean,

}

interface videoEdit {
	/**
	 * `打开视频剪辑页面`
	 * ========params==========
	 *
	 * `path` :string : 剪辑的视频本地路径,支持fs://，widget://
	 *
	 * `maxEditTime` :number : 最大编辑时间，单位秒
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式配置
	 *
	 * `ret` :any : null
	 */
	open(params:videoEdit_open_Params):void

	/** 关闭视频剪辑页面*/ 
	close():void

}
interface videoEdit_open_Params {
	/**剪辑的视频本地路径,支持fs://，widget://*/ 
	path:string,

	/**最大编辑时间，单位秒*/ 
	maxEditTime:number,

	/**（可选项）模块各部分的样式配置*/ 
	styles?:JSON,

	/**null*/ 
	ret:any,

}

interface UIDatePickerTool {
	/**
	 * `打开选择器`
	 * ========params==========
	 *
	 * `rowHeight` :number : （可选项）设置选择器的行高
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 */
	open(params:UIDatePickerTool_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭选择器*/ 
	close():void

	/** 隐藏选择器*/ 
	hide():void

	/** 显示已隐藏的选择器*/ 
	show():void

}
interface UIDatePickerTool_open_Params {
	/**（可选项）设置选择器的行高*/ 
	rowHeight?:number,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

}

interface UIButton {
	/**
	 * `使按钮在视图最顶层显示`
	 * ========params==========
	 *
	 * `id ` :number : 操作按钮模块的 id
	 */
	bringToFront(params:UIButton_bringToFront_Params):void

}
interface UIButton_bringToFront_Params {
	/**操作按钮模块的 id*/ 
	id :number,

}

interface labelDragSort {
	/**
	 * `打开`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `labelArray` :Array : 所有标签文字数组
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	open(params:labelDragSort_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `再次添加标签`
	 * ========params==========
	 *
	 * `labelArray` :Array : 所有标签文字数组
	 */
	addLabel(params:labelDragSort_addLabel_Params, callback?: (ret:JSON) => void):void

	/** 开始编辑*/ 
	startEdit():void

	/** 关闭*/ 
	close():void

	/** 显示*/ 
	show():void

	/** 隐藏*/ 
	hide():void

	/** 编辑完成*/ 
	finishEdit(callback?: (ret:JSON) => void):void

	/** 删除标签*/ 
	deleteLabel(callback?: (ret:JSON) => void):void

}
interface labelDragSort_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**所有标签文字数组*/ 
	labelArray:Array,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

}

interface labelDragSort_addLabel_Params {
	/**所有标签文字数组*/ 
	labelArray:Array,

}

interface handlock {
	/**
	 * `设置手势密码`
	 * ========params==========
	 *
	 * `titleName` :string : （可选项）默认为空,为空时没有标题栏，目前不支持设置标题栏颜色，如颜色不适用建议隐藏标题栏。
	 */
	set(params:handlock_set_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改手势密码，先验证原密码，后设置新密码`
	 * ========params==========
	 *
	 * `titleName` :string : （可选项）默认为空,为空时没有标题栏，目前不支持设置标题栏颜色，如颜色不适用建议隐藏标题栏。
	 *
	 * `handPassword` :string : 已设置的密码，例如：1,2,3,4,5,6。
	 */
	modify(params:handlock_modify_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消手势密码`
	 * ========params==========
	 *
	 * `titleName` :string : （可选项）默认为空,为空时没有标题栏，目前不支持设置标题栏颜色，如颜色不适用建议隐藏标题栏。
	 *
	 * `handPassword` :string : 已设置的密码，例如：1,2,3,4,5,6。
	 */
	cancel(params:handlock_cancel_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解锁手势密码`
	 * ========params==========
	 *
	 * `titleName` :string : （可选项）默认为空,为空时没有标题栏，目前不支持设置标题栏颜色，如颜色不适用建议隐藏标题栏。
	 *
	 * `handPassword` :string : 已设置的密码，例如：1,2,3,4,5,6。
	 */
	unlock(params:handlock_unlock_Params, callback?: (ret:JSON) => void):void

}
interface handlock_set_Params {
	/**（可选项）默认为空,为空时没有标题栏，目前不支持设置标题栏颜色，如颜色不适用建议隐藏标题栏。*/ 
	titleName?:string,

}

interface handlock_modify_Params {
	/**（可选项）默认为空,为空时没有标题栏，目前不支持设置标题栏颜色，如颜色不适用建议隐藏标题栏。*/ 
	titleName?:string,

	/**已设置的密码，例如：1,2,3,4,5,6。*/ 
	handPassword:string,

}

interface handlock_cancel_Params {
	/**（可选项）默认为空,为空时没有标题栏，目前不支持设置标题栏颜色，如颜色不适用建议隐藏标题栏。*/ 
	titleName?:string,

	/**已设置的密码，例如：1,2,3,4,5,6。*/ 
	handPassword:string,

}

interface handlock_unlock_Params {
	/**（可选项）默认为空,为空时没有标题栏，目前不支持设置标题栏颜色，如颜色不适用建议隐藏标题栏。*/ 
	titleName?:string,

	/**已设置的密码，例如：1,2,3,4,5,6。*/ 
	handPassword:string,

}

interface matrixLock {
}
interface divisionalLineChart {
	/**
	 * `打开折线图视图`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `bg` :string : （可选项）模块背景色，支持rgb、rgba、#
	 *
	 * `coordinate` :JSON : （可选项）折线图的坐标系配置
	 *
	 * `shadow` :Array : （可选项）阴影内容样式配置信息组成的数组
	 *
	 * `data` :Array : 折线的数据信息
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空
	 */
	open(params:divisionalLineChart_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新指定 id 的折线数据`
	 * ========params==========
	 *
	 * `id` :number : 要刷新的模块的 id
	 *
	 * `type` :string : 更新数据的方式
	 *
	 * `data` :Array : 折线的数据信息
	 */
	reloadData(params:divisionalLineChart_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新阴影区域`
	 * ========params==========
	 *
	 * `id` :number : 要更新阴影的模块的 id
	 *
	 * `shadow` :Array : （可选项）阴影内容样式配置信息
	 */
	updateShadow(params:divisionalLineChart_updateShadow_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭折线图视图，并从内存里清除`
	 * ========params==========
	 *
	 * `id` :number : 要关闭的模块的 id
	 */
	close(params:divisionalLineChart_close_Params, callback?: (ret:JSON) => void):void

	/** 隐藏折线图视图，并未从内存清除，可调用 show 接口显示该模块*/ 
	hide():void

	/** 显示已隐藏的折线图模块*/ 
	show():void

}
interface divisionalLineChart_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块背景色，支持rgb、rgba、#*/ 
	bg?:string,

	/**（可选项）折线图的坐标系配置*/ 
	coordinate?:JSON,

	/**（可选项）阴影内容样式配置信息组成的数组*/ 
	shadow?:Array,

	/**折线的数据信息*/ 
	data:Array,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空*/ 
	fixed:boolean,

}

interface divisionalLineChart_reloadData_Params {
	/**要刷新的模块的 id*/ 
	id:number,

	/**更新数据的方式*/ 
	type:string,

	/**折线的数据信息*/ 
	data:Array,

}

interface divisionalLineChart_updateShadow_Params {
	/**要更新阴影的模块的 id*/ 
	id:number,

	/**（可选项）阴影内容样式配置信息*/ 
	shadow?:Array,

}

interface divisionalLineChart_close_Params {
	/**要关闭的模块的 id*/ 
	id:number,

}

interface UICoverFlow {
	/** 清除缓存到本地的网络图片，**本接口只清除本模块缓存的数据，若要清除本app缓存的所有数据这调用api.clearCache***/ 
	clearCache():void

}
interface popupMenu {
}
interface editDialog {
	/**
	 * `打开编辑框`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `fontSize` :number : （可选项）字体大小。(建议16-18)
	 *
	 * `fontColor` :string : （可选项）字体颜色。
	 *
	 * `inputType` :number : （可选项）键盘类型 (0:正常|1:数字|2:email|3:url|4:密码)。
	 *
	 * `inputHint` :string : （可选项）提示文字。
	 *
	 * `defaultText` :string : （可选项）默认显示文字。
	 *
	 * `maxNum` :number : （可选项）最大字数(如果为0,或者缺省长度无限制,并且不回调onNum事件方法)。
	 */
	openEditText(params:editDialog_openEditText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `隐藏编辑框`
	 * ========params==========
	 *
	 * `index` :number : （可选项）需要操作的编辑框序号。
	 */
	hideEditText(params:editDialog_hideEditText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示编辑框`
	 * ========params==========
	 *
	 * `index` :number : （可选项）需要操作的编辑框序号。
	 */
	showEditText(params:editDialog_showEditText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭编辑框`
	 * ========params==========
	 *
	 * `index` :number : （可选项）需要操作的编辑框序号。
	 */
	closeEditText(params:editDialog_closeEditText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `插入数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）需要操作的编辑框序号。
	 *
	 * `data` :number : （必填项）需要插入到编辑框的数据。
	 */
	insertData(params:editDialog_insertData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除所有数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）需要操作的编辑框序号。
	 */
	cleanAll(params:editDialog_cleanAll_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取编辑输入框内所有数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）需要操作的编辑框序号。
	 */
	getContent(params:editDialog_getContent_Params, callback?: (ret:JSON) => void):void

}
interface editDialog_openEditText_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）字体大小。(建议16-18)*/ 
	fontSize?:number,

	/**（可选项）字体颜色。*/ 
	fontColor?:string,

	/**（可选项）键盘类型 (0:正常|1:数字|2:email|3:url|4:密码)。*/ 
	inputType?:number,

	/**（可选项）提示文字。*/ 
	inputHint?:string,

	/**（可选项）默认显示文字。*/ 
	defaultText?:string,

	/**（可选项）最大字数(如果为0,或者缺省长度无限制,并且不回调onNum事件方法)。*/ 
	maxNum?:number,

}

interface editDialog_hideEditText_Params {
	/**（可选项）需要操作的编辑框序号。*/ 
	index?:number,

}

interface editDialog_showEditText_Params {
	/**（可选项）需要操作的编辑框序号。*/ 
	index?:number,

}

interface editDialog_closeEditText_Params {
	/**（可选项）需要操作的编辑框序号。*/ 
	index?:number,

}

interface editDialog_insertData_Params {
	/**（可选项）需要操作的编辑框序号。*/ 
	index?:number,

	/**（必填项）需要插入到编辑框的数据。*/ 
	data:number,

}

interface editDialog_cleanAll_Params {
	/**（可选项）需要操作的编辑框序号。*/ 
	index?:number,

}

interface editDialog_getContent_Params {
	/**（可选项）需要操作的编辑框序号。*/ 
	index?:number,

}

interface UIDatePickerS {
	/**
	 * `打开选择器`
	 * ========params==========
	 *
	 * `rowHeight` :number : （可选项）设置选择器的行高
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:UIDatePickerS_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭选择器*/ 
	close():void

	/** 隐藏选择器*/ 
	hide():void

	/** 显示已隐藏的选择器*/ 
	show():void

}
interface UIDatePickerS_open_Params {
	/**（可选项）设置选择器的行高*/ 
	rowHeight?:number,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIVividLine {
	/**
	 * `打开折线图视图`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : （可选项）折线图样式配置
	 *
	 * `datas` :Array : 折线的数据信息
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空
	 */
	open(params:UIVividLine_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新折线数据`
	 * ========params==========
	 *
	 * `id` :number : 操作视图的 id
	 *
	 * `datas` :Array : 折线的数据信息
	 */
	reloadData(params:UIVividLine_reloadData_Params):void

	/**
	 * `往现有数据拼接新数据`
	 * ========params==========
	 *
	 * `id` :number : 操作视图的 id
	 *
	 * `datas` :Array : 折线的数据信息
	 *
	 * `orientation` :string : （可选项）拼接数据的方向，取值范围：right，left
	 */
	appendData(params:UIVividLine_appendData_Params):void

	/**
	 * `关闭折线图视图，并从内存里清空`
	 * ========params==========
	 *
	 * `id` :number : 操作视图的 id
	 */
	close(params:UIVividLine_close_Params):void

	/**
	 * `隐藏折线图视图，并没有从内存里清空`
	 * ========params==========
	 *
	 * `id` :number : 操作视图的 id
	 */
	hide(params:UIVividLine_hide_Params):void

	/**
	 * `显示已隐藏的折线图视图`
	 * ========params==========
	 *
	 * `id` :number : 操作视图的 id
	 */
	show(params:UIVividLine_show_Params):void

}
interface UIVividLine_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）折线图样式配置*/ 
	styles?:JSON,

	/**折线的数据信息*/ 
	datas:Array,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空*/ 
	fixed:boolean,

}

interface UIVividLine_reloadData_Params {
	/**操作视图的 id*/ 
	id:number,

	/**折线的数据信息*/ 
	datas:Array,

}

interface UIVividLine_appendData_Params {
	/**操作视图的 id*/ 
	id:number,

	/**折线的数据信息*/ 
	datas:Array,

	/**（可选项）拼接数据的方向，取值范围：right，left*/ 
	orientation?:string,

}

interface UIVividLine_close_Params {
	/**操作视图的 id*/ 
	id:number,

}

interface UIVividLine_hide_Params {
	/**操作视图的 id*/ 
	id:number,

}

interface UIVividLine_show_Params {
	/**操作视图的 id*/ 
	id:number,

}

interface gestureUnlock {
	/**
	 * `打开手势解锁/设置页面`
	 * ========params==========
	 *
	 * `rect` :JSON : (可选项）手势解锁/设置页面的位置及长宽
	 *
	 * `password` :string : （可选项）用户设置的手势密码，手势解锁时必须设置此参数
	 *
	 * `type` :string : （可选项）页面类型
	 *
	 * `showArrowDirection` :boolean : （可选项）是否显示指示手势划过的方向箭头
	 *
	 * `styles` :JSON : （可选项）手势解锁/设置页面样式设置
	 *
	 * `fixedOn` :string : （可选项）添加到哪个frame，与fixed一起使用
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:gestureUnlock_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭手势解锁/设置页面*/ 
	close():void

	/** 隐藏手势解锁/设置页面*/ 
	hide():void

	/** 显示已隐藏的手势解锁/设置页面*/ 
	show():void

}
interface gestureUnlock_open_Params {
	/**(可选项）手势解锁/设置页面的位置及长宽*/ 
	rect?:JSON,

	/**（可选项）用户设置的手势密码，手势解锁时必须设置此参数*/ 
	password?:string,

	/**（可选项）页面类型*/ 
	type?:string,

	/**（可选项）是否显示指示手势划过的方向箭头*/ 
	showArrowDirection?:boolean,

	/**（可选项）手势解锁/设置页面样式设置*/ 
	styles?:JSON,

	/**（可选项）添加到哪个frame，与fixed一起使用*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIAdaptiveInput {
	/** 打开输入框*/ 
	open(callback?: (ret:JSON) => void):void

	/**
	 * `事件监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件类型
	 */
	addEventListener(params:UIAdaptiveInput_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭指定输入框`
	 * ========params==========
	 *
	 * `id` :string : 所操作模块的 ID
	 */
	close(params:UIAdaptiveInput_close_Params):void

	/**
	 * `显示输入框`
	 * ========params==========
	 *
	 * `id` :string : 所操作模块的 ID
	 */
	show(params:UIAdaptiveInput_show_Params):void

	/**
	 * `隐藏输入框，并没有从内存里清除`
	 * ========params==========
	 *
	 * `id` :string : 所操作模块的 ID
	 */
	hide(params:UIAdaptiveInput_hide_Params):void

	/**
	 * `弹出键盘`
	 * ========params==========
	 *
	 * `id` :string : 所操作模块的 ID
	 */
	becomeFirstResponder(params:UIAdaptiveInput_becomeFirstResponder_Params):void

	/**
	 * `隐藏键盘`
	 * ========params==========
	 *
	 * `id` :string : 所操作模块的 ID
	 */
	resignFirstResponder(params:UIAdaptiveInput_resignFirstResponder_Params):void

	/**
	 * `设置输入框内的文字`
	 * ========params==========
	 *
	 * `id` :string : 所操作模块的 ID
	 *
	 * `value` :string : （可选项）要设置的输入框内的文字内容
	 */
	setValue(params:UIAdaptiveInput_setValue_Params):void

	/**
	 * `获取当前输入框内的文字`
	 * ========params==========
	 *
	 * `id` :string : 所操作模块的 ID
	 */
	getValue(params:UIAdaptiveInput_getValue_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向当前输入框内指定位置插入字符串`
	 * ========params==========
	 *
	 * `id` :string : 所操作模块的 ID
	 *
	 * `index` :number : （可选项）插入当前输入框内字符串的位置
	 *
	 * `value` :string : （可选项）要设置的输入框内的文字内容
	 */
	insertValue(params:UIAdaptiveInput_insertValue_Params):void

}
interface UIAdaptiveInput_addEventListener_Params {
	/**监听的事件类型*/ 
	name:string,

}

interface UIAdaptiveInput_close_Params {
	/**所操作模块的 ID*/ 
	id:string,

}

interface UIAdaptiveInput_show_Params {
	/**所操作模块的 ID*/ 
	id:string,

}

interface UIAdaptiveInput_hide_Params {
	/**所操作模块的 ID*/ 
	id:string,

}

interface UIAdaptiveInput_becomeFirstResponder_Params {
	/**所操作模块的 ID*/ 
	id:string,

}

interface UIAdaptiveInput_resignFirstResponder_Params {
	/**所操作模块的 ID*/ 
	id:string,

}

interface UIAdaptiveInput_setValue_Params {
	/**所操作模块的 ID*/ 
	id:string,

	/**（可选项）要设置的输入框内的文字内容*/ 
	value?:string,

}

interface UIAdaptiveInput_getValue_Params {
	/**所操作模块的 ID*/ 
	id:string,

}

interface UIAdaptiveInput_insertValue_Params {
	/**所操作模块的 ID*/ 
	id:string,

	/**（可选项）插入当前输入框内字符串的位置*/ 
	index?:number,

	/**（可选项）要设置的输入框内的文字内容*/ 
	value?:string,

}

interface UIChatTools {
	/** 打开聊天输入框*/ 
	open(callback?: (ret:JSON) => void):void

	/**
	 * `设置附加功能按钮，**仅当 open 接口内 tools->append 参数有值时，本接口有效**`
	 * ========params==========
	 *
	 * `styles` :JSON : （可选项）附加功能面板按钮样式配置
	 *
	 * `buttons` :Array : 附加功能面板按钮信息集合，可分页显示
	 */
	setAppendButton(params:UIChatTools_setAppendButton_Params, callback?: (ret:JSON) => void):void

	/**
	 * `表情面板相关功能事件的监听，**仅当 open 接口内 tools->face 参数有值时，本接口有效**`
	 * ========params==========
	 *
	 * `name` :string : 事件的目标对象
	 */
	faceListener(params:UIChatTools_faceListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加表情包，**仅当 open 接口内 tools->face 参数有值时，本接口有效**`
	 * ========params==========
	 *
	 * `path` :string : 表情包文件夹路径，表情包格式规范要求同 open 内附加表情包格式规范一致
	 */
	addFace(params:UIChatTools_addFace_Params, callback?: (ret:JSON) => void):void

	/** 选择图片相关功能事件的监听，**仅当 open 接口内 tools->image 参数有值时，本接口有效***/ 
	imageListener(callback?: (ret:JSON) => void):void

	/** 用户点击工具栏内某个按钮事件的监听*/ 
	toolsListener():void

	/** 录音相关功能事件的监听，**仅当 open 接口内 tools->recorder 参数有值时，本接口有效***/ 
	recorderListener(callback?: (ret:JSON) => void):void

	/** 开始录音后开启录音计时器，使录音页面计时器开始计时。**本接口仅能在 recorderListener 监听 target 为 talkback/record，name 为 press/start 时的监听回调函数内调用***/ 
	startTimer():void

	/** 关闭聊天输入框*/ 
	close():void

	/** 显示聊天输入框*/ 
	show():void

	/** 隐藏聊天输入框*/ 
	hide():void

	/** 弹出键盘*/ 
	popupKeyboard():void

	/** 收起键盘*/ 
	closeKeyboard():void

	/**
	 * `弹出表情、附加功能面板`
	 * ========params==========
	 *
	 * `target` :string : 操作的面板类型，取值范围如下：
	 */
	popupBoard(params:UIChatTools_popupBoard_Params):void

	/** 收起表情、附加功能面板*/ 
	closeBoard():void

	/**
	 * `获取或设置聊天输入框的内容`
	 * ========params==========
	 *
	 * `msg` :string : （可选项）聊天输入框的内容，若不传则返回输入框的值
	 */
	value(params:UIChatTools_value_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向聊天输入框的指定位置插入内容`
	 * ========params==========
	 *
	 * `index` :number : （可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。**
	 *
	 * `msg` :string : （可选项）要插入的内容
	 */
	insertValue(params:UIChatTools_insertValue_Params):void

	/**
	 * `添加输入框相关事件的监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件类型
	 */
	chatBoxListener(params:UIChatTools_chatBoxListener_Params, callback?: (ret:JSON) => void):void

	/** 清空输入框文本*/ 
	clearText():void

	/** 取消录音*/ 
	cancelRecord():void

}
interface UIChatTools_setAppendButton_Params {
	/**（可选项）附加功能面板按钮样式配置*/ 
	styles?:JSON,

	/**附加功能面板按钮信息集合，可分页显示*/ 
	buttons:Array,

}

interface UIChatTools_faceListener_Params {
	/**事件的目标对象*/ 
	name:string,

}

interface UIChatTools_addFace_Params {
	/**表情包文件夹路径，表情包格式规范要求同 open 内附加表情包格式规范一致*/ 
	path:string,

}

interface UIChatTools_popupBoard_Params {
	/**操作的面板类型，取值范围如下：*/ 
	target:string,

}

interface UIChatTools_value_Params {
	/**（可选项）聊天输入框的内容，若不传则返回输入框的值*/ 
	msg?:string,

}

interface UIChatTools_insertValue_Params {
	/**（可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。***/ 
	index?:number,

	/**（可选项）要插入的内容*/ 
	msg?:string,

}

interface UIChatTools_chatBoxListener_Params {
	/**监听的事件类型*/ 
	name:string,

}

interface xinyanIDVerification {
}
interface citySelector {
	/**
	 * `打开城市选择器`
	 * ========params==========
	 *
	 * `y` :number : （可选项）选择器视图上边缘距离所依附窗口顶部的距离
	 *
	 * `height` :number : （可选项）选择器的高度，小于244无效
	 *
	 * `titleHeight` :number : （可选项）标题栏高度
	 *
	 * `cancelImg` :string : （可选项）取消按钮的背景图片的路径，要求本地路径（fs、widget）
	 *
	 * `enterImg` :string : （可选项）确定按钮的背景图片的路径（本地），要求本地路径（fs、widget）
	 *
	 * `titleImg` :string : （可选项）选择器顶端导航条背景图片的路径（本地），要求本地路径（fs、widget）
	 *
	 * `bgImg` :string : （可选项）选择器背景图片的路径（本地），要求本地路径（fs、widget）
	 *
	 * `fontColor` :string : （可选项）选择器字体颜色
	 *
	 * `selectedColor` :string : （可选项）选中字体颜色
	 *
	 * `anim` :boolean : （可选项）是否添加弹出动画
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:citySelector_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `隐藏选择器`
	 * ========params==========
	 *
	 * `anim` :boolean : （可选项）是否添加动画
	 */
	hide(params:citySelector_hide_Params):void

	/** 显示选择器，从屏幕外移动到屏幕内*/ 
	show():void

	/** 关闭选择器，意味着从内存里清除*/ 
	close():void

}
interface citySelector_open_Params {
	/**（可选项）选择器视图上边缘距离所依附窗口顶部的距离*/ 
	y?:number,

	/**（可选项）选择器的高度，小于244无效*/ 
	height?:number,

	/**（可选项）标题栏高度*/ 
	titleHeight?:number,

	/**（可选项）取消按钮的背景图片的路径，要求本地路径（fs、widget）*/ 
	cancelImg?:string,

	/**（可选项）确定按钮的背景图片的路径（本地），要求本地路径（fs、widget）*/ 
	enterImg?:string,

	/**（可选项）选择器顶端导航条背景图片的路径（本地），要求本地路径（fs、widget）*/ 
	titleImg?:string,

	/**（可选项）选择器背景图片的路径（本地），要求本地路径（fs、widget）*/ 
	bgImg?:string,

	/**（可选项）选择器字体颜色*/ 
	fontColor?:string,

	/**（可选项）选中字体颜色*/ 
	selectedColor?:string,

	/**（可选项）是否添加弹出动画*/ 
	anim?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface citySelector_hide_Params {
	/**（可选项）是否添加动画*/ 
	anim?:boolean,

}

interface paymentDialog {
	/**
	 * `打开输入框`
	 * ========params==========
	 *
	 * `style` :null : null
	 */
	show(params:paymentDialog_show_Params, callback?: (ret:JSON) => void):void

}
interface paymentDialog_show_Params {
	/**null*/ 
	style:null,

}

interface UIListContacts {
	/**
	 * `打开列表`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `contacts` :Array : 列表数据源
	 *
	 * `headHidden` :boolean : （可选项）是否隐藏头像和名字后面的职务标签（position）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:UIListContacts_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭列表模块*/ 
	close():void

	/** 隐藏列表模块，并没有从内存里清除*/ 
	hide():void

	/** 显示已隐藏的列表模块*/ 
	show():void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `contacts` :JSON : 列表数据源
	 */
	reloadData(params:UIListContacts_reloadData_Params):void

}
interface UIListContacts_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表数据源*/ 
	contacts:Array,

	/**（可选项）是否隐藏头像和名字后面的职务标签（position）*/ 
	headHidden?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface UIListContacts_reloadData_Params {
	/**列表数据源*/ 
	contacts:JSON,

}

interface UILoading {
	/** 打开 flower 样式的加载提示框。此样式接口封装了一种常见的“旋转菊花”型加载提示框，开发者只需自定义此加载提示框的位置及尺寸即可。同一个页面可打开多个该样式加载提示框，用 id 区分。*/ 
	flower():void

	/** 打开关键帧样式的加载提示框。该样式的加载提示框以播放一组关键帧图片的形式来呈现加载过程，该图片数组可通过 content 参数配置。*/ 
	keyFrame():void

	/**
	 * `关闭打开的加载提示框`
	 * ========params==========
	 *
	 * `id` :number : 关闭 flower 接口打开的 id 号对应加载提示框
	 *
	 * `isGradual` :boolean : （可选项）是否渐变消失 ；（仅支持iOS）
	 */
	closeFlower(params:UILoading_closeFlower_Params):void

	/**
	 * `关闭打开的加载提示框`
	 * ========params==========
	 *
	 * `isGradual` :boolean : （可选项）是否渐变消失 ；（仅支持iOS）
	 */
	closeKeyFrame(params:UILoading_closeKeyFrame_Params):void

}
interface UILoading_closeFlower_Params {
	/**关闭 flower 接口打开的 id 号对应加载提示框*/ 
	id:number,

	/**（可选项）是否渐变消失 ；（仅支持iOS）*/ 
	isGradual?:boolean,

}

interface UILoading_closeKeyFrame_Params {
	/**（可选项）是否渐变消失 ；（仅支持iOS）*/ 
	isGradual?:boolean,

}

interface UIPopupsPicker {
	/**
	 * `打开选择器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸(底部滑杆)
	 *
	 * `resource` :string : 城市列表的数据源文件路径（支持widget、fs 路径协议），数据源文件必须为`.json`文件。城市的JSON数据会在callback时按原格式返回。若为 json 文件则必须是标准的 [json格式](http://www.bejson.com)，否则会报错。
	 */
	open(params:UIPopupsPicker_open_Params, callback?: (ret:JSON) => void):void

	/** 隐藏选择器*/ 
	hide():void

	/** 显示选择器*/ 
	show():void

	/** 关闭选择器*/ 
	close():void

}
interface UIPopupsPicker_open_Params {
	/**（可选项）模块的位置及尺寸(底部滑杆)*/ 
	rect?:JSON,

	/**城市列表的数据源文件路径（支持widget、fs 路径协议），数据源文件必须为`.json`文件。城市的JSON数据会在callback时按原格式返回。若为 json 文件则必须是标准的 [json格式](http://www.bejson.com)，否则会报错。*/ 
	resource:string,

}

interface multiSelector {
}
interface welcomePage {
	/**
	 * `打开welcomePage`
	 * ========params==========
	 *
	 * `isFullscreen` :boolean : （可选项）是否全屏(全屏不显示状态栏)
	 *
	 * `AnimationType` :string : （可选项）动画类型  'Default'  默认, 'DepthPage'  深入浅出, 'Cube'  立方体, 'Rotate'  旋转,'Accordion'  左右折叠, 'InRightUp'   右上角进入, 'InRightDown'  右下角进入, 'ZoomOutPage'  淡入淡出。
	 *
	 * `imgs` :Array : 导航图片（支持 widget:// fs://  不支持相对路径）。
	 *
	 * `setting` :JSON : （可选项）导航页相关设置。
	 */
	openWelcomePage(params:welcomePage_openWelcomePage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重新设置是否打开导航页`
	 * ========params==========
	 *
	 * `setWelcome` :boolean : （必选项）false 表示设置启动页为未打开状态  true 反之
	 */
	setWelcome(params:welcomePage_setWelcome_Params, callback?: (ret:JSON) => void):void

}
interface welcomePage_openWelcomePage_Params {
	/**（可选项）是否全屏(全屏不显示状态栏)*/ 
	isFullscreen?:boolean,

	/**（可选项）动画类型  'Default'  默认, 'DepthPage'  深入浅出, 'Cube'  立方体, 'Rotate'  旋转,'Accordion'  左右折叠, 'InRightUp'   右上角进入, 'InRightDown'  右下角进入, 'ZoomOutPage'  淡入淡出。*/ 
	AnimationType?:string,

	/**导航图片（支持 widget:// fs://  不支持相对路径）。*/ 
	imgs:Array,

	/**（可选项）导航页相关设置。*/ 
	setting?:JSON,

}

interface welcomePage_setWelcome_Params {
	/**（必选项）false 表示设置启动页为未打开状态  true 反之*/ 
	setWelcome:boolean,

}

interface UISlider {
}
interface swipeCaptcha {
	/**
	 * `打开模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : 模块样式设置
	 *
	 * `imgPath` :string : 背景图片（支持 widget:// & fs:// & https:// 协议路径）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	open(params:swipeCaptcha_open_Params, callback?: (ret:JSON) => void):void

	/** 重新验证*/ 
	reset():void

	/** 关闭模块*/ 
	close():void

	/** 显示*/ 
	show():void

	/** 隐藏*/ 
	hide():void

}
interface swipeCaptcha_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**模块样式设置*/ 
	styles:JSON,

	/**背景图片（支持 widget:// & fs:// & https:// 协议路径）*/ 
	imgPath:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

}

interface orderList {
}
interface dMultiScreen {
}
interface UILinkageSelector {
	/**
	 * `打开选择器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸)
	 *
	 * `resource` :string : 城市列表的数据源文件路径（支持widget、fs 路径协议），数据源文件必须为`.json`文件。城市的JSON数据会在callback时按原格式返回。若为 json 文件则必须是标准的 [json格式](http://www.bejson.com)，否则会报错。
	 */
	open(params:UILinkageSelector_open_Params):void

	/** 确定事件*/ 
	confirm():void

	/** 隐藏选择器*/ 
	hide():void

	/** 显示选择器*/ 
	show():void

	/** 关闭选择器*/ 
	close():void

}
interface UILinkageSelector_open_Params {
	/**（可选项）模块的位置及尺寸)*/ 
	rect?:JSON,

	/**城市列表的数据源文件路径（支持widget、fs 路径协议），数据源文件必须为`.json`文件。城市的JSON数据会在callback时按原格式返回。若为 json 文件则必须是标准的 [json格式](http://www.bejson.com)，否则会报错。*/ 
	resource:string,

}

interface UIListUpload {
	/**
	 * `打开 UIListUpLoad 模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用**
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数**
	 *
	 * `bounces` :boolean : （可选项）是否开启弹动，android 平台不支持本参数
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `showScrollBar` :boolean : （可选项）是否显示滚动条
	 */
	open(params:UIListUpload_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新header文本`
	 * ========params==========
	 *
	 * `text` :string : 需要更新的文本
	 */
	updateHeaderText(params:UIListUpload_updateHeaderText_Params):void

	/** 关闭数据列表模块*/ 
	close():void

	/** 显示 UIListView 模块*/ 
	show():void

	/** 隐藏 UIListView 模块*/ 
	hide():void

	/**
	 * `设置列表的纵坐标和高度`
	 * ========params==========
	 *
	 * `y` :number : （可选项）模块的纵坐标
	 *
	 * `h` :number : （可选项）模块的高度
	 */
	setAttr(params:UIListUpload_setAttr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据开发者自定义的唯一标识（open 接口的 data 参数中自定义的唯一标识）查找列表项对应的数据`
	 * ========params==========
	 *
	 * `key` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key
	 *
	 * `value` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value
	 */
	getIndex(params:UIListUpload_getIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据列表项的索引获取对应的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 */
	getDataByIndex(params:UIListUpload_getDataByIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置侧滑显示出来的按钮`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 *
	 * `btns` :Array : （可选项）列表项侧滑露出的按钮组
	 */
	setSwipeBtns(params:UIListUpload_setSwipeBtns_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `data` :Array : （可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件**
	 */
	reloadData(params:UIListUpload_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引删除某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 */
	deleteItem(params:UIListUpload_deleteItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引更新某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	updateItem(params:UIListUpload_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引向某一条列表插入数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	insertItem(params:UIListUpload_insertItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `data` :Array : 列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:UIListUpload_appendData_Params, callback?: (ret:JSON) => void):void

	/** 获取当前列表的总数据量*/ 
	getCount():void

	/**
	 * `设置下拉刷新，**通过 reloadData 收起下拉刷新组件**`
	 * ========params==========
	 *
	 * `style` :JSON : 下拉刷新的样式配置
	 */
	setRefreshHeader(params:UIListUpload_setRefreshHeader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置上拉加载，**通过 appendData 收起上拉加载组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）上拉加载区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textUp` :string : （可选项）上拉提示文字
	 *
	 * `textDown` :string : （可选项）松开提示文字
	 *
	 * `loadingText` :string : （可选项）提示文字
	 *
	 * `lastUpdateText` :string : （可选项）提示文字
	 *
	 * `showTime` :boolean : （可选项）是否显示刷新时间
	 */
	setRefreshFooter(params:UIListUpload_setRefreshFooter_Params, callback?: (ret:JSON) => void):void

	/** 停止刷新(仅Android有效)*/ 
	stopRefresh():void

}
interface UIListUpload_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用***/ 
	data:Array,

	/**（可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数***/ 
	rightBtns?:Array,

	/**（可选项）是否开启弹动，android 平台不支持本参数*/ 
	bounces?:boolean,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否显示滚动条*/ 
	showScrollBar?:boolean,

}

interface UIListUpload_updateHeaderText_Params {
	/**需要更新的文本*/ 
	text:string,

}

interface UIListUpload_setAttr_Params {
	/**（可选项）模块的纵坐标*/ 
	y?:number,

	/**（可选项）模块的高度*/ 
	h?:number,

}

interface UIListUpload_getIndex_Params {
	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key*/ 
	key:string,

	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value*/ 
	value:string,

}

interface UIListUpload_getDataByIndex_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

}

interface UIListUpload_setSwipeBtns_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

	/**（可选项）列表项侧滑露出的按钮组*/ 
	btns?:Array,

}

interface UIListUpload_reloadData_Params {
	/**（可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件***/ 
	data?:Array,

}

interface UIListUpload_deleteItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

}

interface UIListUpload_updateItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListUpload_insertItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListUpload_appendData_Params {
	/**列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	data:Array,

}

interface UIListUpload_setRefreshHeader_Params {
	/**下拉刷新的样式配置*/ 
	style:JSON,

}

interface UIListUpload_setRefreshFooter_Params {
	/**上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）上拉加载区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）上拉提示文字*/ 
	textUp?:string,

	/**（可选项）松开提示文字*/ 
	textDown?:string,

	/**（可选项）提示文字*/ 
	loadingText?:string,

	/**（可选项）提示文字*/ 
	lastUpdateText?:string,

	/**（可选项）是否显示刷新时间*/ 
	showTime?:boolean,

}

interface UIMediaControl {
	/**
	 * `打开媒体控制控件`
	 * ========params==========
	 *
	 * `rect` :JSON : 预览控件位置
	 *
	 * `bgClolor` :string : 视图的背景颜色 ；（仅支持iOS）
	 *
	 * `leftBtnRect` :JSON : 上一曲按钮的位置和大小 ；（仅支持iOS）
	 *
	 * `rightBtnRect` :JSON : 下一曲按钮的位置和大小 ；（仅支持iOS）
	 *
	 * `playBtnRect` :JSON : 播放按钮的位置和大小 ；（仅支持iOS）
	 *
	 * `playBtnStatus` :boolean : 播放按钮的状态播放还是暂停 ；（仅支持iOS）
	 *
	 * `closeBtnRect` :JSON : 关闭按钮的位置和大小 ；（仅支持iOS）
	 *
	 * `leftBtnImagePath` :string : 上一曲按钮的背景图片路径；支持widget://和fs:// ；（仅支持iOS）
	 *
	 * `rightBtnImagePath` :string : 下一曲按钮的背景图片路径；支持widget://和fs:// ；（仅支持iOS）
	 *
	 * `playBtnImagePath` :string : 播放按钮（播放状态）的背景图片路径；支持widget://和fs:// ；（仅支持iOS）
	 *
	 * `pauseBtnImagePath` :string : 播放按钮（暂停状态）的背景图片路径；支持widget://和fs:// ；（仅支持iOS）
	 *
	 * `closeBtnImagePath` :string : 关闭的背景图片路径；支持widget://和fs:// ；（仅支持iOS）
	 *
	 * `slider` :JSON : 滑块参数设置 ；（仅支持iOS）
	 *
	 * `leftTimeLab` :JSON : 左边时间  ；（仅支持iOS）
	 *
	 * `rightTimeLab` :JSON : 右边时间 ；（仅支持iOS）
	 *
	 * `currentProgress` :number : （可选项）当前进度（秒）
	 *
	 * `total` :number : 总时长（秒）
	 *
	 * `isDrag` :boolean : 是否可以拖拽 ；（仅支持iOS）
	 *
	 * `bubleSize` :number : （可选项）滑块大小（仅android支持）
	 */
	openView(params:UIMediaControl_openView_Params, callback?: (ret:JSON) => void):void

	/** 关闭媒体控制控件*/ 
	closeView(callback?: (ret:JSON) => void):void

	/**
	 * `更换播放状态`
	 * ========params==========
	 *
	 * `state` :string : 要切换为的状态
	 */
	changePlayState(params:UIMediaControl_changePlayState_Params):void

	/**
	 * `更换播放进度`
	 * ========params==========
	 *
	 * `currentProgress` :number : （可选项）当前进度（秒）
	 *
	 * `total` :number : （可选项）总时长（秒）
	 */
	updateProgress(params:UIMediaControl_updateProgress_Params):void

}
interface UIMediaControl_openView_Params {
	/**预览控件位置*/ 
	rect:JSON,

	/**视图的背景颜色 ；（仅支持iOS）*/ 
	bgClolor:string,

	/**上一曲按钮的位置和大小 ；（仅支持iOS）*/ 
	leftBtnRect:JSON,

	/**下一曲按钮的位置和大小 ；（仅支持iOS）*/ 
	rightBtnRect:JSON,

	/**播放按钮的位置和大小 ；（仅支持iOS）*/ 
	playBtnRect:JSON,

	/**播放按钮的状态播放还是暂停 ；（仅支持iOS）*/ 
	playBtnStatus:boolean,

	/**关闭按钮的位置和大小 ；（仅支持iOS）*/ 
	closeBtnRect:JSON,

	/**上一曲按钮的背景图片路径；支持widget://和fs:// ；（仅支持iOS）*/ 
	leftBtnImagePath:string,

	/**下一曲按钮的背景图片路径；支持widget://和fs:// ；（仅支持iOS）*/ 
	rightBtnImagePath:string,

	/**播放按钮（播放状态）的背景图片路径；支持widget://和fs:// ；（仅支持iOS）*/ 
	playBtnImagePath:string,

	/**播放按钮（暂停状态）的背景图片路径；支持widget://和fs:// ；（仅支持iOS）*/ 
	pauseBtnImagePath:string,

	/**关闭的背景图片路径；支持widget://和fs:// ；（仅支持iOS）*/ 
	closeBtnImagePath:string,

	/**滑块参数设置 ；（仅支持iOS）*/ 
	slider:JSON,

	/**左边时间  ；（仅支持iOS）*/ 
	leftTimeLab:JSON,

	/**右边时间 ；（仅支持iOS）*/ 
	rightTimeLab:JSON,

	/**（可选项）当前进度（秒）*/ 
	currentProgress?:number,

	/**总时长（秒）*/ 
	total:number,

	/**是否可以拖拽 ；（仅支持iOS）*/ 
	isDrag:boolean,

	/**（可选项）滑块大小（仅android支持）*/ 
	bubleSize?:number,

}

interface UIMediaControl_changePlayState_Params {
	/**要切换为的状态*/ 
	state:string,

}

interface UIMediaControl_updateProgress_Params {
	/**（可选项）当前进度（秒）*/ 
	currentProgress?:number,

	/**（可选项）总时长（秒）*/ 
	total?:number,

}

interface selectList {
}
interface applause {
	/**
	 * `显示鼓掌动画按钮`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）鼓掌按钮的位置及尺寸
	 *
	 * `placeholderImg` :string : （必填项）鼓掌按钮图片路径（支持 fs://、widget://）。
	 *
	 * `iamges` :Array : （必填项）鼓掌后飘动的图形图片路径（支持 fs://、widget://）。
	 *
	 * `isShowNum` :boolean : （可选项）是否显示鼓掌的数量。
	 *
	 * `applauseNum` :number : （可选项）鼓掌的起始数。
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	showAppLause(params:applause_showAppLause_Params, callback?: (ret:JSON) => void):void

	/** 点击鼓掌动画按钮*/ 
	clickAppLause(callback?: (ret:JSON) => void):void

}
interface applause_showAppLause_Params {
	/**（必填项）鼓掌按钮的位置及尺寸*/ 
	rect:JSON,

	/**（必填项）鼓掌按钮图片路径（支持 fs://、widget://）。*/ 
	placeholderImg:string,

	/**（必填项）鼓掌后飘动的图形图片路径（支持 fs://、widget://）。*/ 
	iamges:Array,

	/**（可选项）是否显示鼓掌的数量。*/ 
	isShowNum?:boolean,

	/**（可选项）鼓掌的起始数。*/ 
	applauseNum?:number,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface UIPullRefreshFlash {
	/** 配置下拉刷新样式*/ 
	setCustomRefreshHeaderInfo():void

	/** 手动开始下拉刷新的加载状态，**下拉刷新状态亦可通过用户下拉到阈值自动触发***/ 
	refreshHeaderLoading():void

	/** 手动停止下拉刷新的加载状态*/ 
	refreshHeaderLoadDone():void

}
interface UIListArrow {
	/**
	 * `打开 UIListArrow 模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用**
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数**
	 *
	 * `bounces` :boolean : （可选项）是否开启弹动，**android 平台暂不支持，且默认false**
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `showScrollBar` :boolean : （可选项）是否显示滚动条
	 */
	open(params:UIListArrow_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭数据列表模块*/ 
	close():void

	/** 显示 UIListBadge 模块*/ 
	show():void

	/** 隐藏 UIListBadge 模块*/ 
	hide():void

	/**
	 * `设置列表的纵坐标和高度`
	 * ========params==========
	 *
	 * `y` :number : （可选项）模块的纵坐标
	 *
	 * `h` :number : （可选项）模块的高度
	 */
	setAttr(params:UIListArrow_setAttr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据开发者自定义的唯一标识（open 接口的 data 参数中自定义的唯一标识）查找列表项对应的数据`
	 * ========params==========
	 *
	 * `key` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key
	 *
	 * `value` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value
	 */
	getIndex(params:UIListArrow_getIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据列表项的索引获取对应的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 */
	getDataByIndex(params:UIListArrow_getDataByIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置侧滑显示出来的按钮`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 *
	 * `btns` :Array : （可选项）列表项侧滑露出的按钮组
	 */
	setSwipeBtns(params:UIListArrow_setSwipeBtns_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `data` :Array : （可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件**
	 */
	reloadData(params:UIListArrow_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引删除某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 */
	deleteItem(params:UIListArrow_deleteItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引更新某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	updateItem(params:UIListArrow_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引向某一条列表插入数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	insertItem(params:UIListArrow_insertItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `data` :Array : 列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:UIListArrow_appendData_Params, callback?: (ret:JSON) => void):void

	/** 获取当前列表的总数据量*/ 
	getCount():void

	/**
	 * `设置下拉刷新，**通过 reloadData 收起下拉刷新组件**`
	 * ========params==========
	 *
	 * `style` :JSON : 下拉刷新的样式配置
	 */
	setRefreshHeader(params:UIListArrow_setRefreshHeader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置上拉加载，**通过 appendData 收起上拉加载组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）上拉加载区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textUp` :string : （可选项）上拉提示文字
	 *
	 * `textDown` :string : （可选项）松开提示文字
	 *
	 * `loadingText` :string : （可选项）提示文字
	 *
	 * `lastUpdateText` :string : （可选项）提示文字
	 *
	 * `showTime` :boolean : （可选项）是否显示刷新时间
	 */
	setRefreshFooter(params:UIListArrow_setRefreshFooter_Params, callback?: (ret:JSON) => void):void

}
interface UIListArrow_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用***/ 
	data:Array,

	/**（可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数***/ 
	rightBtns?:Array,

	/**（可选项）是否开启弹动，**android 平台暂不支持，且默认false***/ 
	bounces?:boolean,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否显示滚动条*/ 
	showScrollBar?:boolean,

}

interface UIListArrow_setAttr_Params {
	/**（可选项）模块的纵坐标*/ 
	y?:number,

	/**（可选项）模块的高度*/ 
	h?:number,

}

interface UIListArrow_getIndex_Params {
	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key*/ 
	key:string,

	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value*/ 
	value:string,

}

interface UIListArrow_getDataByIndex_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

}

interface UIListArrow_setSwipeBtns_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

	/**（可选项）列表项侧滑露出的按钮组*/ 
	btns?:Array,

}

interface UIListArrow_reloadData_Params {
	/**（可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件***/ 
	data?:Array,

}

interface UIListArrow_deleteItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

}

interface UIListArrow_updateItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListArrow_insertItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListArrow_appendData_Params {
	/**列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	data:Array,

}

interface UIListArrow_setRefreshHeader_Params {
	/**下拉刷新的样式配置*/ 
	style:JSON,

}

interface UIListArrow_setRefreshFooter_Params {
	/**上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）上拉加载区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）上拉提示文字*/ 
	textUp?:string,

	/**（可选项）松开提示文字*/ 
	textDown?:string,

	/**（可选项）提示文字*/ 
	loadingText?:string,

	/**（可选项）提示文字*/ 
	lastUpdateText?:string,

	/**（可选项）是否显示刷新时间*/ 
	showTime?:boolean,

}

interface waveProgress {
	/**
	 * `显示波纹进度UI`
	 * ========params==========
	 *
	 * `fixedOn` :string : 将视图添加到指定的frame上面,非必填
	 *
	 * `fixed` :string : 提供fixed参数，控制视图是否随着frame内容的移动而跟着移动,非必填
	 *
	 * `r` :number : 半径,非必填
	 *
	 * `centerX` :number : 圆心X轴坐标,非必填
	 *
	 * `centerY` :number : 圆心Y轴坐标,非必填
	 *
	 * `speed` :any : 波纹流动速度,浮点型，非必填
	 *
	 * `progress` :number : 波纹进度值，非必填
	 *
	 * `firstFillColor` :string : 前填充色
	 *
	 * `secondFillColor` :string : 海浪波纹填充色
	 */
	showWave(params:waveProgress_showWave_Params):void

	/** 关闭波型UI*/ 
	closeWave():void

	/** 显示已隐藏的波型UI*/ 
	show():void

	/** 隐藏波型UI*/ 
	hide():void

	/**
	 * `设置波型UI进度值`
	 * ========params==========
	 *
	 * `progress` :number : 波纹进度值，非必填
	 */
	setProgress(params:waveProgress_setProgress_Params):void

}
interface waveProgress_showWave_Params {
	/**将视图添加到指定的frame上面,非必填*/ 
	fixedOn:string,

	/**提供fixed参数，控制视图是否随着frame内容的移动而跟着移动,非必填*/ 
	fixed:string,

	/**半径,非必填*/ 
	r:number,

	/**圆心X轴坐标,非必填*/ 
	centerX:number,

	/**圆心Y轴坐标,非必填*/ 
	centerY:number,

	/**波纹流动速度,浮点型，非必填*/ 
	speed:any,

	/**波纹进度值，非必填*/ 
	progress:number,

	/**前填充色*/ 
	firstFillColor:string,

	/**海浪波纹填充色*/ 
	secondFillColor:string,

}

interface waveProgress_setProgress_Params {
	/**波纹进度值，非必填*/ 
	progress:number,

}

interface messageList {
}
interface UISearchBar {
	/**
	 * `打开搜索页面`
	 * ========params==========
	 *
	 * `placeholder` :string : （可选项）搜索框的占位提示文本
	 *
	 * `historyCount` :number : （可选项）历史记录条数
	 *
	 * `dataBase` :string : （可选项）历史记录存储库名，以区分同一个 app 多个不同页面的数据
	 *
	 * `showRecordBtn` :boolean : （可选项）是否显示录音按钮
	 *
	 * `texts` :JSON : （可选项）模块各部分的文本
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 */
	open(params:UISearchBar_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭搜索页面*/ 
	close():void

	/**
	 * `设置搜索框的文字`
	 * ========params==========
	 *
	 * `text` :string : （可选项）搜索框内的文字，若不传或传空则清空搜索框内容
	 */
	setText(params:UISearchBar_setText_Params):void

	/** 清空当前搜索历史记录*/ 
	clearHistory():void

}
interface UISearchBar_open_Params {
	/**（可选项）搜索框的占位提示文本*/ 
	placeholder?:string,

	/**（可选项）历史记录条数*/ 
	historyCount?:number,

	/**（可选项）历史记录存储库名，以区分同一个 app 多个不同页面的数据*/ 
	dataBase?:string,

	/**（可选项）是否显示录音按钮*/ 
	showRecordBtn?:boolean,

	/**（可选项）模块各部分的文本*/ 
	texts?:JSON,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

}

interface UISearchBar_setText_Params {
	/**（可选项）搜索框内的文字，若不传或传空则清空搜索框内容*/ 
	text?:string,

}

interface overviewList {
}
interface sliderButton {
	/** 监听滑动到右边的事件*/ 
	addEventListener():void

	/**
	 * `打开滑动按钮`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `labelText` :string : （可选项）滑块上的文字。
	 *
	 * `labelFontSize` :number : （可选项）滑块上的文字字体大小。
	 *
	 * `labelTextColor` :string : （可选项）滑块上的文字颜色。
	 *
	 * `borderColor` :string : （可选项）滑块边框颜色。
	 *
	 * `dotColor` :string : （可选项）滑块上面的圆形按钮颜色。
	 *
	 * `skateColor` :string : （可选项）滑块按钮背景色。
	 */
	openSlideBtn(params:sliderButton_openSlideBtn_Params, callback?: (ret:JSON) => void):void

	/** 隐藏滑动按钮*/ 
	hideSlideBtn(callback?: (ret:JSON) => void):void

	/** 显示滑块按钮*/ 
	showSlideBtn(callback?: (ret:JSON) => void):void

	/** 关闭滑块按钮*/ 
	closeSlideBtn(callback?: (ret:JSON) => void):void

}
interface sliderButton_openSlideBtn_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）滑块上的文字。*/ 
	labelText?:string,

	/**（可选项）滑块上的文字字体大小。*/ 
	labelFontSize?:number,

	/**（可选项）滑块上的文字颜色。*/ 
	labelTextColor?:string,

	/**（可选项）滑块边框颜色。*/ 
	borderColor?:string,

	/**（可选项）滑块上面的圆形按钮颜色。*/ 
	dotColor?:string,

	/**（可选项）滑块按钮背景色。*/ 
	skateColor?:string,

}

interface floatButton {
	/** 悬浮按钮点击事件监听*/ 
	setOnClickListener():void

	/**
	 * `打开悬浮按钮`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `lineColor` :string : 悬浮按钮边框颜色(如：#ff00ff)
	 *
	 * `btnPic` :string : （可选项）悬浮按钮图标。支持fs:// widget://(支持png,jpg,gif,[备注：安卓设置gif动图时lineColor会失效])
	 */
	openButton(params:floatButton_openButton_Params, callback?: (ret:JSON) => void):void

	/** 隐藏悬浮按钮*/ 
	hidenButton():void

	/** 显示悬浮按钮*/ 
	showButton():void

	/** 关闭悬浮按钮*/ 
	closeButton():void

	/**
	 * `修改悬浮按钮图片`
	 * ========params==========
	 *
	 * `btnPic` :string : （可选项）悬浮按钮图标。支持fs:// widget://(支持png,jpg,gif,[备注：安卓设置gif动图时lineColor会失效])
	 */
	updateButtonPic(params:floatButton_updateButtonPic_Params, callback?: (ret:JSON) => void):void

	/** 开启旋转动画*/ 
	startAnimation():void

	/** 停止旋转动画*/ 
	stopAnimation():void

	/** 开启移动*/ 
	startMove():void

	/** 停止移动*/ 
	stopMove():void

	/** 停止移动*/ 
	stopMove():void

}
interface floatButton_openButton_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**悬浮按钮边框颜色(如：#ff00ff)*/ 
	lineColor:string,

	/**（可选项）悬浮按钮图标。支持fs:// widget://(支持png,jpg,gif,[备注：安卓设置gif动图时lineColor会失效])*/ 
	btnPic?:string,

}

interface floatButton_updateButtonPic_Params {
	/**（可选项）悬浮按钮图标。支持fs:// widget://(支持png,jpg,gif,[备注：安卓设置gif动图时lineColor会失效])*/ 
	btnPic?:string,

}

interface arcProgress {
}
interface lineChart {
}
interface sunmiT2Screen {
	/** 初始化副屏*/ 
	screenInit(callback?: (ret:JSON) => void):void

	/** 显示欢迎*/ 
	showWelcome(callback?: (ret:JSON) => void):void

	/**
	 * `显示文本`
	 * ========params==========
	 *
	 * `title` :null : null
	 *
	 * `content` :string : （必填项）显示数据
	 */
	showText(params:sunmiT2Screen_showText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示清单`
	 * ========params==========
	 *
	 * `json` :JSON : （必填项）显示数据
	 */
	showMenu(params:sunmiT2Screen_showMenu_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示图片`
	 * ========params==========
	 *
	 * `img` :string : （必填项）显示数据
	 */
	showImg(params:sunmiT2Screen_showImg_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示轮播图片`
	 * ========params==========
	 *
	 * `imgs` :Array : （必填项）显示数据
	 */
	showImgs(params:sunmiT2Screen_showImgs_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示单个视频`
	 * ========params==========
	 *
	 * `PathVideo` :string : （必填项）显示数据
	 */
	showVideo(params:sunmiT2Screen_showVideo_Params, callback?: (ret:JSON) => void):void

	/** 显示轮播视频*/ 
	showVideos(callback?: (ret:JSON) => void):void

	/**
	 * `显示单个图片清单`
	 * ========params==========
	 *
	 * `json` :null : null
	 *
	 * `img` :string : （必填项）显示数据
	 */
	imageLists(params:sunmiT2Screen_imageLists_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示单个视频清单`
	 * ========params==========
	 *
	 * `json` :null : null
	 *
	 * `video` :string : （必填项）显示数据
	 */
	videoLists(params:sunmiT2Screen_videoLists_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示轮播图清单`
	 * ========params==========
	 *
	 * `json` :null : null
	 *
	 * `imgs` :Array : （必填项）显示数据
	 */
	imagesLists(params:sunmiT2Screen_imagesLists_Params, callback?: (ret:JSON) => void):void

	/** 显示轮播视频清单*/ 
	videosLists(callback?: (ret:JSON) => void):void

	/** 退出副屏*/ 
	exitScreen(callback?: (ret:JSON) => void):void

	/** 清除缓存*/ 
	cachefile(callback?: (ret:JSON) => void):void

}
interface sunmiT2Screen_showText_Params {
	/**null*/ 
	title:null,

	/**（必填项）显示数据*/ 
	content:string,

}

interface sunmiT2Screen_showMenu_Params {
	/**（必填项）显示数据*/ 
	json:JSON,

}

interface sunmiT2Screen_showImg_Params {
	/**（必填项）显示数据*/ 
	img:string,

}

interface sunmiT2Screen_showImgs_Params {
	/**（必填项）显示数据*/ 
	imgs:Array,

}

interface sunmiT2Screen_showVideo_Params {
	/**（必填项）显示数据*/ 
	PathVideo:string,

}

interface sunmiT2Screen_imageLists_Params {
	/**null*/ 
	json:null,

	/**（必填项）显示数据*/ 
	img:string,

}

interface sunmiT2Screen_videoLists_Params {
	/**null*/ 
	json:null,

	/**（必填项）显示数据*/ 
	video:string,

}

interface sunmiT2Screen_imagesLists_Params {
	/**null*/ 
	json:null,

	/**（必填项）显示数据*/ 
	imgs:Array,

}

interface goodsList {
}
interface licencePlatekeyboard {
	/** 打开*/ 
	open():void

	/** 关闭*/ 
	close():void

	/** 显示*/ 
	show():void

	/** 隐藏*/ 
	hide():void

	/** 更换键盘类型*/ 
	changeType():void

}
interface listView {
}
interface fluttering {
	/**
	 * `配置飘动动画`
	 * ========params==========
	 *
	 * `original` :JSON : 图标飘动动画的起点位置坐标
	 *
	 * `terminal` :JSON : 图标飘动动画的终点位置坐标
	 *
	 * `duration` :number : （可选项）飘屏动画的持续时间，单位：秒（s）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	config(params:fluttering_config_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始飘动（飘动的动画路径随机产生）`
	 * ========params==========
	 *
	 * `size` :number : （可选项）本次飘动的图标的大小
	 *
	 * `path` :string : （可选项）本次飘动图片的路径，支持本地路径（fs://、widget://）
	 */
	flutter(params:fluttering_flutter_Params):void

}
interface fluttering_config_Params {
	/**图标飘动动画的起点位置坐标*/ 
	original:JSON,

	/**图标飘动动画的终点位置坐标*/ 
	terminal:JSON,

	/**（可选项）飘屏动画的持续时间，单位：秒（s）*/ 
	duration?:number,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface fluttering_flutter_Params {
	/**（可选项）本次飘动的图标的大小*/ 
	size?:number,

	/**（可选项）本次飘动图片的路径，支持本地路径（fs://、widget://）*/ 
	path?:string,

}

interface fillInput {
	/**
	 * `打开输入框，**注意：调用 open 接口的元素，不能加 tapmode 属性**`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `passwordOrCode` :any : （可选项）自动填充密码或者验证码
	 *
	 * `maxRows` :number : （可选项）支持显示最大行数，文本内容超过此行数时，上下滚动显示。是否支持换行，传大于1的数时表示支持，**注意：取值大于1（多行显示时），不触发 search 事件回调**
	 *
	 * `maxStringLength` :number : （可选项）输入框允许输入的最大字符串长度
	 *
	 * `autoFocus` :boolean : （可选项）打开时是否弹出键盘
	 *
	 * `placeholder` :string : （可选项）输入框的占位提示文本
	 *
	 * `keyboardType` :string : （可选项）输入框获取焦点时，弹出的键盘类型；
	 *
	 * `alignment` :string : （可选项）文本对齐方式
	 *
	 * `isCenterVertical` :boolean : 输入文本是否上下居中
	 *
	 * `inputType` :string : (可选项) 判断输入框输入的是密码还是文字
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:fillInput_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重设输入框的位置`
	 * ========params==========
	 *
	 * `id` :number : 需要设置的输入框id
	 *
	 * `position` :JSON : （可选项）模块的位置
	 */
	resetPosition(params:fillInput_resetPosition_Params):void

	/** 关闭输入框*/ 
	close():void

	/** 显示输入框*/ 
	show():void

	/** 隐藏输入框*/ 
	hide():void

	/**
	 * `获取或设置输入框的内容`
	 * ========params==========
	 *
	 * `id` :number : 输入框id
	 *
	 * `msg` :string : （可选项）输入框的内容，若不传则返回输入框的值
	 */
	value(params:fillInput_value_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向输入框的指定位置插入内容`
	 * ========params==========
	 *
	 * `id` :number : 输入框id
	 *
	 * `index` :number : （可选项）插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。**
	 *
	 * `msg` :string : （可选项）要插入的内容
	 */
	insertValue(params:fillInput_insertValue_Params):void

	/** 弹出键盘*/ 
	popupKeyboard():void

	/** 收起键盘*/ 
	closeKeyboard():void

	/**
	 * `事件监听`
	 * ========params==========
	 *
	 * `id` :number : 输入框id
	 *
	 * `name` :string : 监听的事件类型
	 */
	addEventListener(params:fillInput_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取当前光标所在位置`
	 * ========params==========
	 *
	 * `id` :number : 输入框id
	 */
	getSelectedRange(params:fillInput_getSelectedRange_Params, callback?: (ret:JSON) => void):void

}
interface fillInput_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）自动填充密码或者验证码*/ 
	passwordOrCode?:any,

	/**（可选项）支持显示最大行数，文本内容超过此行数时，上下滚动显示。是否支持换行，传大于1的数时表示支持，**注意：取值大于1（多行显示时），不触发 search 事件回调***/ 
	maxRows?:number,

	/**（可选项）输入框允许输入的最大字符串长度*/ 
	maxStringLength?:number,

	/**（可选项）打开时是否弹出键盘*/ 
	autoFocus?:boolean,

	/**（可选项）输入框的占位提示文本*/ 
	placeholder?:string,

	/**（可选项）输入框获取焦点时，弹出的键盘类型；*/ 
	keyboardType?:string,

	/**（可选项）文本对齐方式*/ 
	alignment?:string,

	/**输入文本是否上下居中*/ 
	isCenterVertical:boolean,

	/**(可选项) 判断输入框输入的是密码还是文字*/ 
	inputType?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface fillInput_resetPosition_Params {
	/**需要设置的输入框id*/ 
	id:number,

	/**（可选项）模块的位置*/ 
	position?:JSON,

}

interface fillInput_value_Params {
	/**输入框id*/ 
	id:number,

	/**（可选项）输入框的内容，若不传则返回输入框的值*/ 
	msg?:string,

}

interface fillInput_insertValue_Params {
	/**输入框id*/ 
	id:number,

	/**（可选项）插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。***/ 
	index?:number,

	/**（可选项）要插入的内容*/ 
	msg?:string,

}

interface fillInput_addEventListener_Params {
	/**输入框id*/ 
	id:number,

	/**监听的事件类型*/ 
	name:string,

}

interface fillInput_getSelectedRange_Params {
	/**输入框id*/ 
	id:number,

}

interface UIListBadge {
	/**
	 * `打开 UIListBadge 模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用**
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数**
	 *
	 * `bounces` :boolean : （可选项）是否开启弹动，**android 平台暂不支持，且默认false**
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `showScrollBar` :boolean : （可选项）是否显示滚动条
	 */
	open(params:UIListBadge_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭数据列表模块*/ 
	close():void

	/** 显示 UIListBadge 模块*/ 
	show():void

	/** 隐藏 UIListBadge 模块*/ 
	hide():void

	/**
	 * `设置列表的纵坐标和高度`
	 * ========params==========
	 *
	 * `y` :number : （可选项）模块的纵坐标
	 *
	 * `h` :number : （可选项）模块的高度
	 */
	setAttr(params:UIListBadge_setAttr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据开发者自定义的唯一标识（open 接口的 data 参数中自定义的唯一标识）查找列表项对应的数据`
	 * ========params==========
	 *
	 * `key` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key
	 *
	 * `value` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value
	 */
	getIndex(params:UIListBadge_getIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据列表项的索引获取对应的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 */
	getDataByIndex(params:UIListBadge_getDataByIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置侧滑显示出来的按钮`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 *
	 * `btns` :Array : （可选项）列表项侧滑露出的按钮组
	 */
	setSwipeBtns(params:UIListBadge_setSwipeBtns_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `data` :Array : （可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件**
	 */
	reloadData(params:UIListBadge_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引删除某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 */
	deleteItem(params:UIListBadge_deleteItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引更新某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	updateItem(params:UIListBadge_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引向某一条列表插入数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	insertItem(params:UIListBadge_insertItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `data` :Array : 列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:UIListBadge_appendData_Params, callback?: (ret:JSON) => void):void

	/** 获取当前列表的总数据量*/ 
	getCount():void

	/**
	 * `设置下拉刷新，**通过 reloadData 收起下拉刷新组件**`
	 * ========params==========
	 *
	 * `style` :JSON : 下拉刷新的样式配置
	 */
	setRefreshHeader(params:UIListBadge_setRefreshHeader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置上拉加载，**通过 appendData 收起上拉加载组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）上拉加载区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textUp` :string : （可选项）上拉提示文字
	 *
	 * `textDown` :string : （可选项）松开提示文字
	 *
	 * `loadingText` :string : （可选项）提示文字
	 *
	 * `lastUpdateText` :string : （可选项）提示文字
	 *
	 * `showTime` :boolean : （可选项）是否显示刷新时间
	 */
	setRefreshFooter(params:UIListBadge_setRefreshFooter_Params, callback?: (ret:JSON) => void):void

}
interface UIListBadge_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用***/ 
	data:Array,

	/**（可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数***/ 
	rightBtns?:Array,

	/**（可选项）是否开启弹动，**android 平台暂不支持，且默认false***/ 
	bounces?:boolean,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否显示滚动条*/ 
	showScrollBar?:boolean,

}

interface UIListBadge_setAttr_Params {
	/**（可选项）模块的纵坐标*/ 
	y?:number,

	/**（可选项）模块的高度*/ 
	h?:number,

}

interface UIListBadge_getIndex_Params {
	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key*/ 
	key:string,

	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value*/ 
	value:string,

}

interface UIListBadge_getDataByIndex_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

}

interface UIListBadge_setSwipeBtns_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

	/**（可选项）列表项侧滑露出的按钮组*/ 
	btns?:Array,

}

interface UIListBadge_reloadData_Params {
	/**（可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件***/ 
	data?:Array,

}

interface UIListBadge_deleteItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

}

interface UIListBadge_updateItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListBadge_insertItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListBadge_appendData_Params {
	/**列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	data:Array,

}

interface UIListBadge_setRefreshHeader_Params {
	/**下拉刷新的样式配置*/ 
	style:JSON,

}

interface UIListBadge_setRefreshFooter_Params {
	/**上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）上拉加载区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）上拉提示文字*/ 
	textUp?:string,

	/**（可选项）松开提示文字*/ 
	textDown?:string,

	/**（可选项）提示文字*/ 
	loadingText?:string,

	/**（可选项）提示文字*/ 
	lastUpdateText?:string,

	/**（可选项）是否显示刷新时间*/ 
	showTime?:boolean,

}

interface UIBarChart {
	/**
	 * `打开柱状图视图`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `yAxis` :JSON : 柱状图的y轴信息
	 *
	 * `data` :Array : 柱状图关键结点的数据
	 *
	 * `text` :JSON : （可选项）X、Y轴说明文字配置
	 *
	 * `styles` :any : （可选项）模块视图内元素样式设置
	 *
	 * `showData` :boolean : （可选项）点击柱状图，是否显示该条目数据
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:UIBarChart_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重新加载数据`
	 * ========params==========
	 *
	 * `id` :number : 模块的 id，用于区分模块的多个实例
	 *
	 * `type` :string : 更新数据的方式
	 *
	 * `data` :Array : 要更新的数据
	 */
	reloadData(params:UIBarChart_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭柱状图`
	 * ========params==========
	 *
	 * `id` :number : 模块的 id，用于区分模块的多个实例
	 */
	close(params:UIBarChart_close_Params):void

	/**
	 * `隐藏柱状图视图`
	 * ========params==========
	 *
	 * `id` :number : 模块的 id，用于区分模块的多个实例
	 */
	hide(params:UIBarChart_hide_Params):void

	/**
	 * `显示已隐藏的柱状图视图`
	 * ========params==========
	 *
	 * `id` :number : 模块的 id，用于区分模块的多个实例
	 */
	show(params:UIBarChart_show_Params):void

	/**
	 * `滚动到指定索引的条目，`
	 * ========params==========
	 *
	 * `id` :number : 模块的 id，用于区分模块的多个实例
	 *
	 * `index` :number : （可选项）指定的条目的索引，不可大于总条目数减去每屏显示个数，从0开始
	 *
	 * `animation` :boolean : （可选项）滚动时是否带有动画效果
	 */
	scrollTo(params:UIBarChart_scrollTo_Params):void

}
interface UIBarChart_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**柱状图的y轴信息*/ 
	yAxis:JSON,

	/**柱状图关键结点的数据*/ 
	data:Array,

	/**（可选项）X、Y轴说明文字配置*/ 
	text?:JSON,

	/**（可选项）模块视图内元素样式设置*/ 
	styles?:any,

	/**（可选项）点击柱状图，是否显示该条目数据*/ 
	showData?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIBarChart_reloadData_Params {
	/**模块的 id，用于区分模块的多个实例*/ 
	id:number,

	/**更新数据的方式*/ 
	type:string,

	/**要更新的数据*/ 
	data:Array,

}

interface UIBarChart_close_Params {
	/**模块的 id，用于区分模块的多个实例*/ 
	id:number,

}

interface UIBarChart_hide_Params {
	/**模块的 id，用于区分模块的多个实例*/ 
	id:number,

}

interface UIBarChart_show_Params {
	/**模块的 id，用于区分模块的多个实例*/ 
	id:number,

}

interface UIBarChart_scrollTo_Params {
	/**模块的 id，用于区分模块的多个实例*/ 
	id:number,

	/**（可选项）指定的条目的索引，不可大于总条目数减去每屏显示个数，从0开始*/ 
	index?:number,

	/**（可选项）滚动时是否带有动画效果*/ 
	animation?:boolean,

}

interface imageDragSort {
	/**
	 * `打开`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `imgArray` :Array : 所有图片路径组成的数组,图片路径是本地路径,支持fs://、widget://
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	open(params:imageDragSort_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `再次添加图片`
	 * ========params==========
	 *
	 * `imgArray` :Array : 所有图片路径组成的数组,图片路径是本地路径,支持fs://、widget://(所有图片的数量不要超过30张)
	 */
	addImage(params:imageDragSort_addImage_Params, callback?: (ret:JSON) => void):void

	/** 开始编辑*/ 
	startEdit():void

	/** 关闭*/ 
	close():void

	/** 显示*/ 
	show():void

	/** 隐藏*/ 
	hide():void

	/** 取消编辑状态*/ 
	cancleEditState(callback?: (ret:JSON) => void):void

}
interface imageDragSort_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**所有图片路径组成的数组,图片路径是本地路径,支持fs://、widget://*/ 
	imgArray:Array,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

}

interface imageDragSort_addImage_Params {
	/**所有图片路径组成的数组,图片路径是本地路径,支持fs://、widget://(所有图片的数量不要超过30张)*/ 
	imgArray:Array,

}

interface hikvision {
	/** 打开实时监控*/ 
	open():void

	/** 二维码扫描*/ 
	qrCode():void

	/** 开始播放实时监控画面*/ 
	start():void

	/** 暂停播放实时监控画面*/ 
	pause():void

	/** 关闭实时监控*/ 
	close():void

	/** 显示实时监控界面*/ 
	show():void

	/** 隐藏实时监控界面*/ 
	hide():void

	/** 停止播放实时监控画面*/ 
	stop():void

}
interface UILinkedPicker {
}
interface chatBox {
}
interface UIListContactsCheck {
	/**
	 * `打开列表`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `contacts` :Array : 列表数据源
	 *
	 * `styles` :JSON : （可选项）模块头部的样式
	 *
	 * `backgroundColor` :string : （可选项）模块背景色
	 *
	 * `bounces` :boolean : （可选项）是否弹动
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:UIListContactsCheck_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭列表模块*/ 
	close():void

	/** 隐藏列表模块，并没有从内存里清除*/ 
	hide():void

	/** 显示已隐藏的列表模块*/ 
	show():void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `contacts` :JSON : 列表数据源
	 */
	reloadData(params:UIListContactsCheck_reloadData_Params):void

}
interface UIListContactsCheck_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表数据源*/ 
	contacts:Array,

	/**（可选项）模块头部的样式*/ 
	styles?:JSON,

	/**（可选项）模块背景色*/ 
	backgroundColor?:string,

	/**（可选项）是否弹动*/ 
	bounces?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface UIListContactsCheck_reloadData_Params {
	/**列表数据源*/ 
	contacts:JSON,

}

interface UIActionProgress {
	/**
	 * `弹出进度条展示区域`
	 * ========params==========
	 *
	 * `maskBg` :string : （可选项）遮罩层配置，若不传则无遮罩层；支持rgb、rgba、#，如rgba(0,0,0,0.4)
	 *
	 * `styles` :JSON : （可选项）弹出进度条样式配置
	 *
	 * `data` :JSON : 进度条区域的数据配置
	 */
	open(params:UIActionProgress_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置数据`
	 * ========params==========
	 *
	 * `data` :JSON : 进度条区域的数据配置
	 */
	setData(params:UIActionProgress_setData_Params):void

	/** 关闭模块*/ 
	close():void

	/** 隐藏模块，并没有从内存里清除*/ 
	hide():void

	/** 显示已隐藏的模块*/ 
	show():void

	/** 获取当前进度条的值*/ 
	getValue():void

}
interface UIActionProgress_open_Params {
	/**（可选项）遮罩层配置，若不传则无遮罩层；支持rgb、rgba、#，如rgba(0,0,0,0.4)*/ 
	maskBg?:string,

	/**（可选项）弹出进度条样式配置*/ 
	styles?:JSON,

	/**进度条区域的数据配置*/ 
	data:JSON,

}

interface UIActionProgress_setData_Params {
	/**进度条区域的数据配置*/ 
	data:JSON,

}

interface gridSlide {
	/**
	 * `打开九宫格菜单`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `background` :string : 页面背景色(如：#ff00ff)
	 *
	 * `rows` :number : （可选项）九宫格需要展示的行数。
	 *
	 * `cols` :number : （可选项）九宫格需要展示的列数。
	 *
	 * `isShowDot` :boolean : （可选项）是否显示底部dot圆点按钮
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `data` :Array : （必填项）模块九宫格按钮图标和名称
	 *
	 * `defaultIcon` :string : （可选项）设置icon图标不存在是的默认图片(支持fs:// widget://)。
	 */
	openMenu(params:gridSlide_openMenu_Params, callback?: (ret:JSON) => void):void

	/** 隐藏菜单*/ 
	hideMenu(callback?: (ret:JSON) => void):void

	/** 显示菜单*/ 
	showMenu():void

	/** 关闭菜单*/ 
	closeMenu(callback?: (ret:JSON) => void):void

}
interface gridSlide_openMenu_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**页面背景色(如：#ff00ff)*/ 
	background:string,

	/**（可选项）九宫格需要展示的行数。*/ 
	rows?:number,

	/**（可选项）九宫格需要展示的列数。*/ 
	cols?:number,

	/**（可选项）是否显示底部dot圆点按钮*/ 
	isShowDot?:boolean,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）模块九宫格按钮图标和名称*/ 
	data:Array,

	/**（可选项）设置icon图标不存在是的默认图片(支持fs:// widget://)。*/ 
	defaultIcon?:string,

}

interface UIPickerView {
	/**
	 * `打开选择器模块`
	 * ========params==========
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式配置
	 *
	 * `mask` :string : （可选项）上部遮罩层配置，支持rgb、rgba、#；（仅ios支持）
	 *
	 * `animation` :boolean : （可选项）打开/关闭（显示/隐藏）时是否带动画效果（300毫秒）
	 *
	 * `checked` :Array : 默认当前选中数据的 ID 组成的数组，如：['001','001','001',]
	 *
	 * `datas` :Array : 模块数据源，可以是 `json` 文件的路径，也可以把数据源直接传给模块
	 *
	 * `cyclic` :boolean : （可选项）是否可循环滑动
	 */
	open(params:UIPickerView_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更改当前模块的数据源`
	 * ========params==========
	 *
	 * `datas` :Array : 模块数据源，可以是 `json` 文件的路径，也可以把数据源直接传给模块
	 */
	changeData(params:UIPickerView_changeData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭模块（从内存里清除）`
	 * ========params==========
	 *
	 * `animation` :boolean : （可选项）是否带动画效果（300毫秒）
	 */
	close(params:UIPickerView_close_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示已隐藏的模块`
	 * ========params==========
	 *
	 * `animation` :boolean : （可选项）是否带动画效果（300毫秒）
	 */
	show(params:UIPickerView_show_Params, callback?: (ret:JSON) => void):void

	/**
	 * `隐藏模块`
	 * ========params==========
	 *
	 * `animation` :boolean : （可选项）是否带动画效果（300毫秒）
	 */
	hide(params:UIPickerView_hide_Params, callback?: (ret:JSON) => void):void

	/** 获取当前选中项的数据*/ 
	getChecked():void

	/**
	 * `设置选中项`
	 * ========params==========
	 *
	 * `checked` :Array : 设置选中项的 ID 组成的数组，如：['001','001','001']
	 */
	setChecked(params:UIPickerView_setChecked_Params, callback?: (ret:JSON) => void):void

}
interface UIPickerView_open_Params {
	/**（可选项）模块各部分的样式配置*/ 
	styles?:JSON,

	/**（可选项）上部遮罩层配置，支持rgb、rgba、#；（仅ios支持）*/ 
	mask?:string,

	/**（可选项）打开/关闭（显示/隐藏）时是否带动画效果（300毫秒）*/ 
	animation?:boolean,

	/**默认当前选中数据的 ID 组成的数组，如：['001','001','001',]*/ 
	checked:Array,

	/**模块数据源，可以是 `json` 文件的路径，也可以把数据源直接传给模块*/ 
	datas:Array,

	/**（可选项）是否可循环滑动*/ 
	cyclic?:boolean,

}

interface UIPickerView_changeData_Params {
	/**模块数据源，可以是 `json` 文件的路径，也可以把数据源直接传给模块*/ 
	datas:Array,

}

interface UIPickerView_close_Params {
	/**（可选项）是否带动画效果（300毫秒）*/ 
	animation?:boolean,

}

interface UIPickerView_show_Params {
	/**（可选项）是否带动画效果（300毫秒）*/ 
	animation?:boolean,

}

interface UIPickerView_hide_Params {
	/**（可选项）是否带动画效果（300毫秒）*/ 
	animation?:boolean,

}

interface UIPickerView_setChecked_Params {
	/**设置选中项的 ID 组成的数组，如：['001','001','001']*/ 
	checked:Array,

}

interface guaidWindow {
}
interface UIActionDialog {
	/**
	 * `打开日期选择器`
	 * ========params==========
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式配置
	 *
	 * `mask` :string : （可选项）上部遮罩层配置，支持rgb、rgba、#；
	 *
	 * `selected` :string : 默认当前选中日期，如：2019-5-28
	 *
	 * `animation` :boolean : （可选项）打开/关闭（显示/隐藏）时是否带动画效果（300毫秒）
	 */
	datePicker(params:UIActionDialog_datePicker_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开支付选择器`
	 * ========params==========
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式配置
	 *
	 * `mask` :string : （可选项）上部遮罩层配置，支持rgb、rgba、#；
	 *
	 * `animation` :boolean : （可选项）打开/关闭（显示/隐藏）时是否带动画效果（300毫秒）
	 */
	goPay(params:UIActionDialog_goPay_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开支付选择器`
	 * ========params==========
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式配置
	 *
	 * `datas` :Array : 选择项数据源
	 *
	 * `mask` :string : （可选项）上部遮罩层配置，支持rgb、rgba、#；
	 *
	 * `selected` :string : 默认当前选中项的下标
	 *
	 * `animation` :boolean : （可选项）打开/关闭（显示/隐藏）时是否带动画效果（300毫秒）
	 */
	pay(params:UIActionDialog_pay_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开支付选择器`
	 * ========params==========
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式配置
	 *
	 * `datas` :Array : 选择项数据源
	 *
	 * `mask` :string : （可选项）上部遮罩层配置，支持rgb、rgba、#；
	 *
	 * `animation` :boolean : （可选项）打开/关闭（显示/隐藏）时是否带动画效果（300毫秒）
	 */
	payBy(params:UIActionDialog_payBy_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开支付选择器`
	 * ========params==========
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式配置
	 *
	 * `datas` :Array : 选择项数据源
	 *
	 * `mask` :string : （可选项）上部遮罩层配置，支持rgb、rgba、#；
	 *
	 * `index` :string : 默认当前选中项的下标
	 *
	 * `animation` :boolean : （可选项）打开/关闭（显示/隐藏）时是否带动画效果（300毫秒）
	 */
	payFor(params:UIActionDialog_payFor_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示已隐藏的模块 **仅支持ios**`
	 * ========params==========
	 *
	 * `animation` :boolean : （可选项）是否带动画效果（300毫秒）
	 */
	show(params:UIActionDialog_show_Params):void

	/**
	 * `隐藏对话框 **仅支持ios**`
	 * ========params==========
	 *
	 * `animation` :boolean : （可选项）是否带动画效果（300毫秒）
	 */
	hide(params:UIActionDialog_hide_Params):void

	/**
	 * `关闭模块（从内存里清除）`
	 * ========params==========
	 *
	 * `animation` :boolean : （可选项）是否带动画效果（300毫秒）
	 */
	close(params:UIActionDialog_close_Params):void

}
interface UIActionDialog_datePicker_Params {
	/**（可选项）模块各部分的样式配置*/ 
	styles?:JSON,

	/**（可选项）上部遮罩层配置，支持rgb、rgba、#；*/ 
	mask?:string,

	/**默认当前选中日期，如：2019-5-28*/ 
	selected:string,

	/**（可选项）打开/关闭（显示/隐藏）时是否带动画效果（300毫秒）*/ 
	animation?:boolean,

}

interface UIActionDialog_goPay_Params {
	/**（可选项）模块各部分的样式配置*/ 
	styles?:JSON,

	/**（可选项）上部遮罩层配置，支持rgb、rgba、#；*/ 
	mask?:string,

	/**（可选项）打开/关闭（显示/隐藏）时是否带动画效果（300毫秒）*/ 
	animation?:boolean,

}

interface UIActionDialog_pay_Params {
	/**（可选项）模块各部分的样式配置*/ 
	styles?:JSON,

	/**选择项数据源*/ 
	datas:Array,

	/**（可选项）上部遮罩层配置，支持rgb、rgba、#；*/ 
	mask?:string,

	/**默认当前选中项的下标*/ 
	selected:string,

	/**（可选项）打开/关闭（显示/隐藏）时是否带动画效果（300毫秒）*/ 
	animation?:boolean,

}

interface UIActionDialog_payBy_Params {
	/**（可选项）模块各部分的样式配置*/ 
	styles?:JSON,

	/**选择项数据源*/ 
	datas:Array,

	/**（可选项）上部遮罩层配置，支持rgb、rgba、#；*/ 
	mask?:string,

	/**（可选项）打开/关闭（显示/隐藏）时是否带动画效果（300毫秒）*/ 
	animation?:boolean,

}

interface UIActionDialog_payFor_Params {
	/**（可选项）模块各部分的样式配置*/ 
	styles?:JSON,

	/**选择项数据源*/ 
	datas:Array,

	/**（可选项）上部遮罩层配置，支持rgb、rgba、#；*/ 
	mask?:string,

	/**默认当前选中项的下标*/ 
	index:string,

	/**（可选项）打开/关闭（显示/隐藏）时是否带动画效果（300毫秒）*/ 
	animation?:boolean,

}

interface UIActionDialog_show_Params {
	/**（可选项）是否带动画效果（300毫秒）*/ 
	animation?:boolean,

}

interface UIActionDialog_hide_Params {
	/**（可选项）是否带动画效果（300毫秒）*/ 
	animation?:boolean,

}

interface UIActionDialog_close_Params {
	/**（可选项）是否带动画效果（300毫秒）*/ 
	animation?:boolean,

}

interface UIPersonalCenter {
	/**
	 * `打开个人中心`
	 * ========params==========
	 *
	 * `y ` :number : （可选项）个人中心视图上边距屏幕位置
	 *
	 * `h ` :number : （可选项）视图的高，不可小于230
	 *
	 * `data` :JSON : 模块数据配置
	 *
	 * `styles` :JSON : 模块样式配置
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:UIPersonalCenter_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新个人中心显示数据`
	 * ========params==========
	 *
	 * `data` :JSON : 模块数据配置
	 */
	updateValue(params:UIPersonalCenter_updateValue_Params):void

	/** 关闭个人中心*/ 
	close():void

	/** 获取选中按钮*/ 
	getSelect():void

	/**
	 * `设置选中按钮`
	 * ========params==========
	 *
	 * `index` :number : （可选项）底部菜单按钮选中项的索引
	 */
	setSelect(params:UIPersonalCenter_setSelect_Params):void

	/** 显示个人中心*/ 
	show():void

	/** 隐藏个人中心*/ 
	hide():void

}
interface UIPersonalCenter_open_Params {
	/**（可选项）个人中心视图上边距屏幕位置*/ 
	y ?:number,

	/**（可选项）视图的高，不可小于230*/ 
	h ?:number,

	/**模块数据配置*/ 
	data:JSON,

	/**模块样式配置*/ 
	styles:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIPersonalCenter_updateValue_Params {
	/**模块数据配置*/ 
	data:JSON,

}

interface UIPersonalCenter_setSelect_Params {
	/**（可选项）底部菜单按钮选中项的索引*/ 
	index?:number,

}

interface UIChatBox {
	/** 打开聊天输入框*/ 
	open(callback?: (ret:JSON) => void):void

	/** 关闭聊天输入框*/ 
	close():void

	/** 显示聊天输入框*/ 
	show():void

	/** 隐藏聊天输入框*/ 
	hide():void

	/**
	 * `弹出表情、附加功能面板`
	 * ========params==========
	 *
	 * `target` :string : 操作的面板类型，取值范围如下：
	 */
	popupBoard(params:UIChatBox_popupBoard_Params):void

	/** 收起表情、附加功能面板*/ 
	closeBoard():void

	/** 弹出键盘*/ 
	popupKeyboard():void

	/** 收起键盘*/ 
	closeKeyboard():void

	/**
	 * `获取或设置聊天输入框的内容`
	 * ========params==========
	 *
	 * `msg` :string : （可选项）聊天输入框的内容，若不传则返回输入框的值
	 */
	value(params:UIChatBox_value_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向聊天输入框的指定位置插入内容`
	 * ========params==========
	 *
	 * `index` :number : （可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。**
	 *
	 * `msg` :string : （可选项）要插入的内容
	 */
	insertValue(params:UIChatBox_insertValue_Params):void

	/**
	 * `事件监听`
	 * ========params==========
	 *
	 * `target` :string : 事件的目标对象
	 *
	 * `name` :string : 监听的事件类型
	 */
	addEventListener(params:UIChatBox_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重设聊天输入框的占位提示文本`
	 * ========params==========
	 *
	 * `placeholder` :string : （可选项）占位提示文本，若不传或传空则表示清空占位提示内容
	 */
	setPlaceholder(params:UIChatBox_setPlaceholder_Params):void

	/**
	 * `重新加载（刷新）附加功能面板，**open时必须添加附加功能按钮及其面板参数**`
	 * ========params==========
	 *
	 * `extras` :JSON : （可选项）点击附加功能按钮，打开的附加功能面板的按钮样式，配合 extrasBtn 一起使用，若 extrasBtn 参数内 normalImg 属性不传则此参数可不传
	 */
	reloadExtraBoard(params:UIChatBox_reloadExtraBoard_Params):void

	/** 取消录音*/ 
	cancelRecord():void

	/**
	 * `这只面板的背景颜色`
	 * ========params==========
	 *
	 * `color` :string : 面板背景色
	 */
	setInputBarBgColor(params:UIChatBox_setInputBarBgColor_Params):void

}
interface UIChatBox_popupBoard_Params {
	/**操作的面板类型，取值范围如下：*/ 
	target:string,

}

interface UIChatBox_value_Params {
	/**（可选项）聊天输入框的内容，若不传则返回输入框的值*/ 
	msg?:string,

}

interface UIChatBox_insertValue_Params {
	/**（可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。***/ 
	index?:number,

	/**（可选项）要插入的内容*/ 
	msg?:string,

}

interface UIChatBox_addEventListener_Params {
	/**事件的目标对象*/ 
	target:string,

	/**监听的事件类型*/ 
	name:string,

}

interface UIChatBox_setPlaceholder_Params {
	/**（可选项）占位提示文本，若不传或传空则表示清空占位提示内容*/ 
	placeholder?:string,

}

interface UIChatBox_reloadExtraBoard_Params {
	/**（可选项）点击附加功能按钮，打开的附加功能面板的按钮样式，配合 extrasBtn 一起使用，若 extrasBtn 参数内 normalImg 属性不传则此参数可不传*/ 
	extras?:JSON,

}

interface UIChatBox_setInputBarBgColor_Params {
	/**面板背景色*/ 
	color:string,

}

interface UIAddressBook {
	/**
	 * `打开列表`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `bgColor` :JSON : 背景颜色
	 *
	 * `contacts` :Array : 列表数据源
	 *
	 * `checkBox` :boolean : （可选项）是否显示复选框
	 *
	 * `singleCheck` :boolean : （可选项）是否显示为单选
	 *
	 * `bounces` :boolean : （可选项）列表是否有弹动效果
	 *
	 * `coverInfo` :boolean : （可选项）是否遮盖部分信息，该状态时，遮盖姓，以及联系方式第三位以后，最多四位			字符
	 *
	 * `manage` :boolean : （可选项）是否为成员管理，当为成员管理状态时，群主标志位于姓名之后，userType参		数为1时，在更多按钮前显示未进群标志
	 *
	 * `moreIcon` :string : （可选项）更多按钮图标地址，仅支持本地路径（fs://和widget://）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 */
	open(params:UIAddressBook_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭列表模块*/ 
	close():void

	/** 隐藏列表模块，并没有从内存里清除*/ 
	hide():void

	/** 显示已隐藏的列表模块*/ 
	show():void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `contacts` :Array : 列表数据源
	 */
	reloadData(params:UIAddressBook_reloadData_Params):void

	/**
	 * `设置选中的联系人`
	 * ========params==========
	 *
	 * `selected` :boolean : （可选项）设置/取消选中状态
	 *
	 * `contacts` :Array : 要设置为选中状态的联系人id组成的数组
	 */
	setSelected(params:UIAddressBook_setSelected_Params):void

	/** 获取所有当前选中的联系人信息，**同步接口***/ 
	getSelectedSync():JSON;

	/**
	 * `设置列表尺寸`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `animation` :boolean : （可选项）改变 rect 时，是否带动画效果，暂仅支持 iOS 平台
	 */
	setRect(params:UIAddressBook_setRect_Params):void

}
interface UIAddressBook_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**背景颜色*/ 
	bgColor:JSON,

	/**列表数据源*/ 
	contacts:Array,

	/**（可选项）是否显示复选框*/ 
	checkBox?:boolean,

	/**（可选项）是否显示为单选*/ 
	singleCheck?:boolean,

	/**（可选项）列表是否有弹动效果*/ 
	bounces?:boolean,

	/**（可选项）是否遮盖部分信息，该状态时，遮盖姓，以及联系方式第三位以后，最多四位			字符*/ 
	coverInfo?:boolean,

	/**（可选项）是否为成员管理，当为成员管理状态时，群主标志位于姓名之后，userType参		数为1时，在更多按钮前显示未进群标志*/ 
	manage?:boolean,

	/**（可选项）更多按钮图标地址，仅支持本地路径（fs://和widget://）*/ 
	moreIcon?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

}

interface UIAddressBook_reloadData_Params {
	/**列表数据源*/ 
	contacts:Array,

}

interface UIAddressBook_setSelected_Params {
	/**（可选项）设置/取消选中状态*/ 
	selected?:boolean,

	/**要设置为选中状态的联系人id组成的数组*/ 
	contacts:Array,

}

interface UIAddressBook_setRect_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）改变 rect 时，是否带动画效果，暂仅支持 iOS 平台*/ 
	animation?:boolean,

}

interface sphereCloud {
	/**
	 * `打开标签控件`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : （可选项）样式配置
	 *
	 * `data` :Array<JSON> : 显示的数据元素及样式组成的数组
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:sphereCloud_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新整个数据源`
	 * ========params==========
	 *
	 * `id` :string : 控件 ID，open 接口成功打开后返回
	 *
	 * `data` :Array<JSON> : 显示的数据元素及样式组成的数组
	 */
	update(params:sphereCloud_update_Params):void

	/**
	 * `刷新指定item`
	 * ========params==========
	 *
	 * `id` :string : 控件 ID，open 接口成功打开后返回
	 *
	 * `item` :JSON : 显示的数据元素及样式组成的数组
	 */
	updateItem(params:sphereCloud_updateItem_Params):void

	/**
	 * `关闭模块`
	 * ========params==========
	 *
	 * `id` :string : 控件 ID，open 接口成功打开后返回
	 */
	close(params:sphereCloud_close_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听模块相关事件`
	 * ========params==========
	 *
	 * `id` :string : 控件 ID，open 接口成功打开后返回
	 *
	 * `target` :string : （可选项）监听的事件类型
	 */
	addEventListener(params:sphereCloud_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `隐藏模块视图`
	 * ========params==========
	 *
	 * `id` :string : 控件 ID，open 接口成功打开后返回
	 */
	hide(params:sphereCloud_hide_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示模块视图`
	 * ========params==========
	 *
	 * `id` :string : 控件 ID，open 接口成功打开后返回
	 */
	show(params:sphereCloud_show_Params, callback?: (ret:JSON) => void):void

}
interface sphereCloud_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）样式配置*/ 
	styles?:JSON,

	/**显示的数据元素及样式组成的数组*/ 
	data:Array<JSON>,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface sphereCloud_update_Params {
	/**控件 ID，open 接口成功打开后返回*/ 
	id:string,

	/**显示的数据元素及样式组成的数组*/ 
	data:Array<JSON>,

}

interface sphereCloud_updateItem_Params {
	/**控件 ID，open 接口成功打开后返回*/ 
	id:string,

	/**显示的数据元素及样式组成的数组*/ 
	item:JSON,

}

interface sphereCloud_close_Params {
	/**控件 ID，open 接口成功打开后返回*/ 
	id:string,

}

interface sphereCloud_addEventListener_Params {
	/**控件 ID，open 接口成功打开后返回*/ 
	id:string,

	/**（可选项）监听的事件类型*/ 
	target?:string,

}

interface sphereCloud_hide_Params {
	/**控件 ID，open 接口成功打开后返回*/ 
	id:string,

}

interface sphereCloud_show_Params {
	/**控件 ID，open 接口成功打开后返回*/ 
	id:string,

}

interface UICalendar {
	/**
	 * `打开日历`
	 * ========params==========
	 *
	 * `multipleSelect` :boolean : （可选项）是否可以多选日期
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `specialDate` :Array : （可选项）需要标记的特殊日期数组
	 *
	 * `switchMode` :string : （可选项）月份的切换方式
	 *
	 * `isBefore` :boolean : （可选项）今天以前的日期是否置灰不可选
	 *
	 * `isAfter` :boolean : （可选项）今天以后的日期是否置灰不可选
	 *
	 * `showTodayStyle` :boolean : （可选项）当天日期是否使用特殊格式显示（仅android有效）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:UICalendar_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置特殊日期`
	 * ========params==========
	 *
	 * `id` :number : 日历视图id
	 *
	 * `specialDates` :Array : 需要标记的特殊日期数组，格式为：yyyy-MM-dd
	 */
	setSpecialDates(params:UICalendar_setSpecialDates_Params):void

	/**
	 * `取消已设置的特殊日期状态`
	 * ========params==========
	 *
	 * `id` :number : 日历视图id
	 *
	 * `specialDates` :Array : 需要取消的特殊日期组成的数组，格式为：yyyy-MM-dd
	 */
	cancelSpecialDates(params:UICalendar_cancelSpecialDates_Params):void

	/**
	 * `关闭日历`
	 * ========params==========
	 *
	 * `id` :number : 日历视图id
	 */
	close(params:UICalendar_close_Params):void

	/**
	 * `显示日历`
	 * ========params==========
	 *
	 * `id` :number : 日历视图id
	 */
	show(params:UICalendar_show_Params):void

	/**
	 * `隐藏日历`
	 * ========params==========
	 *
	 * `id` :number : 日历视图id
	 */
	hide(params:UICalendar_hide_Params):void

	/**
	 * `显示下个月`
	 * ========params==========
	 *
	 * `id` :number : 日历视图id
	 */
	nextMonth(params:UICalendar_nextMonth_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示上个月`
	 * ========params==========
	 *
	 * `id` :number : 日历视图id
	 */
	prevMonth(params:UICalendar_prevMonth_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示下一年`
	 * ========params==========
	 *
	 * `id` :number : 日历视图id
	 */
	nextYear(params:UICalendar_nextYear_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示上一年`
	 * ========params==========
	 *
	 * `id` :number : 日历视图id
	 */
	prevYear(params:UICalendar_prevYear_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置选中日期（不支持日期多选模式）`
	 * ========params==========
	 *
	 * `id` :number : 日历视图id
	 *
	 * `date` :string : （可选项）选中日期，格式为：yyyy-MM-dd
	 *
	 * `ignoreSelected` :boolean : （可选项）选中日期是否忽略选中日期样式（open -> styles -> date -> selectedColor、selectedBg）
	 */
	setDate(params:UICalendar_setDate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `翻到指定的页`
	 * ========params==========
	 *
	 * `date` :string : 选中日期，格式为：yyyy-MM
	 */
	turnPage(params:UICalendar_turnPage_Params):void

}
interface UICalendar_open_Params {
	/**（可选项）是否可以多选日期*/ 
	multipleSelect?:boolean,

	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）需要标记的特殊日期数组*/ 
	specialDate?:Array,

	/**（可选项）月份的切换方式*/ 
	switchMode?:string,

	/**（可选项）今天以前的日期是否置灰不可选*/ 
	isBefore?:boolean,

	/**（可选项）今天以后的日期是否置灰不可选*/ 
	isAfter?:boolean,

	/**（可选项）当天日期是否使用特殊格式显示（仅android有效）*/ 
	showTodayStyle?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UICalendar_setSpecialDates_Params {
	/**日历视图id*/ 
	id:number,

	/**需要标记的特殊日期数组，格式为：yyyy-MM-dd*/ 
	specialDates:Array,

}

interface UICalendar_cancelSpecialDates_Params {
	/**日历视图id*/ 
	id:number,

	/**需要取消的特殊日期组成的数组，格式为：yyyy-MM-dd*/ 
	specialDates:Array,

}

interface UICalendar_close_Params {
	/**日历视图id*/ 
	id:number,

}

interface UICalendar_show_Params {
	/**日历视图id*/ 
	id:number,

}

interface UICalendar_hide_Params {
	/**日历视图id*/ 
	id:number,

}

interface UICalendar_nextMonth_Params {
	/**日历视图id*/ 
	id:number,

}

interface UICalendar_prevMonth_Params {
	/**日历视图id*/ 
	id:number,

}

interface UICalendar_nextYear_Params {
	/**日历视图id*/ 
	id:number,

}

interface UICalendar_prevYear_Params {
	/**日历视图id*/ 
	id:number,

}

interface UICalendar_setDate_Params {
	/**日历视图id*/ 
	id:number,

	/**（可选项）选中日期，格式为：yyyy-MM-dd*/ 
	date?:string,

	/**（可选项）选中日期是否忽略选中日期样式（open -> styles -> date -> selectedColor、selectedBg）*/ 
	ignoreSelected?:boolean,

}

interface UICalendar_turnPage_Params {
	/**选中日期，格式为：yyyy-MM*/ 
	date:string,

}

interface UIChatField {
	/** 打开聊天输入框*/ 
	open(callback?: (ret:JSON) => void):void

	/** 设置工具条监听事件*/ 
	setToolbarListener():void

	/**
	 * `更新礼物信息（在群聊情况下选择群成员返回后可使用该方法更新头像及昵称）`
	 * ========params==========
	 *
	 * `avaterPath` :string : （可选项）送礼人的头像(支持 widget:// & fs://)
	 *
	 * `nickText` :string : （可选项）收礼人的昵称
	 */
	updateGiftInfo(params:UIChatField_updateGiftInfo_Params):void

	/** 关闭聊天输入框*/ 
	close():void

	/** 显示聊天输入框*/ 
	show():void

	/** 隐藏聊天输入框*/ 
	hide():void

	/** 弹出键盘*/ 
	popupKeyboard():void

	/** 收起键盘*/ 
	closeKeyboard():void

	/** 收起录音面板*/ 
	hideRecordPanel():void

	/**
	 * `获取或设置聊天输入框的内容`
	 * ========params==========
	 *
	 * `msg` :string : （可选项）聊天输入框的内容，若不传则返回输入框的值
	 */
	value(params:UIChatField_value_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向聊天输入框的指定位置插入内容`
	 * ========params==========
	 *
	 * `index` :number : （可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。**
	 *
	 * `msg` :string : （可选项）要插入的内容
	 */
	insertValue(params:UIChatField_insertValue_Params):void

	/**
	 * `添加输入框相关事件的监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件类型
	 */
	chatBoxListener(params:UIChatField_chatBoxListener_Params, callback?: (ret:JSON) => void):void

	/** 清空输入框文本*/ 
	clearText():void

	/** 重置模块*/ 
	reset():void

	/** 显示礼物面板*/ 
	showGiftPanel():void

	/** 获取当前可见的panel*/ 
	getCurrentVisiblePanel():void

	/** 设置所有按钮可用/不可用*/ 
	setEnableAllBtns():void

}
interface UIChatField_updateGiftInfo_Params {
	/**（可选项）送礼人的头像(支持 widget:// & fs://)*/ 
	avaterPath?:string,

	/**（可选项）收礼人的昵称*/ 
	nickText?:string,

}

interface UIChatField_value_Params {
	/**（可选项）聊天输入框的内容，若不传则返回输入框的值*/ 
	msg?:string,

}

interface UIChatField_insertValue_Params {
	/**（可选项）待插入内容的起始位置。**注意：中文，全角符号均占一个字符长度；索引从0开始，0表示插入到最前面，1表示插入到第一个字符后面，2表示插入到第二个字符后面，以此类推。***/ 
	index?:number,

	/**（可选项）要插入的内容*/ 
	msg?:string,

}

interface UIChatField_chatBoxListener_Params {
	/**监听的事件类型*/ 
	name:string,

}

interface UIListEdit {
	/**
	 * `打开 UIListEdit 模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用**
	 *
	 * `topData` :JSON : （可选项）列表顶部的数据源
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数**
	 *
	 * `bounces` :boolean : （可选项）是否开启弹动，android 平台不支持本参数
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `showScrollBar` :boolean : （可选项）是否显示滚动条
	 */
	open(params:UIListEdit_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭数据列表模块*/ 
	close():void

	/** 显示 UIListEdit 模块*/ 
	show():void

	/** 隐藏 UIListEdit 模块*/ 
	hide():void

	/** 隐藏顶部分组的内容*/ 
	cancelTopData():void

	/**
	 * `重新设置列表顶部分组数据`
	 * ========params==========
	 *
	 * `topData` :JSON : （可选项）列表顶部的数据源
	 */
	resetTopData(params:UIListEdit_resetTopData_Params):void

	/**
	 * `重新设置列表项向左滑动露出的按钮组（如果有顶部分组，则不包含这一部分）`
	 * ========params==========
	 *
	 * `rightBtns` :Array : （可选项）列表项向左滑动露出的按钮组
	 */
	resetRightBtn(params:UIListEdit_resetRightBtn_Params):void

	/**
	 * `根据开发者自定义的唯一标识（open 接口的 data 参数中自定义的唯一标识）查找列表项对应的数据`
	 * ========params==========
	 *
	 * `key` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key
	 *
	 * `value` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value
	 */
	getIndex(params:UIListEdit_getIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据列表项的索引获取对应的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 */
	getDataByIndex(params:UIListEdit_getDataByIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置侧滑显示出来的按钮`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 *
	 * `btns` :Array : （可选项）列表项侧滑露出的按钮组
	 */
	setSwipeBtns(params:UIListEdit_setSwipeBtns_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `data` :Array : （可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件**
	 */
	reloadData(params:UIListEdit_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引删除某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 */
	deleteItem(params:UIListEdit_deleteItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引更新某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	updateItem(params:UIListEdit_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引向某一条列表插入数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	insertItem(params:UIListEdit_insertItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `data` :Array : 列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:UIListEdit_appendData_Params, callback?: (ret:JSON) => void):void

	/** 获取当前列表的总数据量*/ 
	getCount():void

	/** 设置列表模式*/ 
	setListMode():void

	/** 获取列表模式*/ 
	getListMode():void

	/** 获取选中的项的索引*/ 
	getSelectedIndexs():void

	/**
	 * `设置下拉刷新，**通过 reloadData 收起下拉刷新组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）下拉刷新区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textDown` :string : （可选项）下拉提示文字
	 *
	 * `textUp` :string : （可选项）松开提示文字
	 *
	 * `loadingText` :string : （可选项）提示文字
	 *
	 * `lastUpdateText` :string : （可选项）提示文字
	 *
	 * `showTime` :boolean : （可选项）是否显示刷新时间
	 */
	setRefreshHeader(params:UIListEdit_setRefreshHeader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置上拉加载，**通过 appendData 收起上拉加载组件**`
	 * ========params==========
	 *
	 * `loadingImg` :string : 上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）
	 *
	 * `bgColor` :string : （可选项）上拉加载区域的背景色，支持 rgb、rgba、#
	 *
	 * `textColor` :string : （可选项）提示文字颜色，支持 rgb、rgba、#
	 *
	 * `textUp` :string : （可选项）上拉提示文字
	 *
	 * `textDown` :string : （可选项）松开提示文字
	 *
	 * `loadingText` :string : （可选项）提示文字
	 *
	 * `lastUpdateText` :string : （可选项）提示文字
	 *
	 * `showTime` :boolean : （可选项）是否显示刷新时间
	 */
	setRefreshFooter(params:UIListEdit_setRefreshFooter_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重新设置列表位置大小及样式`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 */
	reset(params:UIListEdit_reset_Params):void

	/** 全选*/ 
	allSelected():void

	/** 取消全选全选*/ 
	cancleSelected():void

}
interface UIListEdit_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用***/ 
	data:Array,

	/**（可选项）列表顶部的数据源*/ 
	topData?:JSON,

	/**（可选项）列表项向左滑动露出的按钮组，**建议：配置列表每项的通用按钮，用此参数；配置某一项的特定按钮，可在 `data` 数组的指定项传入 `rightBtns` 参数***/ 
	rightBtns?:Array,

	/**（可选项）是否开启弹动，android 平台不支持本参数*/ 
	bounces?:boolean,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否显示滚动条*/ 
	showScrollBar?:boolean,

}

interface UIListEdit_resetTopData_Params {
	/**（可选项）列表顶部的数据源*/ 
	topData?:JSON,

}

interface UIListEdit_resetRightBtn_Params {
	/**（可选项）列表项向左滑动露出的按钮组*/ 
	rightBtns?:Array,

}

interface UIListEdit_getIndex_Params {
	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key*/ 
	key:string,

	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value*/ 
	value:string,

}

interface UIListEdit_getDataByIndex_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

}

interface UIListEdit_setSwipeBtns_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

	/**（可选项）列表项侧滑露出的按钮组*/ 
	btns?:Array,

}

interface UIListEdit_reloadData_Params {
	/**（可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件***/ 
	data?:Array,

}

interface UIListEdit_deleteItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

}

interface UIListEdit_updateItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListEdit_insertItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListEdit_appendData_Params {
	/**列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	data:Array,

}

interface UIListEdit_setRefreshHeader_Params {
	/**下拉刷新时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）下拉刷新区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）下拉提示文字*/ 
	textDown?:string,

	/**（可选项）松开提示文字*/ 
	textUp?:string,

	/**（可选项）提示文字*/ 
	loadingText?:string,

	/**（可选项）提示文字*/ 
	lastUpdateText?:string,

	/**（可选项）是否显示刷新时间*/ 
	showTime?:boolean,

}

interface UIListEdit_setRefreshFooter_Params {
	/**上拉加载时显示的小箭头图标的本地路径，要求本地路径（fs://、widget://）*/ 
	loadingImg:string,

	/**（可选项）上拉加载区域的背景色，支持 rgb、rgba、#*/ 
	bgColor?:string,

	/**（可选项）提示文字颜色，支持 rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）上拉提示文字*/ 
	textUp?:string,

	/**（可选项）松开提示文字*/ 
	textDown?:string,

	/**（可选项）提示文字*/ 
	loadingText?:string,

	/**（可选项）提示文字*/ 
	lastUpdateText?:string,

	/**（可选项）是否显示刷新时间*/ 
	showTime?:boolean,

}

interface UIListEdit_reset_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

}

interface ruler {
	/**
	 * `打开尺子`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `rulerCount` :number : （可选项）尺子的总刻度
	 *
	 * `currentValue` :number : （可选项）尺子的当前刻度值
	 */
	openRuler(params:ruler_openRuler_Params, callback?: (ret:JSON) => void):void

	/**
	 * `隐藏尺子`
	 * ========params==========
	 *
	 * `index` :number : （可选项）刻度尺视图序号
	 */
	hideRuler(params:ruler_hideRuler_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示尺子`
	 * ========params==========
	 *
	 * `index` :number : （可选项）刻度尺视图序号
	 */
	showRuler(params:ruler_showRuler_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭尺子`
	 * ========params==========
	 *
	 * `index` :number : （可选项）刻度尺视图序号
	 */
	closeRuler(params:ruler_closeRuler_Params, callback?: (ret:JSON) => void):void

}
interface ruler_openRuler_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）尺子的总刻度*/ 
	rulerCount?:number,

	/**（可选项）尺子的当前刻度值*/ 
	currentValue?:number,

}

interface ruler_hideRuler_Params {
	/**（可选项）刻度尺视图序号*/ 
	index?:number,

}

interface ruler_showRuler_Params {
	/**（可选项）刻度尺视图序号*/ 
	index?:number,

}

interface ruler_closeRuler_Params {
	/**（可选项）刻度尺视图序号*/ 
	index?:number,

}

interface keyboardView {
	/**
	 * `设置键盘顶部按钮监听事件`
	 * ========params==========
	 *
	 * `height` :number : （可选项）键盘顶部按钮布局高度。
	 *
	 * `backgroundColor` :string : （可选项）顶部布局背景颜色代码。
	 *
	 * `lineColor` :string : （可选项）顶部横线颜色代码。
	 *
	 * `data` :Array : （必填项）顶部按钮id和图标
	 */
	addKeyboardListener(params:keyboardView_addKeyboardListener_Params, callback?: (ret:JSON) => void):void

	/** 移除键盘顶部按钮监听事件*/ 
	removeKeyboardListener(callback?: (ret:JSON) => void):void

}
interface keyboardView_addKeyboardListener_Params {
	/**（可选项）键盘顶部按钮布局高度。*/ 
	height?:number,

	/**（可选项）顶部布局背景颜色代码。*/ 
	backgroundColor?:string,

	/**（可选项）顶部横线颜色代码。*/ 
	lineColor?:string,

	/**（必填项）顶部按钮id和图标*/ 
	data:Array,

}

interface kLineChart {
	/** 在指定位置创建一个自定义的View，用于绘制K线图，默认打开loading状态*/ 
	createView(callback?: (ret:JSON) => void):void

	/** 添加数据*/ 
	addFooterData():void

	/** 确认数据加载完成，取消loading状态。在addFooterData调用后调用此方法。*/ 
	loadComplete():void

	/** 确认数据加载完成，取消loading状态。在addFooterData调用后调用此方法。*/ 
	loadEnd():void

}
interface graph {
}
interface UIDatePicker {
	/**
	 * `打开选择器`
	 * ========params==========
	 *
	 * `type` :string : 选择器类型
	 *
	 * `date` :string : （可选项）设置当前时间，格式yyyy-MM-dd HH:mm:ss
	 *
	 * `minDate` :string : （可选项）能够选择的最小时间，格式yyyy-MM-dd HH:mm:ss
	 *
	 * `maxDate` :string : （可选项）能够选择的最大时间，格式yyyy-MM-dd HH:mm:ss
	 *
	 * `title` :string : （可选项）显示在选择器上面的标题；
	 *
	 * `titleStyle` :null : null
	 *
	 * `titleImage` :string : （可选项）显示在选择器上面的标题图片，支持widget://，fs://；与title互斥，只能存在一个
	 *
	 * `rowHeight` :number : （可选项）设置选择器的行高
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `cyclic` :boolean : （可选项）是否可循环滑动
	 *
	 * `hideIndicator` :boolean : （可选项）是否隐藏单位（年月日时分秒）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:UIDatePicker_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭选择器*/ 
	close():void

	/** 隐藏选择器*/ 
	hide():void

	/** 显示已隐藏的选择器*/ 
	show():void

}
interface UIDatePicker_open_Params {
	/**选择器类型*/ 
	type:string,

	/**（可选项）设置当前时间，格式yyyy-MM-dd HH:mm:ss*/ 
	date?:string,

	/**（可选项）能够选择的最小时间，格式yyyy-MM-dd HH:mm:ss*/ 
	minDate?:string,

	/**（可选项）能够选择的最大时间，格式yyyy-MM-dd HH:mm:ss*/ 
	maxDate?:string,

	/**（可选项）显示在选择器上面的标题；*/ 
	title?:string,

	/**null*/ 
	titleStyle:null,

	/**（可选项）显示在选择器上面的标题图片，支持widget://，fs://；与title互斥，只能存在一个*/ 
	titleImage?:string,

	/**（可选项）设置选择器的行高*/ 
	rowHeight?:number,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）是否可循环滑动*/ 
	cyclic?:boolean,

	/**（可选项）是否隐藏单位（年月日时分秒）*/ 
	hideIndicator?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface customToast {
}
interface goodAd {
	/** 启动页广告*/ 
	launch(callback?: (ret:JSON) => void):void

	/** 广告展示窗*/ 
	dialog():void

}
interface waterBallProgress {
	/**
	 * `打开进度指示器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块位置和大小配置，若不传则取内部字段默认值
	 *
	 * `ball` :JSON : （可选项）中间水球样式配置，若不传则取内部字段默认值
	 *
	 * `annulus` :JSON : （可选项）外部环形样式配置，若不传则不显示外部环形
	 *
	 * `labels` :Array : （可选项）加载指示器上的提示文字配置，若不传则不显示，本参数为一个数组，可配置显示多个提示文字
	 *
	 * `progress` :number : （可选项）当前的进度，取值范围：0-100
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空
	 */
	open(params:waterBallProgress_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭模块*/ 
	close():void

	/** 隐藏已经打开并显示的模块，并未从内存里清除*/ 
	hide():void

	/** 显示已隐藏的模块*/ 
	show():void

	/**
	 * `设置进度值及提示文字`
	 * ========params==========
	 *
	 * `progress` :number : （可选项）设置的值
	 *
	 * `labels` :Array : （可选项）加载指示器上的提示文字更新，若不传则不显示，本参数为一个数组，可配置显示多个提示文字，起顺序与 open 接口内的 labels 一一对应，若为空则保持原值不变
	 */
	setProgress(params:waterBallProgress_setProgress_Params):void

}
interface waterBallProgress_open_Params {
	/**（可选项）模块位置和大小配置，若不传则取内部字段默认值*/ 
	rect?:JSON,

	/**（可选项）中间水球样式配置，若不传则取内部字段默认值*/ 
	ball?:JSON,

	/**（可选项）外部环形样式配置，若不传则不显示外部环形*/ 
	annulus?:JSON,

	/**（可选项）加载指示器上的提示文字配置，若不传则不显示，本参数为一个数组，可配置显示多个提示文字*/ 
	labels?:Array,

	/**（可选项）当前的进度，取值范围：0-100*/ 
	progress?:number,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空*/ 
	fixed:boolean,

}

interface waterBallProgress_setProgress_Params {
	/**（可选项）设置的值*/ 
	progress?:number,

	/**（可选项）加载指示器上的提示文字更新，若不传则不显示，本参数为一个数组，可配置显示多个提示文字，起顺序与 open 接口内的 labels 一一对应，若为空则保持原值不变*/ 
	labels?:Array,

}

interface mwChatView {
	/**
	 * `打开`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用**
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式。 **注：BubbleImage 为必传项且所指路径不能为空**
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `showScrollBar` :boolean : （可选项）是否显示滚动条
	 */
	open(params:mwChatView_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭数据列表模块*/ 
	close():void

	/** 显示*/ 
	show():void

	/** 隐藏*/ 
	hide():void

	/**
	 * `根据开发者自定义的唯一标识（open 接口的 data 参数中自定义的唯一标识）查找列表项对应的数据`
	 * ========params==========
	 *
	 * `key` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key
	 *
	 * `value` :string : 调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value
	 */
	getIndex(params:mwChatView_getIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据列表项的索引获取对应的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）列表项的索引
	 */
	getDataByIndex(params:mwChatView_getDataByIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `data` :Array : （可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件**
	 */
	reloadData(params:mwChatView_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引删除某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 */
	deleteItem(params:mwChatView_deleteItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引更新某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	updateItem(params:mwChatView_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引向某一条列表插入数据  注:**当index为0时顶部填充数据**`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `animation` :boolean : （可选项）是否展示动画
	 *
	 * `data` :Array<JSON> : 列表的数据源
	 */
	insertItem(params:mwChatView_insertItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `forceScrollToBottom` :boolean : （可选项）true 强制滚动到底部，false，如果列表已经在最底部会继续滚动，如果列表在其他位置则不滚动
	 *
	 * `data` :Array : 列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:mwChatView_appendData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `滚动到对应索引位置`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `y` :number : （可选项）模块的纵坐标
	 *
	 * `h` :number : （可选项）模块的高度
	 *
	 * `marginBottom` :number : （可选项）模块底部间距
	 */
	scrollToIndex(params:mwChatView_scrollToIndex_Params, callback?: (ret:JSON) => void):void

}
interface mwChatView_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表的数据源，**开发者可以自定义唯一的键值对信息（如：uid: '1001'），供 getIndex 使用***/ 
	data:Array,

	/**（可选项）模块各部分的样式。 **注：BubbleImage 为必传项且所指路径不能为空***/ 
	styles?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否显示滚动条*/ 
	showScrollBar?:boolean,

}

interface mwChatView_getIndex_Params {
	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 key*/ 
	key:string,

	/**调用 open 接口时，data 参数传入的开发者自定义的唯一标识的 value*/ 
	value:string,

}

interface mwChatView_getDataByIndex_Params {
	/**（可选项）列表项的索引*/ 
	index?:number,

}

interface mwChatView_reloadData_Params {
	/**（可选项）列表的数据源，**若不传或传空，仅收起下拉刷新组件***/ 
	data?:Array,

}

interface mwChatView_deleteItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

}

interface mwChatView_updateItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface mwChatView_insertItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**（可选项）是否展示动画*/ 
	animation?:boolean,

	/**列表的数据源*/ 
	data:Array<JSON>,

}

interface mwChatView_appendData_Params {
	/**（可选项）true 强制滚动到底部，false，如果列表已经在最底部会继续滚动，如果列表在其他位置则不滚动*/ 
	forceScrollToBottom?:boolean,

	/**列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	data:Array,

}

interface mwChatView_scrollToIndex_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**（可选项）模块的纵坐标*/ 
	y?:number,

	/**（可选项）模块的高度*/ 
	h?:number,

	/**（可选项）模块底部间距*/ 
	marginBottom?:number,

}

interface coverFlow {
}
interface photoBrowserTouTiaoPlus {
	/**
	 * `打开图文信息模块`
	 * ========params==========
	 *
	 * `hidden` :JSON : （可选项）界面元素的隐藏显示属性配置，默认值见内部字段
	 *
	 * `textStyles` :JSON : （可选项）图片描述样式配置，若不传则描述文字按照1.0.0方式显示
	 */
	open(params:photoBrowserTouTiaoPlus_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置模块数据`
	 * ========params==========
	 *
	 * `images` :Array : 图片路径数组数据，支持 fs://，以及网络路径 http://，https://
	 *
	 * `texts` :Array : （可选项）描述数据
	 *
	 * `publisher` :string : （可选项）发布者按钮图标，位于头部右侧从右数第二个按钮。支持 widget://、fs://、http://、https:// 路径格式的图片。
	 *
	 * `comment` :number : （可选项）评论角标数值，值为 0 时角标无效
	 *
	 * `favorite` :boolean : （可选项）收藏状态，值为 true 时显示 active 指定的图标。
	 */
	setData(params:photoBrowserTouTiaoPlus_setData_Params):void

	/** 清除缓存到本地的网络图片，**本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

}
interface photoBrowserTouTiaoPlus_open_Params {
	/**（可选项）界面元素的隐藏显示属性配置，默认值见内部字段*/ 
	hidden?:JSON,

	/**（可选项）图片描述样式配置，若不传则描述文字按照1.0.0方式显示*/ 
	textStyles?:JSON,

}

interface photoBrowserTouTiaoPlus_setData_Params {
	/**图片路径数组数据，支持 fs://，以及网络路径 http://，https://*/ 
	images:Array,

	/**（可选项）描述数据*/ 
	texts?:Array,

	/**（可选项）发布者按钮图标，位于头部右侧从右数第二个按钮。支持 widget://、fs://、http://、https:// 路径格式的图片。*/ 
	publisher?:string,

	/**（可选项）评论角标数值，值为 0 时角标无效*/ 
	comment?:number,

	/**（可选项）收藏状态，值为 true 时显示 active 指定的图标。*/ 
	favorite?:boolean,

}

interface personalCenter {
	/**
	 * `打开个人中心`
	 * ========params==========
	 *
	 * `y ` :number : （可选项）个人中心视图上边距屏幕位置
	 *
	 * `h ` :number : （可选项）视图的高，不可小于220
	 *
	 * `imgPath` :string : 头像图片的路径（如果为网络路径,图片会被缓存到本地），支持http，https，widget，file，fs协议
	 *
	 * `placeholderImg` :string : （可选项）头像占位图片的路径，支持仅widget，file，fs本地协议
	 *
	 * `userName ` :string : （可选项）用户名
	 *
	 * `userNameSize ` :number : （可选项）用户名字体大小
	 *
	 * `userColor` :string : （可选项）用户名和积分字体颜色
	 *
	 * `subTitle ` :string : （可选项）用户名下边的小标题
	 *
	 * `subTitleSize ` :string : （可选项）用户名下边的小标题字体大小
	 *
	 * `subTitleColor` :string : （可选项）用户名下边的小标题字体颜色
	 *
	 * `showLeftBtn` :boolean : （可选项）是否显示左上交修改按钮
	 *
	 * `showRightBtn` :boolean : （可选项）是否显示右上角设置按钮
	 *
	 * `buttonTitle` :JSON : （可选项）顶部两边按钮的标题文字，当 showLeftBtn、showRightBtn 为 true 时本参数有效
	 *
	 * `modButton` :JSON : （可选项）修改按钮参数
	 *
	 * `btnArray` :Array : （可选项）下边按钮的参数信息
	 *
	 * `clearBtn` :boolean : （可选项）是否将个人中心下边按钮清除
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:personalCenter_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `刷新个人中心显示数据`
	 * ========params==========
	 *
	 * `userName ` :string : （可选项）用户名
	 *
	 * `subTile ` :string : (可选项)用户名下的小标题
	 *
	 * `imgPath` :string : (可选项)头像地址，若为不传则不刷新
	 *
	 * `btnArray` :Array : （可选项）下边按钮显示的数据，不传则不刷新
	 */
	updateValue(params:personalCenter_updateValue_Params):void

	/** 关闭个人中心*/ 
	close():void

	/** 设置选中按钮*/ 
	setSelect():void

	/** 显示个人中心*/ 
	show():void

	/** 隐藏个人中心*/ 
	hide():void

}
interface personalCenter_open_Params {
	/**（可选项）个人中心视图上边距屏幕位置*/ 
	y ?:number,

	/**（可选项）视图的高，不可小于220*/ 
	h ?:number,

	/**头像图片的路径（如果为网络路径,图片会被缓存到本地），支持http，https，widget，file，fs协议*/ 
	imgPath:string,

	/**（可选项）头像占位图片的路径，支持仅widget，file，fs本地协议*/ 
	placeholderImg?:string,

	/**（可选项）用户名*/ 
	userName ?:string,

	/**（可选项）用户名字体大小*/ 
	userNameSize ?:number,

	/**（可选项）用户名和积分字体颜色*/ 
	userColor?:string,

	/**（可选项）用户名下边的小标题*/ 
	subTitle ?:string,

	/**（可选项）用户名下边的小标题字体大小*/ 
	subTitleSize ?:string,

	/**（可选项）用户名下边的小标题字体颜色*/ 
	subTitleColor?:string,

	/**（可选项）是否显示左上交修改按钮*/ 
	showLeftBtn?:boolean,

	/**（可选项）是否显示右上角设置按钮*/ 
	showRightBtn?:boolean,

	/**（可选项）顶部两边按钮的标题文字，当 showLeftBtn、showRightBtn 为 true 时本参数有效*/ 
	buttonTitle?:JSON,

	/**（可选项）修改按钮参数*/ 
	modButton?:JSON,

	/**（可选项）下边按钮的参数信息*/ 
	btnArray?:Array,

	/**（可选项）是否将个人中心下边按钮清除*/ 
	clearBtn?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface personalCenter_updateValue_Params {
	/**（可选项）用户名*/ 
	userName ?:string,

	/**(可选项)用户名下的小标题*/ 
	subTile ?:string,

	/**(可选项)头像地址，若为不传则不刷新*/ 
	imgPath?:string,

	/**（可选项）下边按钮显示的数据，不传则不刷新*/ 
	btnArray?:Array,

}

interface UIListGoods {
	/**
	 * `打开 模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `data` :Array : 列表的数据源，
	 *
	 * `bounces` :boolean : （可选项）是否开启弹动，android 平台不支持本参数
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `backgroundColor` :string : （可选项）模块的背景色，支持 rgb，rgba，#
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `showScrollBar` :boolean : （可选项）是否显示滚动条
	 */
	open(params:UIListGoods_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭数据列表模块*/ 
	close():void

	/** 显示 UIListView 模块*/ 
	show():void

	/** 隐藏 UIListView 模块*/ 
	hide():void

	/**
	 * `刷新列表数据`
	 * ========params==========
	 *
	 * `data` :Array : （可选项）列表的数据源
	 */
	reloadData(params:UIListGoods_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引更新某一条列表的数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	updateItem(params:UIListGoods_updateItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据索引向某一条列表插入数据`
	 * ========params==========
	 *
	 * `index` :number : （可选项）数据列表的索引
	 *
	 * `data` :JSON : 列表的数据源
	 */
	insertItem(params:UIListGoods_insertItem_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向列表末端追加数据`
	 * ========params==========
	 *
	 * `data` :Array : 列表的数据源
	 */
	appendData(params:UIListGoods_appendData_Params, callback?: (ret:JSON) => void):void

}
interface UIListGoods_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**列表的数据源，*/ 
	data:Array,

	/**（可选项）是否开启弹动，android 平台不支持本参数*/ 
	bounces?:boolean,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）模块的背景色，支持 rgb，rgba，#*/ 
	backgroundColor?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否显示滚动条*/ 
	showScrollBar?:boolean,

}

interface UIListGoods_reloadData_Params {
	/**（可选项）列表的数据源*/ 
	data?:Array,

}

interface UIListGoods_updateItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListGoods_insertItem_Params {
	/**（可选项）数据列表的索引*/ 
	index?:number,

	/**列表的数据源*/ 
	data:JSON,

}

interface UIListGoods_appendData_Params {
	/**列表的数据源*/ 
	data:Array,

}

interface photoBrowserTouTiao {
	/**
	 * `打开图文信息模块`
	 * ========params==========
	 *
	 * `hidden` :JSON : （可选项）界面元素的隐藏显示属性配置，默认值见内部字段
	 *
	 * `textStyles` :JSON : （可选项）图片描述样式配置，若不传则描述文字按照1.0.0方式显示
	 */
	open(params:photoBrowserTouTiao_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置模块数据`
	 * ========params==========
	 *
	 * `images` :Array : 图片路径数组数据，支持 fs://，以及网络路径 http://，https://
	 *
	 * `texts` :Array : （可选项）描述数据
	 *
	 * `publisher` :string : （可选项）发布者按钮图标，位于头部右侧从右数第二个按钮。支持 widget://、fs://、http://、https:// 路径格式的图片。
	 *
	 * `comment` :number : （可选项）评论角标数值，值为 0 时角标无效
	 *
	 * `favorite` :boolean : （可选项）收藏状态，值为 true 时显示 active 指定的图标。
	 */
	setData(params:photoBrowserTouTiao_setData_Params):void

	/** 清除缓存到本地的网络图片，**本接口只清除本模块缓存的数据，若要清除本 app 缓存的所有数据则调用 api.clearCache***/ 
	clearCache():void

	/** 刷新界面接口，本接口仅支持 ios 平台*/ 
	refreshUI():void

}
interface photoBrowserTouTiao_open_Params {
	/**（可选项）界面元素的隐藏显示属性配置，默认值见内部字段*/ 
	hidden?:JSON,

	/**（可选项）图片描述样式配置，若不传则描述文字按照1.0.0方式显示*/ 
	textStyles?:JSON,

}

interface photoBrowserTouTiao_setData_Params {
	/**图片路径数组数据，支持 fs://，以及网络路径 http://，https://*/ 
	images:Array,

	/**（可选项）描述数据*/ 
	texts?:Array,

	/**（可选项）发布者按钮图标，位于头部右侧从右数第二个按钮。支持 widget://、fs://、http://、https:// 路径格式的图片。*/ 
	publisher?:string,

	/**（可选项）评论角标数值，值为 0 时角标无效*/ 
	comment?:number,

	/**（可选项）收藏状态，值为 true 时显示 active 指定的图标。*/ 
	favorite?:boolean,

}

interface cityList {
}
interface moduleScanCode {
	/** 绑定一个服务*/ 
	bindScannerService(callback?: (ret:JSON) => void):void

	/** 注册一个广播用来接收扫描到的条码值*/ 
	registerReceiver(callback?: (ret:JSON) => void):void

	/** 开启手持的红外线扫描头*/ 
	startScanner(callback?: (ret:JSON) => void):void

	/** 关闭手持的红外线扫描头*/ 
	stopScanner(callback?: (ret:JSON) => void):void

}
interface cxgBluetoothSerial {
	/** 获取当前的蓝牙状态*/ 
	isEnabledBluetooth(callback?: (ret:JSON) => void):void

	/** 打开蓝牙*/ 
	openBluetooth(callback?: (ret:JSON) => void):void

	/** 关闭蓝牙*/ 
	closeBluetooth(callback?: (ret:JSON) => void):void

	/** 监听蓝牙的状态变化， 多次返回*/ 
	listenBluetoothStatus(callback?: (ret:JSON) => void):void

	/** 获取已经配对的设备*/ 
	bondedDevices(callback?: (ret:JSON) => void):void

	/** 是否正在搜索设备*/ 
	isScanning(callback?: (ret:JSON) => void):void

	/** 扫描周边设备*/ 
	scan(callback?: (ret:JSON) => void):void

	/** 停止扫描周边设备*/ 
	stopScan(callback?: (ret:JSON) => void):void

	/**
	 * `连接到设备`
	 * ========params==========
	 *
	 * `address` :string : 蓝牙设备的地址
	 */
	connect(params:cxgBluetoothSerial_connect_Params, callback?: (ret:JSON) => void):void

	/** 断开连接*/ 
	disconnect(callback?: (ret:JSON) => void):void

	/** 获取已经连接的设备*/ 
	connectedDevice(callback?: (ret:JSON) => void):void

	/**
	 * `发送数据`
	 * ========params==========
	 *
	 * `data` :string : 需要发送的字符串
	 */
	sendData(params:cxgBluetoothSerial_sendData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `读取数据，多次返回`
	 * ========params==========
	 *
	 * `bufferSize` :number : 数据读取 buffer 的大小, 一般无需设置
	 */
	readData(params:cxgBluetoothSerial_readData_Params, callback?: (ret:JSON) => void):void

}
interface cxgBluetoothSerial_connect_Params {
	/**蓝牙设备的地址*/ 
	address:string,

}

interface cxgBluetoothSerial_sendData_Params {
	/**需要发送的字符串*/ 
	data:string,

}

interface cxgBluetoothSerial_readData_Params {
	/**数据读取 buffer 的大小, 一般无需设置*/ 
	bufferSize:number,

}

interface pingModule {
}
interface magnetometer {
	/** 检查设备是否有磁力感应*/ 
	checkUp(callback?: (ret:JSON) => void):void

	/**
	 * `打开磁力感应`
	 * ========params==========
	 *
	 * `time` :string : （必选）采集信息间隔时间，以秒为单位。
	 */
	startListener(params:magnetometer_startListener_Params, callback?: (ret:JSON) => void):void

	/** 关闭磁力感应*/ 
	stopListener():void

}
interface magnetometer_startListener_Params {
	/**（必选）采集信息间隔时间，以秒为单位。*/ 
	time:string,

}

interface androidTouch {
	/** 开始指纹识别*/ 
	touch():void

	/** 取消指纹识别*/ 
	touchCancel():void

}
interface cvVibrate {
	/** Peek振动*/ 
	Peek(callback?: (ret:JSON) => void):void

	/** Pop振动*/ 
	Pop(callback?: (ret:JSON) => void):void

	/** 三次连续振动*/ 
	Three(callback?: (ret:JSON) => void):void

	/** 长振动*/ 
	Long(callback?: (ret:JSON) => void):void

	/**
	 * `自定义时长振动模式（**仅安卓支持自定义时长振动，IOS是支持自定义时间间歇振动**）`
	 * ========params==========
	 *
	 * `time` :number : （必填项）振动的总时长，到时间后停止振动。
	 */
	Custom(params:cvVibrate_Custom_Params, callback?: (ret:JSON) => void):void

	/** 停止振动*/ 
	stopVibrate(callback?: (ret:JSON) => void):void

	/**
	 * `根据系统SoundID选择播放手机铃声（系统设置静音时不播放铃声）`
	 * ========params==========
	 *
	 * `SoundID` :number : （必填项）系统铃声id。
	 *
	 * `time` :number : （必填项）铃声播放振动的总时长，到时间后停止振动。
	 *
	 * `duration` :number : （选填项）铃声循环间隔，调节循环次数。（time存在时必填项）
	 */
	ringTone(params:cvVibrate_ringTone_Params, callback?: (ret:JSON) => void):void

}
interface cvVibrate_Custom_Params {
	/**（必填项）振动的总时长，到时间后停止振动。*/ 
	time:number,

}

interface cvVibrate_ringTone_Params {
	/**（必填项）系统铃声id。*/ 
	SoundID:number,

	/**（必填项）铃声播放振动的总时长，到时间后停止振动。*/ 
	time:number,

	/**（选填项）铃声循环间隔，调节循环次数。（time存在时必填项）*/ 
	duration:number,

}

interface checkproxys {
}
interface lockScreen {
	/** 打开屏幕自动锁屏*/ 
	autoLockScreen(callback?: (ret:JSON) => void):void

	/** 关闭屏幕自动锁屏*/ 
	unlockScreen(callback?: (ret:JSON) => void):void

}
interface accelerometer {
	/** 检查设备是否有加速度传感器*/ 
	checkUp(callback?: (ret:JSON) => void):void

	/**
	 * `打开加速度传感器`
	 * ========params==========
	 *
	 * `time` :string : （必选）采集信息间隔时间，以秒为单位。
	 */
	startListener(params:accelerometer_startListener_Params, callback?: (ret:JSON) => void):void

	/** 关闭加速度传感器*/ 
	stopListener():void

}
interface accelerometer_startListener_Params {
	/**（必选）采集信息间隔时间，以秒为单位。*/ 
	time:string,

}

interface BoyFatBle {
	/** 初始化蓝牙4.0管理器*/ 
	initBle():void

	/**
	 * `开始搜索蓝牙4.0设备，当扫描到相应设备后,会自动停止扫描,未扫描到设备若要停止、调用 stopScan 接口`
	 * ========params==========
	 *
	 * `deviceName` :string : (必传)需要扫描的设备名字
	 */
	scan(params:BoyFatBle_scan_Params, callback?: (ret:JSON) => void):void

	/** 判断是否正在扫描*/ 
	isScanning():void

	/** 停止搜索附近的蓝牙设备*/ 
	stopScan():void

	/**
	 * `获取临时体重,获取锁定体重,获取impedance值`
	 * ========params==========
	 *
	 * `scanRecord` :string : 广播数据包数据    **注意:iOS无需此参数**
	 *
	 * `type` :number : 取值为1 或者是2,分别代表TYPE_W62 =1  TYPE_59 =2
	 */
	handleScanRecord(params:BoyFatBle_handleScanRecord_Params, callback?: (ret:JSON) => void):void

	/**
	 * `返回获取数据`
	 * ========params==========
	 *
	 * `Weight` :number : 体重单位kg
	 *
	 * `Height` :number : 身高单位cm
	 *
	 * `age` :number : 年龄
	 *
	 * `gender` :number : 0 女 1男
	 *
	 * `impedance` :number : impedance
	 */
	invokeLoease(params:BoyFatBle_invokeLoease_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改称重单位`
	 * ========params==========
	 *
	 * `unit` :number : 称重单位
	 */
	sentCommandToWeightScaleUnit(params:BoyFatBle_sentCommandToWeightScaleUnit_Params, callback?: (ret:JSON) => void):void

}
interface BoyFatBle_scan_Params {
	/**(必传)需要扫描的设备名字*/ 
	deviceName:string,

}

interface BoyFatBle_handleScanRecord_Params {
	/**广播数据包数据    **注意:iOS无需此参数***/ 
	scanRecord:string,

	/**取值为1 或者是2,分别代表TYPE_W62 =1  TYPE_59 =2*/ 
	type:number,

}

interface BoyFatBle_invokeLoease_Params {
	/**体重单位kg*/ 
	Weight:number,

	/**身高单位cm*/ 
	Height:number,

	/**年龄*/ 
	age:number,

	/**0 女 1男*/ 
	gender:number,

	/**impedance*/ 
	impedance:number,

}

interface BoyFatBle_sentCommandToWeightScaleUnit_Params {
	/**称重单位*/ 
	unit:number,

}

interface bluetooth {
}
interface posScanner {
	/** 开始监听扫描枪*/ 
	startListenKeyboardScan():void

	/** 停止扫描枪的监听*/ 
	stopListenKeyboardScan():void

}
interface DVContacts {
	/** 打开系统通讯录界面，选择单个联系人，返回已选的联系人信息*/ 
	openContactsUI():void

	/** 获取所有联系人*/ 
	allContacts():void

	/**
	 * `向通讯录添加一个联系人，所有参数不可同时为空。添加`
	 * ========params==========
	 *
	 * `image` :string : （可选项）联系人头像，支持widget://、fs://
	 *
	 * `lastName` :string : （可选项）联系人姓氏
	 *
	 * `firstName` :string : （可选项）联系人名字
	 *
	 * `middleName` :string : （可选项）联系人中间名
	 *
	 * `prefix` :string : （可选项）联系人名称前缀
	 *
	 * `suffix` :string : （可选项）联系人名称后缀
	 *
	 * `company` :string : （可选项）联系人公司
	 *
	 * `title` :string : （可选项）联系人职位
	 *
	 * `phones` :Array : （可选项）联系人电话组成的数组
	 *
	 * `address` :Array : （可选项）联系人地址
	 *
	 * `url` :Array : （可选项）URL
	 *
	 * `emails` :Array : （可选项）邮箱
	 *
	 * `dates` :Array : （可选项）日期
	 *
	 * `contactRelation` :Array : （可选项）关联人
	 *
	 * `socialProfiles` :Array : （可选项）社交资料
	 *
	 * `instantMessageAddresses` :Array : （可选项）即时信息
	 *
	 * `note` :string : （可选项）联系人备注
	 */
	add(params:DVContacts_add_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从通讯录删除一个或多个联系人`
	 * ========params==========
	 *
	 * `ids` :Array : 联系人的 id 组成的数组，若传入的 id 不存在，则忽略此id
	 */
	delete(params:DVContacts_delete_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据 id 更新通讯录的联系人信息`
	 * ========params==========
	 *
	 * `id` :string : 联系人的id
	 *
	 * `image` :string : （可选项）联系人头像，支持widget://、fs://
	 *
	 * `lastName` :string : （可选项）联系人姓氏
	 *
	 * `firstName` :string : （可选项）联系人名字
	 *
	 * `middleName` :string : （可选项）联系人中间名
	 *
	 * `prefix` :string : （可选项）联系人名称前缀
	 *
	 * `suffix` :string : （可选项）联系人名称后缀
	 *
	 * `company` :string : （可选项）联系人公司
	 *
	 * `title` :string : （可选项）联系人职位
	 *
	 * `phones` :Array : （可选项）联系人电话组成的数组
	 *
	 * `address` :Array : （可选项）联系人地址
	 *
	 * `url` :Array : （可选项）URL
	 *
	 * `emails` :Array : （可选项）邮箱
	 *
	 * `dates` :Array : （可选项）日期
	 *
	 * `contactRelation` :Array : （可选项）关联人【仅ios支持】
	 *
	 * `socialProfiles` :Array : （可选项）社交资料【仅ios支持】
	 *
	 * `instantMessageAddresses` :Array : （可选项）即时信息
	 *
	 * `note` :string : （可选项）联系人备注
	 */
	update(params:DVContacts_update_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据联系人 id 查找联系人`
	 * ========params==========
	 *
	 * `ids` :Array : 联系人 id 组成的数组，若 id 不存在则不处理
	 */
	query(params:DVContacts_query_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据关键字从通讯录查找联系人`
	 * ========params==========
	 *
	 * `keyword` :string : 要查询的关键字 **注意：仅搜索 lastName 和 firstName 包含的关键字**
	 */
	queryByKeyword(params:DVContacts_queryByKeyword_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建分组`
	 * ========params==========
	 *
	 * `groupName` :string : 分组名
	 */
	createGroup(params:DVContacts_createGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除分组，只删除分组，不删除其中的联系人`
	 * ========params==========
	 *
	 * `groupId` :any : 分组 id
	 */
	deleteGroup(params:DVContacts_deleteGroup_Params, callback?: (ret:JSON) => void):void

	/** 获取所有分组信息*/ 
	queryGroups(callback?: (ret:JSON) => void):void

	/**
	 * `根据分组 id 查找联系人`
	 * ========params==========
	 *
	 * `groupId` :number : （可选项）要查找的分组 id
	 */
	queryByGroupId(params:DVContacts_queryByGroupId_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据 id 移动联系人至指定分组`
	 * ========params==========
	 *
	 * `id` :any : 联系人 id
	 *
	 * `groupId` :any : 联系人的分组 id；若分组不存在则不移动分组
	 */
	move(params:DVContacts_move_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据 id 从指定分组删除`
	 * ========params==========
	 *
	 * `id` :any : 联系人 id
	 *
	 * `groupId` :any : 联系人的分组 id；若分组不存在则不从分组删除
	 */
	deleteFromGroup(params:DVContacts_deleteFromGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据页码查找指定数量的联系人`
	 * ========params==========
	 *
	 * `count` :number : （可选项）每页联系人的数量，若不传则返回全部联系人，**不建议不传本参数**
	 *
	 * `pageIndex` :number : （可选项）联系人的分页索引
	 */
	queryByPage(params:DVContacts_queryByPage_Params, callback?: (ret:JSON) => void):void

}
interface DVContacts_add_Params {
	/**（可选项）联系人头像，支持widget://、fs://*/ 
	image?:string,

	/**（可选项）联系人姓氏*/ 
	lastName?:string,

	/**（可选项）联系人名字*/ 
	firstName?:string,

	/**（可选项）联系人中间名*/ 
	middleName?:string,

	/**（可选项）联系人名称前缀*/ 
	prefix?:string,

	/**（可选项）联系人名称后缀*/ 
	suffix?:string,

	/**（可选项）联系人公司*/ 
	company?:string,

	/**（可选项）联系人职位*/ 
	title?:string,

	/**（可选项）联系人电话组成的数组*/ 
	phones?:Array,

	/**（可选项）联系人地址*/ 
	address?:Array,

	/**（可选项）URL*/ 
	url?:Array,

	/**（可选项）邮箱*/ 
	emails?:Array,

	/**（可选项）日期*/ 
	dates?:Array,

	/**（可选项）关联人*/ 
	contactRelation?:Array,

	/**（可选项）社交资料*/ 
	socialProfiles?:Array,

	/**（可选项）即时信息*/ 
	instantMessageAddresses?:Array,

	/**（可选项）联系人备注*/ 
	note?:string,

}

interface DVContacts_delete_Params {
	/**联系人的 id 组成的数组，若传入的 id 不存在，则忽略此id*/ 
	ids:Array,

}

interface DVContacts_update_Params {
	/**联系人的id*/ 
	id:string,

	/**（可选项）联系人头像，支持widget://、fs://*/ 
	image?:string,

	/**（可选项）联系人姓氏*/ 
	lastName?:string,

	/**（可选项）联系人名字*/ 
	firstName?:string,

	/**（可选项）联系人中间名*/ 
	middleName?:string,

	/**（可选项）联系人名称前缀*/ 
	prefix?:string,

	/**（可选项）联系人名称后缀*/ 
	suffix?:string,

	/**（可选项）联系人公司*/ 
	company?:string,

	/**（可选项）联系人职位*/ 
	title?:string,

	/**（可选项）联系人电话组成的数组*/ 
	phones?:Array,

	/**（可选项）联系人地址*/ 
	address?:Array,

	/**（可选项）URL*/ 
	url?:Array,

	/**（可选项）邮箱*/ 
	emails?:Array,

	/**（可选项）日期*/ 
	dates?:Array,

	/**（可选项）关联人【仅ios支持】*/ 
	contactRelation?:Array,

	/**（可选项）社交资料【仅ios支持】*/ 
	socialProfiles?:Array,

	/**（可选项）即时信息*/ 
	instantMessageAddresses?:Array,

	/**（可选项）联系人备注*/ 
	note?:string,

}

interface DVContacts_query_Params {
	/**联系人 id 组成的数组，若 id 不存在则不处理*/ 
	ids:Array,

}

interface DVContacts_queryByKeyword_Params {
	/**要查询的关键字 **注意：仅搜索 lastName 和 firstName 包含的关键字***/ 
	keyword:string,

}

interface DVContacts_createGroup_Params {
	/**分组名*/ 
	groupName:string,

}

interface DVContacts_deleteGroup_Params {
	/**分组 id*/ 
	groupId:any,

}

interface DVContacts_queryByGroupId_Params {
	/**（可选项）要查找的分组 id*/ 
	groupId?:number,

}

interface DVContacts_move_Params {
	/**联系人 id*/ 
	id:any,

	/**联系人的分组 id；若分组不存在则不移动分组*/ 
	groupId:any,

}

interface DVContacts_deleteFromGroup_Params {
	/**联系人 id*/ 
	id:any,

	/**联系人的分组 id；若分组不存在则不从分组删除*/ 
	groupId:any,

}

interface DVContacts_queryByPage_Params {
	/**（可选项）每页联系人的数量，若不传则返回全部联系人，**不建议不传本参数***/ 
	count?:number,

	/**（可选项）联系人的分页索引*/ 
	pageIndex?:number,

}

interface decibel {
	/**
	 * `获取周围环境的分贝值（dB）。`
	 * ========params==========
	 *
	 * `repeat` :boolean : （选填）是否持续地返回分贝值。默认是false,只返回一次结果。
	 *
	 * `interval` :number : （选填）repeat为true才有效，返回的时间间隔，单位毫秒ms
	 */
	getDecibel(params:decibel_getDecibel_Params, callback?: (ret:JSON) => void):void

	/** 停止返回分贝值，只有设repeat为true，才有必要调这个停止。*/ 
	stop():void

}
interface decibel_getDecibel_Params {
	/**（选填）是否持续地返回分贝值。默认是false,只返回一次结果。*/ 
	repeat:boolean,

	/**（选填）repeat为true才有效，返回的时间间隔，单位毫秒ms*/ 
	interval:number,

}

interface rotationVector {
}
interface linearAcceleration {
}
interface gravitySensor {
}
interface seblePrinter {
	/** 搜索小票打印机蓝牙接口*/ 
	init():void

	/**
	 * `连接小票打印机接口`
	 * ========params==========
	 *
	 * `id` :number : 默认值为0，填写init接口返回的id。
	 */
	connect(params:seblePrinter_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `以html网络文件形式打印小票`
	 * ========params==========
	 *
	 * `url` :string : 打印小票的html文件的网络地址。
	 *
	 * `alignment` :number : 对齐方式
	 *
	 * `maxWidth` :number : 最大宽度
	 */
	print(params:seblePrinter_print_Params, callback?: (ret:JSON) => void):void

	/** 以html本地文件形式打印小票接口*/ 
	printLocal():void

	/**
	 * `以字符串形式打印小票接口`
	 * ========params==========
	 *
	 * `printString` :Array : 打印小票的数据。里面为字典类型。
	 */
	printString(params:seblePrinter_printString_Params, callback?: (ret:JSON) => void):void

}
interface seblePrinter_connect_Params {
	/**默认值为0，填写init接口返回的id。*/ 
	id:number,

}

interface seblePrinter_print_Params {
	/**打印小票的html文件的网络地址。*/ 
	url:string,

	/**对齐方式*/ 
	alignment:number,

	/**最大宽度*/ 
	maxWidth:number,

}

interface seblePrinter_printString_Params {
	/**打印小票的数据。里面为字典类型。*/ 
	printString:Array,

}

interface lightSensitive {
	/** 开始检测光感*/ 
	start():void

	/** 结束检测光感*/ 
	end():void

}
interface music {
	/**
	 * `扫描 Music 内的音频文件`
	 * ========params==========
	 *
	 * `thumbnail` :JSON : 返回的缩略图(若不存在则返回空)大小，若不传本参数则不返回缩略图，注意返回缩略图会降低读取速度
	 *
	 * `iCloud` :boolean : 是否包含 iCloud 音乐
	 */
	scanMusic(params:music_scanMusic_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将音乐库的音频文件拷贝到沙盒`
	 * ========params==========
	 *
	 * `url` :string : 音乐库音频文件路径，如：ipod-library://item/item.mp3?id=4559289265963493915
	 *
	 * `savePath` :string : （可选项）保存路径，要求本地路径（fs://），如：fs://music/m1.mp3
	 */
	copyToSandbox(params:music_copyToSandbox_Params, callback?: (ret:JSON) => void):void

	/** 取消音乐库的音频文件拷贝到沙盒*/ 
	cancelCopyToSandbox(callback?: (ret:JSON) => void):void

	/**
	 * `清空缓存`
	 * ========params==========
	 *
	 * `url` :string : 清空的缓存的目标
	 */
	cleanCach(params:music_cleanCach_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出系统自带选择音频页面`
	 * ========params==========
	 *
	 * `multiple` :string : 是否多选
	 *
	 * `showsCloudItems` :string : 是否显示云端资源
	 *
	 * `thumbnail` :JSON : 返回的缩略图(若不存在则返回空)大小，若不传本参数则不返回缩略图，注意返回缩略图会降低读取速度
	 */
	presentMusic(params:music_presentMusic_Params, callback?: (ret:JSON) => void):void

}
interface music_scanMusic_Params {
	/**返回的缩略图(若不存在则返回空)大小，若不传本参数则不返回缩略图，注意返回缩略图会降低读取速度*/ 
	thumbnail:JSON,

	/**是否包含 iCloud 音乐*/ 
	iCloud:boolean,

}

interface music_copyToSandbox_Params {
	/**音乐库音频文件路径，如：ipod-library://item/item.mp3?id=4559289265963493915*/ 
	url:string,

	/**（可选项）保存路径，要求本地路径（fs://），如：fs://music/m1.mp3*/ 
	savePath?:string,

}

interface music_cleanCach_Params {
	/**清空的缓存的目标*/ 
	url:string,

}

interface music_presentMusic_Params {
	/**是否多选*/ 
	multiple:string,

	/**是否显示云端资源*/ 
	showsCloudItems:string,

	/**返回的缩略图(若不存在则返回空)大小，若不传本参数则不返回缩略图，注意返回缩略图会降低读取速度*/ 
	thumbnail:JSON,

}

interface zNFC {
	/**
	 * `读取NDEF格式的NFC标签`
	 * ========params==========
	 *
	 * `style` :JSON : （可选项）模块各部分的样式,不传递本参数则选用模块默认UI布局方案
	 */
	readNDEF(params:zNFC_readNDEF_Params, callback?: (ret:JSON) => void):void

	/**
	 * `写入数据至NDEF格式的NFC标签`
	 * ========params==========
	 *
	 * `style` :JSON : （可选项）模块各部分的样式,不传递本参数则选用模块默认UI布局方案
	 *
	 * `data` :string : （可选项）要写入的数据【 如：'这是一条测试数据'】，不传将写入空字符串（空字符串可以达到清空内容的功能）
	 */
	writeNDEF(params:zNFC_writeNDEF_Params, callback?: (ret:JSON) => void):void

}
interface zNFC_readNDEF_Params {
	/**（可选项）模块各部分的样式,不传递本参数则选用模块默认UI布局方案*/ 
	style?:JSON,

}

interface zNFC_writeNDEF_Params {
	/**（可选项）模块各部分的样式,不传递本参数则选用模块默认UI布局方案*/ 
	style?:JSON,

	/**（可选项）要写入的数据【 如：'这是一条测试数据'】，不传将写入空字符串（空字符串可以达到清空内容的功能）*/ 
	data?:string,

}

interface spputil {
	/** 初始化*/ 
	init(callback?: (ret:JSON) => void):void

	/** 扫描附近蓝牙设备，会自动停止*/ 
	scan():void

	/** 是否在扫描*/ 
	isScanning():void

	/** 停止扫描*/ 
	stopScan():void

	/**
	 * `连接指定外围设备`
	 * ========params==========
	 *
	 * `address` :string : 要连接的外围设备的 MAC地址。
	 */
	connect(params:spputil_connect_Params, callback?: (ret:JSON) => void):void

	/** 断开连接*/ 
	disconnect(callback?: (ret:JSON) => void):void

	/** 设备是否连接*/ 
	isConnected(callback?: (ret:JSON) => void):void

	/**
	 * `发送数据`
	 * ========params==========
	 *
	 * `sendData` :string : 发送的数据。
	 *
	 * `isHex` :boolean : 是否是HEX数据
	 */
	send(params:spputil_send_Params, callback?: (ret:JSON) => void):void

	/**
	 * `接收数据`
	 * ========params==========
	 *
	 * `isHex` :boolean : 是否是HEX数据
	 */
	receive(params:spputil_receive_Params, callback?: (ret:JSON) => void):void

}
interface spputil_connect_Params {
	/**要连接的外围设备的 MAC地址。*/ 
	address:string,

}

interface spputil_send_Params {
	/**发送的数据。*/ 
	sendData:string,

	/**是否是HEX数据*/ 
	isHex:boolean,

}

interface spputil_receive_Params {
	/**是否是HEX数据*/ 
	isHex:boolean,

}

interface callrecords {
}
interface ipAddr {
	/** 获取ip地址*/ 
	getIp():void

}
interface telephoneInfo {
	/** 得到手机通讯所有相关信息*/ 
	getTelephoneInfos(callback?: (ret:JSON) => void):void

	/** 得到设备信息*/ 
	getDeviceInfo(callback?: (ret:JSON) => void):void

	/** 得到SIM卡信息*/ 
	getSimInfo(callback?: (ret:JSON) => void):void

	/** 得到网络信息*/ 
	getNetworkInfo(callback?: (ret:JSON) => void):void

	/** 得到电话相关状态信息*/ 
	getPhoneStateInfo(callback?: (ret:JSON) => void):void

}
interface ipa {
	/** 获取BundleID。*/ 
	getBundleID():void

	/** 获取BundleVersion。(就是APICloud云编译时IOS version code里面填的值。测试版因为不用填，默认是正式版上一次打包保留下的值，正式版打包就正对应你当时填的值。)*/ 
	getBundleVersion():void

	/** 获取app的完整信息。*/ 
	getAppInfo():void

}
interface iAd {
	/** 判断用户是否限制广告追踪*/ 
	adTrackingEnable():void

	/**
	 * `获取 IDFA`
	 * ========params==========
	 *
	 * `lowerCase` :boolean : （可选项）是否返回小写
	 */
	getIDFA(params:iAd_getIDFA_Params, callback?: (ret:JSON) => void):void

}
interface iAd_getIDFA_Params {
	/**（可选项）是否返回小写*/ 
	lowerCase?:boolean,

}

interface androidNfc {
}
interface multiScreen {
	/** 打开模块，在指定的显示器上显示网页和轮播图片*/ 
	open(callback?: (ret:JSON) => void):void

	/**
	 * `在指定的显示器的上显示内容`
	 * ========params==========
	 *
	 * `screenIndex` :number : 屏幕序号，主屏幕序号为0，其他屏幕序号依次递增。 双屏机器的副屏序号一般为1。
	 */
	show(params:multiScreen_show_Params, callback?: (ret:JSON) => void):void

	/**
	 * `隐藏指定显示器上显示的页面`
	 * ========params==========
	 *
	 * `screenIndex` :number : 屏幕序号，主屏幕序号为0，其他屏幕序号依次递增。 双屏机器的副屏序号一般为1。
	 */
	hide(params:multiScreen_hide_Params, callback?: (ret:JSON) => void):void

	/** 获取当前设备所有显示器的信息列表，返回的数组项的序号即为显示器序号。*/ 
	getScreenList(callback?: (ret:JSON) => void):void

	/**
	 * `调用指定显示器上显示的HTML中的js函数`
	 * ========params==========
	 *
	 * `screenIndex` :number : （可选项）屏幕序号，默认值为-1，表示最后一个屏幕，即双屏机器的副屏。
	 *
	 * `name` :string : 要调用的 js 函数名字
	 *
	 * `param` :JSON : （可选项）传递给要调用的 js 函数的参数
	 */
	invokeJsFunc(params:multiScreen_invokeJsFunc_Params, callback?: (ret:JSON) => void):void

}
interface multiScreen_show_Params {
	/**屏幕序号，主屏幕序号为0，其他屏幕序号依次递增。 双屏机器的副屏序号一般为1。*/ 
	screenIndex:number,

}

interface multiScreen_hide_Params {
	/**屏幕序号，主屏幕序号为0，其他屏幕序号依次递增。 双屏机器的副屏序号一般为1。*/ 
	screenIndex:number,

}

interface multiScreen_invokeJsFunc_Params {
	/**（可选项）屏幕序号，默认值为-1，表示最后一个屏幕，即双屏机器的副屏。*/ 
	screenIndex?:number,

	/**要调用的 js 函数名字*/ 
	name:string,

	/**（可选项）传递给要调用的 js 函数的参数*/ 
	param?:JSON,

}

interface gyro {
	/** 检查设备是否有陀螺仪*/ 
	checkUp(callback?: (ret:JSON) => void):void

	/**
	 * `打开重力感应`
	 * ========params==========
	 *
	 * `time` :string : （必选）采集信息间隔时间，以秒为单位。
	 */
	startListener(params:gyro_startListener_Params, callback?: (ret:JSON) => void):void

	/** 关闭重力感应*/ 
	stopListener():void

}
interface gyro_startListener_Params {
	/**（必选）采集信息间隔时间，以秒为单位。*/ 
	time:string,

}

interface socketServerClient {
	/**
	 * `开启服务`
	 * ========params==========
	 *
	 * `charset` :string : (可选)编码格式
	 *
	 * `port` :number : 端口号
	 *
	 * `heart` :JSON : 心跳设置
	 *
	 * `send` :JSON : (可选)发送包设置
	 *
	 * `receive` :JSON : (可选)接收包设置
	 *
	 * `single` :boolean : 以单例模式打开服务
	 */
	startServer(params:socketServerClient_startServer_Params, callback?: (ret:JSON) => void):void

	/** 停止服务*/ 
	stopServer():void

	/**
	 * `发送消息`
	 * ========params==========
	 *
	 * `id` :number : 客户端id
	 *
	 * `data` :string : 发送消息的数据
	 *
	 * `single` :boolean : 单例模式下操作
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	sendMessage(params:socketServerClient_sendMessage_Params):void

	/**
	 * `获取接收ip、端口号`
	 * ========params==========
	 *
	 * `single` :boolean : 单例模式下操作
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getAddress(params:socketServerClient_getAddress_Params):void

	/**
	 * `开启文件服务，返回链接地址，可通过返回地址下载文件`
	 * ========params==========
	 *
	 * `filePath` :string : 文件目录 支持fs目录以及绝对路径
	 *
	 * `port` :number : （可选）端口号
	 *
	 * `single` :boolean : 以单例模式开启服务
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	startHttpFileServer(params:socketServerClient_startHttpFileServer_Params):void

	/**
	 * `停止文件服务，关闭后不可通过http下载此设备文件`
	 * ========params==========
	 *
	 * `single` :boolean : 单例模式下操作
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	stopHttpFileServer(params:socketServerClient_stopHttpFileServer_Params):void

}
interface socketServerClient_startServer_Params {
	/**(可选)编码格式*/ 
	charset?:string,

	/**端口号*/ 
	port:number,

	/**心跳设置*/ 
	heart:JSON,

	/**(可选)发送包设置*/ 
	send?:JSON,

	/**(可选)接收包设置*/ 
	receive?:JSON,

	/**以单例模式打开服务*/ 
	single:boolean,

}

interface socketServerClient_sendMessage_Params {
	/**客户端id*/ 
	id:number,

	/**发送消息的数据*/ 
	data:string,

	/**单例模式下操作*/ 
	single:boolean,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface socketServerClient_getAddress_Params {
	/**单例模式下操作*/ 
	single:boolean,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface socketServerClient_startHttpFileServer_Params {
	/**文件目录 支持fs目录以及绝对路径*/ 
	filePath:string,

	/**（可选）端口号*/ 
	port?:number,

	/**以单例模式开启服务*/ 
	single:boolean,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface socketServerClient_stopHttpFileServer_Params {
	/**单例模式下操作*/ 
	single:boolean,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface accelerometerSensor {
}
interface simInfoImp {
	/**   获取当前手机号码*/ 
	getPhoneNumber():void

}
interface vibrate {
	/** Peek振动*/ 
	vibratePeek():void

	/** Pop振动*/ 
	vibratePop():void

	/** 三次连续振动*/ 
	vibrateThree():void

	/**
	 * `自定义时长振动模式`
	 * ========params==========
	 *
	 * `time` :number : （必填项）振动的总时长，到时间后停止振动。
	 */
	vibrateCustom(params:vibrate_vibrateCustom_Params, callback?: (ret:JSON) => void):void

	/** 停止振动*/ 
	stopVibrate():void

}
interface vibrate_vibrateCustom_Params {
	/**（必填项）振动的总时长，到时间后停止振动。*/ 
	time:number,

}

interface moduleElectronicScale {
	/** 开启通讯秤连接*/ 
	openSerialPort(callback?: (ret:JSON) => void):void

	/** 开启和通信秤通信*/ 
	startCommunication():void

	/** 获取计重商品的重量值*/ 
	getValues(callback?: (ret:JSON) => void):void

}
interface simpleBle {
	/** ios系统需要调用此方法初始化，android则不需要*/ 
	init():void

	/** 判断当前设备是否支持蓝牙功能*/ 
	isSupport():void

	/** 打开蓝牙*/ 
	open():void

	/** 关闭蓝牙*/ 
	close():void

	/** 判断蓝牙开关状态*/ 
	isOpen():void

	/** 打开蓝牙设置界面*/ 
	openBleSetting():void

	/** 蓝牙开关状态监听 **此接口只需要调用一次，后面状态改变回调会调用***/ 
	setStateListener():void

}
interface calendarMemo {
	/** 判断是否有访问提醒事项的权限*/ 
	remindersAuth(callback?: (ret:JSON) => void):void

}
interface easyNFC {
	/** 检测设备是否支持NFC*/ 
	isSupported():void

	/** 开始读NFC标签，等待NFC标签靠近手机，靠近手机后自动开始读取，读取信息完成后异步返回结果*/ 
	startRead(callback?: (ret:JSON) => void):void

	/**
	 * `开始写NFC标签，等待NFC标签靠近手机，靠近手机后自动开始写入，写入数据完成后异步返回结果`
	 * ========params==========
	 *
	 * `text` :string : 要写入NFC标签的文本，如“你好，NFC！”
	 */
	startWrite(params:easyNFC_startWrite_Params, callback?: (ret:JSON) => void):void

	/** 停止所有读写操作。调用该方法后，由startRead和startWrite初始的读写都将被停止，不再等待NFC标签靠近手机*/ 
	stop():void

}
interface easyNFC_startWrite_Params {
	/**要写入NFC标签的文本，如“你好，NFC！”*/ 
	text:string,

}

interface contact {
}
interface mobileNFC {
	/** 当前设备是否支持 NFC 功能*/ 
	available():void

	/** 添加识别结果的监听*/ 
	addEventListener():void

	/**
	 * `开始识别`
	 * ========params==========
	 *
	 * `title` :string : （可选项）验证弹框的提示语
	 *
	 * `multiple` :boolean : （可选项）是否支持多次自动识别
	 */
	begin(params:mobileNFC_begin_Params):void

	/** 停止识别*/ 
	invalidate():void

}
interface mobileNFC_begin_Params {
	/**（可选项）验证弹框的提示语*/ 
	title?:string,

	/**（可选项）是否支持多次自动识别*/ 
	multiple?:boolean,

}

interface sunmiT1Printer {
	/** 开启打印服务*/ 
	startService(callback?: (ret:JSON) => void):void

	/** 初始化打印机*/ 
	printerInit(callback?: (ret:JSON) => void):void

	/** 打印机自检*/ 
	printerSelfChecking(callback?: (ret:JSON) => void):void

	/**
	 * `设置打印数据并打印`
	 * ========params==========
	 *
	 * `data` :JSON : （必填项）打印数据
	 */
	printData(params:sunmiT1Printer_printData_Params, callback?: (ret:JSON) => void):void

	/** 走纸*/ 
	lineWrap(callback?: (ret:JSON) => void):void

	/** 停止打印服务*/ 
	stopService(callback?: (ret:JSON) => void):void

	/** 打开钱箱*/ 
	openMoney(callback?: (ret:JSON) => void):void

	/** 切纸*/ 
	cutPaper(callback?: (ret:JSON) => void):void

	/** 打开钱箱次数*/ 
	openMoneyCount(callback?: (ret:JSON) => void):void

	/** 获取USB设备信息*/ 
	openUSB(callback?: (ret:JSON) => void):void

	/** 获取品牌名*/ 
	openBrand(callback?: (ret:JSON) => void):void

	/** 注册广播(监听硬件拔插)*/ 
	openFilter(callback?: (ret:JSON) => void):void

	/** 解除广播*/ 
	closeFilter(callback?: (ret:JSON) => void):void

	/** 获取USB类型(支持同步和异步返回)*/ 
	Usb(callback?: (ret:JSON) => void):void

}
interface sunmiT1Printer_printData_Params {
	/**（必填项）打印数据*/ 
	data:JSON,

}

interface touchID {
	/** 当前设备是否支持指纹识别功能*/ 
	isValid():void

	/** 取消认证*/ 
	cancelVerify():void

	/** 弹出验证界面，验证用户指纹(android无UI界面)*/ 
	verify(callback?: (ret:JSON) => void):void

}
interface fvvSerialPort {
	/** 获取设备列表 - 异步*/ 
	getAllDeviceList():void

	/** 获取设备列表 - 同步*/ 
	getAllDeviceListSync():void

	/** 获取所有设备路径 - 异步*/ 
	getAllDevicePath():void

	/** 获取设备路径 - 同步*/ 
	getAllDevicePathSync():void

	/** 设置串口波特率，可不设置，默认9600*/ 
	setBaudRate():void

	/** 设置串口停止位，可不设置*/ 
	setStopBits():void

	/** 设置串口数据位，可不设置*/ 
	setDataBits():void

	/** 设置串口校验，可不设置*/ 
	setParity():void

	/** 设置串口流控，可不设置*/ 
	setFlowCon():void

	/** 打开串口*/ 
	open():void

	/** 关闭串口*/ 
	close():void

	/** 获取串口打开状态*/ 
	isOpen():void

	/** 发送消息*/ 
	send():void

	/** 设置接收消息类型*/ 
	setReceiveType():void

	/** 设置发送消息类型*/ 
	setSendType():void

}
interface cilicoScan {
	/** 扫码得到结果*/ 
	scan(callback?: (ret:JSON) => void):void

}
interface ble2 {
	/** 蓝牙是否可用，建议使用蓝牙其他功能前检查蓝牙可用性*/ 
	isBleEnable():void

	/** 打开蓝牙，当isBleEnable回调false时，可调用该接口打开蓝牙*/ 
	openBle():void

	/** 扫描附近蓝牙设备，扫描到相应蓝牙设备才可以进行connect等操作*/ 
	startScanBle(callback?: (ret:JSON) => void):void

	/** 停止扫描蓝牙设备*/ 
	stopScanBle():void

	/**
	 * `连接蓝牙设备，进行读写操作前调用该接口`
	 * ========params==========
	 *
	 * `name` :string : 要连接的蓝牙设备名称，来自startScanBle接口回调中的name参数
	 */
	connect(params:ble2_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `读取蓝牙设备数据`
	 * ========params==========
	 *
	 * `name` :string : 要读取蓝牙设备名称，要与已连接的蓝牙设备名称相同
	 */
	read(params:ble2_read_Params, callback?: (ret:JSON) => void):void

	/** 停止读取数据*/ 
	stopRead():void

	/**
	 * `向蓝牙设备写入数据，调用该接口之前，要先调用过read接口`
	 * ========params==========
	 *
	 * `name` :string : 要写入的蓝牙设备名称，要与已连接的蓝牙设备名称相同
	 *
	 * `write` :string : 要写入的数据
	 */
	write(params:ble2_write_Params):void

}
interface ble2_connect_Params {
	/**要连接的蓝牙设备名称，来自startScanBle接口回调中的name参数*/ 
	name:string,

}

interface ble2_read_Params {
	/**要读取蓝牙设备名称，要与已连接的蓝牙设备名称相同*/ 
	name:string,

}

interface ble2_write_Params {
	/**要写入的蓝牙设备名称，要与已连接的蓝牙设备名称相同*/ 
	name:string,

	/**要写入的数据*/ 
	write:string,

}

interface bleToken {
	/** 扫描蓝牙设备*/ 
	scan():void

	/**
	 * `连接蓝牙设备`
	 * ========params==========
	 *
	 * `deviceName` :string : 要连接的蓝牙设备名称
	 *
	 * `auth` :string : 要连接的蓝牙设备的授权码，默认为12345678
	 */
	connect(params:bleToken_connect_Params, callback?: (ret:JSON) => void):void

	/** 断开蓝牙设备连接*/ 
	disConnect():void

	/** 枚举应用*/ 
	enumApps():void

	/**
	 * `获取应用，进行以下操作前要先获取到应用`
	 * ========params==========
	 *
	 * `appName` :string : 应用名称
	 */
	getApp(params:bleToken_getApp_Params, callback?: (ret:JSON) => void):void

	/**
	 * `登录`
	 * ========params==========
	 *
	 * `password` :string : 登录密码
	 */
	login(params:bleToken_login_Params, callback?: (ret:JSON) => void):void

	/** 注销登录*/ 
	logout():void

	/** 创建容器，名称根据SDK的随机数接口生成一个32位的随机数（转换成16进制字符串）*/ 
	createContainer():void

	/**
	 * `生成密钥对，RSA加密模式`
	 * ========params==========
	 *
	 * `containerName` :string : 容器名称
	 */
	genKeyPair(params:bleToken_genKeyPair_Params, callback?: (ret:JSON) => void):void

	/** 枚举容器*/ 
	getContainers():void

	/**
	 * `导出公钥`
	 * ========params==========
	 *
	 * `containerName` :string : 容器名称
	 */
	exportPublicKeyBlob(params:bleToken_exportPublicKeyBlob_Params, callback?: (ret:JSON) => void):void

	/**
	 * `签名`
	 * ========params==========
	 *
	 * `containerName` :string : 容器名称
	 *
	 * `data` :string : 要签名的数据
	 */
	signatures(params:bleToken_signatures_Params, callback?: (ret:JSON) => void):void

	/** 获取蓝牙设备信息*/ 
	getDeviceInfo():void

}
interface bleToken_connect_Params {
	/**要连接的蓝牙设备名称*/ 
	deviceName:string,

	/**要连接的蓝牙设备的授权码，默认为12345678*/ 
	auth:string,

}

interface bleToken_getApp_Params {
	/**应用名称*/ 
	appName:string,

}

interface bleToken_login_Params {
	/**登录密码*/ 
	password:string,

}

interface bleToken_genKeyPair_Params {
	/**容器名称*/ 
	containerName:string,

}

interface bleToken_exportPublicKeyBlob_Params {
	/**容器名称*/ 
	containerName:string,

}

interface bleToken_signatures_Params {
	/**容器名称*/ 
	containerName:string,

	/**要签名的数据*/ 
	data:string,

}

interface smsrecords {
}
interface strongApp {
	/** 开启保活机制*/ 
	start(callback?: (ret:JSON) => void):void

}
interface smsListener {
	/** 注册短信监听*/ 
	registerSmsListener():void

	/** 注销短信监听*/ 
	unRegisterSmsListener():void

}
interface gyroscopeSensor {
}
interface appSettings {
	/** 检查 APP 是否开启了通知权限。（iPhone4s上没有允许通知的按钮，所以检测是否打开了通知权限一直是打开状态。）*/ 
	checkNotification():void

	/**
	 * `打开 APP 的设置页面`
	 * ========params==========
	 *
	 * `type` :string : **<span style="color:#FF0000;">由于 iOS7 及以下版本不支持打开 APP 的设置页面，而只能打开系统的设置页面，故此参数用来指定 iOS7 及以下版本打开哪一项系统设置页，默认打开系统通知中心设置页。 iOS8 及以上版本不受此参数影响。</span>**
	 */
	open(params:appSettings_open_Params, callback?: (ret:JSON) => void):void

}
interface appSettings_open_Params {
	/****<span style="color:#FF0000;">由于 iOS7 及以下版本不支持打开 APP 的设置页面，而只能打开系统的设置页面，故此参数用来指定 iOS7 及以下版本打开哪一项系统设置页，默认打开系统通知中心设置页。 iOS8 及以上版本不受此参数影响。</span>***/ 
	type:string,

}

interface broadcast {
	/**
	 * `发送广播`
	 * ========params==========
	 *
	 * `data` :JSON : 要发送的内容
	 *
	 * `target` :string : （可选）要发送给应用的包名
	 */
	send(params:broadcast_send_Params, callback?: (ret:JSON) => void):void

}
interface broadcast_send_Params {
	/**要发送的内容*/ 
	data:JSON,

	/**（可选）要发送给应用的包名*/ 
	target?:string,

}

interface torch {
	/** 打开手机筒*/ 
	openTorch():void

	/** 关闭手机筒*/ 
	closeTorch():void

}
interface altimeter {
	/** 判断当前设备是否支持气压计*/ 
	isSupported():void

	/** 开始获取海拔、气压值*/ 
	startRelativeAltitudeUpdates():void

}
interface sunmiPrinter {
	/** 开启打印服务*/ 
	startService(callback?: (ret:JSON) => void):void

	/** 初始化打印机*/ 
	printerInit(callback?: (ret:JSON) => void):void

	/** 打印机自检*/ 
	printerSelfChecking(callback?: (ret:JSON) => void):void

	/**
	 * `设置打印数据`
	 * ========params==========
	 *
	 * `data` :Array : （必输项）打印数据。
	 */
	printData(params:sunmiPrinter_printData_Params, callback?: (ret:JSON) => void):void

	/** 走纸行数*/ 
	lineWrap(callback?: (ret:JSON) => void):void

	/** 停止打印服务*/ 
	stopService(callback?: (ret:JSON) => void):void

	/** 双屏通信监听*/ 
	DSKernelListener():void

	/** 检查连接*/ 
	checkConnection():void

	/**
	 * `显示图片文件到副屏(多文件或者单文件,描述信息)`
	 * ========params==========
	 *
	 * `message` :string : （可选项）描述信息。
	 *
	 * `data` :Array : （必输项）这个是要显示的图片的本地路径信息。(支持：fs://)。
	 */
	sendDSKernelFile(params:sunmiPrinter_sendDSKernelFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示文字到副屏(标题，内容，二维码)`
	 * ========params==========
	 *
	 * `title` :string : （可选项）标题。
	 *
	 * `content` :string : （可选项）内容。
	 *
	 * `QRCodeImage` :string : （可选项）二维码图片文件路径(支持：fs://)。
	 */
	sendDSKernelText(params:sunmiPrinter_sendDSKernelText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `全屏结算清单（14寸屏）`
	 * ========params==========
	 *
	 * `data` :Array : （必填项）清单内容(具体字段请参考商米接口文档)。
	 */
	sendBalanceList(params:sunmiPrinter_sendBalanceList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `全屏含图片结算清单（14寸屏）`
	 * ========params==========
	 *
	 * `pics` :Array : （必填项）图片内容(支持fs://)。
	 */
	sendPicAndBalanceList(params:sunmiPrinter_sendPicAndBalanceList_Params, callback?: (ret:JSON) => void):void

}
interface sunmiPrinter_printData_Params {
	/**（必输项）打印数据。*/ 
	data:Array,

}

interface sunmiPrinter_sendDSKernelFile_Params {
	/**（可选项）描述信息。*/ 
	message?:string,

	/**（必输项）这个是要显示的图片的本地路径信息。(支持：fs://)。*/ 
	data:Array,

}

interface sunmiPrinter_sendDSKernelText_Params {
	/**（可选项）标题。*/ 
	title?:string,

	/**（可选项）内容。*/ 
	content?:string,

	/**（可选项）二维码图片文件路径(支持：fs://)。*/ 
	QRCodeImage?:string,

}

interface sunmiPrinter_sendBalanceList_Params {
	/**（必填项）清单内容(具体字段请参考商米接口文档)。*/ 
	data:Array,

}

interface sunmiPrinter_sendPicAndBalanceList_Params {
	/**（必填项）图片内容(支持fs://)。*/ 
	pics:Array,

}

interface clipBoard {
}
interface wifiMgr {
	/** 获取当前已连接的wifi的信息，由于ios的安全机制，ios只能获取ssid、bssid和ipAddr。对于Android 9.0及以上的版本，要想能够获取ssid(ssid就是wifi名字)必须进行以下2步操作。第一：必须打开手机的gps，目前手机只能手动打开gps，开发者可用代码打开手机设置中gps开关的界面引导用户打开gps，有关打开gps的功能请参考模块store中的gps模块。第二：在apicloud的"云编译"界面编译时注意给app设置"位置"权限(在"平台"两个字右边的安卓小机器人图片所在的方框内可以设置 位置权限)。Android9.0及以上除了ssid外的其他信息不需要打开gps就能获取。*/ 
	getCurWifiInfo():void

	/** 获取wifi开关当前状态*/ 
	getWifiState():void

	/** 打开wifi开关*/ 
	openWifi():void

	/** 关闭wifi*/ 
	closeWifi():void

	/** 打开手机自带“设置”界面*/ 
	toWifiSettingView():void

	/** 扫描获取附近的wifi列表，开发者可自行定时扫描获取，如间隔1秒扫描一次。*/ 
	scanWifis():void

	/** 获取已配置wifi列表。*/ 
	getConfiguredNetworks():void

	/** 连接指定的wifi。如果要连接的wifi是已配置过的(已保存有密码且密码正确，getConfiguredNetworks方法可获取)，则只需传入ssid，不需传入pwd和capabilities；如果要连接的wifi是没配置过的无密码保护类型的wifi，则只需传入ssid和capabilities，不需传入pwd。*/ 
	connect(callback?: (ret:JSON) => void):void

	/** 断开当前连接的wifi。*/ 
	disConnect():void

	/** 清除指定的wifi网络(清除密码)，要清除的wifi必须是已配置过的(getConfiguredNetworks方法可获取的)。当Android系统版本小于6.0时，该方法可以无条件(无条件是指相对于系统版本大于等于6.0的系统)清除指定的wifi网络(同样是已配置过的wifi);当Android系统版本大于等于6.0时，根据Google在Android6.0上的变动(官方文档说明https://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-network，如下文)， Android6.0及以上版本不能清除由非本应用创建的wifi连接，即本应用可以调用该方法清除由connect方法创建的wifi连接，由其他应用或用户在系统wifi设置界面手动连接的wifi，调用该方法都不能清除成功。*/ 
	removeNetwork(callback?: (ret:JSON) => void):void

	/** 禁用指定的wifi网络，要禁用的wifi必须是已配置过的(getConfiguredNetworks方法可获取)。*/ 
	disableNetwork(callback?: (ret:JSON) => void):void

	/** 获取指定wifi的密码，手机需要Root且调用该方法后应用请求获取root权限(弹框方式弹出)，用户同意获取root权限后方可获取密码。*/ 
	getWifiPassword(callback?: (ret:JSON) => void):void

	/** 获取当前网络类型，可用于判断当前手机网络是wifi还是手机流量。*/ 
	getConnectionType():void

	/** 监听wifi开关状态。调用该方法立即返回是否监听成功，即立即回调callback(ret)方法，当wifi开关状态变化时会回调onWifiStateChanged(state)方法，开发者需要自己实现onWifiStateChanged(state)方法。该方法需与removeWifiStateListener方法成对出现，在适当的时候移除监听，即有添加就有移除。*/ 
	addWifiStateListener():void

	/** 移除wifi开关状态的监听。调用addWifiStateListener方法后，需在适当的时候移除监听，即有添加就有移除。*/ 
	removeWifiStateListener():void

	/** 监听网络状态。调用该方法立即返回是否监听成功，即立即回调callback(ret)方法，当网络状态变化时会回调onNetChanged(state)方法，开发者需要自己实现onNetChanged(state)方法。该方法需与removeNetChangedListener方法成对出现，在适当的时候移除监听，即有添加就有移除。*/ 
	addNetChangedListener():void

	/** 移除网络状态的监听。调用addNetChangedListener方法后，需在适当的时候移除监听，即有添加就有移除。*/ 
	removeNetChangedListener():void

}
interface ScreenWake {
	/** 唤醒点亮屏幕。*/ 
	addScreenWake():void

}
interface spModule {
}
interface yunnex {
	/**
	 * `调用打印`
	 * ========params==========
	 *
	 * `content` :Array<JSON> : （必选项）按照从上到下打印次序，逐行插入打印数组
	 */
	openPrinter(params:yunnex_openPrinter_Params, callback?: (ret:JSON) => void):void

}
interface yunnex_openPrinter_Params {
	/**（必选项）按照从上到下打印次序，逐行插入打印数组*/ 
	content:Array<JSON>,

}

interface wifiProxy {
	/**
	 * `设置wifi代理`
	 * ========params==========
	 *
	 * `host` :string : （必填）代理服务器ip地址。
	 *
	 * `port` :number : （必填）代理服务器端口。
	 */
	setWifiProxy(params:wifiProxy_setWifiProxy_Params, callback?: (ret:JSON) => void):void

	/** 移除wifi代理设置*/ 
	removeWifiProxy():void

}
interface wifiProxy_setWifiProxy_Params {
	/**（必填）代理服务器ip地址。*/ 
	host:string,

	/**（必填）代理服务器端口。*/ 
	port:number,

}

interface lightSensor {
}
interface gpsState {
}
interface memoryInfo {
	/** 得到android的总内存大小信息*/ 
	getMemoryInfo(callback?: (ret:JSON) => void):void

	/** 得到手机RAM信息*/ 
	getRamInfo(callback?: (ret:JSON) => void):void

	/** 得到手机ROM信息*/ 
	getRomInfo(callback?: (ret:JSON) => void):void

	/** 得到手机SDCard信息*/ 
	getSdCardInfo(callback?: (ret:JSON) => void):void

}
interface contacts {
	/** 打开系统通讯录界面，选择单个联系人，返回已选的联系人信息*/ 
	select(callback?: (ret:JSON) => void):void

	/**
	 * `向通讯录添加一个联系人，所有参数不可同时为空。`
	 * ========params==========
	 *
	 * `groupId` :number : （可选项）分组 id，若不传则表示未分组
	 *
	 * `lastName` :string : （可选项）联系人姓氏
	 *
	 * `firstName` :string : （可选项）联系人名字
	 *
	 * `middleName` :string : （可选项）联系人中间名
	 *
	 * `prefix` :string : （可选项）联系人名称前缀
	 *
	 * `suffix` :string : （可选项）联系人名称后缀
	 *
	 * `phones` :Array : （可选项）联系人电话组成的数组
	 *
	 * `email` :string : （可选项）联系人邮箱
	 *
	 * `company` :string : （可选项）联系人公司
	 *
	 * `title` :string : （可选项）联系人职位
	 *
	 * `address` :JSON : （可选项）联系人地址
	 *
	 * `note` :string : （可选项）联系人备注
	 */
	add(params:contacts_add_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从通讯录删除一个或多个联系人`
	 * ========params==========
	 *
	 * `ids` :Array : 联系人的 id 组成的数组，若传入的 id 不存在，则忽略此id
	 */
	delete(params:contacts_delete_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据 id 更新通讯录的联系人信息`
	 * ========params==========
	 *
	 * `id` :number : 联系人 id
	 *
	 * `lastName` :string : （可选项）联系人的姓氏
	 *
	 * `firstName` :string : （可选项）联系人名字
	 *
	 * `middleName` :string : （可选项）联系人中间名
	 *
	 * `prefix` :string : （可选项）联系人名称前缀
	 *
	 * `suffix` :string : （可选项）联系人名称后缀
	 *
	 * `phones` :Array : （可选项）联系人电话组成的数组，**注意：若本参数不为空，则重置已存在的所有电话及其标签**
	 *
	 * `email` :string : （可选项）联系人邮箱
	 *
	 * `company` :string : （可选项）联系人公司
	 *
	 * `title` :string : （可选项）联系人职位
	 *
	 * `address` :JSON : （可选项）联系人地址
	 *
	 * `note` :string : （可选项）联系人备注
	 */
	update(params:contacts_update_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据 id 移动联系人至指定分组`
	 * ========params==========
	 *
	 * `id` :number : 联系人 id
	 *
	 * `groupId` :number : 联系人的分组 id；若分组不存在则不移动分组
	 */
	move(params:contacts_move_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据联系人 id 查找联系人`
	 * ========params==========
	 *
	 * `ids` :Array : 联系人 id 组成的数组，若 id 不存在则不处理
	 */
	query(params:contacts_query_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据关键字从通讯录查找联系人`
	 * ========params==========
	 *
	 * `keyword` :string : 要查询的关键字 **注意：仅搜索 lastName 和 firstName 包含的关键字**
	 */
	queryByKeyword(params:contacts_queryByKeyword_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据页码查找指定数量的联系人`
	 * ========params==========
	 *
	 * `count` :number : （可选项）每页联系人的数量，若不传则返回全部联系人，**不建议不传本参数**
	 *
	 * `pageIndex` :number : （可选项）联系人的分页索引
	 *
	 * `isSort` :number : （可选项）是否排序返回
	 */
	queryByPage(params:contacts_queryByPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建分组`
	 * ========params==========
	 *
	 * `groupName` :string : 分组名
	 */
	createGroup(params:contacts_createGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除分组，只删除分组，不删除其中的联系人`
	 * ========params==========
	 *
	 * `groupId` :number : 分组 id
	 */
	deleteGroup(params:contacts_deleteGroup_Params, callback?: (ret:JSON) => void):void

	/** 获取所有分组信息*/ 
	queryGroups(callback?: (ret:JSON) => void):void

	/**
	 * `根据分组 id 查找联系人`
	 * ========params==========
	 *
	 * `groupId` :number : （可选项）要查找的分组 id
	 */
	queryByGroupId(params:contacts_queryByGroupId_Params, callback?: (ret:JSON) => void):void

	/** **注意:该接口仅适用于 iOS9 以上系统，iOS9 以下及 android 系统请使用 queryByPage 接口***/ 
	allContacts(callback?: (ret:JSON) => void):void

}
interface contacts_add_Params {
	/**（可选项）分组 id，若不传则表示未分组*/ 
	groupId?:number,

	/**（可选项）联系人姓氏*/ 
	lastName?:string,

	/**（可选项）联系人名字*/ 
	firstName?:string,

	/**（可选项）联系人中间名*/ 
	middleName?:string,

	/**（可选项）联系人名称前缀*/ 
	prefix?:string,

	/**（可选项）联系人名称后缀*/ 
	suffix?:string,

	/**（可选项）联系人电话组成的数组*/ 
	phones?:Array,

	/**（可选项）联系人邮箱*/ 
	email?:string,

	/**（可选项）联系人公司*/ 
	company?:string,

	/**（可选项）联系人职位*/ 
	title?:string,

	/**（可选项）联系人地址*/ 
	address?:JSON,

	/**（可选项）联系人备注*/ 
	note?:string,

}

interface contacts_delete_Params {
	/**联系人的 id 组成的数组，若传入的 id 不存在，则忽略此id*/ 
	ids:Array,

}

interface contacts_update_Params {
	/**联系人 id*/ 
	id:number,

	/**（可选项）联系人的姓氏*/ 
	lastName?:string,

	/**（可选项）联系人名字*/ 
	firstName?:string,

	/**（可选项）联系人中间名*/ 
	middleName?:string,

	/**（可选项）联系人名称前缀*/ 
	prefix?:string,

	/**（可选项）联系人名称后缀*/ 
	suffix?:string,

	/**（可选项）联系人电话组成的数组，**注意：若本参数不为空，则重置已存在的所有电话及其标签***/ 
	phones?:Array,

	/**（可选项）联系人邮箱*/ 
	email?:string,

	/**（可选项）联系人公司*/ 
	company?:string,

	/**（可选项）联系人职位*/ 
	title?:string,

	/**（可选项）联系人地址*/ 
	address?:JSON,

	/**（可选项）联系人备注*/ 
	note?:string,

}

interface contacts_move_Params {
	/**联系人 id*/ 
	id:number,

	/**联系人的分组 id；若分组不存在则不移动分组*/ 
	groupId:number,

}

interface contacts_query_Params {
	/**联系人 id 组成的数组，若 id 不存在则不处理*/ 
	ids:Array,

}

interface contacts_queryByKeyword_Params {
	/**要查询的关键字 **注意：仅搜索 lastName 和 firstName 包含的关键字***/ 
	keyword:string,

}

interface contacts_queryByPage_Params {
	/**（可选项）每页联系人的数量，若不传则返回全部联系人，**不建议不传本参数***/ 
	count?:number,

	/**（可选项）联系人的分页索引*/ 
	pageIndex?:number,

	/**（可选项）是否排序返回*/ 
	isSort?:number,

}

interface contacts_createGroup_Params {
	/**分组名*/ 
	groupName:string,

}

interface contacts_deleteGroup_Params {
	/**分组 id*/ 
	groupId:number,

}

interface contacts_queryByGroupId_Params {
	/**（可选项）要查找的分组 id*/ 
	groupId?:number,

}

interface nfc {
	/** 判断设备是否支持NFC(iOS请在初始化之前进行验证)*/ 
	readingAvailable(callback?: (ret:JSON) => void):void

	/** 识别结果监听(Android模式设置此参数可以达到整个App内拦截，不会弹出手机类其他应用)*/ 
	addEventListener():void

	/** 移除NFC数据监听*/ 
	removeEventListener():void

	/**
	 * `配置读写标签界面UI元素（不执行本接口则选用模块默认UI布局方案）`
	 * ========params==========
	 *
	 * `isDebug` :boolean : 开启调试模式时，不支持nfc的手机可以打开界面看UI效果。
	 *
	 * `backgroundColor` :string : 页面背景色
	 *
	 * `title` :JSON : 顶部标题样式配置
	 *
	 * `center` :JSON : 页面中间提示内容样式配置
	 */
	initPageConfig(params:nfc_initPageConfig_Params, callback?: (ret:JSON) => void):void

	/**
	 * `写NFC标签文本数据`
	 * ========params==========
	 *
	 * `data` :string : （必填项）要写入NFC的字符串内容。
	 */
	writeText(params:nfc_writeText_Params, callback?: (ret:JSON) => void):void

	/** 读NFC标签文本数据*/ 
	readText(callback?: (ret:JSON) => void):void

	/**
	 * `开始扫描`
	 * ========params==========
	 *
	 * `alertMessage` :string : （可选项）识别时提示信息内容。
	 *
	 * `isOnlyFirst` :boolean : （可选项）是否仅解析一次 (单次:true 多次:false)[设置为true时，请参考监听返回错误代码204对逻辑进行处理]。
	 *
	 * `isParseContent` :boolean : （可选项）是否自动解析结果 (解析:true 不解析:false)。
	 */
	startSession(params:nfc_startSession_Params, callback?: (ret:JSON) => void):void

	/** 结束扫描*/ 
	endSession(callback?: (ret:JSON) => void):void

}
interface nfc_initPageConfig_Params {
	/**开启调试模式时，不支持nfc的手机可以打开界面看UI效果。*/ 
	isDebug:boolean,

	/**页面背景色*/ 
	backgroundColor:string,

	/**顶部标题样式配置*/ 
	title:JSON,

	/**页面中间提示内容样式配置*/ 
	center:JSON,

}

interface nfc_writeText_Params {
	/**（必填项）要写入NFC的字符串内容。*/ 
	data:string,

}

interface nfc_startSession_Params {
	/**（可选项）识别时提示信息内容。*/ 
	alertMessage?:string,

	/**（可选项）是否仅解析一次 (单次:true 多次:false)[设置为true时，请参考监听返回错误代码204对逻辑进行处理]。*/ 
	isOnlyFirst?:boolean,

	/**（可选项）是否自动解析结果 (解析:true 不解析:false)。*/ 
	isParseContent?:boolean,

}

interface mediaScanner {
}
interface ble {
	/** 判断是否有访问蓝牙的权限*/ 
	sysAuth(callback?: (ret:JSON) => void):void

	/** 初始化蓝牙4.0管理器*/ 
	initManager():void

	/**
	 * `开始搜索蓝牙4.0设备，模块内部会不断的扫描更新附近的蓝牙4.0设备信息，可通过 getPeripheral 接口来获取扫描到的设备信息。若要停止扫描则调用 stopScan 接口`
	 * ========params==========
	 *
	 * `serviceUUIDs` :Array : （可选项）要扫描的蓝牙4.0设备的服务（service）的 UUID（字符串） 组成的数组，若不传则扫描附近的所有支持蓝牙4.0的设备
	 *
	 * `clean` :boolean : （可选项）扫描前是否清空已搜索到的记录在本地的外围设备信息
	 */
	scan(params:ble_scan_Params, callback?: (ret:JSON) => void):void

	/** 获取当前扫描到的所有外围设备信息*/ 
	getPeripheral():void

	/**
	 * `获取当前扫描到的所有外围设备的 rssi`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 要获取rssi值的外围设备的 UUID
	 */
	getPeripheralRssi(params:ble_getPeripheralRssi_Params, callback?: (ret:JSON) => void):void

	/** 判断是否正在扫描*/ 
	isScanning():void

	/** 停止搜索附近的蓝牙设备*/ 
	stopScan():void

	/**
	 * `连接指定外围设备。iOS端无超时判断，android端默认有30秒超时判断`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 要连接的外围设备的 UUID
	 */
	connect(params:ble_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `断开与指定外围设备的连接`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 要断开连接的外围设备的 UUID
	 */
	disconnect(params:ble_disconnect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断与指定外围设备是否为连接状态`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 指定外围设备的 UUID
	 */
	isConnected(params:ble_isConnected_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据 UUID 找到所有匹配的蓝牙外围设备信息**Android 平台暂不支持本接口**`
	 * ========params==========
	 *
	 * `peripheralUUIDs` :string : 指定的蓝牙外围设备的 UUID 组成的数组
	 */
	retrievePeripheral(params:ble_retrievePeripheral_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据指定的服务，找到当前系统处于连接状态的蓝牙中包含这个服务的所有蓝牙外围设备信息**Andaroid 平台暂不支持本接口**`
	 * ========params==========
	 *
	 * `serviceUUIDs` :Array : 指定的蓝牙4.0设备的服务（service）的 UUID（字符串） 组成的数组
	 */
	retrieveConnectedPeripheral(params:ble_retrieveConnectedPeripheral_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据指定的外围设备 UUID 获取该外围设备的所有服务`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 指定的蓝牙外围设备的 UUID
	 */
	discoverService(params:ble_discoverService_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据指定的外围设备 UUID 及其服务 UUID 获取该外围设备的所有特征（Characteristic）`
	 * ========params==========
	 *
	 * `serviceUUID` :string : 指定的服务的 UUID
	 *
	 * `peripheralUUID` :string : 指定的蓝牙外围设备的 UUID
	 */
	discoverCharacteristics(params:ble_discoverCharacteristics_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据指定的外围设备 UUID 及其服务 UUID 和特征 UUID 获取该外围设备的所有描述符（Descriptor）`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 指定的蓝牙外围设备的 UUID
	 *
	 * `serviceUUID` :string : 指定的服务的 UUID
	 *
	 * `characteristicUUID` :string : 指定的特征的 UUID
	 */
	discoverDescriptorsForCharacteristic(params:ble_discoverDescriptorsForCharacteristic_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据指定的外围设备 UUID 及其服务 UUID 和特征 UUID 监听数据回发`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 指定的蓝牙外围设备的 UUID
	 *
	 * `serviceUUID` :string : 指定的服务的 UUID
	 *
	 * `characteristicUUID` :string : 指定的特征的 UUID
	 */
	setNotify(params:ble_setNotify_Params, callback?: (ret:JSON) => void):void

	/** 停止监听数据。调用setNotify接口后开始监听数据，不需要继续监听时调用disconnect断开链接，在iOS 平台上还需要调用此接口来停止监听。*/ 
	stopNotify():void

	/**
	 * `根据指定的外围设备 UUID 及其服务 UUID 和特征 UUID 读取数据`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 指定的蓝牙外围设备的 UUID
	 *
	 * `serviceUUID` :string : 指定的服务的 UUID
	 *
	 * `characteristicUUID` :string : 指定的特征的 UUID
	 */
	readValueForCharacteristic(params:ble_readValueForCharacteristic_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据指定的外围设备 UUID 及其服务 UUID 和特征 UUID 及其描述符获取数据`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 指定的蓝牙外围设备的 UUID
	 *
	 * `serviceUUID` :string : 指定的服务的 UUID
	 *
	 * `characteristicUUID` :string : 指定的特征的 UUID
	 *
	 * `descriptorUUID` :string : 指定的描述符的 UUID
	 */
	readValueForDescriptor(params:ble_readValueForDescriptor_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据指定的外围设备 UUID 及其服务 UUID 和特征 UUID 写数据`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 指定的蓝牙外围设备的 UUID
	 *
	 * `serviceUUID` :string : 指定的服务的 UUID
	 *
	 * `characteristicUUID` :string : 指定的特征的 UUID
	 *
	 * `value` :string : 要写入的数据 ，十六进制的字符串
	 *
	 * `writeType` :string : （可选项）写入数据时的类型
	 */
	writeValueForCharacteristic(params:ble_writeValueForCharacteristic_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据指定的外围设备 UUID 及其服务 UUID 和特征 UUID 及其描述符发送数据`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 指定的蓝牙外围设备的 UUID
	 *
	 * `serviceUUID` :string : 指定的服务的 UUID
	 *
	 * `characteristicUUID` :string : 指定的特征的 UUID
	 *
	 * `descriptorUUID` :string : 指定的描述符的 UUID
	 *
	 * `value` :string : 要发送的数据，十六进制的字符串
	 */
	writeValueForDescriptor(params:ble_writeValueForDescriptor_Params, callback?: (ret:JSON) => void):void

	/**
	 * `连接多台外围设备`
	 * ========params==========
	 *
	 * `peripheralUUIDs` :Array : 要连接的外围设备的 UUID 字符串组成的数组
	 */
	connectPeripherals(params:ble_connectPeripherals_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据指定的外围设备 UUID 及其服务 UUID 和特征 UUID 监听数据`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 指定的蓝牙外围设备的 UUID
	 *
	 * `serviceUUID` :string : 指定的服务的 UUID
	 *
	 * `characteristicUUID` :string : 指定的特征的 UUID
	 */
	setSimpleNotify(params:ble_setSimpleNotify_Params, callback?: (ret:JSON) => void):void

	/** 获取模块当前缓存的所监听蓝牙设备的所有数据*/ 
	getAllSimpleNotifyData():void

	/** 清空模块当前缓存的所监听蓝牙设备的所有数据*/ 
	clearAllSimpleNotifyData():void

	/** 清空已搜索到的记录在本地的外围设备信息。建议在没有连接的情况下调用，否则与外围设备相关的一系列接口均会失效*/ 
	clean():void

	/** 打开蓝牙*/ 
	openBluetooth():void

}
interface ble_scan_Params {
	/**（可选项）要扫描的蓝牙4.0设备的服务（service）的 UUID（字符串） 组成的数组，若不传则扫描附近的所有支持蓝牙4.0的设备*/ 
	serviceUUIDs?:Array,

	/**（可选项）扫描前是否清空已搜索到的记录在本地的外围设备信息*/ 
	clean?:boolean,

}

interface ble_getPeripheralRssi_Params {
	/**要获取rssi值的外围设备的 UUID*/ 
	peripheralUUID:string,

}

interface ble_connect_Params {
	/**要连接的外围设备的 UUID*/ 
	peripheralUUID:string,

}

interface ble_disconnect_Params {
	/**要断开连接的外围设备的 UUID*/ 
	peripheralUUID:string,

}

interface ble_isConnected_Params {
	/**指定外围设备的 UUID*/ 
	peripheralUUID:string,

}

interface ble_retrievePeripheral_Params {
	/**指定的蓝牙外围设备的 UUID 组成的数组*/ 
	peripheralUUIDs:string,

}

interface ble_retrieveConnectedPeripheral_Params {
	/**指定的蓝牙4.0设备的服务（service）的 UUID（字符串） 组成的数组*/ 
	serviceUUIDs:Array,

}

interface ble_discoverService_Params {
	/**指定的蓝牙外围设备的 UUID*/ 
	peripheralUUID:string,

}

interface ble_discoverCharacteristics_Params {
	/**指定的服务的 UUID*/ 
	serviceUUID:string,

	/**指定的蓝牙外围设备的 UUID*/ 
	peripheralUUID:string,

}

interface ble_discoverDescriptorsForCharacteristic_Params {
	/**指定的蓝牙外围设备的 UUID*/ 
	peripheralUUID:string,

	/**指定的服务的 UUID*/ 
	serviceUUID:string,

	/**指定的特征的 UUID*/ 
	characteristicUUID:string,

}

interface ble_setNotify_Params {
	/**指定的蓝牙外围设备的 UUID*/ 
	peripheralUUID:string,

	/**指定的服务的 UUID*/ 
	serviceUUID:string,

	/**指定的特征的 UUID*/ 
	characteristicUUID:string,

}

interface ble_readValueForCharacteristic_Params {
	/**指定的蓝牙外围设备的 UUID*/ 
	peripheralUUID:string,

	/**指定的服务的 UUID*/ 
	serviceUUID:string,

	/**指定的特征的 UUID*/ 
	characteristicUUID:string,

}

interface ble_readValueForDescriptor_Params {
	/**指定的蓝牙外围设备的 UUID*/ 
	peripheralUUID:string,

	/**指定的服务的 UUID*/ 
	serviceUUID:string,

	/**指定的特征的 UUID*/ 
	characteristicUUID:string,

	/**指定的描述符的 UUID*/ 
	descriptorUUID:string,

}

interface ble_writeValueForCharacteristic_Params {
	/**指定的蓝牙外围设备的 UUID*/ 
	peripheralUUID:string,

	/**指定的服务的 UUID*/ 
	serviceUUID:string,

	/**指定的特征的 UUID*/ 
	characteristicUUID:string,

	/**要写入的数据 ，十六进制的字符串*/ 
	value:string,

	/**（可选项）写入数据时的类型*/ 
	writeType?:string,

}

interface ble_writeValueForDescriptor_Params {
	/**指定的蓝牙外围设备的 UUID*/ 
	peripheralUUID:string,

	/**指定的服务的 UUID*/ 
	serviceUUID:string,

	/**指定的特征的 UUID*/ 
	characteristicUUID:string,

	/**指定的描述符的 UUID*/ 
	descriptorUUID:string,

	/**要发送的数据，十六进制的字符串*/ 
	value:string,

}

interface ble_connectPeripherals_Params {
	/**要连接的外围设备的 UUID 字符串组成的数组*/ 
	peripheralUUIDs:Array,

}

interface ble_setSimpleNotify_Params {
	/**指定的蓝牙外围设备的 UUID*/ 
	peripheralUUID:string,

	/**指定的服务的 UUID*/ 
	serviceUUID:string,

	/**指定的特征的 UUID*/ 
	characteristicUUID:string,

}

interface deviceInfo {
	/** 得到系统版本*/ 
	getRelease(callback?: (ret:JSON) => void):void

	/** 得到设备品牌*/ 
	getBrand(callback?: (ret:JSON) => void):void

	/** 得到手机型号*/ 
	getModel(callback?: (ret:JSON) => void):void

	/** 得到设备版本号*/ 
	getId(callback?: (ret:JSON) => void):void

	/** 得到设备显示版本包*/ 
	getDisplay(callback?: (ret:JSON) => void):void

	/** 得到产品名称*/ 
	getProduct(callback?: (ret:JSON) => void):void

	/** 得到设备制造商*/ 
	getManufacturer(callback?: (ret:JSON) => void):void

	/** 得到设备驱动名称*/ 
	getDevice(callback?: (ret:JSON) => void):void

	/** 得到设备硬件名称*/ 
	getHardware(callback?: (ret:JSON) => void):void

	/** 得到设备唯一标识*/ 
	getFingerprint(callback?: (ret:JSON) => void):void

	/** 得到串口序列号*/ 
	getSerial(callback?: (ret:JSON) => void):void

	/** 得到设备版本类型*/ 
	getType(callback?: (ret:JSON) => void):void

	/** 得到设备标签*/ 
	getTags(callback?: (ret:JSON) => void):void

	/** 得到设备主机地址*/ 
	getHost(callback?: (ret:JSON) => void):void

	/** 得到设备用户名*/ 
	getUser(callback?: (ret:JSON) => void):void

	/** 得到固件开发版本代号*/ 
	getCodename(callback?: (ret:JSON) => void):void

	/** 得到源码控制版本号*/ 
	getIncremental(callback?: (ret:JSON) => void):void

	/** 得到设备基板名称*/ 
	getBoard(callback?: (ret:JSON) => void):void

	/** 得到设备引导程序版本号*/ 
	getBootloader(callback?: (ret:JSON) => void):void

	/** 得到Build时间*/ 
	getTime(callback?: (ret:JSON) => void):void

	/** 得到系统的API级别*/ 
	getSdkInt(callback?: (ret:JSON) => void):void

}
interface playText {
	/**
	 * `播放文本`
	 * ========params==========
	 *
	 * `text` :string : 语音播放内容文本。
	 *
	 * `rate` :number : 播放速率
	 */
	play(params:playText_play_Params):void

	/** 继续播放文本*/ 
	continuePlay():void

	/** 停止播放*/ 
	stopPlay():void

	/** 暂停播放文本*/ 
	pausePlay():void

	/** 获取播放状态*/ 
	playState(callback?: (ret:JSON) => void):void

	/**
	 * `监听事件`
	 * ========params==========
	 *
	 * `name` :string : 事件名称。
	 */
	addEventListener(params:playText_addEventListener_Params, callback?: (ret:JSON) => void):void

}
interface playText_play_Params {
	/**语音播放内容文本。*/ 
	text:string,

	/**播放速率*/ 
	rate:number,

}

interface playText_addEventListener_Params {
	/**事件名称。*/ 
	name:string,

}

interface xwScanner {
	/** 打开自带UI扫码功能*/ 
	openScanner(callback?: (ret:JSON) => void):void

}
interface mySettingInfo {
	/**
	 * `启动系统常用的设置页面的接口`
	 * ========params==========
	 *
	 * `index` :number : （可选项）要获取的应用类型，值大于14的只有Android有效
	 */
	settingInt(params:mySettingInfo_settingInt_Params):void

}
interface mySettingInfo_settingInt_Params {
	/**（可选项）要获取的应用类型，值大于14的只有Android有效*/ 
	index?:number,

}

interface vibration {
	/**
	 * `振动`
	 * ========params==========
	 *
	 * `time` :number : 数字的单位是毫秒，表示振动的时间
	 */
	vibrate(params:vibration_vibrate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `连续振动`
	 * ========params==========
	 *
	 * `time` :Array : 数字的单位是毫秒，表示打开或关闭振动器的一系列时间长度
	 *
	 * `times` :number : 重复模式的索引
	 */
	vibrates(params:vibration_vibrates_Params, callback?: (ret:JSON) => void):void

	/** 取消振动*/ 
	cancel():void

}
interface vibration_vibrate_Params {
	/**数字的单位是毫秒，表示振动的时间*/ 
	time:number,

}

interface vibration_vibrates_Params {
	/**数字的单位是毫秒，表示打开或关闭振动器的一系列时间长度*/ 
	time:Array,

	/**重复模式的索引*/ 
	times:number,

}

interface FNSettings {
	/**
	 * `设置屏幕旋转模式`
	 * ========params==========
	 *
	 * `mode` :string : （可选项）屏幕旋转模式
	 */
	setScreenRotationMode(params:FNSettings_setScreenRotationMode_Params):void

	/** 获取屏幕旋转模式*/ 
	getScreenRotationMode():void

	/**
	 * `设置屏幕亮度模式`
	 * ========params==========
	 *
	 * `mode` :string : （可选项）屏幕亮度模式
	 */
	setScreenBrightnessMode(params:FNSettings_setScreenBrightnessMode_Params):void

	/** 获取屏幕亮度模式*/ 
	getScreenBrightnessMode():void

}
interface FNSettings_setScreenRotationMode_Params {
	/**（可选项）屏幕旋转模式*/ 
	mode?:string,

}

interface FNSettings_setScreenBrightnessMode_Params {
	/**（可选项）屏幕亮度模式*/ 
	mode?:string,

}

interface moduleSMSListening {
	/** 获取所有联系人方法。返回json数组数据。*/ 
	getCon():void

	/** 查询历史短信，返回json数组。*/ 
	getMsg():void

	/** 启动短信监听程序，启动后新收到的短信回自动获取并返回。获取短信后自动停止监听，如需要再次监听需要再次调用此方法。如一只为收到短信，则系统会自动回收，无需手动关闭监听程序。备注：由于目前手机具有短信验证码保护功能，可导致无法获取新收到的短信验证码*/ 
	startListening():void

}
interface blePrintHaier {
	/** 初始化蓝牙4.0管理器*/ 
	initManager():void

	/**
	 * `开始搜索蓝牙4.0设备，模块内部会不断的扫描更新附近的蓝牙4.0设备信息，可通过 getPeripheral 接口来获取扫描到的设备信息。若要停止扫描则调用 stopScan 接口`
	 * ========params==========
	 *
	 * `serviceUUIDs` :Array : （可选项）要扫描的蓝牙4.0设备的服务（service）的 UUID（字符串） 组成的数组，若不传则扫描附近的所有支持蓝牙4.0的设备
	 *
	 * `clean` :boolean : （可选项）扫描前是否清空已搜索到的记录在本地的外围设备信息
	 */
	scan(params:blePrintHaier_scan_Params, callback?: (ret:JSON) => void):void

	/** 获取当前扫描到的所有外围设备信息*/ 
	getPeripheral():void

	/** 判断是否正在扫描*/ 
	isScanning():void

	/**
	 * `连接指定外围设备。iOS端无超时判断，android端默认有30秒超时判断`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 要连接的外围设备的 UUID
	 */
	connect(params:blePrintHaier_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `断开与指定外围设备的连接`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 要断开连接的外围设备的 UUID
	 */
	disconnect(params:blePrintHaier_disconnect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断与指定外围设备是否为连接状态`
	 * ========params==========
	 *
	 * `peripheralUUID` :string : 描述：指定外围设备的 UUID。
	 */
	isConnected(params:blePrintHaier_isConnected_Params, callback?: (ret:JSON) => void):void

}
interface blePrintHaier_scan_Params {
	/**（可选项）要扫描的蓝牙4.0设备的服务（service）的 UUID（字符串） 组成的数组，若不传则扫描附近的所有支持蓝牙4.0的设备*/ 
	serviceUUIDs?:Array,

	/**（可选项）扫描前是否清空已搜索到的记录在本地的外围设备信息*/ 
	clean?:boolean,

}

interface blePrintHaier_connect_Params {
	/**要连接的外围设备的 UUID*/ 
	peripheralUUID:string,

}

interface blePrintHaier_disconnect_Params {
	/**要断开连接的外围设备的 UUID*/ 
	peripheralUUID:string,

}

interface blePrintHaier_isConnected_Params {
	/**描述：指定外围设备的 UUID。*/ 
	peripheralUUID:string,

}

interface aIMEI {
	/** 获取IMEI。*/ 
	getIMEI():void

	/** 是否有权限。*/ 
	hasPermission():void

}
interface isSimulator {
	/** 判断当前设备是否是虚拟设备*/ 
	isSimulator():void

}
interface brightness2016 {
	/**
	 * `设置系统屏幕亮度。`
	 * ========params==========
	 *
	 * `brightness` :number : 表示亮度，取值范围：0--255 暗->亮
	 */
	setBrightness(params:brightness2016_setBrightness_Params):void

	/** 获取系统屏幕亮度。*/ 
	getBrightness(callback?: (ret:JSON) => void):void

	/**
	 * `设置当前App屏幕亮度。`
	 * ========params==========
	 *
	 * `brightness` :number : 表示亮度，取值范围：0--255 暗->亮
	 */
	setAppBrightness(params:brightness2016_setAppBrightness_Params):void

}
interface brightness2016_setBrightness_Params {
	/**表示亮度，取值范围：0--255 暗->亮*/ 
	brightness:number,

}

interface brightness2016_setAppBrightness_Params {
	/**表示亮度，取值范围：0--255 暗->亮*/ 
	brightness:number,

}

interface bgnWiFi {
	/**
	 * `添加一个WiFi网络`
	 * ========params==========
	 *
	 * `ssid` :string : （必填项）网络SSID值。
	 *
	 * `password` :string : （可选项）密码。
	 *
	 * `type` :string : （可选项）网络类型值。选项范围【WEP、PSK、EAP】
	 */
	addNetwork(params:bgnWiFi_addNetwork_Params, callback?: (ret:JSON) => void):void

	/**
	 * `连接一个WiFi网络`
	 * ========params==========
	 *
	 * `ssid` :string : （必填项）网络SSID值。
	 */
	connect(params:bgnWiFi_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `断开当前WiFi网络连接`
	 * ========params==========
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	disconnect(params:bgnWiFi_disconnect_Params):void

	/** 返回当前保存的所有wifi网络的密码，**该功需要具有root权限***/ 
	getPassword(callback?: (ret:JSON) => void):void

	/** 获取当前连接wifi网络的信息*/ 
	getWifiInfo(callback?: (ret:JSON) => void):void

	/**
	 * `判断当前wifi是否连接成功的`
	 * ========params==========
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	isConnected(params:bgnWiFi_isConnected_Params):void

	/**
	 * `获取WiFi打开状态`
	 * ========params==========
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	isWifiEnabled(params:bgnWiFi_isWifiEnabled_Params):void

	/**
	 * `删除指定wifi网络`
	 * ========params==========
	 *
	 * `ssid` :string : （必填项）网络SSID值。
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	removeNetwork(params:bgnWiFi_removeNetwork_Params):void

	/**
	 * `设置WiFi状态 enabled为true表示打开WiFi,false表示关闭WiFi`
	 * ========params==========
	 *
	 * `enabled` :boolean : （必填项）true||false。
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	setWifiEnabled(params:bgnWiFi_setWifiEnabled_Params):void

	/**
	 * `开始扫描附近WiFi热点`
	 * ========params==========
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	startScan(params:bgnWiFi_startScan_Params):void

}
interface bgnWiFi_addNetwork_Params {
	/**（必填项）网络SSID值。*/ 
	ssid:string,

	/**（可选项）密码。*/ 
	password?:string,

	/**（可选项）网络类型值。选项范围【WEP、PSK、EAP】*/ 
	type?:string,

}

interface bgnWiFi_connect_Params {
	/**（必填项）网络SSID值。*/ 
	ssid:string,

}

interface bgnWiFi_disconnect_Params {
	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface bgnWiFi_isConnected_Params {
	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface bgnWiFi_isWifiEnabled_Params {
	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface bgnWiFi_removeNetwork_Params {
	/**（必填项）网络SSID值。*/ 
	ssid:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface bgnWiFi_setWifiEnabled_Params {
	/**（必填项）true||false。*/ 
	enabled:boolean,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface bgnWiFi_startScan_Params {
	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface cpuInfo {
	/** 得到CPU汇总信息*/ 
	getCpuInfo(callback?: (ret:JSON) => void):void

	/** 得到CPU最大频率（KHZ）*/ 
	getCpuMaxFreq(callback?: (ret:JSON) => void):void

	/** 得到CPU最小频率（KHZ）*/ 
	getMinFreq(callback?: (ret:JSON) => void):void

	/** 得到CPU当前频率（KHZ）*/ 
	getCurrentFreq(callback?: (ret:JSON) => void):void

}
interface shareBySystem {
	/**
	 * `分享文本或链接`
	 * ========params==========
	 *
	 * `text` :string : （必填项）需要分享的文本或链接
	 *
	 * `paths` :string : ： （必填项）需要分享的图片,支持widget://,fs://,cache://协议及远程图片地址
	 *
	 * `filename` :string : ： （可选项）若path地址为远程地址，可通过此参数设置文件的别名，注意：别名并不会更改远程网络文件的文件后缀
	 *
	 * `path` :string : ： （必填项）需要分享的图片,支持widget://,fs://,cache://协议及远程图片地址
	 *
	 * `filename` :string : ： （可选项）若path地址为远程地址，可通过此参数设置文件的别名，注意：别名并不会更改远程网络文件的文件后缀
	 *
	 * `path` :string : ： （必填项）需要分享的图片,支持widget://,fs://,cache://协议及远程图片地址
	 */
	openShareText(params:shareBySystem_openShareText_Params, callback?: (ret:JSON) => void):void

}
interface shareBySystem_openShareText_Params {
	/**（必填项）需要分享的文本或链接*/ 
	text:string,

	/**： （必填项）需要分享的图片,支持widget://,fs://,cache://协议及远程图片地址*/ 
	paths:string,

	/**： （可选项）若path地址为远程地址，可通过此参数设置文件的别名，注意：别名并不会更改远程网络文件的文件后缀*/ 
	filename?:string,

	/**： （必填项）需要分享的图片,支持widget://,fs://,cache://协议及远程图片地址*/ 
	path:string,

	/**： （可选项）若path地址为远程地址，可通过此参数设置文件的别名，注意：别名并不会更改远程网络文件的文件后缀*/ 
	filename?:string,

	/**： （必填项）需要分享的图片,支持widget://,fs://,cache://协议及远程图片地址*/ 
	path:string,

}

interface DVTorch {
	/** 切换闪光灯开关*/ 
	toggle():void

	/** 打开闪光灯*/ 
	open():void

	/** 关闭闪光灯*/ 
	close():void

}
interface gps {
	/** 获取定位服务开关状态。在Android上定位服务分3种，1、同时使用网络和GPS定位；2、仅使用GPS定位；3、仅使用网络定位。在iOS的设置界面上设置定位服务时只有一个开关，即打开和关闭定位服务。所以该接口的返回值需要把iOS和Android两个平台分开处理，请开发者注意。*/ 
	getGpsState():void

	/** 打开系统自带的gps设置界面，用户可在此界面打开或关闭gps*/ 
	openGpsSettingView():void

}
interface screen {
	/** 安卓端禁止截屏、录屏；ios端监听截屏和录屏，回调自行处理。*/ 
	banRecord():void

	/** 安卓端恢复截屏和录屏功能；IOS端移除录屏和截屏监听。*/ 
	close():void

}
interface wwprint {
	/**
	 * `打印默认标签模板。`
	 * ========params==========
	 *
	 * `msg` :string : 按照文档描述传入对应的xml，即可完成默认打印。
	 */
	printDefault(params:wwprint_printDefault_Params, callback?: (ret:JSON) => void):void

	/** 关闭连接。断开与打印机的连接。参数无，回调无。*/ 
	close():void

	/**
	 * `创建一张标签模板。`
	 * ========params==========
	 *
	 * `width` :any : 标签的宽度 数值类型 计算方式：标签的实际宽度（毫米）*8
	 *
	 * `height` :any : 标签的高度 数值类型：计算方式上同
	 *
	 * `angle` :any : 旋转角度。
	 */
	createPrintLabel(params:wwprint_createPrintLabel_Params, callback?: (ret:JSON) => void):void

	/**
	 * `往创建的标签上面添加元素。可以是文字，二维码，条码，线条，图片。`
	 * ========params==========
	 *
	 * `content` :string : 打印内容 类型是String （文字，二维码，条码，图片的base64编码）
	 *
	 * `positionX` :any : 在标签上面的X坐标
	 *
	 * `positionY` :any : 在标签上面的y坐标
	 *
	 * `width` :any : 所占标签的宽度 单位为象素
	 *
	 * `height` :any : 所占标签的高度  单位为象素
	 *
	 * `fountSize` :any : 文字类型时候的字体大小
	 *
	 * `degrees` :any : 元素旋转角度。
	 *
	 * `contentType` :string : 指定内容的类型  详情见补充说明。
	 */
	addPrintLabel(params:wwprint_addPrintLabel_Params, callback?: (ret:JSON) => void):void

	/** 提交一张创建的标签。此方法无参数，回调可以不加。只有在创建完成之后提交才有效，否则会回调模板为创建，如果没有设置回调，将不会有任何返回信息。*/ 
	submitLabel(callback?: (ret:JSON) => void):void

	/** 自定义方法打印。无参数，不需要状态可以不设置回调。只有在设置蓝牙连接对象和自定义模板创建并提交之后才有用。*/ 
	print():void

	/**
	 * `设置蓝牙连接对象。如果不需要返回结果，可以不用设置回调方法。`
	 * ========params==========
	 *
	 * `name` :null : null
	 */
	setBluetoothDevice(params:wwprint_setBluetoothDevice_Params, callback?: (ret:JSON) => void):void

	/** 获取搜索到的蓝牙设备。多个设备以“，”分割。无参数。*/ 
	getBluetoothDeviceList(callback?: (ret:JSON) => void):void

	/** 无参数。主要是清理之前创建的标签模板。如果不调用，则之前创建的标签将会被保存，直到该对象消失。*/ 
	clean(callback?: (ret:JSON) => void):void

}
interface wwprint_printDefault_Params {
	/**按照文档描述传入对应的xml，即可完成默认打印。*/ 
	msg:string,

}

interface wwprint_createPrintLabel_Params {
	/**标签的宽度 数值类型 计算方式：标签的实际宽度（毫米）*8*/ 
	width:any,

	/**标签的高度 数值类型：计算方式上同*/ 
	height:any,

	/**旋转角度。*/ 
	angle:any,

}

interface wwprint_addPrintLabel_Params {
	/**打印内容 类型是String （文字，二维码，条码，图片的base64编码）*/ 
	content:string,

	/**在标签上面的X坐标*/ 
	positionX:any,

	/**在标签上面的y坐标*/ 
	positionY:any,

	/**所占标签的宽度 单位为象素*/ 
	width:any,

	/**所占标签的高度  单位为象素*/ 
	height:any,

	/**文字类型时候的字体大小*/ 
	fountSize:any,

	/**元素旋转角度。*/ 
	degrees:any,

	/**指定内容的类型  详情见补充说明。*/ 
	contentType:string,

}

interface wwprint_setBluetoothDevice_Params {
	/**null*/ 
	name:null,

}

interface wifi {
	/**
	 * `扫描连接wifi`
	 * ========params==========
	 *
	 * `ssid` :string : （可选项）wifi名称，填写此参数将自动连接此wifi
	 *
	 * `password` :string : （可选项）自动连接wifi的密码
	 *
	 * `label` :string : （可选项）自动连接wifi的副标题
	 */
	scanWifi(params:wifi_scanWifi_Params, callback?: (ret:JSON) => void):void

}
interface wifi_scanWifi_Params {
	/**（可选项）wifi名称，填写此参数将自动连接此wifi*/ 
	ssid?:string,

	/**（可选项）自动连接wifi的密码*/ 
	password?:string,

	/**（可选项）自动连接wifi的副标题*/ 
	label?:string,

}

interface sensor {
	/** 得到单个传感器信息*/ 
	getInfo():void

	/** 得到所有安卓手机支持的传感器信息*/ 
	getInfos(callback?: (ret:JSON) => void):void

}
interface phoneInfo {
}
interface statusBar {
	/** 获取当前设备的状态栏高度*/ 
	getStatusBarHeight(callback?: (ret:JSON) => void):void

}
interface smartConfigCheyw {
	/** 得到Ssid、Bssid的值*/ 
	getSsid():void

	/**
	 * `开始配置网络`
	 * ========params==========
	 *
	 * `ssid` :string : ssid的值
	 *
	 * `password` :string : wifi密码
	 *
	 * `Bssid` :string : Bssid的值
	 */
	startConfirm(params:smartConfigCheyw_startConfirm_Params, callback?: (ret:JSON) => void):void

	/**
	 * `配置成功之后发送指令`
	 * ========params==========
	 *
	 * `ip` :string : （可选项）ip地址
	 *
	 * `port` :string : （可选项）端口
	 *
	 * `sendStr` :string : 根据硬件要求传参数,发送的命令。
	 */
	sendCommand(params:smartConfigCheyw_sendCommand_Params, callback?: (ret:JSON) => void):void

}
interface smartConfigCheyw_startConfirm_Params {
	/**ssid的值*/ 
	ssid:string,

	/**wifi密码*/ 
	password:string,

	/**Bssid的值*/ 
	Bssid:string,

}

interface smartConfigCheyw_sendCommand_Params {
	/**（可选项）ip地址*/ 
	ip?:string,

	/**（可选项）端口*/ 
	port?:string,

	/**根据硬件要求传参数,发送的命令。*/ 
	sendStr:string,

}

interface ipAddress {
	/**
	 * `获取ip地址`
	 * ========params==========
	 *
	 * `isNetIp` :boolean : （可选项）是否获取ipv6的地址，(默认false，获取ipv4地址。仅ios有效)
	 */
	getIp(params:ipAddress_getIp_Params, callback?: (ret:JSON) => void):void

}
interface ipAddress_getIp_Params {
	/**（可选项）是否获取ipv6的地址，(默认false，获取ipv4地址。仅ios有效)*/ 
	isNetIp?:boolean,

}

interface simInfo {
}
interface moduleBarcodeScales {
	/**
	 * `初始化条码秤`
	 * ========params==========
	 *
	 * `scalseIp` :null : null
	 *
	 * `port` :string : （必填项）显示数据
	 */
	initBarcodeScales(params:moduleBarcodeScales_initBarcodeScales_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送PLU格式.txt文本`
	 * ========params==========
	 *
	 * `textPath` :string : （必填项）显示数据
	 */
	sendDatas(params:moduleBarcodeScales_sendDatas_Params, callback?: (ret:JSON) => void):void

	/** 断开条码秤连接*/ 
	disconnect(callback?: (ret:JSON) => void):void

}
interface moduleBarcodeScales_initBarcodeScales_Params {
	/**null*/ 
	scalseIp:null,

	/**（必填项）显示数据*/ 
	port:string,

}

interface moduleBarcodeScales_sendDatas_Params {
	/**（必填项）显示数据*/ 
	textPath:string,

}

interface mobileSignal {
	/** 获取手机卡运营商信息、网络信息和信号强度信息*/ 
	getSignal(callback?: (ret:JSON) => void):void

}
interface jpgInfoManager {
	/**
	 * `获取图片信息`
	 * ========params==========
	 *
	 * `imagePath` :string : 图片路径支持fs://,widget://;
	 */
	getImgInfo(params:jpgInfoManager_getImgInfo_Params, callback?: (ret:JSON) => void):void

}
interface jpgInfoManager_getImgInfo_Params {
	/**图片路径支持fs://,widget://;*/ 
	imagePath:string,

}

interface pedometer {
	/**  开始计步*/ 
	startCount():void

	/** 停止计步*/ 
	stopCount():void

	/** 获取当前统计的步数*****/ 
	getSteps():void

	/**
	 * `获取步数`
	 * ========params==========
	 *
	 * `startTime` :string : 开始日期
	 *
	 * `endTime` :string : 结束日期（结束日期和开始日期之间的差值不得超过三天，如果超过三天，按三天来算。）
	 *
	 * `count` :number : （可选项）获取最近数据的数量，默认为0,0代表最多数量.
	 *
	 * `remove` :boolean : （可选项）是否移除人为添加的步行数据
	 */
	getStepCount(params:pedometer_getStepCount_Params, callback?: (ret:JSON) => void):void

}
interface pedometer_getStepCount_Params {
	/**开始日期*/ 
	startTime:string,

	/**结束日期（结束日期和开始日期之间的差值不得超过三天，如果超过三天，按三天来算。）*/ 
	endTime:string,

	/**（可选项）获取最近数据的数量，默认为0,0代表最多数量.*/ 
	count?:number,

	/**（可选项）是否移除人为添加的步行数据*/ 
	remove?:boolean,

}

interface smartPeak {
	/**  检查Service是否运行*/ 
	isServiceRunning():void

	/** 开启扫描服务*/ 
	startScanService():void

	/** 停止扫描服务*/ 
	stopScanService():void

	/** 开始扫描*/ 
	startScan():void

	/** 停止扫描*/ 
	stopScan():void

	/** 注册获取条码数据的广播接收者;*/ 
	registerGetBarCodeDataListener():void

	/** 注销条码获取广播*/ 
	unRegisterGetBarCodeDataListener():void

}
interface orientationSensor {
}
interface hardwareInfo {
	/** 获取设备所有网卡的IP和MAC地址列表*/ 
	getIpMacAddrList(callback?: (ret:JSON) => void):void

	/** 获取当前设备cpu使用率，cpu核心数，cpu最大速度，cpu最小速度，app内存占用大小*/ 
	getPerformanceInfo(callback?: (ret:JSON) => void):void

	/**
	 * `根据传入参数的不同获得的字符串格式响应改变，默认为小写并且没有横线。`
	 * ========params==========
	 *
	 * `lower` :any : 默认GUID为小写，如果传入false则为大写
	 *
	 * `line` :any : 默认GUID中包含横线，如果传入false则无横线
	 */
	generateGuid(params:hardwareInfo_generateGuid_Params, callback?: (ret:JSON) => void):void

	/**
	 * `doPingTest主要是用来检测当前设备和指定的IP或者域名之间是否畅通，类似我们在windows常用的ping命令，异步回调函数可以获得ping的反馈信息。`
	 * ========params==========
	 *
	 * `host` :string : IP地址字符串。
	 */
	doPingTest(params:hardwareInfo_doPingTest_Params, callback?: (ret:JSON) => void):void

	/** clearAppCache可以清空当前app缓存。*/ 
	clearAppCache():void

	/** clearAppData可以清空当前app数据（app会强制退出）。*/ 
	clearAppData():void

}
interface hardwareInfo_generateGuid_Params {
	/**默认GUID为小写，如果传入false则为大写*/ 
	lower:any,

	/**默认GUID中包含横线，如果传入false则无横线*/ 
	line:any,

}

interface hardwareInfo_doPingTest_Params {
	/**IP地址字符串。*/ 
	host:string,

}

interface modulePrinter {
	/** 获取小票机USB动态权限*/ 
	requestPermission(callback?: (ret:JSON) => void):void

	/**
	 * `初始化小票打印机`
	 * ========params==========
	 *
	 * `type` :null : null
	 *
	 * `isinstruction` :null : null
	 *
	 * `isbox` :null : null
	 *
	 * `mPrinterIp` :null : null
	 *
	 * `port` :string : （必填项）显示数据
	 */
	initPrint(params:modulePrinter_initPrint_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打印小票`
	 * ========params==========
	 *
	 * `data` :JSON : （必填项）显示数据
	 */
	printData(params:modulePrinter_printData_Params, callback?: (ret:JSON) => void):void

	/** 使用小票机打开钱箱需要先调用获取权限接口然后初始化再打开钱箱*/ 
	openCashBox(callback?: (ret:JSON) => void):void

}
interface modulePrinter_initPrint_Params {
	/**null*/ 
	type:null,

	/**null*/ 
	isinstruction:null,

	/**null*/ 
	isbox:null,

	/**null*/ 
	mPrinterIp:null,

	/**（必填项）显示数据*/ 
	port:string,

}

interface modulePrinter_printData_Params {
	/**（必填项）显示数据*/ 
	data:JSON,

}

interface proximitySensor {
}
interface compassLeveler {
	/** 打开指南针水平仪页面*/ 
	openCL():void

}
interface openApp {
	/**
	 * `判断当前设备是否安装微信客户端`
	 * ========params==========
	 *
	 * `package` :string : （必填项）Android应用的包名
	 *
	 * `url` :string : （可选项）Android应用对于的下面网页地址
	 */
	openAppMarket(params:openApp_openAppMarket_Params, callback?: (ret:JSON) => void):void

}
interface openApp_openAppMarket_Params {
	/**（必填项）Android应用的包名*/ 
	package:string,

	/**（可选项）Android应用对于的下面网页地址*/ 
	url?:string,

}

interface cameraTool {
}
interface zjPrinter {
}
interface moduleLabelPrinter {
	/** 获取打印机设备权限*/ 
	requestPermission(callback?: (ret:JSON) => void):void

	/** 获取打印机设备信息*/ 
	printerUsb(callback?: (ret:JSON) => void):void

	/** 初始化*/ 
	initPrint(callback?: (ret:JSON) => void):void

	/**
	 * `打印标签`
	 * ========params==========
	 *
	 * `data` :JSON : （必填项）打印数据
	 */
	printerLabel(params:moduleLabelPrinter_printerLabel_Params, callback?: (ret:JSON) => void):void

	/** 断开蓝牙连接*/ 
	disconnect(callback?: (ret:JSON) => void):void

	/** 扫描蓝牙设备*/ 
	ScanBluetooth(callback?: (ret:JSON) => void):void

}
interface moduleLabelPrinter_printerLabel_Params {
	/**（必填项）打印数据*/ 
	data:JSON,

}

interface displayInfo {
	/** 得到逻辑密度*/ 
	getDensity(callback?: (ret:JSON) => void):void

	/** 得到屏幕密度*/ 
	getDensityDpi(callback?: (ret:JSON) => void):void

	/** 得到绝对高度*/ 
	getHeightPixels(callback?: (ret:JSON) => void):void

	/** 得到比例因子*/ 
	getScaledDensity(callback?: (ret:JSON) => void):void

	/** 得到绝对宽度*/ 
	getWidthPixels(callback?: (ret:JSON) => void):void

	/** 得到X尺寸屏幕每英寸的确切物理像素*/ 
	getXdpi(callback?: (ret:JSON) => void):void

	/** 得到Y尺寸屏幕每英寸的确切物理像素*/ 
	getYdpi(callback?: (ret:JSON) => void):void

}
interface sunmiV2Printer {
	/** 开启打印服务*/ 
	startService(callback?: (ret:JSON) => void):void

	/** 停止打印服务*/ 
	stopService(callback?: (ret:JSON) => void):void

	/**
	 * `打印文字`
	 * ========params==========
	 *
	 * `text` :string : 要打印文字
	 *
	 * `size` :any : 字体大小
	 *
	 * `size` :any : 字体大小
	 *
	 * `isBole` :boolean : 粗体
	 *
	 * `isUnderLine` :boolean : 下划线
	 */
	printText(params:sunmiV2Printer_printText_Params, callback?: (ret:JSON) => void):void

	/** 打印数据*/ 
	printData(callback?: (ret:JSON) => void):void

	/**
	 * `走纸`
	 * ========params==========
	 *
	 * `n` :any : 走纸行数
	 */
	lineWrap(params:sunmiV2Printer_lineWrap_Params, callback?: (ret:JSON) => void):void

}
interface sunmiV2Printer_printText_Params {
	/**要打印文字*/ 
	text:string,

	/**字体大小*/ 
	size:any,

	/**字体大小*/ 
	size:any,

	/**粗体*/ 
	isBole:boolean,

	/**下划线*/ 
	isUnderLine:boolean,

}

interface sunmiV2Printer_lineWrap_Params {
	/**走纸行数*/ 
	n:any,

}

interface myAppInfo {
	/**
	 * `读取手机应用基本信息的接口`
	 * ========params==========
	 *
	 * `isSys` :number : （可选项）要获取的应用类型
	 */
	getAppInfo(params:myAppInfo_getAppInfo_Params, callback?: (ret:JSON) => void):void

}
interface myAppInfo_getAppInfo_Params {
	/**（可选项）要获取的应用类型*/ 
	isSys?:number,

}

interface connectWifi {
}
interface vibrateUtil {
	/** 普通短震，ios中为 3D Touch 中 Peek 震动触感*/ 
	shortPeek():void

	/** 普通短震，ios中为3D Touch 按压弹出触感*/ 
	shortPop():void

	/** 连续震动三次*/ 
	threable():void

	/** 长震动*/ 
	longVibrate():void

	/** 多次间隔震动*/ 
	intervalVibrate():void

	/** 终止震动*/ 
	vibrateCancle():void

}
interface blesdk {
	/** 开始扫描周围的蓝牙设备,并返回扫描到的设备卡号*/ 
	startScan(callback?: (ret:JSON) => void):void

}
interface callRecord {
	/** 获取通话记录*/ 
	openCallRecord(callback?: (ret:JSON) => void):void

}
interface moduleSMS {
}
interface posPrinter {
	/**
	 * `获取蓝牙打印机列表`
	 * ========params==========
	 *
	 * `status` :string : （可选项）表示要获取绑定的设备还是搜索周边所有蓝牙设备
	 */
	getBluetoothPrinters(params:posPrinter_getBluetoothPrinters_Params, callback?: (ret:JSON) => void):void

	/**
	 * `绑定蓝牙打印机`
	 * ========params==========
	 *
	 * `address` :string : （必填项）蓝牙打印机 MAC 地址
	 *
	 * `pin` :string : （可选项）绑定蓝牙设备时需要输入的pin码
	 */
	createBondToPrinter(params:posPrinter_createBondToPrinter_Params, callback?: (ret:JSON) => void):void

	/** 获取USB打印机列表*/ 
	getUsbPrinters(callback?: (ret:JSON) => void):void

	/**
	 * `将指定的蓝牙打印机解除绑定`
	 * ========params==========
	 *
	 * `address` :string : （必填项）要解除绑定的蓝牙打印机 MAC 地址
	 */
	removeBondToPrinter(params:posPrinter_removeBondToPrinter_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将打印内容发送到指定地址的打印机（蓝牙打印机为MAC地址，网口打印机为IP地址），支持多机打印`
	 * ========params==========
	 *
	 * `taskList` :Array<JSON> : （必填项）打印机、打印内容、重复打印次数组成的JSON对象数组
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	printOnSpecifiedPrinters(params:posPrinter_printOnSpecifiedPrinters_Params):void

	/**
	 * `将打印内容发送到指定地址的打印机（蓝牙打印机为MAC地址，网口打印机为IP地址），支持多机打印`
	 * ========params==========
	 *
	 * `taskList` :Array<JSON> : （必填项）打印机、打印内容、重复打印次数组成的JSON对象数组
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	print(params:posPrinter_print_Params):void

	/**
	 * `向指定打印机发送 ESC/POS 指令（不了解ESC/POS指令慎用）`
	 * ========params==========
	 *
	 * `printerAddr` :string : （必填项）蓝牙打印机地址（可通过getBluetoothPrinters获取）、IP打印机地址、USB打印机地址（可通过getUsbPrinters获取）
	 *
	 * `decCmd` :Array<JSON> : （必填项）以十进制数字组成的 ESC/POS 指令数组
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	sendEscCommandToPrinter(params:posPrinter_sendEscCommandToPrinter_Params):void

	/**
	 * `获取打印机状态(usb打印机此命令无效)`
	 * ========params==========
	 *
	 * `printerAddr` :string : （必填项）打印机Mac地址或IP地址
	 */
	getPrinterStatus(params:posPrinter_getPrinterStatus_Params, callback?: (ret:JSON) => void):void

}
interface posPrinter_getBluetoothPrinters_Params {
	/**（可选项）表示要获取绑定的设备还是搜索周边所有蓝牙设备*/ 
	status?:string,

}

interface posPrinter_createBondToPrinter_Params {
	/**（必填项）蓝牙打印机 MAC 地址*/ 
	address:string,

	/**（可选项）绑定蓝牙设备时需要输入的pin码*/ 
	pin?:string,

}

interface posPrinter_removeBondToPrinter_Params {
	/**（必填项）要解除绑定的蓝牙打印机 MAC 地址*/ 
	address:string,

}

interface posPrinter_printOnSpecifiedPrinters_Params {
	/**（必填项）打印机、打印内容、重复打印次数组成的JSON对象数组*/ 
	taskList:Array<JSON>,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface posPrinter_print_Params {
	/**（必填项）打印机、打印内容、重复打印次数组成的JSON对象数组*/ 
	taskList:Array<JSON>,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface posPrinter_sendEscCommandToPrinter_Params {
	/**（必填项）蓝牙打印机地址（可通过getBluetoothPrinters获取）、IP打印机地址、USB打印机地址（可通过getUsbPrinters获取）*/ 
	printerAddr:string,

	/**（必填项）以十进制数字组成的 ESC/POS 指令数组*/ 
	decCmd:Array<JSON>,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface posPrinter_getPrinterStatus_Params {
	/**（必填项）打印机Mac地址或IP地址*/ 
	printerAddr:string,

}

interface myListeningInfo {
	/** 启动监听*/ 
	start():void

}
interface bluePrinter {
	/** 扫描小票打印机蓝牙*/ 
	scan():void

	/**
	 * `连接小票打印机`
	 * ========params==========
	 *
	 * `id` :any : scan接口返回的id
	 */
	connect(params:bluePrinter_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加单行标题`
	 * ========params==========
	 *
	 * `string` :any : 标题内容
	 *
	 * `alignment` :number : 文字对齐方式
	 *
	 * `font` :number : 字号
	 */
	appendTitle(params:bluePrinter_appendTitle_Params):void

	/**
	 * `添加单行信息(左标题，右实际值)`
	 * ========params==========
	 *
	 * `title` :any : 标题
	 *
	 * `value` :any : 实际值
	 *
	 * `offset` :number : 实际值偏移量
	 *
	 * `font` :number : 字号
	 */
	appendText(params:bluePrinter_appendText_Params):void

	/**
	 * `添加单行信息(三列，例如：名称、数量、单价)`
	 * ========params==========
	 *
	 * `left` :any : 左标题
	 *
	 * `middle` :any : 中间标题
	 *
	 * `right` :any : 右标题
	 */
	appendTextThree(params:bluePrinter_appendTextThree_Params):void

	/**
	 * `添加条形码`
	 * ========params==========
	 *
	 * `string` :any : 条形码信息
	 *
	 * `alignment` :number : 文字对齐方式
	 *
	 * `maxWidth` :number : 最大宽度
	 */
	appendBarCode(params:bluePrinter_appendBarCode_Params):void

	/**
	 * `添加二维码`
	 * ========params==========
	 *
	 * `string` :any : 二维码信息
	 *
	 * `alignment` :number : 文字对齐方式
	 *
	 * `size` :number : 二维码大小，取值范围 1 <= size <= 16
	 */
	appendQRCode(params:bluePrinter_appendQRCode_Params):void

	/**
	 * `添加底部信息`
	 * ========params==========
	 *
	 * `string` :any : 底部信息
	 */
	appendFooter(params:bluePrinter_appendFooter_Params):void

	/** 添加一条分割线*/ 
	appendSeperatorLine():void

	/** 清除所有添加打印信息*/ 
	appendCleare():void

	/** 以字符串形式打印小票*/ 
	printString(callback?: (ret:JSON) => void):void

	/**
	 * `以html本地文件形式打印小票**1.0.3版本（含）遗弃该接口**`
	 * ========params==========
	 *
	 * `path` :string : html本地地址（支持fs、widget）。
	 *
	 * `alignment` :number : 对齐方式
	 *
	 * `maxWidth` :number : 最大宽度
	 */
	printHtml(params:bluePrinter_printHtml_Params, callback?: (ret:JSON) => void):void

}
interface bluePrinter_connect_Params {
	/**scan接口返回的id*/ 
	id:any,

}

interface bluePrinter_appendTitle_Params {
	/**标题内容*/ 
	string:any,

	/**文字对齐方式*/ 
	alignment:number,

	/**字号*/ 
	font:number,

}

interface bluePrinter_appendText_Params {
	/**标题*/ 
	title:any,

	/**实际值*/ 
	value:any,

	/**实际值偏移量*/ 
	offset:number,

	/**字号*/ 
	font:number,

}

interface bluePrinter_appendTextThree_Params {
	/**左标题*/ 
	left:any,

	/**中间标题*/ 
	middle:any,

	/**右标题*/ 
	right:any,

}

interface bluePrinter_appendBarCode_Params {
	/**条形码信息*/ 
	string:any,

	/**文字对齐方式*/ 
	alignment:number,

	/**最大宽度*/ 
	maxWidth:number,

}

interface bluePrinter_appendQRCode_Params {
	/**二维码信息*/ 
	string:any,

	/**文字对齐方式*/ 
	alignment:number,

	/**二维码大小，取值范围 1 <= size <= 16*/ 
	size:number,

}

interface bluePrinter_appendFooter_Params {
	/**底部信息*/ 
	string:any,

}

interface bluePrinter_printHtml_Params {
	/**html本地地址（支持fs、widget）。*/ 
	path:string,

	/**对齐方式*/ 
	alignment:number,

	/**最大宽度*/ 
	maxWidth:number,

}

interface mobileSensor {
	/** 手机加速度传感器，持续返回结果。*/ 
	getAccelerometer(callback?: (ret:JSON) => void):void

}
interface btsppiot {
}
interface printBleWifi {
	/** 初始化蓝牙*/ 
	initBlue(callback?: (ret:JSON) => void):void

	/** 蓝牙是否打开*/ 
	isOpen(callback?: (ret:JSON) => void):void

	/** 蓝牙配对历史*/ 
	hostoryBlue(callback?: (ret:JSON) => void):void

	/** 扫描蓝牙*/ 
	scanBlue(callback?: (ret:JSON) => void):void

	/** 连接蓝牙设备*/ 
	connectBlue():void

	/** 关闭扫描*/ 
	disscanBlue():void

	/** 判断WIFI打印机是否连接成功*/ 
	isWifiConnect(callback?: (ret:JSON) => void):void

	/** 连接wifi打印机*/ 
	openWifiPrint():void

	/** 添加单行标题*/ 
	appendTitle():void

	/** 加单行信息(左标题，右实际值)*/ 
	appendText():void

	/** 添加单行信息(三列，例如：名称、数量、单价)*/ 
	appendTextTree():void

	/** 添加条形码*/ 
	appendBarCode():void

	/** 添加二维码*/ 
	appendQRCode():void

	/** 添加底部信息*/ 
	appendFooter():void

	/** 添加一条分割线*/ 
	appendSeperatorLine(callback?: (ret:JSON) => void):void

	/** 清除所有添加打印信息*/ 
	appendClear(callback?: (ret:JSON) => void):void

	/** 添加图片*/ 
	appendImage():void

	/** 打印小票*/ 
	print(callback?: (ret:JSON) => void):void

	/** 打印当前页*/ 
	printCurrentPage(callback?: (ret:JSON) => void):void

	/** 获取条形码base64图片*/ 
	getBarCode(callback?: (ret:JSON) => void):void

	/** 获取二维码base64图片*/ 
	getQRCode(callback?: (ret:JSON) => void):void

}
interface appVersionUpdate {
}
interface magneticFieldSensor {
}
interface gpsListener {
	/**
	 * `查询监听GPS开关状态`
	 * ========params==========
	 *
	 * `addGpsChange` :boolean : （可选项）是否持续监听GPS状态；默认true
	 */
	addGpsListener(params:gpsListener_addGpsListener_Params, callback?: (ret:JSON) => void):void

	/** 移除GPS状态监听*/ 
	removeGpsListener():void

	/** 打开GPS设置页面*/ 
	openGpsSetting():void

}
interface gpsListener_addGpsListener_Params {
	/**（可选项）是否持续监听GPS状态；默认true*/ 
	addGpsChange?:boolean,

}

interface toBackground {
	/** Android App一键进入后台运行，进入后台后用户可通过任务栏重新进入界面，且保留应用原来的界面。*/ 
	runBackground():void

}
interface btmodule {
}
interface wifiSSID {
	/** 获取当前设备连接的WIFI的SSID*/ 
	getSsid(callback?: (ret:JSON) => void):void

}
interface hanvonVehicleCard {
	/**
	 * `对行驶证图片进行识别。`
	 * ========params==========
	 *
	 * `path` :string : 源图片路径，支持fs://、widget://等文件路径协议。
	 *
	 * `cropped` :boolean : （可选）切图版：true； 普通版：false。
	 *
	 * `https` :boolean : （可选）https：true； http：false。
	 *
	 * `cropPath` :boolean : （可选）在cropped为true时才有效。为true返回切割图路径和切割图经base64编码的字符串，为false只返回切割图经base64编码的字符串
	 */
	vehiclecardImage(params:hanvonVehicleCard_vehiclecardImage_Params, callback?: (ret:JSON) => void):void

	/** 清除保存的切割图。*/ 
	clearCache():void

}
interface hanvonVehicleCard_vehiclecardImage_Params {
	/**源图片路径，支持fs://、widget://等文件路径协议。*/ 
	path:string,

	/**（可选）切图版：true； 普通版：false。*/ 
	cropped?:boolean,

	/**（可选）https：true； http：false。*/ 
	https?:boolean,

	/**（可选）在cropped为true时才有效。为true返回切割图路径和切割图经base64编码的字符串，为false只返回切割图经base64编码的字符串*/ 
	cropPath?:boolean,

}

interface mwTencentRTC {
	/** 手动注册*/ 
	registerApp(callback?: (ret:JSON) => void):void

	/**
	 * `登录`
	 * ========params==========
	 *
	 * `userName` :string : 用户名
	 *
	 * `userSig` :string : 签名
	 */
	loginRTC(params:mwTencentRTC_loginRTC_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入房间 roomID 不存在时会自动创建房间`
	 * ========params==========
	 *
	 * `roomID` :string : 房间id
	 *
	 * `privateMapKey` :string : 房间加密的key
	 *
	 * `role` :string : 角色
	 */
	joinRoom(params:mwTencentRTC_joinRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `退出房间`
	 * ========params==========
	 *
	 * `roomID` :string : 房间id
	 *
	 * `privateMapKey` :string : 房间加密的key
	 *
	 * `role` :string : 角色
	 */
	quitRoom(params:mwTencentRTC_quitRoom_Params, callback?: (ret:JSON) => void):void

}
interface mwTencentRTC_loginRTC_Params {
	/**用户名*/ 
	userName:string,

	/**签名*/ 
	userSig:string,

}

interface mwTencentRTC_joinRoom_Params {
	/**房间id*/ 
	roomID:string,

	/**房间加密的key*/ 
	privateMapKey:string,

	/**角色*/ 
	role:string,

}

interface mwTencentRTC_quitRoom_Params {
	/**房间id*/ 
	roomID:string,

	/**房间加密的key*/ 
	privateMapKey:string,

	/**角色*/ 
	role:string,

}

interface yunxinIM {
	/** 登陆*/ 
	login(callback?: (ret:JSON) => void):void

	/** 自动登陆，启动APP如果已经保存了用户帐号和令牌,建议使用这个登录方式*/ 
	autoLogin():void

	/** 退出登陆*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 当前登录状态*/ 
	isLogined(callback?: (ret:JSON) => void):void

	/** 获取当前登录帐号，当前登录帐号,如果没有登录成功,这个地方会返回空字符串''（仅iOS支持）*/ 
	currentAccount():void

	/** 账号相关监听*/ 
	addAccountListen(callback?: (ret:JSON) => void):void

	/** 移除账号相关监听（仅android支持）*/ 
	removeAccountListen():void

	/**
	 * `踢其他客户端下线（仅 android支持）`
	 * ========params==========
	 *
	 * `client` :number : 要踢下线的客户端
	 */
	kickOtherClient(params:yunxinIM_kickOtherClient_Params, callback?: (ret:JSON) => void):void

	/** 从本地获取用户资料*/ 
	localUserInfo(callback?: (ret:JSON) => void):void

	/** 是否打开本地数据（仅android支持）*/ 
	openLocalCache(callback?: (ret:JSON) => void):void

	/** 从云信服务器批量获取用户资料，需要将用户信息交给云信托管，此接口才有效。调用此接口，不会触发 onUserInfoChanged 回调，该接口会将获取到的用户信息缓存在本地，所以需要避免此接口的滥调，导致存储过多无用数据到本地而撑爆缓存：如在聊天室请求请求每个聊天室用户数据将造成缓存过大而影响程序性能，本接口一次最多支持 150 个用户信息获取*/ 
	fetchUserInfos(callback?: (ret:JSON) => void):void

	/** 修改自己的用户资料*/ 
	updateMyUserInfo(callback?: (ret:JSON) => void):void

	/** 上传头像*/ 
	upload(callback?: (ret:JSON) => void):void

	/** 文件资源下载*/ 
	download(callback?: (ret:JSON) => void):void

	/** 取消上传/下载任务*/ 
	cancelTask():void

	/**
	 * `发送文本消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `text` :string : 发送的消息
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 *
	 * `reSend` :boolean : （可选项）如果失败后是否重发（仅android支持）
	 */
	sendText(params:yunxinIM_sendText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `path` :string : 要发送的图片的路径，要求本地路径（fs://、widget://）（android仅支持fs路径）
	 *
	 * `displayName` :string : （可选项）文件展示名
	 *
	 * `compressQuality` :number : （可选项）压缩参数，可传入0.0-1.0的值，如果传入非法参数，则按照 0.5 进行压缩（仅iOS支持）
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 *
	 * `reSend` :boolean : （可选项）如果失败后是否重发（仅android支持）
	 */
	sendImage(params:yunxinIM_sendImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送语音消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `path` :string : 要发送的语音的路径，要求本地路径（fs://、widget://）（android仅支持fs路径）
	 *
	 * `duration` :number : （可选项）语音时长，毫秒为单位
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 *
	 * `reSend` :boolean : （可选项）如果失败后是否重发（仅android支持）
	 */
	sendVoice(params:yunxinIM_sendVoice_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送视频消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `path` :string : 要发送的视频的路径，要求本地路径（fs://、widget://）
	 *
	 * `displayName` :string : 视频展示名
	 *
	 * `duration` :number : （可选项）视频时长，毫秒为单位
	 *
	 * `width` :number : 视频宽度（仅android支持）
	 *
	 * `height` :number : 视频高度（仅android支持）
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 *
	 * `reSend` :boolean : （可选项）如果失败后是否重发（仅android支持）
	 */
	sendVideo(params:yunxinIM_sendVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文件消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `path` :string : 要发送的文件的路径，要求本地路径（fs://、widget://）
	 *
	 * `displayName` :string : 文件显示名
	 *
	 * `extension` :string : 文件拓展名（仅iOS支持）
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 *
	 * `reSend` :boolean : （可选项）如果失败后是否重发（仅android支持）
	 */
	sendFile(params:yunxinIM_sendFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `address` :string : 要发送的地址
	 *
	 * `latitude` :number : 纬度
	 *
	 * `longitude` :number : 经度
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 *
	 * `reSend` :boolean : （可选项）如果失败后是否重发（仅android支持）
	 */
	sendLocation(params:yunxinIM_sendLocation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送提示消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `text` :string : 要发送的消息（仅iOS支持）
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 *
	 * `reSend` :boolean : （可选项）如果失败后是否重发（仅android支持）
	 */
	sendTip(params:yunxinIM_sendTip_Params, callback?: (ret:JSON) => void):void

	/**
	 * `消息取消发送，只能取消正在发送中的消息（如大文件发送），通常配合异步发送消息接口，接口返回值成功时消息的状态为发送失败状态（仅iOS支持）`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageId` :string : 消息Id
	 */
	cancelSendingMessage(params:yunxinIM_cancelSendingMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `消息重发（仅iOS支持）`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageId` :string : 消息Id
	 */
	resendMessage(params:yunxinIM_resendMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `消息转发，除了通知消息之外，其他类型消息均支持转发给其他会话，`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `toSessionId` :string : 转发到ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `toChatType` :number : （可选项）转发到的会话类型
	 *
	 * `messageId` :string : 消息Id，
	 *
	 * `reSend` :boolean : （可选项）如果失败后是否重发（仅android支持）
	 */
	forwardMessage(params:yunxinIM_forwardMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `消息撤回，允许用户撤回一定时间内发送过的消息，允许撤回时长默认2分钟，可在网易云信控制台配置`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageId` :string : 消息Id
	 */
	revokeMessage(params:yunxinIM_revokeMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `单聊消息已读回执，在会话界面中调用发送已读回执的接口并传入当前会话的最后一条消息，即表示这之前的消息本方都已读`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageId` :string : 当前会话的最后一条消息Id
	 */
	sendMessageReceipt(params:yunxinIM_sendMessageReceipt_Params, callback?: (ret:JSON) => void):void

	/**
	 * `群聊消息已读回执，群消息已读回执功能，需要联系商务顾问申请开通后才能使用。同时，使用该功能时需要将群成员控制在100人以内。需要config配置teamReceiptEnabled为true（仅iOS支持）`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageIds` :Array : 条消息Id数组
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageIds` :Array : 条消息Id数组
	 */
	sendTeamMessageReceipts(params:yunxinIM_sendTeamMessageReceipts_Params, callback?: (ret:JSON) => void):void

	/**
	 * `群聊消息已读回执，群消息已读回执功能，需要联系商务顾问申请开通后才能使用。同时，使用该功能时需要将群成员控制在100人以内。需要config配置teamReceiptEnabled为true（仅iOS支持）`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageIds` :Array : 条消息Id数组
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageIds` :Array : 条消息Id数组
	 */
	sendTeamMessageReceipts(params:yunxinIM_sendTeamMessageReceipts_Params, callback?: (ret:JSON) => void):void

	/** 消息相关监听*/ 
	addMessageListen():void

	/** 获取所有最近会话*/ 
	allRecentSessions():void

	/**
	 * `创建最近会话`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID（仅iOS支持）
	 *
	 * `messageId` :string : 当前会话的最后一条消息Id
	 *
	 * `chatType` :number : （可选项）会话类型（仅iOS支持）
	 */
	creatRecentSession(params:yunxinIM_creatRecentSession_Params):void

	/**
	 * `删除最近会话`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID（如果不通知观察者 android端需要未allRecentSessions接口最近一次返回数据中会话 ID）
	 *
	 * `sessionType` :number : 会话类型；0：P2P，1：Team，2：ChatRoom，3：Ysf，5：SUPER_TEAM（android端通知观察者时需要）
	 *
	 * `notifyOb` :boolean : （可选项）是否通知观察者（仅android支持）
	 */
	deleteRecentSession(params:yunxinIM_deleteRecentSession_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新最近会话的本地扩展（仅iOS支持）`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 */
	updateRecentLocalExt(params:yunxinIM_updateRecentLocalExt_Params, callback?: (ret:JSON) => void):void

	/** 获取会话未读消息数*/ 
	allUnreadCount():void

	/**
	 * `设置一个会话里所有消息置为已读（仅iOS支持）`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 */
	markAllMessagesReadInSession(params:yunxinIM_markAllMessagesReadInSession_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除服务器端最近会话`
	 * ========params==========
	 *
	 * `sessions` :Array : 会话列表
	 */
	deleteRemoteSessions(params:yunxinIM_deleteRemoteSessions_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从本地db读取一个会话里某条消息之前的若干条的消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageId` :string : 消息Id（android端此消息必须为上次获取结果中消息或pullMessageHistory接口上次获取结果中id，
	 *
	 * `direction` :string : （可选项）查询方向（仅android支持）
	 *
	 * `limit` :number : （可选项）查询条数（仅android支持）
	 *
	 * `asc` :boolean : （可选项）是否已time为排序字段（仅android支持）
	 */
	messagesInSession(params:yunxinIM_messagesInSession_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从服务器拉取消息历史记录。该接口查询方向为从后往前。（仅android支持）`
	 * ========params==========
	 *
	 * `messageId` :string : （可选项）从这条消息往前获取（此消息必须为上次获取的消息id）
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `limit` :number : （可选项）获取多少条消息，最大值为100
	 *
	 * `persist` :boolean : （可选项）获取的漫游消息记录，是否保存到本地消息数据库
	 *
	 * `persistClear` :boolean : （可选项）是否保存清除记录之前的消息到本地数据库
	 */
	pullMessageHistory(params:yunxinIM_pullMessageHistory_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据消息Id获取消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID（仅iOS支持）
	 *
	 * `chatType` :number : （可选项）会话类型（仅IOS支持）
	 *
	 * `messageIds` :Array : 消息Id数组
	 */
	messagesInSessionWithMessageIds(params:yunxinIM_messagesInSessionWithMessageIds_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除某条消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID（仅iOS支持）
	 *
	 * `chatType` :number : （可选项）会话类型（仅iOS支持）
	 *
	 * `messageId` :string : 消息Id
	 */
	deleteMessage(params:yunxinIM_deleteMessage_Params):void

	/**
	 * `删除某个会话的所有消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `removeSession` :boolean : （可选项）是否移除对应最近会话，设置为 true 时将同时删除最近会话信息（仅iOS支持）
	 *
	 * `removeTable` :boolean : （可选项）是否删除消息表，默认情况下云信采用标记的方式进行消息删除，如果设置为 true，将一并移除对应的消息表，进而减少消息表数量，加快 I/O（仅iOS支持）
	 */
	deleteAllmessagesInSession(params:yunxinIM_deleteAllmessagesInSession_Params):void

	/**
	 * `删除所有会话消息（仅iOS支持）`
	 * ========params==========
	 *
	 * `removeSession` :boolean : （可选项）是否移除对应最近会话，设置为 true 时将同时删除最近会话信息
	 *
	 * `removeTable` :boolean : （可选项）是否删除消息表，默认情况下云信采用标记的方式进行消息删除，如果设置为 true，将一并移除对应的消息表，进而减少消息表数量，加快 I/O
	 */
	deleteAllMessages(params:yunxinIM_deleteAllMessages_Params):void

	/** 会话相关监听*/ 
	addSessionListen(callback?: (ret:JSON) => void):void

	/** 移除会话相关监听（仅android支持）*/ 
	removeSessionListen():void

	/** 获取好友列表*/ 
	myFriends():void

	/**
	 * `处理好友关系`
	 * ========params==========
	 *
	 * `userId` :string : 目标用户ID
	 *
	 * `operation` :number : （可选项）操作类型
	 *
	 * `message` :string : 附言
	 */
	requestFriend(params:yunxinIM_requestFriend_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除好友`
	 * ========params==========
	 *
	 * `userId` :string : 好友Id
	 *
	 * `removeAlias` :boolean : （可选项）是否同时删除备注
	 */
	deleteFriend(params:yunxinIM_deleteFriend_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断是否是我的好友`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 */
	isMyFriend(params:yunxinIM_isMyFriend_Params, callback?: (ret:JSON) => void):void

	/** 获取黑名单中的用户列表*/ 
	myBlackList():void

	/**
	 * `添加用户到黑名单`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 */
	addToBlackList(params:yunxinIM_addToBlackList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将用户从黑名单移除`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 */
	removeFromBlackList(params:yunxinIM_removeFromBlackList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断用户是否已被拉黑`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 */
	isUserInBlackList(params:yunxinIM_isUserInBlackList_Params, callback?: (ret:JSON) => void):void

	/** 获取免打扰列表*/ 
	myMuteUserList():void

	/**
	 * `设置免打扰`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 *
	 * `isNotify` :boolean : （可选项）是否免打扰
	 */
	setMute(params:yunxinIM_setMute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断是否免打扰`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 */
	isMute(params:yunxinIM_isMute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户检索（仅iOS支持）`
	 * ========params==========
	 *
	 * `searchContent` :string : 搜索文本
	 *
	 * `ignoreingCase` :boolean : （可选项）忽略大小写
	 *
	 * `searchRange` :number : （可选项）搜索文本的搜索范围
	 *
	 * `searchContentOption` :number : （可选项）搜索文本的搜索范围
	 */
	searchUser(params:yunxinIM_searchUser_Params, callback?: (ret:JSON) => void):void

	/** 好友相关监听*/ 
	addFriendListen(callback?: (ret:JSON) => void):void

	/** 移除好友相关监听（仅iOS支持）*/ 
	removeFriendListen():void

	/**
	 * `通过用户id获取用户信息（仅android支持）`
	 * ========params==========
	 *
	 * `userIds` :Array : 用户id数组
	 */
	getUserInfoList(params:yunxinIM_getUserInfoList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取本地存储的系统通知（本接口配合limit参数采取分页获取）`
	 * ========params==========
	 *
	 * `limit` :number : 最大获取数
	 *
	 * `offset` :number : 数据库查询偏移量（仅android支持）
	 */
	fetchSystemNotifications(params:yunxinIM_fetchSystemNotifications_Params, callback?: (ret:JSON) => void):void

	/** 获取未读系统消息数*/ 
	allNotificationsUnreadCount():void

	/** 标记所有系统消息为已读*/ 
	markAllNotificationsAsRead():void

	/** 删除所有系统消息*/ 
	deleteAllNotifications():void

	/** 通知相关监听*/ 
	addNotificationListen(callback?: (ret:JSON) => void):void

	/** 移除通知相关监听（仅android支持）*/ 
	removeNotificationListen():void

	/**
	 * `创建群组`
	 * ========params==========
	 *
	 * `users` :Array : 用户ID列表
	 *
	 * `option` :JSON : 创建群选项
	 */
	createTeam(params:yunxinIM_createTeam_Params, callback?: (ret:JSON) => void):void

	/** 从本地获取所有群组*/ 
	allMyTeams():void

	/**
	 * `解散群组`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 */
	dismissTeam(params:yunxinIM_dismissTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `申请加入群组`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `message` :string : （可选项）申请消息
	 */
	applyToTeam(params:yunxinIM_applyToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通过申请(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `userId` :string : 申请的用户 ID
	 */
	passApplyToTeam(params:yunxinIM_passApplyToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝申请(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `userId` :string : 申请的用户 ID
	 *
	 * `reason` :string : （可选项）拒绝理由
	 */
	rejectApplyToTeam(params:yunxinIM_rejectApplyToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `邀请加入群组`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `users` :Array : 用户ID列表
	 *
	 * `postscript` :string : （可选项）邀请附言
	 *
	 * `attach` :string : （可选项）扩展消息
	 */
	invitationToTeam(params:yunxinIM_invitationToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `接受入群邀请(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `invitorId` :string : 邀请者 ID
	 */
	acceptInviteWithTeam(params:yunxinIM_acceptInviteWithTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝入群邀请(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `invitorId` :string : 邀请者 ID
	 *
	 * `reason` :string : （可选项）拒绝原因
	 */
	rejectInviteWithTeam(params:yunxinIM_rejectInviteWithTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从群组内移除成员`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `users` :string : 需要移除的用户ID列表
	 */
	kickUsersFromTeam(params:yunxinIM_kickUsersFromTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `退出群组`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 */
	quitTeam(params:yunxinIM_quitTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取群组成员，绝大多数情况这个请求都是从本地读取缓存并同步返回，但是由于群成员信息量较大， SDK 采取的是登录后延迟拉取的策略，考虑到用户网络等问题, SDK 有可能没有及时缓存群成员信息,那么这个请求将是个带网络请求的异步操作(增量请求)。 同时这个接口会去请求本地没有缓存的群用户的资料信息，但不会触发 onUserInfoChanged 回调`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 */
	fetchTeamMembers(params:yunxinIM_fetchTeamMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取单个群成员信息，返回本地缓存的群成员信息，如果本地没有相应数据则返回空`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `userId` :string : 用户ID
	 */
	teamMember(params:yunxinIM_teamMember_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新成员群昵称`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `userId` :string : 群成员ID
	 *
	 * `newNick` :string : 新的群成员昵称
	 */
	updateUserNick(params:yunxinIM_updateUserNick_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据群组ID判断是否是我所在的群`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 */
	isMyTeam(params:yunxinIM_isMyTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移交群主`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `newOwnerId` :string : 新群主ID
	 *
	 * `isLeave` :boolean : （可选项）是否同时离开群组
	 */
	transferManagerWithTeam(params:yunxinIM_transferManagerWithTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加管理员`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `users` :Array : 需要添加为管理员的用户ID列表
	 */
	addManagersToTeam(params:yunxinIM_addManagersToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除管理员`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `users` :Array : 需要添加为管理员的用户ID列表
	 */
	removeManagersFromTeam(params:yunxinIM_removeManagersFromTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `禁言指定成员`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `userId` :string : 用户ID
	 *
	 * `isMute` :boolean : （可选项）是否禁言
	 */
	muteUserFromTeam(params:yunxinIM_muteUserFromTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `禁言全体普通成员`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `isMute` :boolean : （可选项）是否禁言
	 */
	muteAllFromTeam(params:yunxinIM_muteAllFromTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取群内被禁言的成员列表，绝大多数情况这个请求都是从本地读取缓存并同步返回，但是由于群成员信息量较大， SDK 采取的是登录后延迟拉取的策略，考虑到用户网络等问题, SDK 有可能没有及时缓存群成员信息,那么这个请求将是个带网络请求的异步操作(增量请求)。同时这个接口会去请求本地没有缓存的群用户的资料信息，但不会触发 onUserInfoChanged 回调`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 */
	fetchTeamMutedMembers(params:yunxinIM_fetchTeamMutedMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群组名称`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `teamName` :string : 群组名称
	 */
	updateTeamName(params:yunxinIM_updateTeamName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群组头像`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `teamAvatarUrl` :string : 群组头像 Url
	 */
	updateTeamAvatar(params:yunxinIM_updateTeamAvatar_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群介绍`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `intro` :string : 群介绍
	 */
	updateTeamIntro(params:yunxinIM_updateTeamIntro_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群公告`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `announcement` :string : 群公告
	 */
	updateTeamAnnouncement(params:yunxinIM_updateTeamAnnouncement_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群组验证方式`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `joinMode` :number : 验证方式
	 */
	updateTeamJoinMode(params:yunxinIM_updateTeamJoinMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群组被邀请人验证方式`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `beInviteMode` :number : 邀请方式
	 */
	updateTeamBeInviteMode(params:yunxinIM_updateTeamBeInviteMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群组邀请他人方式`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `inviteMode` :number : 邀请方式
	 */
	updateTeamInviteMode(params:yunxinIM_updateTeamInviteMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更改群组更新信息的权限`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `infoMode` :number : 群信息修改权限
	 */
	updateTeamUpdateInfoMode(params:yunxinIM_updateTeamUpdateInfoMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更改群组更新自定义字段的权限`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `clientCustomMode` :number : 修改谁有权限更新群组自定义字段
	 */
	updateTeamUpdateClientCustomMode(params:yunxinIM_updateTeamUpdateClientCustomMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群自定义信息`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `customInfo` :string : 群自定义信息
	 */
	updateTeamCustomInfo(params:yunxinIM_updateTeamCustomInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群通知状态`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `notifyState` :number : 群通知状态
	 */
	updateTeamNotifyState(params:yunxinIM_updateTeamNotifyState_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询群通知状态`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 */
	fetchTeamNotifyState(params:yunxinIM_fetchTeamNotifyState_Params, callback?: (ret:JSON) => void):void

	/** 群组相关监听*/ 
	addTeamListen(callback?: (ret:JSON) => void):void

	/** 移除群组相关监听（仅android支持）*/ 
	removeTeamListen():void

}
interface yunxinIM_kickOtherClient_Params {
	/**要踢下线的客户端*/ 
	client:number,

}

interface yunxinIM_sendText_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**发送的消息*/ 
	text:string,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

	/**（可选项）如果失败后是否重发（仅android支持）*/ 
	reSend?:boolean,

}

interface yunxinIM_sendImage_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**要发送的图片的路径，要求本地路径（fs://、widget://）（android仅支持fs路径）*/ 
	path:string,

	/**（可选项）文件展示名*/ 
	displayName?:string,

	/**（可选项）压缩参数，可传入0.0-1.0的值，如果传入非法参数，则按照 0.5 进行压缩（仅iOS支持）*/ 
	compressQuality?:number,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

	/**（可选项）如果失败后是否重发（仅android支持）*/ 
	reSend?:boolean,

}

interface yunxinIM_sendVoice_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**要发送的语音的路径，要求本地路径（fs://、widget://）（android仅支持fs路径）*/ 
	path:string,

	/**（可选项）语音时长，毫秒为单位*/ 
	duration?:number,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

	/**（可选项）如果失败后是否重发（仅android支持）*/ 
	reSend?:boolean,

}

interface yunxinIM_sendVideo_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**要发送的视频的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**视频展示名*/ 
	displayName:string,

	/**（可选项）视频时长，毫秒为单位*/ 
	duration?:number,

	/**视频宽度（仅android支持）*/ 
	width:number,

	/**视频高度（仅android支持）*/ 
	height:number,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

	/**（可选项）如果失败后是否重发（仅android支持）*/ 
	reSend?:boolean,

}

interface yunxinIM_sendFile_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**要发送的文件的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**文件显示名*/ 
	displayName:string,

	/**文件拓展名（仅iOS支持）*/ 
	extension:string,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

	/**（可选项）如果失败后是否重发（仅android支持）*/ 
	reSend?:boolean,

}

interface yunxinIM_sendLocation_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**要发送的地址*/ 
	address:string,

	/**纬度*/ 
	latitude:number,

	/**经度*/ 
	longitude:number,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

	/**（可选项）如果失败后是否重发（仅android支持）*/ 
	reSend?:boolean,

}

interface yunxinIM_sendTip_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**要发送的消息（仅iOS支持）*/ 
	text:string,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

	/**（可选项）如果失败后是否重发（仅android支持）*/ 
	reSend?:boolean,

}

interface yunxinIM_cancelSendingMessage_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**消息Id*/ 
	messageId:string,

}

interface yunxinIM_resendMessage_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**消息Id*/ 
	messageId:string,

}

interface yunxinIM_forwardMessage_Params {
	/**会话ID*/ 
	sessionId:string,

	/**转发到ID*/ 
	toSessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**（可选项）转发到的会话类型*/ 
	toChatType?:number,

	/**消息Id，*/ 
	messageId:string,

	/**（可选项）如果失败后是否重发（仅android支持）*/ 
	reSend?:boolean,

}

interface yunxinIM_revokeMessage_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**消息Id*/ 
	messageId:string,

}

interface yunxinIM_sendMessageReceipt_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**当前会话的最后一条消息Id*/ 
	messageId:string,

}

interface yunxinIM_sendTeamMessageReceipts_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**条消息Id数组*/ 
	messageIds:Array,

	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**条消息Id数组*/ 
	messageIds:Array,

}

interface yunxinIM_sendTeamMessageReceipts_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**条消息Id数组*/ 
	messageIds:Array,

	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**条消息Id数组*/ 
	messageIds:Array,

}

interface yunxinIM_creatRecentSession_Params {
	/**会话ID（仅iOS支持）*/ 
	sessionId:string,

	/**当前会话的最后一条消息Id*/ 
	messageId:string,

	/**（可选项）会话类型（仅iOS支持）*/ 
	chatType?:number,

}

interface yunxinIM_deleteRecentSession_Params {
	/**会话ID（如果不通知观察者 android端需要未allRecentSessions接口最近一次返回数据中会话 ID）*/ 
	sessionId:string,

	/**会话类型；0：P2P，1：Team，2：ChatRoom，3：Ysf，5：SUPER_TEAM（android端通知观察者时需要）*/ 
	sessionType:number,

	/**（可选项）是否通知观察者（仅android支持）*/ 
	notifyOb?:boolean,

}

interface yunxinIM_updateRecentLocalExt_Params {
	/**会话ID*/ 
	sessionId:string,

}

interface yunxinIM_markAllMessagesReadInSession_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

}

interface yunxinIM_deleteRemoteSessions_Params {
	/**会话列表*/ 
	sessions:Array,

}

interface yunxinIM_messagesInSession_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**消息Id（android端此消息必须为上次获取结果中消息或pullMessageHistory接口上次获取结果中id，*/ 
	messageId:string,

	/**（可选项）查询方向（仅android支持）*/ 
	direction?:string,

	/**（可选项）查询条数（仅android支持）*/ 
	limit?:number,

	/**（可选项）是否已time为排序字段（仅android支持）*/ 
	asc?:boolean,

}

interface yunxinIM_pullMessageHistory_Params {
	/**（可选项）从这条消息往前获取（此消息必须为上次获取的消息id）*/ 
	messageId?:string,

	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**（可选项）获取多少条消息，最大值为100*/ 
	limit?:number,

	/**（可选项）获取的漫游消息记录，是否保存到本地消息数据库*/ 
	persist?:boolean,

	/**（可选项）是否保存清除记录之前的消息到本地数据库*/ 
	persistClear?:boolean,

}

interface yunxinIM_messagesInSessionWithMessageIds_Params {
	/**会话ID（仅iOS支持）*/ 
	sessionId:string,

	/**（可选项）会话类型（仅IOS支持）*/ 
	chatType?:number,

	/**消息Id数组*/ 
	messageIds:Array,

}

interface yunxinIM_deleteMessage_Params {
	/**会话ID（仅iOS支持）*/ 
	sessionId:string,

	/**（可选项）会话类型（仅iOS支持）*/ 
	chatType?:number,

	/**消息Id*/ 
	messageId:string,

}

interface yunxinIM_deleteAllmessagesInSession_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**（可选项）是否移除对应最近会话，设置为 true 时将同时删除最近会话信息（仅iOS支持）*/ 
	removeSession?:boolean,

	/**（可选项）是否删除消息表，默认情况下云信采用标记的方式进行消息删除，如果设置为 true，将一并移除对应的消息表，进而减少消息表数量，加快 I/O（仅iOS支持）*/ 
	removeTable?:boolean,

}

interface yunxinIM_deleteAllMessages_Params {
	/**（可选项）是否移除对应最近会话，设置为 true 时将同时删除最近会话信息*/ 
	removeSession?:boolean,

	/**（可选项）是否删除消息表，默认情况下云信采用标记的方式进行消息删除，如果设置为 true，将一并移除对应的消息表，进而减少消息表数量，加快 I/O*/ 
	removeTable?:boolean,

}

interface yunxinIM_requestFriend_Params {
	/**目标用户ID*/ 
	userId:string,

	/**（可选项）操作类型*/ 
	operation?:number,

	/**附言*/ 
	message:string,

}

interface yunxinIM_deleteFriend_Params {
	/**好友Id*/ 
	userId:string,

	/**（可选项）是否同时删除备注*/ 
	removeAlias?:boolean,

}

interface yunxinIM_isMyFriend_Params {
	/**用户Id*/ 
	userId:string,

}

interface yunxinIM_addToBlackList_Params {
	/**用户Id*/ 
	userId:string,

}

interface yunxinIM_removeFromBlackList_Params {
	/**用户Id*/ 
	userId:string,

}

interface yunxinIM_isUserInBlackList_Params {
	/**用户Id*/ 
	userId:string,

}

interface yunxinIM_setMute_Params {
	/**用户Id*/ 
	userId:string,

	/**（可选项）是否免打扰*/ 
	isNotify?:boolean,

}

interface yunxinIM_isMute_Params {
	/**用户Id*/ 
	userId:string,

}

interface yunxinIM_searchUser_Params {
	/**搜索文本*/ 
	searchContent:string,

	/**（可选项）忽略大小写*/ 
	ignoreingCase?:boolean,

	/**（可选项）搜索文本的搜索范围*/ 
	searchRange?:number,

	/**（可选项）搜索文本的搜索范围*/ 
	searchContentOption?:number,

}

interface yunxinIM_getUserInfoList_Params {
	/**用户id数组*/ 
	userIds:Array,

}

interface yunxinIM_fetchSystemNotifications_Params {
	/**最大获取数*/ 
	limit:number,

	/**数据库查询偏移量（仅android支持）*/ 
	offset:number,

}

interface yunxinIM_createTeam_Params {
	/**用户ID列表*/ 
	users:Array,

	/**创建群选项*/ 
	option:JSON,

}

interface yunxinIM_dismissTeam_Params {
	/**群组ID*/ 
	teamId:string,

}

interface yunxinIM_applyToTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**（可选项）申请消息*/ 
	message?:string,

}

interface yunxinIM_passApplyToTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**申请的用户 ID*/ 
	userId:string,

}

interface yunxinIM_rejectApplyToTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**申请的用户 ID*/ 
	userId:string,

	/**（可选项）拒绝理由*/ 
	reason?:string,

}

interface yunxinIM_invitationToTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**用户ID列表*/ 
	users:Array,

	/**（可选项）邀请附言*/ 
	postscript?:string,

	/**（可选项）扩展消息*/ 
	attach?:string,

}

interface yunxinIM_acceptInviteWithTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**邀请者 ID*/ 
	invitorId:string,

}

interface yunxinIM_rejectInviteWithTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**邀请者 ID*/ 
	invitorId:string,

	/**（可选项）拒绝原因*/ 
	reason?:string,

}

interface yunxinIM_kickUsersFromTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**需要移除的用户ID列表*/ 
	users:string,

}

interface yunxinIM_quitTeam_Params {
	/**群组ID*/ 
	teamId:string,

}

interface yunxinIM_fetchTeamMembers_Params {
	/**群组ID*/ 
	teamId:string,

}

interface yunxinIM_teamMember_Params {
	/**群组ID*/ 
	teamId:string,

	/**用户ID*/ 
	userId:string,

}

interface yunxinIM_updateUserNick_Params {
	/**群组ID*/ 
	teamId:string,

	/**群成员ID*/ 
	userId:string,

	/**新的群成员昵称*/ 
	newNick:string,

}

interface yunxinIM_isMyTeam_Params {
	/**群组ID*/ 
	teamId:string,

}

interface yunxinIM_transferManagerWithTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**新群主ID*/ 
	newOwnerId:string,

	/**（可选项）是否同时离开群组*/ 
	isLeave?:boolean,

}

interface yunxinIM_addManagersToTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**需要添加为管理员的用户ID列表*/ 
	users:Array,

}

interface yunxinIM_removeManagersFromTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**需要添加为管理员的用户ID列表*/ 
	users:Array,

}

interface yunxinIM_muteUserFromTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**用户ID*/ 
	userId:string,

	/**（可选项）是否禁言*/ 
	isMute?:boolean,

}

interface yunxinIM_muteAllFromTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**（可选项）是否禁言*/ 
	isMute?:boolean,

}

interface yunxinIM_fetchTeamMutedMembers_Params {
	/**群组ID*/ 
	teamId:string,

}

interface yunxinIM_updateTeamName_Params {
	/**群组ID*/ 
	teamId:string,

	/**群组名称*/ 
	teamName:string,

}

interface yunxinIM_updateTeamAvatar_Params {
	/**群组ID*/ 
	teamId:string,

	/**群组头像 Url*/ 
	teamAvatarUrl:string,

}

interface yunxinIM_updateTeamIntro_Params {
	/**群组ID*/ 
	teamId:string,

	/**群介绍*/ 
	intro:string,

}

interface yunxinIM_updateTeamAnnouncement_Params {
	/**群组ID*/ 
	teamId:string,

	/**群公告*/ 
	announcement:string,

}

interface yunxinIM_updateTeamJoinMode_Params {
	/**群组ID*/ 
	teamId:string,

	/**验证方式*/ 
	joinMode:number,

}

interface yunxinIM_updateTeamBeInviteMode_Params {
	/**群组ID*/ 
	teamId:string,

	/**邀请方式*/ 
	beInviteMode:number,

}

interface yunxinIM_updateTeamInviteMode_Params {
	/**群组ID*/ 
	teamId:string,

	/**邀请方式*/ 
	inviteMode:number,

}

interface yunxinIM_updateTeamUpdateInfoMode_Params {
	/**群组ID*/ 
	teamId:string,

	/**群信息修改权限*/ 
	infoMode:number,

}

interface yunxinIM_updateTeamUpdateClientCustomMode_Params {
	/**群组ID*/ 
	teamId:string,

	/**修改谁有权限更新群组自定义字段*/ 
	clientCustomMode:number,

}

interface yunxinIM_updateTeamCustomInfo_Params {
	/**群组ID*/ 
	teamId:string,

	/**群自定义信息*/ 
	customInfo:string,

}

interface yunxinIM_updateTeamNotifyState_Params {
	/**群组ID*/ 
	teamId:string,

	/**群通知状态*/ 
	notifyState:number,

}

interface yunxinIM_fetchTeamNotifyState_Params {
	/**群组ID*/ 
	teamId:string,

}

interface chivoxLongman {
	/**  初始化引擎*/ 
	initEngine():void

	/** 销毁引擎*/ 
	destroyEngine():void

	/** 开始录音*/ 
	startRecord():void

	/** 停止录音*/ 
	stopRecord():void

}
interface jdKepler {
	/** 初始化sdk。 此接口仅支持Android。*/ 
	init():void

	/** 登录授权*/ 
	login():void

	/** 取消授权*/ 
	cancelAuth():void

	/**
	 * `通过URL打开任意商品页面`
	 * ========params==========
	 *
	 * `url` :string : （可选项）页面url
	 *
	 * `jumpType` :any : （可选项）跳转类型 1代表present 2代表push
	 */
	openPage(params:jdKepler_openPage_Params):void

	/**
	 * `通过SKU打开Kepler单品页`
	 * ========params==========
	 *
	 * `sku` :string : 商品SKU
	 *
	 * `jumpType` :any : （可选项）跳转类型 1代表present 2代表push
	 */
	openDetail(params:jdKepler_openDetail_Params):void

	/**
	 * `打开订单列表`
	 * ========params==========
	 *
	 * `jumpType` :any : （可选项）跳转类型 1代表present 2代表push
	 */
	openOrderList(params:jdKepler_openOrderList_Params):void

	/**
	 * `打开导航页`
	 * ========params==========
	 *
	 * `jumpType` :any : （可选项）跳转类型 1代表present 2代表push
	 */
	openNav(params:jdKepler_openNav_Params):void

	/**
	 * `根据搜索关键字打开搜索结果页`
	 * ========params==========
	 *
	 * `searchKey` :string : 搜索关键字
	 *
	 * `jumpType` :any : （可选项）跳转类型 1代表present 2代表push
	 */
	openSearch(params:jdKepler_openSearch_Params):void

	/**
	 * `打开购物车界面`
	 * ========params==========
	 *
	 * `jumpType` :any : （可选项）跳转类型 1代表present 2代表push
	 */
	openShoppingCart(params:jdKepler_openShoppingCart_Params):void

	/**
	 * `添加到购物车`
	 * ========params==========
	 *
	 * `sku` :string : 商品sku
	 *
	 * `num` :string : （可选项）商品数量
	 */
	addToCart(params:jdKepler_addToCart_Params, callback?: (ret:JSON) => void):void

}
interface jdKepler_openPage_Params {
	/**（可选项）页面url*/ 
	url?:string,

	/**（可选项）跳转类型 1代表present 2代表push*/ 
	jumpType?:any,

}

interface jdKepler_openDetail_Params {
	/**商品SKU*/ 
	sku:string,

	/**（可选项）跳转类型 1代表present 2代表push*/ 
	jumpType?:any,

}

interface jdKepler_openOrderList_Params {
	/**（可选项）跳转类型 1代表present 2代表push*/ 
	jumpType?:any,

}

interface jdKepler_openNav_Params {
	/**（可选项）跳转类型 1代表present 2代表push*/ 
	jumpType?:any,

}

interface jdKepler_openSearch_Params {
	/**搜索关键字*/ 
	searchKey:string,

	/**（可选项）跳转类型 1代表present 2代表push*/ 
	jumpType?:any,

}

interface jdKepler_openShoppingCart_Params {
	/**（可选项）跳转类型 1代表present 2代表push*/ 
	jumpType?:any,

}

interface jdKepler_addToCart_Params {
	/**商品sku*/ 
	sku:string,

	/**（可选项）商品数量*/ 
	num?:string,

}

interface SAMIDCard {
	/** 获取扫描模块状态*/ 
	getSAMStatus(callback?: (ret:JSON) => void):void

	/** 获取模块编码SAMID即安全模块编号*/ 
	getSAMID(callback?: (ret:JSON) => void):void

	/** 读取一次身份证信息*/ 
	findIDCard(callback?: (ret:JSON) => void):void

	/** 一直读取身份信息，直到读取到身份证*/ 
	findIDCardKeep(callback?: (ret:JSON) => void):void

	/** 停止一直读取身份信息*/ 
	stopFindIDCardKeep(callback?: (ret:JSON) => void):void

}
interface qupaiLive {
	/**
	 * `初始化sdk`
	 * ========params==========
	 *
	 * `appKey` :string : （必输项）申请的appKey，通过开发控制台上注册得到，进入「控制台」，点击进入应用管理中我的应用选项可查看。
	 *
	 * `appsecret` :string : （必输项）申请的appsecret，通过开发控制台上注册得到，进入「控制台」，点击进入应用管理中我的应用选项可查看。
	 *
	 * `space` :string : （必输项）存储目录 建议使用uid cid之类的信息，space是发布推流为每一个用户设置的一个流名，同时也作为直播回放的空间名称，建议设置为用户的uuid（最大支持32位，如获取的uuid大于32位请自行处理）。例如：A用户的uuid是110001，在paas平台的空间中为A用户生成一个110001的文件夹存放A用户上传的内容。。
	 */
	init(params:qupaiLive_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建直播`
	 * ========params==========
	 *
	 * `domain` :any : （必填项）获取趣拍平台上的“访问域名”；
	 */
	createLive(params:qupaiLive_createLive_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始直播`
	 * ========params==========
	 *
	 * `x` :number : （必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；
	 *
	 * `y` :number : （必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0
	 *
	 * `w` :number : （可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度
	 *
	 * `h` :number : （可选项）模块的高度；默认：所属的 Window 或 Frame 的高度
	 *
	 * `watermask` :string : （可选项）水印图片路径，仅支持widget://
	 *
	 * `maxBitrate` :number : （可选项）最大码率 （单位：bps）
	 *
	 * `bestBitrate` :number : （可选项）最优码率 （单位：bps）
	 *
	 * `minBitrate` :number : （可选项）最小码率 （单位：bps）
	 *
	 * `audioBitrate` :number : （可选项）音频码率（建议设置为32000)
	 *
	 * `cameraFront` :boolean : （可选项）设置前置摄像头或后置摄像头
	 *
	 * `videoResolution` :number : （可选项）分辨率(仅Android有效) 取值范围:240 360 480 540 720 1080
	 *
	 * `videoWidth` :number : （可选项）分辨率宽(仅iOS专用)；
	 *
	 * `videoHeight` :number : （可选项）分辨率高(仅iOS专用)；
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	startLive(params:qupaiLive_startLive_Params, callback?: (ret:JSON) => void):void

	/** 美颜开关*/ 
	skin():void

	/** 闪光灯开关*/ 
	flash():void

	/** 切换摄像头*/ 
	camera():void

	/** 断开直播链接*/ 
	disconnect():void

	/** 关闭直播*/ 
	stop():void

}
interface qupaiLive_init_Params {
	/**（必输项）申请的appKey，通过开发控制台上注册得到，进入「控制台」，点击进入应用管理中我的应用选项可查看。*/ 
	appKey:string,

	/**（必输项）申请的appsecret，通过开发控制台上注册得到，进入「控制台」，点击进入应用管理中我的应用选项可查看。*/ 
	appsecret:string,

	/**（必输项）存储目录 建议使用uid cid之类的信息，space是发布推流为每一个用户设置的一个流名，同时也作为直播回放的空间名称，建议设置为用户的uuid（最大支持32位，如获取的uuid大于32位请自行处理）。例如：A用户的uuid是110001，在paas平台的空间中为A用户生成一个110001的文件夹存放A用户上传的内容。。*/ 
	space:string,

}

interface qupaiLive_createLive_Params {
	/**（必填项）获取趣拍平台上的“访问域名”；*/ 
	domain:any,

}

interface qupaiLive_startLive_Params {
	/**（必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；*/ 
	x:number,

	/**（必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0*/ 
	y:number,

	/**（可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度*/ 
	w?:number,

	/**（可选项）模块的高度；默认：所属的 Window 或 Frame 的高度*/ 
	h?:number,

	/**（可选项）水印图片路径，仅支持widget://*/ 
	watermask?:string,

	/**（可选项）最大码率 （单位：bps）*/ 
	maxBitrate?:number,

	/**（可选项）最优码率 （单位：bps）*/ 
	bestBitrate?:number,

	/**（可选项）最小码率 （单位：bps）*/ 
	minBitrate?:number,

	/**（可选项）音频码率（建议设置为32000)*/ 
	audioBitrate?:number,

	/**（可选项）设置前置摄像头或后置摄像头*/ 
	cameraFront?:boolean,

	/**（可选项）分辨率(仅Android有效) 取值范围:240 360 480 540 720 1080*/ 
	videoResolution?:number,

	/**（可选项）分辨率宽(仅iOS专用)；*/ 
	videoWidth?:number,

	/**（可选项）分辨率高(仅iOS专用)；*/ 
	videoHeight?:number,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface aliyunPush {
	/** 启动信息统计*/ 
	onAppStart():void

	/** 打开推送通道 **全量推送场景下，打开推送通道存在2-3小时延迟。其他场景实时生效***/ 
	turnOnPushChannel():void

	/** 关闭推送通道 **全量推送场景下，关闭推送通道存在2-3小时延迟。其他场景实时生效***/ 
	turnOffPushChannel():void

	/**
	 * `设置通知声音`
	 * ========params==========
	 *
	 * `soundPath` :string : 声音文件路径（仅支持fs:// & android系统本地路径）
	 */
	setNotificationSoundFilePath(params:aliyunPush_setNotificationSoundFilePath_Params):void

	/**
	 * `设置通知声音`
	 * ========params==========
	 *
	 * `startHour` :number : 免打扰的起始时间（小时）
	 *
	 * `startMinute` :number : 免打扰的起始时间（分钟）
	 *
	 * `endHour` :number : 免打扰的结束时间（小时）
	 *
	 * `endMinute` :number : 免打扰的结束时间（分钟）
	 */
	setDoNotDisturb(params:aliyunPush_setDoNotDisturb_Params, callback?: (ret:JSON) => void):void

	/** 清空所有通知*/ 
	clearNotifications():void

	/** 关闭免打扰模式*/ 
	closeDoNotDisturbMode():void

	/** 将设备与电话号绑定 **为提高信息的到达率和实效性，扩展推送的使用场景，我们推出了推送与短信的融合通知模式。开发者可以设置在一定时间内，如果用户未收到或未点击推送，通过短信补发通知用户，具体方案可参考：[推送短信融合](https://help.aliyun.com/document_detail/57008.html?spm=a2c4g.11186623.2.86.68aa2055470BjB)***/ 
	bindPhoneNumber():void

	/** 解除当前设备与电话号的绑定关系*/ 
	unbindPhoneNumber():void

	/** 获取设备ID*/ 
	getDeviceId():void

	/**
	 * `将应用内账号和推送通道相关联，可以实现按账号的定点消息推送；设备只能绑定一个账号，同一账号可以绑定到多个设备；同一设备更换绑定账号时无需进行解绑，重新调用绑定账号接口即可覆盖生效；若业务场景需要先解绑后绑定，在解绑账号成功回调中进行绑定绑定操作，以此保证执行的顺序性；账户名设置支持64字节。`
	 * ========params==========
	 *
	 * `account` :string : 绑定账号名
	 */
	bindAccount(params:aliyunPush_bindAccount_Params, callback?: (ret:JSON) => void):void

	/** 将应用内账号和推送通道取消关联。*/ 
	unbindAccount():void

	/**
	 * `绑定标签到指定目标；支持向设备、账号和别名绑定标签，绑定类型由参数target指定；绑定标签在10分钟内生效；App最多支持绑定1万个标签【请谨慎使用，避免标签绑定达到上限】，单个标签最大支持128字符。`
	 * ========params==========
	 *
	 * `target` :number : 目标类型
	 *
	 * `tags` :Array : 标签
	 *
	 * `alias` :string : 别名（仅当target = 3时生效）
	 */
	bindTag(params:aliyunPush_bindTag_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解绑指定目标标签；支持解绑设备、账号和别名标签，解绑类型由参数target指定；解绑标签在10分钟内生效；解绑标签不等同于删除标签，目前不支持标签的删除。`
	 * ========params==========
	 *
	 * `target` :number : 目标类型
	 *
	 * `tags` :Array : 标签
	 *
	 * `alias` :string : 别名（仅当target = 3时生效）
	 */
	unbindTag(params:aliyunPush_unbindTag_Params, callback?: (ret:JSON) => void):void

	/** 查询目标绑定标签，当前仅支持查询设备标签；查询结果可从callback的data中获取；标签绑定成功且生效（10分钟内）后即可查询。*/ 
	listTags():void

	/**
	 * `设备添加别名；单个设备最多添加128个别名，且同一别名最多添加到128个设备；别名支持128字节。`
	 * ========params==========
	 *
	 * `alias` :string : 别名
	 */
	addAlias(params:aliyunPush_addAlias_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除设备别名；支持删除指定别名和删除全部别名（alias为nil or length = 0）。`
	 * ========params==========
	 *
	 * `alias` :string : 别名
	 */
	removeAlias(params:aliyunPush_removeAlias_Params, callback?: (ret:JSON) => void):void

	/** 查询设备别名；查询结果可从callback的data中获取。*/ 
	listAliases():void

	/** 获取设备deviceToken*/ 
	deviceToken():void

	/**
	 * `同步角标数到服务端`
	 * ========params==========
	 *
	 * `badgeNum` :string : 角标数，取值范围[0,99999]
	 */
	syncBadgeNum(params:aliyunPush_syncBadgeNum_Params, callback?: (ret:JSON) => void):void

	/** 监听消息或通知事件*/ 
	addEventlistener():void

}
interface aliyunPush_setNotificationSoundFilePath_Params {
	/**声音文件路径（仅支持fs:// & android系统本地路径）*/ 
	soundPath:string,

}

interface aliyunPush_setDoNotDisturb_Params {
	/**免打扰的起始时间（小时）*/ 
	startHour:number,

	/**免打扰的起始时间（分钟）*/ 
	startMinute:number,

	/**免打扰的结束时间（小时）*/ 
	endHour:number,

	/**免打扰的结束时间（分钟）*/ 
	endMinute:number,

}

interface aliyunPush_bindAccount_Params {
	/**绑定账号名*/ 
	account:string,

}

interface aliyunPush_bindTag_Params {
	/**目标类型*/ 
	target:number,

	/**标签*/ 
	tags:Array,

	/**别名（仅当target = 3时生效）*/ 
	alias:string,

}

interface aliyunPush_unbindTag_Params {
	/**目标类型*/ 
	target:number,

	/**标签*/ 
	tags:Array,

	/**别名（仅当target = 3时生效）*/ 
	alias:string,

}

interface aliyunPush_addAlias_Params {
	/**别名*/ 
	alias:string,

}

interface aliyunPush_removeAlias_Params {
	/**别名*/ 
	alias:string,

}

interface aliyunPush_syncBadgeNum_Params {
	/**角标数，取值范围[0,99999]*/ 
	badgeNum:string,

}

interface ajAnalytics {
	/** 初始化sdk并配置必要参数*/ 
	init():void

	/** 记录自定义事件*/ 
	onEvent():void

}
interface sunlogin {
	/**
	 * `登录服务器。`
	 * ========params==========
	 *
	 * `appId` :number : （必填）注册向日葵分配的appId。
	 *
	 * `appKey` :string : （必填）注册向日葵分配的appKey。
	 */
	login(params:sunlogin_login_Params, callback?: (ret:JSON) => void):void

	/** 创建会话。(如果控制端断开了连接，就要重用调用这个方法，产生新的会话才能重新连接上。)*/ 
	createSession():void

	/** 关闭会话。*/ 
	closeSession():void

	/** 退出登录。*/ 
	logout():void

	/** 监听服务状态变化。*/ 
	setListener():void

}
interface sunlogin_login_Params {
	/**（必填）注册向日葵分配的appId。*/ 
	appId:number,

	/**（必填）注册向日葵分配的appKey。*/ 
	appKey:string,

}

interface liuLiangQianBao {
	/**
	 * `打开流量钱包`
	 * ========params==========
	 *
	 * `customId` :string : 在流量钱包申请到的开发者 id
	 *
	 * `appId` :string : 在流量钱包申请到的 appid
	 *
	 * `appSecret` :string : 在流量钱包申请到的 secret
	 *
	 * `requestKey` :string : 在流量钱包申请到的请求密钥
	 *
	 * `skinType` :string : （可选项）皮肤类型
	 */
	open(params:liuLiangQianBao_open_Params):void

}
interface liuLiangQianBao_open_Params {
	/**在流量钱包申请到的开发者 id*/ 
	customId:string,

	/**在流量钱包申请到的 appid*/ 
	appId:string,

	/**在流量钱包申请到的 secret*/ 
	appSecret:string,

	/**在流量钱包申请到的请求密钥*/ 
	requestKey:string,

	/**（可选项）皮肤类型*/ 
	skinType?:string,

}

interface alibaichuan {
	/**     初始化模块信息，打开页面require完成就去执行*/ 
	initTaeSDK():void

	/**     打开手淘授权登陆*/ 
	showLogin():void

	/**     获取已经登陆的用户的相关信息*/ 
	getUserInfo():void

	/**     退出登陆*/ 
	logout():void

	/**
	 * `    通过itemid打开宝贝，以下是正常使用，如果需要使用高佣转链功能，请参考[问题集锦](http://community.apicloud.com/bbs/forum.php?mod=viewthread&tid=59901&extra=)`
	 * ========params==========
	 *
	 * `clientType` :string : 表示唤端类型：taobao---唤起淘宝客户端；tmall---唤起天猫客户端
	 *
	 * `backUrl` :string : 小把手，唤端返回的scheme，(如果不传默认将不展示小把手；如果想展示小把手，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://")
	 *
	 * `nativeOpenFailedMode` :string : 目前原阿里系页面需要拉回手机淘宝、未安装手机淘宝，默认会跳转到对应的应用下载页。媒体可以根据需要自定义唤起手淘的失败处理方式，目前提供“降级H5应用內打开” 和 “跳转应用下载页”。注：降级H5应用內打开，由于安全策略升级，暂不支持完成整个电商交易流程，请悉知。
	 *
	 * `pid` :string : [获取pid](https://baichuan.bbs.taobao.com/detail.html?spm=a3c0d.7998981.0.0.536e2f45hTCymq&postId=7927184)
	 *
	 * `itemid` :string : 宝贝的id，itemid为打开宝贝详情后，看到浏览器里有id一项，如"https://item.taobao.com/item.htm?id=45535180986",这里的id就是itemid
	 *
	 * `ret` :any : null
	 *
	 * `err` :any : null
	 */
	showTaokeItemById(params:alibaichuan_showTaokeItemById_Params):void

	/**
	 * `    通过URL打开宝贝详情，此方法主要以url的自带佣金为准，当然也可传入高佣转链的隐藏参数，[传送门](http://community.apicloud.com/bbs/forum.php?mod=viewthread&tid=59901&extra=)`
	 * ========params==========
	 *
	 * `url` :string : 商品URL地址, 或者优惠券地址
	 *
	 * `clientType` :string : 表示唤端类型：taobao---唤起淘宝客户端；tmall---唤起天猫客户端
	 *
	 * `backUrl` :string : 小把手，唤端返回的scheme，(如果不传默认将不展示小把手；如果想展示小把手，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://")
	 *
	 * `nativeOpenFailedMode` :string : 目前原阿里系页面需要拉回手机淘宝、未安装手机淘宝，默认会跳转到对应的应用下载页。媒体可以根据需要自定义唤起手淘的失败处理方式，目前提供“降级H5应用內打开” 和 “跳转应用下载页”。注：降级H5应用內打开，由于安全策略升级，暂不支持完成整个电商交易流程，请悉知。
	 *
	 * `pid` :string : [获取pid](https://baichuan.bbs.taobao.com/detail.html?spm=a3c0d.7998981.0.0.536e2f45hTCymq&postId=7927184)
	 *
	 * `ret` :any : null
	 *
	 * `err` :any : null
	 */
	showDetailByURL(params:alibaichuan_showDetailByURL_Params):void

	/**     打开我的购物车*/ 
	openMyCart():void

	/**
	 * `    打开我的订单`
	 * ========params==========
	 *
	 * `status` :number : 默认跳转页面, 0：全部；1：待付款；2：待发货；3：待收货；4：待评价。 若传入的不是这几个数字，则跳转到“全部”页面且“allOrder”失效
	 *
	 * `isAllOrder` :boolean : true：显示全部订单，建议填true，不管status传什么都填true
	 *
	 * `clientType` :string : 表示唤端类型：taobao---唤起淘宝客户端；tmall---唤起天猫客户端
	 *
	 * `backUrl` :string : 小把手，唤端返回的scheme，(如果不传默认将不展示小把手；如果想展示小把手，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://")
	 *
	 * `nativeOpenFailedMode` :string : 目前原阿里系页面需要拉回手机淘宝、未安装手机淘宝，默认会跳转到对应的应用下载页。媒体可以根据需要自定义唤起手淘的失败处理方式，目前提供“降级H5应用內打开” 和 “跳转应用下载页”。注：降级H5应用內打开，由于安全策略升级，暂不支持完成整个电商交易流程，请悉知。
	 *
	 * `pid` :string : [获取pid](https://baichuan.bbs.taobao.com/detail.html?spm=a3c0d.7998981.0.0.536e2f45hTCymq&postId=7927184)
	 *
	 * `pageType` :string : 此功能阿里暂未支持，待支持后可以在这里传人pageType：如商品详情“detail”，购物车“cart”，具体看官方的更新：2-(2)-b [传送门](https://baichuan.taobao.com/docs/doc.htm?spm=a3c0d.7629140.0.0.67e6be48UBr2Br&treeId=129&articleId=118122&docType=1)
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	myOrdersPage(params:alibaichuan_myOrdersPage_Params):void

	/**
	 * `    打开商家店铺`
	 * ========params==========
	 *
	 * `shopid` :string : 商家店铺ID
	 *
	 * `clientType` :string : 表示唤端类型：taobao---唤起淘宝客户端；tmall---唤起天猫客户端
	 *
	 * `backUrl` :string : 小把手，唤端返回的scheme，(如果不传默认将不展示小把手；如果想展示小把手，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://")
	 *
	 * `nativeOpenFailedMode` :string : 目前原阿里系页面需要拉回手机淘宝、未安装手机淘宝，默认会跳转到对应的应用下载页。媒体可以根据需要自定义唤起手淘的失败处理方式，目前提供“降级H5应用內打开” 和 “跳转应用下载页”。注：降级H5应用內打开，由于安全策略升级，暂不支持完成整个电商交易流程，请悉知。
	 *
	 * `pid` :string : [获取pid](https://baichuan.bbs.taobao.com/detail.html?spm=a3c0d.7998981.0.0.536e2f45hTCymq&postId=7927184)
	 *
	 * `sellerId` :string : 卖家ID，淘宝联盟-联盟产品-单品店铺推广-店铺推广里的user_number_id：如“https://handuyishe.tmall.com/shop/view_shop.htm?user_number_id=263817957&ali_trackid=2%3Amm_112712463_17294774_66324446%3A1568700525_248_1572113213”
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	openShopPage(params:alibaichuan_openShopPage_Params):void

	/**
	 * `    设置渠道信息（如果有特殊渠道专享价，需要设置，默认不要使用），初始化完成后调用才能生效`
	 * ========params==========
	 *
	 * `typeName` :string : 渠道类型（默认为：0）
	 *
	 * `channelName` :string : 渠道名称（默认为空：""）
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	setChannel(params:alibaichuan_setChannel_Params):void

	/**
	 * `    设置isv版本，提供isvcode全局接口，设置isv的版本 ，默认1.0.0，初始化完成后调用才能生效`
	 * ========params==========
	 *
	 * `isvVersion` :string : isvVersion (默认1.0.0)
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	setISVVersion(params:alibaichuan_setISVVersion_Params):void

	/**
	 * `    设置是否使用同步淘客打点。true：使用淘客同步打点；false：关闭同步打点，使用异步打点；注意：初始化完成后调用才能生效.`
	 * ========params==========
	 *
	 * `isSyncForTaoke` :boolean : 设置是否使用同步淘客打点。true：使用淘客同步打点；false：关闭同步打点，使用异步打点；
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	setSyncForTaoke(params:alibaichuan_setSyncForTaoke_Params):void

}
interface alibaichuan_showTaokeItemById_Params {
	/**表示唤端类型：taobao---唤起淘宝客户端；tmall---唤起天猫客户端*/ 
	clientType:string,

	/**小把手，唤端返回的scheme，(如果不传默认将不展示小把手；如果想展示小把手，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://")*/ 
	backUrl:string,

	/**目前原阿里系页面需要拉回手机淘宝、未安装手机淘宝，默认会跳转到对应的应用下载页。媒体可以根据需要自定义唤起手淘的失败处理方式，目前提供“降级H5应用內打开” 和 “跳转应用下载页”。注：降级H5应用內打开，由于安全策略升级，暂不支持完成整个电商交易流程，请悉知。*/ 
	nativeOpenFailedMode:string,

	/**[获取pid](https://baichuan.bbs.taobao.com/detail.html?spm=a3c0d.7998981.0.0.536e2f45hTCymq&postId=7927184)*/ 
	pid:string,

	/**宝贝的id，itemid为打开宝贝详情后，看到浏览器里有id一项，如"https://item.taobao.com/item.htm?id=45535180986",这里的id就是itemid*/ 
	itemid:string,

	/**null*/ 
	ret:any,

	/**null*/ 
	err:any,

}

interface alibaichuan_showDetailByURL_Params {
	/**商品URL地址, 或者优惠券地址*/ 
	url:string,

	/**表示唤端类型：taobao---唤起淘宝客户端；tmall---唤起天猫客户端*/ 
	clientType:string,

	/**小把手，唤端返回的scheme，(如果不传默认将不展示小把手；如果想展示小把手，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://")*/ 
	backUrl:string,

	/**目前原阿里系页面需要拉回手机淘宝、未安装手机淘宝，默认会跳转到对应的应用下载页。媒体可以根据需要自定义唤起手淘的失败处理方式，目前提供“降级H5应用內打开” 和 “跳转应用下载页”。注：降级H5应用內打开，由于安全策略升级，暂不支持完成整个电商交易流程，请悉知。*/ 
	nativeOpenFailedMode:string,

	/**[获取pid](https://baichuan.bbs.taobao.com/detail.html?spm=a3c0d.7998981.0.0.536e2f45hTCymq&postId=7927184)*/ 
	pid:string,

	/**null*/ 
	ret:any,

	/**null*/ 
	err:any,

}

interface alibaichuan_myOrdersPage_Params {
	/**默认跳转页面, 0：全部；1：待付款；2：待发货；3：待收货；4：待评价。 若传入的不是这几个数字，则跳转到“全部”页面且“allOrder”失效*/ 
	status:number,

	/**true：显示全部订单，建议填true，不管status传什么都填true*/ 
	isAllOrder:boolean,

	/**表示唤端类型：taobao---唤起淘宝客户端；tmall---唤起天猫客户端*/ 
	clientType:string,

	/**小把手，唤端返回的scheme，(如果不传默认将不展示小把手；如果想展示小把手，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://")*/ 
	backUrl:string,

	/**目前原阿里系页面需要拉回手机淘宝、未安装手机淘宝，默认会跳转到对应的应用下载页。媒体可以根据需要自定义唤起手淘的失败处理方式，目前提供“降级H5应用內打开” 和 “跳转应用下载页”。注：降级H5应用內打开，由于安全策略升级，暂不支持完成整个电商交易流程，请悉知。*/ 
	nativeOpenFailedMode:string,

	/**[获取pid](https://baichuan.bbs.taobao.com/detail.html?spm=a3c0d.7998981.0.0.536e2f45hTCymq&postId=7927184)*/ 
	pid:string,

	/**此功能阿里暂未支持，待支持后可以在这里传人pageType：如商品详情“detail”，购物车“cart”，具体看官方的更新：2-(2)-b [传送门](https://baichuan.taobao.com/docs/doc.htm?spm=a3c0d.7629140.0.0.67e6be48UBr2Br&treeId=129&articleId=118122&docType=1)*/ 
	pageType:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface alibaichuan_openShopPage_Params {
	/**商家店铺ID*/ 
	shopid:string,

	/**表示唤端类型：taobao---唤起淘宝客户端；tmall---唤起天猫客户端*/ 
	clientType:string,

	/**小把手，唤端返回的scheme，(如果不传默认将不展示小把手；如果想展示小把手，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://")*/ 
	backUrl:string,

	/**目前原阿里系页面需要拉回手机淘宝、未安装手机淘宝，默认会跳转到对应的应用下载页。媒体可以根据需要自定义唤起手淘的失败处理方式，目前提供“降级H5应用內打开” 和 “跳转应用下载页”。注：降级H5应用內打开，由于安全策略升级，暂不支持完成整个电商交易流程，请悉知。*/ 
	nativeOpenFailedMode:string,

	/**[获取pid](https://baichuan.bbs.taobao.com/detail.html?spm=a3c0d.7998981.0.0.536e2f45hTCymq&postId=7927184)*/ 
	pid:string,

	/**卖家ID，淘宝联盟-联盟产品-单品店铺推广-店铺推广里的user_number_id：如“https://handuyishe.tmall.com/shop/view_shop.htm?user_number_id=263817957&ali_trackid=2%3Amm_112712463_17294774_66324446%3A1568700525_248_1572113213”*/ 
	sellerId:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface alibaichuan_setChannel_Params {
	/**渠道类型（默认为：0）*/ 
	typeName:string,

	/**渠道名称（默认为空：""）*/ 
	channelName:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface alibaichuan_setISVVersion_Params {
	/**isvVersion (默认1.0.0)*/ 
	isvVersion:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface alibaichuan_setSyncForTaoke_Params {
	/**设置是否使用同步淘客打点。true：使用淘客同步打点；false：关闭同步打点，使用异步打点；*/ 
	isSyncForTaoke:boolean,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface x5ac {
	/**
	 * `首先需要初始化远端主机IP，通过传入远端主机IP，以便后续与该主机进行通信。`
	 * ========params==========
	 *
	 * `targetIP` :string : 远端主机IP
	 */
	connect(params:x5ac_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `校验动态密码是否正确。`
	 * ========params==========
	 *
	 * `checkSecret` :string : 输入密码
	 */
	checkDynamicSecret(params:x5ac_checkDynamicSecret_Params, callback?: (ret:JSON) => void):void

	/** 通知A模块进入待机状态。*/ 
	notifyToWait():void

	/**
	 * `人脸识别是否成功，需通知A模块。`
	 * ========params==========
	 *
	 * `success` :boolean : 需通知A模块。
	 */
	recognizeFace(params:x5ac_recognizeFace_Params, callback?: (ret:JSON) => void):void

	/**
	 * `可视通话开门，需传入相应的token给A模块验证。`
	 * ========params==========
	 *
	 * `token` :string : 传入token
	 */
	videoCallToOpen(params:x5ac_videoCallToOpen_Params, callback?: (ret:JSON) => void):void

	/** 释放资源*/ 
	release():void

	/** 设置开门结果的监听器：*/ 
	listenOpenStatus():void

	/** 通联微信支付接口*/ 
	listenKeyValue():void

}
interface x5ac_connect_Params {
	/**远端主机IP*/ 
	targetIP:string,

}

interface x5ac_checkDynamicSecret_Params {
	/**输入密码*/ 
	checkSecret:string,

}

interface x5ac_recognizeFace_Params {
	/**需通知A模块。*/ 
	success:boolean,

}

interface x5ac_videoCallToOpen_Params {
	/**传入token*/ 
	token:string,

}

interface vinOCR {
	/**
	 * `开启识别控件`
	 * ========params==========
	 *
	 * `devcode` :string : 授权开发码
	 *
	 * `currentType` :number : （可选项）识别类型
	 */
	openView(params:vinOCR_openView_Params, callback?: (ret:JSON) => void):void

	/** 关闭识别控件*/ 
	closeView():void

}
interface vinOCR_openView_Params {
	/**授权开发码*/ 
	devcode:string,

	/**（可选项）识别类型*/ 
	currentType?:number,

}

interface braintreeApplePay {
	/** 判断手机是否支持 Apple Pay 功能*/ 
	isSupportPayments():void

	/** 判断手机是否已加载有可用的支付卡片*/ 
	canMakePayments():void

	/** 跳转到钱包设置添加银行卡、信用卡*/ 
	addCard():void

	/**
	 * `初始化`
	 * ========params==========
	 *
	 * `token` :string : 从服务器获取的token
	 */
	initWithToken(params:braintreeApplePay_initWithToken_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发起支付请求`
	 * ========params==========
	 *
	 * `countryCode` :string : The merchant's ISO country code.
	 *
	 * `currencyCode` :string : Currency code for this payment.
	 *
	 * `merchantIdentifier` :string : Identifies the merchant, as previously agreed with Apple.  Must match one of the merchant identifiers in the application's entitlement.
	 *
	 * `items` :Array : 商品列表
	 */
	paymentRequest(params:braintreeApplePay_paymentRequest_Params, callback?: (ret:JSON) => void):void

	/** 获取 nonce 监听，成功获取 nonce 后开始发到服务器端扣款*/ 
	didAuthorizePaymentListener(callback?: (ret:JSON) => void):void

	/** 监听完成事件*/ 
	didFinishListener():void

	/**
	 * `设置苹果支付状态`
	 * ========params==========
	 *
	 * `status` :string : 支付状态
	 */
	setApplePayStatus(params:braintreeApplePay_setApplePayStatus_Params):void

}
interface braintreeApplePay_initWithToken_Params {
	/**从服务器获取的token*/ 
	token:string,

}

interface braintreeApplePay_paymentRequest_Params {
	/**The merchant's ISO country code.*/ 
	countryCode:string,

	/**Currency code for this payment.*/ 
	currencyCode:string,

	/**Identifies the merchant, as previously agreed with Apple.  Must match one of the merchant identifiers in the application's entitlement.*/ 
	merchantIdentifier:string,

	/**商品列表*/ 
	items:Array,

}

interface braintreeApplePay_setApplePayStatus_Params {
	/**支付状态*/ 
	status:string,

}

interface superFile {
	/**
	 * `打开文件`
	 * ========params==========
	 *
	 * `path` :string : (必选项) 文件路径 android支持fs或者绝对路径
	 */
	open(params:superFile_open_Params):void

	/** 打开文件*/ 
	openView():void

	/** 隐藏窗口*/ 
	hide():void

	/** 显示窗口*/ 
	show():void

	/** 关闭窗口*/ 
	close():void

}
interface superFile_open_Params {
	/**(必选项) 文件路径 android支持fs或者绝对路径*/ 
	path:string,

}

interface vlcPlayer {
	/**
	 * `打开播放器界面`
	 * ========params==========
	 *
	 * `rect` :JSON : (可选项）播放器的位置及长宽
	 *
	 * `texts` :JSON : （可选项）顶部标题文字
	 *
	 * `styles` :JSON : （可选项）模块的样式设置
	 *
	 * `path` :string : 视频资源地址,支持网络和本地路径（fs://，widget://）
	 *
	 * `autoPlay` :boolean : （可选项）打开时是否自动播放
	 *
	 * `isAutorotate` :boolean : （可选项）是否支持自动转屏；为false isFullBtn自动为false
	 *
	 * `isShowProcessView` :boolean : （可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动 默认为false】
	 *
	 * `isShowTimeLable` :boolean : （可选项）是否显示播放时间 (显示:true ; 不显示:false)备注:直播流自动 默认为false】
	 *
	 * `isLive` :boolean : （可选项）是否直播视频源 （直播：true；点播：false）
	 *
	 * `enableFull` :boolean : （可选项）本次播放视频是否全屏播放，当为true时将直接全屏播放视频，x,y,w,h,fixedOn,fixed值不会生效。
	 *
	 * `isFullBtn` :boolean : （可选项）小窗口是否显示进入全屏按钮
	 *
	 * `isBackBtn` :boolean : （可选项）窗口播放时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）
	 *
	 * `isOpenGesture` :boolean : （可选项）全屏时是否开启手势控制音量，亮度和进度 （开启：true；不开启 - ：false）
	 *
	 * `coverImg` :boolean : （可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）
	 *
	 * `audio` :boolean : （可选项）播放的资源是否是音频文件，若是则开始播放后不移除封面图 coverImg
	 */
	open(params:vlcPlayer_open_Params):void

	/**
	 * `设置视频的文件路径`
	 * ========params==========
	 *
	 * `path` :string : 视频资源地址,支持网络和本地路径（fs://，widget://）
	 *
	 * `coverImg` :boolean : （可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）
	 *
	 * `title` :string : （可选项）当设置 play 接口打开的视频时，本参数表示设置该视频的标题，本参数仅对 play 接口有效
	 *
	 * `audio` :boolean : （可选项）播放的资源是否是音频文件，若是则开始播放后不移除封面图 coverImg
	 */
	setPath(params:vlcPlayer_setPath_Params):void

	/** 重新播放*/ 
	replay():void

	/** 开始播放*/ 
	play():void

	/** 暂停播放*/ 
	pause():void

	/** 关闭播放器*/ 
	close():void

	/** 显示视频播放视图*/ 
	show():void

	/** 隐藏视频播放视图*/ 
	hide():void

	/**
	 * `添加监听`
	 * ========params==========
	 *
	 * `name` :string : （可选项）所要监听的动作名称
	 */
	addEventListener(params:vlcPlayer_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除动作监听`
	 * ========params==========
	 *
	 * `name` :string : （可选项）所要移除的监听的动作名称
	 */
	removeEventListener(params:vlcPlayer_removeEventListener_Params):void

	/** 全屏播放（横屏模式）*/ 
	fullScreen():void

	/** 取消全屏播放*/ 
	cancelFullScreen():void

	/**
	 * `快进`
	 * ========params==========
	 *
	 * `seconds` :number : 快进的秒数
	 */
	forward(params:vlcPlayer_forward_Params):void

	/**
	 * `快退`
	 * ========params==========
	 *
	 * `seconds` :number : 快退的秒数
	 */
	rewind(params:vlcPlayer_rewind_Params):void

	/**
	 * `跳转`
	 * ========params==========
	 *
	 * `seconds` :number : 跳转到音视频播放的秒数
	 */
	seekTo(params:vlcPlayer_seekTo_Params):void

	/**
	 * `设置屏幕亮度`
	 * ========params==========
	 *
	 * `brightness` :number : （可选项）设置的屏幕的亮度，取值范围：0-100，**在 iOS 平台上设置的是系统屏幕亮度。Android 平台上设置的本应用内的屏幕亮度**
	 */
	setBrightness(params:vlcPlayer_setBrightness_Params):void

	/** 获取当前屏幕亮度值*/ 
	getBrightness():void

	/**
	 * `设置音量`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）音量大小，取值范围：0-1
	 */
	setVolume(params:vlcPlayer_setVolume_Params):void

	/** 获取当前播放音量*/ 
	getVolume():void

	/** 获取视频的时长*/ 
	getDuration():void

	/** 获取已经播放的时长*/ 
	getCurrentPosition():void

	/** 获取是否全屏播放状态*/ 
	isFullScreen():void

}
interface vlcPlayer_open_Params {
	/**(可选项）播放器的位置及长宽*/ 
	rect?:JSON,

	/**（可选项）顶部标题文字*/ 
	texts?:JSON,

	/**（可选项）模块的样式设置*/ 
	styles?:JSON,

	/**视频资源地址,支持网络和本地路径（fs://，widget://）*/ 
	path:string,

	/**（可选项）打开时是否自动播放*/ 
	autoPlay?:boolean,

	/**（可选项）是否支持自动转屏；为false isFullBtn自动为false*/ 
	isAutorotate?:boolean,

	/**（可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动 默认为false】*/ 
	isShowProcessView?:boolean,

	/**（可选项）是否显示播放时间 (显示:true ; 不显示:false)备注:直播流自动 默认为false】*/ 
	isShowTimeLable?:boolean,

	/**（可选项）是否直播视频源 （直播：true；点播：false）*/ 
	isLive?:boolean,

	/**（可选项）本次播放视频是否全屏播放，当为true时将直接全屏播放视频，x,y,w,h,fixedOn,fixed值不会生效。*/ 
	enableFull?:boolean,

	/**（可选项）小窗口是否显示进入全屏按钮*/ 
	isFullBtn?:boolean,

	/**（可选项）窗口播放时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）*/ 
	isBackBtn?:boolean,

	/**（可选项）全屏时是否开启手势控制音量，亮度和进度 （开启：true；不开启 - ：false）*/ 
	isOpenGesture?:boolean,

	/**（可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）*/ 
	coverImg?:boolean,

	/**（可选项）播放的资源是否是音频文件，若是则开始播放后不移除封面图 coverImg*/ 
	audio?:boolean,

}

interface vlcPlayer_setPath_Params {
	/**视频资源地址,支持网络和本地路径（fs://，widget://）*/ 
	path:string,

	/**（可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）*/ 
	coverImg?:boolean,

	/**（可选项）当设置 play 接口打开的视频时，本参数表示设置该视频的标题，本参数仅对 play 接口有效*/ 
	title?:string,

	/**（可选项）播放的资源是否是音频文件，若是则开始播放后不移除封面图 coverImg*/ 
	audio?:boolean,

}

interface vlcPlayer_addEventListener_Params {
	/**（可选项）所要监听的动作名称*/ 
	name?:string,

}

interface vlcPlayer_removeEventListener_Params {
	/**（可选项）所要移除的监听的动作名称*/ 
	name?:string,

}

interface vlcPlayer_forward_Params {
	/**快进的秒数*/ 
	seconds:number,

}

interface vlcPlayer_rewind_Params {
	/**快退的秒数*/ 
	seconds:number,

}

interface vlcPlayer_seekTo_Params {
	/**跳转到音视频播放的秒数*/ 
	seconds:number,

}

interface vlcPlayer_setBrightness_Params {
	/**（可选项）设置的屏幕的亮度，取值范围：0-100，**在 iOS 平台上设置的是系统屏幕亮度。Android 平台上设置的本应用内的屏幕亮度***/ 
	brightness?:number,

}

interface vlcPlayer_setVolume_Params {
	/**（可选项）音量大小，取值范围：0-1*/ 
	volume?:number,

}

interface aliBC {
	/** 初始化SDK（调用优先级最高,只需要调用一次）*/ 
	asyncInit(callback?: (ret:JSON) => void):void

	/**
	 * `设置SDK 淘客打点策略（sdk默认采用淘客同步打点）`
	 * ========params==========
	 *
	 * `isSyncForTaoke` :boolean : （可选项）设置是否使用同步淘客打点。true:使用淘客同步打点；false:关闭同步打点,使用异步打点。
	 */
	setSyncForTaoke(params:aliBC_setSyncForTaoke_Params, callback?: (ret:JSON) => void):void

	/** 开启接口免授权模式*/ 
	setIsAuthVip():void

	/**
	 * `设置App标识字段,可用于区分使用本SDK的具体三方App`
	 * ========params==========
	 *
	 * `code` :string : null
	 *
	 * `ret` :JSON : 返回值  **仅Android有返回**
	 */
	setIsvCode(params:aliBC_setIsvCode_Params):void

	/**
	 * `设置三方App版本,可用于标识App版本`
	 * ========params==========
	 *
	 * `version` :string : null
	 */
	setIsvVersion(params:aliBC_setIsvVersion_Params):void

	/**
	 * `设置三方App名字,可用于标识App名字（**仅iOS有效**）`
	 * ========params==========
	 *
	 * `name` :string : null
	 */
	setIsvAppName(params:aliBC_setIsvAppName_Params):void

	/**
	 * `设置淘客全局参数`
	 * ========params==========
	 *
	 * `pid` :string : 淘客pid,获取流程参考:[http://baichuan.taobao.com/portal/doc?articleId=220](http://baichuan.taobao.com/portal/doc?articleId=220)
	 *
	 * `adzoneId` :string : (可选项)淘宝联盟adzoneId。**高佣转链/跨店结算 功能所需**, 如果走adzoneId的方式分佣打点，需要在extraParams中显式传入taokeAppkey，否则打点失败。[功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)
	 *
	 * `extraParams` :JSON : (可选项)adzoneId参数不为空时需要此参数，
	 */
	setTaokeParams(params:aliBC_setTaokeParams_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置渠道信息（如果有渠道专享价,需要设置）`
	 * ========params==========
	 *
	 * `typeName` :string : （可选项）设置渠道类型
	 *
	 * `channelName` :string : （可选项）设置渠道名称
	 */
	setChannel(params:aliBC_setChannel_Params):void

	/** 授权登录*/ 
	showLogin(callback?: (ret:JSON) => void):void

	/** 注销*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 获取用户信息*/ 
	getUserInfo(callback?: (ret:JSON) => void):void

	/**
	 * `打开淘宝商品详情页（**注意：现在百川强制跳转手淘，如果没跳手淘而是打开的H5页面 则不能成功购买和加入购物车**）`
	 * ========params==========
	 *
	 * `itemId` :string : 商品id。支持itemId和openItemId的商品（如:37196464781L,AAHd5d-HAAeGwJedwSnHktBI）,必填,不允许为null
	 *
	 * `openType` :string : (可选项)打开页面的方式
	 *
	 * `linkKey` :string : (可选项)当打开页面的方式（openType）为native时,设置拉起手淘or天猫。（不传则走百川默认设置,建议传值）
	 *
	 * `pid` :string : 淘客pid,获取流程参考:[http://baichuan.taobao.com/portal/doc?articleId=220](http://baichuan.taobao.com/portal/doc?articleId=220)
	 *
	 * `adzoneId` :string : (可选项)淘宝联盟adzoneId。**高佣转链/跨店结算 功能所需**, 如果走adzoneId的方式分佣打点，需要在extraParams中显式传入taokeAppkey，否则打点失败。[功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)
	 *
	 * `extraParams` :JSON : (可选项)adzoneId参数不为空时需要此参数，
	 *
	 * `backUrl` :string : 用于打开手淘时的 “返回（小把手）” 的点击返回，目前**ios传空字符串，android传config.xml文件中配置的urlScheme(即tbopen+appkey)**
	 *
	 * `degradeUrl` :string : 降级url，如果唤端失败且设置了降级url，则加载该url
	 *
	 * `failModeType` :string : 用于控制没安装手淘或者没检测到手淘的时候的打开页面逻辑
	 *
	 * `pageClose` :boolean : (可选项) 购买商品支付成功后是否关闭淘宝页面。true:关闭,false:不关闭。**仅在Android H5页面生效**
	 *
	 * `trackParams` :JSON : (可选项)自定义参数（暂时没发现啥用，但百川有就保留了）
	 */
	showDetailPage(params:aliBC_showDetailPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开淘宝加入购物车页面(**该接口暂未开放**)`
	 * ========params==========
	 *
	 * `code` :string : 打开页面的控制参数
	 */
	showAddCartPage(params:aliBC_showAddCartPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开我的订单页面(**该接口暂未开放**)`
	 * ========params==========
	 *
	 * `code` :string : 打开页面的控制参数
	 *
	 * `orderStatus` :any : 默认跳转页面。0:全部；1:待付款；2:待发货；3:待收货；4:待评价
	 *
	 * `allOrder` :boolean : false 进行订单分域（只展示通过当前app下单的订单）,true 显示所有订单
	 */
	showMyOrders(params:aliBC_showMyOrders_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开我的购物车（**该接口暂不稳定，请注意测试；如不能打开可以使用showPageByUrl 传url为https://market.m.taobao.com/app/dinamic/h5-tb-cart-old/index.html实现**）`
	 * ========params==========
	 *
	 * `openType` :string : (可选项)打开页面的方式:拉起手淘/天猫 和 h5打开页面,默认值:h5
	 *
	 * `linkKey` :string : (可选项)当打开页面的方式（openType）为native时,设置拉起手淘or天猫。（不传则走百川默认设置,建议传值）
	 *
	 * `pid` :string : 淘客pid,获取流程参考:[http://baichuan.taobao.com/portal/doc?articleId=220](http://baichuan.taobao.com/portal/doc?articleId=220)
	 *
	 * `adzoneId` :string : (可选项)淘宝联盟adzoneId。**高佣转链/跨店结算 功能所需**, 如果走adzoneId的方式分佣打点，需要在extraParams中显式传入taokeAppkey，否则打点失败。[功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)
	 *
	 * `extraParams` :JSON : (可选项)adzoneId参数不为空时需要此参数，
	 *
	 * `backUrl` :string : 用于打开手淘时的 “返回（小把手）” 的点击返回，目前**ios传空字符串，android传config.xml文件中配置的urlScheme(即tbopen+appkey)**
	 *
	 * `degradeUrl` :string : 降级url，如果唤端失败且设置了降级url，则加载该url
	 *
	 * `failModeType` :string : 用于控制没安装手淘或者没检测到手淘的时候的打开页面逻辑
	 *
	 * `pageClose` :boolean : (可选项) 购买商品支付成功后是否关闭淘宝页面。true:关闭,false:不关闭。**仅在Android H5页面生效**
	 *
	 * `trackParams` :JSON : (可选项)自定义参数（暂时没发现啥用，但百川有就保留了）
	 */
	showMyCarts(params:aliBC_showMyCarts_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开淘宝店铺页面`
	 * ========params==========
	 *
	 * `shopId` :string : 店铺id,支持明文id
	 *
	 * `openType` :string : (可选项)打开页面的方式:拉起手淘/天猫 和 h5打开页面,默认值:h5
	 *
	 * `linkKey` :string : (可选项)当打开页面的方式（openType）为native时,设置拉起手淘or天猫。（不传则走百川默认设置,建议传值）
	 *
	 * `pid` :string : 淘客pid,获取流程参考:[http://baichuan.taobao.com/portal/doc?articleId=220](http://baichuan.taobao.com/portal/doc?articleId=220)
	 *
	 * `adzoneId` :string : (可选项)淘宝联盟adzoneId。**高佣转链/跨店结算 功能所需**, 如果走adzoneId的方式分佣打点，需要在extraParams中显式传入taokeAppkey，否则打点失败。[功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)
	 *
	 * `extraParams` :JSON : 需要在extraParams中显式传入sellerId，否则同步打点转链失败，
	 *
	 * `backUrl` :string : 用于打开手淘时的 “返回（小把手）” 的点击返回，目前**ios传空字符串，android传config.xml文件中配置的urlScheme(即tbopen+appkey)**
	 *
	 * `degradeUrl` :string : 降级url，如果唤端失败且设置了降级url，则加载该url
	 *
	 * `failModeType` :string : 用于控制没安装手淘或者没检测到手淘的时候的打开页面逻辑
	 *
	 * `pageClose` :boolean : (可选项) 购买商品支付成功后是否关闭淘宝页面。true:关闭,false:不关闭。**仅在Android H5页面生效**
	 *
	 * `trackParams` :JSON : (可选项)自定义参数（暂时没发现啥用，但百川有就保留了）
	 */
	showShopPage(params:aliBC_showShopPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开url展示页面。(**注意 打开淘系地址会跳转手淘，具体页面打开逻辑需要自己多测试！！！**)`
	 * ========params==========
	 *
	 * `url` :string : url
	 *
	 * `openType` :string : (可选项)打开页面的方式:拉起手淘/天猫 和 h5打开页面,默认值:h5
	 *
	 * `linkKey` :string : (可选项)当打开页面的方式（openType）为native时,设置拉起手淘or天猫。（不传则走百川默认设置,建议传值）
	 *
	 * `pid` :string : 淘客pid,获取流程参考:[http://baichuan.taobao.com/portal/doc?articleId=220](http://baichuan.taobao.com/portal/doc?articleId=220)
	 *
	 * `adzoneId` :string : (可选项)淘宝联盟adzoneId。**高佣转链/跨店结算 功能所需**, 如果走adzoneId的方式分佣打点，需要在extraParams中显式传入taokeAppkey，否则打点失败。[功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)
	 *
	 * `extraParams` :JSON : (可选项)adzoneId参数不为空时需要此参数，
	 *
	 * `backUrl` :string : 用于打开手淘时的 “返回（小把手）” 的点击返回，目前**ios传空字符串，android传config.xml文件中配置的urlScheme(即tbopen+appkey)**
	 *
	 * `degradeUrl` :string : 降级url，如果唤端失败且设置了降级url，则加载该url
	 *
	 * `failModeType` :string : 用于控制没安装手淘或者没检测到手淘的时候的打开页面逻辑
	 *
	 * `pageClose` :boolean : (可选项) 购买商品支付成功后是否关闭淘宝页面。true:关闭,false:不关闭。**仅在Android H5页面生效**
	 *
	 * `trackParams` :JSON : (可选项)自定义参数（暂时没发现啥用，但百川有就保留了）
	 */
	showPageByUrl(params:aliBC_showPageByUrl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `使用外部webview方式,打开url展示页面。(**注意 打开淘系地址会跳转手淘，具体页面打开逻辑需要自己多测试！！！**)`
	 * ========params==========
	 *
	 * `url` :string : url
	 *
	 * `hookUrl` :string : 要拦截的url （当页面中跳转的链接包含hookUrl字段时 进行拦截,如:ios下传"tbopen://"可以阻止目前的二合一页面跳转手淘）
	 *
	 * `rect` :JSON : （可选项）frame 的位置和大小。
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame,传 window 无效）
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上,不跟随窗口上下滚动,可为空
	 *
	 * `jsObjectName` :string : (可选项) 注入到h5页面的全局window属性对象名称,可与addJsToPage配合使用。
	 *
	 * `openType` :string : (可选项)打开页面的方式:拉起手淘/天猫 和 h5打开页面,默认值:h5
	 *
	 * `linkKey` :string : (可选项)当打开页面的方式（openType）为native时,设置拉起手淘or天猫。（不传则走百川默认设置,建议传值）
	 *
	 * `pid` :string : 淘客pid,获取流程参考:[http://baichuan.taobao.com/portal/doc?articleId=220](http://baichuan.taobao.com/portal/doc?articleId=220)
	 *
	 * `adzoneId` :string : (可选项)淘宝联盟adzoneId。**高佣转链/跨店结算 功能所需**, 如果走adzoneId的方式分佣打点，需要在extraParams中显式传入taokeAppkey，否则打点失败。[功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)
	 *
	 * `extraParams` :JSON : (可选项)adzoneId参数不为空时需要此参数，
	 *
	 * `backUrl` :string : 用于打开手淘时的 “返回（小把手）” 的点击返回，目前**ios传空字符串，android传config.xml文件中配置的urlScheme(即tbopen+appkey)**
	 *
	 * `degradeUrl` :string : 降级url，如果唤端失败且设置了降级url，则加载该url
	 *
	 * `failModeType` :string : 用于控制没安装手淘或者没检测到手淘的时候的打开页面逻辑
	 */
	showPageByUrlWeb(params:aliBC_showPageByUrlWeb_Params, callback?: (ret:JSON) => void):void

	/** 监听页面加载完成后返回页面的title和url。*/ 
	addPageFinListener(callback?: (ret:JSON) => void):void

	/** 对页面shouldStartLoadWithRequest时进行监听,返回页面的title和跳转的url。*/ 
	addLoadingListener(callback?: (ret:JSON) => void):void

	/**
	 * `在当前打开的淘宝页面加载完成后注入一段js脚本到H5页面。`
	 * ========params==========
	 *
	 * `javaScript` :string : javaScript脚本
	 *
	 * `appointUrl` :string : (可选项)指定Js脚本注入到的页面
	 *
	 * `delay` :any : (可选项)延时执行js脚本的时间,单位为 s（秒）
	 *
	 * `once` :boolean : (可选项)回调成功一次后是否清除对Javascript函数的引用,便于内存回收。通常为false。
	 */
	addJsToPage(params:aliBC_addJsToPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除页面加载完成的监听和js脚本`
	 * ========params==========
	 *
	 * `name` :string : (可选项) 移除的类型,javaScript脚本/PageFinListener/loadingListener。
	 */
	removeJsListener(params:aliBC_removeJsListener_Params):void

	/** 控制当前外部的webview回退*/ 
	webGoBack():void

	/** 从视图中移除当前通过showxxxWeb打开的百川页面。*/ 
	removeWeb():void

	/**
	 * `设置要拦截的url。(**当使用外部webview方式打开百川页面时 有效**)`
	 * ========params==========
	 *
	 * `hookUrl` :string : 要拦截的url （当页面跳转的链接包含hookUrl字段时 进行拦截,**若 不传/为空 则清除已有拦截**）
	 */
	setHookUrl(params:aliBC_setHookUrl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取配置文件config.xml中的feature配置参数（**同步返回**）`
	 * ========params==========
	 *
	 * `featureName` :string : feature的name字段
	 *
	 * `paramName` :string : 对应param的name字段
	 */
	getFeature(params:aliBC_getFeature_Params):void

}
interface aliBC_setSyncForTaoke_Params {
	/**（可选项）设置是否使用同步淘客打点。true:使用淘客同步打点；false:关闭同步打点,使用异步打点。*/ 
	isSyncForTaoke?:boolean,

}

interface aliBC_setIsvCode_Params {
	/**null*/ 
	code:string,

	/**返回值  **仅Android有返回***/ 
	ret:JSON,

}

interface aliBC_setIsvVersion_Params {
	/**null*/ 
	version:string,

}

interface aliBC_setIsvAppName_Params {
	/**null*/ 
	name:string,

}

interface aliBC_setTaokeParams_Params {
	/**淘客pid,获取流程参考:[http://baichuan.taobao.com/portal/doc?articleId=220](http://baichuan.taobao.com/portal/doc?articleId=220)*/ 
	pid:string,

	/**(可选项)淘宝联盟adzoneId。**高佣转链/跨店结算 功能所需**, 如果走adzoneId的方式分佣打点，需要在extraParams中显式传入taokeAppkey，否则打点失败。[功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)*/ 
	adzoneId?:string,

	/**(可选项)adzoneId参数不为空时需要此参数，*/ 
	extraParams?:JSON,

}

interface aliBC_setChannel_Params {
	/**（可选项）设置渠道类型*/ 
	typeName?:string,

	/**（可选项）设置渠道名称*/ 
	channelName?:string,

}

interface aliBC_showDetailPage_Params {
	/**商品id。支持itemId和openItemId的商品（如:37196464781L,AAHd5d-HAAeGwJedwSnHktBI）,必填,不允许为null*/ 
	itemId:string,

	/**(可选项)打开页面的方式*/ 
	openType?:string,

	/**(可选项)当打开页面的方式（openType）为native时,设置拉起手淘or天猫。（不传则走百川默认设置,建议传值）*/ 
	linkKey?:string,

	/**淘客pid,获取流程参考:[http://baichuan.taobao.com/portal/doc?articleId=220](http://baichuan.taobao.com/portal/doc?articleId=220)*/ 
	pid:string,

	/**(可选项)淘宝联盟adzoneId。**高佣转链/跨店结算 功能所需**, 如果走adzoneId的方式分佣打点，需要在extraParams中显式传入taokeAppkey，否则打点失败。[功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)*/ 
	adzoneId?:string,

	/**(可选项)adzoneId参数不为空时需要此参数，*/ 
	extraParams?:JSON,

	/**用于打开手淘时的 “返回（小把手）” 的点击返回，目前**ios传空字符串，android传config.xml文件中配置的urlScheme(即tbopen+appkey)***/ 
	backUrl:string,

	/**降级url，如果唤端失败且设置了降级url，则加载该url*/ 
	degradeUrl:string,

	/**用于控制没安装手淘或者没检测到手淘的时候的打开页面逻辑*/ 
	failModeType:string,

	/**(可选项) 购买商品支付成功后是否关闭淘宝页面。true:关闭,false:不关闭。**仅在Android H5页面生效***/ 
	pageClose?:boolean,

	/**(可选项)自定义参数（暂时没发现啥用，但百川有就保留了）*/ 
	trackParams?:JSON,

}

interface aliBC_showAddCartPage_Params {
	/**打开页面的控制参数*/ 
	code:string,

}

interface aliBC_showMyOrders_Params {
	/**打开页面的控制参数*/ 
	code:string,

	/**默认跳转页面。0:全部；1:待付款；2:待发货；3:待收货；4:待评价*/ 
	orderStatus:any,

	/**false 进行订单分域（只展示通过当前app下单的订单）,true 显示所有订单*/ 
	allOrder:boolean,

}

interface aliBC_showMyCarts_Params {
	/**(可选项)打开页面的方式:拉起手淘/天猫 和 h5打开页面,默认值:h5*/ 
	openType?:string,

	/**(可选项)当打开页面的方式（openType）为native时,设置拉起手淘or天猫。（不传则走百川默认设置,建议传值）*/ 
	linkKey?:string,

	/**淘客pid,获取流程参考:[http://baichuan.taobao.com/portal/doc?articleId=220](http://baichuan.taobao.com/portal/doc?articleId=220)*/ 
	pid:string,

	/**(可选项)淘宝联盟adzoneId。**高佣转链/跨店结算 功能所需**, 如果走adzoneId的方式分佣打点，需要在extraParams中显式传入taokeAppkey，否则打点失败。[功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)*/ 
	adzoneId?:string,

	/**(可选项)adzoneId参数不为空时需要此参数，*/ 
	extraParams?:JSON,

	/**用于打开手淘时的 “返回（小把手）” 的点击返回，目前**ios传空字符串，android传config.xml文件中配置的urlScheme(即tbopen+appkey)***/ 
	backUrl:string,

	/**降级url，如果唤端失败且设置了降级url，则加载该url*/ 
	degradeUrl:string,

	/**用于控制没安装手淘或者没检测到手淘的时候的打开页面逻辑*/ 
	failModeType:string,

	/**(可选项) 购买商品支付成功后是否关闭淘宝页面。true:关闭,false:不关闭。**仅在Android H5页面生效***/ 
	pageClose?:boolean,

	/**(可选项)自定义参数（暂时没发现啥用，但百川有就保留了）*/ 
	trackParams?:JSON,

}

interface aliBC_showShopPage_Params {
	/**店铺id,支持明文id*/ 
	shopId:string,

	/**(可选项)打开页面的方式:拉起手淘/天猫 和 h5打开页面,默认值:h5*/ 
	openType?:string,

	/**(可选项)当打开页面的方式（openType）为native时,设置拉起手淘or天猫。（不传则走百川默认设置,建议传值）*/ 
	linkKey?:string,

	/**淘客pid,获取流程参考:[http://baichuan.taobao.com/portal/doc?articleId=220](http://baichuan.taobao.com/portal/doc?articleId=220)*/ 
	pid:string,

	/**(可选项)淘宝联盟adzoneId。**高佣转链/跨店结算 功能所需**, 如果走adzoneId的方式分佣打点，需要在extraParams中显式传入taokeAppkey，否则打点失败。[功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)*/ 
	adzoneId?:string,

	/**需要在extraParams中显式传入sellerId，否则同步打点转链失败，*/ 
	extraParams:JSON,

	/**用于打开手淘时的 “返回（小把手）” 的点击返回，目前**ios传空字符串，android传config.xml文件中配置的urlScheme(即tbopen+appkey)***/ 
	backUrl:string,

	/**降级url，如果唤端失败且设置了降级url，则加载该url*/ 
	degradeUrl:string,

	/**用于控制没安装手淘或者没检测到手淘的时候的打开页面逻辑*/ 
	failModeType:string,

	/**(可选项) 购买商品支付成功后是否关闭淘宝页面。true:关闭,false:不关闭。**仅在Android H5页面生效***/ 
	pageClose?:boolean,

	/**(可选项)自定义参数（暂时没发现啥用，但百川有就保留了）*/ 
	trackParams?:JSON,

}

interface aliBC_showPageByUrl_Params {
	/**url*/ 
	url:string,

	/**(可选项)打开页面的方式:拉起手淘/天猫 和 h5打开页面,默认值:h5*/ 
	openType?:string,

	/**(可选项)当打开页面的方式（openType）为native时,设置拉起手淘or天猫。（不传则走百川默认设置,建议传值）*/ 
	linkKey?:string,

	/**淘客pid,获取流程参考:[http://baichuan.taobao.com/portal/doc?articleId=220](http://baichuan.taobao.com/portal/doc?articleId=220)*/ 
	pid:string,

	/**(可选项)淘宝联盟adzoneId。**高佣转链/跨店结算 功能所需**, 如果走adzoneId的方式分佣打点，需要在extraParams中显式传入taokeAppkey，否则打点失败。[功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)*/ 
	adzoneId?:string,

	/**(可选项)adzoneId参数不为空时需要此参数，*/ 
	extraParams?:JSON,

	/**用于打开手淘时的 “返回（小把手）” 的点击返回，目前**ios传空字符串，android传config.xml文件中配置的urlScheme(即tbopen+appkey)***/ 
	backUrl:string,

	/**降级url，如果唤端失败且设置了降级url，则加载该url*/ 
	degradeUrl:string,

	/**用于控制没安装手淘或者没检测到手淘的时候的打开页面逻辑*/ 
	failModeType:string,

	/**(可选项) 购买商品支付成功后是否关闭淘宝页面。true:关闭,false:不关闭。**仅在Android H5页面生效***/ 
	pageClose?:boolean,

	/**(可选项)自定义参数（暂时没发现啥用，但百川有就保留了）*/ 
	trackParams?:JSON,

}

interface aliBC_showPageByUrlWeb_Params {
	/**url*/ 
	url:string,

	/**要拦截的url （当页面中跳转的链接包含hookUrl字段时 进行拦截,如:ios下传"tbopen://"可以阻止目前的二合一页面跳转手淘）*/ 
	hookUrl:string,

	/**（可选项）frame 的位置和大小。*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame,传 window 无效）*/ 
	fixedOn?:string,

	/**是否将模块视图固定到窗口上,不跟随窗口上下滚动,可为空*/ 
	fixed:boolean,

	/**(可选项) 注入到h5页面的全局window属性对象名称,可与addJsToPage配合使用。*/ 
	jsObjectName?:string,

	/**(可选项)打开页面的方式:拉起手淘/天猫 和 h5打开页面,默认值:h5*/ 
	openType?:string,

	/**(可选项)当打开页面的方式（openType）为native时,设置拉起手淘or天猫。（不传则走百川默认设置,建议传值）*/ 
	linkKey?:string,

	/**淘客pid,获取流程参考:[http://baichuan.taobao.com/portal/doc?articleId=220](http://baichuan.taobao.com/portal/doc?articleId=220)*/ 
	pid:string,

	/**(可选项)淘宝联盟adzoneId。**高佣转链/跨店结算 功能所需**, 如果走adzoneId的方式分佣打点，需要在extraParams中显式传入taokeAppkey，否则打点失败。[功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)*/ 
	adzoneId?:string,

	/**(可选项)adzoneId参数不为空时需要此参数，*/ 
	extraParams?:JSON,

	/**用于打开手淘时的 “返回（小把手）” 的点击返回，目前**ios传空字符串，android传config.xml文件中配置的urlScheme(即tbopen+appkey)***/ 
	backUrl:string,

	/**降级url，如果唤端失败且设置了降级url，则加载该url*/ 
	degradeUrl:string,

	/**用于控制没安装手淘或者没检测到手淘的时候的打开页面逻辑*/ 
	failModeType:string,

}

interface aliBC_addJsToPage_Params {
	/**javaScript脚本*/ 
	javaScript:string,

	/**(可选项)指定Js脚本注入到的页面*/ 
	appointUrl?:string,

	/**(可选项)延时执行js脚本的时间,单位为 s（秒）*/ 
	delay?:any,

	/**(可选项)回调成功一次后是否清除对Javascript函数的引用,便于内存回收。通常为false。*/ 
	once?:boolean,

}

interface aliBC_removeJsListener_Params {
	/**(可选项) 移除的类型,javaScript脚本/PageFinListener/loadingListener。*/ 
	name?:string,

}

interface aliBC_setHookUrl_Params {
	/**要拦截的url （当页面跳转的链接包含hookUrl字段时 进行拦截,**若 不传/为空 则清除已有拦截**）*/ 
	hookUrl:string,

}

interface aliBC_getFeature_Params {
	/**feature的name字段*/ 
	featureName:string,

	/**对应param的name字段*/ 
	paramName:string,

}

interface APSocial {
	/** 判断当前设备是否安装支付宝客户端*/ 
	isAPAppInstalled(callback?: (ret:JSON) => void):void

	/** 判断当前支付宝客户端是否支持分享到朋友圈*/ 
	isAPAppSupportShareTimeLine(callback?: (ret:JSON) => void):void

	/**
	 * `分享文本内容`
	 * ========params==========
	 *
	 * `text` :string : 分享的文本
	 */
	shareText(params:APSocial_shareText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享照片`
	 * ========params==========
	 *
	 * `title` :string : 分享的照片标题
	 *
	 * `description` :string : 分享的照片描述
	 *
	 * `thumb` :string : 分享的照片的缩略图路径，支持fs://、widget://、http://
	 *
	 * `imageUrl` :string : 分享的照片路径，支持fs://、widget://、http://
	 */
	sharePhoto(params:APSocial_sharePhoto_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享网页`
	 * ========params==========
	 *
	 * `title` :string : 分享的网页标题
	 *
	 * `description` :string : 分享的网页描述
	 *
	 * `thumb` :string : 分享的网页的缩略图路径，支持fs://、widget://、http://
	 *
	 * `url` :string : 分享的网页地址
	 */
	shareWeb(params:APSocial_shareWeb_Params, callback?: (ret:JSON) => void):void

}
interface APSocial_shareText_Params {
	/**分享的文本*/ 
	text:string,

}

interface APSocial_sharePhoto_Params {
	/**分享的照片标题*/ 
	title:string,

	/**分享的照片描述*/ 
	description:string,

	/**分享的照片的缩略图路径，支持fs://、widget://、http://*/ 
	thumb:string,

	/**分享的照片路径，支持fs://、widget://、http://*/ 
	imageUrl:string,

}

interface APSocial_shareWeb_Params {
	/**分享的网页标题*/ 
	title:string,

	/**分享的网页描述*/ 
	description:string,

	/**分享的网页的缩略图路径，支持fs://、widget://、http://*/ 
	thumb:string,

	/**分享的网页地址*/ 
	url:string,

}

interface acLive {
	/**
	 * `打开摄像头采集页面`
	 * ========params==========
	 *
	 * `camera` :number : （可选）设备摄像头选择
	 *
	 * `rect` :JSON : 采集画面的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	open(params:acLive_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭录像采集页面*/ 
	close():void

	/**
	 * `开始推流`
	 * ========params==========
	 *
	 * `url` :any : 推流地址
	 */
	start(params:acLive_start_Params, callback?: (ret:JSON) => void):void

	/** 结束推流*/ 
	end():void

	/** 切换摄像头*/ 
	switchCamera():void

	/** 开启关闭美颜*/ 
	beautyFace():void

}
interface acLive_open_Params {
	/**（可选）设备摄像头选择*/ 
	camera?:number,

	/**采集画面的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface acLive_start_Params {
	/**推流地址*/ 
	url:any,

}

interface heartRateReceiver {
	/**
	 * `开启监听`
	 * ========params==========
	 *
	 * `port` :number : （可选项）本地端口号
	 *
	 * `HubIDs` :Array : 要监听的hub的集合
	 */
	startMonitor(params:heartRateReceiver_startMonitor_Params, callback?: (ret:JSON) => void):void

	/** 停止监听*/ 
	stopMonitor():void

	/** 进入打卡模式*/ 
	startDKMode():void

	/** 退出打卡模式*/ 
	stopDKMode():void

	/**
	 * `设置白名单`
	 * ========params==========
	 *
	 * `deviceIds` :Array : 设备ID数组
	 */
	setWhiteList(params:heartRateReceiver_setWhiteList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `控制手表心率测量`
	 * ========params==========
	 *
	 * `mode` :number : 控制指令，数字类型
	 *
	 * `hubId` :string : （可选项）如果传了hubId，那么向该hubId发送指令，否则向所有的hubId发送指令。字符串类型
	 */
	heartRate(params:heartRateReceiver_heartRate_Params, callback?: (ret:JSON) => void):void

	/** 设置心跳包监听*/ 
	setHubHeartBeatCallback():void

	/** 监听所有hub关闭*/ 
	setHubOffStatusNotifyCallback():void

	/** 监听所有手表关闭*/ 
	setWatchOffStatusNotifyCallback():void

}
interface heartRateReceiver_startMonitor_Params {
	/**（可选项）本地端口号*/ 
	port?:number,

	/**要监听的hub的集合*/ 
	HubIDs:Array,

}

interface heartRateReceiver_setWhiteList_Params {
	/**设备ID数组*/ 
	deviceIds:Array,

}

interface heartRateReceiver_heartRate_Params {
	/**控制指令，数字类型*/ 
	mode:number,

	/**（可选项）如果传了hubId，那么向该hubId发送指令，否则向所有的hubId发送指令。字符串类型*/ 
	hubId?:string,

}

interface tencentMTA {
}
interface bTrace {
	/**
	 * `初始化轨迹`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID
	 *
	 * `entityName` :string : 终端实体的名称，采集的轨迹将算在该 entity 名下
	 *
	 * `keepAlive` :boolean : （可选项）是否保活 **仅支持 ios 平台**
	 *
	 * `isNeedObjectStorage` :boolean : 是否需要对象存储 **仅支持 Android 平台**
	 */
	initTrace(params:bTrace_initTrace_Params, callback?: (ret:JSON) => void):void

	/** 设置定位和回传周期*/ 
	setInterval():void

	/**
	 * `开启轨迹服务`
	 * ========params==========
	 *
	 * `accuracy` :string : （可选项）定位精度
	 *
	 * `filter` :number : （可选项）位置更新所需的最小距离（单位米）
	 */
	startTrace(params:bTrace_startTrace_Params, callback?: (ret:JSON) => void):void

	/** 开启采集数据*/ 
	startGather():void

	/** 停止轨迹服务*/ 
	stopTrace():void

	/** 停止数据采集*/ 
	stopGather():void

	/**
	 * `查询历史轨迹`
	 * ========params==========
	 *
	 * `tag` :number : 请求tag
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID
	 *
	 * `entityName` :string : 终端实体的名称，采集的轨迹将算在该 entity 名下
	 *
	 * `startTime` :number : 开始时间戳（单位：秒）
	 *
	 * `endTime` :number : 结束时间戳（单位：秒）
	 *
	 * `pageSize` :number : 分页大小
	 *
	 * `pageIndex` :number : 分页索引
	 *
	 * `processOption` :JSON : 纠偏设置
	 *
	 * `coordType` :string : 坐标类型 **注意:仅支持iOS**
	 */
	queryHistoryTrack(params:bTrace_queryHistoryTrack_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建圆形围栏（客户端只支持圆形围栏）`
	 * ========params==========
	 *
	 * `tag` :number : 请求tag
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID
	 *
	 * `entityName` :string : 终端实体的名称，采集的轨迹将算在该 entity 名下 **仅支持 Android 平台**
	 *
	 * `monitoredCenter` :string : 监控对象
	 *
	 * `type` :string : 围栏类型
	 *
	 * `centerLatitude` :number : 中心点纬度
	 *
	 * `centerLongitude` :number : 中心点经度
	 *
	 * `radius` :number : 半径
	 *
	 * `denoise` :number : 去噪精度
	 *
	 * `fenceName` :number : 围栏名称
	 *
	 * `coordType` :string : 坐标类型
	 */
	createCircleFence(params:bTrace_createCircleFence_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建多边形围栏（客户端只支持圆形围栏）`
	 * ========params==========
	 *
	 * `tag` :number : 请求tag
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID
	 *
	 * `fenceName` :number : 围栏名称
	 *
	 * `entityName` :string : 终端实体的名称，采集的轨迹将算在该 entity 名下
	 *
	 * `monitoredCenter` :string : 监控对象
	 *
	 * `vertexes` :Array<JSON> : 多边形顶点数组
	 *
	 * `denoise` :number : 去噪精度
	 *
	 * `coordType` :string : 坐标类型
	 */
	createPolygonFence(params:bTrace_createPolygonFence_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询缓存轨迹`
	 * ========params==========
	 *
	 * `entityName` :string : 实体名称  **仅支持 Android 平台**
	 *
	 * `entityNames` :string : entity名称组成的数组  **仅支持 iOS 平台**
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID
	 *
	 * `tag` :number : 请求tag
	 */
	queryCacheTrackRequest(params:bTrace_queryCacheTrackRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询轨迹里程`
	 * ========params==========
	 *
	 * `entityName` :string : 实体名称
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID
	 *
	 * `tag` :number : 请求tag
	 *
	 * `startTime` :number : 开始时间戳
	 *
	 * `endTime` :number : 结束时间戳
	 *
	 * `transportMode` :string : 交通方式
	 *
	 * `ret` :JSON : null
	 */
	queryDistance(params:bTrace_queryDistance_Params):void

	/**
	 * `查询报警信息`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID， 在 iOS 平台上会忽略本参数
	 *
	 * `tag` :number : 请求tag
	 *
	 * `startTime` :number : 开始时间戳
	 *
	 * `endTime` :number : 结束时间戳
	 *
	 * `monitoredPerson` :string : 被监控的对象
	 *
	 * `coordType` :string : 坐标类型   **仅支持安卓平台**
	 *
	 * `fenceIds` :Array<JSON> : 实体数组
	 *
	 * `ret` :JSON : null
	 */
	queryFenceHistoryAlarmInfo(params:bTrace_queryFenceHistoryAlarmInfo_Params):void

	/**
	 * `删除围栏`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID，在 iOS 平台上会忽略本参数
	 *
	 * `tag` :number : 请求tag
	 *
	 * `type` :string : 围栏类型 **仅支持 Android 平台**
	 *
	 * `monitoredPerson` :string : 被监控的对象
	 *
	 * `fenceIds` :Array<JSON> : 实体数组
	 *
	 * `ret` :JSON : null
	 */
	deleteFence(params:bTrace_deleteFence_Params):void

	/**
	 * `检索符合过滤条件的Entity终端实体`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务的ID
	 *
	 * `entityNames` :string : entity标识,可以是多个，不同标识之间用逗号隔开
	 *
	 * `columnKey` :string : （可选项）检索条件（格式为 : "key1=value1,key2=value2,....."）
	 *
	 * `activeTime` :number : （可选项）UNIX时间戳，查询在此时间之后有定位信息上传的entity（loc_time>=activeTime）如查询2016-8-21 00:00:00之后仍活跃的entity，此字段设置为1471708800
	 *
	 * `pageSize` :number : 分页大小
	 *
	 * `pageIndex` :number : （可选项）分页索引
	 *
	 * `returnType` :number : （可选项）返回结果的类型
	 */
	queryRTTrack(params:bTrace_queryRTTrack_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加Entity`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID
	 *
	 * `entityName` :string : entity名称，作为其唯一标识
	 *
	 * `entityDES` :string : entity的可读性描述
	 *
	 * `columnKey` :string : 属性名称（格式 : "key1=value1,key2=value2......."）
	 */
	addEntity(params:bTrace_addEntity_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询实时状态，查询被监控对象和客户端地理围栏的位置关系`
	 * ========params==========
	 *
	 * `tag` :number : 请求tag
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID
	 *
	 * `fenceId` :number : 要查询的围栏ID
	 *
	 * `monitoredPersons` :string : 监控对象列表（多个entityName，以英文逗号"," 分割），ios平台仅读取第一个
	 *
	 * `type` :string : 围栏类型
	 */
	queryMonitoredStatus(params:bTrace_queryMonitoredStatus_Params, callback?: (ret:JSON) => void):void

}
interface bTrace_initTrace_Params {
	/**开发者创建的鹰眼服务ID*/ 
	serviceId:number,

	/**终端实体的名称，采集的轨迹将算在该 entity 名下*/ 
	entityName:string,

	/**（可选项）是否保活 **仅支持 ios 平台***/ 
	keepAlive?:boolean,

	/**是否需要对象存储 **仅支持 Android 平台***/ 
	isNeedObjectStorage:boolean,

}

interface bTrace_startTrace_Params {
	/**（可选项）定位精度*/ 
	accuracy?:string,

	/**（可选项）位置更新所需的最小距离（单位米）*/ 
	filter?:number,

}

interface bTrace_queryHistoryTrack_Params {
	/**请求tag*/ 
	tag:number,

	/**开发者创建的鹰眼服务ID*/ 
	serviceId:number,

	/**终端实体的名称，采集的轨迹将算在该 entity 名下*/ 
	entityName:string,

	/**开始时间戳（单位：秒）*/ 
	startTime:number,

	/**结束时间戳（单位：秒）*/ 
	endTime:number,

	/**分页大小*/ 
	pageSize:number,

	/**分页索引*/ 
	pageIndex:number,

	/**纠偏设置*/ 
	processOption:JSON,

	/**坐标类型 **注意:仅支持iOS***/ 
	coordType:string,

}

interface bTrace_createCircleFence_Params {
	/**请求tag*/ 
	tag:number,

	/**开发者创建的鹰眼服务ID*/ 
	serviceId:number,

	/**终端实体的名称，采集的轨迹将算在该 entity 名下 **仅支持 Android 平台***/ 
	entityName:string,

	/**监控对象*/ 
	monitoredCenter:string,

	/**围栏类型*/ 
	type:string,

	/**中心点纬度*/ 
	centerLatitude:number,

	/**中心点经度*/ 
	centerLongitude:number,

	/**半径*/ 
	radius:number,

	/**去噪精度*/ 
	denoise:number,

	/**围栏名称*/ 
	fenceName:number,

	/**坐标类型*/ 
	coordType:string,

}

interface bTrace_createPolygonFence_Params {
	/**请求tag*/ 
	tag:number,

	/**开发者创建的鹰眼服务ID*/ 
	serviceId:number,

	/**围栏名称*/ 
	fenceName:number,

	/**终端实体的名称，采集的轨迹将算在该 entity 名下*/ 
	entityName:string,

	/**监控对象*/ 
	monitoredCenter:string,

	/**多边形顶点数组*/ 
	vertexes:Array<JSON>,

	/**去噪精度*/ 
	denoise:number,

	/**坐标类型*/ 
	coordType:string,

}

interface bTrace_queryCacheTrackRequest_Params {
	/**实体名称  **仅支持 Android 平台***/ 
	entityName:string,

	/**entity名称组成的数组  **仅支持 iOS 平台***/ 
	entityNames:string,

	/**开发者创建的鹰眼服务ID*/ 
	serviceId:number,

	/**请求tag*/ 
	tag:number,

}

interface bTrace_queryDistance_Params {
	/**实体名称*/ 
	entityName:string,

	/**开发者创建的鹰眼服务ID*/ 
	serviceId:number,

	/**请求tag*/ 
	tag:number,

	/**开始时间戳*/ 
	startTime:number,

	/**结束时间戳*/ 
	endTime:number,

	/**交通方式*/ 
	transportMode:string,

	/**null*/ 
	ret:JSON,

}

interface bTrace_queryFenceHistoryAlarmInfo_Params {
	/**开发者创建的鹰眼服务ID， 在 iOS 平台上会忽略本参数*/ 
	serviceId:number,

	/**请求tag*/ 
	tag:number,

	/**开始时间戳*/ 
	startTime:number,

	/**结束时间戳*/ 
	endTime:number,

	/**被监控的对象*/ 
	monitoredPerson:string,

	/**坐标类型   **仅支持安卓平台***/ 
	coordType:string,

	/**实体数组*/ 
	fenceIds:Array<JSON>,

	/**null*/ 
	ret:JSON,

}

interface bTrace_deleteFence_Params {
	/**开发者创建的鹰眼服务ID，在 iOS 平台上会忽略本参数*/ 
	serviceId:number,

	/**请求tag*/ 
	tag:number,

	/**围栏类型 **仅支持 Android 平台***/ 
	type:string,

	/**被监控的对象*/ 
	monitoredPerson:string,

	/**实体数组*/ 
	fenceIds:Array<JSON>,

	/**null*/ 
	ret:JSON,

}

interface bTrace_queryRTTrack_Params {
	/**开发者创建的鹰眼服务的ID*/ 
	serviceId:number,

	/**entity标识,可以是多个，不同标识之间用逗号隔开*/ 
	entityNames:string,

	/**（可选项）检索条件（格式为 : "key1=value1,key2=value2,....."）*/ 
	columnKey?:string,

	/**（可选项）UNIX时间戳，查询在此时间之后有定位信息上传的entity（loc_time>=activeTime）如查询2016-8-21 00:00:00之后仍活跃的entity，此字段设置为1471708800*/ 
	activeTime?:number,

	/**分页大小*/ 
	pageSize:number,

	/**（可选项）分页索引*/ 
	pageIndex?:number,

	/**（可选项）返回结果的类型*/ 
	returnType?:number,

}

interface bTrace_addEntity_Params {
	/**开发者创建的鹰眼服务ID*/ 
	serviceId:number,

	/**entity名称，作为其唯一标识*/ 
	entityName:string,

	/**entity的可读性描述*/ 
	entityDES:string,

	/**属性名称（格式 : "key1=value1,key2=value2......."）*/ 
	columnKey:string,

}

interface bTrace_queryMonitoredStatus_Params {
	/**请求tag*/ 
	tag:number,

	/**开发者创建的鹰眼服务ID*/ 
	serviceId:number,

	/**要查询的围栏ID*/ 
	fenceId:number,

	/**监控对象列表（多个entityName，以英文逗号"," 分割），ios平台仅读取第一个*/ 
	monitoredPersons:string,

	/**围栏类型*/ 
	type:string,

}

interface bugout {
	/** **上报异常的方法，（异常会在下次启动时，自动上报至当前app_Key的项目中）***/ 
	reportCustomizedException():void

}
interface bPlayer {
	/**
	 * `本接口进行视频播放器初始化相关工作，可设置是否自动播放`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）播放器的位置及尺寸
	 *
	 * `path` :string : 视频资源地址,支持网络和本地路径（fs://）
	 *
	 * `autoPlay` :boolean : （可选项）是否自动播放。如果设置为true，播放器完成视频初始化后会自动播放视频；如果设置为false，播放器完成视频初始化后，需要开发者主动调用play方法来播放视频
	 *
	 * `enableLooping` :boolean : （可选项）设置App进入后台后，再次打开时播放器的状态是否为暂停播放
	 *
	 * `initialPlaybackTime` :number : （可选项）视频开始播放的时刻，单位秒
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:bPlayer_open_Params, callback?: (ret:JSON) => void):void

	/** 当在open方法设置非自动播放，或是暂停之后，调用本方法进行播放*/ 
	play():void

	/** 暂停播放*/ 
	pause():void

	/** 停止播放*/ 
	stop():void

	/**
	 * `重置，使播放器回到初始状态。需在stop调用之后再调用reset，reset调用之后可以重新指定播放地址`
	 * ========params==========
	 *
	 * `clearCanvasWhenReset` :boolean : （可选项）在reset时是否清除画布内容（指上次播放视频的画面内容）
	 */
	reset(params:bPlayer_reset_Params):void

	/**
	 * `重新播放指定播放地址。调用replay前，需要先调用stop停止当前视频的播放，再调用reset，reset播放器到初始状态`
	 * ========params==========
	 *
	 * `path` :string : 视频资源地址,支持网络和本地路径（fs://）
	 *
	 * `autoPlay` :boolean : （可选项）是否自动播放。如果设置为true，播放器完成视频初始化后会自动播放视频；如果设置为false，播放器完成视频初始化后，需要开发者主动调用play方法来播放视频
	 *
	 * `enableLooping` :boolean : （可选项）设置是否循环播放
	 *
	 * `pauseInBackground` :boolean : （可选项）设置App进入后台后，再次打开时播放器的状态是否为暂停播放
	 *
	 * `initialPlaybackTime` :number : （可选项）视频开始播放的时刻，单位秒
	 */
	replay(params:bPlayer_replay_Params, callback?: (ret:JSON) => void):void

	/** 显示视频播放视图*/ 
	show():void

	/** 隐藏视频播放视图，不会改变播放器播放状态*/ 
	hide():void

	/** 关闭播放器*/ 
	close():void

	/**
	 * `快速定位播放位置`
	 * ========params==========
	 *
	 * `currentPlaybackTime` :number : （可选项）播放位置，单位秒
	 */
	seek(params:bPlayer_seek_Params):void

	/** 获取视频的总时长、视频播放到的时刻、视频的可播放长度。调用info前，需要先调用open*/ 
	info():void

	/** 获取多码率列表。如果返回数组中元素个数小于2，表示不是一个多码率HLS视频*/ 
	getSupportedBitrates():void

	/** 获取当前码率索引*/ 
	bitrateIndex():void

	/**
	 * `设置当前码率索引`
	 * ========params==========
	 *
	 * `bitrateIndex` :number : 码率索引
	 */
	setBitrateIndex(params:bPlayer_setBitrateIndex_Params):void

	/**
	 * `视频显示的缩放模式`
	 * ========params==========
	 *
	 * `scalingMode` :string : (可选项)缩放模式
	 */
	scalingMode(params:bPlayer_scalingMode_Params):void

	/** 视频的原始分辨率大小。调用naturalSize前需要先调用open*/ 
	naturalSize():void

	/**
	 * `设置视频播放速率`
	 * ========params==========
	 *
	 * `playbackRate` :number : (可选项)播放速率
	 */
	playbackRate(params:bPlayer_playbackRate_Params):void

	/** 网络视频下载速度*/ 
	downloadSpeed():void

	/**
	 * `快进`
	 * ========params==========
	 *
	 * `seconds` :number : (可选项)快进的秒数
	 */
	forward(params:bPlayer_forward_Params):void

	/**
	 * `快退`
	 * ========params==========
	 *
	 * `seconds` :number : (可选项)快退的秒数
	 */
	rewind(params:bPlayer_rewind_Params):void

	/** 截图，对当前帧进行截图*/ 
	thumbnailImageAtCurrentTime():void

	/** 清除截图缓存*/ 
	clearCache():void

	/** 全屏*/ 
	full():void

	/** 取消全屏*/ 
	cancelFull():void

	/** 是否全屏状态*/ 
	isFull():void

	/**
	 * `设置视频播放器位置、尺寸`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）播放器的位置及尺寸
	 */
	setRect(params:bPlayer_setRect_Params):void

	/**
	 * `- 类型：JSON 对象`
	 * ========params==========
	 *
	 * `origin` :JSON : （可选项）水印图片位置
	 *
	 * `path` :string : 用于设置水印的图片路径，要求本地路径（widget://、fs://）
	 */
	setWatermark(params:bPlayer_setWatermark_Params):void

	/**
	 * `添加事件监听(手势只有当全屏时有效)`
	 * ========params==========
	 *
	 * `name` :Array : （可选项）所要监听的事件名称集合
	 */
	addEventListener(params:bPlayer_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加进度监听，可指定播放进度或缓冲进度`
	 * ========params==========
	 *
	 * `name` :string : （可选项）监听的事件类型
	 */
	addProgressListener(params:bPlayer_addProgressListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除进度监听，可指定播放进度或缓冲进度`
	 * ========params==========
	 *
	 * `name` :string : （可选项）监听的事件类型
	 */
	removeProgressListener(params:bPlayer_removeProgressListener_Params):void

	/** 进入后台的调用方法*/ 
	enterBackground():void

	/** 从后台进入前台调用的方法;*/ 
	enterForeground():void

}
interface bPlayer_open_Params {
	/**（可选项）播放器的位置及尺寸*/ 
	rect?:JSON,

	/**视频资源地址,支持网络和本地路径（fs://）*/ 
	path:string,

	/**（可选项）是否自动播放。如果设置为true，播放器完成视频初始化后会自动播放视频；如果设置为false，播放器完成视频初始化后，需要开发者主动调用play方法来播放视频*/ 
	autoPlay?:boolean,

	/**（可选项）设置App进入后台后，再次打开时播放器的状态是否为暂停播放*/ 
	enableLooping?:boolean,

	/**（可选项）视频开始播放的时刻，单位秒*/ 
	initialPlaybackTime?:number,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface bPlayer_reset_Params {
	/**（可选项）在reset时是否清除画布内容（指上次播放视频的画面内容）*/ 
	clearCanvasWhenReset?:boolean,

}

interface bPlayer_replay_Params {
	/**视频资源地址,支持网络和本地路径（fs://）*/ 
	path:string,

	/**（可选项）是否自动播放。如果设置为true，播放器完成视频初始化后会自动播放视频；如果设置为false，播放器完成视频初始化后，需要开发者主动调用play方法来播放视频*/ 
	autoPlay?:boolean,

	/**（可选项）设置是否循环播放*/ 
	enableLooping?:boolean,

	/**（可选项）设置App进入后台后，再次打开时播放器的状态是否为暂停播放*/ 
	pauseInBackground?:boolean,

	/**（可选项）视频开始播放的时刻，单位秒*/ 
	initialPlaybackTime?:number,

}

interface bPlayer_seek_Params {
	/**（可选项）播放位置，单位秒*/ 
	currentPlaybackTime?:number,

}

interface bPlayer_setBitrateIndex_Params {
	/**码率索引*/ 
	bitrateIndex:number,

}

interface bPlayer_scalingMode_Params {
	/**(可选项)缩放模式*/ 
	scalingMode?:string,

}

interface bPlayer_playbackRate_Params {
	/**(可选项)播放速率*/ 
	playbackRate?:number,

}

interface bPlayer_forward_Params {
	/**(可选项)快进的秒数*/ 
	seconds?:number,

}

interface bPlayer_rewind_Params {
	/**(可选项)快退的秒数*/ 
	seconds?:number,

}

interface bPlayer_setRect_Params {
	/**（可选项）播放器的位置及尺寸*/ 
	rect?:JSON,

}

interface bPlayer_setWatermark_Params {
	/**（可选项）水印图片位置*/ 
	origin?:JSON,

	/**用于设置水印的图片路径，要求本地路径（widget://、fs://）*/ 
	path:string,

}

interface bPlayer_addEventListener_Params {
	/**（可选项）所要监听的事件名称集合*/ 
	name?:Array,

}

interface bPlayer_addProgressListener_Params {
	/**（可选项）监听的事件类型*/ 
	name?:string,

}

interface bPlayer_removeProgressListener_Params {
	/**（可选项）监听的事件类型*/ 
	name?:string,

}

interface geTui {
}
interface shareinstall {
}
interface tpush {
	/** 初始化（仅Android有效）*/ 
	init():void

	/** 接收消息*/ 
	setListener():void

	/**
	 * `给应用设置标签`
	 * ========params==========
	 *
	 * `tagValue` :string : 给应用添加标签，推送时候选择标签 1对多
	 */
	setTag(params:tpush_setTag_Params):void

	/**
	 * `给应用设置别名`
	 * ========params==========
	 *
	 * `alias` :string : (可选项)给应用设置别名  1对1
	 */
	setAlias(params:tpush_setAlias_Params):void

}
interface tpush_setTag_Params {
	/**给应用添加标签，推送时候选择标签 1对多*/ 
	tagValue:string,

}

interface tpush_setAlias_Params {
	/**(可选项)给应用设置别名  1对1*/ 
	alias?:string,

}

interface UIBPlayer {
	/**
	 * `打开播放器界面`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）播放器的位置及尺寸
	 *
	 * `path` :string : 视频资源地址,支持网络和本地路径（fs://，widget://）(android不支持widget)
	 *
	 * `autoPlay` :boolean : （可选项）是否自动播放
	 *
	 * `enableLooping` :boolean : （可选项）设置是否循环播放
	 *
	 * `pauseInBackground` :boolean : （可选项）设置App进入后台后，播放器的状态是否为暂停播放(android不支持此参数，可以通过引擎的接口监听APP处于前后台，调用play和pause接口)
	 *
	 * `coverImg` :string : （可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）
	 *
	 * `videoScalingMode` :string : （可选项）视频的缩放模式 (ios不支持)
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（ios：只指 frame，传 window 无效）(android可以是frame或者Window，但是在全屏的时候，需要挂在Window上或者frame是全屏)
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `styles` :JSON : 播放器的样式设置
	 */
	open(params:UIBPlayer_open_Params):void

	/** 显示播放器*/ 
	show():void

	/** 隐藏播放器*/ 
	hide():void

	/** 关闭播放器*/ 
	close():void

	/**
	 * `重新播放指定播放地址。`
	 * ========params==========
	 *
	 * `path` :string : （可选项）视频资源地址,支持网络和本地路径（fs://，widget://）(android不支持widget)
	 *
	 * `title` :string : （可选项）顶部标题文字
	 */
	replay(params:UIBPlayer_replay_Params):void

	/**
	 * `设置footer和header显示或隐藏`
	 * ========params==========
	 *
	 * `name` :string : （可选项）设置footer还是header显示或隐藏
	 *
	 * `show` :boolean : （可选项）是否显示
	 */
	controlViewShow(params:UIBPlayer_controlViewShow_Params):void

	/**
	 * `添加监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件的名字
	 */
	addEventListener(params:UIBPlayer_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除监听`
	 * ========params==========
	 *
	 * `name` :string : 移除监听的事件的名字
	 */
	removeEventListener(params:UIBPlayer_removeEventListener_Params):void

	/** 播放*/ 
	play():void

	/** 暂停*/ 
	pause():void

	/** 全屏播放（横屏模式）*/ 
	fullScreen():void

	/** 取消全屏播放*/ 
	cancelFullScreen():void

}
interface UIBPlayer_open_Params {
	/**（可选项）播放器的位置及尺寸*/ 
	rect?:JSON,

	/**视频资源地址,支持网络和本地路径（fs://，widget://）(android不支持widget)*/ 
	path:string,

	/**（可选项）是否自动播放*/ 
	autoPlay?:boolean,

	/**（可选项）设置是否循环播放*/ 
	enableLooping?:boolean,

	/**（可选项）设置App进入后台后，播放器的状态是否为暂停播放(android不支持此参数，可以通过引擎的接口监听APP处于前后台，调用play和pause接口)*/ 
	pauseInBackground?:boolean,

	/**（可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）*/ 
	coverImg?:string,

	/**（可选项）视频的缩放模式 (ios不支持)*/ 
	videoScalingMode?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（ios：只指 frame，传 window 无效）(android可以是frame或者Window，但是在全屏的时候，需要挂在Window上或者frame是全屏)*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**播放器的样式设置*/ 
	styles:JSON,

}

interface UIBPlayer_replay_Params {
	/**（可选项）视频资源地址,支持网络和本地路径（fs://，widget://）(android不支持widget)*/ 
	path?:string,

	/**（可选项）顶部标题文字*/ 
	title?:string,

}

interface UIBPlayer_controlViewShow_Params {
	/**（可选项）设置footer还是header显示或隐藏*/ 
	name?:string,

	/**（可选项）是否显示*/ 
	show?:boolean,

}

interface UIBPlayer_addEventListener_Params {
	/**监听的事件的名字*/ 
	name:string,

}

interface UIBPlayer_removeEventListener_Params {
	/**移除监听的事件的名字*/ 
	name:string,

}

interface miniVideoRecord {
}
interface JGCertificate {
	/**
	 * `初始化`
	 * ========params==========
	 *
	 * `key` :string : appkey
	 */
	init(params:JGCertificate_init_Params, callback?: (ret:JSON) => void):void

	/** 判断网络环境是否支持*/ 
	checkVerifyEnable():void

	/** 获取认证token*/ 
	getToken():void

	/** 登录预取号*/ 
	preLogin():void

	/** 清除预取号缓存*/ 
	clearPreLoginCache():void

	/**
	 * `请求授权一键登录`
	 * ========params==========
	 *
	 * `type` :number : 一键登录页面类型
	 */
	getAuthorization(params:JGCertificate_getAuthorization_Params, callback?: (ret:JSON) => void):void

	/** 取消、返回*/ 
	dismissLoginController():void

}
interface JGCertificate_init_Params {
	/**appkey*/ 
	key:string,

}

interface JGCertificate_getAuthorization_Params {
	/**一键登录页面类型*/ 
	type:number,

}

interface txPlayer {
	/** 打开一个直播或点播*/ 
	open():void

	/** 关闭播放器并释放内存*/ 
	close():void

	/** 继续播放*/ 
	resume():void

	/** 设置视频地址及标题，开始播放位置*/ 
	setPath():void

	/**
	 * `设置视频区域大小。`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频区域的位置及尺寸
	 */
	setRect(params:txPlayer_setRect_Params):void

	/** 重播*/ 
	replay():void

	/**
	 * `设置视频播放位置`
	 * ========params==========
	 *
	 * `pos` :any : （可选项）视频播放开始位置，单位：秒。
	 */
	seek(params:txPlayer_seek_Params):void

	/** 获取视频播放的位置*/ 
	getCurrent():void

	/** 获取视频总时长*/ 
	getDuration():void

	/** 设置视频播放倍数*/ 
	setRate():void

	/** 获取视频播放的倍速*/ 
	getRate():void

	/** 全屏显示*/ 
	fullscreen():void

	/** 取消全屏显示*/ 
	cancelFullscreen():void

	/** 获取音量*/ 
	getVol():void

	/** 设置音量*/ 
	setVol():void

	/** 获取亮度*/ 
	getBrightness():void

	/** 设置亮度*/ 
	setBrightness():void

	/** 设置是否在后台播放*/ 
	pauseInBackground():void

}
interface txPlayer_setRect_Params {
	/**（可选项）视频区域的位置及尺寸*/ 
	rect?:JSON,

}

interface txPlayer_seek_Params {
	/**（可选项）视频播放开始位置，单位：秒。*/ 
	pos?:any,

}

interface uzkJDopen {
	/** 京东联盟SDK模块初始化（使用模块前务必进行一次初始化操作，该方法可以写在入口文件index.html页面）*/ 
	init(callback?: (ret:JSON) => void):void

	/** 拉起京东客户端打开任意链接（必须为京东系域名链接无法打开）*/ 
	openurl(callback?: (ret:JSON) => void):void

}
interface UIEaseCEC {
	/**
	 * `- 类型：字符串`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `password` :string : 密码
	 */
	easeRegister(params:UIEaseCEC_easeRegister_Params, callback?: (ret:JSON) => void):void

	/**
	 * `登录接口`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `password` :string : 密码
	 */
	login(params:UIEaseCEC_login_Params, callback?: (ret:JSON) => void):void

	/** 添加网络监听，可以显示当前是否连接服务器*/ 
	addConnectionListener():void

	/**
	 * `根据IM服务号创建并打开聊天页面`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 *
	 * `projectId` :string : 留言的Project ID
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 *
	 * `avatar` :JSON : 头像样式配置
	 *
	 * `nickname` :JSON : （可选项）各成员昵称信息，以username为key，昵称为value的JSON对象
	 *
	 * `Info` :JSON : （可选项）商品信息；进入聊天页面后会主动生成此商品信息
	 */
	chat(params:UIEaseCEC_chat_Params):void

	/**
	 * `发送文本消息`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 *
	 * `agentInfo` :string : （可选项）指定某个客服账号，客服账号为客服的登录邮箱地址
	 *
	 * `queueInfo` :string : （可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可
	 *
	 * `text` :string : 发送的消息
	 *
	 * `ext` :JSON : （可选项）扩展信息
	 */
	sendText(params:UIEaseCEC_sendText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片消息`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 *
	 * `path` :string : 要发送的图片的路径，要求本地路径（fs://、widget://）
	 *
	 * `agentInfo` :string : （可选项）指定某个客服账号，客服账号为客服的登录邮箱地址
	 *
	 * `queueInfo` :string : （可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可
	 *
	 * `ext` :JSON : （可选项）扩展信息
	 */
	sendImage(params:UIEaseCEC_sendImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 *
	 * `agentInfo` :string : （可选项）指定某个客服账号，客服账号为客服的登录邮箱地址
	 *
	 * `queueInfo` :string : （可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可
	 *
	 * `address` :string : 要发送的地址
	 *
	 * `latitude` :number : 纬度
	 *
	 * `longitude` :number : 经度
	 *
	 * `ext` :JSON : （可选项）扩展信息
	 */
	sendLocation(params:UIEaseCEC_sendLocation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送声音消息`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 *
	 * `path` :string : 要发送的音频的路径，要求本地路径（fs://、widget://）
	 *
	 * `length` :number : 录音时间(秒)
	 *
	 * `agentInfo` :string : （可选项）指定某个客服账号，客服账号为客服的登录邮箱地址
	 *
	 * `queueInfo` :string : （可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可
	 *
	 * `ext` :JSON : （可选项）扩展信息
	 */
	sendVoice(params:UIEaseCEC_sendVoice_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送透传消息`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 *
	 * `action` :string : 命令命令内容
	 *
	 * `agentInfo` :string : （可选项）指定某个客服账号，客服账号为客服的登录邮箱地址
	 *
	 * `queueInfo` :string : （可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可
	 *
	 * `ext` :JSON : （可选项）扩展信息
	 */
	sendControl(params:UIEaseCEC_sendControl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送访客信息`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 *
	 * `info` :JSON : 访客信息
	 *
	 * `agentInfo` :string : （可选项）指定某个客服账号，客服账号为客服的登录邮箱地址
	 *
	 * `queueInfo` :string : （可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可
	 *
	 * `ext` :JSON : （可选项）扩展信息
	 */
	sendVisitorInfo(params:UIEaseCEC_sendVisitorInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送轨迹消息`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 *
	 * `info` :JSON : 商品信息
	 *
	 * `agentInfo` :string : （可选项）指定某个客服账号，客服账号为客服的登录邮箱地址
	 *
	 * `queueInfo` :string : （可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可
	 *
	 * `ext` :JSON : （可选项）扩展信息
	 */
	sendVisitorTrack(params:UIEaseCEC_sendVisitorTrack_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送订单消息`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 *
	 * `info` :JSON : 商品信息
	 *
	 * `agentInfo` :string : （可选项）指定某个客服账号，客服账号为客服的登录邮箱地址
	 *
	 * `queueInfo` :string : （可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可
	 *
	 * `ext` :JSON : （可选项）扩展信息
	 */
	sendOrder(params:UIEaseCEC_sendOrder_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从数据库中获取消息，获取到的消息是startMsgId之前或者之后的pagesize条消息；（仅ios支持）`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 *
	 * `startMsgId` :string : (可选项）消息id，如果不写此项，从数据库中读取最新的记录
	 *
	 * `count` :number : (可选项) 获取条数
	 *
	 * `direction` :number : (可选项) 搜索方向;0：向上搜索，1：向下搜索
	 */
	loadMessageFromDB(params:UIEaseCEC_loadMessageFromDB_Params, callback?: (ret:JSON) => void):void

	/** 获取所有会话*/ 
	loadConversastions():void

	/**
	 * `删除一条会话`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 *
	 * `isMessage` :boolean : （可选项）是否删除相关的消息
	 */
	deleteConversation(params:UIEaseCEC_deleteConversation_Params):void

	/**
	 * `删除消息记录`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 *
	 * `messageId` :string : （可选项）消息id，不传则删除全部聊天记录
	 */
	deleteMessage(params:UIEaseCEC_deleteMessage_Params):void

	/**
	 * `获取会话未读消息数`
	 * ========params==========
	 *
	 * `conversationId` :string : IM服务号
	 */
	getMessagesCount(params:UIEaseCEC_getMessagesCount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置推送全局属性`
	 * ========params==========
	 *
	 * `displayName` :string : （可选项）推送消息显示的昵称，不传则不设置
	 *
	 * `displayStyle` :string : （可选项）推送消息显示的类型
	 *
	 * `noDisturbStatus` :string : （可选项）消息推送的免打扰设置
	 *
	 * `noDisturbingStartH` :number : （可选项）消息推送免打扰开始时间，小时，暂时只支持整点（小时），不传则不设置
	 *
	 * `noDisturbingEndH` :number : （可选项）消息推送免打扰结束时间，小时，暂时只支持整点（小时），不传则不设置
	 */
	setPushOption(params:UIEaseCEC_setPushOption_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置推送昵称`
	 * ========params==========
	 *
	 * `nickname` :string : 推送消息显示的昵称
	 */
	setApnsNickname(params:UIEaseCEC_setApnsNickname_Params, callback?: (ret:JSON) => void):void

}
interface UIEaseCEC_easeRegister_Params {
	/**用户名*/ 
	username:string,

	/**密码*/ 
	password:string,

}

interface UIEaseCEC_login_Params {
	/**用户名*/ 
	username:string,

	/**密码*/ 
	password:string,

}

interface UIEaseCEC_chat_Params {
	/**IM服务号*/ 
	conversationId:string,

	/**留言的Project ID*/ 
	projectId:string,

	/**导航条样式配置*/ 
	navigationBar:JSON,

	/**头像样式配置*/ 
	avatar:JSON,

	/**（可选项）各成员昵称信息，以username为key，昵称为value的JSON对象*/ 
	nickname?:JSON,

	/**（可选项）商品信息；进入聊天页面后会主动生成此商品信息*/ 
	Info?:JSON,

}

interface UIEaseCEC_sendText_Params {
	/**IM服务号*/ 
	conversationId:string,

	/**（可选项）指定某个客服账号，客服账号为客服的登录邮箱地址*/ 
	agentInfo?:string,

	/**（可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可*/ 
	queueInfo?:string,

	/**发送的消息*/ 
	text:string,

	/**（可选项）扩展信息*/ 
	ext?:JSON,

}

interface UIEaseCEC_sendImage_Params {
	/**IM服务号*/ 
	conversationId:string,

	/**要发送的图片的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**（可选项）指定某个客服账号，客服账号为客服的登录邮箱地址*/ 
	agentInfo?:string,

	/**（可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可*/ 
	queueInfo?:string,

	/**（可选项）扩展信息*/ 
	ext?:JSON,

}

interface UIEaseCEC_sendLocation_Params {
	/**IM服务号*/ 
	conversationId:string,

	/**（可选项）指定某个客服账号，客服账号为客服的登录邮箱地址*/ 
	agentInfo?:string,

	/**（可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可*/ 
	queueInfo?:string,

	/**要发送的地址*/ 
	address:string,

	/**纬度*/ 
	latitude:number,

	/**经度*/ 
	longitude:number,

	/**（可选项）扩展信息*/ 
	ext?:JSON,

}

interface UIEaseCEC_sendVoice_Params {
	/**IM服务号*/ 
	conversationId:string,

	/**要发送的音频的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**录音时间(秒)*/ 
	length:number,

	/**（可选项）指定某个客服账号，客服账号为客服的登录邮箱地址*/ 
	agentInfo?:string,

	/**（可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可*/ 
	queueInfo?:string,

	/**（可选项）扩展信息*/ 
	ext?:JSON,

}

interface UIEaseCEC_sendControl_Params {
	/**IM服务号*/ 
	conversationId:string,

	/**命令命令内容*/ 
	action:string,

	/**（可选项）指定某个客服账号，客服账号为客服的登录邮箱地址*/ 
	agentInfo?:string,

	/**（可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可*/ 
	queueInfo?:string,

	/**（可选项）扩展信息*/ 
	ext?:JSON,

}

interface UIEaseCEC_sendVisitorInfo_Params {
	/**IM服务号*/ 
	conversationId:string,

	/**访客信息*/ 
	info:JSON,

	/**（可选项）指定某个客服账号，客服账号为客服的登录邮箱地址*/ 
	agentInfo?:string,

	/**（可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可*/ 
	queueInfo?:string,

	/**（可选项）扩展信息*/ 
	ext?:JSON,

}

interface UIEaseCEC_sendVisitorTrack_Params {
	/**IM服务号*/ 
	conversationId:string,

	/**商品信息*/ 
	info:JSON,

	/**（可选项）指定某个客服账号，客服账号为客服的登录邮箱地址*/ 
	agentInfo?:string,

	/**（可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可*/ 
	queueInfo?:string,

	/**（可选项）扩展信息*/ 
	ext?:JSON,

}

interface UIEaseCEC_sendOrder_Params {
	/**IM服务号*/ 
	conversationId:string,

	/**商品信息*/ 
	info:JSON,

	/**（可选项）指定某个客服账号，客服账号为客服的登录邮箱地址*/ 
	agentInfo?:string,

	/**（可选项）指定某个技能组，技能组名称须和客服系统设置的技能组名称完全一致，中英文均可*/ 
	queueInfo?:string,

	/**（可选项）扩展信息*/ 
	ext?:JSON,

}

interface UIEaseCEC_loadMessageFromDB_Params {
	/**IM服务号*/ 
	conversationId:string,

	/**(可选项）消息id，如果不写此项，从数据库中读取最新的记录*/ 
	startMsgId?:string,

	/**(可选项) 获取条数*/ 
	count?:number,

	/**(可选项) 搜索方向;0：向上搜索，1：向下搜索*/ 
	direction?:number,

}

interface UIEaseCEC_deleteConversation_Params {
	/**IM服务号*/ 
	conversationId:string,

	/**（可选项）是否删除相关的消息*/ 
	isMessage?:boolean,

}

interface UIEaseCEC_deleteMessage_Params {
	/**IM服务号*/ 
	conversationId:string,

	/**（可选项）消息id，不传则删除全部聊天记录*/ 
	messageId?:string,

}

interface UIEaseCEC_getMessagesCount_Params {
	/**IM服务号*/ 
	conversationId:string,

}

interface UIEaseCEC_setPushOption_Params {
	/**（可选项）推送消息显示的昵称，不传则不设置*/ 
	displayName?:string,

	/**（可选项）推送消息显示的类型*/ 
	displayStyle?:string,

	/**（可选项）消息推送的免打扰设置*/ 
	noDisturbStatus?:string,

	/**（可选项）消息推送免打扰开始时间，小时，暂时只支持整点（小时），不传则不设置*/ 
	noDisturbingStartH?:number,

	/**（可选项）消息推送免打扰结束时间，小时，暂时只支持整点（小时），不传则不设置*/ 
	noDisturbingEndH?:number,

}

interface UIEaseCEC_setApnsNickname_Params {
	/**推送消息显示的昵称*/ 
	nickname:string,

}

interface wxVoicePlus {
	/**
	 * `配置语音识别时的参数`
	 * ========params==========
	 *
	 * `appId` :string : 微信开放平台分配给移动应用的AppID。
	 *
	 * `resultType` :any : （可选项）设置识别类型，0无标点，1有标点
	 *
	 * `silTime` :any : （可选项）静音检查时间。开始录音，并检测到有语音产生后，超过此时间没有声音，则自动完成本次录音，单位：秒（s）。本参数仅对非连续性识别（通过startSpeechRecognizer接口开启的语音识别）有效。
	 *
	 * `cont` :boolean : （可选项）设置是否使用流式方式返回识别结果。由于SDK限制，本参数暂仅支持android端。iOS端连续性识别时只支持流式返回识别结果，非连续性识别时只支持非流式返回识别结果。
	 */
	speechRecognizerConfiguration(params:wxVoicePlus_speechRecognizerConfiguration_Params):void

	/** 开始非连续性语音识别。当长时间静默时（默认设置为：开始5秒仍没有说话，或者说话后1.5秒）录音会停止。*/ 
	startSpeechRecognizer():void

	/** 结束非连续性识别的语音采集。*/ 
	finishSpeechRecognizer():void

	/** 取消/停止非连续性识别。调用本接口后会完全中断本次识别。*/ 
	cancelSpeechRecognizer():void

	/** 开始连续性语音识别。*/ 
	startContinusRecognizer():void

	/** 停止连续性语音识别的语音采集。*/ 
	finishContinusRecognizer():void

	/** 添加语音识别音量监听*/ 
	addRecognizeVolumListener():void

	/** 移除语音识别音量监听*/ 
	removeRecognizeVolumListener():void

	/**
	 * `语音合成配置。`
	 * ========params==========
	 *
	 * `appId` :string : 微信开放平台分配给移动应用的AppID
	 *
	 * `volumn` :any : （可选项）音量范围0-2
	 */
	speechSynthesizerConfiguration(params:wxVoicePlus_speechSynthesizerConfiguration_Params):void

	/**
	 * `开始语音合成。`
	 * ========params==========
	 *
	 * `text` :string : 需要合成的文本
	 */
	startSpeechSynthesizer(params:wxVoicePlus_startSpeechSynthesizer_Params, callback?: (ret:JSON) => void):void

	/** 取消语音合成，若已经合成完成在播放阶段，则也会停止播放合成后的语音*/ 
	cancelSpeechSynthesizer():void

}
interface wxVoicePlus_speechRecognizerConfiguration_Params {
	/**微信开放平台分配给移动应用的AppID。*/ 
	appId:string,

	/**（可选项）设置识别类型，0无标点，1有标点*/ 
	resultType?:any,

	/**（可选项）静音检查时间。开始录音，并检测到有语音产生后，超过此时间没有声音，则自动完成本次录音，单位：秒（s）。本参数仅对非连续性识别（通过startSpeechRecognizer接口开启的语音识别）有效。*/ 
	silTime?:any,

	/**（可选项）设置是否使用流式方式返回识别结果。由于SDK限制，本参数暂仅支持android端。iOS端连续性识别时只支持流式返回识别结果，非连续性识别时只支持非流式返回识别结果。*/ 
	cont?:boolean,

}

interface wxVoicePlus_speechSynthesizerConfiguration_Params {
	/**微信开放平台分配给移动应用的AppID*/ 
	appId:string,

	/**（可选项）音量范围0-2*/ 
	volumn?:any,

}

interface wxVoicePlus_startSpeechSynthesizer_Params {
	/**需要合成的文本*/ 
	text:string,

}

interface tencentTIC {
	/**
	 * `创建白板控制器`
	 * ========params==========
	 *
	 * `sdkAppId` :number : 应用标识，腾讯[腾讯互动白板控制台](https://console.cloud.tencent.com/tiw/app)获取
	 *
	 * `userId` :string : 用户标识
	 *
	 * `userSig` :string : 签名
	 *
	 * `roomId` :string : 课堂ID
	 *
	 * `ratio` :string : （可选项）默认白板宽高比，可传格式如“4:3”、“16:9”的字符串
	 *
	 * `drawEnable` :boolean : （可选项）是否允许涂鸦
	 *
	 * `globalBgColor` :string : （可选项）全局背景色，支持rgb、rgba、#
	 *
	 * `toolType` :number : （可选项）白板工具
	 *
	 * `brushColor` :string : （可选项）画笔颜色，支持rgb、rgba、#
	 *
	 * `brushThin` :number : （可选项）画笔粗细
	 *
	 * `textColor` :string : （可选项）文本颜色，支持rgb、rgba、#
	 *
	 * `textSize` :number : （可选项）文本粗细
	 *
	 * `textStyle` :number : （可选项）文本样式
	 *
	 * `timSync` :boolean : （可选项）是否使用腾讯云IMSDK进行实时数据同步
	 *
	 * `dataSyncEnable` :boolean : （可选项）是否启用数据同步，禁用后将导致本地白板操作不会被同步给远端
	 *
	 * `preloadDepth` :number : （可选项）图片预加载深度，默认值5，表示预加载当前页前后5页的图片
	 *
	 * `smoothLevel` :number : （可选项）平滑系数，范围[0，1]
	 *
	 * `boardContentFitMode` :number : （可选项）白板内容自适应模式
	 */
	createBoard(params:tencentTIC_createBoard_Params):void

	/**
	 * `白板窗口获取及显示`
	 * ========params==========
	 *
	 * `rect` :JSON : (可选项）白板窗口位置及长宽
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（ios：只指 frame，传 window 无效）(android可以是frame或者Window，但是在全屏的时候，需要挂在Window上或者frame是全屏)
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openBoardRenderView(params:tencentTIC_openBoardRenderView_Params):void

	/**
	 * `添加监听`
	 * ========params==========
	 *
	 * `name` :string : 监听事件名字（仅iOS支持）
	 */
	addBoardListener(params:tencentTIC_addBoardListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加白板同步数据，该接口用于多个白板间的数据同步，使用内置IM作为信令通道时，不需要调用该接口`
	 * ========params==========
	 *
	 * `data` :string : 接收到的房间内其他人发送的同步数据
	 */
	addSyncData(params:tencentTIC_addSyncData_Params):void

	/**
	 * `设置白板是否开启数据同步，关闭数据同步，本地的所有白板操作不会同步到远端和服务器`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否开启
	 */
	setDataSyncEnable(params:tencentTIC_setDataSyncEnable_Params):void

	/** 获取白板是否开启数据同步*/ 
	isDataSyncEnable():void

	/** 重置白板，调用该接口后将会删除所有的白板页和文件*/ 
	reset():void

	/** 获取版本号*/ 
	getVersion():void

	/**
	 * `设置白板是否允许涂鸦`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否允许涂鸦，true 表示白板可以涂鸦，false 表示白板不能涂鸦，白板创建后默认为允许涂鸦状态
	 */
	setDrawEnable(params:tencentTIC_setDrawEnable_Params):void

	/** 获取白板是否允许涂鸦*/ 
	isDrawEnable():void

	/**
	 * `设置白板默认背景色`
	 * ========params==========
	 *
	 * `color` :string : 要设置的默认背景色，支持rgb、rgba、#
	 */
	setGlobalBackgroundColor(params:tencentTIC_setGlobalBackgroundColor_Params):void

	/** 获取白板默认背景色*/ 
	getGlobalBackgroundColor():void

	/**
	 * `设置当前白板页的背景色`
	 * ========params==========
	 *
	 * `color` :string : 要设置的背景色，支持rgb、rgba、#
	 */
	setBackgroundColor(params:tencentTIC_setBackgroundColor_Params):void

	/** 获取当前白板页的背景色*/ 
	getBackgroundColor():void

	/**
	 * `设置当前白板页的背景图片，当URL是一个有效的本地文件地址时，该文件会被自动上传到COS,该接口与setBackgroundH5接口互斥`
	 * ========params==========
	 *
	 * `url` :string : 要设置的背景图片URL，支持widget、fs（android仅支持fs）
	 *
	 * `mode` :number : （可选项）要使用的图片填充对齐模式，当以宽度基准等比例放大，则居左和居右同居中对齐效果一致；当以高度基准等比例放大，则居顶和居底同居中对齐效果一致
	 */
	setBackgroundImage(params:tencentTIC_setBackgroundImage_Params):void

	/**
	 * `设置要使用的白板工具`
	 * ========params==========
	 *
	 * `toolType` :number : （可选项）白板工具
	 */
	setToolType(params:tencentTIC_setToolType_Params):void

	/** 获取正在使用的白板工具*/ 
	getToolType():void

	/**
	 * `设置画笔颜色，画笔颜色用于所有涂鸦绘制`
	 * ========params==========
	 *
	 * `color` :string : 要设置的画笔颜色，支持rgb、rgba、#
	 */
	setBrushColor(params:tencentTIC_setBrushColor_Params):void

	/** 获取画笔颜色*/ 
	getBrushColor():void

	/**
	 * `设置画笔粗细，画笔粗细用于所有涂鸦绘制，实际像素值取值(thin * 白板的高度 / 10000)px，如果结果小于1px，则涂鸦的线条会比较虚`
	 * ========params==========
	 *
	 * `thin` :number : 要设置的画笔粗细
	 */
	setBrushThin(params:tencentTIC_setBrushThin_Params):void

	/** 获取画笔粗细*/ 
	getBrushThin():void

	/**
	 * `设置文本颜色`
	 * ========params==========
	 *
	 * `color` :string : 要设置的文本颜色，支持rgb、rgba、#
	 */
	setTextColor(params:tencentTIC_setTextColor_Params):void

	/** 获取文本颜色*/ 
	getTextColor():void

	/**
	 * `设置文本样式`
	 * ========params==========
	 *
	 * `style` :number : （可选项）要设置的文本样式
	 */
	setTextStyle(params:tencentTIC_setTextStyle_Params):void

	/** 获取文本样式*/ 
	getTextStyle():void

	/**
	 * `设置文本大小，实际像素值取值(size * 白板的高度 / 10000)px`
	 * ========params==========
	 *
	 * `size` :number : 要设置的文本大小
	 */
	setTextSize(params:tencentTIC_setTextSize_Params):void

	/** 获取文本大小*/ 
	getTextSize():void

	/**
	 * `设置椭圆绘制模式`
	 * ========params==========
	 *
	 * `mode` :number : （可选项）椭圆绘制模式
	 */
	setOvalDrawMode(params:tencentTIC_setOvalDrawMode_Params):void

	/** 获取椭圆绘制模式*/ 
	getOvalDrawMode():void

	/** 撤销当前白板页上一次动作*/ 
	undo():void

	/** 重做当前白板页上一次撤销*/ 
	redo():void

	/** 清除涂鸦，同时清空背景色以及背景图片*/ 
	clear():void

	/** 清除涂鸦*/ 
	clearDraws():void

	/**
	 * `增加一页白板，白板页会被添加到当前文件`
	 * ========params==========
	 *
	 * `url` :any : （可选项）要使用的背景图片URL，为空表示不指定背景图片，支持widget、fs
	 */
	addBoardWithBackgroundImage(params:tencentTIC_addBoardWithBackgroundImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除一页白板`
	 * ========params==========
	 *
	 * `boardId` :string : （可选项）要删除的白板ID，为空表示删除当前页
	 */
	deleteBoard(params:tencentTIC_deleteBoard_Params):void

	/** 上一步，每个Step对应PPT的一个动画效果，若当前没有已展示的动画效果，则该接口调用会导致向前翻页*/ 
	prevStep():void

	/** 下一步，每个Step对应PPT的一个动画效果，若当前没有未展示的动画效果，则该接口调用会导致向后翻页*/ 
	nextStep():void

	/**
	 * `向前翻页，若当前白板页为当前文件的第一页，则该接口调用无效`
	 * ========params==========
	 *
	 * `resetStep` :boolean : （可选项）是否重置白板步数
	 *
	 * `resetStep` :boolean : （可选项）是否重置白板步数
	 */
	preBoard(params:tencentTIC_preBoard_Params):void

	/**
	 * `向后翻页，若当前白板页为当前文件的最后一页，则该接口调用无效`
	 * ========params==========
	 *
	 * `resetStep` :boolean : （可选项）是否重置白板步数
	 *
	 * `resetStep` :boolean : （可选项）是否重置白板步数
	 */
	nextBoard(params:tencentTIC_nextBoard_Params):void

	/**
	 * `跳转到指定白板页，允许跳转到任意文件的白板页`
	 * ========params==========
	 *
	 * `boardId` :string : 要跳转到的白板页ID
	 */
	gotoBoard(params:tencentTIC_gotoBoard_Params):void

	/**
	 * `向前翻页，若当前白板页为当前文件的第一页，则该接口调用无效`
	 * ========params==========
	 *
	 * `resetStep` :boolean : （可选项）是否重置白板步数
	 *
	 * `resetStep` :boolean : （可选项）是否重置白板步数
	 */
	preBoard(params:tencentTIC_preBoard_Params):void

	/**
	 * `向后翻页，若当前白板页为当前文件的最后一页，则该接口调用无效`
	 * ========params==========
	 *
	 * `resetStep` :boolean : （可选项）是否重置白板步数
	 *
	 * `resetStep` :boolean : （可选项）是否重置白板步数
	 */
	nextBoard(params:tencentTIC_nextBoard_Params):void

	/**
	 * `跳转到指定白板页，允许跳转到任意文件的白板页`
	 * ========params==========
	 *
	 * `boardId` :string : 要跳转到的白板页ID
	 *
	 * `resetStep` :boolean : （可选项）是否重置白板步数
	 */
	gotoBoardWithBoardId(params:tencentTIC_gotoBoardWithBoardId_Params):void

	/** 获取当前白板页ID*/ 
	getCurrentBoard():void

	/** 获取所有文件的白板列表*/ 
	getBoardList():void

	/**
	 * `设置当前白板页宽高比`
	 * ========params==========
	 *
	 * `ratio` :string : 要设置的白板宽高比，格式如"4:3" "16:9"
	 */
	setBoardRatio(params:tencentTIC_setBoardRatio_Params):void

	/** 获取当前白板页宽高比*/ 
	getBoardRatio():void

	/**
	 * `设置当前白板页缩放比例`
	 * ========params==========
	 *
	 * `scale` :number : 要设置的白板缩放比例，支持范围: [100，300]，实际缩放比为: scale/100
	 */
	setBoardScale(params:tencentTIC_setBoardScale_Params):void

	/** 获取当前白板页缩放比例*/ 
	getBoardScale():void

	/**
	 * `设置白板内容自适应模式，设置自适应模式后会影响所有后续白板内容操作`
	 * ========params==========
	 *
	 * `mode` :number : （可选项）要设置的白板内容自适应模式
	 */
	setBoardContentFitMode(params:tencentTIC_setBoardContentFitMode_Params):void

	/** 获取白板内容自适应模式*/ 
	getBoardContentFitMode():void

	/**
	 * `发起文件转码请求，支持 PPT、PDF、Word文件转码，PPT文档默认转为H5动画，能够还原PPT原有动画效果，其它文档转码为静态图片，PPT动画转码耗时约1秒/页，所有文档的静态转码耗时约0.5秒/页`
	 * ========params==========
	 *
	 * `path` :string : 要转码的文件路径，编码格式为UTF8，支持fs、widget
	 *
	 * `config` :JSON : （可选项）转码参数
	 */
	applyFileTranscode(params:tencentTIC_applyFileTranscode_Params):void

	/**
	 * `主动查询文件转码进度，该接口仅用于特殊业务场景下主动查询文件转码进度`
	 * ========params==========
	 *
	 * `taskId` :string : 转码任务taskId
	 */
	getFileTranscodeProgress(params:tencentTIC_getFileTranscodeProgress_Params):void

	/**
	 * `添加转码文件`
	 * ========params==========
	 *
	 * `config` :JSON : （可选项）转码参数
	 */
	addTranscodeFile(params:tencentTIC_addTranscodeFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除文件，文件ID为空时表示当前文件，默认文件无法删除`
	 * ========params==========
	 *
	 * `fileId` :string : （可选项）要删除的文件ID
	 */
	deleteFile(params:tencentTIC_deleteFile_Params):void

	/**
	 * `切换文件，文件ID为必填项，为空将导致文件切换失败`
	 * ========params==========
	 *
	 * `fileId` :string : 要切换到的文件ID
	 */
	switchFile(params:tencentTIC_switchFile_Params):void

	/**
	 * `跳转到文件指定白班指定步，只在首次加载文件时有效，跳转到非当前文件的指定白板指定步`
	 * ========params==========
	 *
	 * `fileId` :string : 文件ID
	 *
	 * `boardId` :string : 白板ID
	 *
	 * `stepIndex` :number : 步数索引
	 */
	switchFileBoardIdStepIndex(params:tencentTIC_switchFileBoardIdStepIndex_Params):void

	/** 获取当前文件ID*/ 
	getCurrentFile():void

	/** 获取白板中上传的所有文件的文件信息列表*/ 
	getFileInfoList():void

	/**
	 * `获取指定文件id的文件信息`
	 * ========params==========
	 *
	 * `fileId` :string : 文件ID
	 */
	getFileInfo(params:tencentTIC_getFileInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取指定文件id的文件信息`
	 * ========params==========
	 *
	 * `fileId` :string : 文件ID
	 */
	getFileBoardList(params:tencentTIC_getFileBoardList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清空指定文件的所有白板涂鸦`
	 * ========params==========
	 *
	 * `fileId` :string : 文件ID
	 */
	clearFileDraws(params:tencentTIC_clearFileDraws_Params):void

	/**
	 * `获取指定文件的缩略图，不支持默认文件（fileId=#DEFAULT），用户在调用rest api请求转码时，需要带上 "thumbnail_resolution" 参数，开启缩略图功能，否则返回的缩略图url无效`
	 * ========params==========
	 *
	 * `fileId` :string : 文件ID
	 */
	getThumbnailImages(params:tencentTIC_getThumbnailImages_Params, callback?: (ret:JSON) => void):void

	/** 获取同步时间*/ 
	getSyncTime():void

	/**
	 * `同步远程时间`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 *
	 * `timestamp` :number : 毫秒级时间戳
	 */
	syncRemoteTime(params:tencentTIC_syncRemoteTime_Params):void

}
interface tencentTIC_createBoard_Params {
	/**应用标识，腾讯[腾讯互动白板控制台](https://console.cloud.tencent.com/tiw/app)获取*/ 
	sdkAppId:number,

	/**用户标识*/ 
	userId:string,

	/**签名*/ 
	userSig:string,

	/**课堂ID*/ 
	roomId:string,

	/**（可选项）默认白板宽高比，可传格式如“4:3”、“16:9”的字符串*/ 
	ratio?:string,

	/**（可选项）是否允许涂鸦*/ 
	drawEnable?:boolean,

	/**（可选项）全局背景色，支持rgb、rgba、#*/ 
	globalBgColor?:string,

	/**（可选项）白板工具*/ 
	toolType?:number,

	/**（可选项）画笔颜色，支持rgb、rgba、#*/ 
	brushColor?:string,

	/**（可选项）画笔粗细*/ 
	brushThin?:number,

	/**（可选项）文本颜色，支持rgb、rgba、#*/ 
	textColor?:string,

	/**（可选项）文本粗细*/ 
	textSize?:number,

	/**（可选项）文本样式*/ 
	textStyle?:number,

	/**（可选项）是否使用腾讯云IMSDK进行实时数据同步*/ 
	timSync?:boolean,

	/**（可选项）是否启用数据同步，禁用后将导致本地白板操作不会被同步给远端*/ 
	dataSyncEnable?:boolean,

	/**（可选项）图片预加载深度，默认值5，表示预加载当前页前后5页的图片*/ 
	preloadDepth?:number,

	/**（可选项）平滑系数，范围[0，1]*/ 
	smoothLevel?:number,

	/**（可选项）白板内容自适应模式*/ 
	boardContentFitMode?:number,

}

interface tencentTIC_openBoardRenderView_Params {
	/**(可选项）白板窗口位置及长宽*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（ios：只指 frame，传 window 无效）(android可以是frame或者Window，但是在全屏的时候，需要挂在Window上或者frame是全屏)*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface tencentTIC_addBoardListener_Params {
	/**监听事件名字（仅iOS支持）*/ 
	name:string,

}

interface tencentTIC_addSyncData_Params {
	/**接收到的房间内其他人发送的同步数据*/ 
	data:string,

}

interface tencentTIC_setDataSyncEnable_Params {
	/**（可选项）是否开启*/ 
	enable?:boolean,

}

interface tencentTIC_setDrawEnable_Params {
	/**（可选项）是否允许涂鸦，true 表示白板可以涂鸦，false 表示白板不能涂鸦，白板创建后默认为允许涂鸦状态*/ 
	enable?:boolean,

}

interface tencentTIC_setGlobalBackgroundColor_Params {
	/**要设置的默认背景色，支持rgb、rgba、#*/ 
	color:string,

}

interface tencentTIC_setBackgroundColor_Params {
	/**要设置的背景色，支持rgb、rgba、#*/ 
	color:string,

}

interface tencentTIC_setBackgroundImage_Params {
	/**要设置的背景图片URL，支持widget、fs（android仅支持fs）*/ 
	url:string,

	/**（可选项）要使用的图片填充对齐模式，当以宽度基准等比例放大，则居左和居右同居中对齐效果一致；当以高度基准等比例放大，则居顶和居底同居中对齐效果一致*/ 
	mode?:number,

}

interface tencentTIC_setToolType_Params {
	/**（可选项）白板工具*/ 
	toolType?:number,

}

interface tencentTIC_setBrushColor_Params {
	/**要设置的画笔颜色，支持rgb、rgba、#*/ 
	color:string,

}

interface tencentTIC_setBrushThin_Params {
	/**要设置的画笔粗细*/ 
	thin:number,

}

interface tencentTIC_setTextColor_Params {
	/**要设置的文本颜色，支持rgb、rgba、#*/ 
	color:string,

}

interface tencentTIC_setTextStyle_Params {
	/**（可选项）要设置的文本样式*/ 
	style?:number,

}

interface tencentTIC_setTextSize_Params {
	/**要设置的文本大小*/ 
	size:number,

}

interface tencentTIC_setOvalDrawMode_Params {
	/**（可选项）椭圆绘制模式*/ 
	mode?:number,

}

interface tencentTIC_addBoardWithBackgroundImage_Params {
	/**（可选项）要使用的背景图片URL，为空表示不指定背景图片，支持widget、fs*/ 
	url?:any,

}

interface tencentTIC_deleteBoard_Params {
	/**（可选项）要删除的白板ID，为空表示删除当前页*/ 
	boardId?:string,

}

interface tencentTIC_preBoard_Params {
	/**（可选项）是否重置白板步数*/ 
	resetStep?:boolean,

	/**（可选项）是否重置白板步数*/ 
	resetStep?:boolean,

}

interface tencentTIC_nextBoard_Params {
	/**（可选项）是否重置白板步数*/ 
	resetStep?:boolean,

	/**（可选项）是否重置白板步数*/ 
	resetStep?:boolean,

}

interface tencentTIC_gotoBoard_Params {
	/**要跳转到的白板页ID*/ 
	boardId:string,

}

interface tencentTIC_preBoard_Params {
	/**（可选项）是否重置白板步数*/ 
	resetStep?:boolean,

	/**（可选项）是否重置白板步数*/ 
	resetStep?:boolean,

}

interface tencentTIC_nextBoard_Params {
	/**（可选项）是否重置白板步数*/ 
	resetStep?:boolean,

	/**（可选项）是否重置白板步数*/ 
	resetStep?:boolean,

}

interface tencentTIC_gotoBoardWithBoardId_Params {
	/**要跳转到的白板页ID*/ 
	boardId:string,

	/**（可选项）是否重置白板步数*/ 
	resetStep?:boolean,

}

interface tencentTIC_setBoardRatio_Params {
	/**要设置的白板宽高比，格式如"4:3" "16:9"*/ 
	ratio:string,

}

interface tencentTIC_setBoardScale_Params {
	/**要设置的白板缩放比例，支持范围: [100，300]，实际缩放比为: scale/100*/ 
	scale:number,

}

interface tencentTIC_setBoardContentFitMode_Params {
	/**（可选项）要设置的白板内容自适应模式*/ 
	mode?:number,

}

interface tencentTIC_applyFileTranscode_Params {
	/**要转码的文件路径，编码格式为UTF8，支持fs、widget*/ 
	path:string,

	/**（可选项）转码参数*/ 
	config?:JSON,

}

interface tencentTIC_getFileTranscodeProgress_Params {
	/**转码任务taskId*/ 
	taskId:string,

}

interface tencentTIC_addTranscodeFile_Params {
	/**（可选项）转码参数*/ 
	config?:JSON,

}

interface tencentTIC_deleteFile_Params {
	/**（可选项）要删除的文件ID*/ 
	fileId?:string,

}

interface tencentTIC_switchFile_Params {
	/**要切换到的文件ID*/ 
	fileId:string,

}

interface tencentTIC_switchFileBoardIdStepIndex_Params {
	/**文件ID*/ 
	fileId:string,

	/**白板ID*/ 
	boardId:string,

	/**步数索引*/ 
	stepIndex:number,

}

interface tencentTIC_getFileInfo_Params {
	/**文件ID*/ 
	fileId:string,

}

interface tencentTIC_getFileBoardList_Params {
	/**文件ID*/ 
	fileId:string,

}

interface tencentTIC_clearFileDraws_Params {
	/**文件ID*/ 
	fileId:string,

}

interface tencentTIC_getThumbnailImages_Params {
	/**文件ID*/ 
	fileId:string,

}

interface tencentTIC_syncRemoteTime_Params {
	/**用户Id*/ 
	userId:string,

	/**毫秒级时间戳*/ 
	timestamp:number,

}

interface aliSmilePay {
	/** 采集刷脸所需的设备信息并完成刷脸的准备工作。如果返回成功结果，则请求商户服务端调用支付宝开放平台的人脸初始化接口。*/ 
	zolozGetMetaInfo():void

	/** 唤起人脸识别。如果认证成功，将返回一个ftoken。该ftoken用于后续查询被认证用户的信息*/ 
	zolozVerify():void

}
interface Linkedin {
	/**
	 * `获取客户端授权`
	 * ========params==========
	 *
	 * `state` :string : 由您选择且不易被猜中的唯一字符串值。 用于阻止跨站请求伪造攻击
	 *
	 * `scope` :any : 由网址编码组成且限定长度的会员权限列表，表示应用代表用户请求的权限。如果您在调用中未指定范围，我们将使用您在应用配置中定义的默认会员权限
	 */
	auth(params:Linkedin_auth_Params, callback?: (ret:JSON) => void):void

	/** 第三方登录*/ 
	login(callback?: (ret:JSON) => void):void

	/** 获取邮箱以及URN  （仅android支持）*/ 
	getEmailAndURN(callback?: (ret:JSON) => void):void

	/**
	 * `分享`
	 * ========params==========
	 *
	 * `shareUrl` :string : 分享地址（POST）
	 *
	 * `request` :JSON : 分享请求文本,详情参考[LinkedIn分享文档](https://docs.microsoft.com/zh-cn/linkedin/consumer/integrations/self-serve/share-on-linkedin)
	 */
	share(params:Linkedin_share_Params, callback?: (ret:JSON) => void):void

}
interface Linkedin_auth_Params {
	/**由您选择且不易被猜中的唯一字符串值。 用于阻止跨站请求伪造攻击*/ 
	state:string,

	/**由网址编码组成且限定长度的会员权限列表，表示应用代表用户请求的权限。如果您在调用中未指定范围，我们将使用您在应用配置中定义的默认会员权限*/ 
	scope:any,

}

interface Linkedin_share_Params {
	/**分享地址（POST）*/ 
	shareUrl:string,

	/**分享请求文本,详情参考[LinkedIn分享文档](https://docs.microsoft.com/zh-cn/linkedin/consumer/integrations/self-serve/share-on-linkedin)*/ 
	request:JSON,

}

interface kf5 {
}
interface faceidLive {
	/** SDK网络授权*/ 
	netAuth(callback?: (ret:JSON) => void):void

	/**
	 * `开始人脸识别，获取人脸识别结果信息；配合API接口[文档](https://faceid.com/pages/documents/4173286)完成人脸识别检测。`
	 * ========params==========
	 *
	 * `imgtype` :string : 扫描身份证成功后获取照片的形式
	 */
	liveinfo(params:faceidLive_liveinfo_Params, callback?: (ret:JSON) => void):void

	/** 获取IOS测试包的Bundle Identifier*/ 
	bundleIdentifier(callback?: (ret:JSON) => void):void

}
interface faceidLive_liveinfo_Params {
	/**扫描身份证成功后获取照片的形式*/ 
	imgtype:string,

}

interface mico {
}
interface dingding {
	/** 判断当前设备是否安装钉钉客户端*/ 
	isInstalled():void

	/**
	 * `分享文本内容`
	 * ========params==========
	 *
	 * `appId` :string : （必选项）从钉钉开放平台获取的 appid。
	 *
	 * `text` :string : 分享的文本
	 */
	shareText(params:dingding_shareText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享图片内容`
	 * ========params==========
	 *
	 * `appId` :string : （必选项）从钉钉开放平台获取的 appid。
	 *
	 * `contentUrl` :string : 分享图片的 url 地址（支持 fs://、widget:// 和网络路径）(android不支持widget)
	 */
	shareImage(params:dingding_shareImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享网页`
	 * ========params==========
	 *
	 * `appId` :string : （必选项）从钉钉开放平台获取的 appid。
	 *
	 * `title` :string : （可选项）分享网页的标题
	 *
	 * `description` :string : （可选项）分享网页的描述。
	 *
	 * `thumurl` :string : （可选项）分享网页的缩略图地址，要求本地路径（fs://、widget://和网络路径）(android不支持widget)
	 *
	 * `url` :string : 分享网页的 url 地址。
	 */
	shareWebpage(params:dingding_shareWebpage_Params, callback?: (ret:JSON) => void):void

	/** 是否支持三方登陆*/ 
	isSupportAuth(callback?: (ret:JSON) => void):void

	/**
	 * `三方登陆`
	 * ========params==========
	 *
	 * `appId` :string : 从钉钉开放平台获取的 appid。；此参数iOS不用传（此参数在初始化是已经在config中配置了）
	 *
	 * `state` :string : (可选)用于保持请求和回调的状态，授权请求后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验；此参数iOS不用传
	 */
	auth(params:dingding_auth_Params, callback?: (ret:JSON) => void):void

}
interface dingding_shareText_Params {
	/**（必选项）从钉钉开放平台获取的 appid。*/ 
	appId:string,

	/**分享的文本*/ 
	text:string,

}

interface dingding_shareImage_Params {
	/**（必选项）从钉钉开放平台获取的 appid。*/ 
	appId:string,

	/**分享图片的 url 地址（支持 fs://、widget:// 和网络路径）(android不支持widget)*/ 
	contentUrl:string,

}

interface dingding_shareWebpage_Params {
	/**（必选项）从钉钉开放平台获取的 appid。*/ 
	appId:string,

	/**（可选项）分享网页的标题*/ 
	title?:string,

	/**（可选项）分享网页的描述。*/ 
	description?:string,

	/**（可选项）分享网页的缩略图地址，要求本地路径（fs://、widget://和网络路径）(android不支持widget)*/ 
	thumurl?:string,

	/**分享网页的 url 地址。*/ 
	url:string,

}

interface dingding_auth_Params {
	/**从钉钉开放平台获取的 appid。；此参数iOS不用传（此参数在初始化是已经在config中配置了）*/ 
	appId:string,

	/**(可选)用于保持请求和回调的状态，授权请求后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验；此参数iOS不用传*/ 
	state?:string,

}

interface tencentPush {
}
interface txMarketing {
}
interface sendSms {
}
interface voiceRecognizer {
	/** 创建科大讯飞引擎*/ 
	createUtility(callback?: (ret:JSON) => void):void

	/**
	 * `添加监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件的名字
	 *
	 * `realTime` :boolean : （可选项）当 name 为 recognizeResult 时，是否实时返回识别结果
	 */
	addEventListener(params:voiceRecognizer_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除已添加的监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件的名字
	 */
	removeEventListener(params:voiceRecognizer_removeEventListener_Params):void

	/**
	 * `语音识别参数配置`
	 * ========params==========
	 *
	 * `config` :JSON : 识别语音时的参数配置
	 */
	recognizeConfig(params:voiceRecognizer_recognizeConfig_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始语音识别，注意：同时只能进行一路会话，这次会话没有结束不能进行下一路会话，否则会报错。若有需要多次回话， 请通过 addEventListener 接口监听 onError ，在该回调事件内请求下一路回话。`
	 * ========params==========
	 *
	 * `audioFileName` :string : （可选项）录制的音频文件保存名字（如123.pcm,一定要加后缀名），结束后文件笛子（绝对路径）会在 addEventListener 监听recognizeResult 回调函数里获取；若不传则不保存
	 */
	recognizeStart(params:voiceRecognizer_recognizeStart_Params, callback?: (ret:JSON) => void):void

	/** 停止录音，调用此函数会停止录音，并开始进行语音识别。*/ 
	recognizeStop():void

	/** 取消本次会话。*/ 
	recognizeCancel():void

	/** 语音识别是否正在录音*/ 
	recogizeListening():void

	/**
	 * `音频文件的写入`
	 * ========params==========
	 *
	 * `filePath` :string : 需要识别的语音文件的路径
	 */
	fileIdentify(params:voiceRecognizer_fileIdentify_Params, callback?: (ret:JSON) => void):void

	/**
	 * `语音朗读配置`
	 * ========params==========
	 *
	 * `config` :JSON : 识别语音时的参数配置
	 */
	readConfig(params:voiceRecognizer_readConfig_Params, callback?: (ret:JSON) => void):void

	/** 开始合成(播放)， 调用此函数进行合成，如果发生错误会回调错误 addEventListener `readComplete`，合成的文本的最大的字节数为1k*/ 
	startRead():void

	/**
	 * `开始合成(不播放)， 调用此函数进行合成，如果发生错误会回调错误 addEventListener  `readComplete`，合成的文本的最大的字节数为1k`
	 * ========params==========
	 *
	 * `audioFileName` :string : （可选项）录制的音频文件保存名字（如123.pcm,一定要加后缀名），结束后文件笛子（绝对路径）会在 addEventListener 监听  回调函数里获取；若不传则不保存;(android会默认生成一个文件并保存，默认生成的文件格式为wav)
	 *
	 * `readString` :string : 要朗读的字符串，最大的字节数为1k
	 */
	startSynthesize(params:voiceRecognizer_startSynthesize_Params):void

	/** 暂停播放之后，合成不会暂停，仍会继续，如果发生错误则会回调错误addEventListener  `readComplete`，*/ 
	pauseRead():void

	/** 恢复播放*/ 
	resumeRead():void

	/** 停止播放*/ 
	stopRead():void

	/** 识别正在语音识别录音*/ 
	isReading():void

	/**
	 * `语音唤醒配置`
	 * ========params==========
	 *
	 * `continue` :boolean : （可选项）设置唤醒服务周期，true：表示唤醒成功后继续录音，并保持唤醒状态；fals：表示唤醒成功后停止录音
	 *
	 * `threshold` :string : 唤醒门限值，格式如下默认值，0:表示第一个唤醒词，-20表示对应的门限值。1：表示第二个唤醒词，-20表示对应的门限值
	 */
	wakeupConfig(params:voiceRecognizer_wakeupConfig_Params, callback?: (ret:JSON) => void):void

	/** 语音唤醒开始*/ 
	wakeupStart():void

	/** 语音唤醒停止，注意与cancel的区别，紧紧停止服务，并不释放资源*/ 
	wakeupStop():void

	/** 语音唤醒取消*/ 
	wakeupCancel():void

	/** 语音唤醒是否正在录音*/ 
	wakeupIsListening():void

	/**
	 * `添加音量大小指示器，`
	 * ========params==========
	 *
	 * `center` :JSON : （可选项）音量指示器锚点坐标
	 *
	 * `alphas` :Array : （可选项）单条指示器每个指示条的透明度组成的数组。本数组顺序同 orientation 指示的方向。
	 *
	 * `gradientColors` :Array : （可选项）单条指示器每个指示条的顶部和底部色值配置组成的数组，模块会将两色值渐变处理，渐变色分界点是从上往下30%的位置。本数组顺序同 orientation 指示的方向。
	 *
	 * `orientation` :string : （可选项）指示波传递方向
	 *
	 * `target` :string : （可选项）指示器对象
	 *
	 * `bg` :string : （可选项）录音标识的背景色，支持 rgb，rgba，#
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `ret` :JSON : null
	 */
	addHUD(params:voiceRecognizer_addHUD_Params):void

	/**
	 * `隐藏音量指示器`
	 * ========params==========
	 *
	 * `id` :string : （可选项）操作的模块对象 id，若不传则隐藏所有已打开的模块对象
	 */
	hideHUD(params:voiceRecognizer_hideHUD_Params):void

	/** 显示音量大小指示器*/ 
	showHUD():void

	/**
	 * `关闭音量指示器`
	 * ========params==========
	 *
	 * `id` :string : （可选项）操作的模块对象 id，若不传则关闭所有已打开的模块对象
	 */
	closeHUD(params:voiceRecognizer_closeHUD_Params):void

}
interface voiceRecognizer_addEventListener_Params {
	/**监听的事件的名字*/ 
	name:string,

	/**（可选项）当 name 为 recognizeResult 时，是否实时返回识别结果*/ 
	realTime?:boolean,

}

interface voiceRecognizer_removeEventListener_Params {
	/**监听的事件的名字*/ 
	name:string,

}

interface voiceRecognizer_recognizeConfig_Params {
	/**识别语音时的参数配置*/ 
	config:JSON,

}

interface voiceRecognizer_recognizeStart_Params {
	/**（可选项）录制的音频文件保存名字（如123.pcm,一定要加后缀名），结束后文件笛子（绝对路径）会在 addEventListener 监听recognizeResult 回调函数里获取；若不传则不保存*/ 
	audioFileName?:string,

}

interface voiceRecognizer_fileIdentify_Params {
	/**需要识别的语音文件的路径*/ 
	filePath:string,

}

interface voiceRecognizer_readConfig_Params {
	/**识别语音时的参数配置*/ 
	config:JSON,

}

interface voiceRecognizer_startSynthesize_Params {
	/**（可选项）录制的音频文件保存名字（如123.pcm,一定要加后缀名），结束后文件笛子（绝对路径）会在 addEventListener 监听  回调函数里获取；若不传则不保存;(android会默认生成一个文件并保存，默认生成的文件格式为wav)*/ 
	audioFileName?:string,

	/**要朗读的字符串，最大的字节数为1k*/ 
	readString:string,

}

interface voiceRecognizer_wakeupConfig_Params {
	/**（可选项）设置唤醒服务周期，true：表示唤醒成功后继续录音，并保持唤醒状态；fals：表示唤醒成功后停止录音*/ 
	continue?:boolean,

	/**唤醒门限值，格式如下默认值，0:表示第一个唤醒词，-20表示对应的门限值。1：表示第二个唤醒词，-20表示对应的门限值*/ 
	threshold:string,

}

interface voiceRecognizer_addHUD_Params {
	/**（可选项）音量指示器锚点坐标*/ 
	center?:JSON,

	/**（可选项）单条指示器每个指示条的透明度组成的数组。本数组顺序同 orientation 指示的方向。*/ 
	alphas?:Array,

	/**（可选项）单条指示器每个指示条的顶部和底部色值配置组成的数组，模块会将两色值渐变处理，渐变色分界点是从上往下30%的位置。本数组顺序同 orientation 指示的方向。*/ 
	gradientColors?:Array,

	/**（可选项）指示波传递方向*/ 
	orientation?:string,

	/**（可选项）指示器对象*/ 
	target?:string,

	/**（可选项）录音标识的背景色，支持 rgb，rgba，#*/ 
	bg?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**null*/ 
	ret:JSON,

}

interface voiceRecognizer_hideHUD_Params {
	/**（可选项）操作的模块对象 id，若不传则隐藏所有已打开的模块对象*/ 
	id?:string,

}

interface voiceRecognizer_closeHUD_Params {
	/**（可选项）操作的模块对象 id，若不传则关闭所有已打开的模块对象*/ 
	id?:string,

}

interface netEaseLive {
	/**
	 * `初始化默认推流引擎`
	 * ========params==========
	 *
	 * `url` :string : 直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID
	 */
	defaultStream(params:netEaseLive_defaultStream_Params):void

	/**
	 * `直播推流引擎初始化，不仅设置直播推流的地址，同时提供直播中视频相关参数设置`
	 * ========params==========
	 *
	 * `url` :string : 直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID
	 *
	 * `videoParaCtx` :JSON : （可选项）直播推流视频参数配置
	 */
	videoParaCtxStream(params:netEaseLive_videoParaCtxStream_Params):void

	/**
	 * `初始化直播推流引擎，不仅设置直播推流地址，同时提供直播中所有可配置参数设置`
	 * ========params==========
	 *
	 * `url` :string : 直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID
	 *
	 * `paraCtx` :JSON : （可选项）直播推流视频参数配置
	 */
	initStream(params:netEaseLive_initStream_Params):void

	/** 反初始化：释放直播推流所占系统资源*/ 
	unInitLiveStream():void

	/**
	 * `设置推流url`
	 * ========params==========
	 *
	 * `url` :string : 直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID
	 */
	setPushUrl(params:netEaseLive_setPushUrl_Params):void

	/**
	 * `设置视频关键参数`
	 * ========params==========
	 *
	 * `quality` :string : （可选项）直播视频流质量
	 *
	 * `bitrate` :number : （可选项）推流码率 default 会按照分辨率设置，取值范围：
	 *
	 * `fps` :number : （可选项）采集帧率，取值范围：
	 *
	 * `orientation` :string : （可选项）摄像头采集方向
	 */
	setVideoParameters(params:netEaseLive_setVideoParameters_Params):void

	/** 准备开始推流接口*/ 
	startLiveStream(callback?: (ret:JSON) => void):void

	/** 重启开始视频推流，需要先启动推流startLiveStream，开启音视频推流，才可以中断视频推流，重启视频推流*/ 
	resumeVideoLiveStream():void

	/** 中断视频推流，需要先启动推流startLiveStream，开启音视频推流，才可以中断视频推流，重启视频推流*/ 
	pauseVideoLiveStream():void

	/** 重启音频推流，需要先启动推流startLiveStream，开启音视频推流，才可以中断音频推流，重启音频推流。*/ 
	resumeAudioLiveStream():void

	/** 中断音频推流，需要先启动推流startLiveStream，开启音视频推流，才可以中断音频推流，重启音频推流。*/ 
	pauseAudioLiveStream():void

	/** 监听推流*/ 
	addStreamListener():void

	/** 结束推流*/ 
	stopLiveStream(callback?: (ret:JSON) => void):void

	/**
	 * `开启预览窗口（相当于 open 一个 frame）`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	startVideoPreview(params:netEaseLive_startVideoPreview_Params):void

	/** 暂停视频预览，如果正在直播，则同时关闭视频预览以及视频推流*/ 
	pauseVideoPreview():void

	/** 继续视频预览，如果正在直播，则开始视频推流*/ 
	resumeVideoPreview():void

	/**
	 * `本地录制部分（目前仅支持flv），开始录制并保存本地文件`
	 * ========params==========
	 *
	 * `recordFileName` :string : 本地录制的文件路径，要求本地路径（支持widget://、fs://）
	 */
	startRecord(params:netEaseLive_startRecord_Params, callback?: (ret:JSON) => void):void

	/** 停止本地录制*/ 
	stopRecord():void

	/**
	 * `开始播放混音文件`
	 * ========params==========
	 *
	 * `musicPath` :string : 音频文件地址/文件名，要求本地路径（支持widget://、fs://）
	 *
	 * `enableLoop` :boolean : （可选项）当前音频文件是否单曲循环
	 */
	startPlayMusic(params:netEaseLive_startPlayMusic_Params, callback?: (ret:JSON) => void):void

	/** 结束播放混音文件，释放播放文件*/ 
	stopPlayMusic():void

	/** 继续播放混音文件*/ 
	resumePlayMusic():void

	/** 中断播放混音文件*/ 
	pausePlayMusic():void

	/**
	 * `设置混音强度`
	 * ========params==========
	 *
	 * `value` :number : （可选项）混音强度范围【1-10】
	 */
	setMixIntensity(params:netEaseLive_setMixIntensity_Params):void

	/**
	 * `设置美颜`
	 * ========params==========
	 *
	 * `type` :string : （可选项）美颜类型
	 */
	setFilter(params:netEaseLive_setFilter_Params):void

	/**
	 * `设置磨皮滤镜强度`
	 * ========params==========
	 *
	 * `value` :number : 滤镜强度
	 */
	setSmoothFilterIntensity(params:netEaseLive_setSmoothFilterIntensity_Params):void

	/**
	 * `设置对比度滤镜强度`
	 * ========params==========
	 *
	 * `value` :number : 滤镜强度
	 */
	setContrastFilterIntensity(params:netEaseLive_setContrastFilterIntensity_Params):void

	/** 切换前后摄像头，任意时刻的前后摄像头切换功能*/ 
	switchCamera():void

	/**
	 * `如果已经通过 cameraFlash （videoParaCtxStream initStream接口内的参数）开启了摄像头闪关灯功能，你可以在任意时刻实时打开或关闭摄像头闪关灯。`
	 * ========params==========
	 *
	 * `flash` :boolean : （可选项）闪光灯开关
	 */
	switchFlash(params:netEaseLive_switchFlash_Params):void

	/** 获取当前摄像头的拉伸值*/ 
	getZoomScale():void

	/** 获取摄像头最大拉伸值*/ 
	getMaxZoomScale():void

	/**
	 * `如果已经通过 zoom （videoParaCtxStream initStream接口内的参数）开启了摄像头 zoom 功能，你可以在任意时刻实时改变最大 zoom 拉伸值 和 实时 zoom 拉伸值。`
	 * ========params==========
	 *
	 * `zoomScale` :number : 摄像头拉伸值
	 */
	setZoomScale(params:netEaseLive_setZoomScale_Params):void

	/**
	 * `添加水印`
	 * ========params==========
	 *
	 * `image` :string : 水印图片地址，要求本地路径（fs://、widget://）
	 *
	 * `rect` :JSON : （可选项）水印图片的在预览视频区域的位置及尺寸
	 *
	 * `location` :string : （可选项）水印图片在预览视频区域的的位置
	 */
	addWaterMark(params:netEaseLive_addWaterMark_Params):void

	/**
	 * `关闭本地预览静态水印`
	 * ========params==========
	 *
	 * `close` :boolean : 是否关闭
	 */
	closePreviewWaterMark(params:netEaseLive_closePreviewWaterMark_Params):void

	/**
	 * `关闭本地预览动态水印`
	 * ========params==========
	 *
	 * `close` :boolean : 是否关闭
	 */
	closePreviewDynamicWaterMark(params:netEaseLive_closePreviewDynamicWaterMark_Params):void

	/** 清除水印*/ 
	cleanWaterMark():void

	/** 直播统计信息监听*/ 
	addStatisticInfoListener():void

	/** 获取当前视频截图*/ 
	getFrameImage():void

	/**
	 * `设置trace 的level，loglevl trace 信息的级别`
	 * ========params==========
	 *
	 * `logLevel` :string : 信息的级别
	 */
	setTraceLevel(params:netEaseLive_setTraceLevel_Params):void

	/**
	 * `设置是否输出 log 到文件`
	 * ========params==========
	 *
	 * `isToFile` :boolean : 是否输出 log 文件
	 */
	isLogToFile(params:netEaseLive_isLogToFile_Params):void

	/** 获取当前sdk的版本号*/ 
	getSDKVersionID():void

	/**
	 * `测速之前设置测速次数和上传数据大小`
	 * ========params==========
	 *
	 * `count` :number : （可选项）测速次数，测速之后，取平均值返回结果
	 *
	 * `capacity` :number : （可选项）上传数据大小(仅限于文件上传类型,经测试，NTS2不能超过500k（含500k)),单位是字节，500k＝500*1024，控制最大不超过10M
	 */
	setSpeedCacl(params:netEaseLive_setSpeedCacl_Params):void

	/**
	 * `开始测速`
	 * ========params==========
	 *
	 * `url` :string : 测速地址
	 */
	startSpeedCalc(params:netEaseLive_startSpeedCalc_Params, callback?: (ret:JSON) => void):void

	/**  结束测速*/ 
	stopSpeedCalc():void

}
interface netEaseLive_defaultStream_Params {
	/**直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID*/ 
	url:string,

}

interface netEaseLive_videoParaCtxStream_Params {
	/**直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID*/ 
	url:string,

	/**（可选项）直播推流视频参数配置*/ 
	videoParaCtx?:JSON,

}

interface netEaseLive_initStream_Params {
	/**直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID*/ 
	url:string,

	/**（可选项）直播推流视频参数配置*/ 
	paraCtx?:JSON,

}

interface netEaseLive_setPushUrl_Params {
	/**直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID*/ 
	url:string,

}

interface netEaseLive_setVideoParameters_Params {
	/**（可选项）直播视频流质量*/ 
	quality?:string,

	/**（可选项）推流码率 default 会按照分辨率设置，取值范围：*/ 
	bitrate?:number,

	/**（可选项）采集帧率，取值范围：*/ 
	fps?:number,

	/**（可选项）摄像头采集方向*/ 
	orientation?:string,

}

interface netEaseLive_startVideoPreview_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface netEaseLive_startRecord_Params {
	/**本地录制的文件路径，要求本地路径（支持widget://、fs://）*/ 
	recordFileName:string,

}

interface netEaseLive_startPlayMusic_Params {
	/**音频文件地址/文件名，要求本地路径（支持widget://、fs://）*/ 
	musicPath:string,

	/**（可选项）当前音频文件是否单曲循环*/ 
	enableLoop?:boolean,

}

interface netEaseLive_setMixIntensity_Params {
	/**（可选项）混音强度范围【1-10】*/ 
	value?:number,

}

interface netEaseLive_setFilter_Params {
	/**（可选项）美颜类型*/ 
	type?:string,

}

interface netEaseLive_setSmoothFilterIntensity_Params {
	/**滤镜强度*/ 
	value:number,

}

interface netEaseLive_setContrastFilterIntensity_Params {
	/**滤镜强度*/ 
	value:number,

}

interface netEaseLive_switchFlash_Params {
	/**（可选项）闪光灯开关*/ 
	flash?:boolean,

}

interface netEaseLive_setZoomScale_Params {
	/**摄像头拉伸值*/ 
	zoomScale:number,

}

interface netEaseLive_addWaterMark_Params {
	/**水印图片地址，要求本地路径（fs://、widget://）*/ 
	image:string,

	/**（可选项）水印图片的在预览视频区域的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）水印图片在预览视频区域的的位置*/ 
	location?:string,

}

interface netEaseLive_closePreviewWaterMark_Params {
	/**是否关闭*/ 
	close:boolean,

}

interface netEaseLive_closePreviewDynamicWaterMark_Params {
	/**是否关闭*/ 
	close:boolean,

}

interface netEaseLive_setTraceLevel_Params {
	/**信息的级别*/ 
	logLevel:string,

}

interface netEaseLive_isLogToFile_Params {
	/**是否输出 log 文件*/ 
	isToFile:boolean,

}

interface netEaseLive_setSpeedCacl_Params {
	/**（可选项）测速次数，测速之后，取平均值返回结果*/ 
	count?:number,

	/**（可选项）上传数据大小(仅限于文件上传类型,经测试，NTS2不能超过500k（含500k)),单位是字节，500k＝500*1024，控制最大不超过10M*/ 
	capacity?:number,

}

interface netEaseLive_startSpeedCalc_Params {
	/**测速地址*/ 
	url:string,

}

interface openinstall {
	/** ## 示例代码*/ 
	init():void

	/** 在拉起APP时，获取由web网页中传递过来的参数*/ 
	getWakeup(callback?: (ret:JSON) => void):void

	/**
	 * `获取由web网页中传递过来的安装参数`
	 * ========params==========
	 *
	 * `timeout` :null : null
	 */
	getInstall(params:openinstall_getInstall_Params, callback?: (ret:JSON) => void):void

	/** 上报注册量*/ 
	reportRegister():void

	/**
	 * `效果点统计`
	 * ========params==========
	 *
	 * `effectId` :string : 效果点ID
	 *
	 * `effectValue` :number : 效果点值，货币以分为单位
	 */
	reportEffectPoint(params:openinstall_reportEffectPoint_Params):void

}
interface openinstall_getInstall_Params {
	/**null*/ 
	timeout:null,

}

interface openinstall_reportEffectPoint_Params {
	/**效果点ID*/ 
	effectId:string,

	/**效果点值，货币以分为单位*/ 
	effectValue:number,

}

interface kf5sdk {
}
interface qiniuStorage {
	/**
	 * `配置文件上传参数（此方法必须调用）`
	 * ========params==========
	 *
	 * `mimeType` :string : （可选项）为上传文件设置一个自定义的 MIME 类型，如果为空，那么服务端自动检测文件的 MIME 类型
	 *
	 * `checkCrc` :boolean : （可选项）为 false 时，服务端不会校验 crc32 值，checkCrc 为 YES 时，服务端会计算上传文件的 crc32 值，然后与用户提供的 crc32 参数值比较确认文件的完整性，如果校验失败会返回 406 错误。
	 *
	 * `params` :JSON : （可选项）用户自定义参数，必须以 x: 开头，这些参数可以作为变量用于 upToken 的 callbackBody、returnBody、asyncOps 参数中
	 *
	 * `zone` :string : 支持区域
	 */
	configUploader(params:qiniuStorage_configUploader_Params):void

	/**
	 * `开始上传文件`
	 * ========params==========
	 *
	 * `token` :string : 从服务器端 SDK 获取的 token
	 *
	 * `path` :string : 上传的文件（图片、视频等）的路径，要求本地路径（fs://、widget:// **注意：Android暂不支持widget://**）
	 *
	 * `key` :string : （可选项）上传到云存储的key（文件名），不传时表示是由七牛生成
	 */
	start(params:qiniuStorage_start_Params):void

	/** 停止、取消上传文件*/ 
	cancel():void

	/** 添加上传进度的监听*/ 
	addEventListener():void

}
interface qiniuStorage_configUploader_Params {
	/**（可选项）为上传文件设置一个自定义的 MIME 类型，如果为空，那么服务端自动检测文件的 MIME 类型*/ 
	mimeType?:string,

	/**（可选项）为 false 时，服务端不会校验 crc32 值，checkCrc 为 YES 时，服务端会计算上传文件的 crc32 值，然后与用户提供的 crc32 参数值比较确认文件的完整性，如果校验失败会返回 406 错误。*/ 
	checkCrc?:boolean,

	/**（可选项）用户自定义参数，必须以 x: 开头，这些参数可以作为变量用于 upToken 的 callbackBody、returnBody、asyncOps 参数中*/ 
	params?:JSON,

	/**支持区域*/ 
	zone:string,

}

interface qiniuStorage_start_Params {
	/**从服务器端 SDK 获取的 token*/ 
	token:string,

	/**上传的文件（图片、视频等）的路径，要求本地路径（fs://、widget:// **注意：Android暂不支持widget://**）*/ 
	path:string,

	/**（可选项）上传到云存储的key（文件名），不传时表示是由七牛生成*/ 
	key?:string,

}

interface tencentTRTC {
	/**
	 * `进入房间`
	 * ========params==========
	 *
	 * `appId` :number : 腾讯云 SDKAppId，进入腾讯云实时音视频[控制台](https://console.cloud.tencent.com/rav ) 创建应用，即可看到 SDKAppId
	 *
	 * `userId` :string : 当前用户的 userId，相当于用户名
	 *
	 * `roomId` :string : 房间号码 ，在同一个房间里的用户（userId）可以彼此看到对方并进行视频通话
	 *
	 * `userSig` :string : 用户签名 ，当前 userId 对应的验证签名，相当于使用云服务的登录密码，[如何计算userSig](https://cloud.tencent.com/document/product/647/17275)
	 *
	 * `privateMapKey` :string : （可选项）房间签名 ，当您希望某个房间只能让特定的 userId 进入时，需要使用 privateMapKey 进行权限保护。仅建议有高级别安全需求的客户使用，更多详情请参见 [进房权限保护](https://cloud.tencent.com/document/product/647/32240)
	 *
	 * `scene` :number : （可选项）应用场景
	 */
	enterRoom(params:tencentTRTC_enterRoom_Params):void

	/** 添加监听*/ 
	setTRTCListener(callback?: (ret:JSON) => void):void

	/** 退出房间*/ 
	exitRoom():void

	/** 开启本地语音*/ 
	startLocalAudio():void

	/** 关闭本地语音*/ 
	stopLocalAudio():void

	/**
	 * `开启本地画面采集`
	 * ========params==========
	 *
	 * `rect` :any : 画面预览控件位置
	 *
	 * `isFrontCamera` :boolean : （可选项）是否开启前置摄像头
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	startLocalPreview(params:tencentTRTC_startLocalPreview_Params):void

	/** 停止本地画面采集*/ 
	stopLocalPreview():void

	/** 切换摄像头*/ 
	switchCamera():void

	/**
	 * `暂停/恢复推送本地的视频数据`
	 * ========params==========
	 *
	 * `mute` :boolean : （可选项）是否暂停，true:暂停，false:恢复
	 */
	muteLocalVideo(params:tencentTRTC_muteLocalVideo_Params):void

	/**
	 * `暂停/恢复推送本地的音频数据`
	 * ========params==========
	 *
	 * `mute` :boolean : （可选项）是否暂停，true:暂停，false:恢复
	 */
	muteLocalAudio(params:tencentTRTC_muteLocalAudio_Params):void

	/**
	 * `开始显示用户userId的视频画面`
	 * ========params==========
	 *
	 * `rect` :any : 画面预览控件位置
	 *
	 * `remoteUid` :string : 远程用户userId
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	startRemoteView(params:tencentTRTC_startRemoteView_Params):void

	/**
	 * `停止显示用户userId的视频画面`
	 * ========params==========
	 *
	 * `remoteUid` :string : 远程用户userId
	 */
	stopRemoteView(params:tencentTRTC_stopRemoteView_Params):void

	/** 停止显示所有远端视频画面，同时不再拉取远端用户的视频数据流*/ 
	stopAllRemoteView():void

	/**
	 * `暂停/恢复接收指定的远端视频流。`
	 * ========params==========
	 *
	 * `remoteUid` :string : 远程用户userId
	 *
	 * `mute` :boolean : 是否暂停接收
	 */
	muteRemoteVideoStream(params:tencentTRTC_muteRemoteVideoStream_Params):void

	/**
	 * `暂停/恢复接收所有远端视频流。`
	 * ========params==========
	 *
	 * `mute` :boolean : 是否暂停接收
	 */
	muteAllRemoteVideoStreams(params:tencentTRTC_muteAllRemoteVideoStreams_Params):void

	/**
	 * `暂停/恢复接收指定的远端音频流。`
	 * ========params==========
	 *
	 * `remoteUid` :string : 远程用户userId
	 *
	 * `mute` :boolean : 是否暂停接收
	 */
	muteRemoteAudio(params:tencentTRTC_muteRemoteAudio_Params):void

	/**
	 * `暂停/恢复接收所有远端音频流。`
	 * ========params==========
	 *
	 * `mute` :boolean : 是否暂停接收
	 */
	muteAllRemoteAudio(params:tencentTRTC_muteAllRemoteAudio_Params):void

	/**
	 * `设置本地图像的顺时针旋转角度`
	 * ========params==========
	 *
	 * `rotation` :number : 旋转角度
	 */
	setLocalViewRotation(params:tencentTRTC_setLocalViewRotation_Params):void

	/**
	 * `设置远端图像的顺时针旋转角度`
	 * ========params==========
	 *
	 * `remoteUid` :string : 远程用户userId
	 *
	 * `rotation` :number : 旋转角度
	 */
	setRemoteViewRotation(params:tencentTRTC_setRemoteViewRotation_Params):void

	/**
	 * `设置视频编码输出的画面方向，即设置远端用户观看到的和服务器录制的画面方向`
	 * ========params==========
	 *
	 * `rotation` :number : 旋转角度
	 */
	setVideoEncoderRotation(params:tencentTRTC_setVideoEncoderRotation_Params):void

	/**
	 * `设置本地摄像头预览画面的镜像模式`
	 * ========params==========
	 *
	 * `type` :number : 镜像模式
	 */
	setLocalViewMirror(params:tencentTRTC_setLocalViewMirror_Params):void

	/**
	 * `设置编码器输出的画面镜像模式`
	 * ========params==========
	 *
	 * `mirror` :boolean : （可选项）是否镜像
	 */
	setVideoEncoderMirror(params:tencentTRTC_setVideoEncoderMirror_Params):void

	/**
	 * `设置重力感应的适应模式`
	 * ========params==========
	 *
	 * `mode` :number : （可选项）重力感应模式
	 */
	setGSensorMode(params:tencentTRTC_setGSensorMode_Params):void

	/**
	 * `视频画面截图`
	 * ========params==========
	 *
	 * `remoteUid` :string : 远程用户userId，iOS端不传此参数表示截取本地视频画面
	 *
	 * `streamType` :number : （可选项）视频流类型
	 */
	snapshotVideo(params:tencentTRTC_snapshotVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置 SDK 采集音量`
	 * ========params==========
	 *
	 * `volume` :number : 音量大小
	 */
	setAudioCaptureVolume(params:tencentTRTC_setAudioCaptureVolume_Params):void

	/** 获取 SDK 采集音量*/ 
	getAudioCaptureVolume(callback?: (ret:JSON) => void):void

	/**
	 * `设置 SDK 播放音量`
	 * ========params==========
	 *
	 * `volume` :number : 音量大小
	 */
	setAudioPlayoutVolume(params:tencentTRTC_setAudioPlayoutVolume_Params):void

	/** 获取 SDK 播放音量*/ 
	getAudioPlayoutVolume(callback?: (ret:JSON) => void):void

	/**
	 * `开启耳返`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启耳返,开启后会在耳机里听到自己的声音,仅带耳机时有效
	 */
	enableAudioEarMonitoring(params:tencentTRTC_enableAudioEarMonitoring_Params):void

	/** 查询当前摄像头是否支持缩放*/ 
	isCameraZoomSupported(callback?: (ret:JSON) => void):void

	/**
	 * `设置摄像头缩放因子（焦距）`
	 * ========params==========
	 *
	 * `distance` :number : 缩放因子
	 */
	setZoom(params:tencentTRTC_setZoom_Params):void

	/** 查询是否支持开启闪光灯*/ 
	isCameraTorchSupported(callback?: (ret:JSON) => void):void

	/**
	 * `开关闪光灯`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启闪光灯
	 */
	enableTorch(params:tencentTRTC_enableTorch_Params):void

	/** 是否支持设置焦点*/ 
	isCameraFocusSupport(callback?: (ret:JSON) => void):void

	/**
	 * `设置摄像头焦点`
	 * ========params==========
	 *
	 * `x` :number : 对焦位置x坐标
	 *
	 * `y` :number : 对焦位置y坐标
	 */
	setFocusPosition(params:tencentTRTC_setFocusPosition_Params):void

	/** 启动屏幕分享，iOS本接口只支持iOS 13（包含）以上系统*/ 
	startScreenCapture():void

	/** 停止屏幕采集，iOS本接口只支持iOS 13（包含）以上系统*/ 
	stopScreenCapture():void

	/** 暂停屏幕分享，iOS本接口只支持iOS 13（包含）以上系统*/ 
	pauseScreenCapture():void

	/** 恢复屏幕分享，iOS本接口只支持iOS 13（包含）以上系统*/ 
	resumeScreenCapture():void

	/**
	 * `启动播放背景音乐`
	 * ========params==========
	 *
	 * `path` :string : 音乐文件路径，支持的文件格式：aac, mp3，android支持fs路径，iOS支持widget、fs路径
	 */
	playBGM(params:tencentTRTC_playBGM_Params, callback?: (ret:JSON) => void):void

	/** 停止播放背景音乐。*/ 
	stopBGM():void

	/** 暂停播放背景音乐。*/ 
	pauseBGM():void

	/** 继续播放背景音乐*/ 
	resumeBGM():void

	/**
	 * `设置 BGM 播放进度。`
	 * ========params==========
	 *
	 * `pos` :number : 进度，（豪秒）
	 */
	setBGMPosition(params:tencentTRTC_setBGMPosition_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置背景音乐播放音量的大小。`
	 * ========params==========
	 *
	 * `volume` :number : 音量大小
	 */
	setBGMVolume(params:tencentTRTC_setBGMVolume_Params):void

	/**
	 * `设置背景音乐本地播放音量的大小。`
	 * ========params==========
	 *
	 * `volume` :number : 音量大小
	 */
	setBGMPlayoutVolume(params:tencentTRTC_setBGMPlayoutVolume_Params):void

	/**
	 * `设置背景音乐远端播放音量的大小。`
	 * ========params==========
	 *
	 * `volume` :number : 音量大小
	 */
	setBGMPublishVolume(params:tencentTRTC_setBGMPublishVolume_Params):void

	/**
	 * `设置变声类型`
	 * ========params==========
	 *
	 * `type` :number : 变声类型
	 */
	setVoiceChangerType(params:tencentTRTC_setVoiceChangerType_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置本地图像的渲染模式`
	 * ========params==========
	 *
	 * `type` :number : 变声类型
	 */
	setLocalViewFillMode(params:tencentTRTC_setLocalViewFillMode_Params):void

	/**
	 * `设置远端图像的渲染模式`
	 * ========params==========
	 *
	 * `remoteUid` :string : 用户 ID
	 *
	 * `type` :number : 变声类型
	 */
	setRemoteViewFillMode(params:tencentTRTC_setRemoteViewFillMode_Params):void

	/**
	 * `设置视频编码器相关参数，，、该设置决定了远端用户看到的画面质量（同时也是云端录制出的视频文件的画面质量）`
	 * ========params==========
	 *
	 * `videoResolution` :number : 视频分辨率，此处仅定义横屏分辨率，如需使用竖屏分辨率（例如360 × 640），需要同时指定 resMode 为 1（竖屏分辨率）。1920_1080（114）分辨率仅支持iOS
	 *
	 * `resMode` :number : 分辨率模式
	 *
	 * `videoFps` :number : 视频采集帧率
	 *
	 * `videoBitrate` :number : 目标视频码率，SDK 会按照目标码率进行编码，只有在网络不佳的情况下才会主动降低视频码率
	 *
	 * `enableAdjustRes` :boolean : 是否允许 SDK 动态调整分辨率，开启后会对云端录制产生影响
	 */
	setVideoEncoderParam(params:tencentTRTC_setVideoEncoderParam_Params):void

}
interface tencentTRTC_enterRoom_Params {
	/**腾讯云 SDKAppId，进入腾讯云实时音视频[控制台](https://console.cloud.tencent.com/rav ) 创建应用，即可看到 SDKAppId*/ 
	appId:number,

	/**当前用户的 userId，相当于用户名*/ 
	userId:string,

	/**房间号码 ，在同一个房间里的用户（userId）可以彼此看到对方并进行视频通话*/ 
	roomId:string,

	/**用户签名 ，当前 userId 对应的验证签名，相当于使用云服务的登录密码，[如何计算userSig](https://cloud.tencent.com/document/product/647/17275)*/ 
	userSig:string,

	/**（可选项）房间签名 ，当您希望某个房间只能让特定的 userId 进入时，需要使用 privateMapKey 进行权限保护。仅建议有高级别安全需求的客户使用，更多详情请参见 [进房权限保护](https://cloud.tencent.com/document/product/647/32240)*/ 
	privateMapKey?:string,

	/**（可选项）应用场景*/ 
	scene?:number,

}

interface tencentTRTC_startLocalPreview_Params {
	/**画面预览控件位置*/ 
	rect:any,

	/**（可选项）是否开启前置摄像头*/ 
	isFrontCamera?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface tencentTRTC_muteLocalVideo_Params {
	/**（可选项）是否暂停，true:暂停，false:恢复*/ 
	mute?:boolean,

}

interface tencentTRTC_muteLocalAudio_Params {
	/**（可选项）是否暂停，true:暂停，false:恢复*/ 
	mute?:boolean,

}

interface tencentTRTC_startRemoteView_Params {
	/**画面预览控件位置*/ 
	rect:any,

	/**远程用户userId*/ 
	remoteUid:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface tencentTRTC_stopRemoteView_Params {
	/**远程用户userId*/ 
	remoteUid:string,

}

interface tencentTRTC_muteRemoteVideoStream_Params {
	/**远程用户userId*/ 
	remoteUid:string,

	/**是否暂停接收*/ 
	mute:boolean,

}

interface tencentTRTC_muteAllRemoteVideoStreams_Params {
	/**是否暂停接收*/ 
	mute:boolean,

}

interface tencentTRTC_muteRemoteAudio_Params {
	/**远程用户userId*/ 
	remoteUid:string,

	/**是否暂停接收*/ 
	mute:boolean,

}

interface tencentTRTC_muteAllRemoteAudio_Params {
	/**是否暂停接收*/ 
	mute:boolean,

}

interface tencentTRTC_setLocalViewRotation_Params {
	/**旋转角度*/ 
	rotation:number,

}

interface tencentTRTC_setRemoteViewRotation_Params {
	/**远程用户userId*/ 
	remoteUid:string,

	/**旋转角度*/ 
	rotation:number,

}

interface tencentTRTC_setVideoEncoderRotation_Params {
	/**旋转角度*/ 
	rotation:number,

}

interface tencentTRTC_setLocalViewMirror_Params {
	/**镜像模式*/ 
	type:number,

}

interface tencentTRTC_setVideoEncoderMirror_Params {
	/**（可选项）是否镜像*/ 
	mirror?:boolean,

}

interface tencentTRTC_setGSensorMode_Params {
	/**（可选项）重力感应模式*/ 
	mode?:number,

}

interface tencentTRTC_snapshotVideo_Params {
	/**远程用户userId，iOS端不传此参数表示截取本地视频画面*/ 
	remoteUid:string,

	/**（可选项）视频流类型*/ 
	streamType?:number,

}

interface tencentTRTC_setAudioCaptureVolume_Params {
	/**音量大小*/ 
	volume:number,

}

interface tencentTRTC_setAudioPlayoutVolume_Params {
	/**音量大小*/ 
	volume:number,

}

interface tencentTRTC_enableAudioEarMonitoring_Params {
	/**是否开启耳返,开启后会在耳机里听到自己的声音,仅带耳机时有效*/ 
	enable:boolean,

}

interface tencentTRTC_setZoom_Params {
	/**缩放因子*/ 
	distance:number,

}

interface tencentTRTC_enableTorch_Params {
	/**是否开启闪光灯*/ 
	enable:boolean,

}

interface tencentTRTC_setFocusPosition_Params {
	/**对焦位置x坐标*/ 
	x:number,

	/**对焦位置y坐标*/ 
	y:number,

}

interface tencentTRTC_playBGM_Params {
	/**音乐文件路径，支持的文件格式：aac, mp3，android支持fs路径，iOS支持widget、fs路径*/ 
	path:string,

}

interface tencentTRTC_setBGMPosition_Params {
	/**进度，（豪秒）*/ 
	pos:number,

}

interface tencentTRTC_setBGMVolume_Params {
	/**音量大小*/ 
	volume:number,

}

interface tencentTRTC_setBGMPlayoutVolume_Params {
	/**音量大小*/ 
	volume:number,

}

interface tencentTRTC_setBGMPublishVolume_Params {
	/**音量大小*/ 
	volume:number,

}

interface tencentTRTC_setVoiceChangerType_Params {
	/**变声类型*/ 
	type:number,

}

interface tencentTRTC_setLocalViewFillMode_Params {
	/**变声类型*/ 
	type:number,

}

interface tencentTRTC_setRemoteViewFillMode_Params {
	/**用户 ID*/ 
	remoteUid:string,

	/**变声类型*/ 
	type:number,

}

interface tencentTRTC_setVideoEncoderParam_Params {
	/**视频分辨率，此处仅定义横屏分辨率，如需使用竖屏分辨率（例如360 × 640），需要同时指定 resMode 为 1（竖屏分辨率）。1920_1080（114）分辨率仅支持iOS*/ 
	videoResolution:number,

	/**分辨率模式*/ 
	resMode:number,

	/**视频采集帧率*/ 
	videoFps:number,

	/**目标视频码率，SDK 会按照目标码率进行编码，只有在网络不佳的情况下才会主动降低视频码率*/ 
	videoBitrate:number,

	/**是否允许 SDK 动态调整分辨率，开启后会对云端录制产生影响*/ 
	enableAdjustRes:boolean,

}

interface alibcTrade {
	/** 初始化*/ 
	initSDK(callback?: (ret:JSON) => void):void

	/**
	 * `设置是否对淘客使用同步打点`
	 * ========params==========
	 *
	 * `isSync` :boolean : （可选项）是否对淘客使用同步打点
	 */
	setIsSyncForTaoke(params:alibcTrade_setIsSyncForTaoke_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置淘客全局参数`
	 * ========params==========
	 *
	 * `pid` :string : 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `taokeAppkey` :string : (可选项) 淘宝联盟后台的APPKEY字段。 如果需要高分佣能力，务必传入adzoneId和taokeAppkey 参数 [功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)
	 *
	 * `adzoneId` :string : (可选项)淘宝联盟adzoneId
	 */
	setTaokeParams(params:alibcTrade_setTaokeParams_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置渠道信息，渠道专享价专用。`
	 * ========params==========
	 *
	 * `type` :string : （可选项）设置渠道类型
	 *
	 * `name` :string : （可选项）设置渠道名称
	 */
	setChannel(params:alibcTrade_setChannel_Params):void

	/** 授权登录*/ 
	showLogin(callback?: (ret:JSON) => void):void

	/** 退出登录*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 获取用户信息*/ 
	getUserInfo(callback?: (ret:JSON) => void):void

	/** 监听页面加载完成后返回页面的title和url。*/ 
	addPageFinishListener():void

	/** 对页面加载时进行监听，返回页面的title和跳转的url。*/ 
	addLoadingListener(callback?: (ret:JSON) => void):void

	/** 控制当前外部的webview回退，**此接口 iOS 端已废弃***/ 
	webGoBack():void

	/**
	 * `打开淘宝商品详情页`
	 * ========params==========
	 *
	 * `itemId` :string : (必填项)商品真实ID或者混淆(open)ID。
	 *
	 * `openType` :string : (可选项)打开页面的方式
	 *
	 * `linkKey` :string : (可选项)当打开页面的方式（openType）为native时，设置拉起手淘or天猫。
	 *
	 * `taokeAppkey` :string : (可选项) 淘宝联盟后台的APPKEY字段。**新版本SDK新增 高佣转链/跨店结算 功能所需**， 如果需要高分佣能力，务必传入adzoneId和taokeAppkey 参数 并且openType设置为'native' [功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)
	 *
	 * `adzoneId` :string : (可选项)淘宝联盟adzoneId
	 *
	 * `pid` :string : (可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `pageClose` :boolean : (可选项) 购买商品支付成功后是否关闭淘宝页面。**仅Android有效**
	 *
	 * `url` :string : （可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）
	 *
	 * `pageCode` :string : （可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode
	 *
	 * `backScheme` :string : (可选项) 唤端返回的scheme，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://"。
	 */
	showDetailPage(params:alibcTrade_showDetailPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `使用外部webview打开淘宝商品详情页，**此接口 iOS 端已废弃**`
	 * ========params==========
	 *
	 * `itemId` :string : (必选项)商品id。
	 *
	 * `pid` :string : (可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `rect` :JSON : （可选项）frame 的位置和大小。
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空
	 *
	 * `jsObjectName` :string : (可选项) 注入到h5页面的全局window属性对象名称 **ios不支持**
	 *
	 * `url` :string : （可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）
	 *
	 * `pageCode` :string : （可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode
	 */
	showDetailPageWeb(params:alibcTrade_showDetailPageWeb_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开淘宝加入购物车页面`
	 * ========params==========
	 *
	 * `itemId` :string : (必选项)商品id。
	 *
	 * `pid` :string : (可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `pageClose` :boolean : (可选项) 购买商品支付成功后是否关闭淘宝页面。**仅Android有效**
	 *
	 * `url` :string : （可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）
	 *
	 * `pageCode` :string : （可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode
	 *
	 * `backScheme` :string : (可选项) 唤端返回的scheme，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://"。
	 */
	showAddCartPage(params:alibcTrade_showAddCartPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `使用外部webview方式，打开淘宝加入购物车页面，**此接口 iOS 端已废弃**`
	 * ========params==========
	 *
	 * `itemId` :string : (必选项)商品id。
	 *
	 * `pid` :string : (可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `rect` :JSON : （可选项）frame 的位置和大小。
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空
	 *
	 * `jsObjectName` :string : (可选项) 注入到h5页面的全局window属性对象名称。**iOS不支持**
	 *
	 * `url` :string : （可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）
	 *
	 * `pageCode` :string : （可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode
	 */
	showAddCartPageWeb(params:alibcTrade_showAddCartPageWeb_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开我的订单页面`
	 * ========params==========
	 *
	 * `orderType` :any : 默认跳转页面。
	 *
	 * `isAllOrder` :boolean : 是否显示所有订单
	 *
	 * `pid` :string : (可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `openType` :string : (可选项)打开页面的方式：拉起手淘/天猫 和 h5打开页面，默认值：h5
	 *
	 * `linkKey` :string : (可选项)当打开页面的方式（openType）为native时，设置拉起手淘or天猫。
	 *
	 * `pageClose` :boolean : (可选项) 购买商品支付成功后是否关闭淘宝页面。**仅Android有效**
	 *
	 * `url` :string : （可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）
	 *
	 * `pageCode` :string : （可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode
	 *
	 * `backScheme` :string : (可选项) 唤端返回的scheme，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://"。
	 */
	showMyOrders(params:alibcTrade_showMyOrders_Params, callback?: (ret:JSON) => void):void

	/**
	 * `使用外部webview方式，打开我的订单页面，**此接口 iOS 端已废弃**`
	 * ========params==========
	 *
	 * `orderType` :any : 默认跳转页面。
	 *
	 * `isAllOrder` :boolean : 是否显示所有订单
	 *
	 * `pid` :string : (可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `rect` :JSON : （可选项）frame 的位置和大小。
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空
	 *
	 * `jsObjectName` :string : (可选项) 注入到h5页面的全局window属性对象名称 **iOS不支持**
	 *
	 * `url` :string : （可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）
	 *
	 * `pageCode` :string : （可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode
	 */
	showMyOrdersWeb(params:alibcTrade_showMyOrdersWeb_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开我的购物车`
	 * ========params==========
	 *
	 * `pid` :string : (可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `openType` :string : (可选项)打开页面的方式
	 *
	 * `linkKey` :string : (可选项)当打开页面的方式（openType）为native时，设置拉起手淘or天猫。
	 *
	 * `pageClose` :boolean : (可选项) 购买商品支付成功后是否关闭淘宝页面。**仅Android有效**
	 *
	 * `url` :string : （可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）
	 *
	 * `pageCode` :string : （可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode
	 *
	 * `backScheme` :string : (可选项) 唤端返回的scheme，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://"。
	 */
	showMyCarts(params:alibcTrade_showMyCarts_Params, callback?: (ret:JSON) => void):void

	/**
	 * `使用外部webview方式，打开我的购物车，**此接口 iOS 端已废弃**`
	 * ========params==========
	 *
	 * `pid` :string : (可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `rect` :JSON : （可选项）frame 的位置和大小。
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空
	 *
	 * `jsObjectName` :string : (可选项) 注入到h5页面的全局window属性对象名称。**ios不支持**
	 *
	 * `url` :string : （可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）
	 *
	 * `pageCode` :string : （可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode
	 */
	showMyCartsWeb(params:alibcTrade_showMyCartsWeb_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开淘宝店铺页面`
	 * ========params==========
	 *
	 * `shopId` :string : 店铺id，支持明文id
	 *
	 * `openType` :string : (可选项)打开页面的方式
	 *
	 * `linkKey` :string : (可选项)当打开页面的方式（openType）为native时，设置拉起手淘or天猫。
	 *
	 * `pid` :string : (可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `pageClose` :boolean : (可选项) 购买商品支付成功后是否关闭淘宝页面。**仅Android有效**
	 *
	 * `url` :string : （可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）
	 *
	 * `pageCode` :string : （可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode
	 *
	 * `backScheme` :string : (可选项) 唤端返回的scheme，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://"。
	 */
	showShopPage(params:alibcTrade_showShopPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `使用外部webview方式，打开淘宝店铺页面，**此接口 iOS 端已废弃**`
	 * ========params==========
	 *
	 * `shopId` :string : 店铺id，支持明文id
	 *
	 * `pid` :string : (可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `rect` :JSON : （可选项）frame 的位置和大小。
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空
	 *
	 * `jsObjectName` :string : (可选项) 注入到h5页面的全局window属性对象名称。**ios不支持**
	 *
	 * `url` :string : （可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）
	 *
	 * `pageCode` :string : （可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode
	 */
	showShopPageWeb(params:alibcTrade_showShopPageWeb_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开url指定页面`
	 * ========params==========
	 *
	 * `url` :string : url
	 *
	 * `openType` :string : (可选项)打开页面的方式
	 *
	 * `linkKey` :string : (可选项)当打开页面的方式（openType）为native时，设置拉起手淘or天猫。
	 *
	 * `pid` :string : (可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `taokeAppkey` :string : (可选项) 淘宝联盟后台的APPKEY字段。**新版本SDK新增 高佣转链/跨店结算 功能所需**， 如果需要高分佣能力，务必传入adzoneId和taokeAppkey 参数 并且openType设置为'native' [功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)
	 *
	 * `adzoneId` :string : (可选项)淘宝联盟adzoneId
	 *
	 * `pageClose` :boolean : (可选项) 购买商品支付成功后是否关闭淘宝页面。**仅Android有效**
	 *
	 * `backScheme` :string : (可选项) 唤端返回的scheme，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://"。
	 */
	showPageByUrl(params:alibcTrade_showPageByUrl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `使用外部webview方式，打开url指定页面。**此接口 iOS 端已废弃**`
	 * ========params==========
	 *
	 * `url` :string : url
	 *
	 * `pid` :string : (可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `rect` :JSON : （可选项）frame 的位置和大小。
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : 是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空
	 *
	 * `jsObjectName` :string : (可选项) 注入到h5页面的全局window属性对象名称。**iOS不支持**
	 */
	showPageByUrlWeb(params:alibcTrade_showPageByUrlWeb_Params, callback?: (ret:JSON) => void):void

	/** 移除WebView，**此接口 iOS 端已废弃***/ 
	removeWeb():void

}
interface alibcTrade_setIsSyncForTaoke_Params {
	/**（可选项）是否对淘客使用同步打点*/ 
	isSync?:boolean,

}

interface alibcTrade_setTaokeParams_Params {
	/**淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid:string,

	/**(可选项) 淘宝联盟后台的APPKEY字段。 如果需要高分佣能力，务必传入adzoneId和taokeAppkey 参数 [功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)*/ 
	taokeAppkey?:string,

	/**(可选项)淘宝联盟adzoneId*/ 
	adzoneId?:string,

}

interface alibcTrade_setChannel_Params {
	/**（可选项）设置渠道类型*/ 
	type?:string,

	/**（可选项）设置渠道名称*/ 
	name?:string,

}

interface alibcTrade_showDetailPage_Params {
	/**(必填项)商品真实ID或者混淆(open)ID。*/ 
	itemId:string,

	/**(可选项)打开页面的方式*/ 
	openType?:string,

	/**(可选项)当打开页面的方式（openType）为native时，设置拉起手淘or天猫。*/ 
	linkKey?:string,

	/**(可选项) 淘宝联盟后台的APPKEY字段。**新版本SDK新增 高佣转链/跨店结算 功能所需**， 如果需要高分佣能力，务必传入adzoneId和taokeAppkey 参数 并且openType设置为'native' [功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)*/ 
	taokeAppkey?:string,

	/**(可选项)淘宝联盟adzoneId*/ 
	adzoneId?:string,

	/**(可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid?:string,

	/**(可选项) 购买商品支付成功后是否关闭淘宝页面。**仅Android有效***/ 
	pageClose?:boolean,

	/**（可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）*/ 
	url?:string,

	/**（可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode*/ 
	pageCode?:string,

	/**(可选项) 唤端返回的scheme，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://"。*/ 
	backScheme?:string,

}

interface alibcTrade_showDetailPageWeb_Params {
	/**(必选项)商品id。*/ 
	itemId:string,

	/**(可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid?:string,

	/**（可选项）frame 的位置和大小。*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空*/ 
	fixed:boolean,

	/**(可选项) 注入到h5页面的全局window属性对象名称 **ios不支持***/ 
	jsObjectName?:string,

	/**（可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）*/ 
	url?:string,

	/**（可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode*/ 
	pageCode?:string,

}

interface alibcTrade_showAddCartPage_Params {
	/**(必选项)商品id。*/ 
	itemId:string,

	/**(可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid?:string,

	/**(可选项) 购买商品支付成功后是否关闭淘宝页面。**仅Android有效***/ 
	pageClose?:boolean,

	/**（可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）*/ 
	url?:string,

	/**（可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode*/ 
	pageCode?:string,

	/**(可选项) 唤端返回的scheme，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://"。*/ 
	backScheme?:string,

}

interface alibcTrade_showAddCartPageWeb_Params {
	/**(必选项)商品id。*/ 
	itemId:string,

	/**(可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid?:string,

	/**（可选项）frame 的位置和大小。*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空*/ 
	fixed:boolean,

	/**(可选项) 注入到h5页面的全局window属性对象名称。**iOS不支持***/ 
	jsObjectName?:string,

	/**（可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）*/ 
	url?:string,

	/**（可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode*/ 
	pageCode?:string,

}

interface alibcTrade_showMyOrders_Params {
	/**默认跳转页面。*/ 
	orderType:any,

	/**是否显示所有订单*/ 
	isAllOrder:boolean,

	/**(可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid?:string,

	/**(可选项)打开页面的方式：拉起手淘/天猫 和 h5打开页面，默认值：h5*/ 
	openType?:string,

	/**(可选项)当打开页面的方式（openType）为native时，设置拉起手淘or天猫。*/ 
	linkKey?:string,

	/**(可选项) 购买商品支付成功后是否关闭淘宝页面。**仅Android有效***/ 
	pageClose?:boolean,

	/**（可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）*/ 
	url?:string,

	/**（可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode*/ 
	pageCode?:string,

	/**(可选项) 唤端返回的scheme，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://"。*/ 
	backScheme?:string,

}

interface alibcTrade_showMyOrdersWeb_Params {
	/**默认跳转页面。*/ 
	orderType:any,

	/**是否显示所有订单*/ 
	isAllOrder:boolean,

	/**(可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid?:string,

	/**（可选项）frame 的位置和大小。*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空*/ 
	fixed:boolean,

	/**(可选项) 注入到h5页面的全局window属性对象名称 **iOS不支持***/ 
	jsObjectName?:string,

	/**（可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）*/ 
	url?:string,

	/**（可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode*/ 
	pageCode?:string,

}

interface alibcTrade_showMyCarts_Params {
	/**(可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid?:string,

	/**(可选项)打开页面的方式*/ 
	openType?:string,

	/**(可选项)当打开页面的方式（openType）为native时，设置拉起手淘or天猫。*/ 
	linkKey?:string,

	/**(可选项) 购买商品支付成功后是否关闭淘宝页面。**仅Android有效***/ 
	pageClose?:boolean,

	/**（可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）*/ 
	url?:string,

	/**（可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode*/ 
	pageCode?:string,

	/**(可选项) 唤端返回的scheme，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://"。*/ 
	backScheme?:string,

}

interface alibcTrade_showMyCartsWeb_Params {
	/**(可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid?:string,

	/**（可选项）frame 的位置和大小。*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空*/ 
	fixed:boolean,

	/**(可选项) 注入到h5页面的全局window属性对象名称。**ios不支持***/ 
	jsObjectName?:string,

	/**（可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）*/ 
	url?:string,

	/**（可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode*/ 
	pageCode?:string,

}

interface alibcTrade_showShopPage_Params {
	/**店铺id，支持明文id*/ 
	shopId:string,

	/**(可选项)打开页面的方式*/ 
	openType?:string,

	/**(可选项)当打开页面的方式（openType）为native时，设置拉起手淘or天猫。*/ 
	linkKey?:string,

	/**(可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid?:string,

	/**(可选项) 购买商品支付成功后是否关闭淘宝页面。**仅Android有效***/ 
	pageClose?:boolean,

	/**（可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）*/ 
	url?:string,

	/**（可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode*/ 
	pageCode?:string,

	/**(可选项) 唤端返回的scheme，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://"。*/ 
	backScheme?:string,

}

interface alibcTrade_showShopPageWeb_Params {
	/**店铺id，支持明文id*/ 
	shopId:string,

	/**(可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid?:string,

	/**（可选项）frame 的位置和大小。*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空*/ 
	fixed:boolean,

	/**(可选项) 注入到h5页面的全局window属性对象名称。**ios不支持***/ 
	jsObjectName?:string,

	/**（可选项）使用 openUrl 方式直接打开非官方code覆盖的链接时想要打开的 url（可以打开非openByBizCode所覆盖的url）*/ 
	url?:string,

	/**（可选项）使用openByCode方式直接打开官方code覆盖的页面， 后台申请的官方页面pageCode，目前支持“detail” “cart”.后续会开放更多的pageCode*/ 
	pageCode?:string,

}

interface alibcTrade_showPageByUrl_Params {
	/**url*/ 
	url:string,

	/**(可选项)打开页面的方式*/ 
	openType?:string,

	/**(可选项)当打开页面的方式（openType）为native时，设置拉起手淘or天猫。*/ 
	linkKey?:string,

	/**(可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid?:string,

	/**(可选项) 淘宝联盟后台的APPKEY字段。**新版本SDK新增 高佣转链/跨店结算 功能所需**， 如果需要高分佣能力，务必传入adzoneId和taokeAppkey 参数 并且openType设置为'native' [功能介绍](http://baichuan.taobao.com/support/announcementDetail.htm?spm=0.0.0.0.VkfdrC&id=25274)*/ 
	taokeAppkey?:string,

	/**(可选项)淘宝联盟adzoneId*/ 
	adzoneId?:string,

	/**(可选项) 购买商品支付成功后是否关闭淘宝页面。**仅Android有效***/ 
	pageClose?:boolean,

	/**(可选项) 唤端返回的scheme，可以自己传入自定义的scheme，或者传入百川提供的默认scheme："alisdk://"。*/ 
	backScheme?:string,

}

interface alibcTrade_showPageByUrlWeb_Params {
	/**url*/ 
	url:string,

	/**(可选项) 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	pid?:string,

	/**（可选项）frame 的位置和大小。*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**是否将模块视图固定到窗口上，不跟随窗口上下滚动，可为空*/ 
	fixed:boolean,

	/**(可选项) 注入到h5页面的全局window属性对象名称。**iOS不支持***/ 
	jsObjectName?:string,

}

interface netEaseAVChatVideo {
	/** 初始化音视频引擎*/ 
	init():void

	/**
	 * `登录`
	 * ========params==========
	 *
	 * `account` :string : 账号
	 *
	 * `password` :string : 用户密码。
	 */
	login(params:netEaseAVChatVideo_login_Params, callback?: (ret:JSON) => void):void

	/** 登出*/ 
	logout(callback?: (ret:JSON) => void):void

	/**
	 * `主叫发起通话(现在只支持传入一个被叫)`
	 * ========params==========
	 *
	 * `account` :string : 账号
	 *
	 * `type` :string : 对话类型
	 */
	startCall(params:netEaseAVChatVideo_startCall_Params, callback?: (ret:JSON) => void):void

	/**
	 * `接通对话`
	 * ========params==========
	 *
	 * `chatId` :string : 对话id，从addComingCallingListener接口中获取
	 */
	accept(params:netEaseAVChatVideo_accept_Params, callback?: (ret:JSON) => void):void

	/**
	 * `挂断对话`
	 * ========params==========
	 *
	 * `chatId` :string : 对话id
	 */
	hangUp(params:netEaseAVChatVideo_hangUp_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入多人会议`
	 * ========params==========
	 *
	 * `name` :string : 会议名称
	 *
	 * `ext` :string : 用于在会议的创建和加入之间传递额外信息, 仅在创建会议时设置有效
	 *
	 * `type` :string : 对话类型
	 *
	 * `actor` :boolean : 以发言者的角色加入, 非发言者 (观众)不发送音视频数据
	 */
	joinMeeting(params:netEaseAVChatVideo_joinMeeting_Params, callback?: (ret:JSON) => void):void

	/** 离开会议*/ 
	leaveMeeting():void

	/**
	 * `改变自己在会议中的角色`
	 * ========params==========
	 *
	 * `actor` :boolean : 以发言者的角色加入, 非发言者 (观众)不发送音视频数据
	 */
	setMeetingRole(params:netEaseAVChatVideo_setMeetingRole_Params, callback?: (ret:JSON) => void):void

	/**
	 * `指定某用户设置是否对其静音`
	 * ========params==========
	 *
	 * `mute` :boolean : 是否静音, 静音后将听不到该用户的声音
	 *
	 * `uid` :string : 用户 uid
	 */
	setAudioMute(params:netEaseAVChatVideo_setAudioMute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `指定某用户设置是否接收其视频`
	 * ========params==========
	 *
	 * `mute` :boolean : 是否拒绝视频, 拒绝后将没有该用户视频数据回调
	 *
	 * `uid` :string : 用户 uid
	 */
	setVideoMute(params:netEaseAVChatVideo_setVideoMute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置禁止发送视频`
	 * ========params==========
	 *
	 * `mute` :boolean : 是否禁止发送视频
	 */
	setVideoSendMute(params:netEaseAVChatVideo_setVideoSendMute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始视频采集`
	 * ========params==========
	 *
	 * `quality` :number : 网络通话视频质量
	 *
	 * `format` :number : 视频采集格式
	 *
	 * `backCamera` :boolean : 使用后置摄像头开始视频
	 *
	 * `cameraOn` :boolean : 初始打开摄像头
	 *
	 * `orientation` :string : 视频采集方向。 该设置会改变采集到的视频画面的角度，主要用于支持互动直播时的横屏直播： 主播以各种角度手持设备直播， 并设置为该角度的 '视频采集方向'， 拉流播放器就可以以正常的角度观看直播。
	 *
	 * `rate` :string : 视频帧率
	 *
	 * `manualFocus` :boolean : 设置默认的手动对焦框
	 *
	 * `videoProcess` :boolean : 设视频前处理开关 默认是 YES 打开前处理
	 */
	startVideoCapture(params:netEaseAVChatVideo_startVideoCapture_Params, callback?: (ret:JSON) => void):void

	/** 停止视频采集*/ 
	stopVideoCapture():void

	/**
	 * `动态设置视频采集方向`
	 * ========params==========
	 *
	 * `orientation` :string : 视频采集方向。 该设置会改变采集到的视频画面的角度，主要用于支持互动直播时的横屏直播： 主播以各种角度手持设备直播， 并设置为该角度的 '视频采集方向'， 拉流播放器就可以以正常的角度观看直播。
	 */
	setVideoCaptureOrientation(params:netEaseAVChatVideo_setVideoCaptureOrientation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `动态设置摄像头关闭`
	 * ========params==========
	 *
	 * `cameraDisable` :boolean : 是否关闭
	 */
	setCameraDisable(params:netEaseAVChatVideo_setCameraDisable_Params, callback?: (ret:JSON) => void):void

	/**
	 * `动态切换前后摄像头`
	 * ========params==========
	 *
	 * `cameraType` :string : 选择的摄像头（仅ios支持，android不支持指定摄像头）
	 */
	switchCamera(params:netEaseAVChatVideo_switchCamera_Params):void

	/**
	 * `动态开关闪光灯`
	 * ========params==========
	 *
	 * `cameraFlash` :boolean : 动态开关闪光灯
	 */
	setCameraFlash(params:netEaseAVChatVideo_setCameraFlash_Params):void

	/**
	 * `动态调节摄像头焦距，对画面进行放大缩小`
	 * ========params==========
	 *
	 * `scale` :number : 放大倍数
	 */
	changeLensPosition(params:netEaseAVChatVideo_changeLensPosition_Params):void

	/** 通过以下接口来获取摄像头最大放大倍数*/ 
	getMaxZoomScale(callback?: (ret:JSON) => void):void

	/**
	 * ` 设置对焦模式`
	 * ========params==========
	 *
	 * `mode` :string : 对焦模式
	 */
	setFocusMode(params:netEaseAVChatVideo_setFocusMode_Params):void

	/** 当切换为手动对焦后，使用以下接口来传入对焦点，进行对焦*/ 
	changeNMCVideoPreViewManualFocusPoint():void

	/**
	 * `设置静音`
	 * ========params==========
	 *
	 * `mute` :boolean : 设置是否静音
	 */
	setMute(params:netEaseAVChatVideo_setMute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置扬声器`
	 * ========params==========
	 *
	 * `useSpeaker` :boolean : 设置是否开启扬声器
	 */
	setSpeaker(params:netEaseAVChatVideo_setSpeaker_Params, callback?: (ret:JSON) => void):void

	/**
	 * `切换网络通话类型`
	 * ========params==========
	 *
	 * `type` :string : 通话类型
	 */
	switchType(params:netEaseAVChatVideo_switchType_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置视频最大编码码率`
	 * ========params==========
	 *
	 * `bitrate` :number : 最大编码码率 (bps)
	 */
	setVideoMaxEncodeBitrate(params:netEaseAVChatVideo_setVideoMaxEncodeBitrate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `切换视频编码器`
	 * ========params==========
	 *
	 * `codec` :number : 视频编码器
	 */
	switchVideoEncoder(params:netEaseAVChatVideo_switchVideoEncoder_Params, callback?: (ret:JSON) => void):void

	/**
	 * `切换视频解码器`
	 * ========params==========
	 *
	 * `codec` :number : 视频编码器
	 */
	switchVideoDecoder(params:netEaseAVChatVideo_switchVideoDecoder_Params, callback?: (ret:JSON) => void):void

	/**
	 * `切换网络通话视频质量`
	 * ========params==========
	 *
	 * `quality` :number : 视频编码器
	 */
	switchVideoQuality(params:netEaseAVChatVideo_switchVideoQuality_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始录制(只有通话连接建立以后才允许开始录制)`
	 * ========params==========
	 *
	 * `filePath` :string : (可选项)录制文件路径, SDK不负责创建目录, 请确保文件路径的合法性,
	 *
	 * `videoBitrate` :string : (可选项)录制文件视频码率设置, 可以不指定, 由SDK自己选择合适的码率
	 *
	 * `userId` :string : 录制用户对象的id
	 */
	startRecording(params:netEaseAVChatVideo_startRecording_Params, callback?: (ret:JSON) => void):void

	/**
	 * ` 开始通话录音. 录制通话中所有参与者的声音, 包含混音任务播放的声音, 录制成 aac 或者 wav 文件`
	 * ========params==========
	 *
	 * `filePath` :string : (可选项)录制文件路径, 不包含文件类型后缀. 包含文件类型后缀的完整文件路径可以在开始录制以后通过currentAudioRecordingFilePath 查询(SDK不负责创建目录, 请确保文件路径的合法性, 也可以传入 nil, 由 SDK 自己选择文件路径)
	 */
	startAudioRecording(params:netEaseAVChatVideo_startAudioRecording_Params, callback?: (ret:JSON) => void):void

	/**  结束通话录音*/ 
	stopAudioRecording():void

	/**  获取当前通话录音文件路径*/ 
	currentAudioRecordingFilePath(callback?: (ret:JSON) => void):void

	/**
	 * `对视频美颜`
	 * ========params==========
	 *
	 * `type` :string : (可选项)滤镜类型
	 */
	selectBeautifyType(params:netEaseAVChatVideo_selectBeautifyType_Params):void

	/**
	 * `设置磨皮滤镜强度,支持自然 粉嫩 怀旧 黑白模式`
	 * ========params==========
	 *
	 * `value` :string : (可选项)磨皮滤镜强度
	 */
	setSmoothFilterIntensity(params:netEaseAVChatVideo_setSmoothFilterIntensity_Params):void

	/**
	 * ` 设置对比度滤镜强度,支持自然 粉嫩 怀旧 黑白模式`
	 * ========params==========
	 *
	 * `value` :string : (可选项)对比度滤镜强度
	 */
	setContrastFilterIntensity(params:netEaseAVChatVideo_setContrastFilterIntensity_Params):void

	/**
	 * `设置预览镜像`
	 * ========params==========
	 *
	 * `isMirrorOn` :boolean : (可选项)是否开启预览镜像
	 */
	setPreViewMirror(params:netEaseAVChatVideo_setPreViewMirror_Params):void

	/**
	 * `设置编码镜像`
	 * ========params==========
	 *
	 * `isMirrorOn` :boolean : (可选项) 是否开启编码镜像
	 *
	 * `isMirrorOn` :boolean : (可选项) 是否开启编码镜像
	 */
	setCodeMirror(params:netEaseAVChatVideo_setCodeMirror_Params):void

	/**
	 * `添加水印`
	 * ========params==========
	 *
	 * `imgPath` :string : (可选项) 水印图片
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 */
	addWaterMark(params:netEaseAVChatVideo_addWaterMark_Params):void

	/**
	 * `设置编码镜像`
	 * ========params==========
	 *
	 * `imgArray` :Array : (可选项) 动态图像数组
	 *
	 * `count` :number : (可选项)播放速度的快慢:count代表count帧显示同一张图
	 *
	 * `looped` :boolean : (可选项)是否循环，不循环就显示一次
	 *
	 * `location` :string : (可选项)位置
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 */
	addDynamicWaterMarks(params:netEaseAVChatVideo_addDynamicWaterMarks_Params):void

	/** 清除水印*/ 
	cleanWaterMark():void

	/**
	 * `设置编码镜像`
	 * ========params==========
	 *
	 * `isMirrorOn` :boolean : (可选项) 是否开启编码镜像
	 *
	 * `isMirrorOn` :boolean : (可选项) 是否开启编码镜像
	 */
	setCodeMirror(params:netEaseAVChatVideo_setCodeMirror_Params):void

	/**
	 * `设置引擎是否开启，（enable为true，登录后，开启通话前调用；enable为false，通话结束时调用）`
	 * ========params==========
	 *
	 * `enable` :boolean : 设置引擎是否开启
	 */
	setRtc(params:netEaseAVChatVideo_setRtc_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置本地预览窗口`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	setLocalVideoRender(params:netEaseAVChatVideo_setLocalVideoRender_Params):void

	/**
	 * `设置远程预览窗口`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	setRemoteVideoRender(params:netEaseAVChatVideo_setRemoteVideoRender_Params):void

	/**
	 * `开始本地预览`
	 * ========params==========
	 *
	 * `zFront` :boolean : （可选项）预览是否在窗口最上层
	 */
	startLocalVideoRender(params:netEaseAVChatVideo_startLocalVideoRender_Params):void

	/**
	 * `开始远程预览`
	 * ========params==========
	 *
	 * `account` :string : 远程用户id
	 *
	 * `zFront` :boolean : （可选项）预览是否在窗口最上层
	 */
	startRemoteVideoRender(params:netEaseAVChatVideo_startRemoteVideoRender_Params):void

	/** 关闭本地预览*/ 
	closeLocalVideo():void

	/** 显示本地预览*/ 
	showLocalVideo():void

	/** 隐藏本地预览*/ 
	hideLocalVideo():void

	/** 关闭远程预览*/ 
	closeRemoteVideo():void

	/** 显示远程预览*/ 
	showRemoteVideo():void

	/** 隐藏远程预览*/ 
	hideRemoteVideo():void

	/**
	 * `设置初始化参数（setRtc，启动引擎后调用）`
	 * ========params==========
	 *
	 * `autoCallProximity` :boolean : 语音通话时使用, 距离感应是否自动黑屏
	 *
	 * `defaultFrontCamera` :boolean : 默认是否使用前置摄像头
	 *
	 * `videoQuality` :number : 视频质量调整, 最高建议使用480P
	 */
	setParams(params:netEaseAVChatVideo_setParams_Params):void

	/**
	 * `设置是否开启视频（setParams之后，如果当前为视频对话进行调用，且enable为true；挂断后调用该接口，且enable为false）`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启视频
	 */
	setVideo(params:netEaseAVChatVideo_setVideo_Params):void

	/**
	 * `设置是否开启预览（setVideo之后，如果当前为视频对话进行调用，且enable为true；挂断前调用该接口，且enable为false）`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启预览
	 */
	setPreview(params:netEaseAVChatVideo_setPreview_Params):void

	/**
	 * `是否开启监听该帐号其他端回应`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	addOnlineAckListener(params:netEaseAVChatVideo_addOnlineAckListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否开启挂断监听`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	hangUpListener(params:netEaseAVChatVideo_hangUpListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否开启监听被叫方回应`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	calleeAckListener(params:netEaseAVChatVideo_calleeAckListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `音视频切换控制`
	 * ========params==========
	 *
	 * `chatId` :string : 对话id
	 *
	 * `command` :string : 命令
	 */
	sendControlCommand(params:netEaseAVChatVideo_sendControlCommand_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听通话控制通知`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onControlListener(params:netEaseAVChatVideo_onControlListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `主叫收到被叫响应通知`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onResponseListener(params:netEaseAVChatVideo_onResponseListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通话建立成功通知`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onCallEstablishedListener(params:netEaseAVChatVideo_onCallEstablishedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通话断开通知`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onCallDisconnectedListener(params:netEaseAVChatVideo_onCallDisconnectedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `当前通话网络状况通知`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onNetStatusListener(params:netEaseAVChatVideo_onNetStatusListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否开启监听被叫方回应`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	calleeAckListener(params:netEaseAVChatVideo_calleeAckListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否开启监听该帐号其他端回应`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	addOnlineAckListener(params:netEaseAVChatVideo_addOnlineAckListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `服务器录制信息监听`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	speakingUsersListener(params:netEaseAVChatVideo_speakingUsersListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `摄像头方向切换完成监听`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	cameraSwitchListener(params:netEaseAVChatVideo_cameraSwitchListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清晰度切换完成后，SDK 通过以下回调通知应用`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	qualitySwitchListener(params:netEaseAVChatVideo_qualitySwitchListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `服务器录制信息监听`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	myVolumeListener(params:netEaseAVChatVideo_myVolumeListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `本地录制成功开始监听`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	recordStartedListener(params:netEaseAVChatVideo_recordStartedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `本地录制成功结束监听`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	recordStoppedListener(params:netEaseAVChatVideo_recordStoppedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `本地录制发生了错误监听`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	recordErrorListener(params:netEaseAVChatVideo_recordErrorListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户加入会议通知`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	joinMeetingListener(params:netEaseAVChatVideo_joinMeetingListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `会议发生了错误`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	meetingErrorListener(params:netEaseAVChatVideo_meetingErrorListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户离开会议通知`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	leaveMeetingListener(params:netEaseAVChatVideo_leaveMeetingListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除点对点历史消息`
	 * ========params==========
	 *
	 * `account` :string : 用户账号
	 *
	 * `sessionType` :number : 聊天类型
	 *
	 * `deleteRoam` :boolean : (可选项)是否删除漫游消息
	 */
	clearServerHistory(params:netEaseAVChatVideo_clearServerHistory_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除好友同时删除备注信息`
	 * ========params==========
	 *
	 * `account` :string : 好友账号
	 *
	 * `deleteAlias` :boolean : （可选项）删除备注信息
	 */
	deleteFriend(params:netEaseAVChatVideo_deleteFriend_Params, callback?: (ret:JSON) => void):void

	/**
	 * `主叫发起实时会话请求`
	 * ========params==========
	 *
	 * `callees` :Array : 被叫帐号列表, 当前版本只支持一个被叫
	 */
	requestRTS(params:netEaseAVChatVideo_requestRTS_Params, callback?: (ret:JSON) => void):void

	/**
	 * `被叫响应实时会话请求`
	 * ========params==========
	 *
	 * `sessionID` :string : 实时会话ID
	 *
	 * `accept` :boolean : 是否接听
	 */
	responseRTS(params:netEaseAVChatVideo_responseRTS_Params, callback?: (ret:JSON) => void):void

	/**
	 * ` 挂断实时会话`
	 * ========params==========
	 *
	 * `sessionID` :string : 实时会话ID
	 */
	terminateRTS(params:netEaseAVChatVideo_terminateRTS_Params):void

	/**
	 * `从指定通道发送数据`
	 * ========params==========
	 *
	 * `data` :string : 需要发送的实时会话数据, 数据长度不允许超过50KB, 推荐不超过4KB; 发送数据的周期建议控制在50ms以上
	 *
	 * `sessionID` :string : 实时会话ID
	 *
	 * `userID` :string : 发送数据目标用户名, nil表示广播给所有用户
	 *
	 * `service` :string : 实时会话服务类型
	 */
	sendRTSData(params:netEaseAVChatVideo_sendRTSData_Params, callback?: (ret:JSON) => void):void

	/**
	 * ` 发送实时会话控制指令`
	 * ========params==========
	 *
	 * `controlInfo` :string : 控制信息, 自定义实现
	 *
	 * `sessionID` :string : 实时会话ID
	 */
	sendRTSControl(params:netEaseAVChatVideo_sendRTSControl_Params):void

	/**
	 * `设置当前实时会话静音模式`
	 * ========params==========
	 *
	 * `mute` :boolean : 是否开启静音
	 */
	rtsSetMute(params:netEaseAVChatVideo_rtsSetMute_Params):void

	/**
	 * `设置当前实时会话扬声器模式`
	 * ========params==========
	 *
	 * `useSpeaker` :boolean : 是否开启扬声器
	 */
	rtsSetSpeaker(params:netEaseAVChatVideo_rtsSetSpeaker_Params):void

	/** 添加实时会话委托*/ 
	addDelegate():void

	/** 移除实时会话委托*/ 
	removeDelegate():void

	/**
	 * `被叫收到实时会话请求`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onRTSRequestListener(params:netEaseAVChatVideo_onRTSRequestListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `被叫收到实时会话请求`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onRTSResponseListener(params:netEaseAVChatVideo_onRTSResponseListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `对方结束实时会话`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onRTSTerminateListener(params:netEaseAVChatVideo_onRTSTerminateListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * ` 这通呼入的实时会话请求已经被该帐号其他端处理`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onRTSResponsedByOtherListener(params:netEaseAVChatVideo_onRTSResponsedByOtherListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `实时会话状态反馈`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onRTSListener(params:netEaseAVChatVideo_onRTSListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `实时会话状态反馈`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onRTSReceiveListener(params:netEaseAVChatVideo_onRTSReceiveListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `收到实时会话控制信息`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onRTSControlListener(params:netEaseAVChatVideo_onRTSControlListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `实时会话录制信息`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onRTSRecordingInfoListener(params:netEaseAVChatVideo_onRTSRecordingInfoListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `语音网络状态`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	onRTSAudioNetStatusListener(params:netEaseAVChatVideo_onRTSAudioNetStatusListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `预订多人实时会话`
	 * ========params==========
	 *
	 * `name` :string : 实时会话名称(相同的实时会话名称, 只在会话使用完以后才可以重复使用, 开发者需要保证不会出现重复预订某会话名称而不使用的情况)
	 *
	 * `ext` :string : 扩展信息 (用于在会话的创建和加入之间传递额外信息, 仅在创建会话时设置有效)
	 */
	reserveConference(params:netEaseAVChatVideo_reserveConference_Params, callback?: (ret:JSON) => void):void

	/** 预订结果监听*/ 
	onReserveConferenceListener():void

	/**
	 * `加入多人会话`
	 * ========params==========
	 *
	 * `name` :string : 实时会话名称(相同的实时会话名称, 只在会话使用完以后才可以重复使用, 开发者需要保证不会出现重复预订某会话名称而不使用的情况)
	 *
	 * `serverRecording` :boolean : 服务器录制开关
	 */
	joinConference(params:netEaseAVChatVideo_joinConference_Params, callback?: (ret:JSON) => void):void

	/**
	 * `离开多人实时会话(当所有加入的人都离开了某会话以后，该会话对应的名称才可以被重复预订)`
	 * ========params==========
	 *
	 * `name` :string : 实时会话名称(相同的实时会话名称, 只在会话使用完以后才可以重复使用, 开发者需要保证不会出现重复预订某会话名称而不使用的情况)
	 *
	 * `serverRecording` :boolean : 服务器录制开关
	 */
	leaveConference(params:netEaseAVChatVideo_leaveConference_Params, callback?: (ret:JSON) => void):void

	/** 加入结果监听*/ 
	onJoinConferenceListener():void

	/**
	 * `发送多人会话数据`
	 * ========params==========
	 *
	 * `data` :any : 字段是需要发送的数据。数据长度不允许超过50KB，推荐不超过4KB，发送数据的周期建议控制在50ms以上
	 *
	 * `uid` :any : 字段是发送的目标，如果需要广播发送，请把该字段留空
	 */
	sendRTSDataConference(params:netEaseAVChatVideo_sendRTSDataConference_Params, callback?: (ret:JSON) => void):void

	/** 异常离开多人实时会话通知*/ 
	onLeftConferenceListener(callback?: (ret:JSON) => void):void

	/** 用户加入多人实时会话通知*/ 
	onUserJoinedListener(callback?: (ret:JSON) => void):void

	/** 用户离开多人实时会话通知*/ 
	onUserLeftListener(callback?: (ret:JSON) => void):void

	/** 用户离开多人实时会话通知*/ 
	onUserLeftListener(callback?: (ret:JSON) => void):void

	/**
	 * `拉取文档转码信息列表(在 PC 端提交文档转码任务后，该用户可以通过该接口获取自己的转码文档列表。)`
	 * ========params==========
	 *
	 * `lastDocId` :string : 最后一个文档的锚点，不包括此文档。填 nil 会从最新提交的转码文档开始往前查询
	 *
	 * `limit` :number : 是拉取文档的最大个数，每次拉取的个数不能超过 30
	 */
	fetchMyDocsInfo(params:netEaseAVChatVideo_fetchMyDocsInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询文档转码信息`
	 * ========params==========
	 *
	 * `docId` :string : 文档 id
	 */
	inquireDocInfo(params:netEaseAVChatVideo_inquireDocInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除云端的转码文档`
	 * ========params==========
	 *
	 * `docId` :string : 文档id
	 */
	deleteDoc(params:netEaseAVChatVideo_deleteDoc_Params, callback?: (ret:JSON) => void):void

}
interface netEaseAVChatVideo_login_Params {
	/**账号*/ 
	account:string,

	/**用户密码。*/ 
	password:string,

}

interface netEaseAVChatVideo_startCall_Params {
	/**账号*/ 
	account:string,

	/**对话类型*/ 
	type:string,

}

interface netEaseAVChatVideo_accept_Params {
	/**对话id，从addComingCallingListener接口中获取*/ 
	chatId:string,

}

interface netEaseAVChatVideo_hangUp_Params {
	/**对话id*/ 
	chatId:string,

}

interface netEaseAVChatVideo_joinMeeting_Params {
	/**会议名称*/ 
	name:string,

	/**用于在会议的创建和加入之间传递额外信息, 仅在创建会议时设置有效*/ 
	ext:string,

	/**对话类型*/ 
	type:string,

	/**以发言者的角色加入, 非发言者 (观众)不发送音视频数据*/ 
	actor:boolean,

}

interface netEaseAVChatVideo_setMeetingRole_Params {
	/**以发言者的角色加入, 非发言者 (观众)不发送音视频数据*/ 
	actor:boolean,

}

interface netEaseAVChatVideo_setAudioMute_Params {
	/**是否静音, 静音后将听不到该用户的声音*/ 
	mute:boolean,

	/**用户 uid*/ 
	uid:string,

}

interface netEaseAVChatVideo_setVideoMute_Params {
	/**是否拒绝视频, 拒绝后将没有该用户视频数据回调*/ 
	mute:boolean,

	/**用户 uid*/ 
	uid:string,

}

interface netEaseAVChatVideo_setVideoSendMute_Params {
	/**是否禁止发送视频*/ 
	mute:boolean,

}

interface netEaseAVChatVideo_startVideoCapture_Params {
	/**网络通话视频质量*/ 
	quality:number,

	/**视频采集格式*/ 
	format:number,

	/**使用后置摄像头开始视频*/ 
	backCamera:boolean,

	/**初始打开摄像头*/ 
	cameraOn:boolean,

	/**视频采集方向。 该设置会改变采集到的视频画面的角度，主要用于支持互动直播时的横屏直播： 主播以各种角度手持设备直播， 并设置为该角度的 '视频采集方向'， 拉流播放器就可以以正常的角度观看直播。*/ 
	orientation:string,

	/**视频帧率*/ 
	rate:string,

	/**设置默认的手动对焦框*/ 
	manualFocus:boolean,

	/**设视频前处理开关 默认是 YES 打开前处理*/ 
	videoProcess:boolean,

}

interface netEaseAVChatVideo_setVideoCaptureOrientation_Params {
	/**视频采集方向。 该设置会改变采集到的视频画面的角度，主要用于支持互动直播时的横屏直播： 主播以各种角度手持设备直播， 并设置为该角度的 '视频采集方向'， 拉流播放器就可以以正常的角度观看直播。*/ 
	orientation:string,

}

interface netEaseAVChatVideo_setCameraDisable_Params {
	/**是否关闭*/ 
	cameraDisable:boolean,

}

interface netEaseAVChatVideo_switchCamera_Params {
	/**选择的摄像头（仅ios支持，android不支持指定摄像头）*/ 
	cameraType:string,

}

interface netEaseAVChatVideo_setCameraFlash_Params {
	/**动态开关闪光灯*/ 
	cameraFlash:boolean,

}

interface netEaseAVChatVideo_changeLensPosition_Params {
	/**放大倍数*/ 
	scale:number,

}

interface netEaseAVChatVideo_setFocusMode_Params {
	/**对焦模式*/ 
	mode:string,

}

interface netEaseAVChatVideo_setMute_Params {
	/**设置是否静音*/ 
	mute:boolean,

}

interface netEaseAVChatVideo_setSpeaker_Params {
	/**设置是否开启扬声器*/ 
	useSpeaker:boolean,

}

interface netEaseAVChatVideo_switchType_Params {
	/**通话类型*/ 
	type:string,

}

interface netEaseAVChatVideo_setVideoMaxEncodeBitrate_Params {
	/**最大编码码率 (bps)*/ 
	bitrate:number,

}

interface netEaseAVChatVideo_switchVideoEncoder_Params {
	/**视频编码器*/ 
	codec:number,

}

interface netEaseAVChatVideo_switchVideoDecoder_Params {
	/**视频编码器*/ 
	codec:number,

}

interface netEaseAVChatVideo_switchVideoQuality_Params {
	/**视频编码器*/ 
	quality:number,

}

interface netEaseAVChatVideo_startRecording_Params {
	/**(可选项)录制文件路径, SDK不负责创建目录, 请确保文件路径的合法性,*/ 
	filePath?:string,

	/**(可选项)录制文件视频码率设置, 可以不指定, 由SDK自己选择合适的码率*/ 
	videoBitrate?:string,

	/**录制用户对象的id*/ 
	userId:string,

}

interface netEaseAVChatVideo_startAudioRecording_Params {
	/**(可选项)录制文件路径, 不包含文件类型后缀. 包含文件类型后缀的完整文件路径可以在开始录制以后通过currentAudioRecordingFilePath 查询(SDK不负责创建目录, 请确保文件路径的合法性, 也可以传入 nil, 由 SDK 自己选择文件路径)*/ 
	filePath?:string,

}

interface netEaseAVChatVideo_selectBeautifyType_Params {
	/**(可选项)滤镜类型*/ 
	type?:string,

}

interface netEaseAVChatVideo_setSmoothFilterIntensity_Params {
	/**(可选项)磨皮滤镜强度*/ 
	value?:string,

}

interface netEaseAVChatVideo_setContrastFilterIntensity_Params {
	/**(可选项)对比度滤镜强度*/ 
	value?:string,

}

interface netEaseAVChatVideo_setPreViewMirror_Params {
	/**(可选项)是否开启预览镜像*/ 
	isMirrorOn?:boolean,

}

interface netEaseAVChatVideo_setCodeMirror_Params {
	/**(可选项) 是否开启编码镜像*/ 
	isMirrorOn?:boolean,

	/**(可选项) 是否开启编码镜像*/ 
	isMirrorOn?:boolean,

}

interface netEaseAVChatVideo_addWaterMark_Params {
	/**(可选项) 水印图片*/ 
	imgPath?:string,

	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

}

interface netEaseAVChatVideo_addDynamicWaterMarks_Params {
	/**(可选项) 动态图像数组*/ 
	imgArray?:Array,

	/**(可选项)播放速度的快慢:count代表count帧显示同一张图*/ 
	count?:number,

	/**(可选项)是否循环，不循环就显示一次*/ 
	looped?:boolean,

	/**(可选项)位置*/ 
	location?:string,

	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

}

interface netEaseAVChatVideo_setCodeMirror_Params {
	/**(可选项) 是否开启编码镜像*/ 
	isMirrorOn?:boolean,

	/**(可选项) 是否开启编码镜像*/ 
	isMirrorOn?:boolean,

}

interface netEaseAVChatVideo_setRtc_Params {
	/**设置引擎是否开启*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_setLocalVideoRender_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface netEaseAVChatVideo_setRemoteVideoRender_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface netEaseAVChatVideo_startLocalVideoRender_Params {
	/**（可选项）预览是否在窗口最上层*/ 
	zFront?:boolean,

}

interface netEaseAVChatVideo_startRemoteVideoRender_Params {
	/**远程用户id*/ 
	account:string,

	/**（可选项）预览是否在窗口最上层*/ 
	zFront?:boolean,

}

interface netEaseAVChatVideo_setParams_Params {
	/**语音通话时使用, 距离感应是否自动黑屏*/ 
	autoCallProximity:boolean,

	/**默认是否使用前置摄像头*/ 
	defaultFrontCamera:boolean,

	/**视频质量调整, 最高建议使用480P*/ 
	videoQuality:number,

}

interface netEaseAVChatVideo_setVideo_Params {
	/**是否开启视频*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_setPreview_Params {
	/**是否开启预览*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_addOnlineAckListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_hangUpListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_calleeAckListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_sendControlCommand_Params {
	/**对话id*/ 
	chatId:string,

	/**命令*/ 
	command:string,

}

interface netEaseAVChatVideo_onControlListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_onResponseListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_onCallEstablishedListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_onCallDisconnectedListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_onNetStatusListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_calleeAckListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_addOnlineAckListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_speakingUsersListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_cameraSwitchListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_qualitySwitchListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_myVolumeListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_recordStartedListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_recordStoppedListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_recordErrorListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_joinMeetingListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_meetingErrorListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_leaveMeetingListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_clearServerHistory_Params {
	/**用户账号*/ 
	account:string,

	/**聊天类型*/ 
	sessionType:number,

	/**(可选项)是否删除漫游消息*/ 
	deleteRoam?:boolean,

}

interface netEaseAVChatVideo_deleteFriend_Params {
	/**好友账号*/ 
	account:string,

	/**（可选项）删除备注信息*/ 
	deleteAlias?:boolean,

}

interface netEaseAVChatVideo_requestRTS_Params {
	/**被叫帐号列表, 当前版本只支持一个被叫*/ 
	callees:Array,

}

interface netEaseAVChatVideo_responseRTS_Params {
	/**实时会话ID*/ 
	sessionID:string,

	/**是否接听*/ 
	accept:boolean,

}

interface netEaseAVChatVideo_terminateRTS_Params {
	/**实时会话ID*/ 
	sessionID:string,

}

interface netEaseAVChatVideo_sendRTSData_Params {
	/**需要发送的实时会话数据, 数据长度不允许超过50KB, 推荐不超过4KB; 发送数据的周期建议控制在50ms以上*/ 
	data:string,

	/**实时会话ID*/ 
	sessionID:string,

	/**发送数据目标用户名, nil表示广播给所有用户*/ 
	userID:string,

	/**实时会话服务类型*/ 
	service:string,

}

interface netEaseAVChatVideo_sendRTSControl_Params {
	/**控制信息, 自定义实现*/ 
	controlInfo:string,

	/**实时会话ID*/ 
	sessionID:string,

}

interface netEaseAVChatVideo_rtsSetMute_Params {
	/**是否开启静音*/ 
	mute:boolean,

}

interface netEaseAVChatVideo_rtsSetSpeaker_Params {
	/**是否开启扬声器*/ 
	useSpeaker:boolean,

}

interface netEaseAVChatVideo_onRTSRequestListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_onRTSResponseListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_onRTSTerminateListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_onRTSResponsedByOtherListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_onRTSListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_onRTSReceiveListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_onRTSControlListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_onRTSRecordingInfoListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_onRTSAudioNetStatusListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChatVideo_reserveConference_Params {
	/**实时会话名称(相同的实时会话名称, 只在会话使用完以后才可以重复使用, 开发者需要保证不会出现重复预订某会话名称而不使用的情况)*/ 
	name:string,

	/**扩展信息 (用于在会话的创建和加入之间传递额外信息, 仅在创建会话时设置有效)*/ 
	ext:string,

}

interface netEaseAVChatVideo_joinConference_Params {
	/**实时会话名称(相同的实时会话名称, 只在会话使用完以后才可以重复使用, 开发者需要保证不会出现重复预订某会话名称而不使用的情况)*/ 
	name:string,

	/**服务器录制开关*/ 
	serverRecording:boolean,

}

interface netEaseAVChatVideo_leaveConference_Params {
	/**实时会话名称(相同的实时会话名称, 只在会话使用完以后才可以重复使用, 开发者需要保证不会出现重复预订某会话名称而不使用的情况)*/ 
	name:string,

	/**服务器录制开关*/ 
	serverRecording:boolean,

}

interface netEaseAVChatVideo_sendRTSDataConference_Params {
	/**字段是需要发送的数据。数据长度不允许超过50KB，推荐不超过4KB，发送数据的周期建议控制在50ms以上*/ 
	data:any,

	/**字段是发送的目标，如果需要广播发送，请把该字段留空*/ 
	uid:any,

}

interface netEaseAVChatVideo_fetchMyDocsInfo_Params {
	/**最后一个文档的锚点，不包括此文档。填 nil 会从最新提交的转码文档开始往前查询*/ 
	lastDocId:string,

	/**是拉取文档的最大个数，每次拉取的个数不能超过 30*/ 
	limit:number,

}

interface netEaseAVChatVideo_inquireDocInfo_Params {
	/**文档 id*/ 
	docId:string,

}

interface netEaseAVChatVideo_deleteDoc_Params {
	/**文档id*/ 
	docId:string,

}

interface hanvonCloudOcrFormulaReader {
	/**
	 * `识别题目`
	 * ========params==========
	 *
	 * `androidkey` :string : 在汉王云官网申请的android key
	 *
	 * `picpath` :string : 题目图片的存放路径
	 */
	recognitionOcrFormula(params:hanvonCloudOcrFormulaReader_recognitionOcrFormula_Params, callback?: (ret:JSON) => void):void

}
interface hanvonCloudOcrFormulaReader_recognitionOcrFormula_Params {
	/**在汉王云官网申请的android key*/ 
	androidkey:string,

	/**题目图片的存放路径*/ 
	picpath:string,

}

interface mobUms {
	/**
	 * `初始化`
	 * ========params==========
	 *
	 * `appkey` :string : 从 mob 平台申请的 AppKey
	 *
	 * `appsecret` :string : 从 mob 平台申请的 AppSecret
	 *
	 * `platform` :Array : 各社交平台key，目前支持 微信、QQ、新浪微博、FaceBook，如果不打算支持某第三方平台可忽略数组中的一组值
	 */
	init(params:mobUms_init_Params):void

	/** 打开我的资料页面*/ 
	showProfilePage():void

	/** 打开最近登录列表页*/ 
	showRecommendationPage():void

	/**
	 * `以手机号码登录，需要先手机注册`
	 * ========params==========
	 *
	 * `country` :string : 国家代码，如：中国对应86
	 *
	 * `phone` :string : 手机号码
	 *
	 * `password` :string : 密码
	 */
	loginWithPhoneNumber(params:mobUms_loginWithPhoneNumber_Params, callback?: (ret:JSON) => void):void

	/**
	 * `以社交账号码登录，没有登录过将建立新用户`
	 * ========params==========
	 *
	 * `Social` :string : 社交平台，支持四种
	 */
	loginWithSocialAccount(params:mobUms_loginWithSocialAccount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `请求用于注册的短信验证码`
	 * ========params==========
	 *
	 * `country` :string : 国家代码，如：中国对应86
	 *
	 * `phone` :string : 手机号码
	 */
	sendVerifyCodeForRegitser(params:mobUms_sendVerifyCodeForRegitser_Params, callback?: (ret:JSON) => void):void

	/**
	 * `请求用于重置密码的短信验证码，注意不要和前面函数搞混了`
	 * ========params==========
	 *
	 * `country` :string : 国家代码，如：中国对应86
	 *
	 * `phone` :string : 手机号码
	 */
	sendVerifyCodeForResetPassword(params:mobUms_sendVerifyCodeForResetPassword_Params, callback?: (ret:JSON) => void):void

	/**
	 * `以电话号码执行注册，各字段限制请登录后在 管理控制台->UMSSDK->字段管理 中查看，如不写某个字段请忽略`
	 * ========params==========
	 *
	 * `country` :string : 国家代码，如：中国对应86
	 *
	 * `phone` :string : 手机号码
	 *
	 * `vcode` :string : 手机验证码
	 *
	 * `password` :string : 密码
	 *
	 * `nickname` :string : 昵称
	 *
	 * `avatarId` :string : 头像id，这个id是通过uploadAvatar函数返回的id
	 *
	 * `gender` :string : 性别
	 *
	 * `birthday` :string : 生日，字符串格式 "2000-01-10"
	 *
	 * `age` :number : 年龄
	 *
	 * `constellation` :string : 星座
	 *
	 * `zodiac` :string : 生肖
	 *
	 * `signature` :string : 签名
	 *
	 * `email` :string : 电子邮箱
	 *
	 * `address` :string : 地址
	 *
	 * `zipCode` :number : 邮政编码
	 *
	 * `resume` :string : 简介
	 *
	 * `customize` :JSON : 自定义字段，目前支持两种数据类型，字符串和数字，其他数据类型因SDK支持不好，就没有集成，如果想保存其他数据类型请转换成字符串或数字。注意自定义字段不能通过 getFieldUser 函数查找，如果有自定义数据查找的需求可以用默认字段替代，然后再建立一个对应的自定义字段。默认字段就是个名字并不一定只能保存相应数据，保存其他数据也是可以的，只要数据类型是匹配的就行
	 */
	registerWithPhoneNumber(params:mobUms_registerWithPhoneNumber_Params, callback?: (ret:JSON) => void):void

	/**
	 * `以电话号码执行重置密码，注意：如果用第三方平台注册，再绑定手机号，这样就不能更改手机登录的密码了`
	 * ========params==========
	 *
	 * `country` :string : 国家代码，如：中国对应86
	 *
	 * `phone` :string : 手机号码
	 *
	 * `vcode` :string : 手机验证码
	 *
	 * `password` :string : 密码
	 */
	resetPasswordWithPhoneNumber(params:mobUms_resetPasswordWithPhoneNumber_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新用户资料`
	 * ========params==========
	 *
	 * `nickname` :string : 昵称
	 *
	 * `avatarId` :string : 头像id，这个id是通过uploadAvatar函数返回的id
	 *
	 * `gender` :string : 性别
	 *
	 * `birthday` :string : 生日，字符串格式 "2000-01-10"
	 *
	 * `age` :number : 年龄
	 *
	 * `constellation` :string : 星座
	 *
	 * `zodiac` :string : 生肖
	 *
	 * `signature` :string : 签名
	 *
	 * `email` :string : 电子邮箱
	 *
	 * `address` :string : 地址
	 *
	 * `zipCode` :number : 邮政编码
	 *
	 * `resume` :string : 简介
	 *
	 * `customize` :JSON : 自定义字段，目前支持两种数据类型，字符串和数字，其他数据类型因SDK支持不好，就没有集成，如果想保存其他数据类型请转换成字符串或数字。
	 */
	updateUserInfo(params:mobUms_updateUserInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `上传头像`
	 * ========params==========
	 *
	 * `path` :string : 路径，绝对路径格式，如"fs://image/avatar.png"，好像这里不能使用widgett://协议，请各位开发者在实际中确认一下
	 */
	uploadAvatar(params:mobUms_uploadAvatar_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改密码`
	 * ========params==========
	 *
	 * `newPassword` :string : 新密码
	 *
	 * `oldPassword` :string : 旧密码
	 */
	changePassword(params:mobUms_changePassword_Params, callback?: (ret:JSON) => void):void

	/** 注销*/ 
	logout():void

	/**
	 * `将电话号码绑定为一种登录方式`
	 * ========params==========
	 *
	 * `country` :string : 国家代码，如：中国对应86
	 *
	 * `phone` :string : 手机号码
	 *
	 * `vcode` :string : 手机验证码
	 *
	 * `password` :string : 密码
	 */
	bindPhone(params:mobUms_bindPhone_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将指定社交平台绑定为一种登录方式`
	 * ========params==========
	 *
	 * `Social` :string : 社交平台，支持四种
	 */
	bindSocialAccount(params:mobUms_bindSocialAccount_Params, callback?: (ret:JSON) => void):void

	/** 获取登录用户token，同步函数*/ 
	getLoginUserToken():void

	/** 获取登录用户userId，同步函数*/ 
	getLoginUserId():void

	/** 是否已绑定手机号*/ 
	isBindPhone():void

	/** 获取当前登录用户信息*/ 
	getLoginUser():void

	/**
	 * `关注某个用户`
	 * ========params==========
	 *
	 * `id` :string : 用户id，优先使用
	 *
	 * `phone` :string : 手机号码，如果有id将忽略
	 */
	followUser(params:mobUms_followUser_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消关注`
	 * ========params==========
	 *
	 * `id` :string : 用户id，优先使用
	 *
	 * `phone` :string : 手机号码，如果有id将忽略
	 */
	stopFollow(params:mobUms_stopFollow_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除粉丝，目前SDK删不掉，所以该函数无效，写上来做保留`
	 * ========params==========
	 *
	 * `id` :string : 用户id，优先使用
	 *
	 * `phone` :string : 手机号码，如果有id将忽略
	 */
	deleteFans(params:mobUms_deleteFans_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断一个人是否我的关注`
	 * ========params==========
	 *
	 * `id` :string : 用户id，优先使用
	 *
	 * `phone` :string : 手机号码，如果有id将忽略
	 */
	isMyFollowing(params:mobUms_isMyFollowing_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断一个人是否我的粉丝`
	 * ========params==========
	 *
	 * `id` :string : 用户id，优先使用
	 *
	 * `phone` :string : 手机号码，如果有id将忽略
	 */
	isMyFans(params:mobUms_isMyFans_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通过字段值查找一个用户信息，如果用第三方平台注册，再绑定手机号，通过手机号查找是找不到的，目前SDK是这样，所以最好用手机注册，之后绑定第三方就没有此问题`
	 * ========params==========
	 *
	 * `field` :string : 等查找字段名，只支持默认字段的部分，如："头像id","性别","生日","星座","生肖"，等不支持
	 *
	 * `value` :any : 等查找字段值，等于该值
	 */
	getFieldUser(params:mobUms_getFieldUser_Params, callback?: (ret:JSON) => void):void

	/** 获取关注列表，只返回用户id数组，注意该函数可能数据量较大*/ 
	getFollowingsId():void

	/** 返回粉丝列表，只返回用户id数组，注意该函数可能数据量较大*/ 
	getFansId():void

	/**
	 * `请求获取短信验证码`
	 * ========params==========
	 *
	 * `country` :string : 国家代码，如：中国对应86
	 *
	 * `phone` :string : 手机号码
	 */
	getVerificationCode(params:mobUms_getVerificationCode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `验证短信验证码`
	 * ========params==========
	 *
	 * `country` :string : 国家代码，如：中国对应86
	 *
	 * `phone` :string : 手机号码
	 *
	 * `code` :string : 手机验证码，注意这个参数和前面验证码参数 vcode 不同
	 */
	submitVerificationCode(params:mobUms_submitVerificationCode_Params, callback?: (ret:JSON) => void):void

}
interface mobUms_init_Params {
	/**从 mob 平台申请的 AppKey*/ 
	appkey:string,

	/**从 mob 平台申请的 AppSecret*/ 
	appsecret:string,

	/**各社交平台key，目前支持 微信、QQ、新浪微博、FaceBook，如果不打算支持某第三方平台可忽略数组中的一组值*/ 
	platform:Array,

}

interface mobUms_loginWithPhoneNumber_Params {
	/**国家代码，如：中国对应86*/ 
	country:string,

	/**手机号码*/ 
	phone:string,

	/**密码*/ 
	password:string,

}

interface mobUms_loginWithSocialAccount_Params {
	/**社交平台，支持四种*/ 
	Social:string,

}

interface mobUms_sendVerifyCodeForRegitser_Params {
	/**国家代码，如：中国对应86*/ 
	country:string,

	/**手机号码*/ 
	phone:string,

}

interface mobUms_sendVerifyCodeForResetPassword_Params {
	/**国家代码，如：中国对应86*/ 
	country:string,

	/**手机号码*/ 
	phone:string,

}

interface mobUms_registerWithPhoneNumber_Params {
	/**国家代码，如：中国对应86*/ 
	country:string,

	/**手机号码*/ 
	phone:string,

	/**手机验证码*/ 
	vcode:string,

	/**密码*/ 
	password:string,

	/**昵称*/ 
	nickname:string,

	/**头像id，这个id是通过uploadAvatar函数返回的id*/ 
	avatarId:string,

	/**性别*/ 
	gender:string,

	/**生日，字符串格式 "2000-01-10"*/ 
	birthday:string,

	/**年龄*/ 
	age:number,

	/**星座*/ 
	constellation:string,

	/**生肖*/ 
	zodiac:string,

	/**签名*/ 
	signature:string,

	/**电子邮箱*/ 
	email:string,

	/**地址*/ 
	address:string,

	/**邮政编码*/ 
	zipCode:number,

	/**简介*/ 
	resume:string,

	/**自定义字段，目前支持两种数据类型，字符串和数字，其他数据类型因SDK支持不好，就没有集成，如果想保存其他数据类型请转换成字符串或数字。注意自定义字段不能通过 getFieldUser 函数查找，如果有自定义数据查找的需求可以用默认字段替代，然后再建立一个对应的自定义字段。默认字段就是个名字并不一定只能保存相应数据，保存其他数据也是可以的，只要数据类型是匹配的就行*/ 
	customize:JSON,

}

interface mobUms_resetPasswordWithPhoneNumber_Params {
	/**国家代码，如：中国对应86*/ 
	country:string,

	/**手机号码*/ 
	phone:string,

	/**手机验证码*/ 
	vcode:string,

	/**密码*/ 
	password:string,

}

interface mobUms_updateUserInfo_Params {
	/**昵称*/ 
	nickname:string,

	/**头像id，这个id是通过uploadAvatar函数返回的id*/ 
	avatarId:string,

	/**性别*/ 
	gender:string,

	/**生日，字符串格式 "2000-01-10"*/ 
	birthday:string,

	/**年龄*/ 
	age:number,

	/**星座*/ 
	constellation:string,

	/**生肖*/ 
	zodiac:string,

	/**签名*/ 
	signature:string,

	/**电子邮箱*/ 
	email:string,

	/**地址*/ 
	address:string,

	/**邮政编码*/ 
	zipCode:number,

	/**简介*/ 
	resume:string,

	/**自定义字段，目前支持两种数据类型，字符串和数字，其他数据类型因SDK支持不好，就没有集成，如果想保存其他数据类型请转换成字符串或数字。*/ 
	customize:JSON,

}

interface mobUms_uploadAvatar_Params {
	/**路径，绝对路径格式，如"fs://image/avatar.png"，好像这里不能使用widgett://协议，请各位开发者在实际中确认一下*/ 
	path:string,

}

interface mobUms_changePassword_Params {
	/**新密码*/ 
	newPassword:string,

	/**旧密码*/ 
	oldPassword:string,

}

interface mobUms_bindPhone_Params {
	/**国家代码，如：中国对应86*/ 
	country:string,

	/**手机号码*/ 
	phone:string,

	/**手机验证码*/ 
	vcode:string,

	/**密码*/ 
	password:string,

}

interface mobUms_bindSocialAccount_Params {
	/**社交平台，支持四种*/ 
	Social:string,

}

interface mobUms_followUser_Params {
	/**用户id，优先使用*/ 
	id:string,

	/**手机号码，如果有id将忽略*/ 
	phone:string,

}

interface mobUms_stopFollow_Params {
	/**用户id，优先使用*/ 
	id:string,

	/**手机号码，如果有id将忽略*/ 
	phone:string,

}

interface mobUms_deleteFans_Params {
	/**用户id，优先使用*/ 
	id:string,

	/**手机号码，如果有id将忽略*/ 
	phone:string,

}

interface mobUms_isMyFollowing_Params {
	/**用户id，优先使用*/ 
	id:string,

	/**手机号码，如果有id将忽略*/ 
	phone:string,

}

interface mobUms_isMyFans_Params {
	/**用户id，优先使用*/ 
	id:string,

	/**手机号码，如果有id将忽略*/ 
	phone:string,

}

interface mobUms_getFieldUser_Params {
	/**等查找字段名，只支持默认字段的部分，如："头像id","性别","生日","星座","生肖"，等不支持*/ 
	field:string,

	/**等查找字段值，等于该值*/ 
	value:any,

}

interface mobUms_getVerificationCode_Params {
	/**国家代码，如：中国对应86*/ 
	country:string,

	/**手机号码*/ 
	phone:string,

}

interface mobUms_submitVerificationCode_Params {
	/**国家代码，如：中国对应86*/ 
	country:string,

	/**手机号码*/ 
	phone:string,

	/**手机验证码，注意这个参数和前面验证码参数 vcode 不同*/ 
	code:string,

}

interface sqlCipher {
	/**
	 * `打开数据库，若数据库不存在则创建数据库。`
	 * ========params==========
	 *
	 * `name` :string : 数据库别名
	 *
	 * `path` :string : （可选项）数据库所在路径，不传时使用默认创建的路径。支持 fs://、widget://等协议（如fs://user.db）
	 *
	 * `passWord` :string : 数据库密码
	 */
	openDatabase(params:sqlCipher_openDatabase_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭数据库`
	 * ========params==========
	 *
	 * `name` :string : 数据库别名
	 */
	closeDatabase(params:sqlCipher_closeDatabase_Params, callback?: (ret:JSON) => void):void

	/**
	 * `执行事务操作语句`
	 * ========params==========
	 *
	 * `name` :string : 数据库别名
	 *
	 * `operation` :string : 事务操作类型，取值范围如下：
	 */
	transaction(params:sqlCipher_transaction_Params, callback?: (ret:JSON) => void):void

	/**
	 * `执行 sql`
	 * ========params==========
	 *
	 * `name` :string : 数据库别名
	 *
	 * `sql` :string : sql 语句
	 */
	executeSql(params:sqlCipher_executeSql_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询sql`
	 * ========params==========
	 *
	 * `name` :string : 数据库别名
	 *
	 * `sql` :string : sql语句
	 */
	selectSql(params:sqlCipher_selectSql_Params, callback?: (ret:JSON) => void):void

}
interface sqlCipher_openDatabase_Params {
	/**数据库别名*/ 
	name:string,

	/**（可选项）数据库所在路径，不传时使用默认创建的路径。支持 fs://、widget://等协议（如fs://user.db）*/ 
	path?:string,

	/**数据库密码*/ 
	passWord:string,

}

interface sqlCipher_closeDatabase_Params {
	/**数据库别名*/ 
	name:string,

}

interface sqlCipher_transaction_Params {
	/**数据库别名*/ 
	name:string,

	/**事务操作类型，取值范围如下：*/ 
	operation:string,

}

interface sqlCipher_executeSql_Params {
	/**数据库别名*/ 
	name:string,

	/**sql 语句*/ 
	sql:string,

}

interface sqlCipher_selectSql_Params {
	/**数据库别名*/ 
	name:string,

	/**sql语句*/ 
	sql:string,

}

interface smssdk {
}
interface rtcCore {
}
interface apsaraShortVideoBase {
	/** 打开视频录制页面*/ 
	openRecordView(callback?: (ret:JSON) => void):void

	/** 打开视频编辑页面*/ 
	openEditorView(callback?: (ret:JSON) => void):void

}
interface aliPayTrade {
	/**
	 * `支付宝授权登录，**参数及其回调详细说明参考 [App支付宝登录授权SDK调用方法](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.GRGqgT&treeId=218&articleId=105325&docType=1)**`
	 * ========params==========
	 *
	 * `appId` :string : 支付宝分配给开发者的应用ID
	 *
	 * `targetId` :string : 商户标识该次用户授权请求的ID，该值在商户端应保持唯一
	 *
	 * `partner` :string : （可选项）签约的支付宝账号对应的支付宝唯一用户号，以2088开头的16位纯数字组成，若不传则模块从 `key.xml` 文件读取该参数
	 *
	 * `rsaPriKey` :string : （可选项）商户私钥，若不传则模块从 `key.xml` 文件读取该参数
	 */
	auth(params:aliPayTrade_auth_Params, callback?: (ret:JSON) => void):void

}
interface aliPayTrade_auth_Params {
	/**支付宝分配给开发者的应用ID*/ 
	appId:string,

	/**商户标识该次用户授权请求的ID，该值在商户端应保持唯一*/ 
	targetId:string,

	/**（可选项）签约的支付宝账号对应的支付宝唯一用户号，以2088开头的16位纯数字组成，若不传则模块从 `key.xml` 文件读取该参数*/ 
	partner?:string,

	/**（可选项）商户私钥，若不传则模块从 `key.xml` 文件读取该参数*/ 
	rsaPriKey?:string,

}

interface bgnUITencentOCR {
	/**
	 * `名片OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据。
	 */
	bc(params:bgnUITencentOCR_bc_Params, callback?: (ret:JSON) => void):void

	/**
	 * `营业执照OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据。
	 */
	bizlicense(params:bgnUITencentOCR_bizlicense_Params, callback?: (ret:JSON) => void):void

	/**
	 * `银行卡OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据。
	 */
	creditcard(params:bgnUITencentOCR_creditcard_Params, callback?: (ret:JSON) => void):void

	/**
	 * `行驶证驾驶证OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据。
	 *
	 * `type` :any : （必填项）识别类型，0-行驶证识别，1-驾驶证识别。
	 */
	driverlicense(params:bgnUITencentOCR_driverlicense_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通用OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据。
	 */
	general(params:bgnUITencentOCR_general_Params, callback?: (ret:JSON) => void):void

	/**
	 * `手写体OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据。
	 */
	handwriting(params:bgnUITencentOCR_handwriting_Params, callback?: (ret:JSON) => void):void

	/**
	 * `银行卡OCR解析`
	 * ========params==========
	 *
	 * `image` :any : （必填项）身份证图片类型，0-正面，1-反面。
	 */
	idcard(params:bgnUITencentOCR_idcard_Params, callback?: (ret:JSON) => void):void

	/**
	 * `车牌OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据或者图片url地址。
	 */
	plate(params:bgnUITencentOCR_plate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开摄像头获取实时视频预览`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:bgnUITencentOCR_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始识别证照，调用该方法前需要先成功调用open方法`
	 * ========params==========
	 *
	 * `mode` :string : （必填项）要识别的证照类型，可选项目如下：
	 *
	 * `timeout` :any : （可选项）识别超时时长（单位秒）
	 *
	 * `type` :any : （可选项）当识别证照类型是身份证时（0表示正面，1表示反面）
	 */
	startScan(params:bgnUITencentOCR_startScan_Params, callback?: (ret:JSON) => void):void

	/** 关闭摄像头预览*/ 
	close():void

	/** 显示摄像头预览*/ 
	show():void

	/** 隐藏摄像头预览*/ 
	hide():void

}
interface bgnUITencentOCR_bc_Params {
	/**（必填项）base64格式图片数据。*/ 
	image:string,

}

interface bgnUITencentOCR_bizlicense_Params {
	/**（必填项）base64格式图片数据。*/ 
	image:string,

}

interface bgnUITencentOCR_creditcard_Params {
	/**（必填项）base64格式图片数据。*/ 
	image:string,

}

interface bgnUITencentOCR_driverlicense_Params {
	/**（必填项）base64格式图片数据。*/ 
	image:string,

	/**（必填项）识别类型，0-行驶证识别，1-驾驶证识别。*/ 
	type:any,

}

interface bgnUITencentOCR_general_Params {
	/**（必填项）base64格式图片数据。*/ 
	image:string,

}

interface bgnUITencentOCR_handwriting_Params {
	/**（必填项）base64格式图片数据。*/ 
	image:string,

}

interface bgnUITencentOCR_idcard_Params {
	/**（必填项）身份证图片类型，0-正面，1-反面。*/ 
	image:any,

}

interface bgnUITencentOCR_plate_Params {
	/**（必填项）base64格式图片数据或者图片url地址。*/ 
	image:string,

}

interface bgnUITencentOCR_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface bgnUITencentOCR_startScan_Params {
	/**（必填项）要识别的证照类型，可选项目如下：*/ 
	mode?:string,

	/**（可选项）识别超时时长（单位秒）*/ 
	timeout?:any,

	/**（可选项）当识别证照类型是身份证时（0表示正面，1表示反面）*/ 
	type?:any,

}

interface huanxin {
}
interface Hwork {
	/**
	 * `登录`
	 * ========params==========
	 *
	 * `userName` :string : 用户工号
	 */
	login(params:Hwork_login_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据用户名获取该人在 ihaier 中的 Token 和 userid`
	 * ========params==========
	 *
	 * `userName` :string : 用户工号
	 */
	getTokenByUserName(params:Hwork_getTokenByUserName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建聊天会话(调用该接口则直接创建群组会话，进入聊天界面，否则直接进入消息列表界面)`
	 * ========params==========
	 *
	 * `userNames` :Array : （可选项）用户工号数组
	 *
	 * `flag` :number : （可选项）标记是客户端还是员工端
	 *
	 * `share` :JSON : （可选项）分享的内容，若不传本参数表示不分享
	 */
	creatChat(params:Hwork_creatChat_Params):void

	/** 监听退出事件*/ 
	exitChatListener():void

}
interface Hwork_login_Params {
	/**用户工号*/ 
	userName:string,

}

interface Hwork_getTokenByUserName_Params {
	/**用户工号*/ 
	userName:string,

}

interface Hwork_creatChat_Params {
	/**（可选项）用户工号数组*/ 
	userNames?:Array,

	/**（可选项）标记是客户端还是员工端*/ 
	flag?:number,

	/**（可选项）分享的内容，若不传本参数表示不分享*/ 
	share?:JSON,

}

interface oneAPMUEM {
}
interface huanxunPay {
	/**
	 * `普通充值,还款充值`
	 * ========params==========
	 *
	 * `operationType` :string : 操作类型
	 *
	 * `merchantID` :string : 商户存管交易账号
	 *
	 * `depositType` :string : 充值类型(1、普通充值 2、还款充值)
	 *
	 * `sign` :string : 签名(MD5(operationType+merchantID+request+系统证书(MD5))
	 *
	 * `request` :string : 整体报文需要使用3DES加密处理
	 */
	recharge(params:huanxunPay_recharge_Params, callback?: (ret:JSON) => void):void

}
interface huanxunPay_recharge_Params {
	/**操作类型*/ 
	operationType:string,

	/**商户存管交易账号*/ 
	merchantID:string,

	/**充值类型(1、普通充值 2、还款充值)*/ 
	depositType:string,

	/**签名(MD5(operationType+merchantID+request+系统证书(MD5))*/ 
	sign:string,

	/**整体报文需要使用3DES加密处理*/ 
	request:string,

}

interface udcreditRecognizer {
	/**
	 * `简版人脸身份认证`
	 * ========params==========
	 *
	 * `authKey` :string : 签名
	 *
	 * `outOrderId` :string : 商户外部订单号
	 *
	 * `partnerOrderId` :string : 关联订单号
	 *
	 * `userId` :string : 商户中的用户唯一Id
	 *
	 * `notificationUrl` :string : 异步通知地址
	 *
	 * `orderInfo` :string : 商户认证信息
	 *
	 * `chooseImagePath` :string : 拍照对比照片，从相册中选择
	 *
	 * `noRandom` :boolean : 默认为 false（三组随机动作）如果设定为 true 只有一个眨眼动作
	 *
	 * `telephoneNumber` :string : 用户手机号
	 *
	 * `bankNumber` :string : 银行卡号
	 *
	 * `showInfo` :boolean : 是否显示身份证ocr信息,确认信息页面
	 *
	 * `closeRemindVoice` :boolean : 活体的语音提示是否关闭
	 *
	 * `takedBySelf` :boolean : OCR手动上传功能
	 *
	 * `extInfo` :string : 作为备用的业务字段（预留字段）
	 *
	 * `identityNumber` :string : 身份证号码(若不传入身份证号码，则会弹出输入框)
	 *
	 * `UserName` :string : 用户姓名，必须是中文和间隔圆点((若不传入姓名，则会弹出输入框))
	 */
	simpleFaceAuthentication(params:udcreditRecognizer_simpleFaceAuthentication_Params, callback?: (ret:JSON) => void):void

}
interface udcreditRecognizer_simpleFaceAuthentication_Params {
	/**签名*/ 
	authKey:string,

	/**商户外部订单号*/ 
	outOrderId:string,

	/**关联订单号*/ 
	partnerOrderId:string,

	/**商户中的用户唯一Id*/ 
	userId:string,

	/**异步通知地址*/ 
	notificationUrl:string,

	/**商户认证信息*/ 
	orderInfo:string,

	/**拍照对比照片，从相册中选择*/ 
	chooseImagePath:string,

	/**默认为 false（三组随机动作）如果设定为 true 只有一个眨眼动作*/ 
	noRandom:boolean,

	/**用户手机号*/ 
	telephoneNumber:string,

	/**银行卡号*/ 
	bankNumber:string,

	/**是否显示身份证ocr信息,确认信息页面*/ 
	showInfo:boolean,

	/**活体的语音提示是否关闭*/ 
	closeRemindVoice:boolean,

	/**OCR手动上传功能*/ 
	takedBySelf:boolean,

	/**作为备用的业务字段（预留字段）*/ 
	extInfo:string,

	/**身份证号码(若不传入身份证号码，则会弹出输入框)*/ 
	identityNumber:string,

	/**用户姓名，必须是中文和间隔圆点((若不传入姓名，则会弹出输入框))*/ 
	UserName:string,

}

interface faceidCard {
	/** SDK网络授权*/ 
	netAuth(callback?: (ret:JSON) => void):void

	/**
	 * `扫描身份证获取身份证照片信息`
	 * ========params==========
	 *
	 * `side` :number : 身份证正反面
	 *
	 * `imgtype` :string : 扫描身份证成功后获取照片的形式
	 */
	cardinfo(params:faceidCard_cardinfo_Params, callback?: (ret:JSON) => void):void

	/** 获取IOS测试包的Bundle Identifier*/ 
	bundleIdentifier(callback?: (ret:JSON) => void):void

}
interface faceidCard_cardinfo_Params {
	/**身份证正反面*/ 
	side:number,

	/**扫描身份证成功后获取照片的形式*/ 
	imgtype:string,

}

interface alivcLivePlayer {
	/**
	 * `初始化播放器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）预览窗口的位置及大小
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `url` :string : 播放url
	 *
	 * `url` :string : 播放url
	 *
	 * `position` :number : 播放的指定位置
	 *
	 * `rect` :JSON : （可选项）预览窗口的位置及大小
	 *
	 * `time` :number : 网络超时时间
	 *
	 * `isCirclePlay` :boolean : 是否循环播放
	 *
	 * `speed` :number : 倍速
	 *
	 * `path` :string : 截图保存路径（如果路径无效会保存失败）只支持fs://等本地路径
	 *
	 * `rotate` :number : 画面旋转角度
	 *
	 * `mode` :string : 画面镜像模式
	 *
	 * `volume` :number : 音量
	 *
	 * `isMute` :boolean : 是否静音
	 *
	 * `brightness` :number : 屏幕亮度
	 *
	 * `scalingMode` :string : 显示模式
	 */
	initPlayer(params:alivcLivePlayer_initPlayer_Params, callback?: (ret:JSON) => void):void

}
interface alivcLivePlayer_initPlayer_Params {
	/**（可选项）预览窗口的位置及大小*/ 
	rect?:JSON,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**播放url*/ 
	url:string,

	/**播放url*/ 
	url:string,

	/**播放的指定位置*/ 
	position:number,

	/**（可选项）预览窗口的位置及大小*/ 
	rect?:JSON,

	/**网络超时时间*/ 
	time:number,

	/**是否循环播放*/ 
	isCirclePlay:boolean,

	/**倍速*/ 
	speed:number,

	/**截图保存路径（如果路径无效会保存失败）只支持fs://等本地路径*/ 
	path:string,

	/**画面旋转角度*/ 
	rotate:number,

	/**画面镜像模式*/ 
	mode:string,

	/**音量*/ 
	volume:number,

	/**是否静音*/ 
	isMute:boolean,

	/**屏幕亮度*/ 
	brightness:number,

	/**显示模式*/ 
	scalingMode:string,

}

interface SPay {
	/** 判断当前设备是否安装微信客户端*/ 
	isInstalled(callback?: (ret:JSON) => void):void

	/**
	 * `配置微信支付的appid`
	 * ========params==========
	 *
	 * `appId` :string : 微信支付的appid
	 */
	config(params:SPay_config_Params):void

	/**
	 * `调起微信支付`
	 * ========params==========
	 *
	 * `amount` :number : 支付的金额精确到分，整数类型
	 *
	 * `token` :string : 支支付授权码
	 *
	 * `service` :string : 支付类型（如pay.weixin.app）
	 */
	wxPay(params:SPay_wxPay_Params, callback?: (ret:JSON) => void):void

}
interface SPay_config_Params {
	/**微信支付的appid*/ 
	appId:string,

}

interface SPay_wxPay_Params {
	/**支付的金额精确到分，整数类型*/ 
	amount:number,

	/**支支付授权码*/ 
	token:string,

	/**支付类型（如pay.weixin.app）*/ 
	service:string,

}

interface zyGoogleAd {
}
interface yWQGsonModule {
	/** 获取一个通过Gson库生成的json字符串*/ 
	getGson():string;

}
interface leCast {
	/** //模块初始化方法，必须在所有方法调用前调用*/ 
	initLeCast():void

	/** 搜索附近的接收端设备*/ 
	browse(callback?: (ret:JSON) => void):void

	/** 停止搜索附近的接收端设备*/ 
	stopBrowse():void

	/**
	 * `通过ip连接接收端设备`
	 * ========params==========
	 *
	 * `serviceInfoIp` :string : 传入ip。
	 */
	connect(params:leCast_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通过二维码连接接收端设备`
	 * ========params==========
	 *
	 * `qrCode` :string : （必填项）从二维码扫描出来的字符串，开发者可用apicloud上任意一个扫描二维码的模块扫描二维码，将扫描结果传入该字段。
	 */
	QRconnect(params:leCast_QRconnect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通过pin码连接`
	 * ========params==========
	 *
	 * `pinCode` :string : 必填项，pin码是乐播的概念，为9位字符串。
	 */
	pinConnect(params:leCast_pinConnect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `断开连接`
	 * ========params==========
	 *
	 * `serviceInfoIp` :string : 必填项，连接时用的ip。
	 */
	disConnect(params:leCast_disConnect_Params, callback?: (ret:JSON) => void):void

	/** 获取已经连接的设备*/ 
	getConnectLelinkServiceInfos(callback?: (ret:JSON) => void):void

	/** 开始镜像，该方法为耗时方法(需要一定时间才能回调)，调用该方法前必须先连接设备*/ 
	startMirror(callback?: (ret:JSON) => void):void

	/** 结束镜像*/ 
	stopMirror(callback?: (ret:JSON) => void):void

	/** 播放媒体，该方法为耗时方法(需要一定时间才能回调)*/ 
	play(callback?: (ret:JSON) => void):void

	/** 暂停播放媒体，返回值参考play方法*/ 
	pause(callback?: (ret:JSON) => void):void

	/** 停止播放媒体，返回值参考play方法*/ 
	stop():void

	/** 播放进度控制，进度，数字型，单位为秒*/ 
	seekTo():void

	/** 增加音量*/ 
	addVolume(callback?: (ret:JSON) => void):void

	/** 减少音量*/ 
	subVolume(callback?: (ret:JSON) => void):void

	/** 是否支持弹幕*/ 
	isSupportDanmuku(callback?: (ret:JSON) => void):void

	/** 设置广告监听*/ 
	setInteractiveAdListener(callback?: (ret:JSON) => void):void

	/** 广告播放上报*/ 
	onInteractiveAdShow(callback?: (ret:JSON) => void):void

	/** 广告播放完成上报*/ 
	onInteractiveAdClosed(callback?: (ret:JSON) => void):void

}
interface leCast_connect_Params {
	/**传入ip。*/ 
	serviceInfoIp:string,

}

interface leCast_QRconnect_Params {
	/**（必填项）从二维码扫描出来的字符串，开发者可用apicloud上任意一个扫描二维码的模块扫描二维码，将扫描结果传入该字段。*/ 
	qrCode:string,

}

interface leCast_pinConnect_Params {
	/**必填项，pin码是乐播的概念，为9位字符串。*/ 
	pinCode:string,

}

interface leCast_disConnect_Params {
	/**必填项，连接时用的ip。*/ 
	serviceInfoIp:string,

}

interface ijkplayer {
	/**
	 * `打开播放器界面`
	 * ========params==========
	 *
	 * `rect` :JSON : (可选项）播放器的位置及长宽
	 *
	 * `texts` :JSON : （可选项）顶部标题文字
	 *
	 * `styles` :JSON : （可选项）模块的样式设置
	 *
	 * `path` :string : 视频资源地址,支持网络和本地路径（fs://，widget://）(android不支持widget) 支持RTMP、RTSP、HTTP流媒体协议
	 *
	 * `autoPlay` :boolean : （可选项）打开时是否自动播放
	 *
	 * `isAutorotate` :boolean : （可选项）是否支持自动转屏
	 *
	 * `isShowProcessView` :boolean : （可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动 默认为false】
	 *
	 * `isShowTimeLable` :boolean : （可选项）是否显示播放时间 (显示:true ; 不显示:false)备注:直播流自动 默认为false】
	 *
	 * `isLive` :boolean : （可选项）是否直播视频源 （直播：true；点播：false）
	 *
	 * `enableFull` :boolean : （可选项）本次播放视频是否全屏播放，当为true时将直接全屏播放视频，x,y,w,h,fixedOn,fixed值不会生效。
	 *
	 * `isFullBtn` :boolean : （可选项）小窗口是否显示进入全屏按钮
	 *
	 * `isBackBtn` :boolean : （可选项）窗口播放时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false)
	 *
	 * `isOpenGesture` :boolean : （可选项）全屏时是否开启手势控制音量，亮度和进度 （开启：true；不开启 - ：false）
	 *
	 * `movieScaling` :string : （可选项）缩放模式
	 *
	 * `coverImg` :boolean : （可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（ios：只指 frame，传 window 无效）(android可以是frame或者Window，但是在全屏的时候，需要挂在Window上或者frame是全屏)
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:ijkplayer_open_Params):void

	/**
	 * `设置视频的文件路径`
	 * ========params==========
	 *
	 * `path` :string : 视频资源地址,支持网络和本地路径（fs://，widget://）(android不支持widget) 支持RTMP、RTSP、HTTP流媒体协议
	 *
	 * `coverImg` :boolean : （可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）
	 *
	 * `title` :string : （可选项）当设置 play 接口打开的视频时，本参数表示设置该视频的标题，本参数仅对 play 接口有效
	 */
	setPath(params:ijkplayer_setPath_Params):void

	/** 重新播放*/ 
	replay():void

	/** 开始播放*/ 
	play():void

	/** 暂停播放*/ 
	pause():void

	/** 关闭播放器*/ 
	close():void

	/** 显示视频播放视图*/ 
	show():void

	/** 隐藏视频播放视图*/ 
	hide():void

	/**
	 * `添加监听`
	 * ========params==========
	 *
	 * `name` :string : （可选项）所要监听的动作名称
	 */
	addEventListener(params:ijkplayer_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除动作监听`
	 * ========params==========
	 *
	 * `name` :string : （可选项）所要移除的监听的动作名称
	 */
	removeEventListener(params:ijkplayer_removeEventListener_Params):void

	/** 全屏播放（横屏模式）*/ 
	fullScreen():void

	/** 取消全屏播放*/ 
	cancelFullScreen():void

	/**
	 * `快进`
	 * ========params==========
	 *
	 * `seconds` :number : 快进的秒数
	 */
	forward(params:ijkplayer_forward_Params):void

	/**
	 * `快退`
	 * ========params==========
	 *
	 * `seconds` :number : 快退的秒数
	 */
	rewind(params:ijkplayer_rewind_Params):void

	/**
	 * `跳转`
	 * ========params==========
	 *
	 * `seconds` :number : 跳转到音视频播放的秒数
	 */
	seekTo(params:ijkplayer_seekTo_Params):void

	/**
	 * `设置屏幕亮度`
	 * ========params==========
	 *
	 * `brightness` :number : （可选项）设置的屏幕的亮度，取值范围：0-100，**在 iOS 平台上设置的是系统屏幕亮度。Android 平台上设置的本应用内的屏幕亮度**
	 */
	setBrightness(params:ijkplayer_setBrightness_Params):void

	/** 获取当前屏幕亮度值*/ 
	getBrightness():void

	/**
	 * `设置音量`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）音量大小，取值范围：0-1
	 */
	setVolume(params:ijkplayer_setVolume_Params):void

	/** 获取当前播放音量*/ 
	getVolume():void

	/** 获取视频的时长*/ 
	getDuration():void

	/** 获取已经播放的时长*/ 
	getCurrentPosition():void

	/** 获取是否全屏播放状态*/ 
	isFullScreen():void

	/**
	 * `设置播放速度`
	 * ========params==========
	 *
	 * `speed` :number : 音量大小，设置视频播放倍速 取值范围：0.5-1.9
	 */
	setSpeed(params:ijkplayer_setSpeed_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置顶部底部导航条是否隐藏`
	 * ========params==========
	 *
	 * `head` :boolean : （可选项）设置播放器顶部导航条是否隐藏
	 *
	 * `foot` :boolean : （可选项）设置播放器底部导航条是否隐藏
	 */
	setHeadFoot(params:ijkplayer_setHeadFoot_Params):void

	/** 截屏*/ 
	screenCapture():void

}
interface ijkplayer_open_Params {
	/**(可选项）播放器的位置及长宽*/ 
	rect?:JSON,

	/**（可选项）顶部标题文字*/ 
	texts?:JSON,

	/**（可选项）模块的样式设置*/ 
	styles?:JSON,

	/**视频资源地址,支持网络和本地路径（fs://，widget://）(android不支持widget) 支持RTMP、RTSP、HTTP流媒体协议*/ 
	path:string,

	/**（可选项）打开时是否自动播放*/ 
	autoPlay?:boolean,

	/**（可选项）是否支持自动转屏*/ 
	isAutorotate?:boolean,

	/**（可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动 默认为false】*/ 
	isShowProcessView?:boolean,

	/**（可选项）是否显示播放时间 (显示:true ; 不显示:false)备注:直播流自动 默认为false】*/ 
	isShowTimeLable?:boolean,

	/**（可选项）是否直播视频源 （直播：true；点播：false）*/ 
	isLive?:boolean,

	/**（可选项）本次播放视频是否全屏播放，当为true时将直接全屏播放视频，x,y,w,h,fixedOn,fixed值不会生效。*/ 
	enableFull?:boolean,

	/**（可选项）小窗口是否显示进入全屏按钮*/ 
	isFullBtn?:boolean,

	/**（可选项）窗口播放时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false)*/ 
	isBackBtn?:boolean,

	/**（可选项）全屏时是否开启手势控制音量，亮度和进度 （开启：true；不开启 - ：false）*/ 
	isOpenGesture?:boolean,

	/**（可选项）缩放模式*/ 
	movieScaling?:string,

	/**（可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）*/ 
	coverImg?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（ios：只指 frame，传 window 无效）(android可以是frame或者Window，但是在全屏的时候，需要挂在Window上或者frame是全屏)*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface ijkplayer_setPath_Params {
	/**视频资源地址,支持网络和本地路径（fs://，widget://）(android不支持widget) 支持RTMP、RTSP、HTTP流媒体协议*/ 
	path:string,

	/**（可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）*/ 
	coverImg?:boolean,

	/**（可选项）当设置 play 接口打开的视频时，本参数表示设置该视频的标题，本参数仅对 play 接口有效*/ 
	title?:string,

}

interface ijkplayer_addEventListener_Params {
	/**（可选项）所要监听的动作名称*/ 
	name?:string,

}

interface ijkplayer_removeEventListener_Params {
	/**（可选项）所要移除的监听的动作名称*/ 
	name?:string,

}

interface ijkplayer_forward_Params {
	/**快进的秒数*/ 
	seconds:number,

}

interface ijkplayer_rewind_Params {
	/**快退的秒数*/ 
	seconds:number,

}

interface ijkplayer_seekTo_Params {
	/**跳转到音视频播放的秒数*/ 
	seconds:number,

}

interface ijkplayer_setBrightness_Params {
	/**（可选项）设置的屏幕的亮度，取值范围：0-100，**在 iOS 平台上设置的是系统屏幕亮度。Android 平台上设置的本应用内的屏幕亮度***/ 
	brightness?:number,

}

interface ijkplayer_setVolume_Params {
	/**（可选项）音量大小，取值范围：0-1*/ 
	volume?:number,

}

interface ijkplayer_setSpeed_Params {
	/**音量大小，设置视频播放倍速 取值范围：0.5-1.9*/ 
	speed:number,

}

interface ijkplayer_setHeadFoot_Params {
	/**（可选项）设置播放器顶部导航条是否隐藏*/ 
	head?:boolean,

	/**（可选项）设置播放器底部导航条是否隐藏*/ 
	foot?:boolean,

}

interface kiviMakeUp {
	/**
	 * `以view的形式打开`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `ret` :JSON : null
	 */
	openView(params:kiviMakeUp_openView_Params):void

	/** 显示（注意该方法与openView对应）*/ 
	showView():void

	/** 隐藏 （注意该方法与openView对应）*/ 
	hideView():void

	/** 关闭视图*/ 
	closeView():void

	/**
	 * `切换摄像头`
	 * ========params==========
	 *
	 * `resolution` :number : （可选项）切换前后摄像头与分辨率
	 */
	switchCamera(params:kiviMakeUp_switchCamera_Params):void

	/**
	 * `重新设置视图位置大小`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 */
	setRect(params:kiviMakeUp_setRect_Params):void

	/** 加载美妆*/ 
	loadMakeUp():void

	/** 拍照*/ 
	captureScreen(callback?: (ret:JSON) => void):void

	/** 对比妆容*/ 
	comparedMakeUp():void

	/** 妆容透明度调整*/ 
	makeUpOpacity():void

	/** 粉底调整（滤镜）*/ 
	foundation():void

	/** 粉底强度调整（滤镜），仅仅调整强度，滤镜使用默认的或上一个下载加载的*/ 
	foundationOpacity():void

	/** 美颜接口（iOS掉用此接口必须先掉用switchBeautify接口打开美颜功能，否者设置不会生效）*/ 
	beautifyOpacity():void

	/** 需要在window中监听pause事件调用 不调用该接口会导致app从后台切回前台时导致UnityPlayer画面卡住（该接口仅支持android）， iOS会自动监听退到后台事件并暂停unity*/ 
	onPause():void

	/** 需要在window中监听resume事件调用 不调用该接口会导致app从后台切回前台时导致UnityPlayer画面卡住（该接口仅支持android），iOS会自动监听进入前台事件并恢复unity*/ 
	onResume():void

	/** 打开或关闭滤镜*/ 
	switchFilter():void

	/** 打开或关闭美颜*/ 
	switchBeautify():void

	/** 添加监听*/ 
	addListener():void

}
interface kiviMakeUp_openView_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**null*/ 
	ret:JSON,

}

interface kiviMakeUp_switchCamera_Params {
	/**（可选项）切换前后摄像头与分辨率*/ 
	resolution?:number,

}

interface kiviMakeUp_setRect_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

}

interface meiQia {
	/**
	 * `初始化美洽`
	 * ========params==========
	 *
	 * `appkey` :string : 注册美洽后，从美洽后台获得的 appkey
	 *
	 * `callback` :any : 初始化成功将返回顾客ID（ClientId），初始化失败将返回错误描述
	 */
	initMeiQia(params:meiQia_initMeiQia_Params):void

	/**
	 * `设置美洽聊天界面的标题栏中文字的颜色`
	 * ========params==========
	 *
	 * `color` :string : `#FFFFFF`格式的HTML颜色
	 */
	setTitleColor(params:meiQia_setTitleColor_Params):void

	/**
	 * `设置美洽聊天界面的标题栏背景颜色`
	 * ========params==========
	 *
	 * `color` :string : `#FFFFFF`格式的HTML颜色
	 */
	setTitleBarColor(params:meiQia_setTitleBarColor_Params):void

	/**
	 * `弹出美洽聊天界面`
	 * ========params==========
	 *
	 * `showAvatar` :boolean : 是否显示用户头像
	 *
	 * `showTitle` :boolean : 是否显示title
	 *
	 * `enableSendVoice` :boolean : 聊天页面是否显示发送语音按钮
	 *
	 * `enableSendImage` :boolean : 聊天页面是否显示发送图片按钮
	 *
	 * `enableSendEmoji` :boolean : 聊天页面是否显示发送表情按钮
	 *
	 * `enableCamera` :boolean : 聊天页面是否显示拍照按钮
	 *
	 * `updateClientInfo` :boolean : 是否更新用户信息，如果为true，在设置过用户信息后可以重新将setClientInfo接口设置的用户信息更新到美洽服务端
	 */
	show(params:meiQia_show_Params):void

	/**
	 * `指定分配客服与客服组`
	 * ========params==========
	 *
	 * `agentId` :string : 在美洽系统中客服对应的ID
	 *
	 * `agentGroup` :string : 在美洽系统中客服组对应的ID
	 *
	 * `scheduleRule` :string : 
	 */
	setScheduledAgentOrAgentGroup(params:meiQia_setScheduledAgentOrAgentGroup_Params):void

	/** 效果图：*/ 
	setClientInfo():void

	/**
	 * `设置美洽顾客的 id 后，该id对应的顾客将会上线。设置后可实现消息漫游。`
	 * ========params==========
	 *
	 * `id` :string : 美洽的ClientID。会在成功初始化美洽后返回
	 */
	setLoginMQClientId(params:meiQia_setLoginMQClientId_Params):void

	/**
	 * `使用该接口，可让美洽绑定开发者的用户系统和美洽的顾客系统。`
	 * ========params==========
	 *
	 * `id` :string : 开发者自定义的用户ID。尽量避免使用\、<、>、?、@等符号作为ID
	 */
	setLoginCustomizedId(params:meiQia_setLoginCustomizedId_Params):void

	/** 使用该接口，用于自定义聊天界面中右上角的按钮。*/ 
	setNavRightButton():void

	/** 使用该接口获取未读消息的数目*/ 
	getUnreadMessageCount():void

	/**
	 * `设置预发送消息，该消息将会在用户上线之后自动发送给客服，可以用于标记客户当前正在浏览的内容等客服需要了解的信息。`
	 * ========params==========
	 *
	 * `message` :string : 发送的消息内容
	 */
	setPreSendTextMessage(params:meiQia_setPreSendTextMessage_Params):void

	/** 添加消息监听*/ 
	addMessageListener():void

	/** 取消消息监听*/ 
	cancelMessageListener():void

	/** 设置顾客离线*/ 
	setClientOffline():void

	/** 获取最近一条消息，调用此接口前需要初始化*/ 
	getLastMessage():void

	/** 添加聊天页面相关监听*/ 
	addChatViewListener():void

	/**
	 * `配置会话页面的相关设置`
	 * ========params==========
	 *
	 * `backConfig` :JSON : back键的相关设置
	 */
	configChat(params:meiQia_configChat_Params):void

	/** 删除本地数据库所有聊天记录*/ 
	deleteAllMessage():void

	/** 设置上线，需要setLoginCustomizedId或setLoginMQClientId接口已设置客户端id后调用，上线成功后消息走回调。*/ 
	setClientOnline():void

}
interface meiQia_initMeiQia_Params {
	/**注册美洽后，从美洽后台获得的 appkey*/ 
	appkey:string,

	/**初始化成功将返回顾客ID（ClientId），初始化失败将返回错误描述*/ 
	callback:any,

}

interface meiQia_setTitleColor_Params {
	/**`#FFFFFF`格式的HTML颜色*/ 
	color:string,

}

interface meiQia_setTitleBarColor_Params {
	/**`#FFFFFF`格式的HTML颜色*/ 
	color:string,

}

interface meiQia_show_Params {
	/**是否显示用户头像*/ 
	showAvatar:boolean,

	/**是否显示title*/ 
	showTitle:boolean,

	/**聊天页面是否显示发送语音按钮*/ 
	enableSendVoice:boolean,

	/**聊天页面是否显示发送图片按钮*/ 
	enableSendImage:boolean,

	/**聊天页面是否显示发送表情按钮*/ 
	enableSendEmoji:boolean,

	/**聊天页面是否显示拍照按钮*/ 
	enableCamera:boolean,

	/**是否更新用户信息，如果为true，在设置过用户信息后可以重新将setClientInfo接口设置的用户信息更新到美洽服务端*/ 
	updateClientInfo:boolean,

}

interface meiQia_setScheduledAgentOrAgentGroup_Params {
	/**在美洽系统中客服对应的ID*/ 
	agentId:string,

	/**在美洽系统中客服组对应的ID*/ 
	agentGroup:string,

	/***/ 
	scheduleRule:string,

}

interface meiQia_setLoginMQClientId_Params {
	/**美洽的ClientID。会在成功初始化美洽后返回*/ 
	id:string,

}

interface meiQia_setLoginCustomizedId_Params {
	/**开发者自定义的用户ID。尽量避免使用\、<、>、?、@等符号作为ID*/ 
	id:string,

}

interface meiQia_setPreSendTextMessage_Params {
	/**发送的消息内容*/ 
	message:string,

}

interface meiQia_configChat_Params {
	/**back键的相关设置*/ 
	backConfig:JSON,

}

interface udeskPlus {
}
interface zyPangolin {
}
interface brightBeacon {
	/**
	 * `注册并验证开发者appKey，申请地址：[智石开放平台](http://open.brtbeacon.com)`
	 * ========params==========
	 *
	 * `key` :string : （可选项）从智石开放平台（http://open.brtbeacon.com）获取的 appkey，若不传则无法配置加密brightBeacon设备相关操作。
	 */
	registerAppKey(params:brightBeacon_registerAppKey_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扫描iBeacon或brightBeacon蓝牙设备`
	 * ========params==========
	 *
	 * `uuids` :Array : 注意Android使用蓝牙，IOS扫描iBeacon都需要请求蓝牙定位权限（非GPS）；另IOS在留空或不传该参数时，无法获得扫描设备的UUID参数，但能获取电量等参数，并支持连接、配置设备（由于IOS对iBeacon扫描和蓝牙扫描的严格区分导致）
	 */
	startRanging(params:brightBeacon_startRanging_Params, callback?: (ret:JSON) => void):void

	/** 停止扫描iBeacon、brightBeacon*/ 
	stopRanging():void

	/** 设备区域后台监听，如需支持后台回调检测，请在apiReady之后立即初始化callback通道，保证启动后区域回调成功，{params}可留空*/ 
	startMonitoring(callback?: (ret:JSON) => void):void

	/** 停止监听*/ 
	stopMonitoring():void

	/** 获取当前监听中的区域*/ 
	monitorRegions():void

	/** 区域是否处于监听中，identifier和uuid_major_minor组合任选传入*/ 
	isMonitorRegion():void

	/**
	 * `显示消息到通知栏`
	 * ========params==========
	 *
	 * `msg` :string : 通知栏消息内容
	 *
	 * `action` :string : 通知栏操作字段
	 *
	 * `useInfo` :string : 自定义传输参数
	 */
	sendLocalNotification(params:brightBeacon_sendLocalNotification_Params, callback?: (ret:JSON) => void):void

	/**
	 * `广播iBeacon，仅支持前台`
	 * ========params==========
	 *
	 * `uuid` :string : 广播设备uuid
	 *
	 * `major` :string : 设备主值
	 *
	 * `minor` :string : 设备次值
	 */
	startAdvertising(params:brightBeacon_startAdvertising_Params, callback?: (ret:JSON) => void):void

	/** 停止模拟设备信号*/ 
	stopAdvertising():void

	/** 断开连接设备*/ 
	disconnectBeacon():void

	/** 设备是否处于连接中*/ 
	isBeaconConnected(callback?: (ret:JSON) => void):void

	/** 连接成功后可用，写入设备广播数据、方式、配置设备发射频率、功率等*/ 
	writeBeaconValues():void

	/** 连接成功后可用，通过命令模式写入设备参数，基本参数修改效果同writeBeaconValues，并支持自定义扩展硬件的命令发送。<br/>*/ 
	sendBeaconValue(callback?: (ret:JSON) => void):void

	/** 检测设备固件版本*/ 
	checkBeaconFirmwareUpdate(callback?: (ret:JSON) => void):void

	/** 更新设备固件*/ 
	updateBeaconFirmwareWithProgress(callback?: (ret:JSON) => void):void

	/** 重置设备参数，默认值：*/ 
	resetBeacon(callback?: (ret:JSON) => void):void

}
interface brightBeacon_registerAppKey_Params {
	/**（可选项）从智石开放平台（http://open.brtbeacon.com）获取的 appkey，若不传则无法配置加密brightBeacon设备相关操作。*/ 
	key?:string,

}

interface brightBeacon_startRanging_Params {
	/**注意Android使用蓝牙，IOS扫描iBeacon都需要请求蓝牙定位权限（非GPS）；另IOS在留空或不传该参数时，无法获得扫描设备的UUID参数，但能获取电量等参数，并支持连接、配置设备（由于IOS对iBeacon扫描和蓝牙扫描的严格区分导致）*/ 
	uuids:Array,

}

interface brightBeacon_sendLocalNotification_Params {
	/**通知栏消息内容*/ 
	msg:string,

	/**通知栏操作字段*/ 
	action:string,

	/**自定义传输参数*/ 
	useInfo:string,

}

interface brightBeacon_startAdvertising_Params {
	/**广播设备uuid*/ 
	uuid:string,

	/**设备主值*/ 
	major:string,

	/**设备次值*/ 
	minor:string,

}

interface qn {
	/**
	 * `上传文件`
	 * ========params==========
	 *
	 * `file` :string : 本地文件路径  fs://
	 *
	 * `key` :string : 保存的文件名
	 *
	 * `token` :string : 从服务端获取的上传token
	 */
	start(params:qn_start_Params, callback?: (ret:JSON) => void):void

}
interface qn_start_Params {
	/**本地文件路径  fs://*/ 
	file:string,

	/**保存的文件名*/ 
	key:string,

	/**从服务端获取的上传token*/ 
	token:string,

}

interface bdObjectStorage {
	/**
	 * `新建一个Bucket。Bucket是BOS上的命名空间，相当于数据的容器，可以存储若干数据实体（Object）。在上传数据前，必须先创建一个Bucket。`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名；北京区域：http://bj.bcebos.com，广州区域
	 *
	 * `bucketName` :string : Bucket名称
	 */
	creatBucket(params:bdObjectStorage_creatBucket_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取Bucket列表。`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 */
	getBuckets(params:bdObjectStorage_getBuckets_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断Bucket是否存在`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 */
	doesBucketExist(params:bdObjectStorage_doesBucketExist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除已存在Bucket`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 */
	deleteBucket(params:bdObjectStorage_deleteBucket_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置Bucket的访问权限`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 *
	 * `permission` :string : 权限类别
	 */
	setBucketAcl(params:bdObjectStorage_setBucketAcl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置指定用户对Bucket的访问权限`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : 用户Id
	 *
	 * `permission` :string : 权限
	 */
	setUserBucketAcl(params:bdObjectStorage_setUserBucketAcl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `以文件形式上传Object`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 *
	 * `objectKey` :string : 上传的Objectkey
	 *
	 * `filePath` :string : 文件路径；支持widget、fs格式
	 *
	 * `metaData` :Array<JSON> : (可选)自定义元数据	，BOS支持用户自定义元数据来对Object进行描述
	 */
	uploadFile(params:bdObjectStorage_uploadFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `以字符串形式上传Object`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 *
	 * `objectKey` :string : 上传的Objectkey
	 *
	 * `strData` :string : 需要上传的字符串
	 *
	 * `metaData` :Array<JSON> : (可选)自定义元数据	，BOS支持用户自定义元数据来对Object进行描述
	 */
	uploadStr(params:bdObjectStorage_uploadStr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `CopyObject接口用于将一个已经存在的Object拷贝到另外一个Object，拷贝过程中会对源Object的Etag或修改状态进行判断，根据判断结果决定是否执行拷贝。`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `srcBucket` :string : 源Object 的Bucket名称
	 *
	 * `srcKey` :string : 源Object 的 Key
	 *
	 * `destBucket` :string : 新Object 的Bucket名称
	 *
	 * `destKey` :string : 新Object  Key
	 *
	 * `checkETag` :JSON : (可选)判断源Object是否有修改决定是否拷贝，与checkETag二选一
	 *
	 * `metaData` :Array<JSON> : (可选)自定义元数据	，新Object的自定义数据
	 */
	copyObject(params:bdObjectStorage_copyObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查看Bucket中Object列表。`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : 源Object 的Bucket名称
	 */
	getObjsFromBucket(params:bdObjectStorage_getObjsFromBucket_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扩展查询,通过设置参数来筛选Object`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : 源Object 的Bucket名称
	 *
	 * `MaxKeys` :number : 设定此次返回Object的最大个数，不可超过1000。（可选）
	 *
	 * `Prefix` :string : 设定objectKey的前缀，前缀是指objectKey包含并以Prefix的值作为开始。通常与Delimiter配合在查询模拟文件夹中使用。（可选）
	 *
	 * `Delimiter` :string : 是一个分隔符，用来对objectKey进行分层。通常与Prefix配合在查询模拟文件夹中使用。从Prefix开始到第一次出现Delimiter字符之间的objectKey称为：CommonPrefixes。（可选）
	 *
	 * `Marker` :string : 是一个字符串，用来设定返回结果的起始位置。设定Marker值之后，返回的Object会从Marker值之后按字母排序开始返回。（可选）
	 */
	getFiletrateObjects(params:bdObjectStorage_getFiletrateObjects_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取Object`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : 查询Object的key
	 */
	getObject(params:bdObjectStorage_getObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取Object中的一部分`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 *
	 * `objectKey` :string : 查询Object的key
	 *
	 * `startPosition` :number : 从第几个字节开始截取
	 *
	 * `endPosition` :number : 截取到第几个字节
	 */
	getObjectPart(params:bdObjectStorage_getObjectPart_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载Object到指定路径`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 *
	 * `objectKey` :string : 查询Object的key
	 *
	 * `savePath` :string : 保存地址 支持fs路径 不支持widget路径
	 */
	downloadObject(params:bdObjectStorage_downloadObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `只获取ObjectMetadata`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 *
	 * `objectKey` :string : 查询Object的key
	 */
	getObjectMetaData(params:bdObjectStorage_getObjectMetaData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取Object的URL`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 *
	 * `objectKey` :string : 查询Object的key
	 *
	 * `keepTime` :number : 指定的URL有效时长（s）如果要设置为永久不失效的时间，可以设置为 -1，不可设置为其他负数。
	 */
	getObjectUrl(params:bdObjectStorage_getObjectUrl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除Object`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 *
	 * `objectKey` :string : 查询Object的key
	 */
	deleteObject(params:bdObjectStorage_deleteObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分块上传`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 *
	 * `objectKey` :string : 上传的Objectkey
	 *
	 * `filePath` :string : 文件路径；支持widget\fs路径；
	 *
	 * `partSize` :number : 每块大小；不得小于5Mb
	 */
	multipartUpload(params:bdObjectStorage_multipartUpload_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消分块上传`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 *
	 * `objectKey` :string : 上传的Objectkey
	 *
	 * `uploadId` :string : 分块上传uploadId
	 */
	cancleMultipartUpload(params:bdObjectStorage_cancleMultipartUpload_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取未完成的分块上传`
	 * ========params==========
	 *
	 * `point` :string : Bucket所在区域域名
	 *
	 * `bucketName` :string : Bucket名称
	 */
	getUnUploadMultiparts(params:bdObjectStorage_getUnUploadMultiparts_Params, callback?: (ret:JSON) => void):void

	/** 获取所有已上传的分块信息*/ 
	getUploadMultiparts():void

}
interface bdObjectStorage_creatBucket_Params {
	/**Bucket所在区域域名；北京区域：http://bj.bcebos.com，广州区域*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

}

interface bdObjectStorage_getBuckets_Params {
	/**Bucket所在区域域名*/ 
	point:string,

}

interface bdObjectStorage_doesBucketExist_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

}

interface bdObjectStorage_deleteBucket_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

}

interface bdObjectStorage_setBucketAcl_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

	/**权限类别*/ 
	permission:string,

}

interface bdObjectStorage_setUserBucketAcl_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**用户Id*/ 
	bucketName:string,

	/**权限*/ 
	permission:string,

}

interface bdObjectStorage_uploadFile_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

	/**上传的Objectkey*/ 
	objectKey:string,

	/**文件路径；支持widget、fs格式*/ 
	filePath:string,

	/**(可选)自定义元数据	，BOS支持用户自定义元数据来对Object进行描述*/ 
	metaData?:Array<JSON>,

}

interface bdObjectStorage_uploadStr_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

	/**上传的Objectkey*/ 
	objectKey:string,

	/**需要上传的字符串*/ 
	strData:string,

	/**(可选)自定义元数据	，BOS支持用户自定义元数据来对Object进行描述*/ 
	metaData?:Array<JSON>,

}

interface bdObjectStorage_copyObject_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**源Object 的Bucket名称*/ 
	srcBucket:string,

	/**源Object 的 Key*/ 
	srcKey:string,

	/**新Object 的Bucket名称*/ 
	destBucket:string,

	/**新Object  Key*/ 
	destKey:string,

	/**(可选)判断源Object是否有修改决定是否拷贝，与checkETag二选一*/ 
	checkETag?:JSON,

	/**(可选)自定义元数据	，新Object的自定义数据*/ 
	metaData?:Array<JSON>,

}

interface bdObjectStorage_getObjsFromBucket_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**源Object 的Bucket名称*/ 
	bucketName:string,

}

interface bdObjectStorage_getFiletrateObjects_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**源Object 的Bucket名称*/ 
	bucketName:string,

	/**设定此次返回Object的最大个数，不可超过1000。（可选）*/ 
	MaxKeys?:number,

	/**设定objectKey的前缀，前缀是指objectKey包含并以Prefix的值作为开始。通常与Delimiter配合在查询模拟文件夹中使用。（可选）*/ 
	Prefix?:string,

	/**是一个分隔符，用来对objectKey进行分层。通常与Prefix配合在查询模拟文件夹中使用。从Prefix开始到第一次出现Delimiter字符之间的objectKey称为：CommonPrefixes。（可选）*/ 
	Delimiter?:string,

	/**是一个字符串，用来设定返回结果的起始位置。设定Marker值之后，返回的Object会从Marker值之后按字母排序开始返回。（可选）*/ 
	Marker?:string,

}

interface bdObjectStorage_getObject_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**查询Object的key*/ 
	bucketName:string,

}

interface bdObjectStorage_getObjectPart_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

	/**查询Object的key*/ 
	objectKey:string,

	/**从第几个字节开始截取*/ 
	startPosition:number,

	/**截取到第几个字节*/ 
	endPosition:number,

}

interface bdObjectStorage_downloadObject_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

	/**查询Object的key*/ 
	objectKey:string,

	/**保存地址 支持fs路径 不支持widget路径*/ 
	savePath:string,

}

interface bdObjectStorage_getObjectMetaData_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

	/**查询Object的key*/ 
	objectKey:string,

}

interface bdObjectStorage_getObjectUrl_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

	/**查询Object的key*/ 
	objectKey:string,

	/**指定的URL有效时长（s）如果要设置为永久不失效的时间，可以设置为 -1，不可设置为其他负数。*/ 
	keepTime:number,

}

interface bdObjectStorage_deleteObject_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

	/**查询Object的key*/ 
	objectKey:string,

}

interface bdObjectStorage_multipartUpload_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

	/**上传的Objectkey*/ 
	objectKey:string,

	/**文件路径；支持widget\fs路径；*/ 
	filePath:string,

	/**每块大小；不得小于5Mb*/ 
	partSize:number,

}

interface bdObjectStorage_cancleMultipartUpload_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

	/**上传的Objectkey*/ 
	objectKey:string,

	/**分块上传uploadId*/ 
	uploadId:string,

}

interface bdObjectStorage_getUnUploadMultiparts_Params {
	/**Bucket所在区域域名*/ 
	point:string,

	/**Bucket名称*/ 
	bucketName:string,

}

interface PLMediaStreaming {
	/** 是否初始化成功*/ 
	isInited():void

	/** 当前设备是否支持设置录音音量 **注意：该方法仅支持ios***/ 
	inputgainEnable():void

	/** 设置麦克风音量大小，取值范围：0-1 **注意：该方法仅支持ios***/ 
	setInputgain():void

	/** 获取麦克风音量大小，取值范围：0-1 **注意：该方法仅支持ios***/ 
	getInputgain():void

	/** 切换前后摄像头*/ 
	toggleCamera():void

	/** 开始推流*/ 
	startStream():void

	/** 停止推流*/ 
	stopStream():void

	/** 销毁推流，释放资源*/ 
	destroyStream():void

	/** 打开闪光灯*/ 
	turnLightOn():void

	/** 关闭闪光灯*/ 
	turnLightOff():void

	/** 初始化美颜插件*/ 
	initPlugin(callback?: (ret:JSON) => void):void

	/** 打开相机预览页面*/ 
	open(callback?: (ret:JSON) => void):void

	/** 关闭预览视图*/ 
	close():void

	/** 开始推流*/ 
	startStream():void

	/** 停止推流*/ 
	stopStream():void

	/** 设置特效组合，目前仅支持美颜、美型两种特效的任意叠加*/ 
	setComposeNodes():void

	/** 设置 composer 类型特效（美颜、美妆）是否可以与贴纸特效叠加*/ 
	setComposerMode():void

	/** 更新某个特效的强度*/ 
	updateComposeNode():void

	/** 更新某个特效的强度*/ 
	updateIntensity():void

	/** 获得已经开启的特效节点*/ 
	getComposeNodes():void

	/** 恢复特效设置*/ 
	recoverStatus():void

	/** 释放特效资源*/ 
	destroyEffectSDK():void

	/** 获取支持的滤镜列表*/ 
	getFilterList():void

	/** 获取支持的贴纸列表*/ 
	getStickerList():void

	/** 获取支持的美型列表*/ 
	getShapeList():void

	/** 获取支持的美妆类型列表*/ 
	getMakeUpList():void

	/** 获取支持的美妆效果集合*/ 
	getMakeUpOptionItems():void

	/** 获取支持的美体列表*/ 
	getBodyList():void

	/** 更新 compose 类型特效列表*/ 
	updateComposeList():void

	/** 更新滤镜列表*/ 
	updateFilterList():void

	/** 更新动态贴纸列表*/ 
	updateStickerList():void

	/** 更新全部特效列表*/ 
	updateAllList():void

	/** 判断是否正在使用特效*/ 
	isUsingEffect():void

	/** 检测 SDK 是否已经初始化完毕*/ 
	isEffectSDKInited():void

}
interface shanYan {
	/** 调起一键登录授权页面*/ 
	init():void

}
interface zhiChi {
	/** 启动智齿客服*/ 
	startZhiChi():void

}
interface OneSignal {
	/** 如果您的系统为用户分配了唯一的标识符，则可能还必须记住他们的OneSignal Player ID。 为了使事情变得容易，OneSignal现在允许您为用户设置external_user_id。 只需调用此方法，传入自定义用户ID（作为字符串），从现在开始发送推送通知时，就可以使用include_external_user_ids代替include_player_ids。*/ 
	setExternalUserId(callback?: (ret:JSON) => void):void

	/** 如果您的用户注销了您的应用程序，并且您希望将其自定义用户ID与他们的OneSignal用户ID从系统中取消关联，则需要调用此方法*/ 
	removeExternalUserId():void

	/** 查看当前设备记录中的标签*/ 
	getTags():void

	/**
	 * `将单个数据标签添加到当前设备记录`
	 * ========params==========
	 *
	 * `key` :string : key
	 *
	 * `value` :string : value
	 */
	sendTag(params:OneSignal_sendTag_Params):void

	/**
	 * `将多个数据标签添加到当前设备记录`
	 * ========params==========
	 *
	 * `jsonString` :string : 多个数据标签的json对象
	 */
	sendTags(params:OneSignal_sendTags_Params):void

	/**
	 * `从当前设备记录中删除标签`
	 * ========params==========
	 *
	 * `key` :string : key
	 */
	deleteTag(params:OneSignal_deleteTag_Params):void

	/**
	 * `从当前设备记录中删除标签`
	 * ========params==========
	 *
	 * `keys` :Array : 标签数组
	 */
	deleteTags(params:OneSignal_deleteTags_Params):void

	/**
	 * `禁用或启用SDK位置收集`
	 * ========params==========
	 *
	 * `isShared` :boolean : （可选项）是否禁用
	 */
	setLocationShared(params:OneSignal_setLocationShared_Params):void

	/**
	 * `发送或安排对OneSignal Player ID的通知`
	 * ========params==========
	 *
	 * `notification` :any : 通知内容
	 */
	postNotification(params:OneSignal_postNotification_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据一组键删除触发器列表，如果满足其触发条件，则可能显示应用内消息`
	 * ========params==========
	 *
	 * `key` :string : key
	 */
	removeTriggerForKey(params:OneSignal_removeTriggerForKey_Params):void

	/**
	 * `设置用户的电子邮件。 为电子邮件地址创建一个新的用户记录。 如果要使用emai更新推送用户记录，请使用sendTag`
	 * ========params==========
	 *
	 * `email` :string : email
	 */
	setEmail(params:OneSignal_setEmail_Params):void

	/** 注销用户以断开与设备的电子邮件关联*/ 
	logoutEmail():void

	/** 消息监听*/ 
	addMessageListener():void

	/** 邮件监听*/ 
	addEmailListener():void

}
interface OneSignal_sendTag_Params {
	/**key*/ 
	key:string,

	/**value*/ 
	value:string,

}

interface OneSignal_sendTags_Params {
	/**多个数据标签的json对象*/ 
	jsonString:string,

}

interface OneSignal_deleteTag_Params {
	/**key*/ 
	key:string,

}

interface OneSignal_deleteTags_Params {
	/**标签数组*/ 
	keys:Array,

}

interface OneSignal_setLocationShared_Params {
	/**（可选项）是否禁用*/ 
	isShared?:boolean,

}

interface OneSignal_postNotification_Params {
	/**通知内容*/ 
	notification:any,

}

interface OneSignal_removeTriggerForKey_Params {
	/**key*/ 
	key:string,

}

interface OneSignal_setEmail_Params {
	/**email*/ 
	email:string,

}

interface idCardScan {
	/** 身份证正面扫描*/ 
	front():void

	/** 身份证背面扫描*/ 
	back():void

}
interface ximalaya {
	/**
	 * `初始化模块信息，打开页面require完成就应该去执行`
	 * ========params==========
	 *
	 * `appkey` :string : 只有iOS需要传这个参数，android的是放在自定义模块里的配置文件中的，参考<a href="https://github.com/bringmehome/ximalaya" target="_blank">GitHub接入教程</a>
	 *
	 * `appsecret` :string : 喜马拉雅开发平台申请我的应用时候得到的appsecret，<a href="http://open.ximalaya.com/apps" target="_blank">喜马拉雅我的应用</a>
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	initXmly(params:ximalaya_initXmly_Params):void

	/** 获取喜马拉雅的内容分类*/ 
	getCategories():void

	/**
	 * `通过关键字搜索声音`
	 * ========params==========
	 *
	 * `keyword` :string : 搜索关键词
	 *
	 * `categoryid` :number : 分类ID，不填或者为0检索全库
	 *
	 * `page` :number : 返回第几页，必须大于等于1，不填默认为1
	 *
	 * `pagesize` :number : 返回的每页的条数
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getSearchedTracks(params:ximalaya_getSearchedTracks_Params):void

	/** 获取专辑标签或者声音标签*/ 
	getTags():void

	/**
	 * `根据分类和标签获取热门声音列表`
	 * ========params==========
	 *
	 * `categoryid` :string : 分类ID，指定分类
	 *
	 * `tagname` :string : 分类下对应声音标签，不填则为热门分类
	 *
	 * `page` :number : 返回第几页，必须大于等于1，不填默认为1
	 *
	 * `pagesize` :number : 返回的每页的条数
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getHotTracks(params:ximalaya_getHotTracks_Params):void

	/**
	 * `根据分类和标签获取某个分类某个标签下的专辑列表(最火/最新/最多播放)`
	 * ========params==========
	 *
	 * `categoryid` :number : 分类ID，指定分类，为0时表示热门分类
	 *
	 * `tagname` :string : 分类下对应声音标签，不填则为热门分类
	 *
	 * `calcdimension` :number : 计算维度，现支持最火（1），最新（2），经典或播放最多（3）
	 *
	 * `page` :number : 返回第几页，必须大于等于1，不填默认为1
	 *
	 * `pagesize` :number : 返回的每页的条数
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getAlbumlist(params:ximalaya_getAlbumlist_Params):void

	/**
	 * `专辑浏览，根据专辑ID获取专辑下的声音列表`
	 * ========params==========
	 *
	 * `albumid` :number : 专辑ID
	 *
	 * `sort` :string : asc-正序或desc-倒序，默认为asc-正序
	 *
	 * `page` :number : 返回第几页，必须大于等于1，不填默认为1
	 *
	 * `pagesize` :number : 返回的每页的条数
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getTracks(params:ximalaya_getTracks_Params):void

	/** 获取直播省市列表*/ 
	getProvinces():void

	/**
	 * `获取直播电台列表`
	 * ========params==========
	 *
	 * `radiotype` :number : 电台类型：1-国家台，2-省市台，3-网络台
	 *
	 * `provincecode` :number : 省份代码，radio_type为2时不能为空
	 *
	 * `page` :number : 返回第几页，必须大于等于1，不填默认为1
	 *
	 * `pagesize` :number : 返回的每页的条数
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getRadios(params:ximalaya_getRadios_Params):void

	/** 初始化播放器*/ 
	XmPlayerInit():void

	/**
	 * `使用播放器播放音乐电台(且只能播放电台的声音)`
	 * ========params==========
	 *
	 * `index` :number : getRadios方法会获取一个电台列表，比如上面的[getRadios](#getRadios)方法获取了两个电台(上海Love Radio、上海交通广播电台)，想播放第一个，那么index值传0， 想播放第二个index值传1
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	XmPlayerPlay(params:ximalaya_XmPlayerPlay_Params):void

	/**     暂停播放*/ 
	XmPlayerPause():void

	/** 停止播放*/ 
	XmPlayerStop():void

}
interface ximalaya_initXmly_Params {
	/**只有iOS需要传这个参数，android的是放在自定义模块里的配置文件中的，参考<a href="https://github.com/bringmehome/ximalaya" target="_blank">GitHub接入教程</a>*/ 
	appkey:string,

	/**喜马拉雅开发平台申请我的应用时候得到的appsecret，<a href="http://open.ximalaya.com/apps" target="_blank">喜马拉雅我的应用</a>*/ 
	appsecret:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalaya_getSearchedTracks_Params {
	/**搜索关键词*/ 
	keyword:string,

	/**分类ID，不填或者为0检索全库*/ 
	categoryid:number,

	/**返回第几页，必须大于等于1，不填默认为1*/ 
	page:number,

	/**返回的每页的条数*/ 
	pagesize:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalaya_getHotTracks_Params {
	/**分类ID，指定分类*/ 
	categoryid:string,

	/**分类下对应声音标签，不填则为热门分类*/ 
	tagname:string,

	/**返回第几页，必须大于等于1，不填默认为1*/ 
	page:number,

	/**返回的每页的条数*/ 
	pagesize:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalaya_getAlbumlist_Params {
	/**分类ID，指定分类，为0时表示热门分类*/ 
	categoryid:number,

	/**分类下对应声音标签，不填则为热门分类*/ 
	tagname:string,

	/**计算维度，现支持最火（1），最新（2），经典或播放最多（3）*/ 
	calcdimension:number,

	/**返回第几页，必须大于等于1，不填默认为1*/ 
	page:number,

	/**返回的每页的条数*/ 
	pagesize:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalaya_getTracks_Params {
	/**专辑ID*/ 
	albumid:number,

	/**asc-正序或desc-倒序，默认为asc-正序*/ 
	sort:string,

	/**返回第几页，必须大于等于1，不填默认为1*/ 
	page:number,

	/**返回的每页的条数*/ 
	pagesize:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalaya_getRadios_Params {
	/**电台类型：1-国家台，2-省市台，3-网络台*/ 
	radiotype:number,

	/**省份代码，radio_type为2时不能为空*/ 
	provincecode:number,

	/**返回第几页，必须大于等于1，不填默认为1*/ 
	page:number,

	/**返回的每页的条数*/ 
	pagesize:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalaya_XmPlayerPlay_Params {
	/**getRadios方法会获取一个电台列表，比如上面的[getRadios](#getRadios)方法获取了两个电台(上海Love Radio、上海交通广播电台)，想播放第一个，那么index值传0， 想播放第二个index值传1*/ 
	index:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface vk {
	/** vk初始化*/ 
	init(callback?: (ret:JSON) => void):void

	/** vk登陆*/ 
	login(callback?: (ret:JSON) => void):void

	/** vk分享*/ 
	share(callback?: (ret:JSON) => void):void

	/** 是否已登陆（*/ 
	isLoggedIn(callback?: (ret:JSON) => void):void

	/** 获取finger（仅android支持）*/ 
	getFinger(callback?: (ret:JSON) => void):void

	/** token过期监听（仅android支持）*/ 
	tokenExpiredListener(callback?: (ret:JSON) => void):void

}
interface tencentPlayer {
	/**
	 * `打开一个视频播放器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:tencentPlayer_open_Params, callback?: (ret:JSON) => void):void

	/** 开始播放*/ 
	play():void

	/** 暂停播放*/ 
	pause():void

	/** 恢复已暂停的播放*/ 
	resume():void

	/** 停止播放*/ 
	stop():void

	/** 关闭播放器*/ 
	close():void

	/** 显示视频播放视图*/ 
	show():void

	/** 隐藏视频播放视图*/ 
	hide():void

	/**
	 * `跳转到指定播放位置`
	 * ========params==========
	 *
	 * `seconds` :number : 跳转到音视频播放的秒数，取值范围：大于0，小于视频总长度
	 */
	seekTo(params:tencentPlayer_seekTo_Params):void

	/**
	 * `设置视频播放器位置、尺寸，以及是否全屏`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `animation` :boolean : （可选项）改变播放器大小时是否带动画效果
	 *
	 * `fullscreen` :boolean : （可选项）模块的位置及尺寸是否全屏（不显示状态栏）
	 */
	setRect(params:tencentPlayer_setRect_Params):void

	/** 获取当前播放时间*/ 
	getCurrent():void

	/** 获取视频总时长，单位为妙（s）*/ 
	getDuration():void

	/** 清除视频缓存，仅支持 iOS 平台（android平台无缓存）*/ 
	clearCache():void

}
interface tencentPlayer_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface tencentPlayer_seekTo_Params {
	/**跳转到音视频播放的秒数，取值范围：大于0，小于视频总长度*/ 
	seconds:number,

}

interface tencentPlayer_setRect_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）改变播放器大小时是否带动画效果*/ 
	animation?:boolean,

	/**（可选项）模块的位置及尺寸是否全屏（不显示状态栏）*/ 
	fullscreen?:boolean,

}

interface mogoAdsdomob {
}
interface haierCenter {
	/** OAuth2.0登录。*/ 
	authorization(callback?: (ret:JSON) => void):void

	/** 清除缓存的图形验证码图片。*/ 
	clearCache():void

}
interface kkPlayer {
	/**
	 * `打开 kkPlayer 模块`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `url` :string : （必选项）视频的路径，支持网络和本地（widget://、fs://）路径，支持（http，https, hls, rtmp, rtsp）等流协议
	 *
	 * `title` :string : （可选项）视频标题，用来显示在顶部栏
	 *
	 * `autoPlay` :boolean : （可选项）打开时是否自动播放
	 *
	 * `autoRotate` :boolean : （可选项）是否允许通过旋转来进行全屏切换
	 *
	 * `userControl` :boolean : （可选项）是否使用默认的控制层，如果不使用，所有手势均会失效
	 *
	 * `seekTime` :number : （可选项）视频播放开始的位置
	 *
	 * `audio` :boolean : （可选项）播放的资源是否是音频文件，若是则开始播放后不移除封面图 coverImg
	 *
	 * `coverImg` :string : （可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动），如果被其他视图遮挡，请将此值设置为true
	 */
	open(params:kkPlayer_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭播放器*/ 
	close():void

	/** 显示播放器并继续播放*/ 
	show():void

	/** 隐藏播放器并暂停播放*/ 
	hide():void

	/** 暂停播放*/ 
	pause():void

	/** 恢复播放并显示播放器，如果播放完成，则重新开始播放*/ 
	resume():void

	/**
	 * `切换新的视频文件进行播放`
	 * ========params==========
	 *
	 * `url` :string : （必选项）视频的路径，支持网络和本地（widget://、fs://）路径，网络视频支持（http，https, hls, rtmp, rtsp）等协议
	 *
	 * `title` :string : （可选项）视频标题，用来显示在顶部栏
	 *
	 * `seekTime` :number : （可选项）视频播放开始的位置
	 *
	 * `audio` :boolean : （可选项）播放的资源是否是音频文件，若是则开始播放后不移除封面图 coverImg
	 */
	replay(params:kkPlayer_replay_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取视频文件的总时长`
	 * ========params==========
	 *
	 * `url` :string : （可选项）视频的路径，支持网络和本地（widget://、fs://）路径，如果url不传，则获取的是当前播放的视频的总时长
	 */
	getDuration(params:kkPlayer_getDuration_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置静音模式`
	 * ========params==========
	 *
	 * `state` :boolean : （可选项）true为静音，false为取消静音
	 */
	mute(params:kkPlayer_mute_Params):void

	/**
	 * `设置循环播放模式`
	 * ========params==========
	 *
	 * `state` :boolean : （可选项）true为循环播放，false为取消循环播放
	 */
	loop(params:kkPlayer_loop_Params):void

	/**
	 * `默认控件上面的按钮设置，仅在open参数中userControl设置为true时候有效`
	 * ========params==========
	 *
	 * `showBack` :boolean : （可选项）是否显示返回按钮
	 *
	 * `showDownload` :boolean : （可选项）是否显示下载按钮
	 *
	 * `showFullScreen` :boolean : （可选项）是否显示全屏按钮
	 *
	 * `allowPanVolume` :boolean : （可选项）是否允许手势滑动调节视频音量
	 */
	configControl(params:kkPlayer_configControl_Params):void

	/** 判断当前是否为全屏模式*/ 
	isFullScreen():void

	/**
	 * `设置全屏播放模式`
	 * ========params==========
	 *
	 * `state` :boolean : （可选项）true为全屏播放，false为取消全屏播放
	 */
	fullScreen(params:kkPlayer_fullScreen_Params):void

	/** 判断是否正在播放*/ 
	isPlaying():void

	/**
	 * `快进`
	 * ========params==========
	 *
	 * `seconds` :number : （可选项）快进的时长，单位：秒
	 */
	fastForward(params:kkPlayer_fastForward_Params):void

	/**
	 * `快退`
	 * ========params==========
	 *
	 * `seconds` :number : （可选项）快退的时长，单位：秒
	 */
	fastBackward(params:kkPlayer_fastBackward_Params):void

	/**
	 * `跳到指定的时间进行播放`
	 * ========params==========
	 *
	 * `seconds` :number : （可选项）从该指定的时间开始播放，单位：秒
	 */
	seekTo(params:kkPlayer_seekTo_Params):void

	/** 添加监听播放器中各种事件*/ 
	addEventListener():void

	/** 移除事件监听*/ 
	removeEventListener():void

	/**
	 * `设置播放速度`
	 * ========params==========
	 *
	 * `speed` :number : （可选项）播放的速度，取值范围(0.5~2.0)
	 */
	playSpeed(params:kkPlayer_playSpeed_Params):void

	/**
	 * `旋转视频`
	 * ========params==========
	 *
	 * `degress` :number : （可选项）逆时针旋转角度，取值为（0，90，180，270）, 其他数值不进行旋转
	 */
	rotate(params:kkPlayer_rotate_Params):void

	/**
	 * `画面填充模式`
	 * ========params==========
	 *
	 * `mode` :string : （可选项）填充模式
	 */
	contentMode(params:kkPlayer_contentMode_Params):void

	/** 截屏并保存到相册，编译时请开启 <font color='red'>**读取照片**</font> 权限，否则会导致闪退*/ 
	shotScreen():void

}
interface kkPlayer_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（必选项）视频的路径，支持网络和本地（widget://、fs://）路径，支持（http，https, hls, rtmp, rtsp）等流协议*/ 
	url:string,

	/**（可选项）视频标题，用来显示在顶部栏*/ 
	title?:string,

	/**（可选项）打开时是否自动播放*/ 
	autoPlay?:boolean,

	/**（可选项）是否允许通过旋转来进行全屏切换*/ 
	autoRotate?:boolean,

	/**（可选项）是否使用默认的控制层，如果不使用，所有手势均会失效*/ 
	userControl?:boolean,

	/**（可选项）视频播放开始的位置*/ 
	seekTime?:number,

	/**（可选项）播放的资源是否是音频文件，若是则开始播放后不移除封面图 coverImg*/ 
	audio?:boolean,

	/**（可选项）封面图路径，播放器打开尚未播放时的封面图，要求本地路径（widget://、fs://）*/ 
	coverImg?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动），如果被其他视图遮挡，请将此值设置为true*/ 
	fixed?:boolean,

}

interface kkPlayer_replay_Params {
	/**（必选项）视频的路径，支持网络和本地（widget://、fs://）路径，网络视频支持（http，https, hls, rtmp, rtsp）等协议*/ 
	url:string,

	/**（可选项）视频标题，用来显示在顶部栏*/ 
	title?:string,

	/**（可选项）视频播放开始的位置*/ 
	seekTime?:number,

	/**（可选项）播放的资源是否是音频文件，若是则开始播放后不移除封面图 coverImg*/ 
	audio?:boolean,

}

interface kkPlayer_getDuration_Params {
	/**（可选项）视频的路径，支持网络和本地（widget://、fs://）路径，如果url不传，则获取的是当前播放的视频的总时长*/ 
	url?:string,

}

interface kkPlayer_mute_Params {
	/**（可选项）true为静音，false为取消静音*/ 
	state?:boolean,

}

interface kkPlayer_loop_Params {
	/**（可选项）true为循环播放，false为取消循环播放*/ 
	state?:boolean,

}

interface kkPlayer_configControl_Params {
	/**（可选项）是否显示返回按钮*/ 
	showBack?:boolean,

	/**（可选项）是否显示下载按钮*/ 
	showDownload?:boolean,

	/**（可选项）是否显示全屏按钮*/ 
	showFullScreen?:boolean,

	/**（可选项）是否允许手势滑动调节视频音量*/ 
	allowPanVolume?:boolean,

}

interface kkPlayer_fullScreen_Params {
	/**（可选项）true为全屏播放，false为取消全屏播放*/ 
	state?:boolean,

}

interface kkPlayer_fastForward_Params {
	/**（可选项）快进的时长，单位：秒*/ 
	seconds?:number,

}

interface kkPlayer_fastBackward_Params {
	/**（可选项）快退的时长，单位：秒*/ 
	seconds?:number,

}

interface kkPlayer_seekTo_Params {
	/**（可选项）从该指定的时间开始播放，单位：秒*/ 
	seconds?:number,

}

interface kkPlayer_playSpeed_Params {
	/**（可选项）播放的速度，取值范围(0.5~2.0)*/ 
	speed?:number,

}

interface kkPlayer_rotate_Params {
	/**（可选项）逆时针旋转角度，取值为（0，90，180，270）, 其他数值不进行旋转*/ 
	degress?:number,

}

interface kkPlayer_contentMode_Params {
	/**（可选项）填充模式*/ 
	mode?:string,

}

interface baiduAd {
	/**
	 * `显示横幅广告`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `adId` :string : 广告代码位id
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	showAd(params:baiduAd_showAd_Params, callback?: (ret:JSON) => void):void

	/** 关闭横幅广告*/ 
	closeAd():void

	/**
	 * `显示视频贴片广告（仅iOS支持）`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `adId` :string : 广告代码位id
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	showPrerollAd(params:baiduAd_showPrerollAd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示开屏广告`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `adId` :string : 广告代码位id
	 *
	 * `canClick` :boolean : 是否允许点击，默认true
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	showSplashAd(params:baiduAd_showSplashAd_Params, callback?: (ret:JSON) => void):void

	/** 关闭开屏广告*/ 
	removeSplashAd():void

	/**
	 * `显示插屏广告`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸（仅iOS支持）
	 *
	 * `adId` :string : 广告代码位id
	 *
	 * `type` :string : 广告类型，默认pauseVideo
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）（仅iOS支持）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动（仅iOS支持）
	 */
	showInterstitialAd(params:baiduAd_showInterstitialAd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示信息流广告`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `adId` :string : 广告代码位id
	 *
	 * `type` :string : 类型
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	showNativeAd(params:baiduAd_showNativeAd_Params, callback?: (ret:JSON) => void):void

	/** 关闭信息流广告*/ 
	closeNativeAd():void

	/**
	 * `显示内容联盟广告`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `appId` :string : 应用id
	 *
	 * `adId` :string : 广告代码位id
	 *
	 * `channelId` :string : 频道id
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	showCpuInfoAd(params:baiduAd_showCpuInfoAd_Params, callback?: (ret:JSON) => void):void

	/** 关闭内容联盟广告*/ 
	closeCpuInfoAd():void

	/**
	 * `显示激励视频广告`
	 * ========params==========
	 *
	 * `adId` :string : 广告代码位id
	 */
	showRewardVideo(params:baiduAd_showRewardVideo_Params, callback?: (ret:JSON) => void):void

}
interface baiduAd_showAd_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**广告代码位id*/ 
	adId:string,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface baiduAd_showPrerollAd_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**广告代码位id*/ 
	adId:string,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface baiduAd_showSplashAd_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**广告代码位id*/ 
	adId:string,

	/**是否允许点击，默认true*/ 
	canClick:boolean,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface baiduAd_showInterstitialAd_Params {
	/**（可选项）模块的位置及尺寸（仅iOS支持）*/ 
	rect?:JSON,

	/**广告代码位id*/ 
	adId:string,

	/**广告类型，默认pauseVideo*/ 
	type:string,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）（仅iOS支持）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动（仅iOS支持）*/ 
	fixed?:boolean,

}

interface baiduAd_showNativeAd_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**广告代码位id*/ 
	adId:string,

	/**类型*/ 
	type:string,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface baiduAd_showCpuInfoAd_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**应用id*/ 
	appId:string,

	/**广告代码位id*/ 
	adId:string,

	/**频道id*/ 
	channelId:string,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface baiduAd_showRewardVideo_Params {
	/**广告代码位id*/ 
	adId:string,

}

interface qCloudVODPlayer {
	/**
	 * `打开新窗口全屏播放视频`
	 * ========params==========
	 *
	 * `videoUrl` :string : 视频链接。必传。视频链接可通过腾讯云后台查看，查看腾讯云视频链接步骤【视频管理-点击某个视频-视频发布-显示源地址】。或者可调用腾讯云相关API查询。由于腾讯云只支持转码为MP4与HLS格式，此处调用请尽量使用这两种格式。
	 */
	playInNewWin(params:qCloudVODPlayer_playInNewWin_Params):void

	/**
	 * `指定播放器的位置和大小，播放视频`
	 * ========params==========
	 *
	 * `x` :number : 播放器在x轴上的放置位置，从屏幕左上角为计为0开始
	 *
	 * `y` :number : 播放器在y轴上的放置位置，从屏幕左上角为计为0开始
	 *
	 * `w` :number : 播放器宽度
	 *
	 * `h` :number : 播放器高度
	 *
	 * `videoUrl` :string : 视频链接。必传。视频链接可通过腾讯云后台查看，查看腾讯云视频链接步骤【视频管理-点击某个视频-视频发布-显示源地址】。或者可调用腾讯云相关API查询。由于腾讯云只支持转码为MP4与HLS格式，此处调用请尽量使用这两种格式。
	 */
	playInCurWin(params:qCloudVODPlayer_playInCurWin_Params):void

}
interface qCloudVODPlayer_playInNewWin_Params {
	/**视频链接。必传。视频链接可通过腾讯云后台查看，查看腾讯云视频链接步骤【视频管理-点击某个视频-视频发布-显示源地址】。或者可调用腾讯云相关API查询。由于腾讯云只支持转码为MP4与HLS格式，此处调用请尽量使用这两种格式。*/ 
	videoUrl:string,

}

interface qCloudVODPlayer_playInCurWin_Params {
	/**播放器在x轴上的放置位置，从屏幕左上角为计为0开始*/ 
	x:number,

	/**播放器在y轴上的放置位置，从屏幕左上角为计为0开始*/ 
	y:number,

	/**播放器宽度*/ 
	w:number,

	/**播放器高度*/ 
	h:number,

	/**视频链接。必传。视频链接可通过腾讯云后台查看，查看腾讯云视频链接步骤【视频管理-点击某个视频-视频发布-显示源地址】。或者可调用腾讯云相关API查询。由于腾讯云只支持转码为MP4与HLS格式，此处调用请尽量使用这两种格式。*/ 
	videoUrl:string,

}

interface bankCardScan {
	/** 身份证正面扫描*/ 
	scan():void

}
interface UIEasemob {
	/**
	 * `注册接口`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `password` :string : 密码
	 */
	easeRegister(params:UIEasemob_easeRegister_Params, callback?: (ret:JSON) => void):void

	/**
	 * `登录接口`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `password` :string : 密码
	 *
	 * `autoLogin` :boolean : 是否开启自动登录（仅支持ios）
	 */
	login(params:UIEasemob_login_Params, callback?: (ret:JSON) => void):void

	/** 连接服务器的状态变化事件的监听*/ 
	addConnectionListener():void

	/** 账号异常事件的监听*/ 
	addAccountListener():void

	/** 设置单聊音视频通话状态的监听*/ 
	addCallStateListener():void

	/** 添加单聊语音和视频通话结束监听*/ 
	addCallEndListener():void

	/**
	 * `创建群聊并打开群聊界面，同时添加邀请群聊成员（仅android支持）`
	 * ========params==========
	 *
	 * `type` :string : （可选项）群聊类型
	 *
	 * `userList` :Array : 群聊成员username组成的数组，如：['huanxinUser2','huanxinUser3']
	 *
	 * `bg` :string : （可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）
	 *
	 * `avatar` :JSON : 头像信息，以username为key，头像图片地址（要求本地路径：widget://、fs://）为value的JSON对象
	 *
	 * `createrNickname` :string : （可选项）群聊创建者昵称，若不传或传空则显示creater（用户id）
	 */
	groupChat(params:UIEasemob_groupChat_Params):void

	/**
	 * `发起音视频群聊（仅iOS支持）`
	 * ========params==========
	 *
	 * `groupId` :string : 群组的ID
	 *
	 * `type` :number : （可选项）群聊类型
	 *
	 * `inviteType` :number : （可选项）邀请类型
	 *
	 * `chatType` :number : （可选项）聊天类型
	 */
	makeGroupCall(params:UIEasemob_makeGroupCall_Params):void

	/**
	 * `当收到群聊音视频通话邀请的时候，调用本接口唤起音视频聊天页面（仅iOS支持，android自动弹出）`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话 id
	 *
	 * `chatType` :string : （可选项）会话类型
	 *
	 * `messageId` :string : 消息 id
	 */
	joinGroupCall(params:UIEasemob_joinGroupCall_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发起音视频单聊`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话对方的用户id
	 *
	 * `type` :string : （可选项）群聊类型
	 *
	 * `recordOnServer` :boolean : （可选项）是否在服务器端录制该通话
	 *
	 * `mergeStream` :boolean : （可选项）服务器端录制时是否合并流
	 */
	makeCall(params:UIEasemob_makeCall_Params):void

	/** 暂停音视频单聊*/ 
	pauseCall():void

	/** 恢复音视频单聊*/ 
	resumeCall():void

	/** 挂断音视频单聊*/ 
	closeCall():void

	/**
	 * `根据会话 ID 和类型创建并打开聊天页面`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话对方的用户名. 如果是群聊, 则是群组的id
	 *
	 * `chatType` :string : （可选项）发送回执消息的会话类型
	 */
	chat(params:UIEasemob_chat_Params):void

	/** 关闭会话页面*/ 
	closeConversation():void

	/** 聊天页面内头像点击事件监听*/ 
	addAvatarListener():void

	/**
	 * `打开聊天列表页面`
	 * ========params==========
	 *
	 * `navigationTitle` :JSON : 导航条样式配置
	 */
	chatList(params:UIEasemob_chatList_Params):void

	/** 刷新聊天列表*/ 
	refreshChatList():void

	/**
	 * `打开联系人列表页面`
	 * ========params==========
	 *
	 * `navigationTitle` :JSON : 导航条样式配置
	 */
	contactsList(params:UIEasemob_contactsList_Params):void

	/** 刷新联系人列表*/ 
	refreshContactsList():void

	/**
	 * `环信相关配置`
	 * ========params==========
	 *
	 * `navigationStyle` :JSON : 导航条样式配置
	 *
	 * `navigationTitle` :JSON : 导航条样式配置
	 *
	 * `avatar` :JSON : （可选项）头像信息，以username为key，头像图片地址（支持：widget://、fs://、网络路径）为value的JSON对象
	 *
	 * `nickname` :JSON : （可选项）各联系人昵称信息，以username为key，昵称为value的JSON对象
	 *
	 * `msgNotify` :boolean : app处于后台时，有新消息时是否在通知栏提醒(注:此参数不影响第三方的其他推送)(仅在android端有效)
	 *
	 * `msgVoice` :boolean : (可选项) 有新消息后，是否有声音提醒(仅在android端有效)
	 *
	 * `msgVibrate` :boolean : (可选项) 有新消息后，是否有震动提醒(仅在android端有效)
	 *
	 * `hideLocation` :boolean : （可选项）是否隐藏聊天页面面板上位置发送按钮
	 */
	configureChat(params:UIEasemob_configureChat_Params):void

	/**
	 * `设置语音/视频通话界面免提按钮是否可用`
	 * ========params==========
	 *
	 * `enable` :boolean : (可选项)免提按钮是否可用
	 */
	setHandsFreeEnable(params:UIEasemob_setHandsFreeEnable_Params):void

	/**
	 * `创建群组`
	 * ========params==========
	 *
	 * `name` :string : 群组名
	 *
	 * `description` :string : 群组描述
	 *
	 * `message` :string : 邀请消息
	 *
	 * `userCount` :number : （可选项）群组容纳的人数，群组的最大成员数(3 - 2000)
	 *
	 * `invitees` :Array : 群组成员（不包括创建者自己）
	 *
	 * `style` :string : 群组类型
	 *
	 * `IsInviteNeedConfirm` :boolean : （可选项）邀请群成员时，是否需要发送邀请通知.若false，被邀请的人自动加入群组
	 */
	createGroup(params:UIEasemob_createGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解散群组 ，需要owner/admin权限`
	 * ========params==========
	 *
	 * `id` :string : 群组 id
	 */
	destroyGroup(params:UIEasemob_destroyGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取制定 id 的群组信息 ，需要owner/admin权限`
	 * ========params==========
	 *
	 * `id` :string : 群组 id
	 */
	getGroupInfo(params:UIEasemob_getGroupInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加好友`
	 * ========params==========
	 *
	 * `name` :string : 要添加的用户
	 *
	 * `message` :string : 邀请消息
	 */
	addContact(params:UIEasemob_addContact_Params, callback?: (ret:JSON) => void):void

	/** 添加好友状态监听*/ 
	addContactListener():void

	/**
	 * `设置是否自动同意好友申请`
	 * ========params==========
	 *
	 * `isAutoAcceptFriendInvitation` :boolean : 是否自动同意好友申请
	 */
	setAutoAcceptFriendInvitation(params:UIEasemob_setAutoAcceptFriendInvitation_Params):void

	/**
	 * `同意加好友的申请`
	 * ========params==========
	 *
	 * `name` :string : 申请者
	 */
	approveFriendRequest(params:UIEasemob_approveFriendRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝加好友的申请`
	 * ========params==========
	 *
	 * `name` :string : 申请者
	 */
	declineFriendRequest(params:UIEasemob_declineFriendRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除好友`
	 * ========params==========
	 *
	 * `name` :string : 要删除的好友
	 *
	 * `isDeleteConversation` :boolean : （可选项）是否删除会话
	 */
	deleteContact(params:UIEasemob_deleteContact_Params, callback?: (ret:JSON) => void):void

	/**
	 * `邀请单人或多人进入群组, (注：android如果是群主加人可以调用此接口)`
	 * ========params==========
	 *
	 * `names` :Array : 要邀请的用户名列表
	 *
	 * `groupId` :string : 群组id
	 *
	 * `message` :string : （可选项）欢迎信息（仅支持ios）
	 */
	addMembersToGroup(params:UIEasemob_addMembersToGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `私有群里，如果开放了群成员邀请，群成员邀请调用该接口邀请成员`
	 * ========params==========
	 *
	 * `names` :Array : 要邀请的用户名列表
	 *
	 * `groupId` :string : 群组id
	 *
	 * `message` :string : （可选项）欢迎信息
	 */
	inviteUser(params:UIEasemob_inviteUser_Params, callback?: (ret:JSON) => void):void

	/**
	 * `把单人或多人移出群组`
	 * ========params==========
	 *
	 * `names` :Array : 要移除的用户名列表(注：android不支持一次删除多个人，即如果数组的长度大于1，只会删除第一个)
	 *
	 * `groupId` :string : 群组id
	 */
	removeMembersFromGroup(params:UIEasemob_removeMembersFromGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群组群名称`
	 * ========params==========
	 *
	 * `groupName` :string : 要修改的名称
	 *
	 * `groupId` :string : 群组id
	 */
	changeGroupSubject(params:UIEasemob_changeGroupSubject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户主动退出群组`
	 * ========params==========
	 *
	 * `groupId` :string : 群组id
	 */
	leaveGroup(params:UIEasemob_leaveGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入一个公开群组`
	 * ========params==========
	 *
	 * `groupId` :string : 群组id
	 */
	joinPublicGroup(params:UIEasemob_joinPublicGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `申请加入一个需批准的公开群组`
	 * ========params==========
	 *
	 * `groupId` :string : 群组id
	 *
	 * `aMessage` :string : (可选项)请求加入的信息
	 */
	requestToJoinPublicGroup(params:UIEasemob_requestToJoinPublicGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `批准入群申请`
	 * ========params==========
	 *
	 * `groupId` :string : 所申请的群组ID
	 *
	 * `username` :string : 申请人
	 */
	approveJoinGroupRequest(params:UIEasemob_approveJoinGroupRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝入群申请`
	 * ========params==========
	 *
	 * `groupId` :string : 被拒绝的群组ID
	 *
	 * `username` :string : 申请人
	 *
	 * `reason` :string : 拒绝理由
	 */
	declineJoinGroupRequest(params:UIEasemob_declineJoinGroupRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `接受入群邀请`
	 * ========params==========
	 *
	 * `groupId` :string : 接受的群组ID
	 *
	 * `username` :string : 邀请者
	 */
	acceptInvitationFromGroup(params:UIEasemob_acceptInvitationFromGroup_Params, callback?: (ret:JSON) => void):void

	/** 群组状态监听*/ 
	addGroupListener():void

	/**
	 * `将一组成员禁言，需要Owner / Admin权限`
	 * ========params==========
	 *
	 * `muteMembers` :Array : 要禁言的成员列表
	 *
	 * `muteMilliseconds` :number : 禁言时长，单位秒(android注意：目前muteMilliseconds参数不起作用，暂时只支持永久禁言和解除禁言两种操作, muteMilliseconds建议输入12*30*24*60*60)
	 *
	 * `groupId` :any : 群组ID
	 */
	muteMembers(params:UIEasemob_muteMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将一组成员解除禁言，需要Owner / Admin权限`
	 * ========params==========
	 *
	 * `muteMembers` :Array : 要解除禁言的成员列表
	 *
	 * `groupId` :any : 群组ID
	 */
	unmuteMembers(params:UIEasemob_unmuteMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `新建/获取一个会话`
	 * ========params==========
	 *
	 * `conversationId` :string : （可选项）会话的id，若创建时可不传此参数
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `ifCreate` :boolean : （可选项） 如果会话不存在是否创建会话
	 */
	getConversation(params:UIEasemob_getConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除会话`
	 * ========params==========
	 *
	 * `conversationId` :string : 要删除的会话的id
	 *
	 * `isDeleteMessages` :boolean : （可选项） 是否删除会话中的消息
	 */
	deleteConversation(params:UIEasemob_deleteConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除一组会话`
	 * ========params==========
	 *
	 * `conversationIds` :Array : 要删除的会话的id 组成的数组
	 *
	 * `isDeleteMessages` :boolean : （可选项） 是否删除会话中的消息
	 */
	deleteConversations(params:UIEasemob_deleteConversations_Params, callback?: (ret:JSON) => void):void

	/** 获取所有会话，如果内存中不存在会从DB中加载*/ 
	getAllConversations(callback?: (ret:JSON) => void):void

	/**
	 * `根据会话id 及其类型，获取指定消息 ID 的消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要获取信息的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `messageId` :string : 指定的消息的 ID
	 */
	loadMessageWithId(params:UIEasemob_loadMessageWithId_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文本消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `text` :string : 发送的消息
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}
	 */
	sendText(params:UIEasemob_sendText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的图片的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 *
	 * `displayName` :string : 附件显示名（不包含路径）（仅支持ios）
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendImage(params:UIEasemob_sendImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `address` :string : 要发送的地址
	 *
	 * `latitude` :number : 纬度
	 *
	 * `longitude` :number : 经度
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendLocation(params:UIEasemob_sendLocation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送声音消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的音频的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 *
	 * `displayName` :string : 附件显示名（不包含路径）（仅iOS支持）
	 *
	 * `length` :number : 录音时间(秒)
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendVoice(params:UIEasemob_sendVoice_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送视频消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的视频的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 *
	 * `displayName` :string : 附件显示名（不包含路径）（仅iOS支持）
	 *
	 * `length` :number : 视频时间长度(秒)
	 *
	 * `thumbPath` :string : 视频预览图路径，要求本地路径（fs://、widget://）(android只支持fs)
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendVideo(params:UIEasemob_sendVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文件消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的文件的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 *
	 * `displayName` :string : 附件显示名（不包含路径）（仅iOS支持）
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendFile(params:UIEasemob_sendFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送命令消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `action` :string : 要发送的命令
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendCmd(params:UIEasemob_sendCmd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载缩略图（图片消息的缩略图或视频消息的第一帧图片），`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id（仅iOS支持）
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型（仅iOS支持）
	 *
	 * `messageId` :string : 要下载的信息的 id
	 */
	downloadMessageThumbnail(params:UIEasemob_downloadMessageThumbnail_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载消息附件（语音，视频，图片原图，文件），`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id（仅iOS支持）
	 *
	 * `chatType` :string : （可选项）发送消息的会话类型（仅iOS支持）
	 *
	 * `messageId` :string : 要下载的信息的 id
	 */
	downloadMessageAttachments(params:UIEasemob_downloadMessageAttachments_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送消息已读回执`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送回执消息的会话的 id
	 *
	 * `chatType` :string : （可选项）发送回执消息的会话类型
	 *
	 * `messageId` :string : 要发送回执的信息的 id
	 */
	sendMessageReadAck(params:UIEasemob_sendMessageReadAck_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加消息相关事件监听`
	 * ========params==========
	 *
	 * `name` :string : 要监听的消息相关事件名称
	 */
	addMessageListener(params:UIEasemob_addMessageListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除消息相关事件监听`
	 * ========params==========
	 *
	 * `name` :string : 要移除的消息相关事件名称
	 */
	removeMessageListener(params:UIEasemob_removeMessageListener_Params):void

	/**
	 * `从数据库中获取消息，获取到的消息是startMsgId之前的pagesize条消息；`
	 * ========params==========
	 *
	 * `conversationId` :string : （必选项）会话的id，若创建时可不传此参数
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `startMsgId` :string : (可选项）消息id，如果不写此项，从数据库中读取最新的记录
	 *
	 * `pagesize` :number : (可选项) 获取startMsgId之前的消息数
	 */
	loadMessageFromDB(params:UIEasemob_loadMessageFromDB_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将会话指定消息置为已读`
	 * ========params==========
	 *
	 * `conversationId` :string : 要设置的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `messageId` :string : 要设置为已读的信息的 id
	 */
	markMessageAsRead(params:UIEasemob_markMessageAsRead_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将会话所有消息置为已读`
	 * ========params==========
	 *
	 * `conversationId` :string : 要设置的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 */
	markAllMessagesAsRead(params:UIEasemob_markAllMessagesAsRead_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从服务器获取指定会话的历史消息；此接口需要开通环信增值服务，未开通不会返回数据`
	 * ========params==========
	 *
	 * `conversationId` :string : （必选项）会话的id，若创建时可不传此参数
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `startMsgId` :string : 参考起始消息的ID
	 *
	 * `pagesize` :number : (可选项) 获取startMsgId之前的消息数
	 */
	fetchHistoryMessagesFromServer(params:UIEasemob_fetchHistoryMessagesFromServer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开启关闭本地通知`
	 * ========params==========
	 *
	 * `enable` :string : （可选项）是否开启本地通知
	 *
	 * `title` :string : （可选项）本地推送提示语
	 */
	setLocalNotification(params:UIEasemob_setLocalNotification_Params):void

	/**
	 * `设置推送全局属性`
	 * ========params==========
	 *
	 * `displayName` :string : （可选项）推送消息显示的昵称，不传则不设置
	 *
	 * `displayStyle` :string : （可选项）推送消息显示的类型
	 *
	 * `noDisturbStatus` :string : （可选项）消息推送的免打扰设置
	 *
	 * `noDisturbingStartH` :number : （可选项）消息推送免打扰开始时间，小时，暂时只支持整点（小时），不传则不设置
	 *
	 * `noDisturbingEndH` :number : （可选项）消息推送免打扰结束时间，小时，暂时只支持整点（小时），不传则不设置
	 */
	setPushOption(params:UIEasemob_setPushOption_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置推送昵称`
	 * ========params==========
	 *
	 * `nickname` :string : 推送消息显示的昵称
	 */
	setApnsNickname(params:UIEasemob_setApnsNickname_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置群组忽略推送`
	 * ========params==========
	 *
	 * `groupId` :string : 群组id
	 */
	ignoreGroupPush(params:UIEasemob_ignoreGroupPush_Params, callback?: (ret:JSON) => void):void

	/**
	 * `批量设置忽略推送的群组`
	 * ========params==========
	 *
	 * `groupIds` :Array : 群组id组成的数组
	 */
	ignoreGroupsPush(params:UIEasemob_ignoreGroupsPush_Params, callback?: (ret:JSON) => void):void

	/** 获取忽略推送消息的群组id*/ 
	getAllIgnoredGroupIds():void

}
interface UIEasemob_easeRegister_Params {
	/**用户名*/ 
	username:string,

	/**密码*/ 
	password:string,

}

interface UIEasemob_login_Params {
	/**用户名*/ 
	username:string,

	/**密码*/ 
	password:string,

	/**是否开启自动登录（仅支持ios）*/ 
	autoLogin:boolean,

}

interface UIEasemob_groupChat_Params {
	/**（可选项）群聊类型*/ 
	type?:string,

	/**群聊成员username组成的数组，如：['huanxinUser2','huanxinUser3']*/ 
	userList:Array,

	/**（可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）*/ 
	bg?:string,

	/**头像信息，以username为key，头像图片地址（要求本地路径：widget://、fs://）为value的JSON对象*/ 
	avatar:JSON,

	/**（可选项）群聊创建者昵称，若不传或传空则显示creater（用户id）*/ 
	createrNickname?:string,

}

interface UIEasemob_makeGroupCall_Params {
	/**群组的ID*/ 
	groupId:string,

	/**（可选项）群聊类型*/ 
	type?:number,

	/**（可选项）邀请类型*/ 
	inviteType?:number,

	/**（可选项）聊天类型*/ 
	chatType?:number,

}

interface UIEasemob_joinGroupCall_Params {
	/**会话 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	chatType?:string,

	/**消息 id*/ 
	messageId:string,

}

interface UIEasemob_makeCall_Params {
	/**会话对方的用户id*/ 
	conversationId:string,

	/**（可选项）群聊类型*/ 
	type?:string,

	/**（可选项）是否在服务器端录制该通话*/ 
	recordOnServer?:boolean,

	/**（可选项）服务器端录制时是否合并流*/ 
	mergeStream?:boolean,

}

interface UIEasemob_chat_Params {
	/**会话对方的用户名. 如果是群聊, 则是群组的id*/ 
	conversationId:string,

	/**（可选项）发送回执消息的会话类型*/ 
	chatType?:string,

}

interface UIEasemob_chatList_Params {
	/**导航条样式配置*/ 
	navigationTitle:JSON,

}

interface UIEasemob_contactsList_Params {
	/**导航条样式配置*/ 
	navigationTitle:JSON,

}

interface UIEasemob_configureChat_Params {
	/**导航条样式配置*/ 
	navigationStyle:JSON,

	/**导航条样式配置*/ 
	navigationTitle:JSON,

	/**（可选项）头像信息，以username为key，头像图片地址（支持：widget://、fs://、网络路径）为value的JSON对象*/ 
	avatar?:JSON,

	/**（可选项）各联系人昵称信息，以username为key，昵称为value的JSON对象*/ 
	nickname?:JSON,

	/**app处于后台时，有新消息时是否在通知栏提醒(注:此参数不影响第三方的其他推送)(仅在android端有效)*/ 
	msgNotify:boolean,

	/**(可选项) 有新消息后，是否有声音提醒(仅在android端有效)*/ 
	msgVoice?:boolean,

	/**(可选项) 有新消息后，是否有震动提醒(仅在android端有效)*/ 
	msgVibrate?:boolean,

	/**（可选项）是否隐藏聊天页面面板上位置发送按钮*/ 
	hideLocation?:boolean,

}

interface UIEasemob_setHandsFreeEnable_Params {
	/**(可选项)免提按钮是否可用*/ 
	enable?:boolean,

}

interface UIEasemob_createGroup_Params {
	/**群组名*/ 
	name:string,

	/**群组描述*/ 
	description:string,

	/**邀请消息*/ 
	message:string,

	/**（可选项）群组容纳的人数，群组的最大成员数(3 - 2000)*/ 
	userCount?:number,

	/**群组成员（不包括创建者自己）*/ 
	invitees:Array,

	/**群组类型*/ 
	style:string,

	/**（可选项）邀请群成员时，是否需要发送邀请通知.若false，被邀请的人自动加入群组*/ 
	IsInviteNeedConfirm?:boolean,

}

interface UIEasemob_destroyGroup_Params {
	/**群组 id*/ 
	id:string,

}

interface UIEasemob_getGroupInfo_Params {
	/**群组 id*/ 
	id:string,

}

interface UIEasemob_addContact_Params {
	/**要添加的用户*/ 
	name:string,

	/**邀请消息*/ 
	message:string,

}

interface UIEasemob_setAutoAcceptFriendInvitation_Params {
	/**是否自动同意好友申请*/ 
	isAutoAcceptFriendInvitation:boolean,

}

interface UIEasemob_approveFriendRequest_Params {
	/**申请者*/ 
	name:string,

}

interface UIEasemob_declineFriendRequest_Params {
	/**申请者*/ 
	name:string,

}

interface UIEasemob_deleteContact_Params {
	/**要删除的好友*/ 
	name:string,

	/**（可选项）是否删除会话*/ 
	isDeleteConversation?:boolean,

}

interface UIEasemob_addMembersToGroup_Params {
	/**要邀请的用户名列表*/ 
	names:Array,

	/**群组id*/ 
	groupId:string,

	/**（可选项）欢迎信息（仅支持ios）*/ 
	message?:string,

}

interface UIEasemob_inviteUser_Params {
	/**要邀请的用户名列表*/ 
	names:Array,

	/**群组id*/ 
	groupId:string,

	/**（可选项）欢迎信息*/ 
	message?:string,

}

interface UIEasemob_removeMembersFromGroup_Params {
	/**要移除的用户名列表(注：android不支持一次删除多个人，即如果数组的长度大于1，只会删除第一个)*/ 
	names:Array,

	/**群组id*/ 
	groupId:string,

}

interface UIEasemob_changeGroupSubject_Params {
	/**要修改的名称*/ 
	groupName:string,

	/**群组id*/ 
	groupId:string,

}

interface UIEasemob_leaveGroup_Params {
	/**群组id*/ 
	groupId:string,

}

interface UIEasemob_joinPublicGroup_Params {
	/**群组id*/ 
	groupId:string,

}

interface UIEasemob_requestToJoinPublicGroup_Params {
	/**群组id*/ 
	groupId:string,

	/**(可选项)请求加入的信息*/ 
	aMessage?:string,

}

interface UIEasemob_approveJoinGroupRequest_Params {
	/**所申请的群组ID*/ 
	groupId:string,

	/**申请人*/ 
	username:string,

}

interface UIEasemob_declineJoinGroupRequest_Params {
	/**被拒绝的群组ID*/ 
	groupId:string,

	/**申请人*/ 
	username:string,

	/**拒绝理由*/ 
	reason:string,

}

interface UIEasemob_acceptInvitationFromGroup_Params {
	/**接受的群组ID*/ 
	groupId:string,

	/**邀请者*/ 
	username:string,

}

interface UIEasemob_muteMembers_Params {
	/**要禁言的成员列表*/ 
	muteMembers:Array,

	/**禁言时长，单位秒(android注意：目前muteMilliseconds参数不起作用，暂时只支持永久禁言和解除禁言两种操作, muteMilliseconds建议输入12*30*24*60*60)*/ 
	muteMilliseconds:number,

	/**群组ID*/ 
	groupId:any,

}

interface UIEasemob_unmuteMembers_Params {
	/**要解除禁言的成员列表*/ 
	muteMembers:Array,

	/**群组ID*/ 
	groupId:any,

}

interface UIEasemob_getConversation_Params {
	/**（可选项）会话的id，若创建时可不传此参数*/ 
	conversationId?:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**（可选项） 如果会话不存在是否创建会话*/ 
	ifCreate?:boolean,

}

interface UIEasemob_deleteConversation_Params {
	/**要删除的会话的id*/ 
	conversationId:string,

	/**（可选项） 是否删除会话中的消息*/ 
	isDeleteMessages?:boolean,

}

interface UIEasemob_deleteConversations_Params {
	/**要删除的会话的id 组成的数组*/ 
	conversationIds:Array,

	/**（可选项） 是否删除会话中的消息*/ 
	isDeleteMessages?:boolean,

}

interface UIEasemob_loadMessageWithId_Params {
	/**要获取信息的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**指定的消息的 ID*/ 
	messageId:string,

}

interface UIEasemob_sendText_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**发送的消息*/ 
	text:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}*/ 
	ext:JSON,

}

interface UIEasemob_sendImage_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的图片的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

	/**附件显示名（不包含路径）（仅支持ios）*/ 
	displayName:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface UIEasemob_sendLocation_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的地址*/ 
	address:string,

	/**纬度*/ 
	latitude:number,

	/**经度*/ 
	longitude:number,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface UIEasemob_sendVoice_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的音频的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

	/**附件显示名（不包含路径）（仅iOS支持）*/ 
	displayName:string,

	/**录音时间(秒)*/ 
	length:number,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface UIEasemob_sendVideo_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的视频的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

	/**附件显示名（不包含路径）（仅iOS支持）*/ 
	displayName:string,

	/**视频时间长度(秒)*/ 
	length:number,

	/**视频预览图路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	thumbPath:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface UIEasemob_sendFile_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的文件的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

	/**附件显示名（不包含路径）（仅iOS支持）*/ 
	displayName:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface UIEasemob_sendCmd_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的命令*/ 
	action:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface UIEasemob_downloadMessageThumbnail_Params {
	/**要发送消息的会话的 id（仅iOS支持）*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型（仅iOS支持）*/ 
	chatType?:string,

	/**要下载的信息的 id*/ 
	messageId:string,

}

interface UIEasemob_downloadMessageAttachments_Params {
	/**要发送消息的会话的 id（仅iOS支持）*/ 
	conversationId:string,

	/**（可选项）发送消息的会话类型（仅iOS支持）*/ 
	chatType?:string,

	/**要下载的信息的 id*/ 
	messageId:string,

}

interface UIEasemob_sendMessageReadAck_Params {
	/**要发送回执消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）发送回执消息的会话类型*/ 
	chatType?:string,

	/**要发送回执的信息的 id*/ 
	messageId:string,

}

interface UIEasemob_addMessageListener_Params {
	/**要监听的消息相关事件名称*/ 
	name:string,

}

interface UIEasemob_removeMessageListener_Params {
	/**要移除的消息相关事件名称*/ 
	name:string,

}

interface UIEasemob_loadMessageFromDB_Params {
	/**（必选项）会话的id，若创建时可不传此参数*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**(可选项）消息id，如果不写此项，从数据库中读取最新的记录*/ 
	startMsgId?:string,

	/**(可选项) 获取startMsgId之前的消息数*/ 
	pagesize?:number,

}

interface UIEasemob_markMessageAsRead_Params {
	/**要设置的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**要设置为已读的信息的 id*/ 
	messageId:string,

}

interface UIEasemob_markAllMessagesAsRead_Params {
	/**要设置的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

}

interface UIEasemob_fetchHistoryMessagesFromServer_Params {
	/**（必选项）会话的id，若创建时可不传此参数*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**参考起始消息的ID*/ 
	startMsgId:string,

	/**(可选项) 获取startMsgId之前的消息数*/ 
	pagesize?:number,

}

interface UIEasemob_setLocalNotification_Params {
	/**（可选项）是否开启本地通知*/ 
	enable?:string,

	/**（可选项）本地推送提示语*/ 
	title?:string,

}

interface UIEasemob_setPushOption_Params {
	/**（可选项）推送消息显示的昵称，不传则不设置*/ 
	displayName?:string,

	/**（可选项）推送消息显示的类型*/ 
	displayStyle?:string,

	/**（可选项）消息推送的免打扰设置*/ 
	noDisturbStatus?:string,

	/**（可选项）消息推送免打扰开始时间，小时，暂时只支持整点（小时），不传则不设置*/ 
	noDisturbingStartH?:number,

	/**（可选项）消息推送免打扰结束时间，小时，暂时只支持整点（小时），不传则不设置*/ 
	noDisturbingEndH?:number,

}

interface UIEasemob_setApnsNickname_Params {
	/**推送消息显示的昵称*/ 
	nickname:string,

}

interface UIEasemob_ignoreGroupPush_Params {
	/**群组id*/ 
	groupId:string,

}

interface UIEasemob_ignoreGroupsPush_Params {
	/**群组id组成的数组*/ 
	groupIds:Array,

}

interface weibo {
	/**
	 * `分享文本内容`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取
	 *
	 * `text` :string : 分享的文本，**长度小于140个汉字**
	 */
	shareText(params:weibo_shareText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享图片内容`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取
	 *
	 * `text` :string : （可选项）分享的文本，**长度小于140个汉字**
	 *
	 * `imageUrl` :string : 分享的图片路径，要求本地路径（fs://、widget://），**大小不能超过10M**
	 */
	shareImage(params:weibo_shareImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享网络音频资源`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取
	 *
	 * `text` :string : （可选项）分享的文本，**长度小于140个汉字**
	 *
	 * `title` :string : 分享网络音频的标题，**不能为空且长度小于1k**
	 *
	 * `description` :string : （可选项）分享网络音频的描述，**长度小于1k**
	 *
	 * `thumb` :string : 分享网络音频的缩略图地址，要求本地路径（fs://、widget://），**大小小于32k**
	 *
	 * `contentUrl` :string : 分享网络音频的 url 地址，**不能为空且长度不能超过255**
	 */
	shareMusic(params:weibo_shareMusic_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享网络视频资源`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取
	 *
	 * `text` :string : （可选项）分享的文本，**长度小于140个汉字**
	 *
	 * `title` :string : 分享网络视频的标题，**不能为空且长度小于1k**
	 *
	 * `description` :string : （可选项）分享网络视频的描述，**长度小于1k**
	 *
	 * `thumb` :string : 分享网络视频的缩略图地址，要求本地路径（fs://、widget://），**大小小于32k**
	 *
	 * `contentUrl` :string : 分享网络视频的 url 地址，**不能为空且长度不能超过255**
	 */
	shareVideo(params:weibo_shareVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享网页`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取
	 *
	 * `text` :string : （可选项）分享的文本，**长度小于140个汉字**
	 *
	 * `title` :string : 分享网页的标题，**不能为空且长度小于1k**
	 *
	 * `description` :string : （可选项）分享网页的描述，**长度小于1k**
	 *
	 * `thumb` :string : 分享网页的缩略图地址，要求本地路径（fs://、widget://），**大小小于32k**
	 *
	 * `contentUrl` :string : 分享网页的 url 地址，**不能为空且长度不能超过255**
	 */
	shareWebPage(params:weibo_shareWebPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `授权登录（**用于实现第三方登录**）`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪微博开放平台申请的 App Key，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取，不传或传入错误的 apiKey，则无法打开新浪微博进行登录。
	 *
	 * `registUrl` :string : （可选项）在新浪微博开放平台创建应用时（应用信息 -> 高级信息 -> 授权设置）自定义填写的回调 url，若为空则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取
	 */
	auth(params:weibo_auth_Params, callback?: (ret:JSON) => void):void

	/** 取消授权，退出登录状态*/ 
	cancelAuth(callback?: (ret:JSON) => void):void

	/**
	 * `获取用户账户信息，**调用本接口前，需要先调用  auth 接口授权**`
	 * ========params==========
	 *
	 * `token` :string : （可选项）登录账号获取的token值
	 *
	 * `userId` :string : （可选项）登录账号获取的 userId
	 */
	getUserInfo(params:weibo_getUserInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断是否已安装新浪微博客户端`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪微博开放平台申请的 App Key，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取，不传或传入错误的 apiKey，则无法判断是否已安装新浪微博客户端。
	 */
	isInstalled(params:weibo_isInstalled_Params, callback?: (ret:JSON) => void):void

}
interface weibo_shareText_Params {
	/**（可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取*/ 
	apiKey?:string,

	/**分享的文本，**长度小于140个汉字***/ 
	text:string,

}

interface weibo_shareImage_Params {
	/**（可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取*/ 
	apiKey?:string,

	/**（可选项）分享的文本，**长度小于140个汉字***/ 
	text?:string,

	/**分享的图片路径，要求本地路径（fs://、widget://），**大小不能超过10M***/ 
	imageUrl:string,

}

interface weibo_shareMusic_Params {
	/**（可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取*/ 
	apiKey?:string,

	/**（可选项）分享的文本，**长度小于140个汉字***/ 
	text?:string,

	/**分享网络音频的标题，**不能为空且长度小于1k***/ 
	title:string,

	/**（可选项）分享网络音频的描述，**长度小于1k***/ 
	description?:string,

	/**分享网络音频的缩略图地址，要求本地路径（fs://、widget://），**大小小于32k***/ 
	thumb:string,

	/**分享网络音频的 url 地址，**不能为空且长度不能超过255***/ 
	contentUrl:string,

}

interface weibo_shareVideo_Params {
	/**（可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取*/ 
	apiKey?:string,

	/**（可选项）分享的文本，**长度小于140个汉字***/ 
	text?:string,

	/**分享网络视频的标题，**不能为空且长度小于1k***/ 
	title:string,

	/**（可选项）分享网络视频的描述，**长度小于1k***/ 
	description?:string,

	/**分享网络视频的缩略图地址，要求本地路径（fs://、widget://），**大小小于32k***/ 
	thumb:string,

	/**分享网络视频的 url 地址，**不能为空且长度不能超过255***/ 
	contentUrl:string,

}

interface weibo_shareWebPage_Params {
	/**（可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取*/ 
	apiKey?:string,

	/**（可选项）分享的文本，**长度小于140个汉字***/ 
	text?:string,

	/**分享网页的标题，**不能为空且长度小于1k***/ 
	title:string,

	/**（可选项）分享网页的描述，**长度小于1k***/ 
	description?:string,

	/**分享网页的缩略图地址，要求本地路径（fs://、widget://），**大小小于32k***/ 
	thumb:string,

	/**分享网页的 url 地址，**不能为空且长度不能超过255***/ 
	contentUrl:string,

}

interface weibo_auth_Params {
	/**（可选项）从新浪微博开放平台申请的 App Key，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取，不传或传入错误的 apiKey，则无法打开新浪微博进行登录。*/ 
	apiKey?:string,

	/**（可选项）在新浪微博开放平台创建应用时（应用信息 -> 高级信息 -> 授权设置）自定义填写的回调 url，若为空则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取*/ 
	registUrl?:string,

}

interface weibo_getUserInfo_Params {
	/**（可选项）登录账号获取的token值*/ 
	token?:string,

	/**（可选项）登录账号获取的 userId*/ 
	userId?:string,

}

interface weibo_isInstalled_Params {
	/**（可选项）从新浪微博开放平台申请的 App Key，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取，不传或传入错误的 apiKey，则无法判断是否已安装新浪微博客户端。*/ 
	apiKey?:string,

}

interface baiduAppx {
	/**
	 * `显示横幅广告`
	 * ========params==========
	 *
	 * `appKey` :string : （必填项）百度开发者平台申请的appkey。
	 *
	 * `bannerAdId` :string : （必填项）广告联盟申请的横幅广告id。
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	startBanner(params:baiduAppx_startBanner_Params, callback?: (ret:JSON) => void):void

	/** 移除横幅广告*/ 
	removeBanner(callback?: (ret:JSON) => void):void

	/**
	 * `加载插屏广告`
	 * ========params==========
	 *
	 * `appKey` :string : （必填项）百度开发者平台申请的appkey。
	 *
	 * `interstitialAdId` :string : （必填项）广告联盟申请的插屏广告id。
	 */
	loadInterstitial(params:baiduAppx_loadInterstitial_Params, callback?: (ret:JSON) => void):void

	/** 显示插屏广告*/ 
	showInterstitial(callback?: (ret:JSON) => void):void

}
interface baiduAppx_startBanner_Params {
	/**（必填项）百度开发者平台申请的appkey。*/ 
	appKey:string,

	/**（必填项）广告联盟申请的横幅广告id。*/ 
	bannerAdId:string,

	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface baiduAppx_loadInterstitial_Params {
	/**（必填项）百度开发者平台申请的appkey。*/ 
	appKey:string,

	/**（必填项）广告联盟申请的插屏广告id。*/ 
	interstitialAdId:string,

}

interface moveTrack {
	/**
	 * `开启定位服务，定时上报用户定位信息。`
	 * ========params==========
	 *
	 * `url` :string : （必填）上报服务器的请求地址。
	 *
	 * `dataType` :string : （可选项）post数据的格式，json表示以json字符串作为body提交，后台需要解析body获取数据，格式灵活，移动开发最爱。key-value是以标准的form（表单）格式提交，默认是json。
	 *
	 * `coorType` :string : （可选项）gcj02=国测局经纬度坐标系, bd09=百度墨卡托坐标系, bd09ll=百度经纬度坐标系, 默认是bd09ll, 建议不传值用默认的就好。
	 *
	 * `headers` :JSON : （可选项）自定义上传header数据格式，根必须是对象{}, 不能是数组[], 一层键值对。{"key":"value","key2":"value2"}。可以通过这个参数上传数据到apicloud云 ->
	 *
	 * `data` :JSON : （可选项）自定义上传数据格式，根必须是对象{}, 不能是数组[], 如果dataType=key-value, 则只支持一级对象(不支持对象套对象)，dataType=json没有这个限制。
	 *
	 * `openGPS` :boolean : （可选项）是否开启GPS, 默认为true。(仅安卓有效)
	 *
	 * `scanSpan` :number : （可选项）上报的时间间隔，单位为毫秒(ms)，默认为3000ms。(仅安卓有效)
	 *
	 * `distanceFilter` :number : （可选项）上报的最小距离，单位米(m)，默认为1米,就是移动距离超过1米就提交一次。(仅iOS有效)
	 *
	 * `isNeedAddress` :boolean : （可选项）是否需要地址信息，默认为false。
	 *
	 * `prodName` :string : （可选项）产品名称，默认为apicloud，可以修改为自己APP的名称。(仅安卓有效)
	 *
	 * `prefix` :string : （可选项）字段名的前辍。
	 */
	startLocation(params:moveTrack_startLocation_Params, callback?: (ret:JSON) => void):void

	/** 关闭定时上报定位信息的服务。*/ 
	stopLocation():void

}
interface moveTrack_startLocation_Params {
	/**（必填）上报服务器的请求地址。*/ 
	url:string,

	/**（可选项）post数据的格式，json表示以json字符串作为body提交，后台需要解析body获取数据，格式灵活，移动开发最爱。key-value是以标准的form（表单）格式提交，默认是json。*/ 
	dataType?:string,

	/**（可选项）gcj02=国测局经纬度坐标系, bd09=百度墨卡托坐标系, bd09ll=百度经纬度坐标系, 默认是bd09ll, 建议不传值用默认的就好。*/ 
	coorType?:string,

	/**（可选项）自定义上传header数据格式，根必须是对象{}, 不能是数组[], 一层键值对。{"key":"value","key2":"value2"}。可以通过这个参数上传数据到apicloud云 ->*/ 
	headers?:JSON,

	/**（可选项）自定义上传数据格式，根必须是对象{}, 不能是数组[], 如果dataType=key-value, 则只支持一级对象(不支持对象套对象)，dataType=json没有这个限制。*/ 
	data?:JSON,

	/**（可选项）是否开启GPS, 默认为true。(仅安卓有效)*/ 
	openGPS?:boolean,

	/**（可选项）上报的时间间隔，单位为毫秒(ms)，默认为3000ms。(仅安卓有效)*/ 
	scanSpan?:number,

	/**（可选项）上报的最小距离，单位米(m)，默认为1米,就是移动距离超过1米就提交一次。(仅iOS有效)*/ 
	distanceFilter?:number,

	/**（可选项）是否需要地址信息，默认为false。*/ 
	isNeedAddress?:boolean,

	/**（可选项）产品名称，默认为apicloud，可以修改为自己APP的名称。(仅安卓有效)*/ 
	prodName?:string,

	/**（可选项）字段名的前辍。*/ 
	prefix?:string,

}

interface aliyunVodPlayer {
	/** 初始化播放器*/ 
	initPlayer():void

	/** 打开定制播放器（sts、playAuth、url这三种播放方式只需选取一种，播放器首先尝试以sts的方式播放，如果没有传sts参数，播放器就以playAuth，如果playAuth也没有传参，就以url方式进行播放）*/ 
	openCustomPlayer():void

	/** 关闭自定义播放器*/ 
	closeCustomPlayer():void

	/** 点击返回键时调用此方法*/ 
	onBack():void

	/** 打开悬浮窗口（注意Android需要打开悬浮窗权限，否则会出现异常）*/ 
	openFloatWindow():void

	/**
	 * `准备播放 （sts、playAuth、url这三种播放方式只需选取一种，播放器首先尝试以sts的方式播放，如果没有传sts参数，播放器就以playAuth，如果playAuth也没有传参，就以url方式进行播放）`
	 * ========params==========
	 *
	 * `sts` :JSON : 使用vid+STS方式播放
	 *
	 * `playAuth` :JSON : 使用playAuth方式播放
	 *
	 * `url` :string : 播放url
	 */
	prepareToPlay(params:aliyunVodPlayer_prepareToPlay_Params):void

	/** 开始播放*/ 
	start():void

	/** 显示*/ 
	show():void

	/** 隐藏*/ 
	hide():void

	/** 关闭*/ 
	close():void

	/** 停止播放*/ 
	stop():void

	/** 暂停播放*/ 
	pause():void

	/** 恢复播放*/ 
	resume():void

	/** 重播，播放上一次的url*/ 
	replay():void

	/**
	 * `跳转到指定时间点播放(在播放器状态firstFrame之后才能调用此函数)`
	 * ========params==========
	 *
	 * `position` :number : 播放的指定位置
	 *
	 * `ret` :JSON : 返回值
	 */
	seekToTime(params:aliyunVodPlayer_seekToTime_Params):void

	/**
	 * `循环播放设置`
	 * ========params==========
	 *
	 * `isCirclePlay` :boolean : 是否循环播放
	 */
	setCirclePlay(params:aliyunVodPlayer_setCirclePlay_Params):void

	/** 获取当前播放位置*/ 
	getCurrentPosition():void

	/** 获取视频长度*/ 
	getDuration():void

	/**
	 * `倍数播放支持0.5~2倍的设置，支持音频变速不变调`
	 * ========params==========
	 *
	 * `speed` :number : 倍速
	 */
	setPlaySpeed(params:aliyunVodPlayer_setPlaySpeed_Params):void

	/**
	 * `清晰度切换`
	 * ========params==========
	 *
	 * `quality` :string : 清晰度
	 */
	quality(params:aliyunVodPlayer_quality_Params):void

	/**
	 * `截图`
	 * ========params==========
	 *
	 * `path` :string : 截图保存路径（如果路径无效会保存失败）只支持fs://等本地路径
	 */
	snapShot(params:aliyunVodPlayer_snapShot_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置视频画面旋转角度，支持0°，90°，180°，270°设置，默认0°，角度按顺时针方向计算`
	 * ========params==========
	 *
	 * `rotate` :number : 画面旋转角度
	 */
	setRenderRotate(params:aliyunVodPlayer_setRenderRotate_Params):void

	/**
	 * `支持设置画面镜像，包括水平镜像和垂直镜像。默认为无镜像`
	 * ========params==========
	 *
	 * `mode` :string : 画面镜像模式
	 */
	setRenderMirrorMode(params:aliyunVodPlayer_setRenderMirrorMode_Params):void

	/**
	 * `音量设置`
	 * ========params==========
	 *
	 * `volume` :number : 音量
	 */
	setVolume(params:aliyunVodPlayer_setVolume_Params):void

	/**
	 * `静音设置`
	 * ========params==========
	 *
	 * `isMute` :boolean : 是否静音
	 */
	setMuteMode(params:aliyunVodPlayer_setMuteMode_Params):void

	/**
	 * `设置屏幕亮度`
	 * ========params==========
	 *
	 * `brightness` :number : 屏幕亮度
	 */
	setScreenBrightness(params:aliyunVodPlayer_setScreenBrightness_Params):void

	/**
	 * `设置显示模式`
	 * ========params==========
	 *
	 * `scalingMode` :string : 显示模式
	 */
	setDisplayMode(params:aliyunVodPlayer_setDisplayMode_Params):void

	/** 添加播放器监听事件*/ 
	addEventListener():void

	/** 异常监听 （错误码及错误信息请参考阿里云 [官方文档](https://help.aliyun.com/document_detail/61908.html?spm=5176.doc51992.2.41.DRtsJB#h2--6)）*/ 
	setOnErrorListener():void

	/** **注意:由于SDK限制,下载文件路径暂时仅支持一级目录如:(fs://)***/ 
	initDownloader():void

	/** **注意: 对于iOS而言，authInfo可以是过期的值,然后会回调错误的参数，这时,开始下载的接口必须传最新的authInfo,否则会下载失败***/ 
	prepareDownload():void

	/** 开始下载*/ 
	startDownload():void

	/** 停止下载*/ 
	stopDownload():void

	/** 删除下载*/ 
	removeDownload():void

	/** 获取下载列表*/ 
	getDownloadList():void

	/** 获取未下载完成任务列表*/ 
	getUnfinishedDownloadList():void

	/** 是否锁屏*/ 
	isScreenLock():void

	/** 打开弹幕开关*/ 
	openBarrageSwitch():void

	/** 关闭弹幕开关*/ 
	closeBarrageSwitch():void

	/** 打开设置面板（音量，亮度面板）*/ 
	openSettingPanel():void

	/** 关闭设置面板（音量，亮度面板）*/ 
	closeSettingPanel():void

	/** 解锁屏幕*/ 
	unlockScreen():void

	/** 锁定屏幕*/ 
	lockScreen():void

	/** 设置媒体控制器隐藏与否 此处可以隐藏显示进度条*/ 
	setMediaControllerVisible():void

	/** 媒体控制器是否隐藏*/ 
	getMediaControllerVisibility():void

	/** 设置播放器为全屏*/ 
	fullScreen():void

	/** 退出全屏*/ 
	unfullScreen():void

	/** 设置全屏按钮的可见性*/ 
	setFullscreenBtnVisible():void

	/** 设置返回按钮图片*/ 
	setBackBtnImage():void

	/** 设置播放器界面的触摸监听*/ 
	addTouchListener(callback?: (ret:JSON) => void):void

}
interface aliyunVodPlayer_prepareToPlay_Params {
	/**使用vid+STS方式播放*/ 
	sts:JSON,

	/**使用playAuth方式播放*/ 
	playAuth:JSON,

	/**播放url*/ 
	url:string,

}

interface aliyunVodPlayer_seekToTime_Params {
	/**播放的指定位置*/ 
	position:number,

	/**返回值*/ 
	ret:JSON,

}

interface aliyunVodPlayer_setCirclePlay_Params {
	/**是否循环播放*/ 
	isCirclePlay:boolean,

}

interface aliyunVodPlayer_setPlaySpeed_Params {
	/**倍速*/ 
	speed:number,

}

interface aliyunVodPlayer_quality_Params {
	/**清晰度*/ 
	quality:string,

}

interface aliyunVodPlayer_snapShot_Params {
	/**截图保存路径（如果路径无效会保存失败）只支持fs://等本地路径*/ 
	path:string,

}

interface aliyunVodPlayer_setRenderRotate_Params {
	/**画面旋转角度*/ 
	rotate:number,

}

interface aliyunVodPlayer_setRenderMirrorMode_Params {
	/**画面镜像模式*/ 
	mode:string,

}

interface aliyunVodPlayer_setVolume_Params {
	/**音量*/ 
	volume:number,

}

interface aliyunVodPlayer_setMuteMode_Params {
	/**是否静音*/ 
	isMute:boolean,

}

interface aliyunVodPlayer_setScreenBrightness_Params {
	/**屏幕亮度*/ 
	brightness:number,

}

interface aliyunVodPlayer_setDisplayMode_Params {
	/**显示模式*/ 
	scalingMode:string,

}

interface facebook {
	/** 判断当前设备是否安装facebook客户端*/ 
	isInstalled(callback?: (ret:JSON) => void):void

	/**
	 * `Facebook 登录授权`
	 * ========params==========
	 *
	 * `appId` :string : （可选项）开发者在 facebook 开放平台申请的应用 ID，若不传则模块从当前 widget 包内的 config.xml 文件内读取，若 config.xml 文件内未配置则模块报错
	 *
	 * `permissions` :Array<JSON> : （可选项）向用户申请访问 facebook 的权限，如：(public_profile,email,user_birthday,user_likes)，取值范围参考[权限参考文件](https://developers.facebook.com/docs/facebook-login/permissions/)
	 */
	login(params:facebook_login_Params, callback?: (ret:JSON) => void):void

	/** 应用登出，模块会清空当前 app 内保存的 token 等信息*/ 
	logout():void

	/**
	 * `获取用户信息`
	 * ========params==========
	 *
	 * `parameters` :JSON : （可选项）请求权限，不传则取默认值。
	 */
	getUserInfo(params:facebook_getUserInfo_Params, callback?: (ret:JSON) => void):void

	/** 获取当前 app 内的 token*/ 
	getCurrentToken():void

	/** 刷新当前 app 内的 token*/ 
	refreshToken():void

	/**
	 * `向 facebook 分享链接`
	 * ========params==========
	 *
	 * `url` :string : 要分享的链接
	 *
	 * `imgUrl` :string : （可选项）在帖子中显示的缩略图的网址，**本参数在iOS端已废弃**
	 *
	 * `description` :string : （可选项）内容的描述，通常为 2-4 个句子，**本参数在iOS端已废弃**
	 *
	 * `title` :string : （可选项）表示链接中的内容的标题，**本参数在iOS端已废弃**
	 *
	 * `quote` :string : （可选项）引用
	 */
	shareLinked(params:facebook_shareLinked_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向 facebook 分享本地图片，照片大小必须小于 12MB`
	 * ========params==========
	 *
	 * `path` :string : 要分享的图片地址
	 *
	 * `caption` :string : 图片的标题
	 */
	shareImage(params:facebook_shareImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向 facebook 分享本地视频，视频大小必须小于 12MB`
	 * ========params==========
	 *
	 * `image` :JSON : 分享的视频的预览图信息
	 *
	 * `url` :string : 要分享的视频地址，注意：在 iOS 平台上必须是系统相册路径（UIMediaScanner获取的视频地址路径，不可用transPath转换）
	 */
	shareVideo(params:facebook_shareVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向 facebook 分享多媒体`
	 * ========params==========
	 *
	 * `images` :Array<JSON> : 分享的图片信息组成的数组
	 *
	 * `videoUrls` :Array<JSON> : 要分享的视频地址组成的数组，注意：在 iOS 平台上必须是系统相册路径（UIMediaScanner获取的视频地址路径，不可用transPath转换）
	 */
	shareMedia(params:facebook_shareMedia_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加自定义事件，用于统计分析事件`
	 * ========params==========
	 *
	 * `eventName` :string : (必选项)事件名称
	 */
	addEvent(params:facebook_addEvent_Params):void

}
interface facebook_login_Params {
	/**（可选项）开发者在 facebook 开放平台申请的应用 ID，若不传则模块从当前 widget 包内的 config.xml 文件内读取，若 config.xml 文件内未配置则模块报错*/ 
	appId?:string,

	/**（可选项）向用户申请访问 facebook 的权限，如：(public_profile,email,user_birthday,user_likes)，取值范围参考[权限参考文件](https://developers.facebook.com/docs/facebook-login/permissions/)*/ 
	permissions?:Array<JSON>,

}

interface facebook_getUserInfo_Params {
	/**（可选项）请求权限，不传则取默认值。*/ 
	parameters?:JSON,

}

interface facebook_shareLinked_Params {
	/**要分享的链接*/ 
	url:string,

	/**（可选项）在帖子中显示的缩略图的网址，**本参数在iOS端已废弃***/ 
	imgUrl?:string,

	/**（可选项）内容的描述，通常为 2-4 个句子，**本参数在iOS端已废弃***/ 
	description?:string,

	/**（可选项）表示链接中的内容的标题，**本参数在iOS端已废弃***/ 
	title?:string,

	/**（可选项）引用*/ 
	quote?:string,

}

interface facebook_shareImage_Params {
	/**要分享的图片地址*/ 
	path:string,

	/**图片的标题*/ 
	caption:string,

}

interface facebook_shareVideo_Params {
	/**分享的视频的预览图信息*/ 
	image:JSON,

	/**要分享的视频地址，注意：在 iOS 平台上必须是系统相册路径（UIMediaScanner获取的视频地址路径，不可用transPath转换）*/ 
	url:string,

}

interface facebook_shareMedia_Params {
	/**分享的图片信息组成的数组*/ 
	images:Array<JSON>,

	/**要分享的视频地址组成的数组，注意：在 iOS 平台上必须是系统相册路径（UIMediaScanner获取的视频地址路径，不可用transPath转换）*/ 
	videoUrls:Array<JSON>,

}

interface facebook_addEvent_Params {
	/**(必选项)事件名称*/ 
	eventName:string,

}

interface tencentAd {
	/**
	 * `显示开屏广告`
	 * ========params==========
	 *
	 * `adId` :string : 广告代码位id
	 */
	showSplashAd(params:tencentAd_showSplashAd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示横幅广告`
	 * ========params==========
	 *
	 * `adId` :string : 广告代码位id
	 *
	 * `rect ` :JSON : 位置及尺寸
	 */
	showBannerAd(params:tencentAd_showBannerAd_Params, callback?: (ret:JSON) => void):void

	/** 关闭已打开的横幅广告*/ 
	closeBannerAd(callback?: (ret:JSON) => void):void

	/**
	 * `显示插屏广告`
	 * ========params==========
	 *
	 * `adId` :string : 广告代码位id
	 */
	showInsertAd(params:tencentAd_showInsertAd_Params, callback?: (ret:JSON) => void):void

	/** 关闭插屏广告*/ 
	closeInsertAd(callback?: (ret:JSON) => void):void

	/**
	 * `显示激励视频`
	 * ========params==========
	 *
	 * `adId` :string : 广告代码位id
	 */
	showRewardVideoAd(params:tencentAd_showRewardVideoAd_Params, callback?: (ret:JSON) => void):void

}
interface tencentAd_showSplashAd_Params {
	/**广告代码位id*/ 
	adId:string,

}

interface tencentAd_showBannerAd_Params {
	/**广告代码位id*/ 
	adId:string,

	/**位置及尺寸*/ 
	rect :JSON,

}

interface tencentAd_showInsertAd_Params {
	/**广告代码位id*/ 
	adId:string,

}

interface tencentAd_showRewardVideoAd_Params {
	/**广告代码位id*/ 
	adId:string,

}

interface haierFaceId {
	/** SDK网络授权*/ 
	auth(callback?: (ret:JSON) => void):void

}
interface hanvonCloudBcardReader {
	/**
	 * `识别名片`
	 * ========params==========
	 *
	 * `androidkey` :string : 在汉王云官网申请的android key
	 *
	 * `iOSkey` :string : 在汉王云官网申请的iOS key
	 *
	 * `lang` :string : （可选项）名片是语言，可为auto（多语言带坐标）、chns（中文简体）、chnt（中文繁体）、en（英文）
	 *
	 * `picpath` :string : 名片的存放路径，要求本地路径（fs://）
	 */
	recognitionBcard(params:hanvonCloudBcardReader_recognitionBcard_Params, callback?: (ret:JSON) => void):void

}
interface hanvonCloudBcardReader_recognitionBcard_Params {
	/**在汉王云官网申请的android key*/ 
	androidkey:string,

	/**在汉王云官网申请的iOS key*/ 
	iOSkey:string,

	/**（可选项）名片是语言，可为auto（多语言带坐标）、chns（中文简体）、chnt（中文繁体）、en（英文）*/ 
	lang?:string,

	/**名片的存放路径，要求本地路径（fs://）*/ 
	picpath:string,

}

interface uscSpeechRecognizer {
}
interface gt3geetest {
}
interface jchat {
	/**
	 * `注册`
	 * ========params==========
	 *
	 * `username` :string : 用户名用户名. 长度 4~128 位.
	 *
	 * `password` :string : 密码，长度 4~128 位
	 *
	 * `userInfo` :JSON : （可选项）用户个人信息；详情参考附录：用户个人信息
	 */
	register(params:jchat_register_Params, callback?: (ret:JSON) => void):void

	/**
	 * `登录接口`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `password` :string : 密码
	 */
	login(params:jchat_login_Params, callback?: (ret:JSON) => void):void

	/** 退出登录*/ 
	logout(callback?: (ret:JSON) => void):void

	/**
	 * `批量获取用户信息（仅IOS支持）`
	 * ========params==========
	 *
	 * `usernames` :Array : 用户名集合
	 */
	getUserInfos(params:jchat_getUserInfos_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取用户信息（仅Android支持）`
	 * ========params==========
	 *
	 * `userName` :string : 用户名
	 *
	 * `appKey` :string : 指定的appKey
	 */
	getUserInfo(params:jchat_getUserInfo_Params, callback?: (ret:JSON) => void):void

	/** 获取已登陆用户信息*/ 
	getMyInfo():void

	/**
	 * `更新用户信息`
	 * ========params==========
	 *
	 * `userInfo` :JSON : 用户个人信息；详情参考附录：用户个人信息
	 *
	 * `updateType` :string : （可选项）（仅android支持）更新哪个字段
	 */
	updateMyInfo(params:jchat_updateMyInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新密码`
	 * ========params==========
	 *
	 * `newPassword` :any : 用户新的密码
	 *
	 * `oldPassword` :any : 用户旧的密码
	 */
	updatePassword(params:jchat_updatePassword_Params, callback?: (ret:JSON) => void):void

	/** 更改头像（仅android支持）*/ 
	updateAvatar(callback?: (ret:JSON) => void):void

	/** 获取头像缩略图（仅ios支持）*/ 
	getThumbAvatar(callback?: (ret:JSON) => void):void

	/** 获取头像大图（仅ios支持）*/ 
	getLargeAvatar(callback?: (ret:JSON) => void):void

	/**
	 * `获取用户展示名，展示优先级：备注名(noteName) -> 昵称(nickname) -> 用户名(username)（仅ios支持）`
	 * ========params==========
	 *
	 * `uid` :number : （可选项）用户的本地uid，不传获取自己的展示名
	 */
	getDisplayName(params:jchat_getDisplayName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `改好友的备注名`
	 * ========params==========
	 *
	 * `noteName` :any : 备注名
	 *
	 * `uid` :number : 好友的本地uid
	 */
	updateNoteName(params:jchat_updateNoteName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改好友的备注信息`
	 * ========params==========
	 *
	 * `noteText` :any : 备注信息
	 *
	 * `uid` :number : 好友的本地uid
	 */
	updateNoteText(params:jchat_updateNoteText_Params, callback?: (ret:JSON) => void):void

	/** 账号事件的监听*/ 
	addAccountListener():void

	/**
	 * `发送文本消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id（仅ios有效）
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `userName` :string : 好友username，单聊会话时有效（仅android有效）
	 *
	 * `androidId` :number : 群组id，android端在发送群组消息时有效（仅android有效）
	 *
	 * `text` :string : 发送的消息
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息
	 *
	 * `ext` :JSON : （可选项）（仅ios支持）扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}，跨应用单聊消息不支持此参数
	 */
	sendText(params:jchat_sendText_Params):void

	/**
	 * `发送图片消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `userName` :string : 好友username，单聊会话时有效（仅android有效）
	 *
	 * `androidId` :number : 群组id，android端在发送群组消息时有效（仅android有效）
	 *
	 * `path` :string : 要发送的图片的路径，要求本地路径（fs://、widget://）
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息
	 *
	 * `ext` :JSON : （可选项）（仅ios支持）扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}，跨应用单聊消息不支持此参数
	 */
	sendImage(params:jchat_sendImage_Params):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `userName` :string : 好友username，单聊会话时有效（仅android有效）
	 *
	 * `androidId` :number : 群组id，android端在发送群组消息时有效（仅android有效）
	 *
	 * `address` :string : 详细地址信息
	 *
	 * `latitude` :number : 纬度
	 *
	 * `longitude` :number : 经度
	 *
	 * `scale` :number : 缩放比例
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息
	 *
	 * `ext` :JSON : （可选项）（仅ios支持）扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}，跨应用单聊消息不支持此参数
	 */
	sendLocation(params:jchat_sendLocation_Params):void

	/**
	 * `发送声音消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id（仅ios有效）
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `userName` :string : 好友username，单聊会话时有效（仅android有效）
	 *
	 * `androidId` :number : 群组id，android端在发送群组消息时有效（仅android有效）
	 *
	 * `path` :string : 要发送的音频的路径，要求本地路径（fs://、widget://）
	 *
	 * `length` :number : 录音时间(秒)
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息
	 *
	 * `ext` :JSON : （可选项）（仅ios支持）扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}，跨应用单聊消息不支持此参数
	 */
	sendVoice(params:jchat_sendVoice_Params):void

	/**
	 * `发送视频消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id（仅ios有效）
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `userName` :string : 好友username，单聊会话时有效（仅android有效）
	 *
	 * `androidId` :number : 群组id，android端在发送群组消息时有效（仅android有效）
	 *
	 * `path` :string : 要发送的视频的路径，要求本地路径（fs://、widget://）
	 *
	 * `length` :number : 录视频时间长度(秒)
	 *
	 * `thumbPath` :string : 视频预览图路径，要求本地路径（fs://、widget://）
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息
	 *
	 * `ext` :JSON : （仅ios有效）扩展信息
	 */
	sendVideo(params:jchat_sendVideo_Params):void

	/**
	 * `发送文件消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id（仅ios有效）
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `userName` :string : 好友username，单聊会话时有效（仅android有效）
	 *
	 * `androidId` :number : 群组id，android端在发送群组消息时有效（仅android有效）
	 *
	 * `path` :string : 要发送的文件的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 *
	 * `fileName` :string : 文件名字
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息
	 *
	 * `ext` :JSON : （可选项）（仅ios支持）扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}，跨应用单聊消息不支持此参数
	 */
	sendFile(params:jchat_sendFile_Params):void

	/**
	 * `发送自定义消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id（仅ios有效）
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `userName` :string : 好友username，单聊会话时有效（仅android有效）
	 *
	 * `androidId` :number : 群组id，android端在发送群组消息时有效（仅android有效）
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息
	 *
	 * `text` :string : 用于展示在会话列表, 文本地简要描述这条消息（仅ios支持）
	 *
	 * `customDict` :any : 自定义消息内容
	 *
	 * `ext` :JSON : 扩展信息（仅ios支持）
	 */
	sendCustomContent(params:jchat_sendCustomContent_Params):void

	/**
	 * `发送@消息（只支持群组）`
	 * ========params==========
	 *
	 * `androidId` :number : 群组id，android端在发送群组消息时有效（仅android有效）
	 *
	 * `gid` :string : 群组ID（仅ios有效）
	 *
	 * `atList` :Array : （可选项）要@的人的数组，不填写@所有人
	 *
	 * `text` :string : 消息内容
	 *
	 * `ext` :JSON : 扩展信息（仅ios支持）
	 */
	sendAtMessage(params:jchat_sendAtMessage_Params):void

	/**
	 * `消息转发(只能转发消息状态为 SendSucceed 和 ReceiveSucceed 的消息，只支持单聊)`
	 * ========params==========
	 *
	 * `conversationId` :string : 要转发消息的会话的 id
	 *
	 * `uid` :number : 转发的接收用户的本地uid
	 *
	 * `messageId` :string : 本地消息ID
	 *
	 * `androidMessageId` :number : 被转发的本地消息id（android有效）
	 *
	 * `fromUserName` :string : 需要转发信息的好友username，单聊会话时需要，与fromAndroidId参数必须存在一个，同时存在此参数优先级高（仅android有效）
	 *
	 * `fromAndroidId` :number : 需要转发信息的群组会话id，端在发送群组消息时需要，与fromUserName必须存在一个，同时存在时fromUserName优先级高（仅android有效）
	 *
	 * `fromUserAppKey` :string : （可选项）被转发信息所在聊天的appkey,不传则默认是本应用（仅android有效）
	 *
	 * `toUserName` :string : 转发目标好友username，单聊会话时需要，与toAndroidId必须存在一个，同时存在时此参数优先级高（仅android有效）
	 *
	 * `toAndroidId` :number : 目标群组会话id，端在发送群组消息时需要，与toUserName必须存在一个，同时存在时toUserName优先级高（仅android有效）
	 *
	 * `toUserAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息（仅android有效）
	 */
	forwardMessage(params:jchat_forwardMessage_Params):void

	/**
	 * `消息撤回（可撤回3分钟内的消息）`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话的 id（仅ios有效）
	 *
	 * `messageId` :string : 本地消息ID(仅ios有效)
	 *
	 * `chatType` :string : （可选项）要转发消息的会话类型
	 *
	 * `androidMessageId` :number : 本地消息id（android有效）
	 *
	 * `userName` :string : 信息的好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）
	 *
	 * `androidId` :number : 信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）
	 *
	 * `userAppKey` :string : （可选项）信息所在聊天的appkey,不传则默认是本应用（仅android有效）
	 */
	retractMessage(params:jchat_retractMessage_Params, callback?: (ret:JSON) => void):void

	/** 添加消息相关监听*/ 
	addMessageListener(callback?: (ret:JSON) => void):void

	/**
	 * `下载附件(仅ios支持)`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话的 id
	 *
	 * `messageId` :string : 本地消息ID
	 *
	 * `chatType` :string : （可选项）要转发消息的会话类型
	 *
	 * `attachmentType` :string : （可选项）附件类型
	 */
	downloadAttachment(params:jchat_downloadAttachment_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取会话`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话的 id（仅ios有效）
	 *
	 * `chatType` :string : （可选项）消息的会话类型
	 *
	 * `userName` :string : 信息的好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）
	 *
	 * `androidId` :number : 信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）
	 *
	 * `userAppKey` :string : （可选项）信息所在聊天的appkey,不传则默认是本应用（仅android有效）
	 */
	getConversation(params:jchat_getConversation_Params, callback?: (ret:JSON) => void):void

	/** 获取会话列表*/ 
	getAllConversations(callback?: (ret:JSON) => void):void

	/**
	 * `创建会话`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话的 id（单聊对象 username、群聊群组ID。由创建群组时返回、聊天室 ID）（仅ios有效）
	 *
	 * `chatType` :string : （可选项）要转发消息的会话类型
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于创建跨应用单聊会话
	 *
	 * `userName` :string : 好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）
	 *
	 * `androidId` :number : 信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）
	 */
	createConversation(params:jchat_createConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除会话`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话的 id（单聊对象 username、群聊群组ID。由创建群组时返回、聊天室 ID）（仅ios有效）
	 *
	 * `chatType` :string : （可选项）要转发消息的会话类型
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于删除跨应用单聊会话
	 *
	 * `userName` :string : 好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）
	 *
	 * `androidId` :number : 信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）
	 */
	deleteConversation(params:jchat_deleteConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取所有消息记录`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话的 id（仅ios支持）
	 *
	 * `chatType` :string : （可选项）要转发消息的会话类型
	 *
	 * `offset	` :number : （可选项）开始的位置（填写-1代表从最初开始）
	 *
	 * `limit	` :number : （可选项）获取的数量（填写-1代表不限）
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于删除跨应用单聊会话
	 *
	 * `userName` :string : 好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）
	 *
	 * `androidId` :number : 信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）
	 */
	getAllMessages(params:jchat_getAllMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除全部消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话的 id（单聊对象 username、群聊群组ID。由创建群组时返回、聊天室 ID）（仅ios有效）
	 *
	 * `chatType` :string : （可选项）要转发消息的会话类型
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于删除跨应用单聊会话（仅android有效）
	 *
	 * `userName` :string : 好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）
	 *
	 * `androidId` :number : 信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）
	 */
	deleteAllMessages(params:jchat_deleteAllMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除会话未读数`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话的 id（单聊对象 username、群聊群组ID。由创建群组时返回、聊天室 ID）（仅ios有效）
	 *
	 * `chatType` :string : （可选项）要转发消息的会话类型
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于删除跨应用单聊会话（仅android有效）
	 *
	 * `userName` :string : 好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）
	 *
	 * `androidId` :number : 信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）
	 */
	clearUnreadCount(params:jchat_clearUnreadCount_Params):void

	/** 所有会话的未读消息的总数*/ 
	getAllUnreadCount():void

	/**
	 * `从服务器端刷新会话信息（仅ios支持）`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话的 id（单聊对象 username、群聊群组ID。由创建群组时返回、聊天室 ID）
	 *
	 * `chatType` :string : （可选项）要转发消息的会话类型
	 */
	refreshTargetInfoFromServer(params:jchat_refreshTargetInfoFromServer_Params, callback?: (ret:JSON) => void):void

	/** 添加会话相关监听*/ 
	addConversationListener():void

	/**
	 * `创建群组`
	 * ========params==========
	 *
	 * `groupInfo` :JSON : null
	 *
	 * `invitees` :Array : 群组成员
	 *
	 * `userAppKey` :string : （可选项）群组成员所在应用appkey,不传则默认是本应用，（仅android有效）
	 */
	createGroup(params:jchat_createGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群组信息`
	 * ========params==========
	 *
	 * `groupInfo` :JSON : null
	 *
	 * `gid` :string : 群组 id（仅ios有效）
	 *
	 * `androidId` :number : 信息的群组会话id，（仅android有效）
	 */
	updateGroupInfo(params:jchat_updateGroupInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取群组信息`
	 * ========params==========
	 *
	 * `androidId` :number : 信息的群组会话id，（仅android有效）
	 *
	 * `gid` :string : 群组 id（仅ios有效）
	 */
	getGroupInfo(params:jchat_getGroupInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加群组成员`
	 * ========params==========
	 *
	 * `androidId` :number : 信息的群组会话id，（仅android有效）
	 *
	 * `gid` :string : 群组 id（仅ios有效）
	 *
	 * `usernameArray` :Array : 用户名数组
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于添加群组跨应用成员
	 *
	 * `reason` :string : （可选项）邀请原因
	 */
	addMembers(params:jchat_addMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除群组成员`
	 * ========params==========
	 *
	 * `androidId` :number : 信息的群组会话id，（仅android有效）
	 *
	 * `gid` :string : 群组 id(仅ios有效)
	 *
	 * `usernameArray` :Array : 用户名数组
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于删除群组跨应用成员
	 */
	removeMembers(params:jchat_removeMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `申请入群`
	 * ========params==========
	 *
	 * `androidId` :number : 信息的群组会话id，（仅android有效）
	 *
	 * `gid` :string : 群组 id(仅ios有效)
	 *
	 * `reason` :string : （可选项）申请原因
	 */
	applyJoinGroupWithGid(params:jchat_applyJoinGroupWithGid_Params, callback?: (ret:JSON) => void):void

	/**
	 * `管理员审批入群申请`
	 * ========params==========
	 *
	 * `userName` :string : 申请入群组用户的username，（仅android有效）
	 *
	 * `gid` :string : 群组 id（仅ios有效）
	 *
	 * `eventId` :string : 入取申请事件的 id（仅ios有效）
	 *
	 * `androidEventId` :number : 入取申请事件的 id（仅android有效）
	 *
	 * `joinUser` :number : 入群的用户的uid（仅ios有效）
	 *
	 * `applyUser` :number : 发起申请的的用户的uid，如果是主动申请入群则和 member 是相同的（仅ios有效）
	 *
	 * `isAgree` :boolean : （可选项）是否同意申请
	 *
	 * `appkey` :string : 被同意入群者的appKey（仅android支持）
	 *
	 * `reason` :string : （可选项）拒绝理由
	 */
	applyJoinGroup(params:jchat_applyJoinGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移交群主`
	 * ========params==========
	 *
	 * `androidId` :number : 信息的群组会话id，（仅android有效）
	 *
	 * `gid` :string : 群组 id（仅ios有效）
	 *
	 * `username` :string : 新群主用户名
	 *
	 * `appkey` :string : （可选项）新群主用户 AppKey，不填则默认为本应用 AppKey
	 */
	transferGroupOwner(params:jchat_transferGroupOwner_Params, callback?: (ret:JSON) => void):void

	/**
	 * `群成员禁言设置`
	 * ========params==========
	 *
	 * `androidId` :number : 信息的群组会话id，（仅android有效）
	 *
	 * `gid` :string : 群组 id（仅ios有效）
	 *
	 * `isSilence` :boolean : （可选项）是否禁言
	 *
	 * `username` :string : 带设置的用户的 username
	 *
	 * `appkey` :string : （可选项）新群主用户 AppKey，不填则默认为本应用 AppKey
	 */
	setGroupMemberSilence(params:jchat_setGroupMemberSilence_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取禁言列表`
	 * ========params==========
	 *
	 * `androidId` :number : 信息的群组会话id，（仅android有效）
	 *
	 * `gid` :string : 群组 id（仅ios有效）
	 */
	getGroupSilenceMembers(params:jchat_getGroupSilenceMembers_Params, callback?: (ret:JSON) => void):void

	/** 获取我的群组列表*/ 
	getMyGroupArray(callback?: (ret:JSON) => void):void

	/**
	 * `获取群组成员列表`
	 * ========params==========
	 *
	 * `androidId` :number : 信息的群组会话id，（仅android有效）
	 *
	 * `gid` :string : 群组 id（仅ios有效）
	 */
	getMemberInfoList(params:jchat_getMemberInfoList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `退出群组`
	 * ========params==========
	 *
	 * `androidId` :number : 信息的群组会话id，（仅android有效）
	 *
	 * `gid` :string : 群组 id（仅ios有效）
	 */
	leaveGroup(params:jchat_leaveGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解散群组`
	 * ========params==========
	 *
	 * `androidId` :number : 信息的群组会话id，（仅android有效）
	 *
	 * `gid` :string : 群组 id（仅ios有效）
	 */
	destroyGroup(params:jchat_destroyGroup_Params, callback?: (ret:JSON) => void):void

	/** 获取已加入的聊天室*/ 
	getChatRoomList():void

	/**
	 * `加入聊天室`
	 * ========params==========
	 *
	 * `androidRoomId` :number : 聊天室 id(仅android有效)
	 *
	 * `roomId` :string : 聊天室 id（仅ios有效）
	 */
	enterChatRoom(params:jchat_enterChatRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `退出聊天室`
	 * ========params==========
	 *
	 * `androidRoomId` :number : 聊天室 id(仅android有效)
	 *
	 * `roomId` :string : 聊天室 id（仅ios有效）
	 */
	leaveChatRoom(params:jchat_leaveChatRoom_Params, callback?: (ret:JSON) => void):void

	/** 添加群组相关监听*/ 
	addGroupListener():void

	/** 获取好友列表*/ 
	getFriendList():void

	/**
	 * `删除好友`
	 * ========params==========
	 *
	 * `name` :string : （可选项）对方所在应用appkey,不传则默认是本应用
	 */
	removeFriend(params:jchat_removeFriend_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加黑名单`
	 * ========params==========
	 *
	 * `names` :Array : 黑名单数组
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于跨应用添加黑名单
	 */
	addUsersToBlacklist(params:jchat_addUsersToBlacklist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除黑名单`
	 * ========params==========
	 *
	 * `names` :Array : 黑名单数组
	 *
	 * `userAppKey` :string : （可选项）对方所在应用appkey,不传则默认是本应用，用于跨应用删除黑名单
	 */
	delUsersFromBlacklist(params:jchat_delUsersFromBlacklist_Params, callback?: (ret:JSON) => void):void

	/** 添加好友相关监听（加好友、删除好友、好友更新等事件）*/ 
	addFriendListener():void

	/** 添加消息撤回事件监听*/ 
	addMessageRetractListener():void

	/** 添加消息回执状态变更事件监听*/ 
	addMessageReceiptListener():void

	/** 添加消息透传事件监听*/ 
	addMessageTransparentListener():void

	/**
	 * `设置角标(到服务器)（仅ios支持）`
	 * ========params==========
	 *
	 * `count` :number : （可选项）角标值
	 */
	setBadge(params:jchat_setBadge_Params, callback?: (ret:JSON) => void):void

	/** 重置角标(到服务器)（仅ios支持）*/ 
	resetBadge():void

	/** 初始化音视频聊天*/ 
	initCall(callback?: (ret:JSON) => void):void

	/** 设置音视频监听*/ 
	addCallListener():void

	/**
	 * `发起音视频聊天`
	 * ========params==========
	 *
	 * `usernames` :Array : 邀请的用户列表
	 *
	 * `type` :number : （可选项）聊天类型
	 */
	makeCall(params:jchat_makeCall_Params, callback?: (ret:JSON) => void):void

	/** 接听音视频聊天*/ 
	acceptCall(callback?: (ret:JSON) => void):void

	/** 拒绝音视频聊天(仅android支持)*/ 
	refuseCall(callback?: (ret:JSON) => void):void

	/** 挂断音视频聊天*/ 
	hangupCall(callback?: (ret:JSON) => void):void

	/**
	 * `邀请用户加入当前通话`
	 * ========params==========
	 *
	 * `usernames` :Array : 邀请的用户列表
	 */
	inviteUsers(params:jchat_inviteUsers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置视频通话中某个用户的显示 View（仅ios支持）`
	 * ========params==========
	 *
	 * `uid` :number : （可选项）用户的uid
	 *
	 * `rect` :string : (可选项）view坐标
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（ios：只指 frame，传 window 无效）(android可以是frame或者Window，但是在全屏的时候，需要挂在Window上或者frame是全屏)
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	setVideoView(params:jchat_setVideoView_Params, callback?: (ret:JSON) => void):void

	/** 设置扬声器状态（只在视频或语音通话连接建立之后调用有效）*/ 
	setSpeakerEnabled():void

	/**
	 * `设置视频流状态（该方法不影响本地视频流获取，没有禁用摄像头，只是暂停发送本地视频流，只在视频通话连接建立之后调用有效。）`
	 * ========params==========
	 *
	 * `isMuted` :boolean : （可选项）开启/关闭，音频通话默:false，视频通话默认: true
	 */
	setVideoStreamEnabled(params:jchat_setVideoStreamEnabled_Params, callback?: (ret:JSON) => void):void

	/** 切换摄像头*/ 
	switchCameraMode():void

}
interface jchat_register_Params {
	/**用户名用户名. 长度 4~128 位.*/ 
	username:string,

	/**密码，长度 4~128 位*/ 
	password:string,

	/**（可选项）用户个人信息；详情参考附录：用户个人信息*/ 
	userInfo?:JSON,

}

interface jchat_login_Params {
	/**用户名*/ 
	username:string,

	/**密码*/ 
	password:string,

}

interface jchat_getUserInfos_Params {
	/**用户名集合*/ 
	usernames:Array,

}

interface jchat_getUserInfo_Params {
	/**用户名*/ 
	userName:string,

	/**指定的appKey*/ 
	appKey:string,

}

interface jchat_updateMyInfo_Params {
	/**用户个人信息；详情参考附录：用户个人信息*/ 
	userInfo:JSON,

	/**（可选项）（仅android支持）更新哪个字段*/ 
	updateType?:string,

}

interface jchat_updatePassword_Params {
	/**用户新的密码*/ 
	newPassword:any,

	/**用户旧的密码*/ 
	oldPassword:any,

}

interface jchat_getDisplayName_Params {
	/**（可选项）用户的本地uid，不传获取自己的展示名*/ 
	uid?:number,

}

interface jchat_updateNoteName_Params {
	/**备注名*/ 
	noteName:any,

	/**好友的本地uid*/ 
	uid:number,

}

interface jchat_updateNoteText_Params {
	/**备注信息*/ 
	noteText:any,

	/**好友的本地uid*/ 
	uid:number,

}

interface jchat_sendText_Params {
	/**要发送消息的会话的 id（仅ios有效）*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**好友username，单聊会话时有效（仅android有效）*/ 
	userName:string,

	/**群组id，android端在发送群组消息时有效（仅android有效）*/ 
	androidId:number,

	/**发送的消息*/ 
	text:string,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息*/ 
	userAppKey?:string,

	/**（可选项）（仅ios支持）扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}，跨应用单聊消息不支持此参数*/ 
	ext?:JSON,

}

interface jchat_sendImage_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**好友username，单聊会话时有效（仅android有效）*/ 
	userName:string,

	/**群组id，android端在发送群组消息时有效（仅android有效）*/ 
	androidId:number,

	/**要发送的图片的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息*/ 
	userAppKey?:string,

	/**（可选项）（仅ios支持）扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}，跨应用单聊消息不支持此参数*/ 
	ext?:JSON,

}

interface jchat_sendLocation_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**好友username，单聊会话时有效（仅android有效）*/ 
	userName:string,

	/**群组id，android端在发送群组消息时有效（仅android有效）*/ 
	androidId:number,

	/**详细地址信息*/ 
	address:string,

	/**纬度*/ 
	latitude:number,

	/**经度*/ 
	longitude:number,

	/**缩放比例*/ 
	scale:number,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息*/ 
	userAppKey?:string,

	/**（可选项）（仅ios支持）扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}，跨应用单聊消息不支持此参数*/ 
	ext?:JSON,

}

interface jchat_sendVoice_Params {
	/**要发送消息的会话的 id（仅ios有效）*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**好友username，单聊会话时有效（仅android有效）*/ 
	userName:string,

	/**群组id，android端在发送群组消息时有效（仅android有效）*/ 
	androidId:number,

	/**要发送的音频的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**录音时间(秒)*/ 
	length:number,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息*/ 
	userAppKey?:string,

	/**（可选项）（仅ios支持）扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}，跨应用单聊消息不支持此参数*/ 
	ext?:JSON,

}

interface jchat_sendVideo_Params {
	/**要发送消息的会话的 id（仅ios有效）*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**好友username，单聊会话时有效（仅android有效）*/ 
	userName:string,

	/**群组id，android端在发送群组消息时有效（仅android有效）*/ 
	androidId:number,

	/**要发送的视频的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**录视频时间长度(秒)*/ 
	length:number,

	/**视频预览图路径，要求本地路径（fs://、widget://）*/ 
	thumbPath:string,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息*/ 
	userAppKey?:string,

	/**（仅ios有效）扩展信息*/ 
	ext:JSON,

}

interface jchat_sendFile_Params {
	/**要发送消息的会话的 id（仅ios有效）*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**好友username，单聊会话时有效（仅android有效）*/ 
	userName:string,

	/**群组id，android端在发送群组消息时有效（仅android有效）*/ 
	androidId:number,

	/**要发送的文件的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

	/**文件名字*/ 
	fileName:string,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息*/ 
	userAppKey?:string,

	/**（可选项）（仅ios支持）扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}，跨应用单聊消息不支持此参数*/ 
	ext?:JSON,

}

interface jchat_sendCustomContent_Params {
	/**要发送消息的会话的 id（仅ios有效）*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**好友username，单聊会话时有效（仅android有效）*/ 
	userName:string,

	/**群组id，android端在发送群组消息时有效（仅android有效）*/ 
	androidId:number,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息*/ 
	userAppKey?:string,

	/**用于展示在会话列表, 文本地简要描述这条消息（仅ios支持）*/ 
	text:string,

	/**自定义消息内容*/ 
	customDict:any,

	/**扩展信息（仅ios支持）*/ 
	ext:JSON,

}

interface jchat_sendAtMessage_Params {
	/**群组id，android端在发送群组消息时有效（仅android有效）*/ 
	androidId:number,

	/**群组ID（仅ios有效）*/ 
	gid:string,

	/**（可选项）要@的人的数组，不填写@所有人*/ 
	atList?:Array,

	/**消息内容*/ 
	text:string,

	/**扩展信息（仅ios支持）*/ 
	ext:JSON,

}

interface jchat_forwardMessage_Params {
	/**要转发消息的会话的 id*/ 
	conversationId:string,

	/**转发的接收用户的本地uid*/ 
	uid:number,

	/**本地消息ID*/ 
	messageId:string,

	/**被转发的本地消息id（android有效）*/ 
	androidMessageId:number,

	/**需要转发信息的好友username，单聊会话时需要，与fromAndroidId参数必须存在一个，同时存在此参数优先级高（仅android有效）*/ 
	fromUserName:string,

	/**需要转发信息的群组会话id，端在发送群组消息时需要，与fromUserName必须存在一个，同时存在时fromUserName优先级高（仅android有效）*/ 
	fromAndroidId:number,

	/**（可选项）被转发信息所在聊天的appkey,不传则默认是本应用（仅android有效）*/ 
	fromUserAppKey?:string,

	/**转发目标好友username，单聊会话时需要，与toAndroidId必须存在一个，同时存在时此参数优先级高（仅android有效）*/ 
	toUserName:string,

	/**目标群组会话id，端在发送群组消息时需要，与toUserName必须存在一个，同时存在时toUserName优先级高（仅android有效）*/ 
	toAndroidId:number,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于发送跨应用单聊消息（仅android有效）*/ 
	toUserAppKey?:string,

}

interface jchat_retractMessage_Params {
	/**会话的 id（仅ios有效）*/ 
	conversationId:string,

	/**本地消息ID(仅ios有效)*/ 
	messageId:string,

	/**（可选项）要转发消息的会话类型*/ 
	chatType?:string,

	/**本地消息id（android有效）*/ 
	androidMessageId:number,

	/**信息的好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）*/ 
	userName:string,

	/**信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）*/ 
	androidId:number,

	/**（可选项）信息所在聊天的appkey,不传则默认是本应用（仅android有效）*/ 
	userAppKey?:string,

}

interface jchat_downloadAttachment_Params {
	/**会话的 id*/ 
	conversationId:string,

	/**本地消息ID*/ 
	messageId:string,

	/**（可选项）要转发消息的会话类型*/ 
	chatType?:string,

	/**（可选项）附件类型*/ 
	attachmentType?:string,

}

interface jchat_getConversation_Params {
	/**会话的 id（仅ios有效）*/ 
	conversationId:string,

	/**（可选项）消息的会话类型*/ 
	chatType?:string,

	/**信息的好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）*/ 
	userName:string,

	/**信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）*/ 
	androidId:number,

	/**（可选项）信息所在聊天的appkey,不传则默认是本应用（仅android有效）*/ 
	userAppKey?:string,

}

interface jchat_createConversation_Params {
	/**会话的 id（单聊对象 username、群聊群组ID。由创建群组时返回、聊天室 ID）（仅ios有效）*/ 
	conversationId:string,

	/**（可选项）要转发消息的会话类型*/ 
	chatType?:string,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于创建跨应用单聊会话*/ 
	userAppKey?:string,

	/**好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）*/ 
	userName:string,

	/**信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）*/ 
	androidId:number,

}

interface jchat_deleteConversation_Params {
	/**会话的 id（单聊对象 username、群聊群组ID。由创建群组时返回、聊天室 ID）（仅ios有效）*/ 
	conversationId:string,

	/**（可选项）要转发消息的会话类型*/ 
	chatType?:string,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于删除跨应用单聊会话*/ 
	userAppKey?:string,

	/**好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）*/ 
	userName:string,

	/**信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）*/ 
	androidId:number,

}

interface jchat_getAllMessages_Params {
	/**会话的 id（仅ios支持）*/ 
	conversationId:string,

	/**（可选项）要转发消息的会话类型*/ 
	chatType?:string,

	/**（可选项）开始的位置（填写-1代表从最初开始）*/ 
	offset	?:number,

	/**（可选项）获取的数量（填写-1代表不限）*/ 
	limit	?:number,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于删除跨应用单聊会话*/ 
	userAppKey?:string,

	/**好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）*/ 
	userName:string,

	/**信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）*/ 
	androidId:number,

}

interface jchat_deleteAllMessages_Params {
	/**会话的 id（单聊对象 username、群聊群组ID。由创建群组时返回、聊天室 ID）（仅ios有效）*/ 
	conversationId:string,

	/**（可选项）要转发消息的会话类型*/ 
	chatType?:string,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于删除跨应用单聊会话（仅android有效）*/ 
	userAppKey?:string,

	/**好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）*/ 
	userName:string,

	/**信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）*/ 
	androidId:number,

}

interface jchat_clearUnreadCount_Params {
	/**会话的 id（单聊对象 username、群聊群组ID。由创建群组时返回、聊天室 ID）（仅ios有效）*/ 
	conversationId:string,

	/**（可选项）要转发消息的会话类型*/ 
	chatType?:string,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于删除跨应用单聊会话（仅android有效）*/ 
	userAppKey?:string,

	/**好友username，单聊会话时需要，与androidId参数必须存在一个，同时存在此参数优先级高（仅android有效）*/ 
	userName:string,

	/**信息的群组会话id，群组消息时需要，与userName必须存在一个，同时存在时userName优先级高（仅android有效）*/ 
	androidId:number,

}

interface jchat_refreshTargetInfoFromServer_Params {
	/**会话的 id（单聊对象 username、群聊群组ID。由创建群组时返回、聊天室 ID）*/ 
	conversationId:string,

	/**（可选项）要转发消息的会话类型*/ 
	chatType?:string,

}

interface jchat_createGroup_Params {
	/**null*/ 
	groupInfo:JSON,

	/**群组成员*/ 
	invitees:Array,

	/**（可选项）群组成员所在应用appkey,不传则默认是本应用，（仅android有效）*/ 
	userAppKey?:string,

}

interface jchat_updateGroupInfo_Params {
	/**null*/ 
	groupInfo:JSON,

	/**群组 id（仅ios有效）*/ 
	gid:string,

	/**信息的群组会话id，（仅android有效）*/ 
	androidId:number,

}

interface jchat_getGroupInfo_Params {
	/**信息的群组会话id，（仅android有效）*/ 
	androidId:number,

	/**群组 id（仅ios有效）*/ 
	gid:string,

}

interface jchat_addMembers_Params {
	/**信息的群组会话id，（仅android有效）*/ 
	androidId:number,

	/**群组 id（仅ios有效）*/ 
	gid:string,

	/**用户名数组*/ 
	usernameArray:Array,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于添加群组跨应用成员*/ 
	userAppKey?:string,

	/**（可选项）邀请原因*/ 
	reason?:string,

}

interface jchat_removeMembers_Params {
	/**信息的群组会话id，（仅android有效）*/ 
	androidId:number,

	/**群组 id(仅ios有效)*/ 
	gid:string,

	/**用户名数组*/ 
	usernameArray:Array,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于删除群组跨应用成员*/ 
	userAppKey?:string,

}

interface jchat_applyJoinGroupWithGid_Params {
	/**信息的群组会话id，（仅android有效）*/ 
	androidId:number,

	/**群组 id(仅ios有效)*/ 
	gid:string,

	/**（可选项）申请原因*/ 
	reason?:string,

}

interface jchat_applyJoinGroup_Params {
	/**申请入群组用户的username，（仅android有效）*/ 
	userName:string,

	/**群组 id（仅ios有效）*/ 
	gid:string,

	/**入取申请事件的 id（仅ios有效）*/ 
	eventId:string,

	/**入取申请事件的 id（仅android有效）*/ 
	androidEventId:number,

	/**入群的用户的uid（仅ios有效）*/ 
	joinUser:number,

	/**发起申请的的用户的uid，如果是主动申请入群则和 member 是相同的（仅ios有效）*/ 
	applyUser:number,

	/**（可选项）是否同意申请*/ 
	isAgree?:boolean,

	/**被同意入群者的appKey（仅android支持）*/ 
	appkey:string,

	/**（可选项）拒绝理由*/ 
	reason?:string,

}

interface jchat_transferGroupOwner_Params {
	/**信息的群组会话id，（仅android有效）*/ 
	androidId:number,

	/**群组 id（仅ios有效）*/ 
	gid:string,

	/**新群主用户名*/ 
	username:string,

	/**（可选项）新群主用户 AppKey，不填则默认为本应用 AppKey*/ 
	appkey?:string,

}

interface jchat_setGroupMemberSilence_Params {
	/**信息的群组会话id，（仅android有效）*/ 
	androidId:number,

	/**群组 id（仅ios有效）*/ 
	gid:string,

	/**（可选项）是否禁言*/ 
	isSilence?:boolean,

	/**带设置的用户的 username*/ 
	username:string,

	/**（可选项）新群主用户 AppKey，不填则默认为本应用 AppKey*/ 
	appkey?:string,

}

interface jchat_getGroupSilenceMembers_Params {
	/**信息的群组会话id，（仅android有效）*/ 
	androidId:number,

	/**群组 id（仅ios有效）*/ 
	gid:string,

}

interface jchat_getMemberInfoList_Params {
	/**信息的群组会话id，（仅android有效）*/ 
	androidId:number,

	/**群组 id（仅ios有效）*/ 
	gid:string,

}

interface jchat_leaveGroup_Params {
	/**信息的群组会话id，（仅android有效）*/ 
	androidId:number,

	/**群组 id（仅ios有效）*/ 
	gid:string,

}

interface jchat_destroyGroup_Params {
	/**信息的群组会话id，（仅android有效）*/ 
	androidId:number,

	/**群组 id（仅ios有效）*/ 
	gid:string,

}

interface jchat_enterChatRoom_Params {
	/**聊天室 id(仅android有效)*/ 
	androidRoomId:number,

	/**聊天室 id（仅ios有效）*/ 
	roomId:string,

}

interface jchat_leaveChatRoom_Params {
	/**聊天室 id(仅android有效)*/ 
	androidRoomId:number,

	/**聊天室 id（仅ios有效）*/ 
	roomId:string,

}

interface jchat_removeFriend_Params {
	/**（可选项）对方所在应用appkey,不传则默认是本应用*/ 
	name?:string,

}

interface jchat_addUsersToBlacklist_Params {
	/**黑名单数组*/ 
	names:Array,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于跨应用添加黑名单*/ 
	userAppKey?:string,

}

interface jchat_delUsersFromBlacklist_Params {
	/**黑名单数组*/ 
	names:Array,

	/**（可选项）对方所在应用appkey,不传则默认是本应用，用于跨应用删除黑名单*/ 
	userAppKey?:string,

}

interface jchat_setBadge_Params {
	/**（可选项）角标值*/ 
	count?:number,

}

interface jchat_makeCall_Params {
	/**邀请的用户列表*/ 
	usernames:Array,

	/**（可选项）聊天类型*/ 
	type?:number,

}

interface jchat_inviteUsers_Params {
	/**邀请的用户列表*/ 
	usernames:Array,

}

interface jchat_setVideoView_Params {
	/**（可选项）用户的uid*/ 
	uid?:number,

	/**(可选项）view坐标*/ 
	rect?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（ios：只指 frame，传 window 无效）(android可以是frame或者Window，但是在全屏的时候，需要挂在Window上或者frame是全屏)*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface jchat_setVideoStreamEnabled_Params {
	/**（可选项）开启/关闭，音频通话默:false，视频通话默认: true*/ 
	isMuted?:boolean,

}

interface Twitter {
	/** 登录授权*/ 
	login(callback?: (ret:JSON) => void):void

	/** 登出*/ 
	logout():void

	/**
	 * `分享图文内容，android可分享视频`
	 * ========params==========
	 *
	 * `title` :string : （可选项）分享的文本，标题
	 *
	 * `image` :string : （可选项）分享的图片，要求本地路径（widget://、fs://）
	 *
	 * `url` :string : （可选项）分享的 url
	 */
	share(params:Twitter_share_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享图文，可轻量编辑（仅android支持）`
	 * ========params==========
	 *
	 * `title` :string : （可选项）分享的文本，标题
	 *
	 * `image` :string : （可选项）分享的图片，要求本地路径（widget://、fs://）
	 *
	 * `hashtags` :string : （可选项）预填充的hashtags
	 *
	 * `darkTheme` :boolean : （可选项）是否使用黑色主题
	 */
	shareWithEdit(params:Twitter_shareWithEdit_Params, callback?: (ret:JSON) => void):void

}
interface Twitter_share_Params {
	/**（可选项）分享的文本，标题*/ 
	title?:string,

	/**（可选项）分享的图片，要求本地路径（widget://、fs://）*/ 
	image?:string,

	/**（可选项）分享的 url*/ 
	url?:string,

}

interface Twitter_shareWithEdit_Params {
	/**（可选项）分享的文本，标题*/ 
	title?:string,

	/**（可选项）分享的图片，要求本地路径（widget://、fs://）*/ 
	image?:string,

	/**（可选项）预填充的hashtags*/ 
	hashtags?:string,

	/**（可选项）是否使用黑色主题*/ 
	darkTheme?:boolean,

}

interface QQPlus {
	/** 判断当前设备是否安装了 QQ 客户端*/ 
	installed():void

	/** 登陆qq*/ 
	login(callback?: (ret:JSON) => void):void

	/** 登出qq*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 获取用户信息*/ 
	getUserInfo(callback?: (ret:JSON) => void):void

	/**
	 * `分享纯文本到手机 QQ（空间、群聊、讨论组、好友），**在 android 平台上此接口无回调，在 iOS 平台分享成功无回调**`
	 * ========params==========
	 *
	 * `text` :string : 要分享的文本
	 */
	shareText(params:QQPlus_shareText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享单张本地图片到 QQ 空间或 QQ 好友、讨论组、群聊`
	 * ========params==========
	 *
	 * `type` :string : （可选项）分享内容到好友或空间
	 *
	 * `imgPath` :string : 要分享的图片路径，要求本地路径（widget://、fs://）
	 *
	 * `title` :string : （可选项）要分享的图片标题，本参数仅支持 iOS 平台
	 *
	 * `description` :string : （可选项）要分享的图片描述，本参数仅支持 iOS 平台
	 */
	shareImage(params:QQPlus_shareImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享新闻到 QQ 空间或 QQ 好友、讨论组、群聊`
	 * ========params==========
	 *
	 * `url` :string : 要分享的新闻链接地址
	 *
	 * `title` :string : 要分享的新闻标题
	 *
	 * `description` :string : 要分享的新闻描述(分享到空间无效)
	 *
	 * `imgUrl` :string : 要分享的新闻缩略图的url（网络/本地资源图片）Android平台只支持网络图片
	 *
	 * `type` :string : 分享内容到好友或空间
	 */
	shareNews(params:QQPlus_shareNews_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享音乐到QQ 空间或 QQ 好友、讨论组、群聊`
	 * ========params==========
	 *
	 * `audioUrl` :string : 要分享的音乐链接地址
	 *
	 * `targetUrl` :string : 点击跳转的网页地址，iOS 平台暂不支持本参数
	 *
	 * `title` :string : （可选项）要分享的标题
	 *
	 * `description` :string : （可选项）要分享的描述
	 *
	 * `imgUrl` :string : 要分享的音乐缩略图url（网络/本地资源图片）
	 *
	 * `type` :string : 分享内容到好友或空间
	 */
	shareMusic(params:QQPlus_shareMusic_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享本地视频到 QQ 空间`
	 * ========params==========
	 *
	 * `videoUrl` :string : 要分享的本地视频地址，在 android 平台上要求本地路径（widget://、fs://）。在 iOS 平台上要求系统相册内视频地址，可用 UIMediaScanner 模块获取（无需调用transPath接口转换）
	 */
	shareVideo(params:QQPlus_shareVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发表说说到 QQ 空间`
	 * ========params==========
	 *
	 * `summary` :string : （可选项）分享的说说的内容，注：当 imgUrls 有值时，summary 参数无效
	 *
	 * `imgUrls` :Array : （可选项）要分享的本地图片地址数组，要求本地路径（widget://、fs://），当本参数为空时，表示发表纯文本说说
	 */
	shareMood(params:QQPlus_shareMood_Params, callback?: (ret:JSON) => void):void

}
interface QQPlus_shareText_Params {
	/**要分享的文本*/ 
	text:string,

}

interface QQPlus_shareImage_Params {
	/**（可选项）分享内容到好友或空间*/ 
	type?:string,

	/**要分享的图片路径，要求本地路径（widget://、fs://）*/ 
	imgPath:string,

	/**（可选项）要分享的图片标题，本参数仅支持 iOS 平台*/ 
	title?:string,

	/**（可选项）要分享的图片描述，本参数仅支持 iOS 平台*/ 
	description?:string,

}

interface QQPlus_shareNews_Params {
	/**要分享的新闻链接地址*/ 
	url:string,

	/**要分享的新闻标题*/ 
	title:string,

	/**要分享的新闻描述(分享到空间无效)*/ 
	description:string,

	/**要分享的新闻缩略图的url（网络/本地资源图片）Android平台只支持网络图片*/ 
	imgUrl:string,

	/**分享内容到好友或空间*/ 
	type:string,

}

interface QQPlus_shareMusic_Params {
	/**要分享的音乐链接地址*/ 
	audioUrl:string,

	/**点击跳转的网页地址，iOS 平台暂不支持本参数*/ 
	targetUrl:string,

	/**（可选项）要分享的标题*/ 
	title?:string,

	/**（可选项）要分享的描述*/ 
	description?:string,

	/**要分享的音乐缩略图url（网络/本地资源图片）*/ 
	imgUrl:string,

	/**分享内容到好友或空间*/ 
	type:string,

}

interface QQPlus_shareVideo_Params {
	/**要分享的本地视频地址，在 android 平台上要求本地路径（widget://、fs://）。在 iOS 平台上要求系统相册内视频地址，可用 UIMediaScanner 模块获取（无需调用transPath接口转换）*/ 
	videoUrl:string,

}

interface QQPlus_shareMood_Params {
	/**（可选项）分享的说说的内容，注：当 imgUrls 有值时，summary 参数无效*/ 
	summary?:string,

	/**（可选项）要分享的本地图片地址数组，要求本地路径（widget://、fs://），当本参数为空时，表示发表纯文本说说*/ 
	imgUrls?:Array,

}

interface coinport {
}
interface wxPayPlus {
	/**
	 * `获取预支付订单号（适用于支付方案一）`
	 * ========params==========
	 *
	 * `info` :string : 订单信息（详见[统一下单-请求参数](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_1)）签名后的字符串。具体方法见微信支付[安全规范-签名算法](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_12&index=2&index=2) 。**注意：微信官方建议本过程在服务器端执行**
	 */
	getOrderId(params:wxPayPlus_getOrderId_Params, callback?: (ret:JSON) => void):void

	/**
	 * `支付订单（适用于支付方案一）`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `orderId` :string : getOrderId 获取的订单号 （prepay_id）
	 *
	 * `mchId` :string : 商家和微信合作的 id 号，审核通过后微信服务器会发送到商家邮箱
	 *
	 * `nonceStr` :string : 随机字符串，防重发
	 *
	 * `timeStamp` :string : 时间戳，防重发
	 *
	 * `package` :string : （可选项）扩展字段，暂填写固定值Sign=WXPay
	 *
	 * `sign` :string : 商家根据微信开放平台文档对数据做的签名，详见：[安全规范-签名算法](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_12&index=2)
	 */
	payOrder(params:wxPayPlus_payOrder_Params, callback?: (ret:JSON) => void):void

	/**
	 * `配置模块内部处理签名时需要的参数（适用于支付方案二）`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `mchId` :string : （可选项）商家和微信合作的 id 号，审核通过后微信服务器会发送到商家邮箱，若不传或者传空则从 `key.xml` 中读取
	 *
	 * `partnerKey` :string : （可选项）商户 API 密钥，务必同在商户平台->账户设置->API安全里填写的密钥保持一致，此密钥是根据微信对商户密钥的规范自己生成的，若不传或者传空则从 `key.xml` 中读取
	 *
	 * `notifyUrl` :string : （可选项）支付结果回调页面，若不传或者传空则从 `key.xml` 中读取
	 */
	config(params:wxPayPlus_config_Params, callback?: (ret:JSON) => void):void

	/**
	 * `支付订单（适用于支付方案二）`
	 * ========params==========
	 *
	 * `description` :string : 商品或支付订单简要描述
	 *
	 * `totalFee` :string : 订单总金额，只能为整数，单位：分（￥）
	 *
	 * `tradeNo` :string : 商户系统内部的订单号，32个字符以内，可包含字母，其他说明见[商户订单号](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)
	 *
	 * `spbillCreateIP` :string : （可选项）APP 和网页支付提交用户端 IP，Native 支付填调用微信支付 API 的机器 IP
	 *
	 * `deviceInfo` :string : （可选项）终端设备号（门店号或收银设备 ID），注意：PC 网页或公众号内支付请传 "WEB"
	 *
	 * `detail` :string : （可选项）商品名称明细列表
	 *
	 * `attach` :string : （可选项）附加数据，在查询 API 和支付通知中原样返回，该字段主要用于商户携带订单的自定义数据
	 *
	 * `feeType` :string : （可选项）符合 ISO 4217标准的三位字母代码，其他值列表详见[货币类型](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)
	 *
	 * `timeStart` :string : （可选项）订单生成时间，格式为 yyyyMMddHHmmss，如2009年12月25日9点10分10秒表示为20091225091010。其他详见[时间规则](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)
	 *
	 * `timeExpire` :string : （可选项）订单失效时间，格式为 yyyyMMddHHmmss，如2009年12月27日9点10分10秒表示为20091227091010。其他详见[时间规则](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)。**注意：最短失效时间间隔必须大于5分钟**
	 *
	 * `goodsTag` :string : （可选项）商品标记，代金券或立减优惠功能的参数，说明详见[代金券或立减优惠](https://pay.weixin.qq.com/wiki/doc/api/sp_coupon.php?chapter=12_1)
	 *
	 * `productId` :string : （可选项）trade_type=NATIVE ，此 id 为二维码中包含的商品 ID，商户自行定义，详见[商户平台开发者文档](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1)
	 *
	 * `openId` :string : （可选项）trade_type=JSAPI ，用户在商户 appid 下的唯一标识。下单前需要调用[【网页授权获取用户信息】](http://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html)接口获取到用户的 Openid
	 */
	pay(params:wxPayPlus_pay_Params, callback?: (ret:JSON) => void):void

}
interface wxPayPlus_getOrderId_Params {
	/**订单信息（详见[统一下单-请求参数](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_1)）签名后的字符串。具体方法见微信支付[安全规范-签名算法](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_12&index=2&index=2) 。**注意：微信官方建议本过程在服务器端执行***/ 
	info:string,

}

interface wxPayPlus_payOrder_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**getOrderId 获取的订单号 （prepay_id）*/ 
	orderId:string,

	/**商家和微信合作的 id 号，审核通过后微信服务器会发送到商家邮箱*/ 
	mchId:string,

	/**随机字符串，防重发*/ 
	nonceStr:string,

	/**时间戳，防重发*/ 
	timeStamp:string,

	/**（可选项）扩展字段，暂填写固定值Sign=WXPay*/ 
	package?:string,

	/**商家根据微信开放平台文档对数据做的签名，详见：[安全规范-签名算法](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_12&index=2)*/ 
	sign:string,

}

interface wxPayPlus_config_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）商家和微信合作的 id 号，审核通过后微信服务器会发送到商家邮箱，若不传或者传空则从 `key.xml` 中读取*/ 
	mchId?:string,

	/**（可选项）商户 API 密钥，务必同在商户平台->账户设置->API安全里填写的密钥保持一致，此密钥是根据微信对商户密钥的规范自己生成的，若不传或者传空则从 `key.xml` 中读取*/ 
	partnerKey?:string,

	/**（可选项）支付结果回调页面，若不传或者传空则从 `key.xml` 中读取*/ 
	notifyUrl?:string,

}

interface wxPayPlus_pay_Params {
	/**商品或支付订单简要描述*/ 
	description:string,

	/**订单总金额，只能为整数，单位：分（￥）*/ 
	totalFee:string,

	/**商户系统内部的订单号，32个字符以内，可包含字母，其他说明见[商户订单号](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)*/ 
	tradeNo:string,

	/**（可选项）APP 和网页支付提交用户端 IP，Native 支付填调用微信支付 API 的机器 IP*/ 
	spbillCreateIP?:string,

	/**（可选项）终端设备号（门店号或收银设备 ID），注意：PC 网页或公众号内支付请传 "WEB"*/ 
	deviceInfo?:string,

	/**（可选项）商品名称明细列表*/ 
	detail?:string,

	/**（可选项）附加数据，在查询 API 和支付通知中原样返回，该字段主要用于商户携带订单的自定义数据*/ 
	attach?:string,

	/**（可选项）符合 ISO 4217标准的三位字母代码，其他值列表详见[货币类型](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)*/ 
	feeType?:string,

	/**（可选项）订单生成时间，格式为 yyyyMMddHHmmss，如2009年12月25日9点10分10秒表示为20091225091010。其他详见[时间规则](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)*/ 
	timeStart?:string,

	/**（可选项）订单失效时间，格式为 yyyyMMddHHmmss，如2009年12月27日9点10分10秒表示为20091227091010。其他详见[时间规则](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)。**注意：最短失效时间间隔必须大于5分钟***/ 
	timeExpire?:string,

	/**（可选项）商品标记，代金券或立减优惠功能的参数，说明详见[代金券或立减优惠](https://pay.weixin.qq.com/wiki/doc/api/sp_coupon.php?chapter=12_1)*/ 
	goodsTag?:string,

	/**（可选项）trade_type=NATIVE ，此 id 为二维码中包含的商品 ID，商户自行定义，详见[商户平台开发者文档](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1)*/ 
	productId?:string,

	/**（可选项）trade_type=JSAPI ，用户在商户 appid 下的唯一标识。下单前需要调用[【网页授权获取用户信息】](http://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html)接口获取到用户的 Openid*/ 
	openId?:string,

}

interface adsDomob {
}
interface lelink {
	/**
	 * `手动注册`
	 * ========params==========
	 *
	 * `LBAPPID` :string : 从乐播开发者平台获取的 AppID
	 *
	 * `LBSECRETKEY` :string : 从乐播开发者平台获取的 AppSecret
	 */
	registerApp(params:lelink_registerApp_Params, callback?: (ret:JSON) => void):void

	/** 搜索设备*/ 
	searchForLelinkService(callback?: (ret:JSON) => void):void

	/** 停⽌止搜索*/ 
	stopSearchForLelinkService(callback?: (ret:JSON) => void):void

	/**
	 * `连接设备`
	 * ========params==========
	 *
	 * `index` :any : 选择的第⼏几个设备 0为起点
	 */
	lelinkService(params:lelink_lelinkService_Params, callback?: (ret:JSON) => void):void

	/**
	 * `播放影音资源`
	 * ========params==========
	 *
	 * `mediaURLString` :string : 要播放的链接
	 */
	playMedia(params:lelink_playMedia_Params, callback?: (ret:JSON) => void):void

	/** 停止播放*/ 
	stopPlayMedia(callback?: (ret:JSON) => void):void

}
interface lelink_registerApp_Params {
	/**从乐播开发者平台获取的 AppID*/ 
	LBAPPID:string,

	/**从乐播开发者平台获取的 AppSecret*/ 
	LBSECRETKEY:string,

}

interface lelink_lelinkService_Params {
	/**选择的第⼏几个设备 0为起点*/ 
	index:any,

}

interface lelink_playMedia_Params {
	/**要播放的链接*/ 
	mediaURLString:string,

}

interface discuz {
	/** 在论坛中注册用户*/ 
	reg():void

}
interface moduleScanner {
	/**
	 * `使用扫码器代码调用`
	 * ========params==========
	 *
	 * `isLight` :boolean : 是否开启闪光灯（true为开启，false为关闭）
	 */
	scannerHandle(params:moduleScanner_scannerHandle_Params, callback?: (ret:JSON) => void):void

}
interface moduleScanner_scannerHandle_Params {
	/**是否开启闪光灯（true为开启，false为关闭）*/ 
	isLight:boolean,

}

interface qiniuPlayer {
	/**
	 * `初始化视频播放配置`
	 * ========params==========
	 *
	 * `ttf` :string : （可选项）设置标题显示文字字体文件路径，仅支持widget://
	 *
	 * `logo` :string : （可选项）右上角设置logo(图片类型：png)；支持fs://,widget://
	 *
	 * `background` :string : （可选项）视频播放前的图片显示(图片类型：jpg,png,gif)；支持fs://,widget://
	 */
	init(params:qiniuPlayer_init_Params):void

	/**
	 * `播放本地视频、网络视频、rtmp直播流等`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `url` :string : （必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://
	 *
	 * `title` :string : （可选项）不填时标题默认显示url地址
	 *
	 * `defaultBtn` :boolean : （可选项）设置本次播放是否显示默认自带的播放控制按钮
	 *
	 * `enableFull` :boolean : （可选项）本次播放视频是否全屏播放，当为true时将直接全屏播放视频，x,y,w,h,fixedOn,fixed值不会生效。
	 *
	 * `isTopView` :boolean : （可选项）是否显示顶部标题栏
	 *
	 * `isFullBtn` :boolean : （可选项）小窗口是否显示进入全屏按钮
	 *
	 * `isBackBtn` :boolean : （可选项）小窗口是否显示返回按钮
	 *
	 * `fullscreenMode` :string : （可选项）设置全屏按钮控制全屏显示模式是横屏还是竖屏 竖屏:PORTRAIT ; 横屏:LANDSCAPE
	 *
	 * `isShowProcessView` :boolean : （可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动默认为false】
	 *
	 * `isShowTimeLable` :boolean : （可选项）是否显示播放时间 (显示:true ; 不显示:false)
	 *
	 * `isLive` :boolean : （可选项）是否直播视频源 （直播：true；点播：false）
	 *
	 * `isSmallOpenGesture` :boolean : （可选项）窗口播放时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）
	 *
	 * `isOpenGesture` :boolean : （可选项）全屏时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）
	 *
	 * `process` :number : （必填项）设置视频需要播放的时长
	 *
	 * `isAutoPlay` :boolean : （可选项）是否自动播放 (自动播放:true ; 不自动播放:false)
	 *
	 * `isPlayMusic` :boolean : （可选项）是否仅播放音频 (仅播放音频:true ; 视频播放:false)
	 */
	play(params:qiniuPlayer_play_Params, callback?: (ret:JSON) => void):void

	/**
	 * `同一个页面，已经调用play接口后，切换视频地址时调用（前提条件，同一界面已经调用过play接口）。`
	 * ========params==========
	 *
	 * `url` :string : （必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://
	 *
	 * `title` :string : （可选项）不填时标题默认显示url播放文件名
	 *
	 * `defaultBtn` :boolean : （可选项）设置本次播放是否显示默认自带的播放控制按钮
	 *
	 * `isLive` :boolean : （可选项）是否直播视频源 （直播：true；点播：false）
	 *
	 * `isSmallOpenGesture` :boolean : （可选项）窗口播放时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）
	 *
	 * `isOpenGesture` :boolean : （可选项）全屏时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）
	 *
	 * `process` :number : （必填项）设置视频需要播放的时长
	 */
	playUrl(params:qiniuPlayer_playUrl_Params, callback?: (ret:JSON) => void):void

	/** 暂停播放*/ 
	pause():void

	/** 暂停后开始播放*/ 
	start():void

	/** 停止播放*/ 
	stop():void

	/** 获取视频的时长*/ 
	getDuration(callback?: (ret:JSON) => void):void

	/** 获取已经播放的时长*/ 
	getCurrentPosition(callback?: (ret:JSON) => void):void

	/** 全屏播放*/ 
	full():void

	/** 退出全屏*/ 
	unfull():void

	/**
	 * `视频播放完监听事件`
	 * ========params==========
	 *
	 * `name` :string : 监听事件名称,可以设置的播放界面监听类型有：playEnd(播放结束),pause(暂停),play(播放),backBtn(小窗口返回按钮),full(进入全屏按钮),unfull(退出全屏按钮),click(视频区域点击监听),bufferingStart(缓冲开始),bufferingEnd(缓冲结束)
	 */
	addEventListener(params:qiniuPlayer_addEventListener_Params, callback?: (ret:JSON) => void):void

	/** 获取是否全屏播放状态*/ 
	isFullScreen(callback?: (ret:JSON) => void):void

	/**
	 * `设置播放进度位置(请根据视频最大时长进行参数控制传入)`
	 * ========params==========
	 *
	 * `process` :number : （必填项）设置视频需要播放的时长
	 */
	seekTo(params:qiniuPlayer_seekTo_Params):void

	/**
	 * `设置播音量`
	 * ========params==========
	 *
	 * `volume` :number : （必填项）0-100
	 */
	setVolume(params:qiniuPlayer_setVolume_Params):void

	/** 隐藏播放器*/ 
	hidePlayer():void

	/** 显示播放器*/ 
	showPlayer():void

	/**
	 * `倍速播放`
	 * ========params==========
	 *
	 * `speed` :number : （必填项）设置视频播放倍速(取值范围 0.1-1.9)
	 */
	setSpeed(params:qiniuPlayer_setSpeed_Params):void

}
interface qiniuPlayer_init_Params {
	/**（可选项）设置标题显示文字字体文件路径，仅支持widget://*/ 
	ttf?:string,

	/**（可选项）右上角设置logo(图片类型：png)；支持fs://,widget://*/ 
	logo?:string,

	/**（可选项）视频播放前的图片显示(图片类型：jpg,png,gif)；支持fs://,widget://*/ 
	background?:string,

}

interface qiniuPlayer_play_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://*/ 
	url:string,

	/**（可选项）不填时标题默认显示url地址*/ 
	title?:string,

	/**（可选项）设置本次播放是否显示默认自带的播放控制按钮*/ 
	defaultBtn?:boolean,

	/**（可选项）本次播放视频是否全屏播放，当为true时将直接全屏播放视频，x,y,w,h,fixedOn,fixed值不会生效。*/ 
	enableFull?:boolean,

	/**（可选项）是否显示顶部标题栏*/ 
	isTopView?:boolean,

	/**（可选项）小窗口是否显示进入全屏按钮*/ 
	isFullBtn?:boolean,

	/**（可选项）小窗口是否显示返回按钮*/ 
	isBackBtn?:boolean,

	/**（可选项）设置全屏按钮控制全屏显示模式是横屏还是竖屏 竖屏:PORTRAIT ; 横屏:LANDSCAPE*/ 
	fullscreenMode?:string,

	/**（可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动默认为false】*/ 
	isShowProcessView?:boolean,

	/**（可选项）是否显示播放时间 (显示:true ; 不显示:false)*/ 
	isShowTimeLable?:boolean,

	/**（可选项）是否直播视频源 （直播：true；点播：false）*/ 
	isLive?:boolean,

	/**（可选项）窗口播放时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）*/ 
	isSmallOpenGesture?:boolean,

	/**（可选项）全屏时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）*/ 
	isOpenGesture?:boolean,

	/**（必填项）设置视频需要播放的时长*/ 
	process:number,

	/**（可选项）是否自动播放 (自动播放:true ; 不自动播放:false)*/ 
	isAutoPlay?:boolean,

	/**（可选项）是否仅播放音频 (仅播放音频:true ; 视频播放:false)*/ 
	isPlayMusic?:boolean,

}

interface qiniuPlayer_playUrl_Params {
	/**（必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://*/ 
	url:string,

	/**（可选项）不填时标题默认显示url播放文件名*/ 
	title?:string,

	/**（可选项）设置本次播放是否显示默认自带的播放控制按钮*/ 
	defaultBtn?:boolean,

	/**（可选项）是否直播视频源 （直播：true；点播：false）*/ 
	isLive?:boolean,

	/**（可选项）窗口播放时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）*/ 
	isSmallOpenGesture?:boolean,

	/**（可选项）全屏时是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）*/ 
	isOpenGesture?:boolean,

	/**（必填项）设置视频需要播放的时长*/ 
	process:number,

}

interface qiniuPlayer_addEventListener_Params {
	/**监听事件名称,可以设置的播放界面监听类型有：playEnd(播放结束),pause(暂停),play(播放),backBtn(小窗口返回按钮),full(进入全屏按钮),unfull(退出全屏按钮),click(视频区域点击监听),bufferingStart(缓冲开始),bufferingEnd(缓冲结束)*/ 
	name:string,

}

interface qiniuPlayer_seekTo_Params {
	/**（必填项）设置视频需要播放的时长*/ 
	process:number,

}

interface qiniuPlayer_setVolume_Params {
	/**（必填项）0-100*/ 
	volume:number,

}

interface qiniuPlayer_setSpeed_Params {
	/**（必填项）设置视频播放倍速(取值范围 0.1-1.9)*/ 
	speed:number,

}

interface moduleUHF {
	/**
	 * `读取UHF标签信息`
	 * ========params==========
	 *
	 * `startIndex` :any : （可选项）读取的起始位置，如不传参，默认从0开始。
	 *
	 * `length` :string : （可选性）读取的长度，如不传参，默认读6位
	 */
	readUHF(params:moduleUHF_readUHF_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向UHF标签写入信息`
	 * ========params==========
	 *
	 * `startIndex` :any : （可选项）读取的起始位置，如不传参，默认从0开始。
	 *
	 * `length` :string : （可选项）读取的长度，如不传参，默认读6位
	 *
	 * `str` :string : （必选项）需要写入到标签的信息，必填
	 */
	writeUHF(params:moduleUHF_writeUHF_Params, callback?: (ret:JSON) => void):void

	/** 开启读写UHF的测试页面*/ 
	startActivity():void

}
interface moduleUHF_readUHF_Params {
	/**（可选项）读取的起始位置，如不传参，默认从0开始。*/ 
	startIndex?:any,

	/**（可选性）读取的长度，如不传参，默认读6位*/ 
	length?:string,

}

interface moduleUHF_writeUHF_Params {
	/**（可选项）读取的起始位置，如不传参，默认从0开始。*/ 
	startIndex?:any,

	/**（可选项）读取的长度，如不传参，默认读6位*/ 
	length?:string,

	/**（必选项）需要写入到标签的信息，必填*/ 
	str:string,

}

interface umengAnalytics {
	/** 模块初始化*/ 
	init(callback?: (ret:JSON) => void):void

	/**
	 * `自定义页面统计开始。与 [onPageEnd](#a3) 或 [onPageEndSync](#a9) 成对使用，在页面打开时调用此方法，如果页面不需要统计，则无需调用此方法`
	 * ========params==========
	 *
	 * `pageName` :string : 自定义的页面名称，统计开始和结束统计的页面名称必须一致。
	 */
	onPageStart(params:umengAnalytics_onPageStart_Params, callback?: (ret:JSON) => void):void

	/**
	 * `自定义页面统计结束。与 [onPageStart](#a2) 或 [onPageStartSync](#a8) 成对使用，单独使用无效，在页面关闭前调用`
	 * ========params==========
	 *
	 * `pageName` :string : 自定义的页面名称，统计开始和结束统计的页面名称必须一致。
	 */
	onPageEnd(params:umengAnalytics_onPageEnd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `自定义事件统计，自定义事件可以实现在应用程序中埋点来统计用户的点击行为。自定义事件目前包括“计数事件”和“计算事件”，二者的区别以及详细说明请[点击这里](http://dev.umeng.com/analytics/functions/numekv)`
	 * ========params==========
	 *
	 * `eventId` :string : 自定义事件id
	 *
	 * `attributes` :JSON : （可选项）事件的属性和取值（Key-Value键值对）
	 *
	 * `counter` :string : （可选项）当前事件的数值。如果设置此参数，则必须设置 attributes 参数
	 */
	onEvent(params:umengAnalytics_onEvent_Params, callback?: (ret:JSON) => void):void

	/**
	 * `账号统计：登录。友盟在统计用户时以设备为标准，如果需要统计应用自身的账号，请使用此接口`
	 * ========params==========
	 *
	 * `uid` :string : 用户账号ID，长度小于64字节
	 *
	 * `provider` :string : （可选项）账号来源。如果用户通过第三方账号登陆，可以调用此接口进行统计。支持自定义，不能以下划线"_"开头，使用大写字母和数字标识，长度小于32 字节; 如果是上市公司，建议使用股票代码。
	 */
	profileSignIn(params:umengAnalytics_profileSignIn_Params, callback?: (ret:JSON) => void):void

	/** 账号统计：退出。友盟在统计用户时以设备为标准，如果需要统计应用自身的账号，请使用此接口*/ 
	profileSignOff(callback?: (ret:JSON) => void):void

	/** 获取测试设备ID*/ 
	testDeviceID(callback?: (ret:JSON) => void):void

	/**
	 * `自定义页面统计开始。与 [onPageEnd](#a3) 或 [onPageEndSync](#a9) 成对使用，在页面打开时调用此方法，如果页面不需要统计，则无需调用此方法`
	 * ========params==========
	 *
	 * `pageName` :string : 自定义的页面名称，统计开始和结束统计的页面名称必须一致。
	 */
	onPageStartSync(params:umengAnalytics_onPageStartSync_Params):JSON;

	/**
	 * `自定义页面统计结束。与 [onPageStart](#a2) 或 [onPageStartSync](#a8) 成对使用，单独使用无效，在页面关闭前调用`
	 * ========params==========
	 *
	 * `pageName` :string : 自定义的页面名称，统计开始和结束统计的页面名称必须一致。
	 */
	onPageEndSync(params:umengAnalytics_onPageEndSync_Params):JSON;

}
interface umengAnalytics_onPageStart_Params {
	/**自定义的页面名称，统计开始和结束统计的页面名称必须一致。*/ 
	pageName:string,

}

interface umengAnalytics_onPageEnd_Params {
	/**自定义的页面名称，统计开始和结束统计的页面名称必须一致。*/ 
	pageName:string,

}

interface umengAnalytics_onEvent_Params {
	/**自定义事件id*/ 
	eventId:string,

	/**（可选项）事件的属性和取值（Key-Value键值对）*/ 
	attributes?:JSON,

	/**（可选项）当前事件的数值。如果设置此参数，则必须设置 attributes 参数*/ 
	counter?:string,

}

interface umengAnalytics_profileSignIn_Params {
	/**用户账号ID，长度小于64字节*/ 
	uid:string,

	/**（可选项）账号来源。如果用户通过第三方账号登陆，可以调用此接口进行统计。支持自定义，不能以下划线"_"开头，使用大写字母和数字标识，长度小于32 字节; 如果是上市公司，建议使用股票代码。*/ 
	provider?:string,

}

interface umengAnalytics_onPageStartSync_Params {
	/**自定义的页面名称，统计开始和结束统计的页面名称必须一致。*/ 
	pageName:string,

}

interface umengAnalytics_onPageEndSync_Params {
	/**自定义的页面名称，统计开始和结束统计的页面名称必须一致。*/ 
	pageName:string,

}

interface baiduPanorama {
	/**
	 * `打开全景`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:baiduPanorama_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置全景图经纬度坐标，根据经纬度坐标展示附近的全景图`
	 * ========params==========
	 *
	 * `lon` :number : 经度
	 *
	 * `lat` :number : 纬度
	 */
	setPosition(params:baiduPanorama_setPosition_Params):void

	/**
	 * `设置全景图Id，根据全景图Id展示附近的全景图`
	 * ========params==========
	 *
	 * `pid` :string : 全景图ID
	 */
	setPID(params:baiduPanorama_setPID_Params):void

	/**
	 * `设置墨卡托坐标，根据地理坐标展示附近的全景图，**本接口在 iOS 平台无效**`
	 * ========params==========
	 *
	 * `x` :number : 百度墨卡托投影坐标x
	 *
	 * `y` :number : 百度墨卡托投影坐标y
	 */
	setMercator(params:baiduPanorama_setMercator_Params):void

	/**
	 * `设置地图POI Id，根据地图POI Id展示附近的全景图`
	 * ========params==========
	 *
	 * `uid` :string : 地图POI Id
	 *
	 * `panoType` :string : 全景图类型
	 */
	setPOIID(params:baiduPanorama_setPOIID_Params):void

	/**
	 * `设置全景图的俯仰角`
	 * ========params==========
	 *
	 * `pitch` :number : 俯仰角
	 */
	setPanoramaPitch(params:baiduPanorama_setPanoramaPitch_Params):void

	/**
	 * `设置全景图的偏航角`
	 * ========params==========
	 *
	 * `heading` :number : 全景图的偏航角
	 */
	setPanoramaHeading(params:baiduPanorama_setPanoramaHeading_Params):void

	/**
	 * `设置全景图的缩放级别`
	 * ========params==========
	 *
	 * `level` :number : 全景图的缩放级别
	 */
	setPanoramaLevel(params:baiduPanorama_setPanoramaLevel_Params):void

	/**
	 * `设置是否显示邻接街景箭头（有邻接全景的时候）`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否显示邻接街景箭头
	 */
	setShowTopoLink(params:baiduPanorama_setShowTopoLink_Params):void

	/**
	 * `设置全景图片的显示级别`
	 * ========params==========
	 *
	 * `level` :string : 全景图片的显示级别
	 */
	setPanoramaImageLevel(params:baiduPanorama_setPanoramaImageLevel_Params):void

	/**
	 * `设置箭头的纹理`
	 * ========params==========
	 *
	 * `path` :string : 箭头图片地址，要求本地路径（widget://、fs://）
	 */
	setArrowTextureByBitmap(params:baiduPanorama_setArrowTextureByBitmap_Params):void

	/** 获取当前全景图的俯仰角*/ 
	getPanoramaPitch(callback?: (ret:JSON) => void):void

	/** 获取当前全景图的偏航角*/ 
	getPanoramaHeading(callback?: (ret:JSON) => void):void

	/** 获取当前全景图获取缩放级别*/ 
	getPanoramaLevel(callback?: (ret:JSON) => void):void

	/**
	 * `在地图上添加图片标注`
	 * ========params==========
	 *
	 * `id` :string : 标注id
	 *
	 * `lon` :number : 经度
	 *
	 * `lat` :number : 纬度
	 *
	 * `img` :string : 标注图标地址，要求本地路径（fs://、widget://）
	 *
	 * `height` :number : （可选项）所添加的标注高度，单位为 m
	 *
	 * `size` :JSON : （可选项）所添加的标注的大小，**本参数暂仅支持 iOS 平台**
	 */
	addImgMarker(params:baiduPanorama_addImgMarker_Params, callback?: (ret:JSON) => void):void

	/**
	 * `在地图上添加文字标注`
	 * ========params==========
	 *
	 * `id` :string : 标注 id
	 *
	 * `lon` :number : 经度
	 *
	 * `lat` :number : 纬度
	 *
	 * `text` :string : 文字标注信息
	 *
	 * `height` :number : （可选项）所添加的标注高度
	 *
	 * `fontColor` :string : （可选项）所添加的标注文字颜色，支持rgb、rgba、#；
	 *
	 * `bgColor` :string : （可选项）所添加的标注文字背景颜色，支持rgb、rgba、#；
	 *
	 * `fontSize` :number : （可选项）所添加的标注文字大小
	 *
	 * `padding` :JSON : （可选项）文字的 padding 值
	 */
	addTextMarker(params:baiduPanorama_addTextMarker_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除指定 id 的标注`
	 * ========params==========
	 *
	 * `ids` :Array : 要移除的标注id（数字），如果数组为空，则移除所有标注
	 */
	removeMarkers(params:baiduPanorama_removeMarkers_Params):void

	/**
	 * `全景图开始加载的监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动全景图开始加载监听
	 */
	loadPanoramBeginListener(params:baiduPanorama_loadPanoramBeginListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `全景图描述信息加载完成的监听，**iOS 平台不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动全景图加载完成监听
	 */
	descriptionLoadEndListener(params:baiduPanorama_descriptionLoadEndListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `全景操作的回调监听（旋转、点击等），**iOS 平台不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动全景操作的回调监听
	 */
	messageListener(params:baiduPanorama_messageListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `全景图加载完成的监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动全景图加载完成的监听
	 */
	loadPanoramaEndListener(params:baiduPanorama_loadPanoramaEndListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `全景加载异常的监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动全景加载异常监听
	 */
	loadPanoramaErrorListener(params:baiduPanorama_loadPanoramaErrorListener_Params, callback?: (ret:JSON) => void):void

}
interface baiduPanorama_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface baiduPanorama_setPosition_Params {
	/**经度*/ 
	lon:number,

	/**纬度*/ 
	lat:number,

}

interface baiduPanorama_setPID_Params {
	/**全景图ID*/ 
	pid:string,

}

interface baiduPanorama_setMercator_Params {
	/**百度墨卡托投影坐标x*/ 
	x:number,

	/**百度墨卡托投影坐标y*/ 
	y:number,

}

interface baiduPanorama_setPOIID_Params {
	/**地图POI Id*/ 
	uid:string,

	/**全景图类型*/ 
	panoType:string,

}

interface baiduPanorama_setPanoramaPitch_Params {
	/**俯仰角*/ 
	pitch:number,

}

interface baiduPanorama_setPanoramaHeading_Params {
	/**全景图的偏航角*/ 
	heading:number,

}

interface baiduPanorama_setPanoramaLevel_Params {
	/**全景图的缩放级别*/ 
	level:number,

}

interface baiduPanorama_setShowTopoLink_Params {
	/**是否显示邻接街景箭头*/ 
	enable:boolean,

}

interface baiduPanorama_setPanoramaImageLevel_Params {
	/**全景图片的显示级别*/ 
	level:string,

}

interface baiduPanorama_setArrowTextureByBitmap_Params {
	/**箭头图片地址，要求本地路径（widget://、fs://）*/ 
	path:string,

}

interface baiduPanorama_addImgMarker_Params {
	/**标注id*/ 
	id:string,

	/**经度*/ 
	lon:number,

	/**纬度*/ 
	lat:number,

	/**标注图标地址，要求本地路径（fs://、widget://）*/ 
	img:string,

	/**（可选项）所添加的标注高度，单位为 m*/ 
	height?:number,

	/**（可选项）所添加的标注的大小，**本参数暂仅支持 iOS 平台***/ 
	size?:JSON,

}

interface baiduPanorama_addTextMarker_Params {
	/**标注 id*/ 
	id:string,

	/**经度*/ 
	lon:number,

	/**纬度*/ 
	lat:number,

	/**文字标注信息*/ 
	text:string,

	/**（可选项）所添加的标注高度*/ 
	height?:number,

	/**（可选项）所添加的标注文字颜色，支持rgb、rgba、#；*/ 
	fontColor?:string,

	/**（可选项）所添加的标注文字背景颜色，支持rgb、rgba、#；*/ 
	bgColor?:string,

	/**（可选项）所添加的标注文字大小*/ 
	fontSize?:number,

	/**（可选项）文字的 padding 值*/ 
	padding?:JSON,

}

interface baiduPanorama_removeMarkers_Params {
	/**要移除的标注id（数字），如果数组为空，则移除所有标注*/ 
	ids:Array,

}

interface baiduPanorama_loadPanoramBeginListener_Params {
	/**（可选项）是否启动全景图开始加载监听*/ 
	enable?:boolean,

}

interface baiduPanorama_descriptionLoadEndListener_Params {
	/**（可选项）是否启动全景图加载完成监听*/ 
	enable?:boolean,

}

interface baiduPanorama_messageListener_Params {
	/**（可选项）是否启动全景操作的回调监听*/ 
	enable?:boolean,

}

interface baiduPanorama_loadPanoramaEndListener_Params {
	/**（可选项）是否启动全景图加载完成的监听*/ 
	enable?:boolean,

}

interface baiduPanorama_loadPanoramaErrorListener_Params {
	/**（可选项）是否启动全景加载异常监听*/ 
	enable?:boolean,

}

interface qupai {
}
interface yjyzVerifyPlus {
}
interface easeChat {
	/**
	 * `注册模式分两种，开放注册和授权注册。`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `password` :string : 密码
	 */
	easeRegister(params:easeChat_easeRegister_Params, callback?: (ret:JSON) => void):void

	/**
	 * `登录接口`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `password` :string : 密码
	 *
	 * `autoLogin` :boolean : 是否开启自动登录（仅支持ios）
	 */
	login(params:easeChat_login_Params, callback?: (ret:JSON) => void):void

	/** 是否设置了自动登录（仅支持ios）*/ 
	isAutoLogin():void

	/** 退出登录*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 连接服务器的状态变化事件的监听*/ 
	addConnectionListener():void

	/** 自动登录完成时的回调事件监听（仅支持ios）*/ 
	addAutoLoginListener(callback?: (ret:JSON) => void):void

	/** 账号异常事件的监听*/ 
	addAccountListener():void

	/**
	 * `注册华为推送，上传token`
	 * ========params==========
	 *
	 * `token` :string : 华为token
	 *
	 * `appid` :string : 华为appid
	 */
	sendHMSPushTokenToServer(params:easeChat_sendHMSPushTokenToServer_Params):void

	/**
	 * `创建群组`
	 * ========params==========
	 *
	 * `name` :string : 群组名
	 *
	 * `description` :string : 群组描述
	 *
	 * `message` :string : 邀请消息
	 *
	 * `userCount` :number : （可选项）群组容纳的人数，群组的最大成员数(3 - 2000)
	 *
	 * `invitees` :Array : 群组成员（不包括创建者自己）
	 *
	 * `style` :string : 群组类型
	 *
	 * `IsInviteNeedConfirm` :boolean : （可选项）邀请群成员时，是否需要发送邀请通知.若false，被邀请的人自动加入群组
	 */
	createGroup(params:easeChat_createGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解散群组 ，需要owner/admin权限`
	 * ========params==========
	 *
	 * `id` :string : 群组 id
	 */
	destroyGroup(params:easeChat_destroyGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取制定 id 的群组信息`
	 * ========params==========
	 *
	 * `id` :string : 群组 id
	 */
	getGroupInfo(params:easeChat_getGroupInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加好友`
	 * ========params==========
	 *
	 * `name` :string : 要添加的用户
	 *
	 * `message` :string : 邀请消息
	 *
	 * `name` :string : 要添加的用户
	 *
	 * `message` :string : 邀请消息
	 */
	addContact(params:easeChat_addContact_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加好友`
	 * ========params==========
	 *
	 * `name` :string : 要添加的用户
	 *
	 * `message` :string : 邀请消息
	 *
	 * `name` :string : 要添加的用户
	 *
	 * `message` :string : 邀请消息
	 */
	addContact(params:easeChat_addContact_Params, callback?: (ret:JSON) => void):void

	/** 添加好友状态监听*/ 
	addContactListener():void

	/**
	 * `设置是否自动同意好友申请`
	 * ========params==========
	 *
	 * `isAutoAcceptFriendInvitation` :boolean : 是否自动同意好友申请
	 */
	setAutoAcceptFriendInvitation(params:easeChat_setAutoAcceptFriendInvitation_Params):void

	/**
	 * `同意加好友的申请`
	 * ========params==========
	 *
	 * `name` :string : 申请者
	 */
	approveFriendRequest(params:easeChat_approveFriendRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝加好友的申请`
	 * ========params==========
	 *
	 * `name` :string : 申请者
	 */
	declineFriendRequest(params:easeChat_declineFriendRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除好友`
	 * ========params==========
	 *
	 * `name` :string : 要删除的好友
	 *
	 * `isDeleteConversation` :boolean : （可选项）是否删除会话（仅ios有效）
	 */
	deleteContact(params:easeChat_deleteContact_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取好友列表`
	 * ========params==========
	 *
	 * `original` :string : （可选项）数据源（仅ios有效）
	 */
	getContacts(params:easeChat_getContacts_Params, callback?: (ret:JSON) => void):void

	/**
	 * `邀请单人或多人进入群组, (注：android如果是群主加人可以调用此接口)`
	 * ========params==========
	 *
	 * `names` :Array : 要邀请的用户名列表
	 *
	 * `groupId` :string : 群组id
	 *
	 * `message` :string : （可选项）欢迎信息（仅支持ios）
	 */
	addMembersToGroup(params:easeChat_addMembersToGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `私有群里，如果开放了群成员邀请，群成员邀请调用该接口邀请成员`
	 * ========params==========
	 *
	 * `names` :Array : 要邀请的用户名列表
	 *
	 * `groupId` :string : 群组id
	 *
	 * `message` :string : （可选项）欢迎信息
	 */
	inviteUser(params:easeChat_inviteUser_Params, callback?: (ret:JSON) => void):void

	/**
	 * `把单人或多人移出群组`
	 * ========params==========
	 *
	 * `names` :Array : 要移除的用户名列表(注：android不支持一次删除多个人，即如果数组的长度大于1，只会删除第一个)
	 *
	 * `groupId` :string : 群组id
	 */
	removeMembersFromGroup(params:easeChat_removeMembersFromGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群组群名称`
	 * ========params==========
	 *
	 * `groupName` :string : 要修改的名称
	 *
	 * `groupId` :string : 群组id
	 */
	changeGroupSubject(params:easeChat_changeGroupSubject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户主动退出群组`
	 * ========params==========
	 *
	 * `groupId` :string : 群组id
	 */
	leaveGroup(params:easeChat_leaveGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入一个公开群组`
	 * ========params==========
	 *
	 * `groupId` :string : 群组id
	 */
	joinPublicGroup(params:easeChat_joinPublicGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `申请加入一个需批准的公开群组`
	 * ========params==========
	 *
	 * `groupId` :string : 群组id
	 *
	 * `aMessage` :string : (可选项)请求加入的信息
	 */
	requestToJoinPublicGroup(params:easeChat_requestToJoinPublicGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `批准入群申请`
	 * ========params==========
	 *
	 * `groupId` :string : 所申请的群组ID
	 *
	 * `username` :string : 申请人
	 */
	approveJoinGroupRequest(params:easeChat_approveJoinGroupRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝入群申请`
	 * ========params==========
	 *
	 * `groupId` :string : 被拒绝的群组ID
	 *
	 * `username` :string : 申请人
	 *
	 * `reason` :string : 拒绝理由
	 */
	declineJoinGroupRequest(params:easeChat_declineJoinGroupRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `接受入群邀请`
	 * ========params==========
	 *
	 * `groupId` :string : 接受的群组ID
	 *
	 * `username` :string : 邀请者
	 */
	acceptInvitationFromGroup(params:easeChat_acceptInvitationFromGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝入群邀请`
	 * ========params==========
	 *
	 * `groupId` :string : 被拒绝的群组ID
	 *
	 * `username` :string : 邀请人
	 *
	 * `reason` :string : 拒绝理由
	 */
	declineGroupInvitation(params:easeChat_declineGroupInvitation_Params, callback?: (ret:JSON) => void):void

	/** 群组状态监听*/ 
	addGroupListener():void

	/**
	 * `设置用户是否自动同意群邀请`
	 * ========params==========
	 *
	 * `isAutoAcceptGroupInvitation` :boolean : 用户是否自动同意群邀请
	 */
	setAutoAcceptGroupInvitation(params:easeChat_setAutoAcceptGroupInvitation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `按数目从服务器获取自己加入的群组`
	 * ========params==========
	 *
	 * `pageNum` :number : （可选项）获取自己加入群的cursor
	 *
	 * `pageSize` :number : （可选项）期望返回结果的数量, 如果 < 0 则一次返回所有结果
	 */
	getGroupsListFromServer(params:easeChat_getGroupsListFromServer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取公开群组`
	 * ========params==========
	 *
	 * `pageNum` :number : （可选项）获取自己加入群的cursor
	 *
	 * `pageSize` :number : （可选项）期望返回结果的数量, 如果 < 0 则一次返回所有结果
	 */
	getAllPublicGroups(params:easeChat_getAllPublicGroups_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将一组成员禁言，需要Owner / Admin权限`
	 * ========params==========
	 *
	 * `muteMembers` :Array : 要禁言的成员列表
	 *
	 * `muteMilliseconds` :number : 禁言时长，单位秒(android注意：目前muteMilliseconds参数不起作用，暂时只支持永久禁言和解除禁言两种操作, muteMilliseconds建议输入12*30*24*60*60)
	 *
	 * `groupId` :any : 群组ID
	 */
	muteMembers(params:easeChat_muteMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解除禁言，需要Owner / Admin权限`
	 * ========params==========
	 *
	 * `muteMembers` :Array : 要解除禁言的成员列表
	 *
	 * `groupId` :any : 群组ID
	 */
	unmuteMembers(params:easeChat_unmuteMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `新建/获取一个会话，android平台不支持创建`
	 * ========params==========
	 *
	 * `conversationId` :string : （可选项）会话类型
	 *
	 * `ifCreate` :boolean : （可选项） 如果会话不存在是否创建会话
	 */
	getConversation(params:easeChat_getConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除会话`
	 * ========params==========
	 *
	 * `conversationId` :string : 要删除的会话的id
	 *
	 * `isDeleteMessages` :boolean : （可选项） 是否删除会话中的消息
	 */
	deleteConversation(params:easeChat_deleteConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除一组会话`
	 * ========params==========
	 *
	 * `conversationIds` :Array : 要删除的会话的id 组成的数组
	 *
	 * `isDeleteMessages` :boolean : （可选项） 是否删除会话中的消息
	 */
	deleteConversations(params:easeChat_deleteConversations_Params, callback?: (ret:JSON) => void):void

	/** 获取所有会话，如果内存中不存在会从DB中加载*/ 
	getAllConversations(callback?: (ret:JSON) => void):void

	/**
	 * `根据会话id 及其类型，获取指定消息 ID 的消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要获取信息的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `messageId` :string : 指定的消息的 ID
	 */
	loadMessageWithId(params:easeChat_loadMessageWithId_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据会话id 及其类型，获取收到的对方发送的最后一条消息（仅支持ios）`
	 * ========params==========
	 *
	 * `conversationId` :string : 要获取信息的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 */
	lastReceivedMessage(params:easeChat_lastReceivedMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将会话指定消息置为已读`
	 * ========params==========
	 *
	 * `conversationId` :string : 要设置的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `messageId` :string : 要设置为已读的信息的 id
	 */
	markMessageAsRead(params:easeChat_markMessageAsRead_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将会话所有消息置为已读`
	 * ========params==========
	 *
	 * `conversationId` :string : 要设置的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 */
	markAllMessagesAsRead(params:easeChat_markAllMessagesAsRead_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文本消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `text` :string : 发送的消息
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendText(params:easeChat_sendText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的图片的路径，要求本地路径（fs://、widget://）
	 *
	 * `displayName` :string : 附件显示名（不包含路径）（仅支持ios）
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendImage(params:easeChat_sendImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `address` :string : 要发送的地址
	 *
	 * `latitude` :number : 纬度
	 *
	 * `longitude` :number : 经度
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendLocation(params:easeChat_sendLocation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送声音消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的音频的路径，要求本地路径（fs://、widget://）
	 *
	 * `displayName` :string : 附件显示名（不包含路径）
	 *
	 * `length` :number : 录音时间(秒)
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendVoice(params:easeChat_sendVoice_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送视频消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的视频的路径，要求本地路径（fs://、widget://）
	 *
	 * `displayName` :string : 附件显示名（不包含路径）
	 *
	 * `length` :number : 视频时间长度(秒)
	 *
	 * `thumbPath` :string : 视频预览图路径，要求本地路径（fs://、widget://）
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendVideo(params:easeChat_sendVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文件消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的文件的路径，要求本地路径（fs://、widget://）
	 *
	 * `displayName` :string : 附件显示名（不包含路径）
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendFile(params:easeChat_sendFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送命令消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `action` :string : 要发送的命令
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendCmd(params:easeChat_sendCmd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载缩略图（图片消息的缩略图或视频消息的第一帧图片），`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `messageId` :string : 要下载的信息的 id
	 */
	downloadMessageThumbnail(params:easeChat_downloadMessageThumbnail_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载消息附件（语音，视频，图片原图，文件），`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）发送消息的会话类型
	 *
	 * `messageId` :string : 要下载的信息的 id
	 */
	downloadMessageAttachments(params:easeChat_downloadMessageAttachments_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送消息已读回执`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送回执消息的会话的 id
	 *
	 * `chatType` :string : （可选项）发送回执消息的会话类型
	 *
	 * `messageId` :string : 要发送回执的信息的 id
	 */
	sendMessageReadAck(params:easeChat_sendMessageReadAck_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加消息相关事件监听`
	 * ========params==========
	 *
	 * `name` :string : 要监听的消息相关事件名称
	 */
	addMessageListener(params:easeChat_addMessageListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除消息相关事件监听`
	 * ========params==========
	 *
	 * `name` :string : 要移除的消息相关事件名称
	 */
	removeMessageListener(params:easeChat_removeMessageListener_Params):void

	/**
	 * `从数据库中获取消息，获取到的消息是startMsgId之前的pagesize条消息；`
	 * ========params==========
	 *
	 * `conversationId` :string : （必选项）要获取其消息的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `startMsgId` :string : (可选项）消息id，如果不写此项，从数据库中读取最新的记录
	 *
	 * `pagesize` :number : (可选项) 获取startMsgId之前的消息数
	 */
	loadMessageFromDB(params:easeChat_loadMessageFromDB_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置会话的扩展字段，该字段只保存在本地，不进行网络同步`
	 * ========params==========
	 *
	 * `conversationId` :string : （必选项）会话的id
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `ext` :JSON : 会话的扩展字段，以json格式设定，key为扩展名，value为扩展值
	 *
	 * `ret` :JSON : null
	 */
	setConversationExt(params:easeChat_setConversationExt_Params):void

	/**
	 * `撤回一条消息（此接口必须开通增值服务）`
	 * ========params==========
	 *
	 * `conversationId` :string : 要设置的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `messageId` :string : 要撤回消息的 id
	 */
	recallMessage(params:easeChat_recallMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入聊天室`
	 * ========params==========
	 *
	 * `conversationId` :string : 聊天室id
	 */
	joinChatroom(params:easeChat_joinChatroom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `离开聊天室`
	 * ========params==========
	 *
	 * `conversationId` :string : 聊天室id
	 */
	leaveChatroom(params:easeChat_leaveChatroom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解散聊天室（需要owner权限）`
	 * ========params==========
	 *
	 * `conversationId` :string : 聊天室id
	 */
	destroyChatroom(params:easeChat_destroyChatroom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `1v1音视频通话设置`
	 * ========params==========
	 *
	 * `isSendPushIfOffline` :boolean : （可选项）被叫方不在线时，是否推送来电通知，如果设置为false，不推送通知，返回EMErrorCallRemoteOffline
	 *
	 * `offlineMessageText` :string : （可选项）当isSendPushIfOffline=true时起作用,离线推送显示的内容（仅ios支持）
	 *
	 * `videoResolution` :number : （可选项）视频分辨率
	 *
	 * `maxVideoKbps` :number : （可选项）最大视频码率，范围 50 < videoKbps < 5000, 默认0, 0为自适应，建议设置为0
	 *
	 * `minVideoKbps` :number : （可选项）最小视频码率
	 *
	 * `maxVideoFrameRate` :number : （可选项）最大视频帧率
	 *
	 * `maxAudioKbps` :number : （可选项）最大音频码率，范围 6 < AudioKbps < 510，默认32，建议设置为32
	 */
	setCallOptions(params:easeChat_setCallOptions_Params):void

	/**
	 * `发起1v1音视频通话`
	 * ========params==========
	 *
	 * `conversationId` :string : 被呼叫的用户ID
	 *
	 * `type` :string : （可选项）通话类型
	 *
	 * `isRecord` :boolean : （可选项）是否开启服务端录制
	 *
	 * `isMerge` :boolean : （可选项）录制时是否合并数据流
	 *
	 * `ext` :string : （可选项）通话扩展信息，会传给被呼叫方
	 */
	startCall(params:easeChat_startCall_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置1v1视频通话自己视频区域（音频通话掉用此接口无效）（仅ios有效）`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `scaleMode` :number : （可选项）设视频显示模式
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、#
	 *
	 * `fixedOn` :string : （可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）视频是否随所属 window 或 frame 滚动
	 */
	setLocalVideoView(params:easeChat_setLocalVideoView_Params):void

	/**
	 * `设置1v1视频通话对方视频区域（音频通话掉用此接口无效）（仅ios有效）`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `scaleMode` :number : （可选项）设视频显示模式
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、#
	 *
	 * `fixedOn` :string : （可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）视频是否随所属 window 或 frame 滚动
	 */
	setRemoteVideoView(params:easeChat_setRemoteVideoView_Params):void

	/**
	 * `设置1v1视频通话视频区域（音频通话掉用此接口无效）（仅Android有效）`
	 * ========params==========
	 *
	 * `local` :JSON : 本地视频参数
	 *
	 * `remote` :JSON : 远程视频参数
	 *
	 * `localTop` :boolean : （可选项）是否本地视频在远程视频上方显示
	 */
	setVideoView(params:easeChat_setVideoView_Params):void

	/** 移除1v1视频通话自己视频区域（音频通话掉用此接口无效）*/ 
	removeLocalVideoView():void

	/** 移除1v1视频通话对方视频区域（音频通话掉用此接口无效）*/ 
	removeRemoteVideoView():void

	/** 接听1v1音视频通话*/ 
	answerIncomingCall(callback?: (ret:JSON) => void):void

	/**
	 * `结束1v1音视频通话`
	 * ========params==========
	 *
	 * `reason` :number : （可选项）结束原因
	 */
	endCall(params:easeChat_endCall_Params, callback?: (ret:JSON) => void):void

	/**
	 * `1v1音视频通话切换摄像头，Android不可指定摄像头`
	 * ========params==========
	 *
	 * `position` :boolean : （可选项）是否使用前置摄像头, true使用前置, false使用后置（仅ios有效）
	 */
	switchCameraPosition(params:easeChat_switchCameraPosition_Params):void

	/** 暂停1v1语音数据传输*/ 
	pauseVoice():void

	/** 恢复1v1语音数据传输*/ 
	resumeVoice():void

	/** 暂停1v1视频图像数据传输*/ 
	pauseVideo():void

	/** 恢复1v1视频图像数据传输*/ 
	resumeVideo():void

	/**
	 * `设置扬声器状态`
	 * ========params==========
	 *
	 * `speakerEnabled` :boolean : （可选项）是否开启扬声器
	 */
	setSpeakerEnabled(params:easeChat_setSpeakerEnabled_Params):void

	/**
	 * `添加1v1音视频监听`
	 * ========params==========
	 *
	 * `target` :string : （可选项）要监听的事件
	 */
	addCallListener(params:easeChat_addCallListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除1v1音视频监听`
	 * ========params==========
	 *
	 * `target` :string : （可选项）消息推送的免打扰设置
	 */
	removeCallListener(params:easeChat_removeCallListener_Params):void

	/**
	 * `创建并加入会议`
	 * ========params==========
	 *
	 * `type` :number : （可选项）会议类型
	 *
	 * `password` :string : （可选项）会议密码
	 *
	 * `isRecord` :boolean : （可选项）是否开启服务端录制
	 *
	 * `isMerge` :boolean : （可选项）录制时是否合并数据流
	 */
	starConferenceCall(params:easeChat_starConferenceCall_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入已有会议`
	 * ========params==========
	 *
	 * `password` :string : （可选项）会议密码
	 *
	 * `confId` :string : 会议ID
	 */
	joinConference(params:easeChat_joinConference_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发布音视频流`
	 * ========params==========
	 *
	 * `streamName` :string : 数据流名称
	 *
	 * `enableVideo` :boolean : （可选项）视频是否可用
	 *
	 * `isMute` :boolean : （可选项）是否静音
	 *
	 * `ext` :string : （可选项）扩展信息
	 *
	 * `isBackCamera` :boolean : （可选项）是否使用后置摄像头
	 *
	 * `maxVideoKbps` :boolean : （可选项）最大视频码率，范围 50 < videoKbps < 5000, 默认0, 0为自适应
	 *
	 * `minVideoKbps` :boolean : （可选项）最小视频码率, 默认0
	 *
	 * `maxAudioKbps` :boolean : （可选项）最大音频码率，范围 6 < AudioKbps < 510, 默认32
	 *
	 * `videoResolution` :JSON : （可选项）视频的位置及尺寸（仅ios支持）
	 *
	 * `scaleMode` :number : （可选项）设视频显示模式（仅ios支持）
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、# （仅ios支持）
	 *
	 * `fixedOn` :string : （可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）（仅ios支持）
	 *
	 * `fixed` :boolean : （可选项）视频是否随所属 window 或 frame 滚动（仅ios支持）
	 */
	publishConference(params:easeChat_publishConference_Params, callback?: (ret:JSON) => void):void

	/**
	 * `订阅流`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `streamId` :string : 数据流ID
	 *
	 * `scaleMode` :number : （可选项）设视频显示模式
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、# （仅ios支持）
	 *
	 * `fixedOn` :string : （可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）视频是否随所属 window 或 frame 滚动
	 */
	subscribeConference(params:easeChat_subscribeConference_Params, callback?: (ret:JSON) => void):void

	/** 离开会议*/ 
	leaveConference(callback?: (ret:JSON) => void):void

	/** 销毁会议*/ 
	destroyConference(callback?: (ret:JSON) => void):void

	/**
	 * `取消订阅流`
	 * ========params==========
	 *
	 * `streamId` :string : 数据流ID
	 */
	unsubscribeConference(params:easeChat_unsubscribeConference_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消发布流`
	 * ========params==========
	 *
	 * `streamId` :string : 数据流ID
	 */
	unpublishConference(params:easeChat_unpublishConference_Params, callback?: (ret:JSON) => void):void

	/** 会议切换摄像头*/ 
	updateConferenceWithSwitchCamera():void

	/**
	 * `会议设置是否静音`
	 * ========params==========
	 *
	 * `isMute` :boolean : 是否静音
	 */
	updateConferenceWithVolume(params:easeChat_updateConferenceWithVolume_Params):void

	/**
	 * `会议设置视频是否可用`
	 * ========params==========
	 *
	 * `enableVideo` :boolean : 视频是否可用
	 */
	updateConferenceWithVideo(params:easeChat_updateConferenceWithVideo_Params):void

	/** 会议更新视频最大码率*/ 
	updateConferenceMaxVideoKbps():void

	/** 添加会议监听*/ 
	addConferenceListener():void

	/** 移除会议监听*/ 
	removeConferenceListener():void

	/**
	 * `设置推送全局属性`
	 * ========params==========
	 *
	 * `displayName` :string : （可选项）推送消息显示的昵称，不传则不设置
	 *
	 * `displayStyle` :string : （可选项）推送消息显示的类型
	 *
	 * `noDisturbStatus` :string : （可选项）消息推送的免打扰设置
	 *
	 * `noDisturbingStartH` :number : （可选项）消息推送免打扰开始时间，小时，暂时只支持整点（小时），不传则不设置
	 *
	 * `noDisturbingEndH` :number : （可选项）消息推送免打扰结束时间，小时，暂时只支持整点（小时），不传则不设置
	 */
	setPushOption(params:easeChat_setPushOption_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置推送昵称`
	 * ========params==========
	 *
	 * `nickname` :string : 推送消息显示的昵称
	 */
	setApnsNickname(params:easeChat_setApnsNickname_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置群组忽略推送`
	 * ========params==========
	 *
	 * `groupId` :string : 群组id
	 */
	ignoreGroupPush(params:easeChat_ignoreGroupPush_Params, callback?: (ret:JSON) => void):void

	/**
	 * `批量设置忽略推送的群组`
	 * ========params==========
	 *
	 * `groupIds` :Array : 群组id组成的数组
	 */
	ignoreGroupsPush(params:easeChat_ignoreGroupsPush_Params, callback?: (ret:JSON) => void):void

	/** 获取忽略推送消息的群组id*/ 
	getAllIgnoredGroupIds():void

}
interface easeChat_easeRegister_Params {
	/**用户名*/ 
	username:string,

	/**密码*/ 
	password:string,

}

interface easeChat_login_Params {
	/**用户名*/ 
	username:string,

	/**密码*/ 
	password:string,

	/**是否开启自动登录（仅支持ios）*/ 
	autoLogin:boolean,

}

interface easeChat_sendHMSPushTokenToServer_Params {
	/**华为token*/ 
	token:string,

	/**华为appid*/ 
	appid:string,

}

interface easeChat_createGroup_Params {
	/**群组名*/ 
	name:string,

	/**群组描述*/ 
	description:string,

	/**邀请消息*/ 
	message:string,

	/**（可选项）群组容纳的人数，群组的最大成员数(3 - 2000)*/ 
	userCount?:number,

	/**群组成员（不包括创建者自己）*/ 
	invitees:Array,

	/**群组类型*/ 
	style:string,

	/**（可选项）邀请群成员时，是否需要发送邀请通知.若false，被邀请的人自动加入群组*/ 
	IsInviteNeedConfirm?:boolean,

}

interface easeChat_destroyGroup_Params {
	/**群组 id*/ 
	id:string,

}

interface easeChat_getGroupInfo_Params {
	/**群组 id*/ 
	id:string,

}

interface easeChat_addContact_Params {
	/**要添加的用户*/ 
	name:string,

	/**邀请消息*/ 
	message:string,

	/**要添加的用户*/ 
	name:string,

	/**邀请消息*/ 
	message:string,

}

interface easeChat_addContact_Params {
	/**要添加的用户*/ 
	name:string,

	/**邀请消息*/ 
	message:string,

	/**要添加的用户*/ 
	name:string,

	/**邀请消息*/ 
	message:string,

}

interface easeChat_setAutoAcceptFriendInvitation_Params {
	/**是否自动同意好友申请*/ 
	isAutoAcceptFriendInvitation:boolean,

}

interface easeChat_approveFriendRequest_Params {
	/**申请者*/ 
	name:string,

}

interface easeChat_declineFriendRequest_Params {
	/**申请者*/ 
	name:string,

}

interface easeChat_deleteContact_Params {
	/**要删除的好友*/ 
	name:string,

	/**（可选项）是否删除会话（仅ios有效）*/ 
	isDeleteConversation?:boolean,

}

interface easeChat_getContacts_Params {
	/**（可选项）数据源（仅ios有效）*/ 
	original?:string,

}

interface easeChat_addMembersToGroup_Params {
	/**要邀请的用户名列表*/ 
	names:Array,

	/**群组id*/ 
	groupId:string,

	/**（可选项）欢迎信息（仅支持ios）*/ 
	message?:string,

}

interface easeChat_inviteUser_Params {
	/**要邀请的用户名列表*/ 
	names:Array,

	/**群组id*/ 
	groupId:string,

	/**（可选项）欢迎信息*/ 
	message?:string,

}

interface easeChat_removeMembersFromGroup_Params {
	/**要移除的用户名列表(注：android不支持一次删除多个人，即如果数组的长度大于1，只会删除第一个)*/ 
	names:Array,

	/**群组id*/ 
	groupId:string,

}

interface easeChat_changeGroupSubject_Params {
	/**要修改的名称*/ 
	groupName:string,

	/**群组id*/ 
	groupId:string,

}

interface easeChat_leaveGroup_Params {
	/**群组id*/ 
	groupId:string,

}

interface easeChat_joinPublicGroup_Params {
	/**群组id*/ 
	groupId:string,

}

interface easeChat_requestToJoinPublicGroup_Params {
	/**群组id*/ 
	groupId:string,

	/**(可选项)请求加入的信息*/ 
	aMessage?:string,

}

interface easeChat_approveJoinGroupRequest_Params {
	/**所申请的群组ID*/ 
	groupId:string,

	/**申请人*/ 
	username:string,

}

interface easeChat_declineJoinGroupRequest_Params {
	/**被拒绝的群组ID*/ 
	groupId:string,

	/**申请人*/ 
	username:string,

	/**拒绝理由*/ 
	reason:string,

}

interface easeChat_acceptInvitationFromGroup_Params {
	/**接受的群组ID*/ 
	groupId:string,

	/**邀请者*/ 
	username:string,

}

interface easeChat_declineGroupInvitation_Params {
	/**被拒绝的群组ID*/ 
	groupId:string,

	/**邀请人*/ 
	username:string,

	/**拒绝理由*/ 
	reason:string,

}

interface easeChat_setAutoAcceptGroupInvitation_Params {
	/**用户是否自动同意群邀请*/ 
	isAutoAcceptGroupInvitation:boolean,

}

interface easeChat_getGroupsListFromServer_Params {
	/**（可选项）获取自己加入群的cursor*/ 
	pageNum?:number,

	/**（可选项）期望返回结果的数量, 如果 < 0 则一次返回所有结果*/ 
	pageSize?:number,

}

interface easeChat_getAllPublicGroups_Params {
	/**（可选项）获取自己加入群的cursor*/ 
	pageNum?:number,

	/**（可选项）期望返回结果的数量, 如果 < 0 则一次返回所有结果*/ 
	pageSize?:number,

}

interface easeChat_muteMembers_Params {
	/**要禁言的成员列表*/ 
	muteMembers:Array,

	/**禁言时长，单位秒(android注意：目前muteMilliseconds参数不起作用，暂时只支持永久禁言和解除禁言两种操作, muteMilliseconds建议输入12*30*24*60*60)*/ 
	muteMilliseconds:number,

	/**群组ID*/ 
	groupId:any,

}

interface easeChat_unmuteMembers_Params {
	/**要解除禁言的成员列表*/ 
	muteMembers:Array,

	/**群组ID*/ 
	groupId:any,

}

interface easeChat_getConversation_Params {
	/**（可选项）会话类型*/ 
	conversationId?:string,

	/**（可选项） 如果会话不存在是否创建会话*/ 
	ifCreate?:boolean,

}

interface easeChat_deleteConversation_Params {
	/**要删除的会话的id*/ 
	conversationId:string,

	/**（可选项） 是否删除会话中的消息*/ 
	isDeleteMessages?:boolean,

}

interface easeChat_deleteConversations_Params {
	/**要删除的会话的id 组成的数组*/ 
	conversationIds:Array,

	/**（可选项） 是否删除会话中的消息*/ 
	isDeleteMessages?:boolean,

}

interface easeChat_loadMessageWithId_Params {
	/**要获取信息的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**指定的消息的 ID*/ 
	messageId:string,

}

interface easeChat_lastReceivedMessage_Params {
	/**要获取信息的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

}

interface easeChat_markMessageAsRead_Params {
	/**要设置的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**要设置为已读的信息的 id*/ 
	messageId:string,

}

interface easeChat_markAllMessagesAsRead_Params {
	/**要设置的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

}

interface easeChat_sendText_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**发送的消息*/ 
	text:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface easeChat_sendImage_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的图片的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**附件显示名（不包含路径）（仅支持ios）*/ 
	displayName:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface easeChat_sendLocation_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的地址*/ 
	address:string,

	/**纬度*/ 
	latitude:number,

	/**经度*/ 
	longitude:number,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface easeChat_sendVoice_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的音频的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**附件显示名（不包含路径）*/ 
	displayName:string,

	/**录音时间(秒)*/ 
	length:number,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface easeChat_sendVideo_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的视频的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**附件显示名（不包含路径）*/ 
	displayName:string,

	/**视频时间长度(秒)*/ 
	length:number,

	/**视频预览图路径，要求本地路径（fs://、widget://）*/ 
	thumbPath:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface easeChat_sendFile_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的文件的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**附件显示名（不包含路径）*/ 
	displayName:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface easeChat_sendCmd_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的命令*/ 
	action:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface easeChat_downloadMessageThumbnail_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要下载的信息的 id*/ 
	messageId:string,

}

interface easeChat_downloadMessageAttachments_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）发送消息的会话类型*/ 
	chatType?:string,

	/**要下载的信息的 id*/ 
	messageId:string,

}

interface easeChat_sendMessageReadAck_Params {
	/**要发送回执消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）发送回执消息的会话类型*/ 
	chatType?:string,

	/**要发送回执的信息的 id*/ 
	messageId:string,

}

interface easeChat_addMessageListener_Params {
	/**要监听的消息相关事件名称*/ 
	name:string,

}

interface easeChat_removeMessageListener_Params {
	/**要移除的消息相关事件名称*/ 
	name:string,

}

interface easeChat_loadMessageFromDB_Params {
	/**（必选项）要获取其消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**(可选项）消息id，如果不写此项，从数据库中读取最新的记录*/ 
	startMsgId?:string,

	/**(可选项) 获取startMsgId之前的消息数*/ 
	pagesize?:number,

}

interface easeChat_setConversationExt_Params {
	/**（必选项）会话的id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**会话的扩展字段，以json格式设定，key为扩展名，value为扩展值*/ 
	ext:JSON,

	/**null*/ 
	ret:JSON,

}

interface easeChat_recallMessage_Params {
	/**要设置的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**要撤回消息的 id*/ 
	messageId:string,

}

interface easeChat_joinChatroom_Params {
	/**聊天室id*/ 
	conversationId:string,

}

interface easeChat_leaveChatroom_Params {
	/**聊天室id*/ 
	conversationId:string,

}

interface easeChat_destroyChatroom_Params {
	/**聊天室id*/ 
	conversationId:string,

}

interface easeChat_setCallOptions_Params {
	/**（可选项）被叫方不在线时，是否推送来电通知，如果设置为false，不推送通知，返回EMErrorCallRemoteOffline*/ 
	isSendPushIfOffline?:boolean,

	/**（可选项）当isSendPushIfOffline=true时起作用,离线推送显示的内容（仅ios支持）*/ 
	offlineMessageText?:string,

	/**（可选项）视频分辨率*/ 
	videoResolution?:number,

	/**（可选项）最大视频码率，范围 50 < videoKbps < 5000, 默认0, 0为自适应，建议设置为0*/ 
	maxVideoKbps?:number,

	/**（可选项）最小视频码率*/ 
	minVideoKbps?:number,

	/**（可选项）最大视频帧率*/ 
	maxVideoFrameRate?:number,

	/**（可选项）最大音频码率，范围 6 < AudioKbps < 510，默认32，建议设置为32*/ 
	maxAudioKbps?:number,

}

interface easeChat_startCall_Params {
	/**被呼叫的用户ID*/ 
	conversationId:string,

	/**（可选项）通话类型*/ 
	type?:string,

	/**（可选项）是否开启服务端录制*/ 
	isRecord?:boolean,

	/**（可选项）录制时是否合并数据流*/ 
	isMerge?:boolean,

	/**（可选项）通话扩展信息，会传给被呼叫方*/ 
	ext?:string,

}

interface easeChat_setLocalVideoView_Params {
	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）设视频显示模式*/ 
	scaleMode?:number,

	/**（可选项）背景配置，支持rgb、rgba()、#*/ 
	bg?:string,

	/**（可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）视频是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface easeChat_setRemoteVideoView_Params {
	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）设视频显示模式*/ 
	scaleMode?:number,

	/**（可选项）背景配置，支持rgb、rgba()、#*/ 
	bg?:string,

	/**（可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）视频是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface easeChat_setVideoView_Params {
	/**本地视频参数*/ 
	local:JSON,

	/**远程视频参数*/ 
	remote:JSON,

	/**（可选项）是否本地视频在远程视频上方显示*/ 
	localTop?:boolean,

}

interface easeChat_endCall_Params {
	/**（可选项）结束原因*/ 
	reason?:number,

}

interface easeChat_switchCameraPosition_Params {
	/**（可选项）是否使用前置摄像头, true使用前置, false使用后置（仅ios有效）*/ 
	position?:boolean,

}

interface easeChat_setSpeakerEnabled_Params {
	/**（可选项）是否开启扬声器*/ 
	speakerEnabled?:boolean,

}

interface easeChat_addCallListener_Params {
	/**（可选项）要监听的事件*/ 
	target?:string,

}

interface easeChat_removeCallListener_Params {
	/**（可选项）消息推送的免打扰设置*/ 
	target?:string,

}

interface easeChat_starConferenceCall_Params {
	/**（可选项）会议类型*/ 
	type?:number,

	/**（可选项）会议密码*/ 
	password?:string,

	/**（可选项）是否开启服务端录制*/ 
	isRecord?:boolean,

	/**（可选项）录制时是否合并数据流*/ 
	isMerge?:boolean,

}

interface easeChat_joinConference_Params {
	/**（可选项）会议密码*/ 
	password?:string,

	/**会议ID*/ 
	confId:string,

}

interface easeChat_publishConference_Params {
	/**数据流名称*/ 
	streamName:string,

	/**（可选项）视频是否可用*/ 
	enableVideo?:boolean,

	/**（可选项）是否静音*/ 
	isMute?:boolean,

	/**（可选项）扩展信息*/ 
	ext?:string,

	/**（可选项）是否使用后置摄像头*/ 
	isBackCamera?:boolean,

	/**（可选项）最大视频码率，范围 50 < videoKbps < 5000, 默认0, 0为自适应*/ 
	maxVideoKbps?:boolean,

	/**（可选项）最小视频码率, 默认0*/ 
	minVideoKbps?:boolean,

	/**（可选项）最大音频码率，范围 6 < AudioKbps < 510, 默认32*/ 
	maxAudioKbps?:boolean,

	/**（可选项）视频的位置及尺寸（仅ios支持）*/ 
	videoResolution?:JSON,

	/**（可选项）设视频显示模式（仅ios支持）*/ 
	scaleMode?:number,

	/**（可选项）背景配置，支持rgb、rgba()、# （仅ios支持）*/ 
	bg?:string,

	/**（可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）（仅ios支持）*/ 
	fixedOn?:string,

	/**（可选项）视频是否随所属 window 或 frame 滚动（仅ios支持）*/ 
	fixed?:boolean,

}

interface easeChat_subscribeConference_Params {
	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**数据流ID*/ 
	streamId:string,

	/**（可选项）设视频显示模式*/ 
	scaleMode?:number,

	/**（可选项）背景配置，支持rgb、rgba()、# （仅ios支持）*/ 
	bg?:string,

	/**（可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）视频是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface easeChat_unsubscribeConference_Params {
	/**数据流ID*/ 
	streamId:string,

}

interface easeChat_unpublishConference_Params {
	/**数据流ID*/ 
	streamId:string,

}

interface easeChat_updateConferenceWithVolume_Params {
	/**是否静音*/ 
	isMute:boolean,

}

interface easeChat_updateConferenceWithVideo_Params {
	/**视频是否可用*/ 
	enableVideo:boolean,

}

interface easeChat_setPushOption_Params {
	/**（可选项）推送消息显示的昵称，不传则不设置*/ 
	displayName?:string,

	/**（可选项）推送消息显示的类型*/ 
	displayStyle?:string,

	/**（可选项）消息推送的免打扰设置*/ 
	noDisturbStatus?:string,

	/**（可选项）消息推送免打扰开始时间，小时，暂时只支持整点（小时），不传则不设置*/ 
	noDisturbingStartH?:number,

	/**（可选项）消息推送免打扰结束时间，小时，暂时只支持整点（小时），不传则不设置*/ 
	noDisturbingEndH?:number,

}

interface easeChat_setApnsNickname_Params {
	/**推送消息显示的昵称*/ 
	nickname:string,

}

interface easeChat_ignoreGroupPush_Params {
	/**群组id*/ 
	groupId:string,

}

interface easeChat_ignoreGroupsPush_Params {
	/**群组id组成的数组*/ 
	groupIds:Array,

}

interface leCloudLive {
	/**
	 * `生成推流、播放地址`
	 * ========params==========
	 *
	 * `streamName` :string : （必输项）申请直播流名称。流名称可以是任意数字、字母的组合
	 */
	createPushUrl(params:leCloudLive_createPushUrl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `直播初始化`
	 * ========params==========
	 *
	 * `x` :number : （必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；
	 *
	 * `y` :number : （必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0
	 *
	 * `w` :number : （可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度
	 *
	 * `h` :number : （可选项）模块的高度；默认：所属的 Window 或 Frame 的高度
	 *
	 * `previewWidth` :number : （可选项）摄像头预览分辨率的宽。
	 *
	 * `previewHeight` :number : （可选项）摄像头预览分辨率的高。
	 *
	 * `frameRate` :number : （可选项）推流的每秒的视频帧数。
	 *
	 * `bitrate` :number : （可选项）推流的视频流比特率。
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `isLandscape` :boolean : （可选项）是否横屏直播
	 *
	 * `isBackCamare` :boolean : （可选项）是否后置摄像头(true:后置|false:前置)
	 *
	 * `filterName` :string : （可选项）滤镜参数：美颜 温暖 平静 浪漫 正常。
	 */
	customInitLive(params:leCloudLive_customInitLive_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始移动直播`
	 * ========params==========
	 *
	 * `pushUrl` :string : （必填项）直播推流地址；
	 */
	customStartPushUrl(params:leCloudLive_customStartPushUrl_Params, callback?: (ret:JSON) => void):void

	/** 暂停直播*/ 
	customPuaselive():void

	/** 停止直播*/ 
	customStoplive():void

	/** 闪光灯*/ 
	setTorchOpenState():void

	/** 静音*/ 
	setMute():void

	/** 摄像头*/ 
	setCamare():void

	/**
	 * `直播初始化`
	 * ========params==========
	 *
	 * `filterName` :string : （可选项）滤镜参数：美颜 温暖 平静 浪漫 正常。
	 */
	setFilter(params:leCloudLive_setFilter_Params, callback?: (ret:JSON) => void):void

}
interface leCloudLive_createPushUrl_Params {
	/**（必输项）申请直播流名称。流名称可以是任意数字、字母的组合*/ 
	streamName:string,

}

interface leCloudLive_customInitLive_Params {
	/**（必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；*/ 
	x:number,

	/**（必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0*/ 
	y:number,

	/**（可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度*/ 
	w?:number,

	/**（可选项）模块的高度；默认：所属的 Window 或 Frame 的高度*/ 
	h?:number,

	/**（可选项）摄像头预览分辨率的宽。*/ 
	previewWidth?:number,

	/**（可选项）摄像头预览分辨率的高。*/ 
	previewHeight?:number,

	/**（可选项）推流的每秒的视频帧数。*/ 
	frameRate?:number,

	/**（可选项）推流的视频流比特率。*/ 
	bitrate?:number,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）是否横屏直播*/ 
	isLandscape?:boolean,

	/**（可选项）是否后置摄像头(true:后置|false:前置)*/ 
	isBackCamare?:boolean,

	/**（可选项）滤镜参数：美颜 温暖 平静 浪漫 正常。*/ 
	filterName?:string,

}

interface leCloudLive_customStartPushUrl_Params {
	/**（必填项）直播推流地址；*/ 
	pushUrl:string,

}

interface leCloudLive_setFilter_Params {
	/**（可选项）滤镜参数：美颜 温暖 平静 浪漫 正常。*/ 
	filterName?:string,

}

interface webBrowser2018 {
	/** 打开一个全屏的浏览器窗口。*/ 
	openWin(callback?: (ret:JSON) => void):void

	/**
	 * `以小窗口的形式打开网页。`
	 * ========params==========
	 *
	 * `url` :string : （必填）网址。
	 *
	 * `rect` :JSON : （选填）模块的位置及尺寸。
	 *
	 * `fixedOn` :string : （选填）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （选填）模块是否随所属 window 或 frame 滚动
	 *
	 * `showAlert` :boolean : （选填）是否显示alert对话框。（也可以调用setShowAlert动态调整）
	 *
	 * `backgroundTransparent` :boolean : （选填）true透明,false不透明
	 */
	openFrame(params:webBrowser2018_openFrame_Params, callback?: (ret:JSON) => void):void

	/** 隐藏。*/ 
	hide():void

	/** 显示窗口。*/ 
	show():void

	/** 关闭窗口。*/ 
	close():void

	/** 加载网页。(openFrame才有效)*/ 
	loadUrl(callback?: (ret:JSON) => void):void

	/**
	 * `调整窗口位置。(openFrame才有效)`
	 * ========params==========
	 *
	 * `rect` :JSON : （选填）模块的位置及尺寸。
	 *
	 * `fixedOn` :string : （选填）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （选填）模块是否随所属 window 或 frame 滚动
	 */
	setRect(params:webBrowser2018_setRect_Params, callback?: (ret:JSON) => void):void

	/** 返回上一个page页面。(openFrame才有效)*/ 
	historyBack():void

	/** 前进一个page页面。(openFrame才有效)*/ 
	historyForward():void

	/** 能否返回上一个page页面。(openFrame才有效)*/ 
	canGoBack():void

	/** 获取userAgent信息。*/ 
	getUserAgent():void

	/** 设置userAgent。*/ 
	setUserAgent(callback?: (ret:JSON) => void):void

	/** 获取page网页信息，包括title、url。*/ 
	getPageInfo():void

	/** 监听事件。（当网页加载完成时会回调，有时候输入一个地址，会有好几个页面加载事件）*/ 
	setEventListener():void

	/** 移除事件监听。*/ 
	removeEventListener():void

	/** 执行javaScript。*/ 
	loadScript(callback?: (ret:JSON) => void):void

	/** 重新加载。*/ 
	reload():void

	/** 获取当前的进度值,整数值,最高是100。*/ 
	getProgress():void

	/** 清缓存。*/ 
	clearCache():void

	/** 过滤网址,被过滤了的网址就算点击了也打不开,主要是为了不让用户跳出活动页。*/ 
	filter(callback?: (ret:JSON) => void):void

	/** 过滤资源加载,主要功能主动过滤广告js的植入。*/ 
	filterResource(callback?: (ret:JSON) => void):void

	/**
	 * `设置是否显示alert。`
	 * ========params==========
	 *
	 * `showAlert` :boolean : （必填）设置是否显示alert。
	 */
	setShowAlert(params:webBrowser2018_setShowAlert_Params):void

	/**
	 * `设置白天/夜间模式。`
	 * ========params==========
	 *
	 * `dayOrNight` :boolean : （选填）白天模式true,夜间模式false。
	 */
	setDayOrNight(params:webBrowser2018_setDayOrNight_Params):void

	/**
	 * `设置背景透明。`
	 * ========params==========
	 *
	 * `backgroundTransparent` :boolean : （选填）true透明,false不透明
	 */
	setBackgroundTransparent(params:webBrowser2018_setBackgroundTransparent_Params):void

}
interface webBrowser2018_openFrame_Params {
	/**（必填）网址。*/ 
	url:string,

	/**（选填）模块的位置及尺寸。*/ 
	rect:JSON,

	/**（选填）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn:string,

	/**（选填）模块是否随所属 window 或 frame 滚动*/ 
	fixed:boolean,

	/**（选填）是否显示alert对话框。（也可以调用setShowAlert动态调整）*/ 
	showAlert:boolean,

	/**（选填）true透明,false不透明*/ 
	backgroundTransparent:boolean,

}

interface webBrowser2018_setRect_Params {
	/**（选填）模块的位置及尺寸。*/ 
	rect:JSON,

	/**（选填）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn:string,

	/**（选填）模块是否随所属 window 或 frame 滚动*/ 
	fixed:boolean,

}

interface webBrowser2018_setShowAlert_Params {
	/**（必填）设置是否显示alert。*/ 
	showAlert:boolean,

}

interface webBrowser2018_setDayOrNight_Params {
	/**（选填）白天模式true,夜间模式false。*/ 
	dayOrNight:boolean,

}

interface webBrowser2018_setBackgroundTransparent_Params {
	/**（选填）true透明,false不透明*/ 
	backgroundTransparent:boolean,

}

interface imSiLop {
	/** 查询可用的国家(地区)列表，根据当前语言设置优先从本地缓存读取数据，本地没有有效缓存则从云端拉数据*/ 
	getCountryList():void

	/**
	 * `用户选中某个国家(地区）后，调用这个接口设置国家(地区)，sdk内部会持久化保存设置，无需每次重启app都做设置`
	 * ========params==========
	 *
	 * `country` :any : 国家(地区）信息
	 */
	setCountry(params:imSiLop_setCountry_Params, callback?: (ret:JSON) => void):void

	/**
	 * `当应用使用的语言变化时，调用此api设置IoT sdks使用的语言，当未设置过语言时，SDK默认取值是'跟随系统语言'。当调用此api设置过语言后，sdkl内部会固化保存，下次app启动，自动读取上次设置的语言`
	 * ========params==========
	 *
	 * `language` :string : 语言，目前支持：中文简体、英文、法语、德语、日语、韩语、西班牙语、俄语、印度语、意大利语。对应的取值：zh-CN、en-US、fr-FR、de-DE、ja-JP、ko-KR、es-ES、ru-RU、hi-IN、it-IT
	 */
	setLanguage(params:imSiLop_setLanguage_Params):void

	/** 显示手机注册页面*/ 
	phoneRegister(callback?: (ret:JSON) => void):void

	/** 显示邮箱注册页面*/ 
	emailRegister(callback?: (ret:JSON) => void):void

	/** 显示登录页面*/ 
	presentLogin(callback?: (ret:JSON) => void):void

	/** 退出登陆*/ 
	logout():void

	/** 获取已经登录的帐号信息*/ 
	getUser():void

	/**
	 * `更新用户信息（修改头像需要先将头像图片存储到云端，获取该图片的URL）`
	 * ========params==========
	 *
	 * `accountProfile` :any : 用户信息
	 */
	updateAccountProfile(params:imSiLop_updateAccountProfile_Params, callback?: (ret:JSON) => void):void

	/** 启动发现设备流程，包括本地发现的设备以及云端待配网设备*/ 
	startDiscovery(callback?: (ret:JSON) => void):void

	/** 获取所有发现的设备：包括待配网、已配网待绑定、已绑定*/ 
	getLanDevices():void

	/** 停止发现设备流程*/ 
	stopDiscovery():void

	/**
	 * `切换配网模式`
	 * ========params==========
	 *
	 * `linkType` :number : （可选项）配网模式
	 */
	setAliProvisionMode(params:imSiLop_setAliProvisionMode_Params):void

	/**
	 * `设置待添加的设备属性，在 startAddDevice 调用前传入相关信息,在同一时刻只能有一个待添加设备存在`
	 * ========params==========
	 *
	 * `device` :any : （可选项）设备的json对象，传入json对象必须和startDiscovery、getLanDevices接口获取的json对象一致
	 */
	setDevice(params:imSiLop_setDevice_Params):void

	/** 开始添加设备流程*/ 
	startAddDevice():void

	/**
	 * `传入配网所需参数，UI 层在收到 notifyProvisionPrepare 事件，引导用户输入`
	 * ========params==========
	 *
	 * `ssid` :string : 路由器 wifi 名称
	 *
	 * `password` :string : 路由器 wifi 密码
	 *
	 * `timeout` :number : （可选项）配网过程超时时间，以秒为单位
	 */
	toggleProvision(params:imSiLop_toggleProvision_Params):void

	/** 中止添加设备配网流程*/ 
	stopAddDevice():void

	/**
	 * `获取已配网设备的token，用于设备绑定`
	 * ========params==========
	 *
	 * `productKey` :string : 产品类型
	 *
	 * `deviceName` :string : 设备名称
	 *
	 * `timeout` :number : （可选项）请求token超时时间
	 *
	 * `ret` :JSON : null
	 */
	getDeviceToken(params:imSiLop_getDeviceToken_Params):void

}
interface imSiLop_setCountry_Params {
	/**国家(地区）信息*/ 
	country:any,

}

interface imSiLop_setLanguage_Params {
	/**语言，目前支持：中文简体、英文、法语、德语、日语、韩语、西班牙语、俄语、印度语、意大利语。对应的取值：zh-CN、en-US、fr-FR、de-DE、ja-JP、ko-KR、es-ES、ru-RU、hi-IN、it-IT*/ 
	language:string,

}

interface imSiLop_updateAccountProfile_Params {
	/**用户信息*/ 
	accountProfile:any,

}

interface imSiLop_setAliProvisionMode_Params {
	/**（可选项）配网模式*/ 
	linkType?:number,

}

interface imSiLop_setDevice_Params {
	/**（可选项）设备的json对象，传入json对象必须和startDiscovery、getLanDevices接口获取的json对象一致*/ 
	device?:any,

}

interface imSiLop_toggleProvision_Params {
	/**路由器 wifi 名称*/ 
	ssid:string,

	/**路由器 wifi 密码*/ 
	password:string,

	/**（可选项）配网过程超时时间，以秒为单位*/ 
	timeout?:number,

}

interface imSiLop_getDeviceToken_Params {
	/**产品类型*/ 
	productKey:string,

	/**设备名称*/ 
	deviceName:string,

	/**（可选项）请求token超时时间*/ 
	timeout?:number,

	/**null*/ 
	ret:JSON,

}

interface ydocr {
}
interface twoBaiDuOcr {
	/** 初始化*/ 
	initAccessToken():void

	/** 身份证正面识别,android版本需要初始化自动对焦控制器，ios不需要。*/ 
	idCardFront():void

	/** 身份证背面识别,android版本需要初始化自动对焦控制器，ios不需要。*/ 
	idCardBack():void

	/** 银行卡识别*/ 
	bankcard():void

	/** 行驶证识别*/ 
	vehicleLicense():void

}
interface nim {
	/**
	 * `登录`
	 * ========params==========
	 *
	 * `userId` :string : （必填项）用户账号。
	 *
	 * `password` :string : （必填项）用户密码。
	 */
	login(params:nim_login_Params, callback?: (ret:JSON) => void):void

	/** 退出*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 被踢的监听*/ 
	onKick():void

	/** 即将发送消息监听*/ 
	willSendIMMessage():void

	/** 消息发送进度监听*/ 
	onSendMessageWithProgress():void

	/** 收到新消息监听*/ 
	onRecvIMMessages():void

	/** 获取最近会话*/ 
	allRecentSession(callback?: (ret:JSON) => void):void

	/**
	 * `获取云端消息记录`
	 * ========params==========
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。
	 *
	 * `limit` :string : 检索条数, 最大限制100条
	 *
	 * `sync` :boolean : 同步数据: 是否在远程获取消息成功之后同步到本地数据库，如果选择同步，则同步之后不会触发消息添加的回调。默认不同步(false),true为同步。
	 *
	 * `startTime` :any : 需要检索的起始时间,没有则传入0
	 */
	fetchMessageHistory(params:nim_fetchMessageHistory_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文本消息及表情`
	 * ========params==========
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。
	 *
	 * `content` :string : （必填项）消息内容。
	 *
	 * `ext` :JSON : （可选项）自定义扩展字段
	 */
	sendText(params:nim_sendText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片`
	 * ========params==========
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。
	 *
	 * `filePath` :string : （必填项）图片路径(支持fs:// widget:// 路径)。
	 *
	 * `displayName` :string : （非必填）显示名称。
	 *
	 * `ext` :JSON : （可选项）自定义扩展字段
	 */
	sendImage(params:nim_sendImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送地理位置信息`
	 * ========params==========
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。
	 *
	 * `title` :string : （可选项）位置的地址名。
	 *
	 * `latitude` :any : （可选项）经度。
	 *
	 * `longitude` :any : （可选项）纬度。
	 *
	 * `ext` :JSON : （可选项）自定义扩展字段
	 */
	sendLocationMsg(params:nim_sendLocationMsg_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送音频消息`
	 * ========params==========
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。
	 *
	 * `filePath` :string : （必填项）语音文件路径(支持fs:// widget://)。
	 *
	 * `ext` :JSON : （可选项）自定义扩展字段
	 */
	sendAudio(params:nim_sendAudio_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送视频`
	 * ========params==========
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。
	 *
	 * `filePath` :string : （必填项）视频文件路径(支持fs:// widget://)。
	 *
	 * `displayName` :string : （可选项）显示名称
	 *
	 * `ext` :JSON : （可选项）自定义扩展字段
	 */
	sendVideo(params:nim_sendVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文件`
	 * ========params==========
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。
	 *
	 * `filePath` :string : （必填项）文件路径(支持fs:// widget://)。
	 *
	 * `displayName` :string : （可选项）显示名称
	 *
	 * `ext` :JSON : （可选项）自定义扩展字段
	 */
	sendFile(params:nim_sendFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `切换音频的输出设备`
	 * ========params==========
	 *
	 * `outputDevice` :number : （必填项）0:听筒,1:扬声器。
	 */
	switchAudioOutputDevice(params:nim_switchAudioOutputDevice_Params, callback?: (ret:JSON) => void):void

	/** 判断是否正在播放音频*/ 
	isPlaying():void

	/**
	 * `播放音频`
	 * ========params==========
	 *
	 * `filePath` :string : （必填项）语音文件路径(支持fs:// widget://)。
	 */
	playAudio(params:nim_playAudio_Params, callback?: (ret:JSON) => void):void

	/** 停止播放音频*/ 
	stopPlay(callback?: (ret:JSON) => void):void

	/** 判断是否正在录制音频*/ 
	isRecording():void

	/**
	 * `录音`
	 * ========params==========
	 *
	 * `duration` :number : （必填项）最长录音时长（秒）。
	 */
	recordAudioForDuration(params:nim_recordAudioForDuration_Params, callback?: (ret:JSON) => void):void

	/** 取消录音*/ 
	cancelRecord():void

	/** 停止录制音频*/ 
	stopRecord():void

	/** 群组移除监听*/ 
	onIMTeamRemoved():void

	/** 群组更新监听*/ 
	onIMTeamUpdated():void

	/** 黑名单列表发生变化监听*/ 
	onBlackListChanged():void

	/** 获取我的所有群组*/ 
	allMyTeams(callback?: (ret:JSON) => void):void

	/**
	 * `本地获取群组信息`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群组Id。
	 */
	teamById(params:nim_teamById_Params, callback?: (ret:JSON) => void):void

	/**
	 * `远程获取群组信息`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群组Id。
	 */
	fetchTeamInfo(params:nim_fetchTeamInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建群组`
	 * ========params==========
	 *
	 * `name` :string : （必填项）群名称。
	 *
	 * `type` :number : （可选项）创建群类别,普通群:0,高级群:1,默认为普通群.
	 *
	 * `joinMode` :number : （可选项）群验证方式,只有高级群才有群验证模式,普通群一律不需要验证.默认为不需要,允许所有人加入:0,需要验证:1,不允许任何人加入:2;
	 *
	 * `postscript` :string : （可选项）邀请附言,当创建的群为高级群需要带上,普通群没有认证过程,所以不需要;
	 *
	 * `avatarUrl` :string : （可选项）群头像,可选参数
	 *
	 * `intro` :string : （可选项）群介绍,可选参数
	 *
	 * `announcement` :string : （可选项）群公告,可选参数
	 *
	 * `users` :Array : （必填项）邀请群成员.不能为空,不邀请人时传自己的userId; 当创建普通群时,必须要添加一个其它成员.
	 *
	 * `inviteMode` :number : （可选项）群邀请权限( 0 :只有管理员/群主可以邀请他人入群 1:所有人可以邀请其他人入群).
	 *
	 * `beInviteMode` :number : （可选项）被邀请模式(0 : 需要被邀请方同意 1:不需要被邀请方同意).
	 */
	createTeam(params:nim_createTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `邀请用户入群`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `users` :Array : （必填项）userId组成的数组.
	 *
	 * `postscript` :string : （可选项）邀请附言 (仅iOS有效)。
	 */
	addUsers(params:nim_addUsers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `同意群邀请(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `invitorId` :string : （必填项）邀请者Id(不是被邀请者)。
	 */
	acceptInviteWithTeam(params:nim_acceptInviteWithTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝群邀请(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `invitorId` :string : （必填项）邀请者Id(不是被邀请者)。
	 *
	 * `rejectReason` :string : （可选项）拒绝原因。
	 */
	rejectInviteWithTeam(params:nim_rejectInviteWithTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户主动申请加群（仅限高级群）`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `message` :string : （可选项）加群信息.
	 */
	applyToTeam(params:nim_applyToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通过申请(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `userId` :string : （必填项）用户Id.
	 */
	passApplyToTeam(params:nim_passApplyToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝申请(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `userId` :string : （必填项）用户Id.
	 *
	 * `rejectReason` :string : （可选项）拒绝原因.
	 */
	rejectApplyToTeam(params:nim_rejectApplyToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群名称`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `teamName` :string : （必填项）群组名称.
	 */
	updateTeamName(params:nim_updateTeamName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群介绍`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `intro` :string : （必填项）群介绍.
	 */
	updateTeamIntro(params:nim_updateTeamIntro_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群公告`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `announcement` :string : （必填项）群公告.
	 */
	updateTeamAnnouncement(params:nim_updateTeamAnnouncement_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群验证方式`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `joinMode` :number : （必填项）群验证方式,允许所有人加入:0,需要验证:1,不允许任何人加入:2
	 */
	updateTeamJoinMode(params:nim_updateTeamJoinMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `提升管理员(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `users` :Array : （必填项）userId组成的数组
	 */
	addManagersToTeam(params:nim_addManagersToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除管理员(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `users` :Array : （必填项）userId组成的数组
	 */
	removeManagersFromTeam(params:nim_removeManagersFromTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `转让群(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `newOwnerId` :string : （必填项）新群主ID
	 *
	 * `isLeave` :boolean : （可选项）是否同时离开群组,true离开
	 */
	transferManagerWithTeam(params:nim_transferManagerWithTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取群成员`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 */
	fetchTeamMembers(params:nim_fetchTeamMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户退群`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 */
	quitTeam(params:nim_quitTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `踢出用户`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `users` :Array : （必填项）userId组成的数组
	 */
	kickUsers(params:nim_kickUsers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解散群`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 */
	dismissTeam(params:nim_dismissTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群消息通知状态 (关闭群消息提醒)`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `teamMessageNotifyType` :number : （可选项）设置指定群消息通知类型(0:全部消息提醒,1:群所有消息不提醒,2:仅管理员消息提醒)。
	 */
	updateNotifyStateForTeam(params:nim_updateNotifyStateForTeam_Params, callback?: (ret:JSON) => void):void

	/** 内置系统通知监听*/ 
	onIMSystemMessageRecieved():void

	/**
	 * `获取本地存储的内置系统通知`
	 * ========params==========
	 *
	 * `limit` :number : （可选项）最大获取数:默认10条。
	 */
	fetchSystemNotifications(params:nim_fetchSystemNotifications_Params, callback?: (ret:JSON) => void):void

	/** 获取本地存储的内置系统未读数*/ 
	allNotificationsUnreadCount():void

	/** 删除本地存储的全部内置系统通知*/ 
	deleteAllNotifications():void

	/** 标记本地存储的全部内置系统通知为已读*/ 
	markAllNotificationsAsRead(callback?: (ret:JSON) => void):void

	/** 用户个人信息发生变化监听*/ 
	onUserInfoUpdate():void

	/**
	 * `获取用户资料`
	 * ========params==========
	 *
	 * `userId` :string : （必填项）//用户帐号。
	 */
	userInfo(params:nim_userInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取服务器用户资料`
	 * ========params==========
	 *
	 * `userIds` :Array : （必填项）用户id列表。
	 */
	fetchUserInfos(params:nim_fetchUserInfos_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新当前用户信息`
	 * ========params==========
	 *
	 * `nickname` :string : （可选项）用户昵称。
	 *
	 * `avatar` :string : （可选项）用户头像 (仅支持http地址的头像地址，开发者自行验证控制)。
	 *
	 * `sign` :string : （可选项）用户签名。
	 *
	 * `gender` :number : （可选项）用户性别 0:未知 ,1:男 ,2:女。
	 *
	 * `email` :string : （可选项）只支持合法邮箱 (开发者自行验证控制)。
	 *
	 * `birth` :string : （可选项）用户生日yyyy-MM-dd (开发者自行验证控制)。
	 *
	 * `mobile` :string : （可选项）合法手机号 (开发者自行验证控制)。
	 *
	 * `ext` :JSON : （可选项）拓展字段。
	 */
	updateMyUserInfo(params:nim_updateMyUserInfo_Params, callback?: (ret:JSON) => void):void

	/** 获取好友列表*/ 
	myFriends():void

	/**
	 * `好友请求`
	 * ========params==========
	 *
	 * `userId` :string : （必填项）目标用户ID。
	 *
	 * `operation` :number : （可选项）1:添加好友(直接添加为好友,无需验证) 2:请求添加好友 3:通过添加好友请求 4:拒绝添加好友请求
	 *
	 * `message` :string : （可选项）自定义验证消息。
	 */
	requestFriend(params:nim_requestFriend_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除好友`
	 * ========params==========
	 *
	 * `userId` :string : （必填项）目标用户ID。
	 */
	deleteFriend(params:nim_deleteFriend_Params, callback?: (ret:JSON) => void):void

	/** 获取黑名单成员列表*/ 
	myBlackList():void

	/**
	 * `添加用户到黑名单`
	 * ========params==========
	 *
	 * `userId` :string : （必填项）目标用户ID。
	 */
	addToBlackList(params:nim_addToBlackList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将用户移除黑名单`
	 * ========params==========
	 *
	 * `userId` :string : （必填项）目标用户ID。
	 */
	removeFromBlackBlackList(params:nim_removeFromBlackBlackList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断某用户是否在自己的黑名单中`
	 * ========params==========
	 *
	 * `userId` :string : （必填项）目标用户ID。
	 */
	isUserInBlackList(params:nim_isUserInBlackList_Params, callback?: (ret:JSON) => void):void

	/** 获取静音成员列表*/ 
	myMuteUserList():void

	/**
	 * `设置消息提醒`
	 * ========params==========
	 *
	 * `userId` :string : （必填项）目标用户ID。
	 *
	 * `notify` :boolean : （可选项）是否开启消息提醒。（提醒:true|不提醒:false）
	 */
	updateNotifyStateForUser(params:nim_updateNotifyStateForUser_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断是否需要消息通知`
	 * ========params==========
	 *
	 * `userId` :string : （可选项）目标用户ID。
	 */
	notifyForNewMsgForUser(params:nim_notifyForNewMsgForUser_Params, callback?: (ret:JSON) => void):void

	/** 聊天室在线状态变化的监听*/ 
	onChatRoomStatusChanged():void

	/** 被踢出聊天室的监听*/ 
	onChatRoomKickOutEvent():void

	/**
	 * `用户加入聊天室`
	 * ========params==========
	 *
	 * `roomId` :string : （必填项）聊天室Id。
	 *
	 * `nickName` :string : （可选项）用户在聊天室中的呢称。
	 *
	 * `avatar` :string : （可选项）头像url。
	 *
	 * `extension` :any : （可选项）扩展字段,进入聊天室后展示用户信息的扩展字段,长度限制4K 。
	 *
	 * `notifyExtension` :any : （可选项）通知的扩展字段,进入聊天室通知消息扩展字段,长度限制1K(进入聊天室后,聊天室成员都会收到一条通知消息)。
	 */
	enterChatRoom(params:nim_enterChatRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户退出聊天室`
	 * ========params==========
	 *
	 * `roomId` :string : （必填项）聊天室Id。
	 */
	exitChatRoom(params:nim_exitChatRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取聊天室历史消息`
	 * ========params==========
	 *
	 * `roomId` :string : （必填项）聊天室Id。
	 *
	 * `startTime` :any : （可选项）起始时间(单位毫秒)。
	 *
	 * `startTime` :number : （可选项）消息条数。
	 */
	getChatRoomHistoryMsg(params:nim_getChatRoomHistoryMsg_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取聊天室基本信息`
	 * ========params==========
	 *
	 * `roomId` :string : （必填项）聊天室Id。
	 */
	getChatRoomInfo(params:nim_getChatRoomInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取聊天室成员`
	 * ========params==========
	 *
	 * `roomId` :string : （必填项）聊天室Id。
	 *
	 * `type` :number : （可选项）类别(0:聊天室在线的固定成员, 1: 聊天室临时成员, 2: 在线固定成员)。
	 *
	 * `time` :any : （可选项）起始时间(单位毫秒) iOS无效。
	 *
	 * `limit` :number : （可选项）条数, 最大100。
	 */
	getChatRoomMembers(params:nim_getChatRoomMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `批量获取指定成员在聊天室中的信息`
	 * ========params==========
	 *
	 * `roomId` :string : （必填项）聊天室Id。
	 *
	 * `userIds` :Array : （必填项）用户id列表。
	 */
	getChatRoomMembersByIds(params:nim_getChatRoomMembersByIds_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入/移出黑名单`
	 * ========params==========
	 *
	 * `roomId` :string : （必填项）聊天室Id。
	 *
	 * `userId` :string : （必填项）用户的帐号。
	 *
	 * `isAdd` :boolean : （可选项) 将用户加入黑名单.
	 */
	addUserToBlackList(params:nim_addUserToBlackList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入用户到禁言名单/取消某用户的禁言`
	 * ========params==========
	 *
	 * `roomId` :string : （必填项）聊天室Id。
	 *
	 * `userId` :string : （必填项）用户的帐号。
	 *
	 * `isMute` :boolean : （可选项）加入用户到禁言名单/取消某用户的禁言
	 */
	muteUser(params:nim_muteUser_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置/取消管理员`
	 * ========params==========
	 *
	 * `roomId` :string : （必填项）聊天室Id。
	 *
	 * `userId` :string : （必填项）用户的帐号。
	 *
	 * `isAdmin` :boolean : （可选项）将用户设置/取消管理员.
	 */
	setAdmin(params:nim_setAdmin_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置/移除普通成员`
	 * ========params==========
	 *
	 * `roomId` :string : （必填项）聊天室Id。
	 *
	 * `userId` :string : （必填项）用户的帐号。
	 *
	 * `isNormal` :boolean : （可选项）将用户设置/移除普通成员.
	 */
	setNormal(params:nim_setNormal_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从聊天室中移除某个用户`
	 * ========params==========
	 *
	 * `roomId` :string : （必填项）聊天室Id。
	 *
	 * `userId` :string : （必填项）用户的帐号。
	 *
	 * `reason` :string : （可选项）原因。
	 */
	kickMemberFromChatRoom(params:nim_kickMemberFromChatRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `主叫发起通话 (主叫方)`
	 * ========params==========
	 *
	 * `type` :number : （必填项）呼叫类型 1:音频 2:视频(如果是视频通话，请先执行initCallRemoteView接口，初始化视频界面)。
	 *
	 * `callees` :Array : （必填项）用户的帐号(暂时仅支持传一个)。
	 *
	 * `serverRecord` :boolean : （可选项）服务器录制音频/视频开关。
	 *
	 * `autoRotateRemoteVideo` :boolean : （可选项）是否打开视频图像根据设备角度自动旋转。
	 *
	 * `ext` :JSON : （必填项）仅在主叫发起点对点通话时设置有效，用于在主被叫之间传递额外信息，被叫收到呼叫时会携带该信息。
	 */
	startCall(params:nim_startCall_Params, callback?: (ret:JSON) => void):void

	/** 被叫收到呼叫监听(被叫方)*/ 
	onCallReceive():void

	/**
	 * `被叫响应呼叫（被叫方）`
	 * ========params==========
	 *
	 * `callID` :string : （必填项）call id。
	 *
	 * `accept` :boolean : （可选项）是否接听。
	 *
	 * `type` :number : （必填项）呼叫类型 1:音频 2:视频(如果是视频通话，请先执行initCallRemoteView接口，初始化视频界面)。
	 *
	 * `serverRecord` :boolean : （可选项）服务器录制音频/视频开关。
	 *
	 * `autoRotateRemoteVideo` :boolean : （可选项）是否打开视频图像根据设备角度自动旋转。
	 */
	responseCall(params:nim_responseCall_Params, callback?: (ret:JSON) => void):void

	/** 主叫收到被叫响应监听（主叫方）*/ 
	onCallResponse():void

	/** 这通呼入通话已经被该帐号其他端处理(在多端登录情况下)*/ 
	onCallResponsedByOther():void

	/** 点对点通话建立成功监听*/ 
	onCallCallEstablished():void

	/** 通话异常断开监听*/ 
	onCallCallDisconnected():void

	/**
	 * `被叫响应呼叫（被叫方）`
	 * ========params==========
	 *
	 * `callID` :string : （必填项）call id。
	 *
	 * `type` :number : （可选项）控制类型（1:开启了音频 2:关闭了音频 3:开启了视频 4:关闭了视频 5:切换到视频模式 6:同意切换到视频模式 7:拒绝切换到视频模式 8:切换到音频模式 9:占线 10:没有可用摄像头[仅ios有效] 11:应用切换到了后台[仅ios有效] 12:收到呼叫请求的反馈 13:开始录制 14:结束录制）。
	 */
	callControl(params:nim_callControl_Params, callback?: (ret:JSON) => void):void

	/** 通话异常断开监听*/ 
	onCallControl():void

	/**
	 * `挂断通话`
	 * ========params==========
	 *
	 * `callID` :string : （必填项）call id。
	 */
	callHangup(params:nim_callHangup_Params, callback?: (ret:JSON) => void):void

	/** 对方挂断电话监听*/ 
	onCallHangup():void

	/** 获取正在进行中的网络通话call id*/ 
	currentCallID():void

	/** 当前通话网络状态监听*/ 
	onCallNetStatus():void

	/**
	 * ` 初始化视频通话界面（如果是视频通话，必须先执行该接口）`
	 * ========params==========
	 *
	 * `remoteRect` :JSON : （必填项）远程视频显示的位置及尺寸
	 *
	 * `localRect` :JSON : （必填项）本地视频显示的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	initCallRemoteView(params:nim_initCallRemoteView_Params, callback?: (ret:JSON) => void):void

	/**  移除视频通话界面*/ 
	removeCallRemoteView():void

	/**
	 * `设置网络通话静音模式`
	 * ========params==========
	 *
	 * `mute` :string : （可选项）是否开启静音。
	 */
	setCallMute(params:nim_setCallMute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置网络通话扬声器模式`
	 * ========params==========
	 *
	 * `useSpeaker` :string : （可选项）是否开启扬声器。
	 */
	setCallSpeaker(params:nim_setCallSpeaker_Params, callback?: (ret:JSON) => void):void

	/** 切换网络通话摄像头*/ 
	switchCallCamera():void

	/**  切换闪光灯开关*/ 
	switchCallCameraFlash():void

	/**
	 * `发送已读回执`
	 * ========params==========
	 *
	 * `messageId` :string : （必填项）待撤回消息Id。
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。（仅iOS）
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。（仅iOS）
	 */
	sendMessageReceipt(params:nim_sendMessageReceipt_Params, callback?: (ret:JSON) => void):void

	/** 接受已读回执*/ 
	onIMRecvMessageReceipt():void

	/**
	 * `未读数清零`
	 * ========params==========
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。
	 */
	markAllMessagesReadInSession(params:nim_markAllMessagesReadInSession_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群头像`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `avatarUrl` :string : （必填项）群头像.
	 */
	updateTeamAvatar(params:nim_updateTeamAvatar_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新成员群昵称`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `userId` :string : （必填项）群成员ID.
	 *
	 * `newNick` :string : （必填项）新的群成员昵称.
	 */
	updateUserNick(params:nim_updateUserNick_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改自己的群昵称`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `newNick` :string : （必填项）新的群成员昵称.
	 */
	updateMyTeamNick(params:nim_updateMyTeamNick_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群自定义信息`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `clientCustomInfo` :string : （可选项）自定义信息.
	 */
	updateTeamCustomInfo(params:nim_updateTeamCustomInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `群成员禁言`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `userId` :string : （必填项）群成员Id.
	 *
	 * `mute` :boolean : （可选项）是否禁言.
	 */
	updateMuteStateByUserId(params:nim_updateMuteStateByUserId_Params, callback?: (ret:JSON) => void):void

	/**
	 * `禁言群全体成员`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `mute` :boolean : （可选项）是否禁言.
	 */
	updateMuteStateByAll(params:nim_updateMuteStateByAll_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询群成员资料`
	 * ========params==========
	 *
	 * `teamId` :string : （必填项）群Id。
	 *
	 * `userId` :string : （必填项）群成员Id。
	 */
	queryTeamMemberByUserId(params:nim_queryTeamMemberByUserId_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置系统通知状态(iOS不一定生效，暂时不清楚iOS接口方法)`
	 * ========params==========
	 *
	 * `messageId` :string : （必填项）系统消息Id。
	 *
	 * `messageStatus` :string : （必填项）消息状态(0:未处理状态 1:已通过验证 2:已拒绝 3:已忽略 4:已过期 5:开发者可自定义的扩展类型1 6:开发者可自定义的扩展类型2 7:开发者可自定义的扩展类型3 8:开发者可自定义的扩展类型4 9:开发者可自定义的扩展类型5)。
	 */
	setSystemMessageStatus(params:nim_setSystemMessageStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除一条系统通知`
	 * ========params==========
	 *
	 * `messageId` :string : （必填项）系统消息Id。
	 */
	deleteSystemMessage(params:nim_deleteSystemMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置单条系统通知为已读`
	 * ========params==========
	 *
	 * `messageId` :string : （必填项）系统消息Id。
	 */
	setSystemMessageRead(params:nim_setSystemMessageRead_Params, callback?: (ret:JSON) => void):void

	/**
	 * `消息撤回`
	 * ========params==========
	 *
	 * `messageId` :string : （必填项）待撤回消息Id。
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。（仅iOS）
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。（仅iOS）
	 */
	revokeMessage(params:nim_revokeMessage_Params, callback?: (ret:JSON) => void):void

	/** 监听消息撤回*/ 
	onIMRecvRevokeMessageNotification():void

	/** 登录状态监听*/ 
	onIMLogin():void

	/** 是否登录状态(同步接口)*/ 
	isLogined():void

	/**
	 * `是否登录状态(同步接口)`
	 * ========params==========
	 *
	 * `account` :boolean : （必填项）待判断用户账号。
	 */
	isMyFriend(params:nim_isMyFriend_Params):void

	/**
	 * `是否在此群组(同步接口)`
	 * ========params==========
	 *
	 * `teamId` :boolean : （必填项）待判断群号。
	 */
	isMyTeam(params:nim_isMyTeam_Params):void

	/**
	 * `最近会话的删除`
	 * ========params==========
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。
	 */
	deleteRecentSession(params:nim_deleteRecentSession_Params, callback?: (ret:JSON) => void):void

	/**
	 * `手动下载附件`
	 * ========params==========
	 *
	 * `messageId` :string : （必填项）待下载附件的消息Id。
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。（仅iOS）
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。（仅iOS）
	 */
	downloadAttachment(params:nim_downloadAttachment_Params, callback?: (ret:JSON) => void):void

	/** 停止附件下载*/ 
	abortDownloadAttachment():void

	/**
	 * `开启或者关闭推送`
	 * ========params==========
	 *
	 * `enable` :boolean : （必填项）开启或者关闭。
	 */
	enablePushService(params:nim_enablePushService_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送提示消息`
	 * ========params==========
	 *
	 * `sessionId` :string : （必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。
	 *
	 * `sessionType` :number : （必填项）0-单聊,1-群聊, 2- 聊天室。
	 *
	 * `content` :string : （必填项）提示消息内容。
	 *
	 * `ext` :JSON : （可选项）自定义扩展字段
	 */
	sendTips(params:nim_sendTips_Params, callback?: (ret:JSON) => void):void

}
interface nim_login_Params {
	/**（必填项）用户账号。*/ 
	userId:string,

	/**（必填项）用户密码。*/ 
	password:string,

}

interface nim_fetchMessageHistory_Params {
	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。*/ 
	sessionType:number,

	/**检索条数, 最大限制100条*/ 
	limit:string,

	/**同步数据: 是否在远程获取消息成功之后同步到本地数据库，如果选择同步，则同步之后不会触发消息添加的回调。默认不同步(false),true为同步。*/ 
	sync:boolean,

	/**需要检索的起始时间,没有则传入0*/ 
	startTime:any,

}

interface nim_sendText_Params {
	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。*/ 
	sessionType:number,

	/**（必填项）消息内容。*/ 
	content:string,

	/**（可选项）自定义扩展字段*/ 
	ext?:JSON,

}

interface nim_sendImage_Params {
	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。*/ 
	sessionType:number,

	/**（必填项）图片路径(支持fs:// widget:// 路径)。*/ 
	filePath:string,

	/**（非必填）显示名称。*/ 
	displayName:string,

	/**（可选项）自定义扩展字段*/ 
	ext?:JSON,

}

interface nim_sendLocationMsg_Params {
	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。*/ 
	sessionType:number,

	/**（可选项）位置的地址名。*/ 
	title?:string,

	/**（可选项）经度。*/ 
	latitude?:any,

	/**（可选项）纬度。*/ 
	longitude?:any,

	/**（可选项）自定义扩展字段*/ 
	ext?:JSON,

}

interface nim_sendAudio_Params {
	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。*/ 
	sessionType:number,

	/**（必填项）语音文件路径(支持fs:// widget://)。*/ 
	filePath:string,

	/**（可选项）自定义扩展字段*/ 
	ext?:JSON,

}

interface nim_sendVideo_Params {
	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。*/ 
	sessionType:number,

	/**（必填项）视频文件路径(支持fs:// widget://)。*/ 
	filePath:string,

	/**（可选项）显示名称*/ 
	displayName?:string,

	/**（可选项）自定义扩展字段*/ 
	ext?:JSON,

}

interface nim_sendFile_Params {
	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。*/ 
	sessionType:number,

	/**（必填项）文件路径(支持fs:// widget://)。*/ 
	filePath:string,

	/**（可选项）显示名称*/ 
	displayName?:string,

	/**（可选项）自定义扩展字段*/ 
	ext?:JSON,

}

interface nim_switchAudioOutputDevice_Params {
	/**（必填项）0:听筒,1:扬声器。*/ 
	outputDevice:number,

}

interface nim_playAudio_Params {
	/**（必填项）语音文件路径(支持fs:// widget://)。*/ 
	filePath:string,

}

interface nim_recordAudioForDuration_Params {
	/**（必填项）最长录音时长（秒）。*/ 
	duration:number,

}

interface nim_teamById_Params {
	/**（必填项）群组Id。*/ 
	teamId:string,

}

interface nim_fetchTeamInfo_Params {
	/**（必填项）群组Id。*/ 
	teamId:string,

}

interface nim_createTeam_Params {
	/**（必填项）群名称。*/ 
	name:string,

	/**（可选项）创建群类别,普通群:0,高级群:1,默认为普通群.*/ 
	type?:number,

	/**（可选项）群验证方式,只有高级群才有群验证模式,普通群一律不需要验证.默认为不需要,允许所有人加入:0,需要验证:1,不允许任何人加入:2;*/ 
	joinMode?:number,

	/**（可选项）邀请附言,当创建的群为高级群需要带上,普通群没有认证过程,所以不需要;*/ 
	postscript?:string,

	/**（可选项）群头像,可选参数*/ 
	avatarUrl?:string,

	/**（可选项）群介绍,可选参数*/ 
	intro?:string,

	/**（可选项）群公告,可选参数*/ 
	announcement?:string,

	/**（必填项）邀请群成员.不能为空,不邀请人时传自己的userId; 当创建普通群时,必须要添加一个其它成员.*/ 
	users:Array,

	/**（可选项）群邀请权限( 0 :只有管理员/群主可以邀请他人入群 1:所有人可以邀请其他人入群).*/ 
	inviteMode?:number,

	/**（可选项）被邀请模式(0 : 需要被邀请方同意 1:不需要被邀请方同意).*/ 
	beInviteMode?:number,

}

interface nim_addUsers_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）userId组成的数组.*/ 
	users:Array,

	/**（可选项）邀请附言 (仅iOS有效)。*/ 
	postscript?:string,

}

interface nim_acceptInviteWithTeam_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）邀请者Id(不是被邀请者)。*/ 
	invitorId:string,

}

interface nim_rejectInviteWithTeam_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）邀请者Id(不是被邀请者)。*/ 
	invitorId:string,

	/**（可选项）拒绝原因。*/ 
	rejectReason?:string,

}

interface nim_applyToTeam_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（可选项）加群信息.*/ 
	message?:string,

}

interface nim_passApplyToTeam_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）用户Id.*/ 
	userId:string,

}

interface nim_rejectApplyToTeam_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）用户Id.*/ 
	userId:string,

	/**（可选项）拒绝原因.*/ 
	rejectReason?:string,

}

interface nim_updateTeamName_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）群组名称.*/ 
	teamName:string,

}

interface nim_updateTeamIntro_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）群介绍.*/ 
	intro:string,

}

interface nim_updateTeamAnnouncement_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）群公告.*/ 
	announcement:string,

}

interface nim_updateTeamJoinMode_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）群验证方式,允许所有人加入:0,需要验证:1,不允许任何人加入:2*/ 
	joinMode:number,

}

interface nim_addManagersToTeam_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）userId组成的数组*/ 
	users:Array,

}

interface nim_removeManagersFromTeam_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）userId组成的数组*/ 
	users:Array,

}

interface nim_transferManagerWithTeam_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）新群主ID*/ 
	newOwnerId:string,

	/**（可选项）是否同时离开群组,true离开*/ 
	isLeave?:boolean,

}

interface nim_fetchTeamMembers_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

}

interface nim_quitTeam_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

}

interface nim_kickUsers_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）userId组成的数组*/ 
	users:Array,

}

interface nim_dismissTeam_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

}

interface nim_updateNotifyStateForTeam_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（可选项）设置指定群消息通知类型(0:全部消息提醒,1:群所有消息不提醒,2:仅管理员消息提醒)。*/ 
	teamMessageNotifyType?:number,

}

interface nim_fetchSystemNotifications_Params {
	/**（可选项）最大获取数:默认10条。*/ 
	limit?:number,

}

interface nim_userInfo_Params {
	/**（必填项）//用户帐号。*/ 
	userId:string,

}

interface nim_fetchUserInfos_Params {
	/**（必填项）用户id列表。*/ 
	userIds:Array,

}

interface nim_updateMyUserInfo_Params {
	/**（可选项）用户昵称。*/ 
	nickname?:string,

	/**（可选项）用户头像 (仅支持http地址的头像地址，开发者自行验证控制)。*/ 
	avatar?:string,

	/**（可选项）用户签名。*/ 
	sign?:string,

	/**（可选项）用户性别 0:未知 ,1:男 ,2:女。*/ 
	gender?:number,

	/**（可选项）只支持合法邮箱 (开发者自行验证控制)。*/ 
	email?:string,

	/**（可选项）用户生日yyyy-MM-dd (开发者自行验证控制)。*/ 
	birth?:string,

	/**（可选项）合法手机号 (开发者自行验证控制)。*/ 
	mobile?:string,

	/**（可选项）拓展字段。*/ 
	ext?:JSON,

}

interface nim_requestFriend_Params {
	/**（必填项）目标用户ID。*/ 
	userId:string,

	/**（可选项）1:添加好友(直接添加为好友,无需验证) 2:请求添加好友 3:通过添加好友请求 4:拒绝添加好友请求*/ 
	operation?:number,

	/**（可选项）自定义验证消息。*/ 
	message?:string,

}

interface nim_deleteFriend_Params {
	/**（必填项）目标用户ID。*/ 
	userId:string,

}

interface nim_addToBlackList_Params {
	/**（必填项）目标用户ID。*/ 
	userId:string,

}

interface nim_removeFromBlackBlackList_Params {
	/**（必填项）目标用户ID。*/ 
	userId:string,

}

interface nim_isUserInBlackList_Params {
	/**（必填项）目标用户ID。*/ 
	userId:string,

}

interface nim_updateNotifyStateForUser_Params {
	/**（必填项）目标用户ID。*/ 
	userId:string,

	/**（可选项）是否开启消息提醒。（提醒:true|不提醒:false）*/ 
	notify?:boolean,

}

interface nim_notifyForNewMsgForUser_Params {
	/**（可选项）目标用户ID。*/ 
	userId?:string,

}

interface nim_enterChatRoom_Params {
	/**（必填项）聊天室Id。*/ 
	roomId:string,

	/**（可选项）用户在聊天室中的呢称。*/ 
	nickName?:string,

	/**（可选项）头像url。*/ 
	avatar?:string,

	/**（可选项）扩展字段,进入聊天室后展示用户信息的扩展字段,长度限制4K 。*/ 
	extension?:any,

	/**（可选项）通知的扩展字段,进入聊天室通知消息扩展字段,长度限制1K(进入聊天室后,聊天室成员都会收到一条通知消息)。*/ 
	notifyExtension?:any,

}

interface nim_exitChatRoom_Params {
	/**（必填项）聊天室Id。*/ 
	roomId:string,

}

interface nim_getChatRoomHistoryMsg_Params {
	/**（必填项）聊天室Id。*/ 
	roomId:string,

	/**（可选项）起始时间(单位毫秒)。*/ 
	startTime?:any,

	/**（可选项）消息条数。*/ 
	startTime?:number,

}

interface nim_getChatRoomInfo_Params {
	/**（必填项）聊天室Id。*/ 
	roomId:string,

}

interface nim_getChatRoomMembers_Params {
	/**（必填项）聊天室Id。*/ 
	roomId:string,

	/**（可选项）类别(0:聊天室在线的固定成员, 1: 聊天室临时成员, 2: 在线固定成员)。*/ 
	type?:number,

	/**（可选项）起始时间(单位毫秒) iOS无效。*/ 
	time?:any,

	/**（可选项）条数, 最大100。*/ 
	limit?:number,

}

interface nim_getChatRoomMembersByIds_Params {
	/**（必填项）聊天室Id。*/ 
	roomId:string,

	/**（必填项）用户id列表。*/ 
	userIds:Array,

}

interface nim_addUserToBlackList_Params {
	/**（必填项）聊天室Id。*/ 
	roomId:string,

	/**（必填项）用户的帐号。*/ 
	userId:string,

	/**（可选项) 将用户加入黑名单.*/ 
	isAdd?:boolean,

}

interface nim_muteUser_Params {
	/**（必填项）聊天室Id。*/ 
	roomId:string,

	/**（必填项）用户的帐号。*/ 
	userId:string,

	/**（可选项）加入用户到禁言名单/取消某用户的禁言*/ 
	isMute?:boolean,

}

interface nim_setAdmin_Params {
	/**（必填项）聊天室Id。*/ 
	roomId:string,

	/**（必填项）用户的帐号。*/ 
	userId:string,

	/**（可选项）将用户设置/取消管理员.*/ 
	isAdmin?:boolean,

}

interface nim_setNormal_Params {
	/**（必填项）聊天室Id。*/ 
	roomId:string,

	/**（必填项）用户的帐号。*/ 
	userId:string,

	/**（可选项）将用户设置/移除普通成员.*/ 
	isNormal?:boolean,

}

interface nim_kickMemberFromChatRoom_Params {
	/**（必填项）聊天室Id。*/ 
	roomId:string,

	/**（必填项）用户的帐号。*/ 
	userId:string,

	/**（可选项）原因。*/ 
	reason?:string,

}

interface nim_startCall_Params {
	/**（必填项）呼叫类型 1:音频 2:视频(如果是视频通话，请先执行initCallRemoteView接口，初始化视频界面)。*/ 
	type:number,

	/**（必填项）用户的帐号(暂时仅支持传一个)。*/ 
	callees:Array,

	/**（可选项）服务器录制音频/视频开关。*/ 
	serverRecord?:boolean,

	/**（可选项）是否打开视频图像根据设备角度自动旋转。*/ 
	autoRotateRemoteVideo?:boolean,

	/**（必填项）仅在主叫发起点对点通话时设置有效，用于在主被叫之间传递额外信息，被叫收到呼叫时会携带该信息。*/ 
	ext:JSON,

}

interface nim_responseCall_Params {
	/**（必填项）call id。*/ 
	callID:string,

	/**（可选项）是否接听。*/ 
	accept?:boolean,

	/**（必填项）呼叫类型 1:音频 2:视频(如果是视频通话，请先执行initCallRemoteView接口，初始化视频界面)。*/ 
	type:number,

	/**（可选项）服务器录制音频/视频开关。*/ 
	serverRecord?:boolean,

	/**（可选项）是否打开视频图像根据设备角度自动旋转。*/ 
	autoRotateRemoteVideo?:boolean,

}

interface nim_callControl_Params {
	/**（必填项）call id。*/ 
	callID:string,

	/**（可选项）控制类型（1:开启了音频 2:关闭了音频 3:开启了视频 4:关闭了视频 5:切换到视频模式 6:同意切换到视频模式 7:拒绝切换到视频模式 8:切换到音频模式 9:占线 10:没有可用摄像头[仅ios有效] 11:应用切换到了后台[仅ios有效] 12:收到呼叫请求的反馈 13:开始录制 14:结束录制）。*/ 
	type?:number,

}

interface nim_callHangup_Params {
	/**（必填项）call id。*/ 
	callID:string,

}

interface nim_initCallRemoteView_Params {
	/**（必填项）远程视频显示的位置及尺寸*/ 
	remoteRect:JSON,

	/**（必填项）本地视频显示的位置及尺寸*/ 
	localRect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface nim_setCallMute_Params {
	/**（可选项）是否开启静音。*/ 
	mute?:string,

}

interface nim_setCallSpeaker_Params {
	/**（可选项）是否开启扬声器。*/ 
	useSpeaker?:string,

}

interface nim_sendMessageReceipt_Params {
	/**（必填项）待撤回消息Id。*/ 
	messageId:string,

	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。（仅iOS）*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。（仅iOS）*/ 
	sessionType:number,

}

interface nim_markAllMessagesReadInSession_Params {
	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。*/ 
	sessionType:number,

}

interface nim_updateTeamAvatar_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）群头像.*/ 
	avatarUrl:string,

}

interface nim_updateUserNick_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）群成员ID.*/ 
	userId:string,

	/**（必填项）新的群成员昵称.*/ 
	newNick:string,

}

interface nim_updateMyTeamNick_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）新的群成员昵称.*/ 
	newNick:string,

}

interface nim_updateTeamCustomInfo_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（可选项）自定义信息.*/ 
	clientCustomInfo?:string,

}

interface nim_updateMuteStateByUserId_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）群成员Id.*/ 
	userId:string,

	/**（可选项）是否禁言.*/ 
	mute?:boolean,

}

interface nim_updateMuteStateByAll_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（可选项）是否禁言.*/ 
	mute?:boolean,

}

interface nim_queryTeamMemberByUserId_Params {
	/**（必填项）群Id。*/ 
	teamId:string,

	/**（必填项）群成员Id。*/ 
	userId:string,

}

interface nim_setSystemMessageStatus_Params {
	/**（必填项）系统消息Id。*/ 
	messageId:string,

	/**（必填项）消息状态(0:未处理状态 1:已通过验证 2:已拒绝 3:已忽略 4:已过期 5:开发者可自定义的扩展类型1 6:开发者可自定义的扩展类型2 7:开发者可自定义的扩展类型3 8:开发者可自定义的扩展类型4 9:开发者可自定义的扩展类型5)。*/ 
	messageStatus:string,

}

interface nim_deleteSystemMessage_Params {
	/**（必填项）系统消息Id。*/ 
	messageId:string,

}

interface nim_setSystemMessageRead_Params {
	/**（必填项）系统消息Id。*/ 
	messageId:string,

}

interface nim_revokeMessage_Params {
	/**（必填项）待撤回消息Id。*/ 
	messageId:string,

	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。（仅iOS）*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。（仅iOS）*/ 
	sessionType:number,

}

interface nim_isMyFriend_Params {
	/**（必填项）待判断用户账号。*/ 
	account:boolean,

}

interface nim_isMyTeam_Params {
	/**（必填项）待判断群号。*/ 
	teamId:boolean,

}

interface nim_deleteRecentSession_Params {
	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。*/ 
	sessionType:number,

}

interface nim_downloadAttachment_Params {
	/**（必填项）待下载附件的消息Id。*/ 
	messageId:string,

	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。（仅iOS）*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。（仅iOS）*/ 
	sessionType:number,

}

interface nim_enablePushService_Params {
	/**（必填项）开启或者关闭。*/ 
	enable:boolean,

}

interface nim_sendTips_Params {
	/**（必填项）单聊时聊天人的userid, 群聊时groupid, 聊天室的id。*/ 
	sessionId:string,

	/**（必填项）0-单聊,1-群聊, 2- 聊天室。*/ 
	sessionType:number,

	/**（必填项）提示消息内容。*/ 
	content:string,

	/**（可选项）自定义扩展字段*/ 
	ext?:JSON,

}

interface DouYinPlatform {
	/** 分享单图/多图到抖音；分享图片要求：宽高都大于360/高宽比需满足区间 1/2.2-2.2；分享视频要求：时长要求在3s以上/格式要求mp4文件，且文件支持解析/画幅会根据机型白名单判断是否支持更高分辨率的，非白名单最短边不大于1100px，机型白名单以内是4096*2160*/ 
	share(callback?: (ret:JSON) => void):void

	/** 第三方登录*/ 
	auth():void

}
interface IFlyVoice {
	/** 初始化语音合成对象(Android使用语音合成必须先调用此接口)*/ 
	initSpeechSynthesizer():void

	/** 暂停语音播放，暂停播放之后，合成不会暂停，仍会继续*/ 
	pauseSpeaking():void

	/** 停止播放并停止合成*/ 
	stopSpeaking():void

	/** 语音合成相关监听*/ 
	addSyntheticListener():void

	/** 初始化命令词对象(Android使用命令词必须先调用此接口)*/ 
	initSpeechRecognizer():void

	/** 语法上传*/ 
	buildGrammar(callback?: (ret:JSON) => void):void

	/** 开始本地识别*/ 
	startListening(callback?: (ret:JSON) => void):void

	/** 调用此函数会停止录音，并开始进行语音识别*/ 
	stopListening():void

	/** 离线命令词识别相关监听*/ 
	addGrammarListener():void

}
interface navigator {
	/**
	 * `判断当前设备是否已安装高德、谷歌、百度地图`
	 * ========params==========
	 *
	 * `target` :string : 判断的对象，取值范围如下：
	 */
	installed(params:navigator_installed_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开百度地图并开始导航`
	 * ========params==========
	 *
	 * `start` :JSON : 起点信息，**地址和经纬度信息，不能同时为空（不传）**
	 *
	 * `end` :JSON : 终点信息，**地址和经纬度信息，不能同时为空（不传）**
	 *
	 * `mode` :string : （可选项）导航路线类型，取值范围如下：
	 */
	bMapNavigation(params:navigator_bMapNavigation_Params):void

	/**
	 * `打开高德地图并开始从当前位置导航，**iOS 平台上导航结束可跳转回本应用（确保config 配置无误）**`
	 * ========params==========
	 *
	 * `end` :JSON : 终点信息
	 *
	 * `dev` :boolean : 是否偏移（国测加密，wgs84 坐标系）
	 *
	 * `strategy` :string : 导航路线策略，取值范围如下：
	 */
	aMapNavigation(params:navigator_aMapNavigation_Params):void

	/**
	 * `打开高德地图并开始路线规划`
	 * ========params==========
	 *
	 * `start` :JSON : （可选项）起点信息
	 *
	 * `end` :JSON : 终点信息
	 *
	 * `mode` :string : 导航路线类型，取值范围如下：
	 *
	 * `strategy` :string : 导航路线策略，取值范围如下：
	 */
	aMapPath(params:navigator_aMapPath_Params):void

	/**
	 * `打开谷歌地图并开始导航`
	 * ========params==========
	 *
	 * `start` :JSON : （可选项）起点信息，**若不传则已当前位置为起点**
	 *
	 * `end` :JSON : （可选项）终点信息，**若不传则已当前位置为起点**
	 *
	 * `mode` :string : 导航路线类型，取值范围如下：
	 */
	gMapNavigation(params:navigator_gMapNavigation_Params):void

	/**
	 * `打开苹果自带地图并开始导航`
	 * ========params==========
	 *
	 * `start` :JSON : （可选项）起点信息，**若不传 则以当前位置为起点**
	 *
	 * `end` :JSON : 终点信息
	 *
	 * `mode` :string : 导航路线类型，取值范围如下：
	 */
	appleNavigation(params:navigator_appleNavigation_Params):void

}
interface navigator_installed_Params {
	/**判断的对象，取值范围如下：*/ 
	target:string,

}

interface navigator_bMapNavigation_Params {
	/**起点信息，**地址和经纬度信息，不能同时为空（不传）***/ 
	start:JSON,

	/**终点信息，**地址和经纬度信息，不能同时为空（不传）***/ 
	end:JSON,

	/**（可选项）导航路线类型，取值范围如下：*/ 
	mode?:string,

}

interface navigator_aMapNavigation_Params {
	/**终点信息*/ 
	end:JSON,

	/**是否偏移（国测加密，wgs84 坐标系）*/ 
	dev:boolean,

	/**导航路线策略，取值范围如下：*/ 
	strategy:string,

}

interface navigator_aMapPath_Params {
	/**（可选项）起点信息*/ 
	start?:JSON,

	/**终点信息*/ 
	end:JSON,

	/**导航路线类型，取值范围如下：*/ 
	mode:string,

	/**导航路线策略，取值范围如下：*/ 
	strategy:string,

}

interface navigator_gMapNavigation_Params {
	/**（可选项）起点信息，**若不传则已当前位置为起点***/ 
	start?:JSON,

	/**（可选项）终点信息，**若不传则已当前位置为起点***/ 
	end?:JSON,

	/**导航路线类型，取值范围如下：*/ 
	mode:string,

}

interface navigator_appleNavigation_Params {
	/**（可选项）起点信息，**若不传 则以当前位置为起点***/ 
	start?:JSON,

	/**终点信息*/ 
	end:JSON,

	/**导航路线类型，取值范围如下：*/ 
	mode:string,

}

interface swiftpassPay {
	/**
	 * `统一支付接口`
	 * ========params==========
	 *
	 * `title` :string : 商品描述交易字段格式根据不同的应用场景按照以下格式：
	 *
	 * `notifyUrl` :string : 后台通知url
	 *
	 * `tradeNumber` :string : 订单号（少于32位，可以包含字母，必须保证订单号的唯一性）
	 *
	 * `totalFee` :number : 总金额（单位：分，必须是整数）
	 *
	 * `limitCreditPay` :number : 是否限制信用卡支付
	 */
	pay(params:swiftpassPay_pay_Params, callback?: (ret:JSON) => void):void

}
interface swiftpassPay_pay_Params {
	/**商品描述交易字段格式根据不同的应用场景按照以下格式：*/ 
	title:string,

	/**后台通知url*/ 
	notifyUrl:string,

	/**订单号（少于32位，可以包含字母，必须保证订单号的唯一性）*/ 
	tradeNumber:string,

	/**总金额（单位：分，必须是整数）*/ 
	totalFee:number,

	/**是否限制信用卡支付*/ 
	limitCreditPay:number,

}

interface faceUnity {
	/**
	 * `初始化（仅android支持）`
	 * ========params==========
	 *
	 * `authdata` :string : 密钥数组，base64字符串；必须配置好密钥，SDK才能正常工作
	 */
	init(params:faceUnity_init_Params, callback?: (ret:JSON) => void):void

}
interface faceUnity_init_Params {
	/**密钥数组，base64字符串；必须配置好密钥，SDK才能正常工作*/ 
	authdata:string,

}

interface hwOBS {
	/**
	 * `初始化OBS客户端`
	 * ========params==========
	 *
	 * `accessKey` :string : Access Key ID，接入键标识，用户在对象存储服务系统中的接入键标识，一个接入键标识唯一对应一个用户，一个用户可以同时拥有多个接入键标识。对象存储服务系统通过接入键标识识别访问系统的用户
	 *
	 * `secretKey` :string : Secret Access Key，安全接入键，用户在对象存储服务系统中的安全接入键，是用户访问对象存储服务系统的密钥，用户根据安全接入键和请求头域生成鉴权信息。安全接入键和接入键标识一一对应。
	 *
	 * `endPoint` :string : 可以从[这里](https://developer.huaweicloud.com/endpoint)查看OBS当前开通的服务地址和区域信息
	 */
	initClient(params:hwOBS_initClient_Params):void

	/**
	 * `创建桶`
	 * ========params==========
	 *
	 * `bucketName` :string : 桶的名字。桶的名字是全局唯一的，所以您需要确保不与已有的桶名称重复
	 *
	 * `storage` :string : （可选项）存储模式。
	 *
	 * `location` :string : （可选项）区域位置。创建桶时，如果使用的终端节点归属于默认区域华北-北京一（cn-north-1），则可以不指定区域；如果使用的终端节点归属于其他区域，则必须指定区域，且指定的区域必须与终端节点归属的区域一致。当前有效的区域名称有：cn-north-1、cn-east-2、cn-south-1、ap-southeast-1
	 */
	createBucket(params:hwOBS_createBucket_Params, callback?: (ret:JSON) => void):void

	/** 列举桶*/ 
	listBucket(callback?: (ret:JSON) => void):void

	/**
	 * `删除桶`
	 * ========params==========
	 *
	 * `bucketName` :string : 桶的名字
	 */
	deleteBucket(params:hwOBS_deleteBucket_Params, callback?: (ret:JSON) => void):void

	/**
	 * `上传文件`
	 * ========params==========
	 *
	 * `path` :string : 上传的文件的路径，要求本地路径（fs://、widget://）；Android仅支持fs://
	 *
	 * `bucketName` :string : 桶的名字
	 *
	 * `objectKey` :string : 对象描述标识
	 *
	 * `background` :boolean : （可选项）是否开启后台上传，为true时，当应用退出到后台后，上传任务仍然会进行
	 */
	uploadFile(params:hwOBS_uploadFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `列举对象`
	 * ========params==========
	 *
	 * `bucketName` :string : 桶的名字
	 *
	 * `prefix` :string : （可选项）列举以指定的字符串prefix开头的对象
	 *
	 * `count` :any : （可选项）指定列举数目
	 */
	listObject(params:hwOBS_listObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取云存储对象（该方法仅支持Android）`
	 * ========params==========
	 *
	 * `bucketName` :string : 桶的名字
	 *
	 * `objectKey` :string : 对象KEY
	 *
	 * `savePath` :string : 保存路径（仅支持fs:// 及 Android系统本地路径）
	 */
	getObject(params:hwOBS_getObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除对象`
	 * ========params==========
	 *
	 * `bucketName` :string : 桶的名字
	 *
	 * `objectKey` :string : 对象KEY
	 */
	deleteObject(params:hwOBS_deleteObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置桶标签`
	 * ========params==========
	 *
	 * `bucketName` :string : 桶的名字
	 *
	 * `tagKey` :string : 标签key
	 *
	 * `tagValue` :string : 标签value
	 */
	setTag(params:hwOBS_setTag_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查看桶标签`
	 * ========params==========
	 *
	 * `bucketName` :string : 桶的名字
	 */
	getTag(params:hwOBS_getTag_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除桶标签`
	 * ========params==========
	 *
	 * `bucketName` :string : 桶的名字
	 */
	deleteTag(params:hwOBS_deleteTag_Params, callback?: (ret:JSON) => void):void

}
interface hwOBS_initClient_Params {
	/**Access Key ID，接入键标识，用户在对象存储服务系统中的接入键标识，一个接入键标识唯一对应一个用户，一个用户可以同时拥有多个接入键标识。对象存储服务系统通过接入键标识识别访问系统的用户*/ 
	accessKey:string,

	/**Secret Access Key，安全接入键，用户在对象存储服务系统中的安全接入键，是用户访问对象存储服务系统的密钥，用户根据安全接入键和请求头域生成鉴权信息。安全接入键和接入键标识一一对应。*/ 
	secretKey:string,

	/**可以从[这里](https://developer.huaweicloud.com/endpoint)查看OBS当前开通的服务地址和区域信息*/ 
	endPoint:string,

}

interface hwOBS_createBucket_Params {
	/**桶的名字。桶的名字是全局唯一的，所以您需要确保不与已有的桶名称重复*/ 
	bucketName:string,

	/**（可选项）存储模式。*/ 
	storage?:string,

	/**（可选项）区域位置。创建桶时，如果使用的终端节点归属于默认区域华北-北京一（cn-north-1），则可以不指定区域；如果使用的终端节点归属于其他区域，则必须指定区域，且指定的区域必须与终端节点归属的区域一致。当前有效的区域名称有：cn-north-1、cn-east-2、cn-south-1、ap-southeast-1*/ 
	location?:string,

}

interface hwOBS_deleteBucket_Params {
	/**桶的名字*/ 
	bucketName:string,

}

interface hwOBS_uploadFile_Params {
	/**上传的文件的路径，要求本地路径（fs://、widget://）；Android仅支持fs://*/ 
	path:string,

	/**桶的名字*/ 
	bucketName:string,

	/**对象描述标识*/ 
	objectKey:string,

	/**（可选项）是否开启后台上传，为true时，当应用退出到后台后，上传任务仍然会进行*/ 
	background?:boolean,

}

interface hwOBS_listObject_Params {
	/**桶的名字*/ 
	bucketName:string,

	/**（可选项）列举以指定的字符串prefix开头的对象*/ 
	prefix?:string,

	/**（可选项）指定列举数目*/ 
	count?:any,

}

interface hwOBS_getObject_Params {
	/**桶的名字*/ 
	bucketName:string,

	/**对象KEY*/ 
	objectKey:string,

	/**保存路径（仅支持fs:// 及 Android系统本地路径）*/ 
	savePath:string,

}

interface hwOBS_deleteObject_Params {
	/**桶的名字*/ 
	bucketName:string,

	/**对象KEY*/ 
	objectKey:string,

}

interface hwOBS_setTag_Params {
	/**桶的名字*/ 
	bucketName:string,

	/**标签key*/ 
	tagKey:string,

	/**标签value*/ 
	tagValue:string,

}

interface hwOBS_getTag_Params {
	/**桶的名字*/ 
	bucketName:string,

}

interface hwOBS_deleteTag_Params {
	/**桶的名字*/ 
	bucketName:string,

}

interface gensee {
	/** 打开一个直播或点播*/ 
	playGS():void

	/** 关闭直播或者点播*/ 
	close():void

	/** 设置视频区域和文档区域的显示与隐藏*/ 
	changeVisible():void

	/**
	 * `发送聊天消息。`
	 * ========params==========
	 *
	 * `content` :string : 聊天消息纯文本。
	 *
	 * `richtext` :any : 聊天消息富文本。
	 */
	sendMsg(params:gensee_sendMsg_Params):void

	/** 文档区域全屏显示*/ 
	fullscreen():void

	/** 文档区域取消全屏*/ 
	cancelFullscreen():void

	/**
	 * `设置文档或者摄像头区域的位置及大小`
	 * ========params==========
	 *
	 * `type` :string : 要设置的区域，video为摄像头区域，doc文档区域。
	 *
	 * `rect` :JSON : （可选项）文档或摄像头区域的位置及尺寸
	 */
	setRect(params:gensee_setRect_Params):void

	/**
	 * `点播播放的位置,isVod=true的条件下有效。`
	 * ========params==========
	 *
	 * `pos` :any : 点播播放的位置，单位为毫秒。
	 */
	seek(params:gensee_seek_Params):void

	/** 文档和摄像头区域互换位置大小,仅当playGS（）中switchFlag==true时有效*/ 
	switchDV():void

	/** 设置视频的显示方式，可设置平铺或者自适应*/ 
	setRenderMode():void

	/** 直播间邀请回应*/ 
	inviteAck():void

	/** 点名应答。*/ 
	rollCallAck():void

	/** 举手或放手。*/ 
	handUp():void

	/** 参与投票/答题卡（答题）后提交*/ 
	voteSubmit():void

	/** 提问并发送。*/ 
	question():void

	/** 获取当前使用的线路，点播条件下无效。*/ 
	getCurIdc():void

	/** 切换线路，点播条件下无效。*/ 
	setIdcId():void

}
interface gensee_sendMsg_Params {
	/**聊天消息纯文本。*/ 
	content:string,

	/**聊天消息富文本。*/ 
	richtext:any,

}

interface gensee_setRect_Params {
	/**要设置的区域，video为摄像头区域，doc文档区域。*/ 
	type:string,

	/**（可选项）文档或摄像头区域的位置及尺寸*/ 
	rect?:JSON,

}

interface gensee_seek_Params {
	/**点播播放的位置，单位为毫秒。*/ 
	pos:any,

}

interface duiBa {
	/**
	 * `打开积分商城页面`
	 * ========params==========
	 *
	 * `url` :string : 开发者后台生成的免登陆URL
	 *
	 * `navColor` :string : （可选项）兑吧页面导航条的背景颜色，请用#ffffff长格式。
	 *
	 * `titleColor` :string : （可选项）兑吧页面导航条的背景颜色，请用#ffffff长格式。
	 */
	open(params:duiBa_open_Params):void

}
interface duiBa_open_Params {
	/**开发者后台生成的免登陆URL*/ 
	url:string,

	/**（可选项）兑吧页面导航条的背景颜色，请用#ffffff长格式。*/ 
	navColor?:string,

	/**（可选项）兑吧页面导航条的背景颜色，请用#ffffff长格式。*/ 
	titleColor?:string,

}

interface MobileArk {
	/** APP 之间可以通过 OpenUrl 方式传递参数，在实现单点登录的过程中，MobileArk 可 以跟 Native APP 在实现单点登录的过程中传递 secretToken 等参数，以实现认证信息的交互 传递。如图 3-2 所示，APP 在登录的时候通过 OpenUrl 启动 MobileArk 进行登录，MobileArk 登录后通过 OpenUrl 方式想 APP 传递登录参数，实现单点登录。*/ 
	startConnectSSO():void

	/** 新版单点登录,自动刷新 token,用于单点登录V2接口*/ 
	getToken(callback?: (ret:JSON) => void):void

	/** 获取用户名户密码以及 ECID 用于单点登录V2接口*/ 
	getParam():void

	/**
	 * `将服务器端获取的加密秘钥设置到 SDK 中和客户端的加密因子合并，在 SDK 内生成加密密钥。`
	 * ========params==========
	 *
	 * `key` :string : 服务端返回的公钥
	 */
	setOnlineKey(params:MobileArk_setOnlineKey_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加密数据`
	 * ========params==========
	 *
	 * `fileName` :string : 文件名（该参数只适用于ios平台）
	 *
	 * `data` :string : 加密数据（该参数只适用于android平台）
	 */
	encryptData(params:MobileArk_encryptData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加密数据（该方法仅适用于Android平台）`
	 * ========params==========
	 *
	 * `data` :string : 被加密的数据
	 */
	decryptData(params:MobileArk_decryptData_Params, callback?: (ret:JSON) => void):void

	/** 加密文件（该方法仅适用于ios平台）*/ 
	encryptContentsOfFile(callback?: (ret:JSON) => void):void

	/**
	 * `解密数据（该方法仅适用于ios平台）`
	 * ========params==========
	 *
	 * `encodedFileName` :string : 加密后写入的文件（支持widget:// fs://）
	 */
	dencryptDataFromFile(params:MobileArk_dencryptDataFromFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解密文件（该方法仅适用于ios平台）`
	 * ========params==========
	 *
	 * `encodedFileName` :string : 需要加密的文件
	 *
	 * `decodedFileName` :string : 解密后写入的文件
	 */
	decryptContentFile(params:MobileArk_decryptContentFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取个人文档列表`
	 * ========params==========
	 *
	 * `userName` :string : 登录用户名称（仅Android平台使用此参数）
	 *
	 * `password` :string : 登录密码（仅Android平台使用此参数）
	 *
	 * `ip` :string : 登录IP（仅Android平台使用此参数）
	 *
	 * `port` :string : 登录端口（仅Android平台使用此参数）
	 *
	 * `version` :string : 协议版本
	 *
	 * `folderid` :string : 文件夹 id 当为-1 时，获取根企业目录
	 *
	 * `order` :string : 0 大小 1 时间 2 名称 默认 2
	 *
	 * `type` :string : 获得文档类型 1:企业文档 2:个人文档 3:共享文档,当无 该字段时,默认为 1
	 */
	getDocumentList(params:MobileArk_getDocumentList_Params, callback?: (ret:JSON) => void):void

	/**
	 * ` 获取文件下载地址或预览地址(该请求由 System App 向 EMP Manager 发起，用户在 System App 中获取文件的 下载地址或预览地址)`
	 * ========params==========
	 *
	 * `userName` :string : 登录用户名称（仅Android平台使用此参数）
	 *
	 * `password` :string : 登录密码（仅Android平台使用此参数）
	 *
	 * `ip` :string : 登录IP（仅Android平台使用此参数）
	 *
	 * `port` :string : 登录端口（仅Android平台使用此参数）
	 *
	 * `version` :string : 协议版本
	 *
	 * `documentid` :string : 文档 ID
	 *
	 * `operatortype` :string : 操作类型，1-获取文档下载地址，2-获取文档预览地址
	 *
	 * `type` :string : 获得文档类型 1:企业文档 2:个人文档 3:共享文档,当无 该字段时,默认为 1
	 */
	getDocDownloadUrlOrPreviewUrl(params:MobileArk_getDocDownloadUrlOrPreviewUrl_Params, callback?: (ret:JSON) => void):void

	/**
	 * ` 文件上传(该请求由 System App 向 EMP Manager 发起，用户在 System App 中获取文件的 下载地址或预览地址)`
	 * ========params==========
	 *
	 * `userName` :string : 登录用户名称（仅Android平台使用此参数）
	 *
	 * `password` :string : 登录密码（仅Android平台使用此参数）
	 *
	 * `ip` :string : 登录IP（仅Android平台使用此参数）
	 *
	 * `port` :string : 登录端口（仅Android平台使用此参数）
	 *
	 * `version` :string : 协议版本
	 *
	 * `filePath` :string : 上传文件路径（仅Android平台使用此参数）
	 *
	 * `folderid` :string : 文件夹 ID
	 *
	 * `foldertype` :string : 文件夹类型类型，1-企业文件，2-个人文件
	 *
	 * `filedepartment` :string : 文件部门
	 */
	uploadLocalFile(params:MobileArk_uploadLocalFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * ` 应用更新检测`
	 * ========params==========
	 *
	 * `appID` :string : 应用 ID
	 *
	 * `appversion` :string : 应用版本号
	 */
	checkAppVersion(params:MobileArk_checkAppVersion_Params, callback?: (ret:JSON) => void):void

	/**
	 * ` 应用安装更新检测`
	 * ========params==========
	 *
	 * `appID` :string : 应用 ID
	 *
	 * `appversion` :string : 应用版本号
	 */
	appInstallForIOS(params:MobileArk_appInstallForIOS_Params, callback?: (ret:JSON) => void):void

	/** 唤起手势密码页面 (该方法只适用于Android平台)*/ 
	showGestureView(callback?: (ret:JSON) => void):void

}
interface MobileArk_setOnlineKey_Params {
	/**服务端返回的公钥*/ 
	key:string,

}

interface MobileArk_encryptData_Params {
	/**文件名（该参数只适用于ios平台）*/ 
	fileName:string,

	/**加密数据（该参数只适用于android平台）*/ 
	data:string,

}

interface MobileArk_decryptData_Params {
	/**被加密的数据*/ 
	data:string,

}

interface MobileArk_dencryptDataFromFile_Params {
	/**加密后写入的文件（支持widget:// fs://）*/ 
	encodedFileName:string,

}

interface MobileArk_decryptContentFile_Params {
	/**需要加密的文件*/ 
	encodedFileName:string,

	/**解密后写入的文件*/ 
	decodedFileName:string,

}

interface MobileArk_getDocumentList_Params {
	/**登录用户名称（仅Android平台使用此参数）*/ 
	userName:string,

	/**登录密码（仅Android平台使用此参数）*/ 
	password:string,

	/**登录IP（仅Android平台使用此参数）*/ 
	ip:string,

	/**登录端口（仅Android平台使用此参数）*/ 
	port:string,

	/**协议版本*/ 
	version:string,

	/**文件夹 id 当为-1 时，获取根企业目录*/ 
	folderid:string,

	/**0 大小 1 时间 2 名称 默认 2*/ 
	order:string,

	/**获得文档类型 1:企业文档 2:个人文档 3:共享文档,当无 该字段时,默认为 1*/ 
	type:string,

}

interface MobileArk_getDocDownloadUrlOrPreviewUrl_Params {
	/**登录用户名称（仅Android平台使用此参数）*/ 
	userName:string,

	/**登录密码（仅Android平台使用此参数）*/ 
	password:string,

	/**登录IP（仅Android平台使用此参数）*/ 
	ip:string,

	/**登录端口（仅Android平台使用此参数）*/ 
	port:string,

	/**协议版本*/ 
	version:string,

	/**文档 ID*/ 
	documentid:string,

	/**操作类型，1-获取文档下载地址，2-获取文档预览地址*/ 
	operatortype:string,

	/**获得文档类型 1:企业文档 2:个人文档 3:共享文档,当无 该字段时,默认为 1*/ 
	type:string,

}

interface MobileArk_uploadLocalFile_Params {
	/**登录用户名称（仅Android平台使用此参数）*/ 
	userName:string,

	/**登录密码（仅Android平台使用此参数）*/ 
	password:string,

	/**登录IP（仅Android平台使用此参数）*/ 
	ip:string,

	/**登录端口（仅Android平台使用此参数）*/ 
	port:string,

	/**协议版本*/ 
	version:string,

	/**上传文件路径（仅Android平台使用此参数）*/ 
	filePath:string,

	/**文件夹 ID*/ 
	folderid:string,

	/**文件夹类型类型，1-企业文件，2-个人文件*/ 
	foldertype:string,

	/**文件部门*/ 
	filedepartment:string,

}

interface MobileArk_checkAppVersion_Params {
	/**应用 ID*/ 
	appID:string,

	/**应用版本号*/ 
	appversion:string,

}

interface MobileArk_appInstallForIOS_Params {
	/**应用 ID*/ 
	appID:string,

	/**应用版本号*/ 
	appversion:string,

}

interface wxVoice {
	/**
	 * `语音识别配置。`
	 * ========params==========
	 *
	 * `appId` :string : 微信开放平台分配给移动应用的AppID。
	 *
	 * `silTime` :any : （可选项）静音检查时间，开始录音，并检测到有语音产生后，超过此时间没有声音，则自动完成本次录音，单位：秒
	 *
	 * `resultType` :any : （可选项）设置识别类型，0无标点，1有标点
	 */
	speechRecognizerConfiguration(params:wxVoice_speechRecognizerConfiguration_Params):void

	/**
	 * `语音识别开始。`
	 * ========params==========
	 *
	 * `grammarString` :string : （可选项）使用ABNF语法或词表进行语音识别
	 *
	 * `grammarType` :any : （可选项）0：使用ABNF语法，1：使用词表。grammarString有值才有效
	 */
	startSpeechRecognizer(params:wxVoice_startSpeechRecognizer_Params, callback?: (ret:JSON) => void):void

	/** 结束语音识别。*/ 
	finishSpeechRecognizer():void

	/** 取消语音识别。*/ 
	cancelSpeechRecognizer():void

	/**
	 * `语音识别带有UI配置。`
	 * ========params==========
	 *
	 * `appId` :string : 微信开放平台分配给移动应用的AppID。
	 *
	 * `silTime` :any : （可选项）静音检查时间，开始录音，并检测到有语音产生后，超过此时间没有声音，则自动完成本次录音，单位：秒
	 */
	speechRecognizerUIConfiguration(params:wxVoice_speechRecognizerUIConfiguration_Params):void

	/**
	 * `语音识别带有UI开始识别。`
	 * ========params==========
	 *
	 * `grammarString` :string : （可选项）使用ABNF语法或词表进行语音识别
	 *
	 * `grammarType` :any : （可选项）0：使用ABNF语法，1：使用词表。grammarString有值才有效
	 */
	startSpeechRecognizerUI(params:wxVoice_startSpeechRecognizerUI_Params, callback?: (ret:JSON) => void):void

	/**
	 * `语音合成配置。`
	 * ========params==========
	 *
	 * `appId` :string : 微信开放平台分配给移动应用的AppID。
	 *
	 * `volumn` :any : （可选项）音量范围0-2
	 */
	speechSynthesizerConfiguration(params:wxVoice_speechSynthesizerConfiguration_Params):void

	/**
	 * `开始语音合成。`
	 * ========params==========
	 *
	 * `text` :string : 需要合成的文本
	 */
	startSpeechSynthesizer(params:wxVoice_startSpeechSynthesizer_Params, callback?: (ret:JSON) => void):void

	/** 取消语音合成。*/ 
	cancelSpeechSynthesizer():void

}
interface wxVoice_speechRecognizerConfiguration_Params {
	/**微信开放平台分配给移动应用的AppID。*/ 
	appId:string,

	/**（可选项）静音检查时间，开始录音，并检测到有语音产生后，超过此时间没有声音，则自动完成本次录音，单位：秒*/ 
	silTime?:any,

	/**（可选项）设置识别类型，0无标点，1有标点*/ 
	resultType?:any,

}

interface wxVoice_startSpeechRecognizer_Params {
	/**（可选项）使用ABNF语法或词表进行语音识别*/ 
	grammarString?:string,

	/**（可选项）0：使用ABNF语法，1：使用词表。grammarString有值才有效*/ 
	grammarType?:any,

}

interface wxVoice_speechRecognizerUIConfiguration_Params {
	/**微信开放平台分配给移动应用的AppID。*/ 
	appId:string,

	/**（可选项）静音检查时间，开始录音，并检测到有语音产生后，超过此时间没有声音，则自动完成本次录音，单位：秒*/ 
	silTime?:any,

}

interface wxVoice_startSpeechRecognizerUI_Params {
	/**（可选项）使用ABNF语法或词表进行语音识别*/ 
	grammarString?:string,

	/**（可选项）0：使用ABNF语法，1：使用词表。grammarString有值才有效*/ 
	grammarType?:any,

}

interface wxVoice_speechSynthesizerConfiguration_Params {
	/**微信开放平台分配给移动应用的AppID。*/ 
	appId:string,

	/**（可选项）音量范围0-2*/ 
	volumn?:any,

}

interface wxVoice_startSpeechSynthesizer_Params {
	/**需要合成的文本*/ 
	text:string,

}

interface baiduSpeechAAR {
	/** 初始化百度语音识别*/ 
	initAAR(callback?: (ret:JSON) => void):void

	/** 开始语音识别*/ 
	start(callback?: (ret:JSON) => void):void

	/** 结束语音识别，并返回识别结果，识别结果在start的回调函数中*/ 
	end():void

}
interface apibase {
	/**
	 * `图片按比例缩放大小，并且保存到指定目录。`
	 * ========params==========
	 *
	 * `httpurl` :string : 云数据接口请求地址。
	 *
	 * `appid` :string : 应用程序appid，到http://www.apibase.cn申请获得。
	 *
	 * `appkey` :string : 应用程序密码，到http://www.apibase.cn申请获得。
	 *
	 * `sqlid` :string : 云数据接口编号，对应云服务器数据库SQL语句。
	 */
	interface(params:apibase_interface_Params, callback?: (ret:JSON) => void):void

}
interface apibase_interface_Params {
	/**云数据接口请求地址。*/ 
	httpurl:string,

	/**应用程序appid，到http://www.apibase.cn申请获得。*/ 
	appid:string,

	/**应用程序密码，到http://www.apibase.cn申请获得。*/ 
	appkey:string,

	/**云数据接口编号，对应云服务器数据库SQL语句。*/ 
	sqlid:string,

}

interface bgnTencentOCR {
	/**
	 * `名片OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据。
	 */
	bc(params:bgnTencentOCR_bc_Params, callback?: (ret:JSON) => void):void

	/**
	 * `营业执照OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据。
	 */
	bizlicense(params:bgnTencentOCR_bizlicense_Params, callback?: (ret:JSON) => void):void

	/**
	 * `银行卡OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据。
	 */
	creditcard(params:bgnTencentOCR_creditcard_Params, callback?: (ret:JSON) => void):void

	/**
	 * `行驶证驾驶证OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据。
	 *
	 * `type` :any : （必填项）识别类型，0-行驶证识别，1-驾驶证识别。
	 */
	driverlicense(params:bgnTencentOCR_driverlicense_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通用OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据。
	 */
	general(params:bgnTencentOCR_general_Params, callback?: (ret:JSON) => void):void

	/**
	 * `手写体OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据。
	 */
	handwriting(params:bgnTencentOCR_handwriting_Params, callback?: (ret:JSON) => void):void

	/**
	 * `银行卡OCR解析`
	 * ========params==========
	 *
	 * `image` :any : （必填项）身份证图片类型，0-正面，1-反面。
	 */
	idcard(params:bgnTencentOCR_idcard_Params, callback?: (ret:JSON) => void):void

	/**
	 * `车牌OCR解析`
	 * ========params==========
	 *
	 * `image` :string : （必填项）base64格式图片数据或者图片url地址。
	 */
	plate(params:bgnTencentOCR_plate_Params, callback?: (ret:JSON) => void):void

}
interface bgnTencentOCR_bc_Params {
	/**（必填项）base64格式图片数据。*/ 
	image:string,

}

interface bgnTencentOCR_bizlicense_Params {
	/**（必填项）base64格式图片数据。*/ 
	image:string,

}

interface bgnTencentOCR_creditcard_Params {
	/**（必填项）base64格式图片数据。*/ 
	image:string,

}

interface bgnTencentOCR_driverlicense_Params {
	/**（必填项）base64格式图片数据。*/ 
	image:string,

	/**（必填项）识别类型，0-行驶证识别，1-驾驶证识别。*/ 
	type:any,

}

interface bgnTencentOCR_general_Params {
	/**（必填项）base64格式图片数据。*/ 
	image:string,

}

interface bgnTencentOCR_handwriting_Params {
	/**（必填项）base64格式图片数据。*/ 
	image:string,

}

interface bgnTencentOCR_idcard_Params {
	/**（必填项）身份证图片类型，0-正面，1-反面。*/ 
	image:any,

}

interface bgnTencentOCR_plate_Params {
	/**（必填项）base64格式图片数据或者图片url地址。*/ 
	image:string,

}

interface soundGeneralRecongnitionSdk {
	/**
	 * `设置初始化监听`
	 * ========params==========
	 *
	 * `appKey` :string : （必填项）声通 appkey,必须的参数。
	 *
	 * `secretKey` :string : （必填项）声通 secretkey,必须的参数。
	 *
	 * `isUseOnlineProvison` :boolean : （可选项）是否需要在线下载证书，默认为 false，(即使用本地证书)
	 *
	 * `isUpdateProvison` :boolean : （可选项）是否需要在线更新证书，默认为 false。若为true，isUseOnlineProvison参数也需设为true
	 *
	 * `vadEnable` :boolean : （可选项）内核支持VAD情况下，是否启用 VAD
	 *
	 * `seek` :number : （可选项）vad 技术 可选，发音结束判断间隔，单位 10ms，
	 *
	 * `server` :string : （可选项）地址
	 *
	 * `serverList` :string : （可选项）获取 serverList 的地址
	 *
	 * `sdkCfgAddr` :string : （可选项）获取 sdkCfgAddr 的地址，Android不支持此参数
	 *
	 * `connectTimeout` :number : （可选项）建立连接的超时时间，单位 s
	 *
	 * `serverTimeout` :number : （可选项）响应的超时时间，单位 s
	 */
	initCloudEngineListener(params:soundGeneralRecongnitionSdk_initCloudEngineListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置开始录制的第一种方式`
	 * ========params==========
	 *
	 * `coreType` :string : （必填项）  请求的内核类型，word.eval:代表单词，sent.eval:代表句子，para.eval:代表段
	 *
	 * `content` :string : （必填项）评测内容;
	 *
	 * `soundIntensityEnable` :boolean : （可选项）是否返回音强，Android不支持此参数
	 *
	 * `attachAudioUrl` :boolean : （可选项）使用云服务时可选，指定服务器使返回结果附带音频下载地址
	 */
	startRecordOne(params:soundGeneralRecongnitionSdk_startRecordOne_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置开始录制的第二种方式`
	 * ========params==========
	 *
	 * `coreType` :string : （必填项）  请求的内核类型，word.eval:代表单词，sent.eval:代表句子，para.eval:代表段
	 *
	 * `refText` :string : （必填项）参考文本，多个参考答案用竖线(|)隔开；音频比对题型中该参数,传入标准音频文件的fs或者widget路径。
	 *
	 * `qType` :number : 非 open.eval 题型默认传 0；open.eval 题型必须，0：短文朗读；1：短文跟读；2：句子翻译；3：段落翻译；4：故事复述；5：看图说话；6：情景问答；7：口头作文
	 *
	 * `soundIntensityEnable` :boolean : （可选项）是否返回音强，Android不支持此参数
	 *
	 * `attachAudioUrl` :boolean : （可选项）使用云服务时可选，指定服务器使返回结果附带音频下载地址
	 */
	startRecordTwo(params:soundGeneralRecongnitionSdk_startRecordTwo_Params, callback?: (ret:JSON) => void):void

	/** 停止录制*/ 
	stopRecord():void

	/** 回放*/ 
	playback():void

}
interface soundGeneralRecongnitionSdk_initCloudEngineListener_Params {
	/**（必填项）声通 appkey,必须的参数。*/ 
	appKey:string,

	/**（必填项）声通 secretkey,必须的参数。*/ 
	secretKey:string,

	/**（可选项）是否需要在线下载证书，默认为 false，(即使用本地证书)*/ 
	isUseOnlineProvison?:boolean,

	/**（可选项）是否需要在线更新证书，默认为 false。若为true，isUseOnlineProvison参数也需设为true*/ 
	isUpdateProvison?:boolean,

	/**（可选项）内核支持VAD情况下，是否启用 VAD*/ 
	vadEnable?:boolean,

	/**（可选项）vad 技术 可选，发音结束判断间隔，单位 10ms，*/ 
	seek?:number,

	/**（可选项）地址*/ 
	server?:string,

	/**（可选项）获取 serverList 的地址*/ 
	serverList?:string,

	/**（可选项）获取 sdkCfgAddr 的地址，Android不支持此参数*/ 
	sdkCfgAddr?:string,

	/**（可选项）建立连接的超时时间，单位 s*/ 
	connectTimeout?:number,

	/**（可选项）响应的超时时间，单位 s*/ 
	serverTimeout?:number,

}

interface soundGeneralRecongnitionSdk_startRecordOne_Params {
	/**（必填项）  请求的内核类型，word.eval:代表单词，sent.eval:代表句子，para.eval:代表段*/ 
	coreType:string,

	/**（必填项）评测内容;*/ 
	content:string,

	/**（可选项）是否返回音强，Android不支持此参数*/ 
	soundIntensityEnable?:boolean,

	/**（可选项）使用云服务时可选，指定服务器使返回结果附带音频下载地址*/ 
	attachAudioUrl?:boolean,

}

interface soundGeneralRecongnitionSdk_startRecordTwo_Params {
	/**（必填项）  请求的内核类型，word.eval:代表单词，sent.eval:代表句子，para.eval:代表段*/ 
	coreType:string,

	/**（必填项）参考文本，多个参考答案用竖线(|)隔开；音频比对题型中该参数,传入标准音频文件的fs或者widget路径。*/ 
	refText:string,

	/**非 open.eval 题型默认传 0；open.eval 题型必须，0：短文朗读；1：短文跟读；2：句子翻译；3：段落翻译；4：故事复述；5：看图说话；6：情景问答；7：口头作文*/ 
	qType:number,

	/**（可选项）是否返回音强，Android不支持此参数*/ 
	soundIntensityEnable?:boolean,

	/**（可选项）使用云服务时可选，指定服务器使返回结果附带音频下载地址*/ 
	attachAudioUrl?:boolean,

}

interface tencentVodPlayer {
	/**
	 * `初始化播放器`
	 * ========params==========
	 *
	 * `maxCacheItems` :number : (可选项)最多缓存文件个数
	 *
	 * `cacheFolderPath` :string : (可选项)视频缓存目录, 点播MP4、HLS有效
	 *
	 * `connectRetry` :JSON : (可选项)重连配置
	 *
	 * `timeout` :any : (可选项)超时时间, 单位秒
	 *
	 * `playerType` :null : null
	 *
	 * `headers` :null : null
	 *
	 * `enableAccurateSeek` :null : null
	 *
	 * `autoRotate` :null : null
	 *
	 * `smoothSwitchBitrate` :null : null
	 *
	 * `progressInterval` :null : null
	 *
	 * `maxBufferSize` :null : null
	 *
	 * `maxCacheItems` :number : (可选项)最多缓存文件个数
	 *
	 * `cacheFolderPath` :string : (可选项)视频缓存目录, 点播MP4、HLS有效
	 *
	 * `connectRetry` :JSON : (可选项)重连配置
	 *
	 * `timeout` :any : (可选项)超时时间, 单位秒
	 *
	 * `playerType` :null : null
	 *
	 * `headers` :null : null
	 *
	 * `enableAccurateSeek` :null : null
	 *
	 * `autoRotate` :null : null
	 *
	 * `smoothSwitchBitrate` :null : null
	 *
	 * `progressInterval` :null : null
	 *
	 * `maxBufferSize` :null : null
	 */
	init(params:tencentVodPlayer_init_Params):void

	/** 销毁播放器*/ 
	destroy():void

	/**
	 * `初始化播放器`
	 * ========params==========
	 *
	 * `maxCacheItems` :number : (可选项)最多缓存文件个数
	 *
	 * `cacheFolderPath` :string : (可选项)视频缓存目录, 点播MP4、HLS有效
	 *
	 * `connectRetry` :JSON : (可选项)重连配置
	 *
	 * `timeout` :any : (可选项)超时时间, 单位秒
	 *
	 * `playerType` :null : null
	 *
	 * `headers` :null : null
	 *
	 * `enableAccurateSeek` :null : null
	 *
	 * `autoRotate` :null : null
	 *
	 * `smoothSwitchBitrate` :null : null
	 *
	 * `progressInterval` :null : null
	 *
	 * `maxBufferSize` :null : null
	 *
	 * `maxCacheItems` :number : (可选项)最多缓存文件个数
	 *
	 * `cacheFolderPath` :string : (可选项)视频缓存目录, 点播MP4、HLS有效
	 *
	 * `connectRetry` :JSON : (可选项)重连配置
	 *
	 * `timeout` :any : (可选项)超时时间, 单位秒
	 *
	 * `playerType` :null : null
	 *
	 * `headers` :null : null
	 *
	 * `enableAccurateSeek` :null : null
	 *
	 * `autoRotate` :null : null
	 *
	 * `smoothSwitchBitrate` :null : null
	 *
	 * `progressInterval` :null : null
	 *
	 * `maxBufferSize` :null : null
	 */
	init(params:tencentVodPlayer_init_Params):void

	/**
	 * `开始播放`
	 * ========params==========
	 *
	 * `url` :string : (必填项)从指定的URL播放
	 *
	 * `fileId` :string : (可选项)文件id, 文件上传转码后会生成唯一的fileId
	 *
	 * `appId` :any : (可选项)引用appId，如果才有fileId模式播放，appId为必填项
	 *
	 * `rect` :JSON : (可选项)播放器的位置以及尺寸
	 *
	 * `rect` :any : (可选项)界面的高度
	 *
	 * `fixedOn` :string : (可选项)模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : (可选项)模块是否随所属 window 或 frame 滚动
	 *
	 * `ret` :boolean : true表示操作成功
	 *
	 * `err` :string : 错误信息
	 */
	start(params:tencentVodPlayer_start_Params):void

	/** 暂停播放*/ 
	pause():void

	/** 继续播放*/ 
	resume():void

	/** 显示播放器界面*/ 
	show():void

	/** 隐藏播放器界面*/ 
	hide():void

	/**
	 * `重置播放器窗口大小`
	 * ========params==========
	 *
	 * `rect` :any : (可选项)界面的高度
	 */
	resize(params:tencentVodPlayer_resize_Params):void

	/** 停止播放*/ 
	stop():void

	/** 销毁播放器*/ 
	destroy():void

	/** 添加事件监听*/ 
	setPlayerEventListener():void

	/** 移除事件监听*/ 
	removePlayerEventListener():void

	/**
	 * `设置开始播放时间`
	 * ========params==========
	 *
	 * `pos` :any : (必填项)要开始播放的起始位置, 小数点后为毫秒
	 */
	setStartTime(params:tencentVodPlayer_setStartTime_Params):void

	/** 是否正在播放*/ 
	isPlaying():void

	/**
	 * `跳转到某个时间播放`
	 * ========params==========
	 *
	 * `value` :any : (必填项)要跳转的时间，单位秒
	 *
	 * `ret` :boolean : true表示操作成功
	 *
	 * `err` :string : 错误信息
	 */
	seek(params:tencentVodPlayer_seek_Params):void

	/** 获取当前播放时间*/ 
	getCurrentPlaybackTime():void

	/** 获取视频总时长*/ 
	getDuration():void

	/** 获取可播放时长*/ 
	getPlayableDuration():void

	/** 获取视频宽度*/ 
	getWidth():void

	/** 获取视频高度*/ 
	getHeight():void

	/**
	 * `设置画面的裁剪模式, 自适应或铺满`
	 * ========params==========
	 *
	 * `mode` :any : (必填项)画面裁剪的模式
	 */
	setRenderMode(params:tencentVodPlayer_setRenderMode_Params):void

	/**
	 * `设置是否静音`
	 * ========params==========
	 *
	 * `isMute` :boolean : (必填项)是否静音
	 */
	setMute(params:tencentVodPlayer_setMute_Params):void

	/**
	 * `屏幕截图; 此功能只会截取当前视频流的视频画面，如果您需要截取当前的整个 UI 界面，请调用其他的模块来实现`
	 * ========params==========
	 *
	 * `path` :string : (必填项)截图保存的路径
	 *
	 * `ret` :JSON : null
	 */
	snapShot(params:tencentVodPlayer_snapShot_Params):void

	/** 设置播放速率*/ 
	setRate():void

	/** 当播放地址为master playlist，返回支持的码率（清晰度）*/ 
	getSupportedBitrates():void

	/** 获取当前正在播放的码率索引*/ 
	getBitrateIndex():void

	/**
	 * `设置当前正在播放的码率索引，无缝切换清晰度 清晰度切换可能需要等待一小段时间; 腾讯云支持多码率HLS分片对齐，保证最佳体验`
	 * ========params==========
	 *
	 * `index` :any : (必填项)码率索引
	 */
	setBitrateIndex(params:tencentVodPlayer_setBitrateIndex_Params):void

	/**
	 * `设置镜像`
	 * ========params==========
	 *
	 * `isMirror` :boolean : (必填项)是否设置镜像
	 */
	setMirror(params:tencentVodPlayer_setMirror_Params):void

	/**
	 * `是否开启硬件加速, 播放前设置有效`
	 * ========params==========
	 *
	 * `isHwAcc` :boolean : (必填项)是否开启硬件加速
	 */
	setHwAcc(params:tencentVodPlayer_setHwAcc_Params):void

	/** 是否开启硬件加速*/ 
	isHwAcc():void

	/**
	 * `设置自动播放`
	 * ========params==========
	 *
	 * `isAutoPlay` :boolean : (必填项)是否自动播放
	 */
	setAutoPlay(params:tencentVodPlayer_setAutoPlay_Params):void

	/** 获取当前是否自动播放*/ 
	isAutoPlay():void

	/**
	 * `设置加密HLS的token`
	 * ========params==========
	 *
	 * `token` :string : (必填项)加密的token
	 */
	setToken(params:tencentVodPlayer_setToken_Params):void

	/** 获取加密HLS的token*/ 
	getToken():void

	/**
	 * `设置是否循环播放`
	 * ========params==========
	 *
	 * `isLoop` :boolean : (可选项)是否循环
	 */
	setLoop(params:tencentVodPlayer_setLoop_Params):void

	/** 初始化下载*/ 
	initDownload():void

	/**
	 * `设置下载文件的根目录`
	 * ========params==========
	 *
	 * `path` :string : (必填项)下载文件的根目录
	 */
	setDownloadPath(params:tencentVodPlayer_setDownloadPath_Params):void

	/**
	 * `开始下载，url和fileId模式二选一`
	 * ========params==========
	 *
	 * `url` :string : (必填项)下载地址
	 *
	 * `fileId` :any : (可选项)指定文件的fileId, 需要同时指定appId
	 *
	 * `appId` :any : (可选项)应用id
	 */
	startDownload(params:tencentVodPlayer_startDownload_Params):void

	/** 停止下载*/ 
	deleteDownloadFile():void

}
interface tencentVodPlayer_init_Params {
	/**(可选项)最多缓存文件个数*/ 
	maxCacheItems?:number,

	/**(可选项)视频缓存目录, 点播MP4、HLS有效*/ 
	cacheFolderPath?:string,

	/**(可选项)重连配置*/ 
	connectRetry?:JSON,

	/**(可选项)超时时间, 单位秒*/ 
	timeout?:any,

	/**null*/ 
	playerType:null,

	/**null*/ 
	headers:null,

	/**null*/ 
	enableAccurateSeek:null,

	/**null*/ 
	autoRotate:null,

	/**null*/ 
	smoothSwitchBitrate:null,

	/**null*/ 
	progressInterval:null,

	/**null*/ 
	maxBufferSize:null,

	/**(可选项)最多缓存文件个数*/ 
	maxCacheItems?:number,

	/**(可选项)视频缓存目录, 点播MP4、HLS有效*/ 
	cacheFolderPath?:string,

	/**(可选项)重连配置*/ 
	connectRetry?:JSON,

	/**(可选项)超时时间, 单位秒*/ 
	timeout?:any,

	/**null*/ 
	playerType:null,

	/**null*/ 
	headers:null,

	/**null*/ 
	enableAccurateSeek:null,

	/**null*/ 
	autoRotate:null,

	/**null*/ 
	smoothSwitchBitrate:null,

	/**null*/ 
	progressInterval:null,

	/**null*/ 
	maxBufferSize:null,

}

interface tencentVodPlayer_init_Params {
	/**(可选项)最多缓存文件个数*/ 
	maxCacheItems?:number,

	/**(可选项)视频缓存目录, 点播MP4、HLS有效*/ 
	cacheFolderPath?:string,

	/**(可选项)重连配置*/ 
	connectRetry?:JSON,

	/**(可选项)超时时间, 单位秒*/ 
	timeout?:any,

	/**null*/ 
	playerType:null,

	/**null*/ 
	headers:null,

	/**null*/ 
	enableAccurateSeek:null,

	/**null*/ 
	autoRotate:null,

	/**null*/ 
	smoothSwitchBitrate:null,

	/**null*/ 
	progressInterval:null,

	/**null*/ 
	maxBufferSize:null,

	/**(可选项)最多缓存文件个数*/ 
	maxCacheItems?:number,

	/**(可选项)视频缓存目录, 点播MP4、HLS有效*/ 
	cacheFolderPath?:string,

	/**(可选项)重连配置*/ 
	connectRetry?:JSON,

	/**(可选项)超时时间, 单位秒*/ 
	timeout?:any,

	/**null*/ 
	playerType:null,

	/**null*/ 
	headers:null,

	/**null*/ 
	enableAccurateSeek:null,

	/**null*/ 
	autoRotate:null,

	/**null*/ 
	smoothSwitchBitrate:null,

	/**null*/ 
	progressInterval:null,

	/**null*/ 
	maxBufferSize:null,

}

interface tencentVodPlayer_start_Params {
	/**(必填项)从指定的URL播放*/ 
	url:string,

	/**(可选项)文件id, 文件上传转码后会生成唯一的fileId*/ 
	fileId?:string,

	/**(可选项)引用appId，如果才有fileId模式播放，appId为必填项*/ 
	appId?:any,

	/**(可选项)播放器的位置以及尺寸*/ 
	rect?:JSON,

	/**(可选项)界面的高度*/ 
	rect?:any,

	/**(可选项)模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**(可选项)模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**true表示操作成功*/ 
	ret:boolean,

	/**错误信息*/ 
	err:string,

}

interface tencentVodPlayer_resize_Params {
	/**(可选项)界面的高度*/ 
	rect?:any,

}

interface tencentVodPlayer_setStartTime_Params {
	/**(必填项)要开始播放的起始位置, 小数点后为毫秒*/ 
	pos:any,

}

interface tencentVodPlayer_seek_Params {
	/**(必填项)要跳转的时间，单位秒*/ 
	value:any,

	/**true表示操作成功*/ 
	ret:boolean,

	/**错误信息*/ 
	err:string,

}

interface tencentVodPlayer_setRenderMode_Params {
	/**(必填项)画面裁剪的模式*/ 
	mode:any,

}

interface tencentVodPlayer_setMute_Params {
	/**(必填项)是否静音*/ 
	isMute:boolean,

}

interface tencentVodPlayer_snapShot_Params {
	/**(必填项)截图保存的路径*/ 
	path:string,

	/**null*/ 
	ret:JSON,

}

interface tencentVodPlayer_setBitrateIndex_Params {
	/**(必填项)码率索引*/ 
	index:any,

}

interface tencentVodPlayer_setMirror_Params {
	/**(必填项)是否设置镜像*/ 
	isMirror:boolean,

}

interface tencentVodPlayer_setHwAcc_Params {
	/**(必填项)是否开启硬件加速*/ 
	isHwAcc:boolean,

}

interface tencentVodPlayer_setAutoPlay_Params {
	/**(必填项)是否自动播放*/ 
	isAutoPlay:boolean,

}

interface tencentVodPlayer_setToken_Params {
	/**(必填项)加密的token*/ 
	token:string,

}

interface tencentVodPlayer_setLoop_Params {
	/**(可选项)是否循环*/ 
	isLoop?:boolean,

}

interface tencentVodPlayer_setDownloadPath_Params {
	/**(必填项)下载文件的根目录*/ 
	path:string,

}

interface tencentVodPlayer_startDownload_Params {
	/**(必填项)下载地址*/ 
	url:string,

	/**(可选项)指定文件的fileId, 需要同时指定appId*/ 
	fileId?:any,

	/**(可选项)应用id*/ 
	appId?:any,

}

interface uscVoiceRecognizer {
	/**
	 * `相关配置。`
	 * ========params==========
	 *
	 * `appKey` :string : 申请应用后获得的appKey
	 *
	 * `secret` :string : 申请应用后获得的appSecret
	 */
	configuration(params:uscVoiceRecognizer_configuration_Params):void

	/** 开始语音识别。*/ 
	startSpeechUnderstander(callback?: (ret:JSON) => void):void

	/** 停止语音识别，调用此接口后会返回识别结果。*/ 
	stopSpeechUnderstander():void

	/**
	 * `开始语音合成。`
	 * ========params==========
	 *
	 * `text` :string : 需要合成的文字
	 */
	playText(params:uscVoiceRecognizer_playText_Params, callback?: (ret:JSON) => void):void

	/** 停止语音合成。*/ 
	stopText():void

}
interface uscVoiceRecognizer_configuration_Params {
	/**申请应用后获得的appKey*/ 
	appKey:string,

	/**申请应用后获得的appSecret*/ 
	secret:string,

}

interface uscVoiceRecognizer_playText_Params {
	/**需要合成的文字*/ 
	text:string,

}

interface zyBaiduFace {
}
interface UIBdFace {
	/**
	 * `人脸功能配置`
	 * ========params==========
	 *
	 * `minFaceSize` :number : （可选项）最小检测人脸阈值
	 *
	 * `cropFaceSizeWidth` :number : （可选项）截取人脸图片大小
	 *
	 * `occluThreshold` :number : （可选项）人脸遮挡阀值
	 *
	 * `illumThreshold` :number : （可选项）亮度阀值
	 *
	 * `blurThreshold` :number : （可选项）图像模糊阀值
	 *
	 * `eulurAngle` :JSON : （可选项）头部姿态角度
	 *
	 * `isCheckQuality` :boolean : （可选项）是否进行人脸图片质量检测
	 *
	 * `timeout` :number : （可选项）超时时间
	 *
	 * `threshold` :number : （可选项）人脸检测精度阀值
	 *
	 * `maxCropImageNum` :number : （可选项）照片采集张数
	 *
	 * `sound` :boolean : （可选项）是否开启提示音
	 */
	configuration(params:UIBdFace_configuration_Params):void

	/**
	 * `打开活体检测页面`
	 * ========params==========
	 *
	 * `actions` :Array : （可选项）活体检测动作
	 *
	 * `isByOrder` :boolean : （可选项）是否按顺序进行活体动作
	 *
	 * `numOfLiveness` :number : （可选项）活体动作数目（actions为空时起作用）
	 */
	openLivenessView(params:UIBdFace_openLivenessView_Params, callback?: (ret:JSON) => void):void

	/** 打开人脸图像采集页面*/ 
	openDetectionView():void

	/** 关闭活体检测页面*/ 
	closeLivenessView():void

	/** 关闭人脸图像采集页面*/ 
	closeDetectionView():void

}
interface UIBdFace_configuration_Params {
	/**（可选项）最小检测人脸阈值*/ 
	minFaceSize?:number,

	/**（可选项）截取人脸图片大小*/ 
	cropFaceSizeWidth?:number,

	/**（可选项）人脸遮挡阀值*/ 
	occluThreshold?:number,

	/**（可选项）亮度阀值*/ 
	illumThreshold?:number,

	/**（可选项）图像模糊阀值*/ 
	blurThreshold?:number,

	/**（可选项）头部姿态角度*/ 
	eulurAngle?:JSON,

	/**（可选项）是否进行人脸图片质量检测*/ 
	isCheckQuality?:boolean,

	/**（可选项）超时时间*/ 
	timeout?:number,

	/**（可选项）人脸检测精度阀值*/ 
	threshold?:number,

	/**（可选项）照片采集张数*/ 
	maxCropImageNum?:number,

	/**（可选项）是否开启提示音*/ 
	sound?:boolean,

}

interface UIBdFace_openLivenessView_Params {
	/**（可选项）活体检测动作*/ 
	actions?:Array,

	/**（可选项）是否按顺序进行活体动作*/ 
	isByOrder?:boolean,

	/**（可选项）活体动作数目（actions为空时起作用）*/ 
	numOfLiveness?:number,

}

interface hanvonCloudNumberReader {
	/**
	 * `识别数字，支持印刷体数字`
	 * ========params==========
	 *
	 * `androidkey` :string : 在汉王云官网申请的android key
	 *
	 * `picpath` :string : 数字图片的存放路径
	 */
	recognitionNumber(params:hanvonCloudNumberReader_recognitionNumber_Params, callback?: (ret:JSON) => void):void

}
interface hanvonCloudNumberReader_recognitionNumber_Params {
	/**在汉王云官网申请的android key*/ 
	androidkey:string,

	/**数字图片的存放路径*/ 
	picpath:string,

}

interface braintreePay {
	/** 启动PayPal的单一支付*/ 
	paypalOneTimePayment(callback?: (ret:JSON) => void):void

	/** 启动PayPal的账单协议支付*/ 
	paypalBillingAgreement(callback?: (ret:JSON) => void):void

	/** 当前设备是否安装 Venmo*/ 
	isWalletAppInstalled():void

	/** - 类型：字符串类型*/ 
	authorizeAccountAndVault(callback?: (ret:JSON) => void):void

	/** - 类型：字符串类型*/ 
	authorizeAccountWithProfileID(callback?: (ret:JSON) => void):void

	/** 获取设备信息，在服务器端进行 Venmo 扣款时需要*/ 
	collectDeviceData(callback?: (ret:JSON) => void):void

}
interface cloudwise {
	/** 设置真实app用户的信息，用于将app的性能数据与真实用户关联起来。*/ 
	setUserInfo():void

}
interface tencentIm {
	/**
	 * `初始化，其他接口都需要在初始化之后调用`
	 * ========params==========
	 *
	 * `appid` :number : 用户标识接入 SDK 的应用 ID，腾讯[云通信控制平台](https://console.cloud.tencent.com/avc)，此参数仅支持iOS
	 *
	 * `logLevel` :number : （可选项）打印log级别
	 *
	 * `addLogListener` :boolean : （可选项）是否监听log，如果监听将在回调返回
	 *
	 * `logPrint` :boolean : （可选项）是否将log打印到控制台，iOS不支持
	 *
	 * `logPath` :string : （可选项）log日志输入位置，支持fs路径，iOS不支持
	 *
	 * `enableReadReceipt` :boolean : （可选项）是否开启消息已读回执，仅支持iOS
	 *
	 * `enableAutoReport` :boolean : （可选项）是否开启自动已读上报，仅支持iOS
	 */
	init(params:tencentIm_init_Params, callback?: (ret:JSON) => void):void

	/** 监听用户状态*/ 
	setUserStatusListener(callback?: (ret:JSON) => void):void

	/** 监听链接状态*/ 
	setConnectListener(callback?: (ret:JSON) => void):void

	/** 设置群组事件监听*/ 
	setGroupEventListener(callback?: (ret:JSON) => void):void

	/** 设置会话监听*/ 
	seConversationListener(callback?: (ret:JSON) => void):void

	/**
	 * `消息扩展设置`
	 * ========params==========
	 *
	 * `enableStorage` :boolean : （可选项）是否允许消息本地存储
	 *
	 * `enableReadReceipt` :boolean : （可选项）是否开启消息已读回执
	 *
	 * `enableRecentContact` :boolean : （可选项）是否开启漫游最近联系人
	 *
	 * `enableAutoReport` :boolean : （可选项）是否开启自动已读上报
	 */
	seMessageExtConfig(params:tencentIm_seMessageExtConfig_Params, callback?: (ret:JSON) => void):void

	/** 添加消息撤回监听*/ 
	setMessageRevokedListener(callback?: (ret:JSON) => void):void

	/** 添加消息已读回执监听*/ 
	setMessageReceiptListener(callback?: (ret:JSON) => void):void

	/**
	 * `登陆`
	 * ========params==========
	 *
	 * `identifier` :string : 用户帐号
	 *
	 * `userSig` :string : 用户帐号签名，由私钥加密获得
	 *
	 * `busiId` :number : 企业证书 ID，进入【基础配置】页面，在iOS 推送证书区域的（证书ID），此参数仅支持iOS
	 */
	login(params:tencentIm_login_Params, callback?: (ret:JSON) => void):void

	/** 登出*/ 
	logout(callback?: (ret:JSON) => void):void

	/**
	 * `初始化本地存储，在未登录的情况下加载本地存储。`
	 * ========params==========
	 *
	 * `identifier` :string : 用户账号
	 */
	initStorage(params:tencentIm_initStorage_Params):void

	/**
	 * `获取本地聊天记录`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 *
	 * `count` :number : 聊天记录条数
	 *
	 * `continue` :boolean : （可选项）是否获取上次获取的消息之前的消息，需要与上次获取时peer相同
	 */
	getLocalMessage(params:tencentIm_getLocalMessage_Params, callback?: (ret:JSON) => void):void

	/** 获取登陆账户*/ 
	getLoginUser():void

	/**
	 * `获取会话`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 */
	getConversation(params:tencentIm_getConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送字符串信息`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 *
	 * `text` :string : 消息内容
	 *
	 * `onlineMessage` :boolean : (可选项)是否发送在线消息，iOS不支持
	 *
	 * `offlinePushInfo` :JSON : (可选项)消息离线推送配置信息
	 */
	sendText(params:tencentIm_sendText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片信息`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 *
	 * `imagePath` :string : 图片路径，支持fs格式
	 *
	 * `imageLevel` :number : 发送图片质量
	 *
	 * `onlineMessage` :boolean : (可选项)是否发送在线消息，iOS不支持
	 *
	 * `offlinePushInfo` :JSON : (可选项)消息离线推送配置信息
	 */
	sendImage(params:tencentIm_sendImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `表情消息发送，IM SDK 并不提供表情包，如果开发者有表情包，可使用 index 存储表情在表情包中的索引，由用户自定义，或者直接使用data存储表情二进制信息以及字符串 key，都由用户自定义，IM SDK 内部只做透传。`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 *
	 * `index` :number : 表情索引
	 *
	 * `faceData` :string : 图片自定义数据base64字符串
	 *
	 * `onlineMessage` :boolean : (可选项)是否发送在线消息，iOS不支持
	 *
	 * `offlinePushInfo` :JSON : (可选项)消息离线推送配置信息
	 */
	sendFace(params:tencentIm_sendFace_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送语音消息`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 *
	 * `duration` :number : 语音时长
	 *
	 * `soundPath` :string : 语音存储路径，支持fs路径
	 *
	 * `onlineMessage` :boolean : (可选项)是否发送在线消息，iOS不支持
	 *
	 * `offlinePushInfo` :JSON : (可选项)消息离线推送配置信息
	 */
	sendSound(params:tencentIm_sendSound_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 *
	 * `desc` :string : 位置描述
	 *
	 * `longitude` :any : 经度
	 *
	 * `latitude` :any : 维度
	 *
	 * `onlineMessage` :boolean : (可选项)是否发送在线消息，iOS不支持
	 *
	 * `offlinePushInfo` :JSON : (可选项)消息离线推送配置信息
	 */
	sendLocation(params:tencentIm_sendLocation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送小文件`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 *
	 * `filePath` :string : 文件路径，支持fs格式
	 *
	 * `fileName` :string : 文件名称
	 *
	 * `onlineMessage` :boolean : (可选项)是否发送在线消息，iOS不支持
	 *
	 * `offlinePushInfo` :JSON : (可选项)消息离线推送配置信息
	 */
	sendFile(params:tencentIm_sendFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送自定义消息`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 *
	 * `data` :string : 自定义数据，Base64字符串
	 *
	 * `desc` :string : 自定义描述
	 *
	 * `ext` :string : 推送ext字段，Base64字符串，iOS为正常字符串
	 *
	 * `sound` :string : 自定义声音数据，Base64字符串，iOS为正常字符串
	 *
	 * `onlineMessage` :boolean : (可选项)是否发送在线消息，iOS不支持
	 *
	 * `offlinePushInfo` :JSON : (可选项)消息离线推送配置信息
	 */
	sendCustom(params:tencentIm_sendCustom_Params, callback?: (ret:JSON) => void):void

	/** 添加新消息监听*/ 
	addNewMessageListener(callback?: (ret:JSON) => void):void

	/** 获取所有会话*/ 
	getConversations(callback?: (ret:JSON) => void):void

	/**
	 * `获取聊天记录`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 *
	 * `count` :number : 聊天记录条数
	 *
	 * `continue` :boolean : （可选项）是否获取上次获取的消息之前的消息，需要与上次获取时peer相同
	 */
	getMessage(params:tencentIm_getMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除会话`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 *
	 * `delMessage` :boolean : 是否删除消息记录
	 */
	deleteConversation(params:tencentIm_deleteConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除本地消息记录`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 */
	deleteLocalMessage(params:tencentIm_deleteLocalMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取未读消息数量`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 */
	getUnReadMessageNum(params:tencentIm_getUnReadMessageNum_Params, callback?: (ret:JSON) => void):void

	/**
	 * `会话进行已读上报`
	 * ========params==========
	 *
	 * `peer` :string : 聊天标识（群组id 或对方账号）
	 *
	 * `type` :number : 聊天类型；1/单聊会话，2/群组会话，3/系统会话
	 */
	setRead(params:tencentIm_setRead_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建群组`
	 * ========params==========
	 *
	 * `groupType` :string : 群组类型
	 *
	 * `groupName` :string : 群组名称
	 *
	 * `groupId` :string : （可选项）群id
	 *
	 * `notification` :string : （可选项）群公告
	 *
	 * `introduction` :string : （可选项）群简介
	 *
	 * `faceUrl` :string : （可选项）群头像url
	 *
	 * `maxMemberNum` :number : （可选项）最大成员数
	 *
	 * `groupAddOpt` :number : 添加群条件
	 *
	 * `members` :Array : （可选项）初始成员，iOS不支持
	 *
	 * `membersInfos` :Array : （可选项）初始成员，android不支持
	 *
	 * `customInfo` :any : （可选项）自定义信息，设置群自定义字段，需要先到控制台配置相应的 key
	 */
	createGroup(params:tencentIm_createGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `邀请用户进群，`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 *
	 * `members` :Array : 邀请成员
	 */
	inviteGroupMember(params:tencentIm_inviteGroupMember_Params, callback?: (ret:JSON) => void):void

	/**
	 * `申请入群`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 *
	 * `reason` :string : 入群原因
	 */
	applyJoinGroup(params:tencentIm_applyJoinGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `退出群组，私有群：全员可退出群组。公开群、聊天室和直播大群：群主不能退出。`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 */
	quitGroup(params:tencentIm_quitGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除群组成员，私有群：只有创建者可删除群组成员。公开群和聊天室：只有管理员和群主可以踢人。直播大群：不能踢人。`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 *
	 * `members` :Array : 要删除的成员
	 *
	 * `reason` :string : (可选项删除原因
	 */
	deleteGroupMember(params:tencentIm_deleteGroupMember_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取群成员列表`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 */
	getGroupMembers(params:tencentIm_getGroupMembers_Params, callback?: (ret:JSON) => void):void

	/** 获取加入群组列表*/ 
	getGroupList(callback?: (ret:JSON) => void):void

	/**
	 * `解散群组,`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 */
	deleteGroup(params:tencentIm_deleteGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `转让群组`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 *
	 * `identifier` :string : 新群主账号
	 */
	modifyGroupOwner(params:tencentIm_modifyGroupOwner_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询群组资料，在群组内使用此接口`
	 * ========params==========
	 *
	 * `groupIds` :Array : 查询群组id数组
	 */
	getGroupDetailInfo(params:tencentIm_getGroupDetailInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `非群成员获取群资料`
	 * ========params==========
	 *
	 * `groupIds` :Array : 群组id
	 */
	getGroupPublicInfo(params:tencentIm_getGroupPublicInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取个人在群里资料`
	 * ========params==========
	 *
	 * `groupId` :string : 查询群组id数组
	 */
	getSelfInfoInGroup(params:tencentIm_getSelfInfoInGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取群内成员资料`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 *
	 * `identifiers` :Array : 查询的账号
	 */
	getGroupMembersInfo(params:tencentIm_getGroupMembersInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群资料`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 *
	 * `groupName` :string : （可选项）群名称
	 *
	 * `notification` :string : （可选项）群公告
	 *
	 * `introduction` :string : （可选项）群简介
	 *
	 * `faceUrl` :string : （可选项）群头像url
	 *
	 * `groupAddOpt` :number : 添加群条件
	 *
	 * `maxMemberNum` :number : 最大成员数，iOS不支持
	 *
	 * `visable` :boolean : 群成员是否对外展示
	 *
	 * `silenceAll` :boolean : 是否全员禁言
	 */
	modifyGroupInfo(params:tencentIm_modifyGroupInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改成员群身份，只有群主或者管理员可以进行对群成员的身份进行修改。`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 *
	 * `identifier` :string : 用户账号
	 *
	 * `roleType` :number : 群内身份
	 */
	modifyMemberRoleType(params:tencentIm_modifyMemberRoleType_Params, callback?: (ret:JSON) => void):void

	/**
	 * `群成员禁言并设置时长。只有群主或者管理员可以进行对群成员进行禁言。`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 *
	 * `identifier` :string : 用户账号
	 *
	 * `silenceTime` :number : 禁言时间
	 */
	modifyMemberSilence(params:tencentIm_modifyMemberSilence_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置成员群名称。`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 *
	 * `identifier` :string : 用户账号
	 *
	 * `nameCard` :string : 群名称
	 */
	modifyMemberNameCard(params:tencentIm_modifyMemberNameCard_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置群消息接收选项`
	 * ========params==========
	 *
	 * `groupId` :string : 群id
	 *
	 * `identifier` :string : 用户账号，iOS不支持
	 *
	 * `reciveOpt` :number : 消息接收选项
	 */
	setReceiveMessageOpt(params:tencentIm_setReceiveMessageOpt_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拉取群组未决信息`
	 * ========params==========
	 *
	 * `timestamp` :number : 翻页时间戳，首次填写0，后面用返回的时间戳
	 *
	 * `numPerPage` :number : 每页数量
	 */
	getGroupPendencyList(params:tencentIm_getGroupPendencyList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `上报未决消息为已读，`
	 * ========params==========
	 *
	 * `timestamp` :number : 时间戳，此时间戳以前的消息均置为已读。上报已读后，仍然可以拉取到这些未决信息，但可通过对已读时戳的判断判定未决信息是否已读。
	 */
	reportGroupPendency(params:tencentIm_reportGroupPendency_Params, callback?: (ret:JSON) => void):void

	/**
	 * `处理未决信息`
	 * ========params==========
	 *
	 * `timestamp` :number : 时间戳，此时间戳查询到的消息
	 *
	 * `numPerPage` :number : 每页数量
	 *
	 * `doPendency` :Array : 要处理的消息
	 */
	doGroupPendency(params:tencentIm_doGroupPendency_Params, callback?: (ret:JSON) => void):void

	/** 获取服务器保存的自己资料*/ 
	getRemoteSelfProfile(callback?: (ret:JSON) => void):void

	/** 获取本地保存的自己资料*/ 
	getLocalSelfProfile(callback?: (ret:JSON) => void):void

	/**
	 * `获取好友资料`
	 * ========params==========
	 *
	 * `forceUpdate` :boolean : 是否强制从后台拉取数据。否则先从本地查找，本地没有再从服务器获取
	 *
	 * `users` :Array : 要获取资料的用户 identifier 列表
	 */
	getUsersProfile(params:tencentIm_getUsersProfile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取好友本地存储资料`
	 * ========params==========
	 *
	 * `user` :string : 要获取资料的用户 identifier
	 */
	getUserLocalProfile(params:tencentIm_getUserLocalProfile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除好友`
	 * ========params==========
	 *
	 * `identifiers` :Array : 要删除的好友账号
	 *
	 * `delBoth` :boolean : 是否从双方好友列表都移除掉，false时只从自己好友列表中移除
	 */
	deleteFriends(params:tencentIm_deleteFriends_Params):void

	/**
	 * `设置 APNS`
	 * ========params==========
	 *
	 * `openPush` :string : （可选项） 单聊声音
	 *
	 * `groupSound` :string : （可选项）群组声音
	 */
	setAPNS(params:tencentIm_setAPNS_Params):void

	/** 获取自己的推送声音*/ 
	getAPNS():void

	/** 设置离线推送token*/ 
	setOfflineToken():void

	/** 获取设备机型*/ 
	getDeviceBrand():void

	/** 上报 App 应用退至后台。*/ 
	doBackground():void

	/** 上报 App 应用切换回前台。*/ 
	doForeground():void

}
interface tencentIm_init_Params {
	/**用户标识接入 SDK 的应用 ID，腾讯[云通信控制平台](https://console.cloud.tencent.com/avc)，此参数仅支持iOS*/ 
	appid:number,

	/**（可选项）打印log级别*/ 
	logLevel?:number,

	/**（可选项）是否监听log，如果监听将在回调返回*/ 
	addLogListener?:boolean,

	/**（可选项）是否将log打印到控制台，iOS不支持*/ 
	logPrint?:boolean,

	/**（可选项）log日志输入位置，支持fs路径，iOS不支持*/ 
	logPath?:string,

	/**（可选项）是否开启消息已读回执，仅支持iOS*/ 
	enableReadReceipt?:boolean,

	/**（可选项）是否开启自动已读上报，仅支持iOS*/ 
	enableAutoReport?:boolean,

}

interface tencentIm_seMessageExtConfig_Params {
	/**（可选项）是否允许消息本地存储*/ 
	enableStorage?:boolean,

	/**（可选项）是否开启消息已读回执*/ 
	enableReadReceipt?:boolean,

	/**（可选项）是否开启漫游最近联系人*/ 
	enableRecentContact?:boolean,

	/**（可选项）是否开启自动已读上报*/ 
	enableAutoReport?:boolean,

}

interface tencentIm_login_Params {
	/**用户帐号*/ 
	identifier:string,

	/**用户帐号签名，由私钥加密获得*/ 
	userSig:string,

	/**企业证书 ID，进入【基础配置】页面，在iOS 推送证书区域的（证书ID），此参数仅支持iOS*/ 
	busiId:number,

}

interface tencentIm_initStorage_Params {
	/**用户账号*/ 
	identifier:string,

}

interface tencentIm_getLocalMessage_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

	/**聊天记录条数*/ 
	count:number,

	/**（可选项）是否获取上次获取的消息之前的消息，需要与上次获取时peer相同*/ 
	continue?:boolean,

}

interface tencentIm_getConversation_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

}

interface tencentIm_sendText_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

	/**消息内容*/ 
	text:string,

	/**(可选项)是否发送在线消息，iOS不支持*/ 
	onlineMessage?:boolean,

	/**(可选项)消息离线推送配置信息*/ 
	offlinePushInfo?:JSON,

}

interface tencentIm_sendImage_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

	/**图片路径，支持fs格式*/ 
	imagePath:string,

	/**发送图片质量*/ 
	imageLevel:number,

	/**(可选项)是否发送在线消息，iOS不支持*/ 
	onlineMessage?:boolean,

	/**(可选项)消息离线推送配置信息*/ 
	offlinePushInfo?:JSON,

}

interface tencentIm_sendFace_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

	/**表情索引*/ 
	index:number,

	/**图片自定义数据base64字符串*/ 
	faceData:string,

	/**(可选项)是否发送在线消息，iOS不支持*/ 
	onlineMessage?:boolean,

	/**(可选项)消息离线推送配置信息*/ 
	offlinePushInfo?:JSON,

}

interface tencentIm_sendSound_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

	/**语音时长*/ 
	duration:number,

	/**语音存储路径，支持fs路径*/ 
	soundPath:string,

	/**(可选项)是否发送在线消息，iOS不支持*/ 
	onlineMessage?:boolean,

	/**(可选项)消息离线推送配置信息*/ 
	offlinePushInfo?:JSON,

}

interface tencentIm_sendLocation_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

	/**位置描述*/ 
	desc:string,

	/**经度*/ 
	longitude:any,

	/**维度*/ 
	latitude:any,

	/**(可选项)是否发送在线消息，iOS不支持*/ 
	onlineMessage?:boolean,

	/**(可选项)消息离线推送配置信息*/ 
	offlinePushInfo?:JSON,

}

interface tencentIm_sendFile_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

	/**文件路径，支持fs格式*/ 
	filePath:string,

	/**文件名称*/ 
	fileName:string,

	/**(可选项)是否发送在线消息，iOS不支持*/ 
	onlineMessage?:boolean,

	/**(可选项)消息离线推送配置信息*/ 
	offlinePushInfo?:JSON,

}

interface tencentIm_sendCustom_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

	/**自定义数据，Base64字符串*/ 
	data:string,

	/**自定义描述*/ 
	desc:string,

	/**推送ext字段，Base64字符串，iOS为正常字符串*/ 
	ext:string,

	/**自定义声音数据，Base64字符串，iOS为正常字符串*/ 
	sound:string,

	/**(可选项)是否发送在线消息，iOS不支持*/ 
	onlineMessage?:boolean,

	/**(可选项)消息离线推送配置信息*/ 
	offlinePushInfo?:JSON,

}

interface tencentIm_getMessage_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

	/**聊天记录条数*/ 
	count:number,

	/**（可选项）是否获取上次获取的消息之前的消息，需要与上次获取时peer相同*/ 
	continue?:boolean,

}

interface tencentIm_deleteConversation_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

	/**是否删除消息记录*/ 
	delMessage:boolean,

}

interface tencentIm_deleteLocalMessage_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

}

interface tencentIm_getUnReadMessageNum_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

}

interface tencentIm_setRead_Params {
	/**聊天标识（群组id 或对方账号）*/ 
	peer:string,

	/**聊天类型；1/单聊会话，2/群组会话，3/系统会话*/ 
	type:number,

}

interface tencentIm_createGroup_Params {
	/**群组类型*/ 
	groupType:string,

	/**群组名称*/ 
	groupName:string,

	/**（可选项）群id*/ 
	groupId?:string,

	/**（可选项）群公告*/ 
	notification?:string,

	/**（可选项）群简介*/ 
	introduction?:string,

	/**（可选项）群头像url*/ 
	faceUrl?:string,

	/**（可选项）最大成员数*/ 
	maxMemberNum?:number,

	/**添加群条件*/ 
	groupAddOpt:number,

	/**（可选项）初始成员，iOS不支持*/ 
	members?:Array,

	/**（可选项）初始成员，android不支持*/ 
	membersInfos?:Array,

	/**（可选项）自定义信息，设置群自定义字段，需要先到控制台配置相应的 key*/ 
	customInfo?:any,

}

interface tencentIm_inviteGroupMember_Params {
	/**群id*/ 
	groupId:string,

	/**邀请成员*/ 
	members:Array,

}

interface tencentIm_applyJoinGroup_Params {
	/**群id*/ 
	groupId:string,

	/**入群原因*/ 
	reason:string,

}

interface tencentIm_quitGroup_Params {
	/**群id*/ 
	groupId:string,

}

interface tencentIm_deleteGroupMember_Params {
	/**群id*/ 
	groupId:string,

	/**要删除的成员*/ 
	members:Array,

	/**(可选项删除原因*/ 
	reason?:string,

}

interface tencentIm_getGroupMembers_Params {
	/**群id*/ 
	groupId:string,

}

interface tencentIm_deleteGroup_Params {
	/**群id*/ 
	groupId:string,

}

interface tencentIm_modifyGroupOwner_Params {
	/**群id*/ 
	groupId:string,

	/**新群主账号*/ 
	identifier:string,

}

interface tencentIm_getGroupDetailInfo_Params {
	/**查询群组id数组*/ 
	groupIds:Array,

}

interface tencentIm_getGroupPublicInfo_Params {
	/**群组id*/ 
	groupIds:Array,

}

interface tencentIm_getSelfInfoInGroup_Params {
	/**查询群组id数组*/ 
	groupId:string,

}

interface tencentIm_getGroupMembersInfo_Params {
	/**群id*/ 
	groupId:string,

	/**查询的账号*/ 
	identifiers:Array,

}

interface tencentIm_modifyGroupInfo_Params {
	/**群id*/ 
	groupId:string,

	/**（可选项）群名称*/ 
	groupName?:string,

	/**（可选项）群公告*/ 
	notification?:string,

	/**（可选项）群简介*/ 
	introduction?:string,

	/**（可选项）群头像url*/ 
	faceUrl?:string,

	/**添加群条件*/ 
	groupAddOpt:number,

	/**最大成员数，iOS不支持*/ 
	maxMemberNum:number,

	/**群成员是否对外展示*/ 
	visable:boolean,

	/**是否全员禁言*/ 
	silenceAll:boolean,

}

interface tencentIm_modifyMemberRoleType_Params {
	/**群id*/ 
	groupId:string,

	/**用户账号*/ 
	identifier:string,

	/**群内身份*/ 
	roleType:number,

}

interface tencentIm_modifyMemberSilence_Params {
	/**群id*/ 
	groupId:string,

	/**用户账号*/ 
	identifier:string,

	/**禁言时间*/ 
	silenceTime:number,

}

interface tencentIm_modifyMemberNameCard_Params {
	/**群id*/ 
	groupId:string,

	/**用户账号*/ 
	identifier:string,

	/**群名称*/ 
	nameCard:string,

}

interface tencentIm_setReceiveMessageOpt_Params {
	/**群id*/ 
	groupId:string,

	/**用户账号，iOS不支持*/ 
	identifier:string,

	/**消息接收选项*/ 
	reciveOpt:number,

}

interface tencentIm_getGroupPendencyList_Params {
	/**翻页时间戳，首次填写0，后面用返回的时间戳*/ 
	timestamp:number,

	/**每页数量*/ 
	numPerPage:number,

}

interface tencentIm_reportGroupPendency_Params {
	/**时间戳，此时间戳以前的消息均置为已读。上报已读后，仍然可以拉取到这些未决信息，但可通过对已读时戳的判断判定未决信息是否已读。*/ 
	timestamp:number,

}

interface tencentIm_doGroupPendency_Params {
	/**时间戳，此时间戳查询到的消息*/ 
	timestamp:number,

	/**每页数量*/ 
	numPerPage:number,

	/**要处理的消息*/ 
	doPendency:Array,

}

interface tencentIm_getUsersProfile_Params {
	/**是否强制从后台拉取数据。否则先从本地查找，本地没有再从服务器获取*/ 
	forceUpdate:boolean,

	/**要获取资料的用户 identifier 列表*/ 
	users:Array,

}

interface tencentIm_getUserLocalProfile_Params {
	/**要获取资料的用户 identifier*/ 
	user:string,

}

interface tencentIm_deleteFriends_Params {
	/**要删除的好友账号*/ 
	identifiers:Array,

	/**是否从双方好友列表都移除掉，false时只从自己好友列表中移除*/ 
	delBoth:boolean,

}

interface tencentIm_setAPNS_Params {
	/**（可选项） 单聊声音*/ 
	openPush?:string,

	/**（可选项）群组声音*/ 
	groupSound?:string,

}

interface baiduCloud {
	/** 检查百度云是否安装或是否需要升级*/ 
	checkClient(callback?: (ret:JSON) => void):void

	/**
	 * `文件上传`
	 * ========params==========
	 *
	 * `localPath` :Array : 需要上传的文件路径,支持widget路径以及fs路径
	 *
	 * `serverPath` :string : （可选）百度服务器端路径，当localPath只有一个值时有效
	 *
	 * `conflictStrategy` :string : 当上传的文件云端已存在处理方式
	 */
	uploadFile(params:baiduCloud_uploadFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `上传状态查询`
	 * ========params==========
	 *
	 * `sessionId` :string : uploadFile接口返回的sessionId
	 */
	queryUpload(params:baiduCloud_queryUpload_Params, callback?: (ret:JSON) => void):void

	/**
	 * `预览下载，调起百度云后出现文件选择页面，选择文件进行下载。`
	 * ========params==========
	 *
	 * `types` :Array<JSON> : 需要请求百度云进行下载的文件类型列表
	 *
	 * `count` :string : （可选）下载一个或多个文件
	 */
	previewDownload(params:baiduCloud_previewDownload_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载任务状态查询。`
	 * ========params==========
	 *
	 * `sessionId` :string : previewDownload接口返回的sessionId
	 */
	queryDownload(params:baiduCloud_queryDownload_Params, callback?: (ret:JSON) => void):void

}
interface baiduCloud_uploadFile_Params {
	/**需要上传的文件路径,支持widget路径以及fs路径*/ 
	localPath:Array,

	/**（可选）百度服务器端路径，当localPath只有一个值时有效*/ 
	serverPath?:string,

	/**当上传的文件云端已存在处理方式*/ 
	conflictStrategy:string,

}

interface baiduCloud_queryUpload_Params {
	/**uploadFile接口返回的sessionId*/ 
	sessionId:string,

}

interface baiduCloud_previewDownload_Params {
	/**需要请求百度云进行下载的文件类型列表*/ 
	types:Array<JSON>,

	/**（可选）下载一个或多个文件*/ 
	count?:string,

}

interface baiduCloud_queryDownload_Params {
	/**previewDownload接口返回的sessionId*/ 
	sessionId:string,

}

interface leBoCast {
	/** 初始化本模块，该方法无参数，必须在所有方法调用前调用，一般放在win或frame的初始化方法中。*/ 
	initLeCast():void

	/** 搜索附近的接收端设备，调用后本模块会每隔几秒进行搜索，模块每隔几秒进行回调，在适当的时候调用stopBrowse方法即可停止搜索。<br/>*/ 
	browse(callback?: (ret:JSON) => void):void

	/** 停止搜索附近的接收端设备，因为browse方法会不停的搜索，所以要在适当的时候调用stopBrowse方法，该方法无参数*/ 
	stopBrowse():void

	/** 通过ip连接接收端设备，必须先调用browse方法获取ip，该方法为耗时方法(需要一定时间才能回调)*/ 
	connect(callback?: (ret:JSON) => void):void

	/** 通过二维码连接接收端设备,在接收端设备中一般有二维码，开发者可用apicloud上任意一个扫描二维码的模块扫描二维码，该方法为耗时方法(需要一定时间才能回调)*/ 
	QRconnect(callback?: (ret:JSON) => void):void

	/** 通过pin码连接接收端设备,接收端有唯一对应的pin码，该方法为耗时方法(需要一定时间才能回调)*/ 
	pinConnect(callback?: (ret:JSON) => void):void

	/** 断开连接，在适当的时候断开连接，该方法为耗时方法(需要一定时间才能回调)*/ 
	disConnect(callback?: (ret:JSON) => void):void

	/** 获取已经连接的接收端设备，无参数，该方法为耗时方法(需要一定时间才能回调)*/ 
	getConnectLelinkServiceInfos():void

	/** 开始镜像，即将手机画面实时投屏到接收端设备(电视)，调用该方法前必须先连接设备，该方法为耗时方法(需要一定时间才能回调)*/ 
	startMirror(callback?: (ret:JSON) => void):void

	/** 结束镜像*/ 
	stopMirror():void

	/** 播放媒体，包括视频、音乐、图片。参数localUrl和netUrl这两个url必须要传一个，两个都传时只认localUrl，该方法为耗时方法(需要一定时间才能回调)*/ 
	play(callback?: (ret:JSON) => void):void

	/** 暂停播放媒体，无参数，返回值在play方法的回调中返回，参考play方法*/ 
	pause():void

	/** 恢复播放媒体，无参数，返回值在play方法的回调中返回，参考play方法*/ 
	resume():void

	/** 停止播放媒体，无参数，返回值在play方法的回调中返回，参考play方法*/ 
	stop():void

	/** 播放进度控制，通过该方法可以选择媒体文件的某一个时间点来播放，返回值在play方法的回调中返回，参考play方法*/ 
	seekTo():void

	/** 增加音量*/ 
	addVolume():void

	/** 减少音量*/ 
	subVolume():void

	/** 是否支持弹幕*/ 
	isSupportDanmuku():void

	/** 设置广告监听*/ 
	setInteractiveAdListener():void

	/** 广告播放上报*/ 
	onInteractiveAdShow():void

	/** 广告播放完成上报*/ 
	onInteractiveAdClosed():void

}
interface taobao {
	/** 调用其他接口前需先调用该接口注册，只需调用一次。*/ 
	asyncInit():void

	/** 打开淘宝授权登陆*/ 
	showLogin():void

	/** 获取已登录用户的相关信息*/ 
	getUserInfo():void

	/** 打开我的订单*/ 
	showMyOrdersPage(callback?: (ret:JSON) => void):void

	/** 打开我的购物车*/ 
	showMyCartsPage(callback?: (ret:JSON) => void):void

	/** 根据itemId打开商品详情*/ 
	showItemDetailPage(callback?: (ret:JSON) => void):void

	/** 根据url打开商品详情*/ 
	showPageByUrl(callback?: (ret:JSON) => void):void

	/** 根据店铺id打开店铺页面*/ 
	showShopPage(callback?: (ret:JSON) => void):void

	/** 登出*/ 
	logout():void

}
interface duibaSales {
	/** 打开兑吧积分商城模块*/ 
	open(callback?: (ret:JSON) => void):void

	/** 重新登录成功后,刷新积分页面*/ 
	reload():void

}
interface chivox {
}
interface ajpushGooglePlay {
}
interface aliPush {
	/** 获取是否注册阿里移动推送成功*/ 
	isRegister(callback?: (ret:JSON) => void):void

	/** app启动时，进行启动信息统计*/ 
	onAppStart(callback?: (ret:JSON) => void):void

	/**
	 * `客户端自定义标签`
	 * ========params==========
	 *
	 * `target` :number : （可选项）目标类型，1：本设备； 2：本设备绑定账号； 3：别名。
	 *
	 * `tag` :string : （可选项）标签名，支持多个标签，用空格隔开。
	 *
	 * `alias` :string : （可选项）别名（仅当target = 3时生效）。
	 */
	addTag(params:aliPush_addTag_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除客户端自定义标签`
	 * ========params==========
	 *
	 * `target` :number : （可选项）移除目标类型，1：本设备； 2：本设备绑定账号； 3：别名。
	 *
	 * `tag` :string : （可选项）移除标签名，支持多个标签，用空格隔开。
	 *
	 * `alias` :string : （可选项）移除别名（仅当target = 3时生效）。
	 */
	removeTag(params:aliPush_removeTag_Params, callback?: (ret:JSON) => void):void

	/** 查询目标绑定标签，当前仅支持查询设备标签；*/ 
	listTags(callback?: (ret:JSON) => void):void

	/**
	 * `添加别名`
	 * ========params==========
	 *
	 * `alias` :string : （必填项）别名。
	 */
	addAlias(params:aliPush_addAlias_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除设备别名；`
	 * ========params==========
	 *
	 * `alias` :string : （可选项）移除别名（为空则删除全部别名）。
	 */
	removeAlias(params:aliPush_removeAlias_Params, callback?: (ret:JSON) => void):void

	/** 查询设备别名*/ 
	listAliases(callback?: (ret:JSON) => void):void

	/**
	 * `将本设备和指定账号做绑定`
	 * ========params==========
	 *
	 * `account` :string : （必填项）账号名称。
	 */
	bindAccount(params:aliPush_bindAccount_Params, callback?: (ret:JSON) => void):void

	/** 解绑和指定账号的本设备的绑定*/ 
	unbindAccount(callback?: (ret:JSON) => void):void

	/**
	 * `设置免打扰时间段`
	 * ========params==========
	 *
	 * `startHour` :number : （可选项）免打扰的起始时间（小时），24小时制，取值范围：0-23。
	 *
	 * `startMinute` :number : （可选项）免打扰起始时间（分钟），取值范围：0-59。
	 *
	 * `endHour` :number : （可选项）免打扰的结束时间（小时），24小时制，取值范围：0-23。
	 *
	 * `endMinute` :number : （可选项）免打扰结束时间（分钟），取值范围：0-59。
	 */
	setDoNotDisturb(params:aliPush_setDoNotDisturb_Params, callback?: (ret:JSON) => void):void

	/** 拦截通知，接收消息，获取推送中的扩展字段*/ 
	addEventListener(callback?: (ret:JSON) => void):void

	/** 获取设备DeviceId*/ 
	getDeviceId(callback?: (ret:JSON) => void):void

	/**
	 * `绑定电话号码（多个设备可以绑定同一电话，一个设备只能绑定一个号码，多次绑定不同号码，以最后一次绑定号码为准。）`
	 * ========params==========
	 *
	 * `phoneNumber` :string : （必填项）电话号码。
	 */
	bindPhoneNumber(params:aliPush_bindPhoneNumber_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置推送通知声音文件路径（若不调用本接口，默认获取资源id为R.raw.alicloud_notification_sound的资源文件；若没有获取到指定声音文件，取设备设置的消息声音）`
	 * ========params==========
	 *
	 * `filePath` :string : （必填项）通知声音文件路径。(支持fs://路径)。
	 */
	setNotificationSoundFilePath(params:aliPush_setNotificationSoundFilePath_Params, callback?: (ret:JSON) => void):void

	/** 关闭免打扰功能(关闭后，先前设置的免打扰时段失效)*/ 
	closeDoNotDisturbMode():void

	/** 删除推送SDK创建的所有通知*/ 
	clearNotifications():void

	/** 删除推送SDK创建的所有通知*/ 
	clearNotifications():void

}
interface aliPush_addTag_Params {
	/**（可选项）目标类型，1：本设备； 2：本设备绑定账号； 3：别名。*/ 
	target?:number,

	/**（可选项）标签名，支持多个标签，用空格隔开。*/ 
	tag?:string,

	/**（可选项）别名（仅当target = 3时生效）。*/ 
	alias?:string,

}

interface aliPush_removeTag_Params {
	/**（可选项）移除目标类型，1：本设备； 2：本设备绑定账号； 3：别名。*/ 
	target?:number,

	/**（可选项）移除标签名，支持多个标签，用空格隔开。*/ 
	tag?:string,

	/**（可选项）移除别名（仅当target = 3时生效）。*/ 
	alias?:string,

}

interface aliPush_addAlias_Params {
	/**（必填项）别名。*/ 
	alias:string,

}

interface aliPush_removeAlias_Params {
	/**（可选项）移除别名（为空则删除全部别名）。*/ 
	alias?:string,

}

interface aliPush_bindAccount_Params {
	/**（必填项）账号名称。*/ 
	account:string,

}

interface aliPush_setDoNotDisturb_Params {
	/**（可选项）免打扰的起始时间（小时），24小时制，取值范围：0-23。*/ 
	startHour?:number,

	/**（可选项）免打扰起始时间（分钟），取值范围：0-59。*/ 
	startMinute?:number,

	/**（可选项）免打扰的结束时间（小时），24小时制，取值范围：0-23。*/ 
	endHour?:number,

	/**（可选项）免打扰结束时间（分钟），取值范围：0-59。*/ 
	endMinute?:number,

}

interface aliPush_bindPhoneNumber_Params {
	/**（必填项）电话号码。*/ 
	phoneNumber:string,

}

interface aliPush_setNotificationSoundFilePath_Params {
	/**（必填项）通知声音文件路径。(支持fs://路径)。*/ 
	filePath:string,

}

interface umpush {
	/** 获取当前绑定设备上的所有tag(每台设备最多绑定1024个tag)*/ 
	getTags():void

	/** 绑定一个或多个tag至设备，每台设备最多绑定1024个tag，超过1024个，绑定tag不再成功，可`removeTag`来精简空间*/ 
	addTags():void

	/** 删除设备中绑定的一个或多个tag*/ 
	deleteTags():void

	/**
	 * `绑定一个别名至设备（含账户，和平台类型）`
	 * ========params==========
	 *
	 * `name` :string : 账户，例如email
	 *
	 * `type` :string : 平台类型
	 */
	addAlias(params:umpush_addAlias_Params, callback?: (ret:JSON) => void):void

	/**
	 * `绑定一个别名至设备（含账户，和平台类型）,并解绑这个别名曾今绑定过的设备。`
	 * ========params==========
	 *
	 * `name` :string : 账户，例如email
	 *
	 * `type` :string : 平台类型
	 */
	setAlias(params:umpush_setAlias_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除一个设备的别名绑定`
	 * ========params==========
	 *
	 * `name` :string : 账户，例如email
	 *
	 * `type` :string : 平台类型
	 */
	removeAlias(params:umpush_removeAlias_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置是否允许SDK当应用在前台运行收到Push时弹出Alert框（默认开启）`
	 * ========params==========
	 *
	 * `value` :boolean : 是否开启弹出框
	 */
	setAutoAlert(params:umpush_setAutoAlert_Params):void

	/**
	 * `设置是否允许SDK自动清空角标（默认开启）`
	 * ========params==========
	 *
	 * `value` :boolean : null
	 */
	setBadgeClear(params:umpush_setBadgeClear_Params):void

	/** 添加一个启动页的开屏消息*/ 
	addLaunchMessage():void

	/**
	 * `添加一个插屏消息`
	 * ========params==========
	 *
	 * `label` :string : null
	 */
	addCardMessageWithLabel(params:umpush_addCardMessageWithLabel_Params):void

	/**
	 * `添加一个自定义插屏消息(android不支持该接口，但是在友盟后台可以发送自定义插屏消息，由于界面是sdk里生成，用的是友盟提供的原生界面)`
	 * ========params==========
	 *
	 * `portraitsize` :any : （可选项） portrait时显示的size
	 *
	 * `landscapesize` :any : （可选项） landscape时显示的size
	 *
	 * `button` :any : （可选项）可以自定义的button
	 *
	 * `label` :string : （可选项）标识
	 */
	addCustomCardMessageWithPortraitSize(params:umpush_addCustomCardMessageWithPortraitSize_Params):void

	/**
	 * `增加一个文本插屏消息`
	 * ========params==========
	 *
	 * `titleFont` :number : （可选项）标题文字大小
	 *
	 * `contentfont` :number : （可选项）内容文字大小
	 *
	 * `buttonfont` :number : （可选项）按钮文字大小
	 *
	 * `label` :string : （可选项）标识
	 */
	addPlainTextCardMessageWithTitleFont(params:umpush_addPlainTextCardMessageWithTitleFont_Params):void

}
interface umpush_addAlias_Params {
	/**账户，例如email*/ 
	name:string,

	/**平台类型*/ 
	type:string,

}

interface umpush_setAlias_Params {
	/**账户，例如email*/ 
	name:string,

	/**平台类型*/ 
	type:string,

}

interface umpush_removeAlias_Params {
	/**账户，例如email*/ 
	name:string,

	/**平台类型*/ 
	type:string,

}

interface umpush_setAutoAlert_Params {
	/**是否开启弹出框*/ 
	value:boolean,

}

interface umpush_setBadgeClear_Params {
	/**null*/ 
	value:boolean,

}

interface umpush_addCardMessageWithLabel_Params {
	/**null*/ 
	label:string,

}

interface umpush_addCustomCardMessageWithPortraitSize_Params {
	/**（可选项） portrait时显示的size*/ 
	portraitsize?:any,

	/**（可选项） landscape时显示的size*/ 
	landscapesize?:any,

	/**（可选项）可以自定义的button*/ 
	button?:any,

	/**（可选项）标识*/ 
	label?:string,

}

interface umpush_addPlainTextCardMessageWithTitleFont_Params {
	/**（可选项）标题文字大小*/ 
	titleFont?:number,

	/**（可选项）内容文字大小*/ 
	contentfont?:number,

	/**（可选项）按钮文字大小*/ 
	buttonfont?:number,

	/**（可选项）标识*/ 
	label?:string,

}

interface AliMobileAnalytics {
	/**
	 * `注册`
	 * ========params==========
	 *
	 * `userRegister` :string : 注册的账号
	 */
	regist(params:AliMobileAnalytics_regist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `登录`
	 * ========params==========
	 *
	 * `userNick` :string : 账号
	 *
	 * `userId` :string : id
	 */
	login(params:AliMobileAnalytics_login_Params, callback?: (ret:JSON) => void):void

	/** 页面进入*/ 
	pageAppear():void

	/** 页面离开*/ 
	pageDisAppear():void

	/**
	 * `设置页面事件扩展`
	 * ========params==========
	 *
	 * `dictionary` :JSON : 设置页面事件扩展参数
	 */
	updatePageProperties(params:AliMobileAnalytics_updatePageProperties_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置上报数据的全局字段（键值对）（近iOS支持）`
	 * ========params==========
	 *
	 * `dictKey` :string : key值
	 *
	 * `dictValue` :string : value值
	 */
	setGlobalProperty(params:AliMobileAnalytics_setGlobalProperty_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除已上报数据的全局字段（近iOS支持）`
	 * ========params==========
	 *
	 * `dictKey` :string : key值 (添加过的)
	 */
	removeGlobalProperty(params:AliMobileAnalytics_removeGlobalProperty_Params, callback?: (ret:JSON) => void):void

	/** 初始化ALBBMANPageHitBuilder 用来进行页面事件的埋点*/ 
	initALBBMANPageHitBuilder():void

	/**
	 * `设置页面名称 （initALBBMANPageHitBuilder之后调用,且必须调用）（仅iOS支持）`
	 * ========params==========
	 *
	 * `pageName` :string : 页面名称
	 */
	setPageName(params:AliMobileAnalytics_setPageName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置页面 refer （initALBBMANPageHitBuilder之后调用，非必须调用）`
	 * ========params==========
	 *
	 * `referPageName` :string : 页面refer名称
	 */
	setReferPage(params:AliMobileAnalytics_setReferPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置页面停留时间 （initALBBMANPageHitBuilder之后调用，非必须调用）`
	 * ========params==========
	 *
	 * `durationTime` :number : 页面停留时间
	 */
	setDurationOnPage(params:AliMobileAnalytics_setDurationOnPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置页面事件扩展参数 （initALBBMANPageHitBuilder之后调用，非必须调用）`
	 * ========params==========
	 *
	 * `pageKey` :string : key值
	 *
	 * `pageValue` :string : value值
	 */
	setProperty(params:AliMobileAnalytics_setProperty_Params, callback?: (ret:JSON) => void):void

	/** 组装单条日志 （initALBBMANPageHitBuilder之后调用，非必须调用）*/ 
	build():void

	/** 自定义事件埋点初始化*/ 
	initALBBMANCustomHitBuilder():void

	/**
	 * `设置自定义事件的标签（initALBBMANCustomHitBuilder之后调用，必须调用）(仅iOS支持)`
	 * ========params==========
	 *
	 * `eventId` :string : key值
	 */
	setEventLabel(params:AliMobileAnalytics_setEventLabel_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置自定义事件的页面名称（initALBBMANCustomHitBuilder之后调用，非必须调用）`
	 * ========params==========
	 *
	 * `pageName` :string : 页面名称
	 */
	setEventPage(params:AliMobileAnalytics_setEventPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置自定义事件停留时间（initALBBMANCustomHitBuilder之后调用，非必须调用）`
	 * ========params==========
	 *
	 * `durationTime` :number : 停留时间
	 */
	setDurationOnEvent(params:AliMobileAnalytics_setDurationOnEvent_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置自定义事件扩展参数（initALBBMANCustomHitBuilder之后调用，非必须调用）`
	 * ========params==========
	 *
	 * `pageKey` :string : key值
	 *
	 * `pageValue` :string : value值
	 */
	setEventProperty(params:AliMobileAnalytics_setEventProperty_Params, callback?: (ret:JSON) => void):void

	/** 组装单条日志（initALBBMANCustomHitBuilder之后调用，非必须调用）*/ 
	buildEvent():void

}
interface AliMobileAnalytics_regist_Params {
	/**注册的账号*/ 
	userRegister:string,

}

interface AliMobileAnalytics_login_Params {
	/**账号*/ 
	userNick:string,

	/**id*/ 
	userId:string,

}

interface AliMobileAnalytics_updatePageProperties_Params {
	/**设置页面事件扩展参数*/ 
	dictionary:JSON,

}

interface AliMobileAnalytics_setGlobalProperty_Params {
	/**key值*/ 
	dictKey:string,

	/**value值*/ 
	dictValue:string,

}

interface AliMobileAnalytics_removeGlobalProperty_Params {
	/**key值 (添加过的)*/ 
	dictKey:string,

}

interface AliMobileAnalytics_setPageName_Params {
	/**页面名称*/ 
	pageName:string,

}

interface AliMobileAnalytics_setReferPage_Params {
	/**页面refer名称*/ 
	referPageName:string,

}

interface AliMobileAnalytics_setDurationOnPage_Params {
	/**页面停留时间*/ 
	durationTime:number,

}

interface AliMobileAnalytics_setProperty_Params {
	/**key值*/ 
	pageKey:string,

	/**value值*/ 
	pageValue:string,

}

interface AliMobileAnalytics_setEventLabel_Params {
	/**key值*/ 
	eventId:string,

}

interface AliMobileAnalytics_setEventPage_Params {
	/**页面名称*/ 
	pageName:string,

}

interface AliMobileAnalytics_setDurationOnEvent_Params {
	/**停留时间*/ 
	durationTime:number,

}

interface AliMobileAnalytics_setEventProperty_Params {
	/**key值*/ 
	pageKey:string,

	/**value值*/ 
	pageValue:string,

}

interface ajAuth {
	/** 预取号并设置授权页样式*/ 
	init():void

	/** 打开授权页面*/ 
	loginAuth():void

	/** 获取token*/ 
	getToken():void

}
interface moxiesdk {
	/** 魔蝎开放平台SDK调用*/ 
	authMoxie(callback?: (ret:JSON) => void):void

}
interface weiXin {
}
interface aliyunLive {
	/**
	 * `配置直播流`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视图的位置及尺寸
	 *
	 * `url` :string : 推流url
	 *
	 * `bitRate` :JSON : （可选项）码率
	 *
	 * `fps` :number : (可选项)帧率
	 *
	 * `screenOrientation` :string : （可选项）屏幕方向
	 *
	 * `reconnectTimeout` :number : (可选项)重连超时时长
	 *
	 * `videoResolution ` :string : (可选项)视频分辨率
	 *
	 * `outputResolution` :string : 输出分辨率
	 *
	 * `exposure` :number : 曝光度（-1 或 不传表示自动曝光）
	 *
	 * `videoPreset` :any : (可选项)摄像头采集质量
	 *
	 * `cameraPosition` :any : (可选项)摄像头位置
	 *
	 * `frontMirror` :boolean : （可选项）是否开启前置摄像头镜像(仅支持iOS)
	 *
	 * `waterMarkImage` :any : (可选项)水印图片，不添加该参数，则无水印图片
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	configStream(params:aliyunLive_configStream_Params, callback?: (ret:JSON) => void):void

	/** 开始推流*/ 
	startStream(callback?: (ret:JSON) => void):void

	/** 停止推流*/ 
	stopStream(callback?: (ret:JSON) => void):void

	/**
	 * `设置闪关灯(前置摄像头打开时不支持操作闪光灯)`
	 * ========params==========
	 *
	 * `flash` :string : （可选项）闪光灯类型
	 */
	setFlash(params:aliyunLive_setFlash_Params):void

	/**
	 * `设置静音`
	 * ========params==========
	 *
	 * `mute` :string : （可选项）静音状态
	 */
	setMute(params:aliyunLive_setMute_Params):void

	/**
	 * `设置美颜`
	 * ========params==========
	 *
	 * `beauty` :string : （可选项）美颜状态
	 */
	setBeauty(params:aliyunLive_setBeauty_Params):void

	/**
	 * `设置美颜度`
	 * ========params==========
	 *
	 * `value` :number : （可选项）美颜度
	 */
	setSkinValue(params:aliyunLive_setSkinValue_Params):void

	/**
	 * `设置美颜级别（注意：只有打开美颜是调用该方法才有效）`
	 * ========params==========
	 *
	 * `level` :string : （可选项）美颜级别
	 */
	setBeautyLevel(params:aliyunLive_setBeautyLevel_Params):void

	/**
	 * `设置相机曝光度`
	 * ========params==========
	 *
	 * `value` :number : （可选项）曝光度
	 */
	setExposureValue(params:aliyunLive_setExposureValue_Params):void

	/** 转换摄像头*/ 
	toggleCamera():void

	/** 添加连接状态监听者*/ 
	addConnectStatusListener(callback?: (ret:JSON) => void):void

	/** 自动对焦*/ 
	focusing():void

	/** 设置缩放比例*/ 
	setZoom():void

	/**
	 * `初始化媒体播放器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `accessKeyId` :string : accessKey（需要到阿里云直播平台去申请）
	 *
	 * `accessKeySecret` :string : accessKeySecret(需要到阿里云直播平台去申请)
	 *
	 * `businessId` :string : businessId
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	init(params:aliyunLive_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `准备播放（注意play之前需要调用此方法）`
	 * ========params==========
	 *
	 * `url` :string : 播放地址，支持（支持HLS、RTMP、HTTP FLV、mp4等流格式）
	 */
	prepareToPlay(params:aliyunLive_prepareToPlay_Params, callback?: (ret:JSON) => void):void

	/** 播放*/ 
	play():void

	/** 暂停*/ 
	pause():void

	/** 停止*/ 
	stop():void

	/** 销毁*/ 
	destroy():void

	/** 获取视频的宽度*/ 
	getVideoWidth():void

	/** 获取视频的高度*/ 
	getVideoHeight():void

	/**
	 * `设置请求超时时间`
	 * ========params==========
	 *
	 * `timeout` :number : 请求超时时间
	 */
	setTimeout(params:aliyunLive_setTimeout_Params):void

	/**
	 * `设置媒体类型`
	 * ========params==========
	 *
	 * `type` :number : 媒体类型
	 */
	setMediaType(params:aliyunLive_setMediaType_Params):void

	/**
	 * `是否静音`
	 * ========params==========
	 *
	 * `isMute` :boolean : 表示是否静音
	 */
	setMuteMode(params:aliyunLive_setMuteMode_Params):void

	/**
	 * `视频缩放模式`
	 * ========params==========
	 *
	 * `mode` :number : 视频缩放模式
	 */
	setVideoScalingMode(params:aliyunLive_setVideoScalingMode_Params):void

	/**
	 * `设置默认解码器（由于不同手机硬件的差别，使用硬件解码器可能导致一些兼容性问题，所以在这里建议使用软件解码器）`
	 * ========params==========
	 *
	 * `type` :number : 解码器模式
	 */
	setDefaultDecoder(params:aliyunLive_setDefaultDecoder_Params):void

	/**
	 * `设置缓冲时长`
	 * ========params==========
	 *
	 * `duration` :number : 缓冲时长
	 */
	setMaxBufferDuration(params:aliyunLive_setMaxBufferDuration_Params):void

	/** 添加监听事件*/ 
	addEventListener(callback?: (ret:JSON) => void):void

	/** 获取错误码*/ 
	getErrorCode():void

}
interface aliyunLive_configStream_Params {
	/**（可选项）视图的位置及尺寸*/ 
	rect?:JSON,

	/**推流url*/ 
	url:string,

	/**（可选项）码率*/ 
	bitRate?:JSON,

	/**(可选项)帧率*/ 
	fps?:number,

	/**（可选项）屏幕方向*/ 
	screenOrientation?:string,

	/**(可选项)重连超时时长*/ 
	reconnectTimeout?:number,

	/**(可选项)视频分辨率*/ 
	videoResolution ?:string,

	/**输出分辨率*/ 
	outputResolution:string,

	/**曝光度（-1 或 不传表示自动曝光）*/ 
	exposure:number,

	/**(可选项)摄像头采集质量*/ 
	videoPreset?:any,

	/**(可选项)摄像头位置*/ 
	cameraPosition?:any,

	/**（可选项）是否开启前置摄像头镜像(仅支持iOS)*/ 
	frontMirror?:boolean,

	/**(可选项)水印图片，不添加该参数，则无水印图片*/ 
	waterMarkImage?:any,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface aliyunLive_setFlash_Params {
	/**（可选项）闪光灯类型*/ 
	flash?:string,

}

interface aliyunLive_setMute_Params {
	/**（可选项）静音状态*/ 
	mute?:string,

}

interface aliyunLive_setBeauty_Params {
	/**（可选项）美颜状态*/ 
	beauty?:string,

}

interface aliyunLive_setSkinValue_Params {
	/**（可选项）美颜度*/ 
	value?:number,

}

interface aliyunLive_setBeautyLevel_Params {
	/**（可选项）美颜级别*/ 
	level?:string,

}

interface aliyunLive_setExposureValue_Params {
	/**（可选项）曝光度*/ 
	value?:number,

}

interface aliyunLive_init_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**accessKey（需要到阿里云直播平台去申请）*/ 
	accessKeyId:string,

	/**accessKeySecret(需要到阿里云直播平台去申请)*/ 
	accessKeySecret:string,

	/**businessId*/ 
	businessId:string,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface aliyunLive_prepareToPlay_Params {
	/**播放地址，支持（支持HLS、RTMP、HTTP FLV、mp4等流格式）*/ 
	url:string,

}

interface aliyunLive_setTimeout_Params {
	/**请求超时时间*/ 
	timeout:number,

}

interface aliyunLive_setMediaType_Params {
	/**媒体类型*/ 
	type:number,

}

interface aliyunLive_setMuteMode_Params {
	/**表示是否静音*/ 
	isMute:boolean,

}

interface aliyunLive_setVideoScalingMode_Params {
	/**视频缩放模式*/ 
	mode:number,

}

interface aliyunLive_setDefaultDecoder_Params {
	/**解码器模式*/ 
	type:number,

}

interface aliyunLive_setMaxBufferDuration_Params {
	/**缓冲时长*/ 
	duration:number,

}

interface iflyAd {
	/**
	 * `添加Banner广告`
	 * ========params==========
	 *
	 * `adIdAndroid` :string : android广告位id，讯飞平台为每个广告位分配的广告位id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。
	 *
	 * `adIdIOS` :string : ios广告位id，讯飞平台为每个广告位分配的广告位id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。
	 *
	 * `rect` :JSON : 广告控件位置参数
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	addBannerAd(params:iflyAd_addBannerAd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加插屏广告，大开不可用removeAdView移除`
	 * ========params==========
	 *
	 * `adIdAndroid` :string : android广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。
	 *
	 * `adIdIOS` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	addInterstitialAd(params:iflyAd_addInterstitialAd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加信息流视频广告（可暂停，可全屏，可静音，不可跳过）`
	 * ========params==========
	 *
	 * `adIdAndroid` :string : android广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。
	 *
	 * `adIdIOS` :string : ios广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。
	 *
	 * `rect` :boolean : （可选项）自动播放
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	addNativeVideoAd(params:iflyAd_addNativeVideoAd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加开屏视频广告（不可暂停，全屏，可静音，可跳过）`
	 * ========params==========
	 *
	 * `adIdAndroid` :string : android广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。
	 *
	 * `adIdIOS` :boolean : （可选项）back健是否可以关闭
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	addSplashVideoAd(params:iflyAd_addSplashVideoAd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加激励视频广告（不可暂停，全屏，可静音，不可跳过）`
	 * ========params==========
	 *
	 * `adIdAndroid` :string : android广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。
	 *
	 * `adIdIOS` :boolean : （可选项）back健是否可以关闭
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	addRewardedVideoAd(params:iflyAd_addRewardedVideoAd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加贴片视频广告（不可暂停，全屏，可静音，可跳过）`
	 * ========params==========
	 *
	 * `adIdAndroid` :string : android广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。
	 *
	 * `adIdIOS` :string : ios广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。
	 *
	 * `backClose` :boolean : （可选项）back健是否可以关闭
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	addPatchVideoAd(params:iflyAd_addPatchVideoAd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除广告(iOS不支持插屏广告)`
	 * ========params==========
	 *
	 * `id` :number : 添加广告控件时返回的id
	 */
	removeAdView(params:iflyAd_removeAdView_Params, callback?: (ret:JSON) => void):void

}
interface iflyAd_addBannerAd_Params {
	/**android广告位id，讯飞平台为每个广告位分配的广告位id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。*/ 
	adIdAndroid:string,

	/**ios广告位id，讯飞平台为每个广告位分配的广告位id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。*/ 
	adIdIOS:string,

	/**广告控件位置参数*/ 
	rect:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

}

interface iflyAd_addInterstitialAd_Params {
	/**android广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。*/ 
	adIdAndroid:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	adIdIOS?:boolean,

}

interface iflyAd_addNativeVideoAd_Params {
	/**android广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。*/ 
	adIdAndroid:string,

	/**ios广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。*/ 
	adIdIOS:string,

	/**（可选项）自动播放*/ 
	rect?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

}

interface iflyAd_addSplashVideoAd_Params {
	/**android广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。*/ 
	adIdAndroid:string,

	/**（可选项）back健是否可以关闭*/ 
	adIdIOS?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

}

interface iflyAd_addRewardedVideoAd_Params {
	/**android广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。*/ 
	adIdAndroid:string,

	/**（可选项）back健是否可以关闭*/ 
	adIdIOS?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

}

interface iflyAd_addPatchVideoAd_Params {
	/**android广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。*/ 
	adIdAndroid:string,

	/**ios广告位id，讯飞平台为每个广告位分配的位以id 在[讯飞后台](https://www.voiceads.cn/developer/app/manage)申请。*/ 
	adIdIOS:string,

	/**（可选项）back健是否可以关闭*/ 
	backClose?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

}

interface iflyAd_removeAdView_Params {
	/**添加广告控件时返回的id*/ 
	id:number,

}

interface appsflyerSDK {
	/** App打开后收集安装数据并上报到AppsFlyer Server.*/ 
	trackAppLaunch(callback?: (ret:JSON) => void):void

}
interface UIAlivcLivePlayer {
	/**
	 * `打开播放器,并播放视频`
	 * ========params==========
	 *
	 * `skin` :string : （可选项）皮肤
	 *
	 * `coverUrl` :string : （可选项）设置播放器封面，封面地址和标题可以从服务端下发，封面地址请使用https 地址
	 *
	 * `title` :string : （可选项）播放器标题(仅支持iOS)
	 *
	 * `url` :string : 播放地址，支持（支持HLS、RTMP、HTTP FLV、mp4等流格式）
	 */
	openPlayer(params:UIAlivcLivePlayer_openPlayer_Params):void

}
interface UIAlivcLivePlayer_openPlayer_Params {
	/**（可选项）皮肤*/ 
	skin?:string,

	/**（可选项）设置播放器封面，封面地址和标题可以从服务端下发，封面地址请使用https 地址*/ 
	coverUrl?:string,

	/**（可选项）播放器标题(仅支持iOS)*/ 
	title?:string,

	/**播放地址，支持（支持HLS、RTMP、HTTP FLV、mp4等流格式）*/ 
	url:string,

}

interface baiduNavigation {
	/**
	 * `开始导航`
	 * ========params==========
	 *
	 * `start` :JSON : 起点信息
	 *
	 * `goBy` :Array : （可选项）途经点位置信息，可输入1-3个途经点
	 *
	 * `end` :JSON : 终点信息
	 *
	 * `routeMode` :string : 导航路线类型，取值范围见[路线类型](!Constant)，可为空
	 *
	 * `showConditionBar` :boolean : 是否显示导航界面上小窗口地图，此参数也可在导航界面的设置中去设置,(ios不支持)
	 */
	start(params:baiduNavigation_start_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置自定义图层数据`
	 * ========params==========
	 *
	 * `items` :Array : 图层数据
	 */
	setItemOverlay(params:baiduNavigation_setItemOverlay_Params):void

	/**
	 * `更新自定义图层数据`
	 * ========params==========
	 *
	 * `items` :Array : 图层数据
	 */
	updateItemOverlay(params:baiduNavigation_updateItemOverlay_Params):void

	/**
	 * `删除某个路线图层`
	 * ========params==========
	 *
	 * `name` :any : 图片的名字
	 */
	removeOneItem(params:baiduNavigation_removeOneItem_Params):void

	/**
	 * `显示或隐藏自定义图层`
	 * ========params==========
	 *
	 * `show` :boolean : 是否显示（可选项）
	 */
	overlayShow(params:baiduNavigation_overlayShow_Params):void

	/** 清除自定义图层数据*/ 
	clearItemOverlay():void

}
interface baiduNavigation_start_Params {
	/**起点信息*/ 
	start:JSON,

	/**（可选项）途经点位置信息，可输入1-3个途经点*/ 
	goBy?:Array,

	/**终点信息*/ 
	end:JSON,

	/**导航路线类型，取值范围见[路线类型](!Constant)，可为空*/ 
	routeMode:string,

	/**是否显示导航界面上小窗口地图，此参数也可在导航界面的设置中去设置,(ios不支持)*/ 
	showConditionBar:boolean,

}

interface baiduNavigation_setItemOverlay_Params {
	/**图层数据*/ 
	items:Array,

}

interface baiduNavigation_updateItemOverlay_Params {
	/**图层数据*/ 
	items:Array,

}

interface baiduNavigation_removeOneItem_Params {
	/**图片的名字*/ 
	name:any,

}

interface baiduNavigation_overlayShow_Params {
	/**是否显示（可选项）*/ 
	show?:boolean,

}

interface googlePay {
	/**
	 * `初始化`
	 * ========params==========
	 *
	 * `production` :boolean : 是否是生产环境
	 */
	init(params:googlePay_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `确定是否能使用 Google Pay API 进行付款`
	 * ========params==========
	 *
	 * `request` :any : 判断是否可以用googlePay的参数，详情见[googlePay对象参考](https://developers.google.com/pay/api/android/reference/object#IsReadyToPayRequest)
	 */
	isReadyToPay(params:googlePay_isReadyToPay_Params, callback?: (ret:JSON) => void):void

	/**
	 * `请求付款`
	 * ========params==========
	 *
	 * `paymentData` :any : 付款参数；详情见[googlePay对象参考](https://developers.google.com/pay/api/android/reference/object#IsReadyToPayRequest)
	 */
	requestPayment(params:googlePay_requestPayment_Params, callback?: (ret:JSON) => void):void

}
interface googlePay_init_Params {
	/**是否是生产环境*/ 
	production:boolean,

}

interface googlePay_isReadyToPay_Params {
	/**判断是否可以用googlePay的参数，详情见[googlePay对象参考](https://developers.google.com/pay/api/android/reference/object#IsReadyToPayRequest)*/ 
	request:any,

}

interface googlePay_requestPayment_Params {
	/**付款参数；详情见[googlePay对象参考](https://developers.google.com/pay/api/android/reference/object#IsReadyToPayRequest)*/ 
	paymentData:any,

}

interface gizWifiSDK {
}
interface ffPlayer {
	/**
	 * `打开播放器`
	 * ========params==========
	 *
	 * `title` :string : 播放器中显示的视频名称
	 *
	 * `url` :string : RTMP地址
	 */
	open(params:ffPlayer_open_Params):void

}
interface ffPlayer_open_Params {
	/**播放器中显示的视频名称*/ 
	title:string,

	/**RTMP地址*/ 
	url:string,

}

interface modulebaidumtj {
}
interface IFlyFace {
	/** 人脸图像注册(reg)：上传图像，验证图像的有效性，然后存储起来，作为数据源*/ 
	onlineReg(callback?: (ret:JSON) => void):void

	/** 删除已存在人脸模型：根据模型id删除已存在人脸模型（仅支持Android）*/ 
	onlineDel(callback?: (ret:JSON) => void):void

	/** 人脸图像验证(verify)：通过与指定源图像比较，验证人脸相似性*/ 
	onlineVerify(callback?: (ret:JSON) => void):void

	/** 脸图像检测(detect)：能够检测出不同姿态方位的人脸在图中的位置。（仅ios支持）*/ 
	onlineDetect(callback?: (ret:JSON) => void):void

	/** 打开视频检测页面*/ 
	openVideoDetection():void

	/** 切换摄像头，当前为前摄像头，切换为后摄像头，当前为后摄像头，切换为前摄像头（仅ios支持）*/ 
	skipCamera():void

	/** 关闭视频检测页面*/ 
	close():void

	/** 创建组（仅支持Android）*/ 
	creatGroup(callback?: (ret:JSON) => void):void

	/** 删除已有组（仅支持Android）*/ 
	delGroup(callback?: (ret:JSON) => void):void

	/** 添加人脸模型到指定组（仅支持Android）*/ 
	addToGroup(callback?: (ret:JSON) => void):void

	/** 人脸模型从指定组移除（仅支持Android）*/ 
	delFromGroup(callback?: (ret:JSON) => void):void

	/** 1：N检测（仅支持Android）*/ 
	detectN(callback?: (ret:JSON) => void):void

}
interface acXimalaya {
	/**
	 * `初始化SDK`
	 * ========params==========
	 *
	 * `appKey` :string : 喜马拉雅开放平台前台网站申请创建应用以获取的app_key，参考[喜马拉雅入住流程](http://open.ximalaya.com/docNoHelp/detailDev?categoryId=2&articleId=7)
	 *
	 * `appSecret` :string : 在喜马拉雅开放平台前台网站申请创建应用以获取的Papp_secret，参考[喜马拉雅入住流程](http://open.ximalaya.com/docNoHelp/detailDev?categoryId=2&articleId=7)
	 *
	 * `redirectUrl` :string : 授权回调地址；（仅android支持）
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	init(params:acXimalaya_init_Params):void

	/**
	 * `初始化授权`
	 * ========params==========
	 *
	 * `appKey` :string : 喜马拉雅开放平台前台网站申请创建应用以获取的app_key，参考[喜马拉雅入住流程](http://open.ximalaya.com/docNoHelp/detailDev?categoryId=2&articleId=7)
	 *
	 * `appSecret` :string : 在喜马拉雅开放平台前台网站申请创建应用以获取的Papp_secret，参考[喜马拉雅入住流程](http://open.ximalaya.com/docNoHelp/detailDev?categoryId=2&articleId=7)
	 *
	 * `redirectUrl` :string : 应用定义的回调地址
	 *
	 * `packageId` :string : 应用定义的包名
	 *
	 * `appName` :string : 应用名字
	 */
	initAuthorize(params:acXimalaya_initAuthorize_Params):void

	/**
	 * `授权接口`
	 * ========params==========
	 *
	 * `isOpen` :boolean : （可选项）是否跳转喜马拉雅
	 */
	authorize(params:acXimalaya_authorize_Params):void

	/** 刷新授权信息（仅iOS支持）*/ 
	refreshToken():void

	/**
	 * `注册并授权接口`
	 * ========params==========
	 *
	 * `isOpen` :boolean : （可选项）是否跳转喜马拉雅
	 */
	registerAndAuthorize(params:acXimalaya_registerAndAuthorize_Params):void

	/** 获取AuthorizeModel*/ 
	loadAuthorizeModel():void

	/**
	 * `第三方使用third_uid和third_token换取授权后的access_token`
	 * ========params==========
	 *
	 * `tUid` :string : third_uid
	 *
	 * `tToken` :string : third_token
	 */
	requestExchangeToken(params:acXimalaya_requestExchangeToken_Params):void

	/**
	 * `设置state参数(optional/非必需)。state表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。开发者可以用这个参数验证请求有效性，也可以记录用户请求授权页前的位置。这个参数可用于防止跨站请求伪造（CSRF）攻击`
	 * ========params==========
	 *
	 * `state` :string : state参数
	 */
	settingAuthorizeState(params:acXimalaya_settingAuthorizeState_Params):void

	/**
	 * `请求服务器生成并返回二维码信息用于喜马拉雅APP扫描验证登录`
	 * ========params==========
	 *
	 * `qrCodeSize` :number : 用于选择返回二维码的size大小
	 */
	requestLoginQR(params:acXimalaya_requestLoginQR_Params):void

	/** 查询登录状态及授权信息接口*/ 
	checkQRCodeLoginStatus():void

	/** 授权事件的监听*/ 
	addAuthorizeListener():void

	/** 获取喜马拉雅内容分类，如："有声小说"、"相声评书"*/ 
	getCategoriesList():void

	/** 获取专辑标签或者声音标签*/ 
	getTagsList():void

	/**
	 * `根据分类和标签获取某个分类某个标签下的热门专辑列表/最新专辑列表/最多播放专辑列表`
	 * ========params==========
	 *
	 * `categoryId` :number : 分类ID，指定分类，为0时表示热门分类
	 *
	 * `tagName` :string : 分类下对应专辑标签
	 *
	 * `calcDimension` :number : 计算维度，现支持最火􏶓􏷩􏷪􏵽􏻑(1)，最新(2)，经典或播放最多 􏰨􏻦􏵒􏵋􏷽􏵽􏸘(3)
	 *
	 * `page` :number : 返回第几页，必须大于等于1，不填默认为1
	 *
	 * `count` :number : 每页多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getAlbumsList(params:acXimalaya_getAlbumsList_Params):void

	/**
	 * `根据专辑ID获取专辑下的声音列表，即专辑浏览`
	 * ========params==========
	 *
	 * `albumId` :string : (必传项)专辑ID
	 *
	 * `sort` :string : 'asc'表示喜马拉雅正序；'desc'表示喜马拉雅倒序；'time_asc'表示时间升序；'time_desc'表示时间降序
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页有多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getAlbumsBrowse(params:acXimalaya_getAlbumsBrowse_Params):void

	/**
	 * `批量获取专辑列表`
	 * ========params==========
	 *
	 * `ids` :string : (必填项)专辑ID列表，传参时用英文逗号分隔
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getAlbumsBatch(params:acXimalaya_getAlbumsBatch_Params):void

	/**
	 * `根据分类和标签获取某个分类下某个标签的热门声音列表`
	 * ========params==========
	 *
	 * `categoryId` :string : 分类ID，指定分类，为'0'时表示热门分类
	 *
	 * `tagName` :string : 分类下对应声音标签
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页有多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getTracksHot(params:acXimalaya_getTracksHot_Params):void

	/**
	 * `获取某个分类下的元数据列表`
	 * ========params==========
	 *
	 * `categoryId` :number : 分类ID，指定分类
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getMetadataList(params:acXimalaya_getMetadataList_Params):void

	/**
	 * `获取某个分类的元数据属性键值组合下包含的热门专辑列表/最新专辑列表/最多播放专辑列表`
	 * ========params==========
	 *
	 * `categoryId` :number : (可选项)分类ID，指定分类
	 *
	 * `page` :number : (可选项)返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页多少条
	 *
	 * `calcDimension` :number : (必填项)计算维度，1代表最火；2代表最新；3代表经典或播放最多
	 *
	 * `metadataAttribute` :string : (可选项)元数据属性列表，格式：attr_key1:attr_value1;attr_key2:attr_value2;attr_key3:attr_value3   注意：此字段可为空，为空表示获取此分类下全部的最火、最新或者播放最多的专辑列表
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getMetadataAlbums(params:acXimalaya_getMetadataAlbums_Params):void

	/** 获取直播省份列表*/ 
	getLiveProvince():void

	/**
	 * `获取直播电台列表`
	 * ========params==========
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页有多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getLiveRadio(params:acXimalaya_getLiveRadio_Params):void

	/**
	 * `获取某个直播电台某一天的节目排期表`
	 * ========params==========
	 *
	 * `weekday` :number : 表示星期几，不填则取今天的星期；0代表星期天，1代表星期一，2代表星期二，3代表星期三，4代表星期四，5代表星期五，6代表星期六
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getLiveSchedule(params:acXimalaya_getLiveSchedule_Params):void

	/**
	 * `获取当前直播的节目`
	 * ========params==========
	 *
	 * `radioId` :number : 直播电台ID
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getLiveProgram(params:acXimalaya_getLiveProgram_Params):void

	/**
	 * `获取某省份城市列表`
	 * ========params==========
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getLiveCity(params:acXimalaya_getLiveCity_Params):void

	/**
	 * `获取某个城市下的电台列表`
	 * ========params==========
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页有多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getLiveRadioOfCity(params:acXimalaya_getLiveRadioOfCity_Params):void

	/**
	 * `根据电台ID，批量获取电台列表`
	 * ========params==========
	 *
	 * `ids` :string : 电台ID列表，传参时用英文逗号隔开
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getRadioByID(params:acXimalaya_getRadioByID_Params):void

	/** 获取电台分类*/ 
	getRadioCategory():void

	/**
	 * `根据电台分类获取直播电台数据`
	 * ========params==========
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页有多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getLiveGetRadiosByCategory(params:acXimalaya_getLiveGetRadiosByCategory_Params):void

	/**
	 * `播放声音列表`
	 * ========params==========
	 *
	 * `track` :any : 查询返回的track  json对象（仅iOS支持）
	 *
	 * `playlist` :Array : 声音列表
	 *
	 * `index` :number : （可选项）列表中从第几个开始播放（仅android支持）
	 */
	playWithTrack(params:acXimalaya_playWithTrack_Params):void

	/**
	 * `通过url进行播放`
	 * ========params==========
	 *
	 * `url` :string : url地址
	 */
	playWithDecryptedUrl(params:acXimalaya_playWithDecryptedUrl_Params):void

	/**
	 * `接着播上一次正在播放的专辑（仅iOS支持）`
	 * ========params==========
	 *
	 * `albumID` :number : 专辑ID
	 *
	 * `trackID` :number : trackID
	 */
	continuePlayFromAlbum(params:acXimalaya_continuePlayFromAlbum_Params):void

	/** 暂停当前播放*/ 
	pauseTrackPlay():void

	/** 恢复当前播放*/ 
	resumeTrackPlay():void

	/** 停止当前播放*/ 
	stopTrackPlay():void

	/**
	 * `更新当前播放列表，（android仅更新，不播放）`
	 * ========params==========
	 *
	 * `playlist` :Array : 声音列表
	 */
	replacePlayList(params:acXimalaya_replacePlayList_Params):void

	/** 是否有下一首*/ 
	hasNextTrack():void

	/** 是否有上一首*/ 
	hasPrevTrack():void

	/** 播放下一首*/ 
	playNextTrack():void

	/** 播放上一首*/ 
	playPrevTrack():void

	/**
	 * `设置播放器自动播放下一首（仅iOS支持，android设置[播放模式](setTrackPlayMode)即可）`
	 * ========params==========
	 *
	 * `status` :boolean : （可选项）是否自动播放下一首
	 */
	setAutoNexTrack(params:acXimalaya_setAutoNexTrack_Params):void

	/**
	 * `设置播放器从特定的时间播放`
	 * ========params==========
	 *
	 * `time` :number : 播放时间
	 */
	seekToTime(params:acXimalaya_seekToTime_Params):void

	/** 清空缓存*/ 
	clearCacheSafely():void

	/** 获取缓存大小*/ 
	getTotalCacheSize():void

	/**
	 * `设置当前播放器的下一首选择模式`
	 * ========params==========
	 *
	 * `trackPlayMode` :number : 选择模式
	 */
	setTrackPlayMode(params:acXimalaya_setTrackPlayMode_Params):void

	/** 获取当前播放器的下一首选择模式*/ 
	getTrackPlayMode():void

	/**
	 * `设置播放器的音量`
	 * ========params==========
	 *
	 * `volume` :number : 音量，取值范围：0～1
	 */
	setVolume(params:acXimalaya_setVolume_Params):void

	/**
	 * `开始播放直播电台`
	 * ========params==========
	 *
	 * `radio` :any : 查询返回直播电台json对象（仅iOS支持）
	 *
	 * `index` :number : 上个查询直播电台接口（getLiveRadio、getLiveGetRadiosByCategory）返回数据中的第几个（仅android支持）
	 */
	startLivePlayWithRadio(params:acXimalaya_startLivePlayWithRadio_Params):void

	/** 暂停当前电台播放（android此接口等同pauseTrackPlay）*/ 
	pauseLivePlay():void

	/** 恢复当前电台播放（android此接口等同resumeTrackPlay）*/ 
	resumeLivePlay():void

	/** 停止当前电台播放（android此接口等同stopTrackPlay）*/ 
	stopLivePlay():void

	/**
	 * `设置电台播放器到指定的时间播放（仅iOS支持）`
	 * ========params==========
	 *
	 * `durtion` :number : 指定的时间
	 */
	seekHistoryLivePlay(params:acXimalaya_seekHistoryLivePlay_Params):void

	/** 播放下一个录播电台节目（仅iOS有效）*/ 
	playNextProgram():void

	/** 播放上一个录播电台节目（仅iOS有效）*/ 
	playPreProgram():void

	/** 点播事件的监听*/ 
	addTrackPlayListener():void

	/** 直播事件的监听（仅iOS支持，androi通过[addTrackPlayListener](addTrackPlayListener)接口一起回调）*/ 
	addLivePlayListener():void

	/** 获取当前播放的类型（仅android支持）*/ 
	getCurrentType():void

	/** 获取音频时长（仅android支持）*/ 
	getPlayDuration():void

	/** 获取当前播放进度（仅android支持）*/ 
	getPlayCurrPositon():void

	/** 获取当前播放地址（仅android支持）*/ 
	getCurPlayUrl():void

}
interface acXimalaya_init_Params {
	/**喜马拉雅开放平台前台网站申请创建应用以获取的app_key，参考[喜马拉雅入住流程](http://open.ximalaya.com/docNoHelp/detailDev?categoryId=2&articleId=7)*/ 
	appKey:string,

	/**在喜马拉雅开放平台前台网站申请创建应用以获取的Papp_secret，参考[喜马拉雅入住流程](http://open.ximalaya.com/docNoHelp/detailDev?categoryId=2&articleId=7)*/ 
	appSecret:string,

	/**授权回调地址；（仅android支持）*/ 
	redirectUrl:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_initAuthorize_Params {
	/**喜马拉雅开放平台前台网站申请创建应用以获取的app_key，参考[喜马拉雅入住流程](http://open.ximalaya.com/docNoHelp/detailDev?categoryId=2&articleId=7)*/ 
	appKey:string,

	/**在喜马拉雅开放平台前台网站申请创建应用以获取的Papp_secret，参考[喜马拉雅入住流程](http://open.ximalaya.com/docNoHelp/detailDev?categoryId=2&articleId=7)*/ 
	appSecret:string,

	/**应用定义的回调地址*/ 
	redirectUrl:string,

	/**应用定义的包名*/ 
	packageId:string,

	/**应用名字*/ 
	appName:string,

}

interface acXimalaya_authorize_Params {
	/**（可选项）是否跳转喜马拉雅*/ 
	isOpen?:boolean,

}

interface acXimalaya_registerAndAuthorize_Params {
	/**（可选项）是否跳转喜马拉雅*/ 
	isOpen?:boolean,

}

interface acXimalaya_requestExchangeToken_Params {
	/**third_uid*/ 
	tUid:string,

	/**third_token*/ 
	tToken:string,

}

interface acXimalaya_settingAuthorizeState_Params {
	/**state参数*/ 
	state:string,

}

interface acXimalaya_requestLoginQR_Params {
	/**用于选择返回二维码的size大小*/ 
	qrCodeSize:number,

}

interface acXimalaya_getAlbumsList_Params {
	/**分类ID，指定分类，为0时表示热门分类*/ 
	categoryId:number,

	/**分类下对应专辑标签*/ 
	tagName:string,

	/**计算维度，现支持最火􏶓􏷩􏷪􏵽􏻑(1)，最新(2)，经典或播放最多 􏰨􏻦􏵒􏵋􏷽􏵽􏸘(3)*/ 
	calcDimension:number,

	/**返回第几页，必须大于等于1，不填默认为1*/ 
	page:number,

	/**每页多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_getAlbumsBrowse_Params {
	/**(必传项)专辑ID*/ 
	albumId:string,

	/**'asc'表示喜马拉雅正序；'desc'表示喜马拉雅倒序；'time_asc'表示时间升序；'time_desc'表示时间降序*/ 
	sort:string,

	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页有多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_getAlbumsBatch_Params {
	/**(必填项)专辑ID列表，传参时用英文逗号分隔*/ 
	ids:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_getTracksHot_Params {
	/**分类ID，指定分类，为'0'时表示热门分类*/ 
	categoryId:string,

	/**分类下对应声音标签*/ 
	tagName:string,

	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页有多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_getMetadataList_Params {
	/**分类ID，指定分类*/ 
	categoryId:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_getMetadataAlbums_Params {
	/**(可选项)分类ID，指定分类*/ 
	categoryId?:number,

	/**(可选项)返回第几页，必须大于等于1*/ 
	page?:number,

	/**每页多少条*/ 
	count:number,

	/**(必填项)计算维度，1代表最火；2代表最新；3代表经典或播放最多*/ 
	calcDimension:number,

	/**(可选项)元数据属性列表，格式：attr_key1:attr_value1;attr_key2:attr_value2;attr_key3:attr_value3   注意：此字段可为空，为空表示获取此分类下全部的最火、最新或者播放最多的专辑列表*/ 
	metadataAttribute?:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_getLiveRadio_Params {
	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页有多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_getLiveSchedule_Params {
	/**表示星期几，不填则取今天的星期；0代表星期天，1代表星期一，2代表星期二，3代表星期三，4代表星期四，5代表星期五，6代表星期六*/ 
	weekday:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_getLiveProgram_Params {
	/**直播电台ID*/ 
	radioId:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_getLiveCity_Params {
	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_getLiveRadioOfCity_Params {
	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页有多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_getRadioByID_Params {
	/**电台ID列表，传参时用英文逗号隔开*/ 
	ids:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_getLiveGetRadiosByCategory_Params {
	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页有多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface acXimalaya_playWithTrack_Params {
	/**查询返回的track  json对象（仅iOS支持）*/ 
	track:any,

	/**声音列表*/ 
	playlist:Array,

	/**（可选项）列表中从第几个开始播放（仅android支持）*/ 
	index?:number,

}

interface acXimalaya_playWithDecryptedUrl_Params {
	/**url地址*/ 
	url:string,

}

interface acXimalaya_continuePlayFromAlbum_Params {
	/**专辑ID*/ 
	albumID:number,

	/**trackID*/ 
	trackID:number,

}

interface acXimalaya_replacePlayList_Params {
	/**声音列表*/ 
	playlist:Array,

}

interface acXimalaya_setAutoNexTrack_Params {
	/**（可选项）是否自动播放下一首*/ 
	status?:boolean,

}

interface acXimalaya_seekToTime_Params {
	/**播放时间*/ 
	time:number,

}

interface acXimalaya_setTrackPlayMode_Params {
	/**选择模式*/ 
	trackPlayMode:number,

}

interface acXimalaya_setVolume_Params {
	/**音量，取值范围：0～1*/ 
	volume:number,

}

interface acXimalaya_startLivePlayWithRadio_Params {
	/**查询返回直播电台json对象（仅iOS支持）*/ 
	radio:any,

	/**上个查询直播电台接口（getLiveRadio、getLiveGetRadiosByCategory）返回数据中的第几个（仅android支持）*/ 
	index:number,

}

interface acXimalaya_seekHistoryLivePlay_Params {
	/**指定的时间*/ 
	durtion:number,

}

interface gtest {
	/**
	 * `原生滑动验证`
	 * ========params==========
	 *
	 * `apiOne` :string : 由服务端提供
	 *
	 * `apiTwo` :string : 由服务端提供
	 *
	 * `rect` :any : 按钮的布局设置
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	validationNative(params:gtest_validationNative_Params, callback?: (ret:JSON) => void):void

	/**
	 * `自定义按钮`
	 * ========params==========
	 *
	 * `apiOne` :string : 由服务端提供
	 *
	 * `apiTwo` :string : 由服务端提供
	 */
	validationCustom(params:gtest_validationCustom_Params, callback?: (ret:JSON) => void):void

	/** 移除validationNative接口中创建的按钮*/ 
	removeNativeButton(callback?: (ret:JSON) => void):void

}
interface gtest_validationNative_Params {
	/**由服务端提供*/ 
	apiOne:string,

	/**由服务端提供*/ 
	apiTwo:string,

	/**按钮的布局设置*/ 
	rect:any,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface gtest_validationCustom_Params {
	/**由服务端提供*/ 
	apiOne:string,

	/**由服务端提供*/ 
	apiTwo:string,

}

interface cardReader {
}
interface UIPLPlayer {
	/**
	 * `打开视频播放器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `styles` :JSON : （可选项）模块的样式设置
	 *
	 * `videoUrlPath` :string : （必填项）视频资源地址，支持fs://、widget://、rtmp://、http://
	 *
	 * `title` :string : （可选项）视频标题
	 *
	 * `isAutoPlay` :boolean : （可选项）是否自动播放 (自动播放:true ; 不自动播放:false)
	 *
	 * `isPlayMusic` :boolean : （可选项）是否仅播放音频 (仅播放音频:true ; 视频播放:false)
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	openPlayer(params:UIPLPlayer_openPlayer_Params, callback?: (ret:JSON) => void):void

	/** 开始播放*/ 
	play():void

	/** 暂停播放*/ 
	pause():void

	/** 暂停后恢复播放*/ 
	resume():void

	/** 停止播放*/ 
	stop():void

	/**
	 * `同一个页面，已经调用play接口后，切换视频地址时调用（前提条件，同一界面已经调用过play接口）。`
	 * ========params==========
	 *
	 * `url` :string : （必选项）视频资源地址，支持fs://、widget://、rtmp://、http://
	 *
	 * `title` :string : （可选项）视频标题
	 *
	 * `sameSource` :string : （必选项）是否是同种格式播放，同格式切换打开更快(当sameSource 为 YES 时，视频格式与切换前视频格式不同时，会导致视频打开失败)
	 */
	switchPlayUrl(params:UIPLPlayer_switchPlayUrl_Params, callback?: (ret:JSON) => void):void

	/** 获取视频的时长*/ 
	getDuration(callback?: (ret:JSON) => void):void

	/** 获取已经播放的时长*/ 
	getCurrentPosition(callback?: (ret:JSON) => void):void

	/** 全屏播放*/ 
	full():void

	/** 退出全屏*/ 
	unfull():void

	/** 播放器监听事件 (监听播放结束，暂停，播放，返回按钮，进入/退出全屏，视频区域点击监听)*/ 
	addEventListener(callback?: (ret:JSON) => void):void

	/** 获取是否全屏播放状态*/ 
	isFullScreen(callback?: (ret:JSON) => void):void

	/**
	 * `设置播放进度位置(请根据视频最大时长进行参数控制传入)`
	 * ========params==========
	 *
	 * `process` :number : （必填项）设置视频需要播放的时长
	 */
	seekTo(params:UIPLPlayer_seekTo_Params):void

	/**
	 * `设置播音量  (**注意:在iOS中，此接口设置的是播放器的音量，而不是系统音量**)`
	 * ========params==========
	 *
	 * `volume` :number : （必填项）0-100
	 */
	setVolume(params:UIPLPlayer_setVolume_Params):void

	/** 获取播放器音量  **注意:对于iOS来说:此接口只能获取播放器的音量，而不是系统的音量***/ 
	getVolume():void

	/** 隐藏播放器*/ 
	hidePlayer():void

	/** 显示播放器*/ 
	showPlayer():void

	/** 关闭播放器*/ 
	closePlayer():void

	/**
	 * `倍速播放`
	 * ========params==========
	 *
	 * `speed` :number : （必填项）设置视频播放倍速(取值范围 0.1-1.9)
	 */
	setSpeed(params:UIPLPlayer_setSpeed_Params):void

}
interface UIPLPlayer_openPlayer_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块的样式设置*/ 
	styles?:JSON,

	/**（必填项）视频资源地址，支持fs://、widget://、rtmp://、http://*/ 
	videoUrlPath:string,

	/**（可选项）视频标题*/ 
	title?:string,

	/**（可选项）是否自动播放 (自动播放:true ; 不自动播放:false)*/ 
	isAutoPlay?:boolean,

	/**（可选项）是否仅播放音频 (仅播放音频:true ; 视频播放:false)*/ 
	isPlayMusic?:boolean,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface UIPLPlayer_switchPlayUrl_Params {
	/**（必选项）视频资源地址，支持fs://、widget://、rtmp://、http://*/ 
	url:string,

	/**（可选项）视频标题*/ 
	title?:string,

	/**（必选项）是否是同种格式播放，同格式切换打开更快(当sameSource 为 YES 时，视频格式与切换前视频格式不同时，会导致视频打开失败)*/ 
	sameSource:string,

}

interface UIPLPlayer_seekTo_Params {
	/**（必填项）设置视频需要播放的时长*/ 
	process:number,

}

interface UIPLPlayer_setVolume_Params {
	/**（必填项）0-100*/ 
	volume:number,

}

interface UIPLPlayer_setSpeed_Params {
	/**（必填项）设置视频播放倍速(取值范围 0.1-1.9)*/ 
	speed:number,

}

interface maketionCardReader {
}
interface youkuPlayer {
}
interface aliYunVoice {
	/** 添加监听*/ 
	addEventListener():void

	/**
	 * `移除已添加的监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件的名字
	 */
	removeEventListener(params:aliYunVoice_removeEventListener_Params):void

	/** 配置语音识别的参数*/ 
	recognizeConfig():void

	/** 打开语音识别引擎*/ 
	recognizeStart():void

	/** 关闭语音识别引擎*/ 
	recognizeStop():void

	/** 返回当前引擎是否已启动*/ 
	recognizeIsStarted():void

	/** 取消此次语音识别*/ 
	recognizeCancel():void

	/** 清除录音文件缓存*/ 
	clearCache():void

	/**
	 * `配置语音合成参数`
	 * ========params==========
	 *
	 * `appKey` :string : (可选项)应用的appkey
	 */
	readConfig(params:aliYunVoice_readConfig_Params):void

	/** 开始语音合成*/ 
	readStart():void

	/** 暂停语音合成，仅支持安卓系统*/ 
	readPause():void

	/** 停止语音合成，仅支持安卓系统*/ 
	readStop():void

}
interface aliYunVoice_removeEventListener_Params {
	/**监听的事件的名字*/ 
	name:string,

}

interface aliYunVoice_readConfig_Params {
	/**(可选项)应用的appkey*/ 
	appKey?:string,

}

interface netEaseAVChat {
	/** 初始化音视频引擎*/ 
	init():void

	/**
	 * `登录`
	 * ========params==========
	 *
	 * `account` :string : 账号
	 *
	 * `token` :string : 服务器注册获取的token
	 */
	login(params:netEaseAVChat_login_Params, callback?: (ret:JSON) => void):void

	/** 登出*/ 
	logout(callback?: (ret:JSON) => void):void

	/**
	 * `设置引擎是否开启，（enable为true，登录后，开启通话前调用；enable为false，通话结束时调用）`
	 * ========params==========
	 *
	 * `enable` :boolean : 设置引擎是否开启
	 */
	setRtc(params:netEaseAVChat_setRtc_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置本地预览窗口`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	setLocalVideoRender(params:netEaseAVChat_setLocalVideoRender_Params):void

	/**
	 * `设置远程预览窗口`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	setRemoteVideoRender(params:netEaseAVChat_setRemoteVideoRender_Params):void

	/**
	 * `开始本地预览`
	 * ========params==========
	 *
	 * `zFront` :boolean : （可选项）预览是否在窗口最上层
	 */
	startLocalVideoRender(params:netEaseAVChat_startLocalVideoRender_Params):void

	/**
	 * `开始远程预览`
	 * ========params==========
	 *
	 * `account` :string : 远程用户id
	 *
	 * `zFront` :boolean : （可选项）预览是否在窗口最上层
	 */
	startRemoteVideoRender(params:netEaseAVChat_startRemoteVideoRender_Params):void

	/** 关闭本地预览*/ 
	closeLocalVideo():void

	/** 显示本地预览*/ 
	showLocalVideo():void

	/** 隐藏本地预览*/ 
	hideLocalVideo():void

	/** 关闭远程预览*/ 
	closeRemoteVideo():void

	/** 显示远程预览*/ 
	showRemoteVideo():void

	/** 隐藏远程预览*/ 
	hideRemoteVideo():void

	/**
	 * `设置初始化参数（setRtc，启动引擎后调用）`
	 * ========params==========
	 *
	 * `autoCallProximity` :boolean : 语音通话时使用, 距离感应是否自动黑屏
	 *
	 * `defaultFrontCamera` :boolean : 默认是否使用前置摄像头
	 *
	 * `videoQuality` :number : 视频质量调整, 最高建议使用480P
	 */
	setParams(params:netEaseAVChat_setParams_Params):void

	/**
	 * `设置是否开启视频（setParams之后，如果当前为视频对话进行调用，且enable为true；挂断后调用该接口，且enable为false）`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启视频
	 */
	setVideo(params:netEaseAVChat_setVideo_Params):void

	/**
	 * `设置是否开启预览（setVideo之后，如果当前为视频对话进行调用，且enable为true；挂断前调用该接口，且enable为false）`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启预览
	 */
	setPreview(params:netEaseAVChat_setPreview_Params):void

	/**
	 * `切换摄像头`
	 * ========params==========
	 *
	 * `cameraType` :string : 摄像头类型 (仅支持iOS)
	 */
	switchCamera(params:netEaseAVChat_switchCamera_Params):void

	/**
	 * `是否切换为扬声器`
	 * ========params==========
	 *
	 * `isSpeaker` :boolean : 是否切换为扬声器 (仅支持iOS)
	 */
	setSpeaker(params:netEaseAVChat_setSpeaker_Params):void

	/**
	 * `拨打音视频对话`
	 * ========params==========
	 *
	 * `account` :string : 账号
	 *
	 * `type` :string : 对话类型
	 */
	call(params:netEaseAVChat_call_Params, callback?: (ret:JSON) => void):void

	/**
	 * `接通对话`
	 * ========params==========
	 *
	 * `chatId` :string : 对话id，从addComingCallingListener接口中获取
	 */
	accept(params:netEaseAVChat_accept_Params, callback?: (ret:JSON) => void):void

	/**
	 * `挂断对话 (iOS无返回值参数)`
	 * ========params==========
	 *
	 * `chatId` :string : 对话id
	 */
	hangUp(params:netEaseAVChat_hangUp_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否开启来电监听`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启来电监听
	 */
	addComingCallingListener(params:netEaseAVChat_addComingCallingListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否开启监听该帐号其他端回应`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	addOnlineAckListener(params:netEaseAVChat_addOnlineAckListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否开启挂断监听`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	addHangUpListener(params:netEaseAVChat_addHangUpListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否开启监听被叫方回应`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	calleeAckListener(params:netEaseAVChat_calleeAckListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `音视频切换控制 (iOS无返回值信息)`
	 * ========params==========
	 *
	 * `chatId` :string : 对话id
	 *
	 * `command` :string : 命令
	 */
	sendControlCommand(params:netEaseAVChat_sendControlCommand_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听通话控制通知`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否开启监听
	 */
	controlListener(params:netEaseAVChat_controlListener_Params, callback?: (ret:JSON) => void):void

}
interface netEaseAVChat_login_Params {
	/**账号*/ 
	account:string,

	/**服务器注册获取的token*/ 
	token:string,

}

interface netEaseAVChat_setRtc_Params {
	/**设置引擎是否开启*/ 
	enable:boolean,

}

interface netEaseAVChat_setLocalVideoRender_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface netEaseAVChat_setRemoteVideoRender_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface netEaseAVChat_startLocalVideoRender_Params {
	/**（可选项）预览是否在窗口最上层*/ 
	zFront?:boolean,

}

interface netEaseAVChat_startRemoteVideoRender_Params {
	/**远程用户id*/ 
	account:string,

	/**（可选项）预览是否在窗口最上层*/ 
	zFront?:boolean,

}

interface netEaseAVChat_setParams_Params {
	/**语音通话时使用, 距离感应是否自动黑屏*/ 
	autoCallProximity:boolean,

	/**默认是否使用前置摄像头*/ 
	defaultFrontCamera:boolean,

	/**视频质量调整, 最高建议使用480P*/ 
	videoQuality:number,

}

interface netEaseAVChat_setVideo_Params {
	/**是否开启视频*/ 
	enable:boolean,

}

interface netEaseAVChat_setPreview_Params {
	/**是否开启预览*/ 
	enable:boolean,

}

interface netEaseAVChat_switchCamera_Params {
	/**摄像头类型 (仅支持iOS)*/ 
	cameraType:string,

}

interface netEaseAVChat_setSpeaker_Params {
	/**是否切换为扬声器 (仅支持iOS)*/ 
	isSpeaker:boolean,

}

interface netEaseAVChat_call_Params {
	/**账号*/ 
	account:string,

	/**对话类型*/ 
	type:string,

}

interface netEaseAVChat_accept_Params {
	/**对话id，从addComingCallingListener接口中获取*/ 
	chatId:string,

}

interface netEaseAVChat_hangUp_Params {
	/**对话id*/ 
	chatId:string,

}

interface netEaseAVChat_addComingCallingListener_Params {
	/**是否开启来电监听*/ 
	enable:boolean,

}

interface netEaseAVChat_addOnlineAckListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChat_addHangUpListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChat_calleeAckListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface netEaseAVChat_sendControlCommand_Params {
	/**对话id*/ 
	chatId:string,

	/**命令*/ 
	command:string,

}

interface netEaseAVChat_controlListener_Params {
	/**是否开启监听*/ 
	enable:boolean,

}

interface csOpenApi {
}
interface camera360 {
}
interface aliShortVideo {
	/**
	 * `视频录制`
	 * ========params==========
	 *
	 * `minDuration` :number : （可选项）最小时长,单位秒。
	 *
	 * `maxDuration` :number : （可选项）最大时长,单位秒 。
	 *
	 * `gop` :number : （可选项）关键帧。
	 *
	 * `videoQuality` :number : （可选项）视频清晰度。
	 *
	 * `encodeMode` :number : （可选项）编码格式。
	 *
	 * `recordType` :number : （可选项）拍摄方式。（仅iOS支持）
	 *
	 * `videoFlipH` :boolean : （可选项）镜像输出 。
	 *
	 * `beautyType` :number : （可选项）美颜类型。
	 *
	 * `videoOutputWidth` :number : （可选项）分辨率。（仅iOS支持）
	 *
	 * `resolutionMode` :number : （可选项）分辨率基数（仅android支持）
	 *
	 * `beautyLevel` :number : （可选项）美颜级别（仅android支持）
	 *
	 * `cameraType` :number : （可选项）前后摄像头设置（仅android支持）
	 *
	 * `videoOutputRatio` :number : （可选项）视频比例。
	 */
	videoRecord(params:aliShortVideo_videoRecord_Params, callback?: (ret:JSON) => void):void

	/**
	 * `视频编辑（仅iOS支持）`
	 * ========params==========
	 *
	 * `fps` :number : （可选项）帧率。
	 *
	 * `gop` :number : （可选项）关键帧。
	 *
	 * `videoQuality` :number : （可选项）视频清晰度。
	 *
	 * `encodeMode` :number : （可选项）编码格式。
	 *
	 * `videoOutputWidth` :number : （可选项）分辨率。
	 *
	 * `videoOutputRatio` :number : （可选项）视频比例。
	 *
	 * `cutMode` :number : （可选项）裁剪模式。
	 */
	videoeEdit(params:aliShortVideo_videoeEdit_Params, callback?: (ret:JSON) => void):void

	/**
	 * `视频剪裁`
	 * ========params==========
	 *
	 * `fps` :number : （可选项）帧率。
	 *
	 * `gop` :number : （可选项）关键帧。
	 *
	 * `videoQuality` :number : （可选项）视频清晰度。
	 *
	 * `encodeMode` :number : （可选项）编码格式。
	 *
	 * `videoOutputWidth` :number : （可选项）分辨率。（仅iOS支持）
	 *
	 * `resolutionMode` :number : （可选项）分辨率基数（仅android支持）
	 *
	 * `videoOutputRatio` :number : （可选项）视频比例。
	 *
	 * `cutMode` :number : （可选项）裁剪模式。
	 */
	videoClip(params:aliShortVideo_videoClip_Params, callback?: (ret:JSON) => void):void

}
interface aliShortVideo_videoRecord_Params {
	/**（可选项）最小时长,单位秒。*/ 
	minDuration?:number,

	/**（可选项）最大时长,单位秒 。*/ 
	maxDuration?:number,

	/**（可选项）关键帧。*/ 
	gop?:number,

	/**（可选项）视频清晰度。*/ 
	videoQuality?:number,

	/**（可选项）编码格式。*/ 
	encodeMode?:number,

	/**（可选项）拍摄方式。（仅iOS支持）*/ 
	recordType?:number,

	/**（可选项）镜像输出 。*/ 
	videoFlipH?:boolean,

	/**（可选项）美颜类型。*/ 
	beautyType?:number,

	/**（可选项）分辨率。（仅iOS支持）*/ 
	videoOutputWidth?:number,

	/**（可选项）分辨率基数（仅android支持）*/ 
	resolutionMode?:number,

	/**（可选项）美颜级别（仅android支持）*/ 
	beautyLevel?:number,

	/**（可选项）前后摄像头设置（仅android支持）*/ 
	cameraType?:number,

	/**（可选项）视频比例。*/ 
	videoOutputRatio?:number,

}

interface aliShortVideo_videoeEdit_Params {
	/**（可选项）帧率。*/ 
	fps?:number,

	/**（可选项）关键帧。*/ 
	gop?:number,

	/**（可选项）视频清晰度。*/ 
	videoQuality?:number,

	/**（可选项）编码格式。*/ 
	encodeMode?:number,

	/**（可选项）分辨率。*/ 
	videoOutputWidth?:number,

	/**（可选项）视频比例。*/ 
	videoOutputRatio?:number,

	/**（可选项）裁剪模式。*/ 
	cutMode?:number,

}

interface aliShortVideo_videoClip_Params {
	/**（可选项）帧率。*/ 
	fps?:number,

	/**（可选项）关键帧。*/ 
	gop?:number,

	/**（可选项）视频清晰度。*/ 
	videoQuality?:number,

	/**（可选项）编码格式。*/ 
	encodeMode?:number,

	/**（可选项）分辨率。（仅iOS支持）*/ 
	videoOutputWidth?:number,

	/**（可选项）分辨率基数（仅android支持）*/ 
	resolutionMode?:number,

	/**（可选项）视频比例。*/ 
	videoOutputRatio?:number,

	/**（可选项）裁剪模式。*/ 
	cutMode?:number,

}

interface chanceAd {
}
interface zhiChiSobot {
	/** 启动智齿客服*/ 
	startZhiChiSobot():void

}
interface speedataUHF {
	/** 初始化sdk*/ 
	init():void

}
interface iflytekvoiceads {
}
interface aliTrade {
	/** 初始化SDK*/ 
	initSDK():void

	/** 授权登录*/ 
	showLogin():void

	/** 注销*/ 
	logout():void

	/**
	 * `显示商品详情`
	 * ========params==========
	 *
	 * `itemId` :string : 商品id
	 *
	 * `taokePid` :string : 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 */
	showItemDetailPage(params:aliTrade_showItemDetailPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `唤起免登H5页面`
	 * ========params==========
	 *
	 * `url` :string : 页面url地址
	 */
	showPage(params:aliTrade_showPage_Params, callback?: (ret:JSON) => void):void

	/** 唤起购物车*/ 
	showCartsPage():void

	/** 打开分域订单*/ 
	showMyOrders():void

}
interface aliTrade_showItemDetailPage_Params {
	/**商品id*/ 
	itemId:string,

	/**淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	taokePid:string,

}

interface aliTrade_showPage_Params {
	/**页面url地址*/ 
	url:string,

}

interface bgnMobSMS {
	/**
	 * `发送短信验证码`
	 * ========params==========
	 *
	 * `tempCode` :string : （可选项）用户自定义的短信模版编号，不传则使用官方提供的默认短信模版。
	 *
	 * `country` :string : （可选项）国家地区编号，默认为86。
	 *
	 * `phone` :string : （必填项）手机号码。
	 */
	send(params:bgnMobSMS_send_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送语音验证码`
	 * ========params==========
	 *
	 * `country` :string : （可选项）国家地区编号，默认为86。
	 *
	 * `phone` :string : （必填项）手机号码。
	 */
	voice(params:bgnMobSMS_voice_Params, callback?: (ret:JSON) => void):void

	/**
	 * `验证收到的验证码`
	 * ========params==========
	 *
	 * `code` :string : （必填项）手机接收到的验证码。
	 *
	 * `country` :string : （可选项）国家地区编号，默认为86。
	 *
	 * `phone` :string : （必填项）手机号码。
	 */
	verify(params:bgnMobSMS_verify_Params, callback?: (ret:JSON) => void):void

	/** 同步方式获取当前SMSSDK版本号*/ 
	getVersion():void

}
interface bgnMobSMS_send_Params {
	/**（可选项）用户自定义的短信模版编号，不传则使用官方提供的默认短信模版。*/ 
	tempCode?:string,

	/**（可选项）国家地区编号，默认为86。*/ 
	country?:string,

	/**（必填项）手机号码。*/ 
	phone:string,

}

interface bgnMobSMS_voice_Params {
	/**（可选项）国家地区编号，默认为86。*/ 
	country?:string,

	/**（必填项）手机号码。*/ 
	phone:string,

}

interface bgnMobSMS_verify_Params {
	/**（必填项）手机接收到的验证码。*/ 
	code:string,

	/**（可选项）国家地区编号，默认为86。*/ 
	country?:string,

	/**（必填项）手机号码。*/ 
	phone:string,

}

interface tencentCloudMta {
	/**
	 * `初始化sdk （调用优先级最高，只需要调用一次）`
	 * ========params==========
	 *
	 * `iosAppKey` :string : （可选项）从MTA获取的app key(ios)
	 *
	 * `channel` :string : （可选项）渠道，用户下载安装应用的来源平台，可自定义，例如：test；该字段只 iOS 有效
	 *
	 * `reportStrategy` :number : （可选项）上报策略
	 *
	 * `maxStoreEventCount` :number : （可选项）最大缓存的未发送的统计消息，默认1024条
	 *
	 * `maxLoadEventCount` :number : （可选项）一次最大加载未发送的缓存消息，默认30条；该字段只 iOS 有效
	 *
	 * `minBatchReportCount` :number : （可选项）统计上报策略为BATCH时，触发上报时最小缓存消息数，默认30条；该字段只 iOS 有效
	 *
	 * `maxBatchReportCount` :number : （可选项）统计上报策略为BATCH时，设置最大批量发送消息个数，默认30条；该字段只 Android 有效
	 *
	 * `maxSendRetryCount` :number : （可选项）发送失败最大重试数，默认3次
	 *
	 * `sendPeriodMinutes` :number : （可选项）上报策略为PERIOD时发送间隔，单位分钟，默认一天（1440分钟）
	 *
	 * `maxParallelTimingEvents` :number : （可选项）允许同时统计的时长事件数，默认1024条
	 *
	 * `maxReportEventLength` :number : （可选项）最大上报的单条event长度，超过不上报，单位Byte，默认4096，即4KB
	 *
	 * `ifa` :string : （可选项）设备的idfa，建议有广告权限的app设置此字段；该字段只 iOS 有效
	 */
	init(params:tencentCloudMta_init_Params, callback?: (ret:JSON) => void):void

	/** 开始统计使用时长，最好在APP进入前台时调用，使用“resume”事件属性*/ 
	trackActiveBegin(callback?: (ret:JSON) => void):void

	/** 结束统计使用时长，最好在APP退出前台时调用，使用“pause”事件属性*/ 
	trackActiveEnd(callback?: (ret:JSON) => void):void

	/**
	 * `标记页面访问`
	 * ========params==========
	 *
	 * `pageName` :string : 访问页面名称
	 */
	trackPageViewBegin(params:tencentCloudMta_trackPageViewBegin_Params, callback?: (ret:JSON) => void):void

	/**
	 * `结束页面访问`
	 * ========params==========
	 *
	 * `pageName` :string : 访问页面名称
	 */
	trackPageViewEnd(params:tencentCloudMta_trackPageViewEnd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `自定义事件次数统计`
	 * ========params==========
	 *
	 * `eventId` :string : 事件id, 平台配置自定义事件id
	 *
	 * `kvs` :JSON : 事件参数, 平台配置自定义事件参数
	 */
	trackCustomKeyValueEvent(params:tencentCloudMta_trackCustomKeyValueEvent_Params, callback?: (ret:JSON) => void):void

	/**
	 * `自定义事件时长统计 开始`
	 * ========params==========
	 *
	 * `eventId` :string : 事件id, 平台配置自定义事件id
	 *
	 * `kvs` :JSON : 事件参数, 平台配置自定义事件参数
	 */
	trackCustomKeyValueEventBegin(params:tencentCloudMta_trackCustomKeyValueEventBegin_Params, callback?: (ret:JSON) => void):void

	/**
	 * `自定义事件时长统计 结束`
	 * ========params==========
	 *
	 * `eventId` :string : 事件id, 平台配置自定义事件id
	 *
	 * `kvs` :JSON : 事件参数, 平台配置自定义事件参数
	 */
	trackCustomKeyValueEventEnd(params:tencentCloudMta_trackCustomKeyValueEventEnd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `自定义事件时长统计 上传已统计时长`
	 * ========params==========
	 *
	 * `eventId` :string : 事件id, 平台配置自定义事件id
	 *
	 * `kvs` :JSON : 事件参数, 平台配置自定义事件参数
	 *
	 * `seconds` :number : 自定义事件已统计时长
	 */
	trackCustomKeyValueEventDuration(params:tencentCloudMta_trackCustomKeyValueEventDuration_Params, callback?: (ret:JSON) => void):void

	/**
	 * `带任意参数的自定义事件次数统计`
	 * ========params==========
	 *
	 * `eventId` :string : 事件id, 平台配置自定义事件id
	 *
	 * `args` :string : 事件参数
	 */
	trackCustomEvent(params:tencentCloudMta_trackCustomEvent_Params, callback?: (ret:JSON) => void):void

	/**
	 * `带任意参数的自定义事件时长统计 开始`
	 * ========params==========
	 *
	 * `eventId` :string : 事件id, 平台配置自定义事件id
	 *
	 * `args` :string : 事件参数
	 */
	trackCustomEventBegin(params:tencentCloudMta_trackCustomEventBegin_Params, callback?: (ret:JSON) => void):void

	/**
	 * `带任意参数的自定义事件时长统计 结束`
	 * ========params==========
	 *
	 * `eventId` :string : 事件id, 平台配置自定义事件id
	 *
	 * `args` :string : 事件参数
	 */
	trackCustomEventEnd(params:tencentCloudMta_trackCustomEventEnd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `手动上传缓存事件`
	 * ========params==========
	 *
	 * `maxCount` :number : 最大上报事件的条数
	 */
	commitCachedStats(params:tencentCloudMta_commitCachedStats_Params, callback?: (ret:JSON) => void):void

	/**
	 * `账号统计`
	 * ========params==========
	 *
	 * `userInfo` :JSON : 账号信息
	 */
	reportAccountExt(params:tencentCloudMta_reportAccountExt_Params, callback?: (ret:JSON) => void):void

	/**
	 * `账号统计 注销`
	 * ========params==========
	 *
	 * `accountType` :number : 账号类型，必填，默认0；与reportAccountExt接口的账号类型一致
	 */
	removeAccountExt(params:tencentCloudMta_removeAccountExt_Params, callback?: (ret:JSON) => void):void

	/**
	 * `自定义用户属性`
	 * ========params==========
	 *
	 * `user` :JSON : 平台配置的自定义用户属性
	 */
	setUserProperty(params:tencentCloudMta_setUserProperty_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户画像`
	 * ========params==========
	 *
	 * `qq` :string : 用户的QQ号码
	 */
	reportQQ(params:tencentCloudMta_reportQQ_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取在线参数`
	 * ========params==========
	 *
	 * `key` :string : 必填，在平台配置的key
	 *
	 * `defaultValue` :string : 选填，默认为空，没取到参数时返回的默认值
	 */
	getCustomProperty(params:tencentCloudMta_getCustomProperty_Params, callback?: (ret:JSON) => void):void

	/**
	 * `统计异常(描述)`
	 * ========params==========
	 *
	 * `error` :string : 错误描述
	 */
	trackError(params:tencentCloudMta_trackError_Params, callback?: (ret:JSON) => void):void

	/**
	 * `统计异常(堆栈信息)`
	 * ========params==========
	 *
	 * `name` :string : 错误名称
	 *
	 * `reason` :string : 错误描述信息
	 *
	 * `userInfo` :JSON : 错误的详细信息
	 */
	trackException(params:tencentCloudMta_trackException_Params, callback?: (ret:JSON) => void):void

	/** 启动LBS监控*/ 
	startMonitor(callback?: (ret:JSON) => void):void

	/** 停止LBS监控*/ 
	stopMonitor(callback?: (ret:JSON) => void):void

	/** 获取最新一次上报LBS的地理位置*/ 
	getLastLocation(callback?: (ret:JSON) => void):void

}
interface tencentCloudMta_init_Params {
	/**（可选项）从MTA获取的app key(ios)*/ 
	iosAppKey?:string,

	/**（可选项）渠道，用户下载安装应用的来源平台，可自定义，例如：test；该字段只 iOS 有效*/ 
	channel?:string,

	/**（可选项）上报策略*/ 
	reportStrategy?:number,

	/**（可选项）最大缓存的未发送的统计消息，默认1024条*/ 
	maxStoreEventCount?:number,

	/**（可选项）一次最大加载未发送的缓存消息，默认30条；该字段只 iOS 有效*/ 
	maxLoadEventCount?:number,

	/**（可选项）统计上报策略为BATCH时，触发上报时最小缓存消息数，默认30条；该字段只 iOS 有效*/ 
	minBatchReportCount?:number,

	/**（可选项）统计上报策略为BATCH时，设置最大批量发送消息个数，默认30条；该字段只 Android 有效*/ 
	maxBatchReportCount?:number,

	/**（可选项）发送失败最大重试数，默认3次*/ 
	maxSendRetryCount?:number,

	/**（可选项）上报策略为PERIOD时发送间隔，单位分钟，默认一天（1440分钟）*/ 
	sendPeriodMinutes?:number,

	/**（可选项）允许同时统计的时长事件数，默认1024条*/ 
	maxParallelTimingEvents?:number,

	/**（可选项）最大上报的单条event长度，超过不上报，单位Byte，默认4096，即4KB*/ 
	maxReportEventLength?:number,

	/**（可选项）设备的idfa，建议有广告权限的app设置此字段；该字段只 iOS 有效*/ 
	ifa?:string,

}

interface tencentCloudMta_trackPageViewBegin_Params {
	/**访问页面名称*/ 
	pageName:string,

}

interface tencentCloudMta_trackPageViewEnd_Params {
	/**访问页面名称*/ 
	pageName:string,

}

interface tencentCloudMta_trackCustomKeyValueEvent_Params {
	/**事件id, 平台配置自定义事件id*/ 
	eventId:string,

	/**事件参数, 平台配置自定义事件参数*/ 
	kvs:JSON,

}

interface tencentCloudMta_trackCustomKeyValueEventBegin_Params {
	/**事件id, 平台配置自定义事件id*/ 
	eventId:string,

	/**事件参数, 平台配置自定义事件参数*/ 
	kvs:JSON,

}

interface tencentCloudMta_trackCustomKeyValueEventEnd_Params {
	/**事件id, 平台配置自定义事件id*/ 
	eventId:string,

	/**事件参数, 平台配置自定义事件参数*/ 
	kvs:JSON,

}

interface tencentCloudMta_trackCustomKeyValueEventDuration_Params {
	/**事件id, 平台配置自定义事件id*/ 
	eventId:string,

	/**事件参数, 平台配置自定义事件参数*/ 
	kvs:JSON,

	/**自定义事件已统计时长*/ 
	seconds:number,

}

interface tencentCloudMta_trackCustomEvent_Params {
	/**事件id, 平台配置自定义事件id*/ 
	eventId:string,

	/**事件参数*/ 
	args:string,

}

interface tencentCloudMta_trackCustomEventBegin_Params {
	/**事件id, 平台配置自定义事件id*/ 
	eventId:string,

	/**事件参数*/ 
	args:string,

}

interface tencentCloudMta_trackCustomEventEnd_Params {
	/**事件id, 平台配置自定义事件id*/ 
	eventId:string,

	/**事件参数*/ 
	args:string,

}

interface tencentCloudMta_commitCachedStats_Params {
	/**最大上报事件的条数*/ 
	maxCount:number,

}

interface tencentCloudMta_reportAccountExt_Params {
	/**账号信息*/ 
	userInfo:JSON,

}

interface tencentCloudMta_removeAccountExt_Params {
	/**账号类型，必填，默认0；与reportAccountExt接口的账号类型一致*/ 
	accountType:number,

}

interface tencentCloudMta_setUserProperty_Params {
	/**平台配置的自定义用户属性*/ 
	user:JSON,

}

interface tencentCloudMta_reportQQ_Params {
	/**用户的QQ号码*/ 
	qq:string,

}

interface tencentCloudMta_getCustomProperty_Params {
	/**必填，在平台配置的key*/ 
	key:string,

	/**选填，默认为空，没取到参数时返回的默认值*/ 
	defaultValue:string,

}

interface tencentCloudMta_trackError_Params {
	/**错误描述*/ 
	error:string,

}

interface tencentCloudMta_trackException_Params {
	/**错误名称*/ 
	name:string,

	/**错误描述信息*/ 
	reason:string,

	/**错误的详细信息*/ 
	userInfo:JSON,

}

interface systemshare {
	/** 好友图片分享入口:*/ 
	syswxfriend():void

}
interface aliShortVideoAPI {
	/**
	 * `视频录制`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `videoSize` :JSON : （可选项）视频分辨率
	 *
	 * `minDuration` :number : （可选项）最小时长,单位秒。
	 *
	 * `maxDuration` :number : （可选项）最大时长,单位秒 。
	 *
	 * `gop` :number : （可选项）关键帧。
	 *
	 * `videoQuality` :number : （可选项）视频清晰度。
	 *
	 * `encodeMode` :number : （可选项）编码格式。
	 *
	 * `useFaceDetect` :boolean : （可选项）是否开启人脸识别  ；使用自带人脸识别，开启该功能，系统会在检测到有人脸动图加入时自动进行追踪显示 （仅iOS支持，android人脸识别需要专业版）
	 *
	 * `faceDetectCount` :number : （可选项）设置识别人脸的个数 当设置值小于1时，默认为1；当设置值大于3时，默认为3
	 *
	 * `faceDectectSync` :boolean : （可选项） 是否同步贴合人脸
	 *
	 * `frontCaptureSessionPreset` :number : （可选项） 前置摄像头采集分辨率（仅iOS支持）
	 *
	 * `backCaptureSessionPreset` :number : （可选项） 后置摄像头采集分辨率（仅iOS支持）
	 *
	 * `recordFps` :number : （可选项） 录制帧率, 取值区间(0,30]，区间外的值将视为无效值，依然使用默认值。
	 *
	 * `beautifyStatus` :boolean : （可选项） 是否开启美颜
	 *
	 * `beautifyValue` :number : （可选项） 设置美颜度 [0,100]
	 *
	 * `videoFlipH` :boolean : （可选项）镜像输出 。
	 *
	 * `exposureValue` :number : （可选项）  曝光值 [0,1]
	 *
	 * `cameraType` :number : （可选项）摄像头类型（仅android支持）
	 *
	 * `outPutPath` :string : 输出文件路径，支持fs路径（仅android支持）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）（仅android有效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动（仅android有效）
	 */
	openRecord(params:aliShortVideoAPI_openRecord_Params, callback?: (ret:JSON) => void):void

	/** 开始预览*/ 
	startPreview():void

	/** 停止预览*/ 
	stopPreview():void

	/** 销毁预览*/ 
	destroyRecorder():void

	/** 切换摄像头*/ 
	switchCameraPosition():void

	/** 循环切换手电筒模式   电筒模式有三种，分别是off，on和auto。切换顺序：off —-> on —-> auto。默认值：off*/ 
	switchTorchMode():void

	/**
	 * `设置手电筒模式`
	 * ========params==========
	 *
	 * `type` :number : （可选项）手电筒模式。
	 */
	setTorchType(params:aliShortVideoAPI_setTorchType_Params):void

	/**
	 * `手动对焦`
	 * ========params==========
	 *
	 * `pointX` :number : （可选项）对焦的x坐标。
	 *
	 * `pointY` :number : （可选项）对焦的y位置。
	 */
	focusPoint(params:aliShortVideoAPI_focusPoint_Params):void

	/**
	 * `设置变焦倍数  每次调用videoZoomFactor接口,实际变焦值zoom为设定的1/100。例：设置videoZoomFactor = 10.0f，实际zoom += 0.1f`
	 * ========params==========
	 *
	 * `videoZoomFactor` :number : （可选项）变焦倍数。
	 */
	videoZoomFactor(params:aliShortVideoAPI_videoZoomFactor_Params):void

	/**
	 * `设置美颜值`
	 * ========params==========
	 *
	 * `value` :number : （可选项）美颜值。
	 */
	setFaceBeautify(params:aliShortVideoAPI_setFaceBeautify_Params):void

	/**
	 * `设置滤镜`
	 * ========params==========
	 *
	 * `eid` :number : 数据ID。 例如：11002（仅iOS支持）
	 *
	 * `name` :string : 滤镜类型（仅iOS支持）
	 *
	 * `filterPath` :string : 滤镜资源路径 ，支持fs，原生路径（仅android支持）
	 */
	setFilter(params:aliShortVideoAPI_setFilter_Params):void

	/** 移除滤镜*/ 
	deleteFilter():void

	/**
	 * `设置特效`
	 * ========params==========
	 *
	 * `eid` :number : 数据ID。 例如：11002（仅iOS支持）
	 *
	 * `name` :string : 滤镜类型（仅iOS支持）
	 *
	 * `filterPath` :string : 滤镜资源路径 ，支持fs，原生路径（仅android支持）
	 *
	 * `duration` :number : 动效保留时间，秒（仅android支持）
	 *
	 * `startTime` :number : 动效开始时间，秒（仅android支持）
	 */
	setAnimationFilte(params:aliShortVideoAPI_setAnimationFilte_Params):void

	/**
	 * `移除特效`
	 * ========params==========
	 *
	 * `filterPath` :string : 滤镜资源路径 ，支持fs，原生路径（仅android支持）
	 *
	 * `duration` :number : 动效保留时间，秒（仅android支持）
	 *
	 * `startTime` :number : 动效开始时间，秒（仅android支持）
	 */
	deleteAnimationFilter(params:aliShortVideoAPI_deleteAnimationFilter_Params):void

	/** 开始录制*/ 
	startRecording():void

	/** 停止录制*/ 
	stopRecording():void

	/** 取消录制一个片段视频（仅android支持）*/ 
	cancelRecording():void

	/** 获取片段路径列表（仅android支持）*/ 
	getVideoPathList():void

	/**
	 * `删除片段视频（仅android支持）`
	 * ========params==========
	 *
	 * `deleteAll` :boolean : （可选项）是否删除所有片段未true则index参数无效
	 *
	 * `index` :number : （可选项）删除指定片段
	 */
	deletePart(params:aliShortVideoAPI_deletePart_Params):void

	/** 完成录制（android端会将录制片段视频拼接）*/ 
	finishRecording():void

	/**
	 * `路径视频合成视频（多个视频合成一个）`
	 * ========params==========
	 *
	 * `videoSize` :JSON : （可选项）视频分辨率
	 *
	 * `gop` :number : （可选项）关键帧。
	 *
	 * `fps` :number : （可选项）帧率。
	 *
	 * `bitrate` :number : （可选项）码率。
	 *
	 * `videoQuality` :number : （可选项）视频清晰度。
	 *
	 * `videoPathArray` :Array : null
	 *
	 * `tracks` :Array<JSON> : 轨道（仅android支持）
	 *
	 * `outPath` :string : 合成输出路径，支持fs路径（仅android支持）
	 *
	 * `crf` :number : （可选项）输出的crf（仅android支持）
	 */
	openMixSynthetic(params:aliShortVideoAPI_openMixSynthetic_Params, callback?: (ret:JSON) => void):void

	/** 开始路径视频合成（与openMixSynthetic使用）*/ 
	starMixSynthetic():void

	/** 暂停路径视频合成（与openMixSynthetic使用）*/ 
	pauseMixSynthetic():void

	/** 恢复路径视频合成（与openMixSynthetic使用）*/ 
	resumeMixSynthetic():void

	/** 取消路径视频合成（与openMixSynthetic使用）*/ 
	cancelMixSynthetic():void

	/**
	 * `录制视频合成（仅iOS支持）`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `videoSize` :JSON : （可选项）视频分辨率
	 *
	 * `videoPath` :string : 需要合成的视频路径。 //支持widget://和 fs://
	 *
	 * `minDuration` :number : （可选项）最小时长,单位秒。
	 *
	 * `maxDuration` :number : （可选项）最大时长,单位秒 。
	 *
	 * `gop` :number : （可选项）关键帧。
	 *
	 * `videoQuality` :number : （可选项）视频清晰度。
	 *
	 * `encodeMode` :number : （可选项）编码格式。
	 *
	 * `useFaceDetect` :boolean : （可选项）是否开启人脸识别  ；使用自带人脸识别，开启该功能，系统会在检测到有人脸动图加入时自动进行追踪显示
	 *
	 * `faceDetectCount` :number : （可选项）设置识别人脸的个数 当设置值小于1时，默认为1；当设置值大于3时，默认为3
	 *
	 * `faceDectectSync` :boolean : （可选项） 是否同步贴合人脸
	 *
	 * `frontCaptureSessionPreset` :number : （可选项） 前置摄像头采集分辨率
	 *
	 * `backCaptureSessionPreset` :number : （可选项） 后置摄像头采集分辨率
	 *
	 * `recordFps` :number : （可选项） 录制帧率, 取值区间(0,30]，区间外的值将视为无效值，依然使用默认值。
	 *
	 * `beautifyStatus` :boolean : （可选项） 是否开启美颜
	 *
	 * `beautifyValue` :number : （可选项） 设置美颜度 [0,100]
	 *
	 * `exposureValue` :number : （可选项）  曝光值 [0,1]
	 */
	openMix(params:aliShortVideoAPI_openMix_Params, callback?: (ret:JSON) => void):void

	/**
	 * `视频剪裁`
	 * ========params==========
	 *
	 * `videoPath` :string : 被裁减的视频路径 。
	 *
	 * `outPath` :string : 裁剪后视频输出路径（仅android支持）
	 *
	 * `isVideo` :boolean : 是否为视频路径； true：视频路径；false：音乐路径（仅iOS支持）
	 *
	 * `mediaType` :number : （可选项）文件类型（仅android支持）
	 *
	 * `videoSize` :JSON : （可选项）剪裁后视频分辨率； 视频分辨率必须为偶数，裁剪音乐时无需设置
	 *
	 * `startTime` :number : （可选项）开始时间,单位秒。
	 *
	 * `endTime` :number : （可选项）结束时间,单位秒 。
	 *
	 * `gop` :number : （可选项）关键帧； 裁剪音乐时无需设置
	 *
	 * `videoQuality` :number : （可选项）视频清晰度；裁剪音乐时无需设置
	 *
	 * `encodeMode` :number : （可选项）编码格式；
	 *
	 * `fps` :number : （可选项） 录制帧率；裁剪音乐时无需设置。（仅iOS支持）
	 *
	 * `cropMode` :number : （可选项）剪裁模式；裁剪音乐时无需设置
	 *
	 * `bitrate` :number : （可选项）码率；裁剪音乐时无需设置
	 *
	 * `fillBackgroundColor` :string : （可选项） 背景颜色；视频填充模式下有效，裁剪音乐时无需设置;支持#、rgb、rgba、
	 *
	 * `cropRect` :JSON : 裁剪区域，裁剪区域是相对视频原始大小计算的，因此cropRect不能超出视频的原始分辨率（仅android支持）
	 */
	videoCrop(params:aliShortVideoAPI_videoCrop_Params, callback?: (ret:JSON) => void):void

	/** 开始剪裁视频*/ 
	startCrop():void

	/** 取消剪裁视频（android可取消图片）*/ 
	cancleCrop():void

	/**
	 * `视频、图片、GIF图编辑`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块位置及尺寸
	 *
	 * `outPath` :string : 输出路径，支持fs路径 （仅android支持）
	 *
	 * `videoSize` :JSON : （可选项）视频分辨率
	 *
	 * `gop` :number : （可选项）关键帧。
	 *
	 * `videoQuality` :number : （可选项）视频清晰度。
	 *
	 * `codeType` :number : （可选项）编码格式。
	 *
	 * `mode` :number : （可选项）裁剪模式。
	 *
	 * `fps` :number : （可选项） 帧率；建议20 - 60 不超过60
	 *
	 * `clip` :Array : （可选项）视频分辨率（android为必选项）
	 *
	 * `frameRate` :number : 帧率（仅android支持）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）（仅android有效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动（仅android有效）
	 */
	videoEdit(params:aliShortVideoAPI_videoEdit_Params, callback?: (ret:JSON) => void):void

	/**
	 * `增加媒体片段（视频、图片、GIF图）`
	 * ========params==========
	 *
	 * `index` :number : （可选项） 增加的位置；
	 *
	 * `clip` :Array : （可选项）视频分辨率
	 */
	addMediaClip(params:aliShortVideoAPI_addMediaClip_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新媒体片段（视频、图片、GIF图）`
	 * ========params==========
	 *
	 * `index` :number : （可选项） 更换的位置；
	 *
	 * `clip` :Array : （可选项）视频分辨率
	 */
	updateMediaClip(params:aliShortVideoAPI_updateMediaClip_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除某个媒体片段（视频、图片、GIF图）`
	 * ========params==========
	 *
	 * `index` :number : （可选项） 删除的位置；
	 */
	deleteMediaClipAtIndex(params:aliShortVideoAPI_deleteMediaClipAtIndex_Params, callback?: (ret:JSON) => void):void

	/** 删除所有媒体片段（视频、图片、GIF图）*/ 
	deleteAllMediaClips():void

	/**
	 * `获取某个媒体片段（视频、图片、GIF图）`
	 * ========params==========
	 *
	 * `index` :number : （可选项） 获取的位置；
	 */
	getMediaClipAtIndex(params:aliShortVideoAPI_getMediaClipAtIndex_Params, callback?: (ret:JSON) => void):void

	/** 获取所有媒体片段（视频、图片、GIF图）*/ 
	getAllMediaClips():void

	/** 播放媒体片段*/ 
	mediaPlay():void

	/** 停止播放媒体片段*/ 
	mediaStop():void

	/** 暂停播放媒体片段*/ 
	mediaPause():void

	/** 继续播放媒体片段*/ 
	mediaResume():void

	/** 媒体片段是否正在播放*/ 
	mediaIsPlaying():void

	/**
	 * `seek到某一时间点`
	 * ========params==========
	 *
	 * `seekTo` :number : （可选项） 跳到的位置；
	 */
	mediaSeekTo(params:aliShortVideoAPI_mediaSeekTo_Params, callback?: (ret:JSON) => void):void

	/** 获取总时长(秒)*/ 
	getMediaDuration():void

	/** 获取当前播放(秒)*/ 
	getMediaCurrentTime():void

	/** 获取原始视频流播放时间(秒)*/ 
	getCurrentStreamTime():void

	/**
	 * `获取视频片段在播放时间轴上开始播放的时间(秒)`
	 * ========params==========
	 *
	 * `index` :number : （可选项） 获取的位置；
	 */
	getClipStartTimeAtIndex(params:aliShortVideoAPI_getClipStartTimeAtIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置播放器的刷新频率（仅iOS支持）`
	 * ========params==========
	 *
	 * `fps` :number : （可选项） 帧率；默认值：30帧/s，最大值：60帧/s，建议设置值不小于20帧/s
	 */
	setMediaRefreshFps(params:aliShortVideoAPI_setMediaRefreshFps_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置时间特效`
	 * ========params==========
	 *
	 * `startTime` :number : 时间特效开始时间
	 *
	 * `endTime` :number : 时间特效结束时间
	 *
	 * `type` :number : （可选项）时间特效类型。
	 *
	 * `needOriginDuration` :boolean : （可选类型）是否需要保持原视频长度（仅android支持）
	 *
	 * `repeatTime` :number : （可选项）重复次数 type为1时有效（仅android支持）
	 *
	 * `param` :number : 倍速；在变速类型下代表速率，范围建议 0.5 - 2；在反复类型下代表反复次数，内部取整型
	 */
	setApplyTimeFilter(params:aliShortVideoAPI_setApplyTimeFilter_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置音乐`
	 * ========params==========
	 *
	 * `path` :string : 音乐文件路径；支持widget://和fs://
	 *
	 * `startTime` :number : 音乐在播放轴上的开始播放时间
	 *
	 * `duration` :number : 音乐在播放轴上的播放持续时间
	 *
	 * `streamStartTime` :number : 音乐在自身轴上的用来播放的开始时间
	 *
	 * `streamDuration` :number : 音乐在自身轴上的用来播放的持续时长
	 *
	 * `audioMixWeight` :number : （可选项）音量大小
	 *
	 * `musicType` :number : （可选项）背景音乐或配音（仅android支持）
	 *
	 * `id` :number : 资源id，唯一标识（仅android支持）
	 */
	setMediaMusic(params:aliShortVideoAPI_setMediaMusic_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除某个音乐`
	 * ========params==========
	 *
	 * `index` :number : 删除的音乐位置（仅iOS支持）
	 *
	 * `id` :number : ：已添加的资源id（仅android支持）
	 *
	 * `musicType` :number : （可选项）背景音乐或配音（仅android支持）
	 */
	removeMusic(params:aliShortVideoAPI_removeMusic_Params, callback?: (ret:JSON) => void):void

	/** 删除所有音乐（仅iOS支持）*/ 
	removeAllMusic():void

	/**
	 * `设置单路流音效`
	 * ========params==========
	 *
	 * `streamId` :number : 流id
	 *
	 * `weight` :number : 音效权重,范围0-100
	 *
	 * `effectType` :number : 音效类型
	 */
	setAudioEffect(params:aliShortVideoAPI_setAudioEffect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除单路流音效`
	 * ========params==========
	 *
	 * `streamId` :number : 流id
	 *
	 * `effectType` :number : 音效类型
	 */
	removeAudioEffect(params:aliShortVideoAPI_removeAudioEffect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置主流音效（仅iOS支持）`
	 * ========params==========
	 *
	 * `weight` :number : 音效权重,范围0-100
	 *
	 * `effectType` :number : 音效类型
	 */
	setMainStreamsAudioEffect(params:aliShortVideoAPI_setMainStreamsAudioEffect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `去除主流音效（仅iOS支持）`
	 * ========params==========
	 *
	 * `effectType` :number : 音效类型
	 */
	removeMainStreamsAudioEffect(params:aliShortVideoAPI_removeMainStreamsAudioEffect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置静音（仅iOS支持）`
	 * ========params==========
	 *
	 * `isMute` :boolean : 是否静音
	 */
	setMute(params:aliShortVideoAPI_setMute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置音量`
	 * ========params==========
	 *
	 * `volume` :number : 音量，如果设置的volume值大于100可能导致破音，建议设置范围：0-100
	 */
	setVolume(params:aliShortVideoAPI_setVolume_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置主流音频大小（仅iOS支持）`
	 * ========params==========
	 *
	 * `weight` :number : 音效权重,范围0-100
	 */
	setMainStreamsAudioWeight(params:aliShortVideoAPI_setMainStreamsAudioWeight_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置主流音频大小`
	 * ========params==========
	 *
	 * `streamId` :number : 流id
	 *
	 * `weight` :number : 音效权重,范围0-100
	 */
	setAudioWeight(params:aliShortVideoAPI_setAudioWeight_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置主流去噪（仅iOS支持）`
	 * ========params==========
	 *
	 * `isDenoise` :boolean : 是否设置主流去噪
	 */
	setMainStreamsAudioDenoise(params:aliShortVideoAPI_setMainStreamsAudioDenoise_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置任意音频流去噪`
	 * ========params==========
	 *
	 * `streamId` :number : 流id
	 *
	 * `isDenoise` :boolean : 是否设置主流去噪
	 */
	setAudioDenoise(params:aliShortVideoAPI_setAudioDenoise_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置涂鸦`
	 * ========params==========
	 *
	 * `lineColor` :string : 画笔颜色；支持#、rgb、rgba（仅iOS支持）
	 *
	 * `lineWidth` :number : 画笔宽度（仅iOS支持）
	 *
	 * `shadowColor` :string : 线条阴影颜色（仅iOS支持）
	 *
	 * `shadowWidth` :number : 线条阴影宽度（仅iOS支持）
	 *
	 * `enableCrossBorder` :boolean : 是否允许越界画图（仅iOS支持）
	 *
	 * `width` :number : 涂鸦画布的宽（仅android支持）
	 *
	 * `height` :number : 涂鸦画布的高（仅android支持）
	 */
	setGraffiti(params:aliShortVideoAPI_setGraffiti_Params, callback?: (ret:JSON) => void):void

	/**
	 * `替换涂鸦`
	 * ========params==========
	 *
	 * `lineColor` :string : 画笔颜色；支持#、rgb、rgba
	 *
	 * `lineWidth` :number : 画笔宽度
	 *
	 * `shadowColor` :string : 线条阴影颜色（仅iOS支持）
	 *
	 * `shadowWidth` :number : 线条阴影宽度（仅iOS支持
	 */
	changePaint(params:aliShortVideoAPI_changePaint_Params, callback?: (ret:JSON) => void):void

	/** 清空所有线条*/ 
	removePaint():void

	/** 撤销上一步*/ 
	undoPaint():void

	/** 恢复上一步（仅iOS支持）*/ 
	redoPaint():void

	/** 撤销本次涂鸦所有的操作*/ 
	undoAllChanges():void

	/** 获取涂鸦完成后的图片（仅iOS支持）*/ 
	completePaint():void

	/** 确认所有操作（仅android支持）*/ 
	confirm():void

	/** 设置涂鸦渲染到视频 （仅android支持）*/ 
	applyPaintCanvas():void

	/** 移除渲染到视频上的涂鸦 （仅android支持）*/ 
	removeCanvas():void

	/** 释放涂鸦资源 （仅android支持）*/ 
	releaseCanvas():void

	/**
	 * `设置水印`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `outPutSize` :JSON : （可选项）分辨率（仅iOS支持）
	 *
	 * `path` :string : 水印图片的路径；支持widget://和fs://
	 */
	setWaterMark(params:aliShortVideoAPI_setWaterMark_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置片尾水印`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `outPutSize` :JSON : （可选项）分辨率（仅iOS支持）
	 *
	 * `endTime` :number : 片尾水印的持续时长
	 *
	 * `path` :string : 水印图片的路径；支持widget://和fs://
	 */
	setTailWaterMark(params:aliShortVideoAPI_setTailWaterMark_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置转场`
	 * ========params==========
	 *
	 * `duration` :number : 转场时间；需要保证转场时间小于等于视频片段时长（仅iOS支持）
	 *
	 * `overlapDuration` :number : 转场效果前后两段视频的重叠时间（仅android支持）
	 *
	 * `type` :number : 转场模式
	 *
	 * `index` :number : 给第几个片段添加转场
	 */
	applyTransition(params:aliShortVideoAPI_applyTransition_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除某个转场效果（仅iOS支持）`
	 * ========params==========
	 *
	 * `index` :number : 删除第几个片段添加的转场
	 */
	removeTransitionAtIndex(params:aliShortVideoAPI_removeTransitionAtIndex_Params, callback?: (ret:JSON) => void):void

	/**
	 * `合成输出（仅Android支持）`
	 * ========params==========
	 *
	 * `outPath` :string : 输出路径，支持fs路径
	 *
	 * `videoSize` :JSON : （可选项）视频分辨率
	 *
	 * `gop` :number : （可选项）关键帧。
	 *
	 * `videoQuality` :number : （可选项）视频清晰度。
	 *
	 * `codeType` :number : （可选项）编码格式。
	 *
	 * `mode` :number : （可选项）裁剪模式。
	 *
	 * `fps` :number : （可选项） 帧率；建议20 - 60 不超过60
	 *
	 * `frameRate` :number : 帧率
	 */
	compose(params:aliShortVideoAPI_compose_Params, callback?: (ret:JSON) => void):void

	/** 取消合成（仅Android支持）*/ 
	cancelCompose(callback?: (ret:JSON) => void):void

	/**
	 * `初始化视频合拍 （仅android支持）`
	 * ========params==========
	 *
	 * `preViewRect` :JSON : 摄像头预览控件位置
	 *
	 * `playViewRect` :JSON : 合拍视频控件位置
	 *
	 * `outPutInfo` :JSON : 视频输出设置
	 *
	 * `inPutInfo` :JSON : 输入设置
	 *
	 * `minDuration` :number : （可选项）最小时长,单位秒。
	 *
	 * `maxDuration` :number : （可选项）最大时长,单位秒 。
	 *
	 * `gop` :number : （可选项）关键帧。
	 *
	 * `videoQuality` :number : （可选项）视频清晰度。
	 *
	 * `beautifyStatus` :boolean : （可选项） 是否开启美颜
	 *
	 * `beautifyValue` :number : （可选项） 设置美颜度 [0,100]
	 *
	 * `cameraType` :number : （可选项）摄像头类型
	 *
	 * `rate` :any : （可选项）录制速率
	 *
	 * `outPutPath` :string : 输出文件路径，支持fs路径（仅android支持）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）（仅android有效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动（仅android有效）
	 */
	openMixRecord(params:aliShortVideoAPI_openMixRecord_Params):void

	/** 设置合拍监听（仅android支持）*/ 
	setMixRecordCallback(callback?: (ret:JSON) => void):void

	/** 开启合拍预览（仅android支持）*/ 
	startMixRecordPreview(callback?: (ret:JSON) => void):void

	/** 停止合拍预览（仅android支持）*/ 
	stopMixRecordPreview():void

	/** 开始合拍录制 （仅android支持）*/ 
	startMixRecordRecording(callback?: (ret:JSON) => void):void

	/** 停止合拍录制 （仅android支持）*/ 
	stopMixRecordRecording(callback?: (ret:JSON) => void):void

	/** 结束合拍录制合成视频 （仅android支持）*/ 
	finishMixRecord(callback?: (ret:JSON) => void):void

	/** 取消合拍合成视频 （仅android支持）*/ 
	cancleMixRecordFinish(callback?: (ret:JSON) => void):void

	/** 关闭视频合拍 （仅android支持）*/ 
	closeMixRecord():void

}
interface aliShortVideoAPI_openRecord_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）视频分辨率*/ 
	videoSize?:JSON,

	/**（可选项）最小时长,单位秒。*/ 
	minDuration?:number,

	/**（可选项）最大时长,单位秒 。*/ 
	maxDuration?:number,

	/**（可选项）关键帧。*/ 
	gop?:number,

	/**（可选项）视频清晰度。*/ 
	videoQuality?:number,

	/**（可选项）编码格式。*/ 
	encodeMode?:number,

	/**（可选项）是否开启人脸识别  ；使用自带人脸识别，开启该功能，系统会在检测到有人脸动图加入时自动进行追踪显示 （仅iOS支持，android人脸识别需要专业版）*/ 
	useFaceDetect?:boolean,

	/**（可选项）设置识别人脸的个数 当设置值小于1时，默认为1；当设置值大于3时，默认为3*/ 
	faceDetectCount?:number,

	/**（可选项） 是否同步贴合人脸*/ 
	faceDectectSync?:boolean,

	/**（可选项） 前置摄像头采集分辨率（仅iOS支持）*/ 
	frontCaptureSessionPreset?:number,

	/**（可选项） 后置摄像头采集分辨率（仅iOS支持）*/ 
	backCaptureSessionPreset?:number,

	/**（可选项） 录制帧率, 取值区间(0,30]，区间外的值将视为无效值，依然使用默认值。*/ 
	recordFps?:number,

	/**（可选项） 是否开启美颜*/ 
	beautifyStatus?:boolean,

	/**（可选项） 设置美颜度 [0,100]*/ 
	beautifyValue?:number,

	/**（可选项）镜像输出 。*/ 
	videoFlipH?:boolean,

	/**（可选项）  曝光值 [0,1]*/ 
	exposureValue?:number,

	/**（可选项）摄像头类型（仅android支持）*/ 
	cameraType?:number,

	/**输出文件路径，支持fs路径（仅android支持）*/ 
	outPutPath:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）（仅android有效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动（仅android有效）*/ 
	fixed?:boolean,

}

interface aliShortVideoAPI_setTorchType_Params {
	/**（可选项）手电筒模式。*/ 
	type?:number,

}

interface aliShortVideoAPI_focusPoint_Params {
	/**（可选项）对焦的x坐标。*/ 
	pointX?:number,

	/**（可选项）对焦的y位置。*/ 
	pointY?:number,

}

interface aliShortVideoAPI_videoZoomFactor_Params {
	/**（可选项）变焦倍数。*/ 
	videoZoomFactor?:number,

}

interface aliShortVideoAPI_setFaceBeautify_Params {
	/**（可选项）美颜值。*/ 
	value?:number,

}

interface aliShortVideoAPI_setFilter_Params {
	/**数据ID。 例如：11002（仅iOS支持）*/ 
	eid:number,

	/**滤镜类型（仅iOS支持）*/ 
	name:string,

	/**滤镜资源路径 ，支持fs，原生路径（仅android支持）*/ 
	filterPath:string,

}

interface aliShortVideoAPI_setAnimationFilte_Params {
	/**数据ID。 例如：11002（仅iOS支持）*/ 
	eid:number,

	/**滤镜类型（仅iOS支持）*/ 
	name:string,

	/**滤镜资源路径 ，支持fs，原生路径（仅android支持）*/ 
	filterPath:string,

	/**动效保留时间，秒（仅android支持）*/ 
	duration:number,

	/**动效开始时间，秒（仅android支持）*/ 
	startTime:number,

}

interface aliShortVideoAPI_deleteAnimationFilter_Params {
	/**滤镜资源路径 ，支持fs，原生路径（仅android支持）*/ 
	filterPath:string,

	/**动效保留时间，秒（仅android支持）*/ 
	duration:number,

	/**动效开始时间，秒（仅android支持）*/ 
	startTime:number,

}

interface aliShortVideoAPI_deletePart_Params {
	/**（可选项）是否删除所有片段未true则index参数无效*/ 
	deleteAll?:boolean,

	/**（可选项）删除指定片段*/ 
	index?:number,

}

interface aliShortVideoAPI_openMixSynthetic_Params {
	/**（可选项）视频分辨率*/ 
	videoSize?:JSON,

	/**（可选项）关键帧。*/ 
	gop?:number,

	/**（可选项）帧率。*/ 
	fps?:number,

	/**（可选项）码率。*/ 
	bitrate?:number,

	/**（可选项）视频清晰度。*/ 
	videoQuality?:number,

	/**null*/ 
	videoPathArray:Array,

	/**轨道（仅android支持）*/ 
	tracks:Array<JSON>,

	/**合成输出路径，支持fs路径（仅android支持）*/ 
	outPath:string,

	/**（可选项）输出的crf（仅android支持）*/ 
	crf?:number,

}

interface aliShortVideoAPI_openMix_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）视频分辨率*/ 
	videoSize?:JSON,

	/**需要合成的视频路径。 //支持widget://和 fs://*/ 
	videoPath:string,

	/**（可选项）最小时长,单位秒。*/ 
	minDuration?:number,

	/**（可选项）最大时长,单位秒 。*/ 
	maxDuration?:number,

	/**（可选项）关键帧。*/ 
	gop?:number,

	/**（可选项）视频清晰度。*/ 
	videoQuality?:number,

	/**（可选项）编码格式。*/ 
	encodeMode?:number,

	/**（可选项）是否开启人脸识别  ；使用自带人脸识别，开启该功能，系统会在检测到有人脸动图加入时自动进行追踪显示*/ 
	useFaceDetect?:boolean,

	/**（可选项）设置识别人脸的个数 当设置值小于1时，默认为1；当设置值大于3时，默认为3*/ 
	faceDetectCount?:number,

	/**（可选项） 是否同步贴合人脸*/ 
	faceDectectSync?:boolean,

	/**（可选项） 前置摄像头采集分辨率*/ 
	frontCaptureSessionPreset?:number,

	/**（可选项） 后置摄像头采集分辨率*/ 
	backCaptureSessionPreset?:number,

	/**（可选项） 录制帧率, 取值区间(0,30]，区间外的值将视为无效值，依然使用默认值。*/ 
	recordFps?:number,

	/**（可选项） 是否开启美颜*/ 
	beautifyStatus?:boolean,

	/**（可选项） 设置美颜度 [0,100]*/ 
	beautifyValue?:number,

	/**（可选项）  曝光值 [0,1]*/ 
	exposureValue?:number,

}

interface aliShortVideoAPI_videoCrop_Params {
	/**被裁减的视频路径 。*/ 
	videoPath:string,

	/**裁剪后视频输出路径（仅android支持）*/ 
	outPath:string,

	/**是否为视频路径； true：视频路径；false：音乐路径（仅iOS支持）*/ 
	isVideo:boolean,

	/**（可选项）文件类型（仅android支持）*/ 
	mediaType?:number,

	/**（可选项）剪裁后视频分辨率； 视频分辨率必须为偶数，裁剪音乐时无需设置*/ 
	videoSize?:JSON,

	/**（可选项）开始时间,单位秒。*/ 
	startTime?:number,

	/**（可选项）结束时间,单位秒 。*/ 
	endTime?:number,

	/**（可选项）关键帧； 裁剪音乐时无需设置*/ 
	gop?:number,

	/**（可选项）视频清晰度；裁剪音乐时无需设置*/ 
	videoQuality?:number,

	/**（可选项）编码格式；*/ 
	encodeMode?:number,

	/**（可选项） 录制帧率；裁剪音乐时无需设置。（仅iOS支持）*/ 
	fps?:number,

	/**（可选项）剪裁模式；裁剪音乐时无需设置*/ 
	cropMode?:number,

	/**（可选项）码率；裁剪音乐时无需设置*/ 
	bitrate?:number,

	/**（可选项） 背景颜色；视频填充模式下有效，裁剪音乐时无需设置;支持#、rgb、rgba、*/ 
	fillBackgroundColor?:string,

	/**裁剪区域，裁剪区域是相对视频原始大小计算的，因此cropRect不能超出视频的原始分辨率（仅android支持）*/ 
	cropRect:JSON,

}

interface aliShortVideoAPI_videoEdit_Params {
	/**（可选项）模块位置及尺寸*/ 
	rect?:JSON,

	/**输出路径，支持fs路径 （仅android支持）*/ 
	outPath:string,

	/**（可选项）视频分辨率*/ 
	videoSize?:JSON,

	/**（可选项）关键帧。*/ 
	gop?:number,

	/**（可选项）视频清晰度。*/ 
	videoQuality?:number,

	/**（可选项）编码格式。*/ 
	codeType?:number,

	/**（可选项）裁剪模式。*/ 
	mode?:number,

	/**（可选项） 帧率；建议20 - 60 不超过60*/ 
	fps?:number,

	/**（可选项）视频分辨率（android为必选项）*/ 
	clip?:Array,

	/**帧率（仅android支持）*/ 
	frameRate:number,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）（仅android有效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动（仅android有效）*/ 
	fixed?:boolean,

}

interface aliShortVideoAPI_addMediaClip_Params {
	/**（可选项） 增加的位置；*/ 
	index?:number,

	/**（可选项）视频分辨率*/ 
	clip?:Array,

}

interface aliShortVideoAPI_updateMediaClip_Params {
	/**（可选项） 更换的位置；*/ 
	index?:number,

	/**（可选项）视频分辨率*/ 
	clip?:Array,

}

interface aliShortVideoAPI_deleteMediaClipAtIndex_Params {
	/**（可选项） 删除的位置；*/ 
	index?:number,

}

interface aliShortVideoAPI_getMediaClipAtIndex_Params {
	/**（可选项） 获取的位置；*/ 
	index?:number,

}

interface aliShortVideoAPI_mediaSeekTo_Params {
	/**（可选项） 跳到的位置；*/ 
	seekTo?:number,

}

interface aliShortVideoAPI_getClipStartTimeAtIndex_Params {
	/**（可选项） 获取的位置；*/ 
	index?:number,

}

interface aliShortVideoAPI_setMediaRefreshFps_Params {
	/**（可选项） 帧率；默认值：30帧/s，最大值：60帧/s，建议设置值不小于20帧/s*/ 
	fps?:number,

}

interface aliShortVideoAPI_setApplyTimeFilter_Params {
	/**时间特效开始时间*/ 
	startTime:number,

	/**时间特效结束时间*/ 
	endTime:number,

	/**（可选项）时间特效类型。*/ 
	type?:number,

	/**（可选类型）是否需要保持原视频长度（仅android支持）*/ 
	needOriginDuration?:boolean,

	/**（可选项）重复次数 type为1时有效（仅android支持）*/ 
	repeatTime?:number,

	/**倍速；在变速类型下代表速率，范围建议 0.5 - 2；在反复类型下代表反复次数，内部取整型*/ 
	param:number,

}

interface aliShortVideoAPI_setMediaMusic_Params {
	/**音乐文件路径；支持widget://和fs://*/ 
	path:string,

	/**音乐在播放轴上的开始播放时间*/ 
	startTime:number,

	/**音乐在播放轴上的播放持续时间*/ 
	duration:number,

	/**音乐在自身轴上的用来播放的开始时间*/ 
	streamStartTime:number,

	/**音乐在自身轴上的用来播放的持续时长*/ 
	streamDuration:number,

	/**（可选项）音量大小*/ 
	audioMixWeight?:number,

	/**（可选项）背景音乐或配音（仅android支持）*/ 
	musicType?:number,

	/**资源id，唯一标识（仅android支持）*/ 
	id:number,

}

interface aliShortVideoAPI_removeMusic_Params {
	/**删除的音乐位置（仅iOS支持）*/ 
	index:number,

	/**：已添加的资源id（仅android支持）*/ 
	id:number,

	/**（可选项）背景音乐或配音（仅android支持）*/ 
	musicType?:number,

}

interface aliShortVideoAPI_setAudioEffect_Params {
	/**流id*/ 
	streamId:number,

	/**音效权重,范围0-100*/ 
	weight:number,

	/**音效类型*/ 
	effectType:number,

}

interface aliShortVideoAPI_removeAudioEffect_Params {
	/**流id*/ 
	streamId:number,

	/**音效类型*/ 
	effectType:number,

}

interface aliShortVideoAPI_setMainStreamsAudioEffect_Params {
	/**音效权重,范围0-100*/ 
	weight:number,

	/**音效类型*/ 
	effectType:number,

}

interface aliShortVideoAPI_removeMainStreamsAudioEffect_Params {
	/**音效类型*/ 
	effectType:number,

}

interface aliShortVideoAPI_setMute_Params {
	/**是否静音*/ 
	isMute:boolean,

}

interface aliShortVideoAPI_setVolume_Params {
	/**音量，如果设置的volume值大于100可能导致破音，建议设置范围：0-100*/ 
	volume:number,

}

interface aliShortVideoAPI_setMainStreamsAudioWeight_Params {
	/**音效权重,范围0-100*/ 
	weight:number,

}

interface aliShortVideoAPI_setAudioWeight_Params {
	/**流id*/ 
	streamId:number,

	/**音效权重,范围0-100*/ 
	weight:number,

}

interface aliShortVideoAPI_setMainStreamsAudioDenoise_Params {
	/**是否设置主流去噪*/ 
	isDenoise:boolean,

}

interface aliShortVideoAPI_setAudioDenoise_Params {
	/**流id*/ 
	streamId:number,

	/**是否设置主流去噪*/ 
	isDenoise:boolean,

}

interface aliShortVideoAPI_setGraffiti_Params {
	/**画笔颜色；支持#、rgb、rgba（仅iOS支持）*/ 
	lineColor:string,

	/**画笔宽度（仅iOS支持）*/ 
	lineWidth:number,

	/**线条阴影颜色（仅iOS支持）*/ 
	shadowColor:string,

	/**线条阴影宽度（仅iOS支持）*/ 
	shadowWidth:number,

	/**是否允许越界画图（仅iOS支持）*/ 
	enableCrossBorder:boolean,

	/**涂鸦画布的宽（仅android支持）*/ 
	width:number,

	/**涂鸦画布的高（仅android支持）*/ 
	height:number,

}

interface aliShortVideoAPI_changePaint_Params {
	/**画笔颜色；支持#、rgb、rgba*/ 
	lineColor:string,

	/**画笔宽度*/ 
	lineWidth:number,

	/**线条阴影颜色（仅iOS支持）*/ 
	shadowColor:string,

	/**线条阴影宽度（仅iOS支持*/ 
	shadowWidth:number,

}

interface aliShortVideoAPI_setWaterMark_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）分辨率（仅iOS支持）*/ 
	outPutSize?:JSON,

	/**水印图片的路径；支持widget://和fs://*/ 
	path:string,

}

interface aliShortVideoAPI_setTailWaterMark_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）分辨率（仅iOS支持）*/ 
	outPutSize?:JSON,

	/**片尾水印的持续时长*/ 
	endTime:number,

	/**水印图片的路径；支持widget://和fs://*/ 
	path:string,

}

interface aliShortVideoAPI_applyTransition_Params {
	/**转场时间；需要保证转场时间小于等于视频片段时长（仅iOS支持）*/ 
	duration:number,

	/**转场效果前后两段视频的重叠时间（仅android支持）*/ 
	overlapDuration:number,

	/**转场模式*/ 
	type:number,

	/**给第几个片段添加转场*/ 
	index:number,

}

interface aliShortVideoAPI_removeTransitionAtIndex_Params {
	/**删除第几个片段添加的转场*/ 
	index:number,

}

interface aliShortVideoAPI_compose_Params {
	/**输出路径，支持fs路径*/ 
	outPath:string,

	/**（可选项）视频分辨率*/ 
	videoSize?:JSON,

	/**（可选项）关键帧。*/ 
	gop?:number,

	/**（可选项）视频清晰度。*/ 
	videoQuality?:number,

	/**（可选项）编码格式。*/ 
	codeType?:number,

	/**（可选项）裁剪模式。*/ 
	mode?:number,

	/**（可选项） 帧率；建议20 - 60 不超过60*/ 
	fps?:number,

	/**帧率*/ 
	frameRate:number,

}

interface aliShortVideoAPI_openMixRecord_Params {
	/**摄像头预览控件位置*/ 
	preViewRect:JSON,

	/**合拍视频控件位置*/ 
	playViewRect:JSON,

	/**视频输出设置*/ 
	outPutInfo:JSON,

	/**输入设置*/ 
	inPutInfo:JSON,

	/**（可选项）最小时长,单位秒。*/ 
	minDuration?:number,

	/**（可选项）最大时长,单位秒 。*/ 
	maxDuration?:number,

	/**（可选项）关键帧。*/ 
	gop?:number,

	/**（可选项）视频清晰度。*/ 
	videoQuality?:number,

	/**（可选项） 是否开启美颜*/ 
	beautifyStatus?:boolean,

	/**（可选项） 设置美颜度 [0,100]*/ 
	beautifyValue?:number,

	/**（可选项）摄像头类型*/ 
	cameraType?:number,

	/**（可选项）录制速率*/ 
	rate?:any,

	/**输出文件路径，支持fs路径（仅android支持）*/ 
	outPutPath:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）（仅android有效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动（仅android有效）*/ 
	fixed?:boolean,

}

interface HMTAgent {
	/**
	 * `相关设置`
	 * ========params==========
	 *
	 * `host` :string : （可选项）如果需要配置服务器地址,在调用init初始化SDK方法前设置,参数值格式为:@"https://xxx.com"
	 *
	 * `configUrl` :string : （可选项）设置线上配置文件服务器地址,在调用initSDK初始化SDK方法前设置
	 *
	 * `hook` :boolean : （可选项），设置页面自动布码，若开发者希望对每个页面进行手动的命名和采集，在调用initSDK初始化SDK方法前设置
	 *
	 * `debug` :boolean : （可选项）设置调试模式(release版本暂不处理)
	 *
	 * `exceptionArray` :Array : （可选项）设置页面Hook例外(传入要限制hook的viewController的名称)
	 *
	 * `crashReport` :boolean : （可选项）设置是否开启错误抓取,默认关闭
	 *
	 * `muid` :any : （可选项）绑定Muid(该字段目前仅做收集，不参与计算)
	 *
	 * `paramters` :any : （可选项）绑定自定义字段
	 *
	 * `accountid` :any : （可选项）绑定账户ID(该字段会参与账号级别的指标计算)
	 */
	setUp(params:HMTAgent_setUp_Params, callback?: (ret:JSON) => void):void

	/**
	 * `SDK自动获取地理位置信息，会在主线程调用对应的location方法`
	 * ========params==========
	 *
	 * `isOpen` :boolean : 设此参数为SDK自动获取地理位置信息，会在主线程调用对应的location方法
	 */
	setLocation(params:HMTAgent_setLocation_Params):void

	/**
	 * `用户手动获取地理位置信息传给SDK`
	 * ========params==========
	 *
	 * `isOpen` :boolean : 设此参数为SDK自动获取地理位置信息，会在主线程调用对应的location方法
	 *
	 * `location` :JSON : 经纬度
	 */
	setLocationManual(params:HMTAgent_setLocationManual_Params):void

	/**
	 * `初始化SDK`
	 * ========params==========
	 *
	 * `channel` :any : （可选项）应用发布的渠道ID
	 *
	 * `reportPolicy` :number : （可选项）发送模式；0：启动时发送；1：实时批量发送
	 *
	 * `unTracked` :Array : （可选项）黑名单参数数组，将需要过滤的参数填入其中，将不会发送该参数到服务器
	 */
	initSDK(params:HMTAgent_initSDK_Params):void

	/**
	 * `Activity页面加载布码调用(activity:页面名称)`
	 * ========params==========
	 *
	 * `activity` :any : 页面名称
	 */
	startTracPage(params:HMTAgent_startTracPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `Activity页面离开布码调用(结束上一次调用startTracPage的页面)`
	 * ========params==========
	 *
	 * `activity` :any : 页面名称
	 *
	 * `property` :any : （可选项）property
	 */
	endTracPage(params:HMTAgent_endTracPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送自定义事件`
	 * ========params==========
	 *
	 * `action` :any : 事件名称
	 *
	 * `acc` :number : （可选项）事件发生次数
	 *
	 * `property` :any : （可选项）自定义属性
	 */
	postAction(params:HMTAgent_postAction_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始发送自定义事件`
	 * ========params==========
	 *
	 * `action` :any : 事件名称
	 *
	 * `uact` :any : uact
	 */
	postActionStart(params:HMTAgent_postActionStart_Params, callback?: (ret:JSON) => void):void

	/**
	 * `提交错误信息`
	 * ========params==========
	 *
	 * `error` :any : 错误信息
	 *
	 * `property` :any : 自定义属性
	 */
	postErrorData(params:HMTAgent_postErrorData_Params, callback?: (ret:JSON) => void):void

	/** 发送客户端信息*/ 
	postClientData():void

	/** 处理缓存数据*/ 
	pushAllData():void

	/** 添加数据发送监听*/ 
	addHmtListener(callback?: (ret:JSON) => void):void

}
interface HMTAgent_setUp_Params {
	/**（可选项）如果需要配置服务器地址,在调用init初始化SDK方法前设置,参数值格式为:@"https://xxx.com"*/ 
	host?:string,

	/**（可选项）设置线上配置文件服务器地址,在调用initSDK初始化SDK方法前设置*/ 
	configUrl?:string,

	/**（可选项），设置页面自动布码，若开发者希望对每个页面进行手动的命名和采集，在调用initSDK初始化SDK方法前设置*/ 
	hook?:boolean,

	/**（可选项）设置调试模式(release版本暂不处理)*/ 
	debug?:boolean,

	/**（可选项）设置页面Hook例外(传入要限制hook的viewController的名称)*/ 
	exceptionArray?:Array,

	/**（可选项）设置是否开启错误抓取,默认关闭*/ 
	crashReport?:boolean,

	/**（可选项）绑定Muid(该字段目前仅做收集，不参与计算)*/ 
	muid?:any,

	/**（可选项）绑定自定义字段*/ 
	paramters?:any,

	/**（可选项）绑定账户ID(该字段会参与账号级别的指标计算)*/ 
	accountid?:any,

}

interface HMTAgent_setLocation_Params {
	/**设此参数为SDK自动获取地理位置信息，会在主线程调用对应的location方法*/ 
	isOpen:boolean,

}

interface HMTAgent_setLocationManual_Params {
	/**设此参数为SDK自动获取地理位置信息，会在主线程调用对应的location方法*/ 
	isOpen:boolean,

	/**经纬度*/ 
	location:JSON,

}

interface HMTAgent_initSDK_Params {
	/**（可选项）应用发布的渠道ID*/ 
	channel?:any,

	/**（可选项）发送模式；0：启动时发送；1：实时批量发送*/ 
	reportPolicy?:number,

	/**（可选项）黑名单参数数组，将需要过滤的参数填入其中，将不会发送该参数到服务器*/ 
	unTracked?:Array,

}

interface HMTAgent_startTracPage_Params {
	/**页面名称*/ 
	activity:any,

}

interface HMTAgent_endTracPage_Params {
	/**页面名称*/ 
	activity:any,

	/**（可选项）property*/ 
	property?:any,

}

interface HMTAgent_postAction_Params {
	/**事件名称*/ 
	action:any,

	/**（可选项）事件发生次数*/ 
	acc?:number,

	/**（可选项）自定义属性*/ 
	property?:any,

}

interface HMTAgent_postActionStart_Params {
	/**事件名称*/ 
	action:any,

	/**uact*/ 
	uact:any,

}

interface HMTAgent_postErrorData_Params {
	/**错误信息*/ 
	error:any,

	/**自定义属性*/ 
	property:any,

}

interface zhugeio {
}
interface ccwork {
	/** 登录*/ 
	login(callback?: (ret:JSON) => void):void

	/** 退出登录*/ 
	logout():void

}
interface bdMTJ {
	/**
	 * `记录一次事件的点击，`
	 * ========params==========
	 *
	 * `eventId` :string : 自定义事件Id，提前在网站端创建，未创建的evenId记录将无效。
	 *
	 * `eventLabel` :string : 自定义事件Label，附加参数，不能为空字符串
	 *
	 * `attributes` :any : （可选项）事件属性，对应的key需要在网站上创建，注意：value只接受字符类型
	 */
	logEvent(params:bdMTJ_logEvent_Params):void

	/**
	 * `记录一次事件的时长`
	 * ========params==========
	 *
	 * `eventId` :string : 自定义事件Id，提前在网站端创建，未创建的evenId记录将无效。
	 *
	 * `eventLabel` :string : 自定义事件Label，附加参数，不能为空字符串
	 *
	 * `duration` :number : 已知的自定义事件时长，单位为毫秒（ms）
	 *
	 * `attributes` :any : （可选项）事件属性，对应的key需要在网站上创建，注意：value只接受字符类型
	 */
	logEventWithDurationTime(params:bdMTJ_logEventWithDurationTime_Params):void

	/**
	 * `记录一次事件的开始`
	 * ========params==========
	 *
	 * `eventId` :string : 自定义事件Id，提前在网站端创建，未创建的evenId记录将无效。
	 *
	 * `eventLabel` :string : 自定义事件Label，附加参数，不能为空字符串
	 */
	eventStart(params:bdMTJ_eventStart_Params):void

	/**
	 * `记录一次事件的结束`
	 * ========params==========
	 *
	 * `eventId` :string : 自定义事件Id，提前在网站端创建，未创建的evenId记录将无效。
	 *
	 * `eventLabel` :string : 自定义事件Label，附加参数，不能为空字符串
	 *
	 * `attributes` :any : （可选项）事件属性，对应的key需要在网站上创建，注意：value只接受字符类型
	 */
	eventEnd(params:bdMTJ_eventEnd_Params):void

	/**
	 * `记录某个页面访问的开始`
	 * ========params==========
	 *
	 * `name` :string : 页面名称
	 */
	pageviewStartWithName(params:bdMTJ_pageviewStartWithName_Params):void

	/**
	 * `记录某个页面访问的结束，与pageviewStartWithName配对使用`
	 * ========params==========
	 *
	 * `name` :string : 页面名称
	 */
	pageviewEndWithName(params:bdMTJ_pageviewEndWithName_Params):void

	/** 返回SDK生成的cuid*/ 
	getDeviceCuid():void

	/** 获取设备的测试ID*/ 
	getTestDeviceId():void

	/**
	 * `上传第三方Push平台的Id`
	 * ========params==========
	 *
	 * `pushId` :string : 从第三方Push SDK接口中获取的pushId，长度限制1024字节。设置为nil或者空字符串，则清空对应平台的pushId
	 *
	 * `platform` :number : 指定Push平台类型，
	 */
	setPushId(params:bdMTJ_setPushId_Params):void

}
interface bdMTJ_logEvent_Params {
	/**自定义事件Id，提前在网站端创建，未创建的evenId记录将无效。*/ 
	eventId:string,

	/**自定义事件Label，附加参数，不能为空字符串*/ 
	eventLabel:string,

	/**（可选项）事件属性，对应的key需要在网站上创建，注意：value只接受字符类型*/ 
	attributes?:any,

}

interface bdMTJ_logEventWithDurationTime_Params {
	/**自定义事件Id，提前在网站端创建，未创建的evenId记录将无效。*/ 
	eventId:string,

	/**自定义事件Label，附加参数，不能为空字符串*/ 
	eventLabel:string,

	/**已知的自定义事件时长，单位为毫秒（ms）*/ 
	duration:number,

	/**（可选项）事件属性，对应的key需要在网站上创建，注意：value只接受字符类型*/ 
	attributes?:any,

}

interface bdMTJ_eventStart_Params {
	/**自定义事件Id，提前在网站端创建，未创建的evenId记录将无效。*/ 
	eventId:string,

	/**自定义事件Label，附加参数，不能为空字符串*/ 
	eventLabel:string,

}

interface bdMTJ_eventEnd_Params {
	/**自定义事件Id，提前在网站端创建，未创建的evenId记录将无效。*/ 
	eventId:string,

	/**自定义事件Label，附加参数，不能为空字符串*/ 
	eventLabel:string,

	/**（可选项）事件属性，对应的key需要在网站上创建，注意：value只接受字符类型*/ 
	attributes?:any,

}

interface bdMTJ_pageviewStartWithName_Params {
	/**页面名称*/ 
	name:string,

}

interface bdMTJ_pageviewEndWithName_Params {
	/**页面名称*/ 
	name:string,

}

interface bdMTJ_setPushId_Params {
	/**从第三方Push SDK接口中获取的pushId，长度限制1024字节。设置为nil或者空字符串，则清空对应平台的pushId*/ 
	pushId:string,

	/**指定Push平台类型，*/ 
	platform:number,

}

interface xGprinterPlus {
	/** 连接多设备*/ 
	connectDevices(callback?: (ret:JSON) => void):void

	/** 蓝牙连接(仅单设备时使用)*/ 
	connectBle(callback?: (ret:JSON) => void):void

	/** USB连接(仅单设备时使用)*/ 
	connectUsb(callback?: (ret:JSON) => void):void

	/** 断开连接(仅单设备时使用)*/ 
	disConnect(callback?: (ret:JSON) => void):void

	/**
	 * `打印测试页`
	 * ========params==========
	 *
	 * `xh` :number : （可选项）指定打印机0-3。
	 */
	printTest(params:xGprinterPlus_printTest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询打印机状态`
	 * ========params==========
	 *
	 * `xh` :number : （可选项）指定打印机0-3。
	 */
	getPrinterStatus(params:xGprinterPlus_getPrinterStatus_Params, callback?: (ret:JSON) => void):void

	/** 查询打印机连接状态*/ 
	getConnectState():void

	/**
	 * `切换打印模式`
	 * ========params==========
	 *
	 * `xh` :number : （可选项）指定打印机0-3。
	 *
	 * `commandType` :number : （必输项）0 : 面单模式 1 :票据模式  2 :标签模式。
	 */
	setPrinterCommandType(params:xGprinterPlus_setPrinterCommandType_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打印票据(ESC模式打印，确保打印机处于票据模式)`
	 * ========params==========
	 *
	 * `xh` :number : （可选项）指定打印机0-3。
	 *
	 * `rows` :Array : （必输项）打印数据。
	 */
	printReceipt(params:xGprinterPlus_printReceipt_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打印标签(TSC模式打印，确保打印机处于标签模式)`
	 * ========params==========
	 *
	 * `xh` :number : （可选项）指定打印机0-3。
	 *
	 * `rows` :Array : （必输项）打印数据。
	 *
	 * `openBox` :boolean : （可选项）是否打开钱箱。
	 */
	printLabel(params:xGprinterPlus_printLabel_Params, callback?: (ret:JSON) => void):void

	/** 根据mac地址连接蓝牙设备(仅单设备时使用)*/ 
	connectBleByMacAddress(callback?: (ret:JSON) => void):void

}
interface xGprinterPlus_printTest_Params {
	/**（可选项）指定打印机0-3。*/ 
	xh?:number,

}

interface xGprinterPlus_getPrinterStatus_Params {
	/**（可选项）指定打印机0-3。*/ 
	xh?:number,

}

interface xGprinterPlus_setPrinterCommandType_Params {
	/**（可选项）指定打印机0-3。*/ 
	xh?:number,

	/**（必输项）0 : 面单模式 1 :票据模式  2 :标签模式。*/ 
	commandType:number,

}

interface xGprinterPlus_printReceipt_Params {
	/**（可选项）指定打印机0-3。*/ 
	xh?:number,

	/**（必输项）打印数据。*/ 
	rows:Array,

}

interface xGprinterPlus_printLabel_Params {
	/**（可选项）指定打印机0-3。*/ 
	xh?:number,

	/**（必输项）打印数据。*/ 
	rows:Array,

	/**（可选项）是否打开钱箱。*/ 
	openBox?:boolean,

}

interface sinaWeiBo {
}
interface yzxVerification {
}
interface oxePlayer {
	/** 监听统一接口 取消原来的api.addEventListener*/ 
	addEventListener():void

	/** 指定区域显示播放器,点播，可分集播放*/ 
	fixdPlay():void

	/** 指定区域显示播放器,直播*/ 
	fixzPlay():void

	/** 是否全屏*/ 
	isFull():void

	/** 退出全屏*/ 
	exitFullScreen():void

	/** 进入全屏*/ 
	enterFullScreen():void

	/** 是否锁屏  fixdPlay fixePlay 有效*/ 
	isLock():void

	/** 添加 弹幕*/ 
	addDanmaku():void

	/** vip页面*/ 
	showVipView():void

	/** 退出vip页面*/ 
	hideVipView():void

	/** 全屏点播,仿抖音 可上下滑动切换视频*/ 
	dbPlay():void

	/** 全屏直播,仿抖音*/ 
	zbPlay():void

	/** dbPlay zbPlay 初始化播放数据*/ 
	initData():void

	/** dbPlay接口播放最后一个视频时 追加 数据*/ 
	addDataAfter():void

	/** dbPlay下拉刷新时更新 数据*/ 
	addDataBefore():void

	/** 当前视频动态 添加控件 调用dbPlay  zbPlay时此接口生效*/ 
	addStyle():void

	/** 当前视频 动态更新组件 样式 调用dbPlay  zbPlay时此接口生效*/ 
	updateStyles():void

	/** 当前视频 动态更新视频用户信息 比如 评论数 分享数 等 更新 调用dbPlay  zbPlay时此接口生效*/ 
	updateUserInfo():void

	/** dbPlay停止上下拉刷新*/ 
	stopFresh():void

	/** 控制红包*/ 
	hongbaoAction():void

	/** 发送礼物*/ 
	sendLiveGift():void

	/** 发送滚动消息*/ 
	sendLiveMessage():void

	/** 更新成员列表*/ 
	sendLiveMembers():void

	/** 发送弹窗*/ 
	sendLiveDanmaku():void

	/** 设置红包进度 code ==16 返回小视频播放进度 可调用此方法*/ 
	setHBProgress():void

	/** 添加控件 不随屏滚动控件 调用dbPlay  zbPlay时此接口生效*/ 
	addComponent():void

	/** 动态更新组件 不随屏滚动控件 调用dbPlay  zbPlay时此接口生效*/ 
	updateComponent():void

	/** 播放下一条记录*/ 
	next():void

	/** 播放上一条记录*/ 
	prev():void

	/** 播放索引视频*/ 
	playIndex():void

	/** 开始播放*/ 
	start():void

	/** 停止播放*/ 
	pause():void

	/** 重新播放*/ 
	replay():void

	/** 视频时长*/ 
	duration():void

	/** 指定位置播放*/ 
	seekTo():void

	/** 播放位置*/ 
	position():void

	/** 截屏*/ 
	screenShot():void

	/** 移除播放器*/ 
	remove():void

	/** 显示播放器*/ 
	showPlay():void

	/** 隐藏播放器*/ 
	hidePlay():void

	/** 设置音量*/ 
	setVolume():void

	/** 设置倍速*/ 
	setSpeed():void

	/** 清理缓存*/ 
	clearCache():void

}
interface ipaynowScanner {
}
interface kuaixuePlayer {
	/**
	 * `打开默认的自带UI效果的播放器`
	 * ========params==========
	 *
	 * `path` :string : 文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget**
	 *
	 * `title` :string : 播放视频的标题
	 *
	 * `accessKey` :string : AccessKey用于身份验证，[获取AccessKey](http://console.bce.baidu.com/iam/#/iam/accesslist)
	 */
	play(params:kuaixuePlayer_play_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开一个视频播放器，**本接口对 paly 接口打开的播放器无效**`
	 * ========params==========
	 *
	 * `accessKey` :string : AccessKey用于身份验证，[获取AccessKey](http://console.bce.baidu.com/iam/#/iam/accesslist)
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `path` :string : （可选项）文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget**
	 *
	 * `autoPlay` :boolean : （可选项）打开时是否自动播放
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:kuaixuePlayer_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置视频的文件路径，**本接口对 paly 接口打开的播放器无效**`
	 * ========params==========
	 *
	 * `path` :string : 文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget**
	 */
	setPath(params:kuaixuePlayer_setPath_Params, callback?: (ret:JSON) => void):void

	/** 开始播放，**本接口对 paly 接口打开的播放器无效***/ 
	start():void

	/** 暂停播放，**本接口对 paly 接口打开的播放器无效***/ 
	pause():void

	/** 停止播放，**本接口对 paly 接口打开的播放器无效***/ 
	stop():void

	/** 关闭播放器*/ 
	close():void

	/** 显示视频播放视图，**本接口对 paly 接口打开的播放器无效***/ 
	show():void

	/** 隐藏视频播放视图，**本接口对 paly 接口打开的播放器无效***/ 
	hide():void

	/** 获取播放器显示模式，**本接口对 paly 接口打开的播放器无效***/ 
	getScalingMode():void

	/**
	 * `设置播放器播放模式，**本接口对 paly 接口打开的播放器无效**`
	 * ========params==========
	 *
	 * `scalingMode` :string : 播放器播放模式
	 */
	setScalingMode(params:kuaixuePlayer_setScalingMode_Params):void

	/**
	 * `跳转`
	 * ========params==========
	 *
	 * `seconds` :number : 跳转到音视频播放的秒数
	 */
	seekTo(params:kuaixuePlayer_seekTo_Params):void

	/**
	 * `设置屏幕亮度，**本接口对 paly 接口打开的播放器无效**`
	 * ========params==========
	 *
	 * `brightness` :number : （可选项）设置的屏幕的亮度，取值范围：0-100，**在 iOS 平台上设置的是系统屏幕亮度。Android 平台上设置的本应用内的屏幕亮度**
	 */
	setBrightness(params:kuaixuePlayer_setBrightness_Params):void

	/** 获取当前屏幕亮度值，**本接口对 paly 接口打开的播放器无效***/ 
	getBrightness():void

	/**
	 * `设置音量，**本接口对 paly 接口打开的播放器无效**`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）音量大小，取值范围：0-1
	 */
	setVolume(params:kuaixuePlayer_setVolume_Params):void

	/** 获取当前播放音量，**本接口对 paly 接口打开的播放器无效***/ 
	getVolume():void

	/** 添加事件监听，**本接口对 paly 接口打开的播放器无效***/ 
	addEventListener(callback?: (ret:JSON) => void):void

	/**
	 * `移除动作监听，**本接口对 paly 接口打开的播放器无效**`
	 * ========params==========
	 *
	 * `name` :string : （可选项）所要移除的监听的动作名称
	 */
	removeEventListener(params:kuaixuePlayer_removeEventListener_Params):void

	/**
	 * `设置视频播放器位置、尺寸，以及是否全屏，**本接口对 paly 接口打开的播放器无效**`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `animation` :boolean : （可选项）改变 rect 时，是否带动画效果，暂仅支持 iOS 平台
	 */
	setRect(params:kuaixuePlayer_setRect_Params):void

}
interface kuaixuePlayer_play_Params {
	/**文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget***/ 
	path:string,

	/**播放视频的标题*/ 
	title:string,

	/**AccessKey用于身份验证，[获取AccessKey](http://console.bce.baidu.com/iam/#/iam/accesslist)*/ 
	accessKey:string,

}

interface kuaixuePlayer_open_Params {
	/**AccessKey用于身份验证，[获取AccessKey](http://console.bce.baidu.com/iam/#/iam/accesslist)*/ 
	accessKey:string,

	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget***/ 
	path?:string,

	/**（可选项）打开时是否自动播放*/ 
	autoPlay?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface kuaixuePlayer_setPath_Params {
	/**文档的路径，支持网络和本地（fs://）路径，**在 android 平台上不支持 widget***/ 
	path:string,

}

interface kuaixuePlayer_setScalingMode_Params {
	/**播放器播放模式*/ 
	scalingMode:string,

}

interface kuaixuePlayer_seekTo_Params {
	/**跳转到音视频播放的秒数*/ 
	seconds:number,

}

interface kuaixuePlayer_setBrightness_Params {
	/**（可选项）设置的屏幕的亮度，取值范围：0-100，**在 iOS 平台上设置的是系统屏幕亮度。Android 平台上设置的本应用内的屏幕亮度***/ 
	brightness?:number,

}

interface kuaixuePlayer_setVolume_Params {
	/**（可选项）音量大小，取值范围：0-1*/ 
	volume?:number,

}

interface kuaixuePlayer_removeEventListener_Params {
	/**（可选项）所要移除的监听的动作名称*/ 
	name?:string,

}

interface kuaixuePlayer_setRect_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）改变 rect 时，是否带动画效果，暂仅支持 iOS 平台*/ 
	animation?:boolean,

}

interface mobShare {
	/**
	 * `开始分享`
	 * ========params==========
	 *
	 * `title` :string : （可选项）要分享的文本标题
	 *
	 * `titleUrl` :string : 要分享的标题的url，**在 Android 平台上，如果是分享到 qq 或 qq空间，该参数不能缺省。iOS 忽略本参数**
	 *
	 * `text` :string : （可选项）要分享的文本信息
	 *
	 * `imgPaths` :Array : （可选项）要分享的图片地址集合，传入参数可以为单张图片信息，也可以为多张图片信息，要求本地路径 (widget://、fs://、http://)，  除腾讯微博外，其他平台只支持单张图片的分享，默认分享数组的第一张图片。**新浪微博分享网络图片需要申请高级权限**。单张图片太大会分享不成功。建议小于1M。
	 *
	 * `url` :string : （可选项）要分享网页路径/应用路径
	 */
	share(params:mobShare_share_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享到指定平台`
	 * ========params==========
	 *
	 * `target` :string : （可选项）要分享到平台的名字，取值范围如下：
	 *
	 * `title` :string : （可选项）要分享的文本标题
	 *
	 * `titleUrl` :string : 要分享的标题的url，**在 Android 平台上，如果是分享到 qq 或 qq空间，该参数不能缺省。iOS 忽略本参数**
	 *
	 * `text` :string : （可选项）要分享的文本信息
	 *
	 * `imgPaths` :Array : （可选项）要分享的图片地址集合，传入参数可以为单张图片信息，也可以为多张图片信息，要求本地路径（widget://、fs://、http://），除腾讯微博外，其他平台只支持单张图片的分享，默认分享数组的第一张图片。**新浪微博分享网络图片需要申请高级权限**。
	 *
	 * `url` :string : （可选项）要分享网页路径/应用路径
	 *
	 * `type` :string : （可选项）分享类型，仅当 target 为 sinaWb 时有效，暂仅支持 iOS平台
	 *
	 * `latitude` :number : （可选项）纬度，仅当 target 为 sinaWb 时有效，暂仅支持 iOS平台
	 *
	 * `longitude` :number : （可选项）经度，仅当 target 为 sinaWb 时有效，暂仅支持 iOS平台
	 */
	shareTo(params:mobShare_shareTo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `第三方登录`
	 * ========params==========
	 *
	 * `name` :string : 第三方登录平台的名字，取值范围如下：
	 */
	login(params:mobShare_login_Params, callback?: (ret:JSON) => void):void

}
interface mobShare_share_Params {
	/**（可选项）要分享的文本标题*/ 
	title?:string,

	/**要分享的标题的url，**在 Android 平台上，如果是分享到 qq 或 qq空间，该参数不能缺省。iOS 忽略本参数***/ 
	titleUrl:string,

	/**（可选项）要分享的文本信息*/ 
	text?:string,

	/**（可选项）要分享的图片地址集合，传入参数可以为单张图片信息，也可以为多张图片信息，要求本地路径 (widget://、fs://、http://)，  除腾讯微博外，其他平台只支持单张图片的分享，默认分享数组的第一张图片。**新浪微博分享网络图片需要申请高级权限**。单张图片太大会分享不成功。建议小于1M。*/ 
	imgPaths?:Array,

	/**（可选项）要分享网页路径/应用路径*/ 
	url?:string,

}

interface mobShare_shareTo_Params {
	/**（可选项）要分享到平台的名字，取值范围如下：*/ 
	target?:string,

	/**（可选项）要分享的文本标题*/ 
	title?:string,

	/**要分享的标题的url，**在 Android 平台上，如果是分享到 qq 或 qq空间，该参数不能缺省。iOS 忽略本参数***/ 
	titleUrl:string,

	/**（可选项）要分享的文本信息*/ 
	text?:string,

	/**（可选项）要分享的图片地址集合，传入参数可以为单张图片信息，也可以为多张图片信息，要求本地路径（widget://、fs://、http://），除腾讯微博外，其他平台只支持单张图片的分享，默认分享数组的第一张图片。**新浪微博分享网络图片需要申请高级权限**。*/ 
	imgPaths?:Array,

	/**（可选项）要分享网页路径/应用路径*/ 
	url?:string,

	/**（可选项）分享类型，仅当 target 为 sinaWb 时有效，暂仅支持 iOS平台*/ 
	type?:string,

	/**（可选项）纬度，仅当 target 为 sinaWb 时有效，暂仅支持 iOS平台*/ 
	latitude?:number,

	/**（可选项）经度，仅当 target 为 sinaWb 时有效，暂仅支持 iOS平台*/ 
	longitude?:number,

}

interface mobShare_login_Params {
	/**第三方登录平台的名字，取值范围如下：*/ 
	name:string,

}

interface tingyun {
}
interface vcloudPlay {
	/**
	 * `直播播放`
	 * ========params==========
	 *
	 * `x` :number : （必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；
	 *
	 * `y` :number : （必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0
	 *
	 * `w` :number : （可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度
	 *
	 * `h` :number : （可选项）模块的高度；默认：所属的 Window 或 Frame 的高度
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `playUrl` :string : （必填项）直播播放地址 rtmp:// http:// （备注：仅支持网易视频云的rtsp直播地址。）。
	 *
	 * `mediaType` :string : （可选项）播放类型：直播：livestream 点播：videoOnDemand。
	 *
	 * `decodeType` :string : （可选项）解码类型：软件解码：software 硬件解码：hardware。
	 */
	playLive(params:vcloudPlay_playLive_Params):void

	/** 暂停播放*/ 
	pause(callback?: (ret:JSON) => void):void

	/** 开始直播*/ 
	start(callback?: (ret:JSON) => void):void

	/** 停止直播（备注：需要执行stop接口完成后再进行关闭页面操作，iOS请禁止滑动返回，安卓请监听返回键事件进行相关业务逻辑处理。）*/ 
	stop(callback?: (ret:JSON) => void):void

	/** 总时长(点播显示)*/ 
	getDuration():void

	/** 已播放时长*/ 
	getCurrentPosition(callback?: (ret:JSON) => void):void

	/** 是否全屏*/ 
	isFullScreen():void

	/** 进入全屏*/ 
	full():void

	/** 退出全屏*/ 
	unfull():void

	/**
	 * `事件监听`
	 * ========params==========
	 *
	 * `name` :string : （必填项）直播出错反馈监听:playErrorListener
	 */
	addEventListener(params:vcloudPlay_addEventListener_Params):void

}
interface vcloudPlay_playLive_Params {
	/**（必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；*/ 
	x:number,

	/**（必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0*/ 
	y:number,

	/**（可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度*/ 
	w?:number,

	/**（可选项）模块的高度；默认：所属的 Window 或 Frame 的高度*/ 
	h?:number,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）直播播放地址 rtmp:// http:// （备注：仅支持网易视频云的rtsp直播地址。）。*/ 
	playUrl:string,

	/**（可选项）播放类型：直播：livestream 点播：videoOnDemand。*/ 
	mediaType?:string,

	/**（可选项）解码类型：软件解码：software 硬件解码：hardware。*/ 
	decodeType?:string,

}

interface vcloudPlay_addEventListener_Params {
	/**（必填项）直播出错反馈监听:playErrorListener*/ 
	name:string,

}

interface mobLink {
	/** 初始化本模块，该方法无参数，需要在调用本模块其他3个方法前调用该方法，一般放在win或frame的初始化方法中。*/ 
	initMobLink():void

	/** 获取分享的Url(推广链接)，获取该链接后用户在手机浏览器打开该链接(页面)，点击"打开App"按钮可调起自己的App。若点击按钮后手机没有安装App，则会弹出下载框供用户下载安装App。获取该Url后可用微信、QQ等第三方分享功能对Url进行分享，也可直接将该Url直接复制到手机浏览器地址栏打开，这样也可以看到效果。跳转到App后开发者可根据需求打开新的前端页面。该方法为耗时方法，若需要多次使用该链接且传入的参数不变，开发者可将结果保存起来供第二次使用，无需调用该方法多次，以节省资源。*/ 
	getShareUrl(callback?: (ret:JSON) => void):void

	/** 获取参数的方法。当从web跳到App后，参数也跟着传到了App,使用该方法可以获取到参数，参数包括getShareUrl中设置的参数，也包括网页中设置的参数。当用户点击分享链接(通过getShareUrl方法获取)进入分享页面，点击相应按钮调起App后，该方法可获取分享链接中的参数，即调用getShareUrl方法时传入的params和source参数。同时当分享页面也设置了参数(见getShareUrl方法中的说明)，该方法也能获取到网页中设置的这些参数。从而达到追踪新安装（或新注册）用户来源等目的。**若点击"打开App"按钮后手机没有安装App，则会跳转到后台配置的下载地址供用户下载安装App，此时在用户第一次打开App时也能获取到相应参数！***/ 
	getUrlParams():void

}
interface wxPay {
	/**
	 * `获取预支付订单号（适用于支付方案一）`
	 * ========params==========
	 *
	 * `info` :string : 订单信息（详见[统一下单-请求参数](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1)）签名后的字符串。具体方法见微信支付[安全规范-签名算法](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3) 。**注意：微信官方建议本过程在服务器端执行**
	 */
	getOrderId(params:wxPay_getOrderId_Params, callback?: (ret:JSON) => void):void

	/**
	 * `支付订单（适用于支付方案一）`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `orderId` :string : getOrderId 获取的订单号 （prepay_id）
	 *
	 * `mchId` :string : 商家和微信合作的 id 号，审核通过后微信服务器会发送到商家邮箱
	 *
	 * `nonceStr` :string : 随机字符串，防重发
	 *
	 * `timeStamp` :string : 时间戳，防重发
	 *
	 * `package` :string : （可选项）扩展字段，暂填写固定值Sign=WXPay
	 *
	 * `sign` :string : 商家根据微信开放平台文档对数据做的签名，详见：[安全规范-签名算法](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_12&index=2)
	 */
	payOrder(params:wxPay_payOrder_Params, callback?: (ret:JSON) => void):void

	/**
	 * `配置模块内部处理签名时需要的参数（适用于支付方案二）`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `mchId` :string : （可选项）商家和微信合作的 id 号，审核通过后微信服务器会发送到商家邮箱，若不传或者传空则从 `key.xml` 中读取
	 *
	 * `partnerKey` :string : （可选项）商户 API 密钥，务必同在商户平台->账户设置->API安全里填写的密钥保持一致，此密钥是根据微信对商户密钥的规范自己生成的，若不传或者传空则从 `key.xml` 中读取
	 *
	 * `notifyUrl` :string : （可选项）支付结果回调页面，若不传或者传空则从 `key.xml` 中读取
	 */
	config(params:wxPay_config_Params, callback?: (ret:JSON) => void):void

	/**
	 * `支付订单（适用于支付方案二）`
	 * ========params==========
	 *
	 * `description` :string : 商品或支付订单简要描述
	 *
	 * `totalFee` :string : 订单总金额，只能为整数，单位：分（￥）
	 *
	 * `tradeNo` :string : 商户系统内部的订单号，32个字符以内，可包含字母，其他说明见[商户订单号](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)
	 *
	 * `spbillCreateIP` :string : （可选项）APP 和网页支付提交用户端 IP，Native 支付填调用微信支付 API 的机器 IP
	 *
	 * `deviceInfo` :string : （可选项）终端设备号（门店号或收银设备 ID），注意：PC 网页或公众号内支付请传 "WEB"
	 *
	 * `detail` :string : （可选项）商品名称明细列表
	 *
	 * `attach` :string : （可选项）附加数据，在查询 API 和支付通知中原样返回，该字段主要用于商户携带订单的自定义数据
	 *
	 * `feeType` :string : （可选项）符合 ISO 4217标准的三位字母代码，其他值列表详见[货币类型](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)
	 *
	 * `timeStart` :string : （可选项）订单生成时间，格式为 yyyyMMddHHmmss，如2009年12月25日9点10分10秒表示为20091225091010。其他详见[时间规则](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)
	 *
	 * `timeExpire` :string : （可选项）订单失效时间，格式为 yyyyMMddHHmmss，如2009年12月27日9点10分10秒表示为20091227091010。其他详见[时间规则](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)。**注意：最短失效时间间隔必须大于5分钟**
	 *
	 * `goodsTag` :string : （可选项）商品标记，代金券或立减优惠功能的参数，说明详见[代金券或立减优惠](https://pay.weixin.qq.com/wiki/doc/api/sp_coupon.php?chapter=12_1)
	 *
	 * `productId` :string : （可选项）trade_type=NATIVE ，此 id 为二维码中包含的商品 ID，商户自行定义，详见[商户平台开发者文档](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1)
	 *
	 * `openId` :string : （可选项）trade_type=JSAPI ，用户在商户 appid 下的唯一标识。下单前需要调用[【网页授权获取用户信息】](http://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html)接口获取到用户的 Openid
	 */
	pay(params:wxPay_pay_Params, callback?: (ret:JSON) => void):void

}
interface wxPay_getOrderId_Params {
	/**订单信息（详见[统一下单-请求参数](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1)）签名后的字符串。具体方法见微信支付[安全规范-签名算法](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3) 。**注意：微信官方建议本过程在服务器端执行***/ 
	info:string,

}

interface wxPay_payOrder_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**getOrderId 获取的订单号 （prepay_id）*/ 
	orderId:string,

	/**商家和微信合作的 id 号，审核通过后微信服务器会发送到商家邮箱*/ 
	mchId:string,

	/**随机字符串，防重发*/ 
	nonceStr:string,

	/**时间戳，防重发*/ 
	timeStamp:string,

	/**（可选项）扩展字段，暂填写固定值Sign=WXPay*/ 
	package?:string,

	/**商家根据微信开放平台文档对数据做的签名，详见：[安全规范-签名算法](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_12&index=2)*/ 
	sign:string,

}

interface wxPay_config_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）商家和微信合作的 id 号，审核通过后微信服务器会发送到商家邮箱，若不传或者传空则从 `key.xml` 中读取*/ 
	mchId?:string,

	/**（可选项）商户 API 密钥，务必同在商户平台->账户设置->API安全里填写的密钥保持一致，此密钥是根据微信对商户密钥的规范自己生成的，若不传或者传空则从 `key.xml` 中读取*/ 
	partnerKey?:string,

	/**（可选项）支付结果回调页面，若不传或者传空则从 `key.xml` 中读取*/ 
	notifyUrl?:string,

}

interface wxPay_pay_Params {
	/**商品或支付订单简要描述*/ 
	description:string,

	/**订单总金额，只能为整数，单位：分（￥）*/ 
	totalFee:string,

	/**商户系统内部的订单号，32个字符以内，可包含字母，其他说明见[商户订单号](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)*/ 
	tradeNo:string,

	/**（可选项）APP 和网页支付提交用户端 IP，Native 支付填调用微信支付 API 的机器 IP*/ 
	spbillCreateIP?:string,

	/**（可选项）终端设备号（门店号或收银设备 ID），注意：PC 网页或公众号内支付请传 "WEB"*/ 
	deviceInfo?:string,

	/**（可选项）商品名称明细列表*/ 
	detail?:string,

	/**（可选项）附加数据，在查询 API 和支付通知中原样返回，该字段主要用于商户携带订单的自定义数据*/ 
	attach?:string,

	/**（可选项）符合 ISO 4217标准的三位字母代码，其他值列表详见[货币类型](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)*/ 
	feeType?:string,

	/**（可选项）订单生成时间，格式为 yyyyMMddHHmmss，如2009年12月25日9点10分10秒表示为20091225091010。其他详见[时间规则](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)*/ 
	timeStart?:string,

	/**（可选项）订单失效时间，格式为 yyyyMMddHHmmss，如2009年12月27日9点10分10秒表示为20091227091010。其他详见[时间规则](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_2)。**注意：最短失效时间间隔必须大于5分钟***/ 
	timeExpire?:string,

	/**（可选项）商品标记，代金券或立减优惠功能的参数，说明详见[代金券或立减优惠](https://pay.weixin.qq.com/wiki/doc/api/sp_coupon.php?chapter=12_1)*/ 
	goodsTag?:string,

	/**（可选项）trade_type=NATIVE ，此 id 为二维码中包含的商品 ID，商户自行定义，详见[商户平台开发者文档](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1)*/ 
	productId?:string,

	/**（可选项）trade_type=JSAPI ，用户在商户 appid 下的唯一标识。下单前需要调用[【网页授权获取用户信息】](http://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html)接口获取到用户的 Openid*/ 
	openId?:string,

}

interface wx {
	/** 判断当前设备是否安装微信客户端*/ 
	isInstalled(callback?: (ret:JSON) => void):void

	/**
	 * `分享文本内容`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :string : （可选项）场景
	 *
	 * `text` :string : 分享的文本
	 */
	shareText(params:wx_shareText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享图片内容`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :string : （可选项）场景
	 *
	 * `thumb` :string : 缩略图片的地址，支持 fs://、widget:// 协议。**大小不能超过32K，若 contentUrl 为本地图片地址则本参数忽略,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败**
	 *
	 * `contentUrl` :string : 分享图片的 url 地址（支持 fs://、widget://），长度不能超过10M，
	 */
	shareImage(params:wx_shareImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享网络音频资源`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :string : （可选项）场景
	 *
	 * `title` :string : （可选项）分享网络音频的标题。
	 *
	 * `description` :string : （可选项）分享网络音频的描述。
	 *
	 * `thumb` :string : （可选项）分享网络音频的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败**
	 *
	 * `musicDataUrl` :string : （可选项）分享的音频数据 url 地址，长度不能超过10k。
	 *
	 * `contentUrl` :string : 分享网络音频的 url 地址，长度不能超过10k。
	 */
	shareMusic(params:wx_shareMusic_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享网络视频资源`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :string : （可选项）场景
	 *
	 * `title` :string : （可选项）分享网络视频的标题。
	 *
	 * `description` :string : （可选项）分享网络视频的描述。**由于微信平台限制，对不同平台部分场景本参数无效**
	 *
	 * `thumb` :string : （可选项）分享网络视频的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败**
	 *
	 * `contentUrl` :string : 分享网络视频的 url 地址，长度不能超过10k。
	 */
	shareVideo(params:wx_shareVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享网页`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :string : （可选项）场景
	 *
	 * `title` :string : （可选项）分享网页的标题
	 *
	 * `description` :string : （可选项）分享网页的描述。**由于微信平台限制，对不同平台部分场景本参数无效**
	 *
	 * `thumb` :string : （可选项）分享网页的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败**
	 *
	 * `contentUrl` :string : 分享网页的 url 地址，长度不能超过10k。
	 */
	shareWebpage(params:wx_shareWebpage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享小程序`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :string : （可选项）场景，目前只支持会话
	 *
	 * `title` :string : （可选项）分享小程序的标题
	 *
	 * `description` :string : （可选项）分享小程序的描述。**由于微信平台限制，对不同平台部分场景本参数无效**
	 *
	 * `thumb` :string : （可选项）分享小程序的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败**
	 *
	 * `webpageUrl` :string : 兼容低版本微信的网页
	 *
	 * `userName` :string : 分享小程序的原始 id
	 *
	 * `path` :string : 分享小程序的页面的路径
	 *
	 * `hdImageData` :string : 小程序新版本的预览图的路径(128k)(android不支持)
	 *
	 * `withShareTicket` :boolean : 是否使用带 shareTicket 的转发
	 *
	 * `miniProgramType` :string : 分享小程序的版本（正式，开发，体验）
	 */
	shareProgram(params:wx_shareProgram_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拉起小程序功能`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `miniProgramType` :string : 拉起小程序的类型
	 *
	 * `userName` :string : 拉起的小程序的username，小程序的原始ID
	 *
	 * `path` :string : 拉起小程序页面的可带参路径，不填默认拉起小程序首页
	 */
	launchMiniProgram(params:wx_launchMiniProgram_Params, callback?: (ret:JSON) => void):void

	/**
	 * `一键订阅，详情参考 [微信文档](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1500434436_aWfqW&token=&lang=zh_CN)。`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :number : 重定向后会带上scene参数，开发者可以填0-10000 的整形值，用来标识订阅场值
	 *
	 * `templateId` :string : 订阅消息模板ID，在微信开放平台提交应用审核通过后获得
	 *
	 * `reserved` :string : （可选项）用于保持请求和回调的状态，授权请后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验，开发者可以填写a-zA-Z0-9的参数值，最多128字节，要求做urlencode
	 */
	subscribeMsg(params:wx_subscribeMsg_Params, callback?: (ret:JSON) => void):void

	/**
	 * `登录授权（**用于实现第三方登录**），详情参考微信官方文档，[移动登录开发指南](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419317851&token=f3e0c83a0c4fffb6d86968019561cd409ddf3b4e&lang=zh_CN)`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取，不传或传入错误的 apiKey，则无法打开微信进行登录。
	 *
	 * `scope` :string : （可选项）授权域，[什么是授权域?](https://open.weixin.qq.com/cgi-bin/showdocument?action=doc&id=open1419317851&t=0.1891884393385983#scope)
	 */
	auth(params:wx_auth_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取授权 accessToken（**需要登录授权成功**）`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `apiSecret` :string : （可选项）从微信开放平台获取的 secret，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `code` :string : 通过 auth 接口授权成功后返回的 code 参数
	 */
	getToken(params:wx_getToken_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取用户信息（**需要获取 accessToken 成功**）`
	 * ========params==========
	 *
	 * `accessToken` :string : getToken 接口或 refreshToken 接口成功获取的 accessToken 值
	 *
	 * `openId` :string : getToken 接口或 refreshToken 接口成功获取的 openId 值
	 *
	 * `lang` :string : （可选项）国家地区语言版本
	 */
	getUserInfo(params:wx_getUserInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `调用 getUserInfo 接口错误码返回1时，代表 accessToken 过期，调用此接口刷新 accessToken`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `dynamicToken` :string : getToken 接口或 refreshToken 接口获取的 dynamicToken 值
	 */
	refreshToken(params:wx_refreshToken_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享多张图片到朋友圈，**暂仅支持 Android 平台，iOS 平台可使用 shareAction 模块来实现多图分享。注意：由于不是使用的官方sdk进行的分享，而是直接调用的微信客户端的分享界面，分享后无法回到原应用，且微信端不会给出是否分享成功的反馈，所以本接口暂无回调**`
	 * ========params==========
	 *
	 * `imgs` :Array : 要分享的图片的路径组成的数组，要求本地路径（fs://、widget://）
	 *
	 * `description` :string : 分享的文字
	 */
	shareMutableImg(params:wx_shareMutableImg_Params):void

}
interface wx_shareText_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）场景*/ 
	scene?:string,

	/**分享的文本*/ 
	text:string,

}

interface wx_shareImage_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）场景*/ 
	scene?:string,

	/**缩略图片的地址，支持 fs://、widget:// 协议。**大小不能超过32K，若 contentUrl 为本地图片地址则本参数忽略,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败***/ 
	thumb:string,

	/**分享图片的 url 地址（支持 fs://、widget://），长度不能超过10M，*/ 
	contentUrl:string,

}

interface wx_shareMusic_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）场景*/ 
	scene?:string,

	/**（可选项）分享网络音频的标题。*/ 
	title?:string,

	/**（可选项）分享网络音频的描述。*/ 
	description?:string,

	/**（可选项）分享网络音频的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败***/ 
	thumb?:string,

	/**（可选项）分享的音频数据 url 地址，长度不能超过10k。*/ 
	musicDataUrl?:string,

	/**分享网络音频的 url 地址，长度不能超过10k。*/ 
	contentUrl:string,

}

interface wx_shareVideo_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）场景*/ 
	scene?:string,

	/**（可选项）分享网络视频的标题。*/ 
	title?:string,

	/**（可选项）分享网络视频的描述。**由于微信平台限制，对不同平台部分场景本参数无效***/ 
	description?:string,

	/**（可选项）分享网络视频的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败***/ 
	thumb?:string,

	/**分享网络视频的 url 地址，长度不能超过10k。*/ 
	contentUrl:string,

}

interface wx_shareWebpage_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）场景*/ 
	scene?:string,

	/**（可选项）分享网页的标题*/ 
	title?:string,

	/**（可选项）分享网页的描述。**由于微信平台限制，对不同平台部分场景本参数无效***/ 
	description?:string,

	/**（可选项）分享网页的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败***/ 
	thumb?:string,

	/**分享网页的 url 地址，长度不能超过10k。*/ 
	contentUrl:string,

}

interface wx_shareProgram_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）场景，目前只支持会话*/ 
	scene?:string,

	/**（可选项）分享小程序的标题*/ 
	title?:string,

	/**（可选项）分享小程序的描述。**由于微信平台限制，对不同平台部分场景本参数无效***/ 
	description?:string,

	/**（可选项）分享小程序的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败***/ 
	thumb?:string,

	/**兼容低版本微信的网页*/ 
	webpageUrl:string,

	/**分享小程序的原始 id*/ 
	userName:string,

	/**分享小程序的页面的路径*/ 
	path:string,

	/**小程序新版本的预览图的路径(128k)(android不支持)*/ 
	hdImageData:string,

	/**是否使用带 shareTicket 的转发*/ 
	withShareTicket:boolean,

	/**分享小程序的版本（正式，开发，体验）*/ 
	miniProgramType:string,

}

interface wx_launchMiniProgram_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**拉起小程序的类型*/ 
	miniProgramType:string,

	/**拉起的小程序的username，小程序的原始ID*/ 
	userName:string,

	/**拉起小程序页面的可带参路径，不填默认拉起小程序首页*/ 
	path:string,

}

interface wx_subscribeMsg_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**重定向后会带上scene参数，开发者可以填0-10000 的整形值，用来标识订阅场值*/ 
	scene:number,

	/**订阅消息模板ID，在微信开放平台提交应用审核通过后获得*/ 
	templateId:string,

	/**（可选项）用于保持请求和回调的状态，授权请后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验，开发者可以填写a-zA-Z0-9的参数值，最多128字节，要求做urlencode*/ 
	reserved?:string,

}

interface wx_auth_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取，不传或传入错误的 apiKey，则无法打开微信进行登录。*/ 
	apiKey?:string,

	/**（可选项）授权域，[什么是授权域?](https://open.weixin.qq.com/cgi-bin/showdocument?action=doc&id=open1419317851&t=0.1891884393385983#scope)*/ 
	scope?:string,

}

interface wx_getToken_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）从微信开放平台获取的 secret，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiSecret?:string,

	/**通过 auth 接口授权成功后返回的 code 参数*/ 
	code:string,

}

interface wx_getUserInfo_Params {
	/**getToken 接口或 refreshToken 接口成功获取的 accessToken 值*/ 
	accessToken:string,

	/**getToken 接口或 refreshToken 接口成功获取的 openId 值*/ 
	openId:string,

	/**（可选项）国家地区语言版本*/ 
	lang?:string,

}

interface wx_refreshToken_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**getToken 接口或 refreshToken 接口获取的 dynamicToken 值*/ 
	dynamicToken:string,

}

interface wx_shareMutableImg_Params {
	/**要分享的图片的路径组成的数组，要求本地路径（fs://、widget://）*/ 
	imgs:Array,

	/**分享的文字*/ 
	description:string,

}

interface busScan {
	/** 开始扫描*/ 
	scan():void

}
interface ICBCPay {
	/**
	 * `设置sdk链接地址,如设置链接地址请在调用支付接口前设置`
	 * ========params==========
	 *
	 * `url` :string : 接口数据，默认为生产地址’https://b2c.icbc.com.cn‘，测试环境地址：’https://b2c3.dccnet.com.cn‘，iOS不支持
	 *
	 * `urlListMain` :string : 支付平台地址
	 *
	 * `urlPortal` :string : 手机银行地址
	 */
	setPayIp(params:ICBCPay_setPayIp_Params, callback?: (ret:JSON) => void):void

	/**
	 * `工商银行e支付`
	 * ========params==========
	 *
	 * `tranData` :string : 接口数据
	 *
	 * `signMsg` :string : 签名数据
	 *
	 * `cert` :string : 证书数据
	 *
	 * `interfaceName` :string : 接口名，仅支持iOS
	 *
	 * `interfaceVersion` :string : 接口版本号，仅支持iOS
	 *
	 * `urlScheme` :string : 应用包名，必须传入，否则跳转至工行App无法返回，仅支持iOS
	 */
	icbcPay(params:ICBCPay_icbcPay_Params, callback?: (ret:JSON) => void):void

	/**
	 * `微信支付`
	 * ========params==========
	 *
	 * `tranData` :string : 接口数据
	 *
	 * `signMsg` :string : 签名数据
	 *
	 * `cert` :string : 证书数据
	 *
	 * `appid` :string : （可选）微信平台appid
	 */
	wxPay(params:ICBCPay_wxPay_Params, callback?: (ret:JSON) => void):void

	/**
	 * `支付宝支付`
	 * ========params==========
	 *
	 * `tranData` :string : 接口数据
	 *
	 * `signMsg` :string : 签名数据
	 *
	 * `cert` :string : 证书数据
	 *
	 * `urlSchemes` :string : 商户的URL Schemes，仅支持iOS
	 */
	aliPay(params:ICBCPay_aliPay_Params, callback?: (ret:JSON) => void):void

	/** 工商银行e支付监听*/ 
	icbcPayListener(callback?: (ret:JSON) => void):void

	/** 微信支付监听*/ 
	wxPayListener(callback?: (ret:JSON) => void):void

	/** 支付宝支付监听*/ 
	aliPayListener(callback?: (ret:JSON) => void):void

}
interface ICBCPay_setPayIp_Params {
	/**接口数据，默认为生产地址’https://b2c.icbc.com.cn‘，测试环境地址：’https://b2c3.dccnet.com.cn‘，iOS不支持*/ 
	url:string,

	/**支付平台地址*/ 
	urlListMain:string,

	/**手机银行地址*/ 
	urlPortal:string,

}

interface ICBCPay_icbcPay_Params {
	/**接口数据*/ 
	tranData:string,

	/**签名数据*/ 
	signMsg:string,

	/**证书数据*/ 
	cert:string,

	/**接口名，仅支持iOS*/ 
	interfaceName:string,

	/**接口版本号，仅支持iOS*/ 
	interfaceVersion:string,

	/**应用包名，必须传入，否则跳转至工行App无法返回，仅支持iOS*/ 
	urlScheme:string,

}

interface ICBCPay_wxPay_Params {
	/**接口数据*/ 
	tranData:string,

	/**签名数据*/ 
	signMsg:string,

	/**证书数据*/ 
	cert:string,

	/**（可选）微信平台appid*/ 
	appid?:string,

}

interface ICBCPay_aliPay_Params {
	/**接口数据*/ 
	tranData:string,

	/**签名数据*/ 
	signMsg:string,

	/**证书数据*/ 
	cert:string,

	/**商户的URL Schemes，仅支持iOS*/ 
	urlSchemes:string,

}

interface myALiAPIInfo {
	/**
	 * `读取某个接口获取数据`
	 * ========params==========
	 *
	 * `http` :string : （必填）"http://"或者"https://"，根据自己请求的地址来填写，使用HTTP还是HTTPS调用，注意使用小写
	 *
	 * `host` :string : （必填），根据自己请求的地址来填写，请传入主机域名或者IP，类似：“dm-51.data.aliyun.com”
	 *
	 * `path` :string : （必填），根据自己请求的地址来填写，类似：“/weather/query”
	 *
	 * `method` :string : （必填）"post"或者"get"，根据自己请求的请求方式填写，注意使用小写
	 *
	 * `header` :string : （非必填），headers参数键值对，根据接口需要是否传递来添加，类似：“{"header1": "header1", "header2": "header2"}”
	 *
	 * `query` :string : （非必填），query参数键值对，根据接口需要是否传递来添加，类似：“{"citycode" : "101040100"}”
	 *
	 * `bodys` :string : （非必填），bodys参数键值对，根据接口需要是否传递来添加，类似：“{"body1" : "bodys1"}”
	 *
	 * `img` :string : （非必填），“身份证识别”特有参数，其他的接口不用传，要求本地路径（widget://）或者网络图片地址，阿里官网的身份证识别接口详细介绍地址：https://market.aliyun.com/products/57124001/cmapi010401.html
	 *
	 * `img` :string : （非必填），“身份证识别”特有参数，要求本地路径（widget://）或者网络图片地址
	 */
	getInfo(params:myALiAPIInfo_getInfo_Params, callback?: (ret:JSON) => void):void

}
interface myALiAPIInfo_getInfo_Params {
	/**（必填）"http://"或者"https://"，根据自己请求的地址来填写，使用HTTP还是HTTPS调用，注意使用小写*/ 
	http:string,

	/**（必填），根据自己请求的地址来填写，请传入主机域名或者IP，类似：“dm-51.data.aliyun.com”*/ 
	host:string,

	/**（必填），根据自己请求的地址来填写，类似：“/weather/query”*/ 
	path:string,

	/**（必填）"post"或者"get"，根据自己请求的请求方式填写，注意使用小写*/ 
	method:string,

	/**（非必填），headers参数键值对，根据接口需要是否传递来添加，类似：“{"header1": "header1", "header2": "header2"}”*/ 
	header:string,

	/**（非必填），query参数键值对，根据接口需要是否传递来添加，类似：“{"citycode" : "101040100"}”*/ 
	query:string,

	/**（非必填），bodys参数键值对，根据接口需要是否传递来添加，类似：“{"body1" : "bodys1"}”*/ 
	bodys:string,

	/**（非必填），“身份证识别”特有参数，其他的接口不用传，要求本地路径（widget://）或者网络图片地址，阿里官网的身份证识别接口详细介绍地址：https://market.aliyun.com/products/57124001/cmapi010401.html*/ 
	img:string,

	/**（非必填），“身份证识别”特有参数，要求本地路径（widget://）或者网络图片地址*/ 
	img:string,

}

interface gAnalytics {
	/**
	 * `- 类型：字符串`
	 * ========params==========
	 *
	 * `userID` :string : The user ID to ascribe to the user of this app on this device, which must be non-empty and no more than 256 characters long. 不传表示 removes the user ID.
	 *
	 * `screenName` :string : （可选项）The name of the current screen. Should contain 1 to 100 characters.不传表示 clear the current screen name.
	 *
	 * `classOverride` :string : The name of the screen class. Should contain 1 to 100 characters.
	 *
	 * `property` :string : （可选项）The value of the user property. Values can be up to 36 characters long.不传表示 removes the user property.
	 *
	 * `name` :string : The name of the user property to set. Should contain 1 to 24 alphanumeric characters or underscores and must start with an alphabetic character. The "firebase_", "google_", and "ga_" prefixes are reserved and should not be used for user property names.
	 *
	 * `logEvent` :string : （可选项）The name of the event. Should contain 1 to 40 alphanumeric characters or underscores.The name must start with an alphabetic character. Some event names are reserved. See  [FIREventNames](#FIREventNamesLink) for the list of reserved event names. The "firebase_", "google_", and "ga_" prefixes are reserved and should not be used. Note that event names are case-sensitive and that logging two events whose names differ only in case will result in two distinct events.
	 *
	 * `parameters` :JSON : （可选项）The JSON of event parameters. 不传表示 that the event has no parameters.Parameter names can be up to 40 characters long and must start with an alphabetic character and contain only alphanumeric characters and underscores.Only String Number (signed 64-bit integer and 64-bit floating-point number) parameter types are supported. NSString parameter values can be up to 100 characters long. The "firebase_", "google_", and "ga_" prefixes are reserved and should not be used for parameter names.
	 */
	setUserID(params:gAnalytics_setUserID_Params):void

}
interface gAnalytics_setUserID_Params {
	/**The user ID to ascribe to the user of this app on this device, which must be non-empty and no more than 256 characters long. 不传表示 removes the user ID.*/ 
	userID:string,

	/**（可选项）The name of the current screen. Should contain 1 to 100 characters.不传表示 clear the current screen name.*/ 
	screenName?:string,

	/**The name of the screen class. Should contain 1 to 100 characters.*/ 
	classOverride:string,

	/**（可选项）The value of the user property. Values can be up to 36 characters long.不传表示 removes the user property.*/ 
	property?:string,

	/**The name of the user property to set. Should contain 1 to 24 alphanumeric characters or underscores and must start with an alphabetic character. The "firebase_", "google_", and "ga_" prefixes are reserved and should not be used for user property names.*/ 
	name:string,

	/**（可选项）The name of the event. Should contain 1 to 40 alphanumeric characters or underscores.The name must start with an alphabetic character. Some event names are reserved. See  [FIREventNames](#FIREventNamesLink) for the list of reserved event names. The "firebase_", "google_", and "ga_" prefixes are reserved and should not be used. Note that event names are case-sensitive and that logging two events whose names differ only in case will result in two distinct events.*/ 
	logEvent?:string,

	/**（可选项）The JSON of event parameters. 不传表示 that the event has no parameters.Parameter names can be up to 40 characters long and must start with an alphabetic character and contain only alphanumeric characters and underscores.Only String Number (signed 64-bit integer and 64-bit floating-point number) parameter types are supported. NSString parameter values can be up to 100 characters long. The "firebase_", "google_", and "ga_" prefixes are reserved and should not be used for parameter names.*/ 
	parameters?:JSON,

}

interface ottPay {
	/**
	 * `支付`
	 * ========params==========
	 *
	 * `backUrl` :string : （可选）回调地址，如果每个订单回调地址不一样则在此设置回调地址
	 *
	 * `orderID` :string : 订单ID
	 *
	 * `amount` :string : 数量
	 *
	 * `currency` :string : 货币
	 *
	 * `bizType` :string : if currency “USD”，using “APUSDONLINE”
	 */
	pay(params:ottPay_pay_Params, callback?: (ret:JSON) => void):void

}
interface ottPay_pay_Params {
	/**（可选）回调地址，如果每个订单回调地址不一样则在此设置回调地址*/ 
	backUrl?:string,

	/**订单ID*/ 
	orderID:string,

	/**数量*/ 
	amount:string,

	/**货币*/ 
	currency:string,

	/**if currency “USD”，using “APUSDONLINE”*/ 
	bizType:string,

}

interface baiduSpeechRecognizer {
	/** 创建语音识别器*/ 
	createSpeechRecognizer():void

	/** 开始语音识别*/ 
	startListening(callback?: (ret:JSON) => void):void

	/** 停止录音，但是识别将继续*/ 
	stopListening():void

	/** 设置音量监听*/ 
	setVolumeChangeListener():void

	/** 取消本次识别，已有录音也将不再识别*/ 
	cancel():void

	/** 销毁语音识别器，释放资源*/ 
	destroy():void

}
interface pushRtmpOrVideoPlay {
	/**
	 * `初始化推流模块并显示默认推流界面`
	 * ========params==========
	 *
	 * `x` :number : （可选项）
	 *
	 * `y` :number : （可选项）
	 *
	 * `w` :number : （可选项）
	 *
	 * `h` :number : （可选项）
	 *
	 * `url` :string : 必填项，推流的rtmp地址
	 */
	showTuiLiu(params:pushRtmpOrVideoPlay_showTuiLiu_Params):void

	/**
	 * `控制推流界面按钮可见状态`
	 * ========params==========
	 *
	 * `btnid` :string : 界面的可见按钮ID, btnPlay 播放,btnCameraChange 摄像头切换,btnHWEncode 硬件解码,btnFaceBeauty 美颜,btnLog 日志,btnBitrate 码流,btnFlash 闪光灯
	 *
	 * `show` :number : 按钮可见状态0为隐藏1为显示
	 */
	setTLsButtonVisibe(params:pushRtmpOrVideoPlay_setTLsButtonVisibe_Params):void

	/**
	 * `模拟点击推流界面指定按钮`
	 * ========params==========
	 *
	 * `btnid` :string : 界面的可见按钮ID, btnPlay 播放,btnCameraChange 摄像头切换,btnHWEncode 硬件解码,btnFaceBeauty 美颜,btnLog 日志,btnBitrate 码流,btnFlash 闪光灯
	 */
	ClickTLButtonForId(params:pushRtmpOrVideoPlay_ClickTLButtonForId_Params):void

	/** 开始推流*/ 
	TLStart():void

	/** 结束视频推流*/ 
	TLStop():void

	/**
	 * `播放视频`
	 * ========params==========
	 *
	 * `x` :number : （可选项）
	 *
	 * `y` :number : （可选项）
	 *
	 * `w` :number : （可选项）
	 *
	 * `h` :number : （可选项）
	 *
	 * `url` :string : 必填项，播放视频地址
	 */
	showPlayer(params:pushRtmpOrVideoPlay_showPlayer_Params):void

	/** 开始播放视频*/ 
	PlayStart():void

	/** 停止播放视频*/ 
	PlayStop():void

	/**
	 * `模拟点击播放界面指定按钮`
	 * ========params==========
	 *
	 * `btnid` :string : 界面的可见按钮ID, btnPlay 播放,btnCameraChange 摄像头切换,btnHWEncode 硬件解码,btnFaceBeauty 美颜,btnLog 日志,btnBitrate 码流,btnFlash 闪光灯
	 */
	ClickPlayButtonForId(params:pushRtmpOrVideoPlay_ClickPlayButtonForId_Params):void

}
interface pushRtmpOrVideoPlay_showTuiLiu_Params {
	/**（可选项）*/ 
	x?:number,

	/**（可选项）*/ 
	y?:number,

	/**（可选项）*/ 
	w?:number,

	/**（可选项）*/ 
	h?:number,

	/**必填项，推流的rtmp地址*/ 
	url:string,

}

interface pushRtmpOrVideoPlay_setTLsButtonVisibe_Params {
	/**界面的可见按钮ID, btnPlay 播放,btnCameraChange 摄像头切换,btnHWEncode 硬件解码,btnFaceBeauty 美颜,btnLog 日志,btnBitrate 码流,btnFlash 闪光灯*/ 
	btnid:string,

	/**按钮可见状态0为隐藏1为显示*/ 
	show:number,

}

interface pushRtmpOrVideoPlay_ClickTLButtonForId_Params {
	/**界面的可见按钮ID, btnPlay 播放,btnCameraChange 摄像头切换,btnHWEncode 硬件解码,btnFaceBeauty 美颜,btnLog 日志,btnBitrate 码流,btnFlash 闪光灯*/ 
	btnid:string,

}

interface pushRtmpOrVideoPlay_showPlayer_Params {
	/**（可选项）*/ 
	x?:number,

	/**（可选项）*/ 
	y?:number,

	/**（可选项）*/ 
	w?:number,

	/**（可选项）*/ 
	h?:number,

	/**必填项，播放视频地址*/ 
	url:string,

}

interface pushRtmpOrVideoPlay_ClickPlayButtonForId_Params {
	/**界面的可见按钮ID, btnPlay 播放,btnCameraChange 摄像头切换,btnHWEncode 硬件解码,btnFaceBeauty 美颜,btnLog 日志,btnBitrate 码流,btnFlash 闪光灯*/ 
	btnid:string,

}

interface XYLink {
	/**
	 * `登录小鱼易连`
	 * ========params==========
	 *
	 * `displayName` :string : (必选项)用户的显示名；
	 *
	 * `externalUserId` :string : (必选项)唯一用户标示，需保证唯一，建议使用自己业务系统的UserID
	 */
	login(params:XYLink_login_Params, callback?: (ret:JSON) => void):void

	/**
	 * `连接终端设备`
	 * ========params==========
	 *
	 * `deviceId` :string : (必选项) 终端设备id
	 *
	 * `password` :string : (可选项) 设备密码
	 *
	 * `number` :string : (必选项) 用户id
	 *
	 * `username` :string : (可选项)用户名
	 */
	link(params:XYLink_link_Params):void

}
interface XYLink_login_Params {
	/**(必选项)用户的显示名；*/ 
	displayName:string,

	/**(必选项)唯一用户标示，需保证唯一，建议使用自己业务系统的UserID*/ 
	externalUserId:string,

}

interface XYLink_link_Params {
	/**(必选项) 终端设备id*/ 
	deviceId:string,

	/**(可选项) 设备密码*/ 
	password?:string,

	/**(必选项) 用户id*/ 
	number:string,

	/**(可选项)用户名*/ 
	username?:string,

}

interface constructionPay {
	/**
	 * `获取订单号（tn），注意：获取订单号可自行访问服务器实现，本节接口方便测试使用。`
	 * ========params==========
	 *
	 * `goodsId` :string : （可选项）商品id
	 *
	 * `bankId` :string : （可选项）交易银行
	 *
	 * `serverUrl` :string : （可选项）服务器地址
	 */
	getTn(params:constructionPay_getTn_Params, callback?: (ret:JSON) => void):void

	/**
	 * `按交易流水号支付订单`
	 * ========params==========
	 *
	 * `tn` :string : 交易流水号信息，银联后台生成，通过商户后台返回到客户端
	 *
	 * `mode` :string : 接入模式设定
	 */
	pay(params:constructionPay_pay_Params, callback?: (ret:JSON) => void):void

}
interface constructionPay_getTn_Params {
	/**（可选项）商品id*/ 
	goodsId?:string,

	/**（可选项）交易银行*/ 
	bankId?:string,

	/**（可选项）服务器地址*/ 
	serverUrl?:string,

}

interface constructionPay_pay_Params {
	/**交易流水号信息，银联后台生成，通过商户后台返回到客户端*/ 
	tn:string,

	/**接入模式设定*/ 
	mode:string,

}

interface bcapplepay {
}
interface aliphone {
	/**
	 * `一键验证`
	 * ========params==========
	 *
	 * `phone` :string : 手机号码
	 */
	verify(params:aliphone_verify_Params, callback?: (ret:JSON) => void):void

}
interface aliphone_verify_Params {
	/**手机号码*/ 
	phone:string,

}

interface upYun {
	/**
	 * `本地签名的表单上传`
	 * ========params==========
	 *
	 * `bucketName` :string : 上传空间名
	 *
	 * `operator` :string : 空间操作员
	 *
	 * `password` :string : 空间操作员密码
	 *
	 * `file` :string : 上传文件，支持fs://、cache://等文件路径协议及真实路径。
	 *
	 * `saveKey` :string : 上传文件的保存路径
	 */
	localUploader(params:upYun_localUploader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `服务器端签名的表单上传`
	 * ========params==========
	 *
	 * `operator` :string : 空间操作员
	 *
	 * `policy` :string : 上传策略
	 *
	 * `signature` :string : 上传策略签名
	 *
	 * `file` :string : 上传文件，支持fs://、cache://等文件路径协议及真实路径。
	 */
	serverUploader(params:upYun_serverUploader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分块上传`
	 * ========params==========
	 *
	 * `bucketName` :string : 上传空间名
	 *
	 * `operator` :string : 空间操作员
	 *
	 * `operatorPassword` :string : 空间操作员密码
	 *
	 * `filePath` :string : 上传文件本地路径，支持fs://、cache://等文件路径协议及真实路径。
	 *
	 * `savePath` :string : 上传文件的保存路径, 例如：“/2015/0901/file1.jpg”
	 */
	blockUpLoader(params:upYun_blockUpLoader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `表单上传加异步多媒体处理－－视频截图`
	 * ========params==========
	 *
	 * `bucketName` :string : 上传空间名
	 *
	 * `operator` :string : 空间操作员
	 *
	 * `password` :string : 空间操作员密码
	 *
	 * `file` :string : 上传文件，支持fs://、cache://等文件路径协议及真实路径。
	 *
	 * `saveKey` :string : 上传文件的保存路径
	 *
	 * `otherParameters` :string : (可选项)具体参考表单参数，http://docs.upyun.com/api/form_api/#_2
	 */
	uploaderAndAsyncTask(params:upYun_uploaderAndAsyncTask_Params, callback?: (ret:JSON) => void):void

}
interface upYun_localUploader_Params {
	/**上传空间名*/ 
	bucketName:string,

	/**空间操作员*/ 
	operator:string,

	/**空间操作员密码*/ 
	password:string,

	/**上传文件，支持fs://、cache://等文件路径协议及真实路径。*/ 
	file:string,

	/**上传文件的保存路径*/ 
	saveKey:string,

}

interface upYun_serverUploader_Params {
	/**空间操作员*/ 
	operator:string,

	/**上传策略*/ 
	policy:string,

	/**上传策略签名*/ 
	signature:string,

	/**上传文件，支持fs://、cache://等文件路径协议及真实路径。*/ 
	file:string,

}

interface upYun_blockUpLoader_Params {
	/**上传空间名*/ 
	bucketName:string,

	/**空间操作员*/ 
	operator:string,

	/**空间操作员密码*/ 
	operatorPassword:string,

	/**上传文件本地路径，支持fs://、cache://等文件路径协议及真实路径。*/ 
	filePath:string,

	/**上传文件的保存路径, 例如：“/2015/0901/file1.jpg”*/ 
	savePath:string,

}

interface upYun_uploaderAndAsyncTask_Params {
	/**上传空间名*/ 
	bucketName:string,

	/**空间操作员*/ 
	operator:string,

	/**空间操作员密码*/ 
	password:string,

	/**上传文件，支持fs://、cache://等文件路径协议及真实路径。*/ 
	file:string,

	/**上传文件的保存路径*/ 
	saveKey:string,

	/**(可选项)具体参考表单参数，http://docs.upyun.com/api/form_api/#_2*/ 
	otherParameters?:string,

}

interface baiduMap {
}
interface aMapNavigation {
	/**
	 * `开始导航`
	 * ========params==========
	 *
	 * `start` :JSON : 起点信息
	 *
	 * `wayPoint` :Array : （可选项）途经点位置信息，当 type 为 walk 时本参数无效
	 *
	 * `end` :JSON : 终点信息
	 *
	 * `type` :string : （可选项）导航路线类型
	 *
	 * `strategy` :string : （可选项）算路策略，仅当 type 为 drive 时有效 (android不支持)
	 *
	 * `congestion` :boolean : 是否躲避拥堵 (ios不支持)
	 *
	 * `avoidspeed` :boolean : 不走高速 (ios不支持)
	 *
	 * `cost` :boolean : 避免收费 (ios不支持)
	 *
	 * `hightspeed` :boolean : 高速优先 (ios不支持)
	 *
	 * `multipleRoute` :boolean : 单路径or多路径 (ios不支持)
	 *
	 * `mode` :string : （可选项）导航模式
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 */
	start(params:aMapNavigation_start_Params, callback?: (ret:JSON) => void):void

	/** 关闭导航*/ 
	close():void

	/**
	 * `监听导航文字提示`
	 * ========params==========
	 *
	 * `state` :boolean : 是否监听导航文字提示(注：android上如果此参数为true，内置语音无法播报，需要开发者根据回调自行用其他SDK播报)
	 *
	 * `stopReading` :boolean : 是否关闭模块自带的导航语音，仅支持 iOS 端
	 */
	navigationTextListener(params:aMapNavigation_navigationTextListener_Params, callback?: (ret:JSON) => void):void

}
interface aMapNavigation_start_Params {
	/**起点信息*/ 
	start:JSON,

	/**（可选项）途经点位置信息，当 type 为 walk 时本参数无效*/ 
	wayPoint?:Array,

	/**终点信息*/ 
	end:JSON,

	/**（可选项）导航路线类型*/ 
	type?:string,

	/**（可选项）算路策略，仅当 type 为 drive 时有效 (android不支持)*/ 
	strategy?:string,

	/**是否躲避拥堵 (ios不支持)*/ 
	congestion:boolean,

	/**不走高速 (ios不支持)*/ 
	avoidspeed:boolean,

	/**避免收费 (ios不支持)*/ 
	cost:boolean,

	/**高速优先 (ios不支持)*/ 
	hightspeed:boolean,

	/**单路径or多路径 (ios不支持)*/ 
	multipleRoute:boolean,

	/**（可选项）导航模式*/ 
	mode?:string,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

}

interface aMapNavigation_navigationTextListener_Params {
	/**是否监听导航文字提示(注：android上如果此参数为true，内置语音无法播报，需要开发者根据回调自行用其他SDK播报)*/ 
	state:boolean,

	/**是否关闭模块自带的导航语音，仅支持 iOS 端*/ 
	stopReading:boolean,

}

interface txCameraRecord {
	/**
	 * `设置授权`
	 * ========params==========
	 *
	 * `ugcLicenceUrl` :string : （必填项）从腾讯云平台获取的LicenseUrl。[参考腾讯官方申请说明](https://cloud.tencent.com/document/product/584/20333#1.-.E7.94.B3.E8.AF.B7.E6.B5.8B.E8.AF.95license)
	 *
	 * `ugcKey` :string : （必填项）从腾讯云平台获取的Key。[参考腾讯官方申请说明](https://cloud.tencent.com/document/product/584/20333#1.-.E7.94.B3.E8.AF.B7.E6.B5.8B.E8.AF.95license)
	 */
	setLicence(params:txCameraRecord_setLicence_Params, callback?: (ret:JSON) => void):void

	/** 获取授权信息*/ 
	getLicenceInfo():void

	/**
	 * `短视频录制`
	 * ========params==========
	 *
	 * `aspectRatio` :number : （可选项）录制视频比例 （0 > 1:1 1 > 4:3 2 > 16:9）。
	 *
	 * `recordResolution` :number : （可选项）录制分辨率 （0 > 360_640 1 > 540_960 2 > 720_1280）。
	 *
	 * `biteRate` :number : （可选项）码率 （范围：600-4800）。
	 *
	 * `fps` :number : （可选项）帧率 （范围：15-30）。
	 *
	 * `gop` :number : （可选项）关键帧间隔 （范围：1-10）。
	 *
	 * `logo` :string : （可选项）视频尾部水印logo（支持fs:// widget://路径）。
	 *
	 * `minDuration` :number : （可选项）视频最短时长(秒)。
	 *
	 * `maxDuration` :number : （可选项）视频最长时间（秒）。
	 *
	 * `isFront` :boolean : （可选项）是否前置摄像头 （true 前置 fasle 后置）
	 *
	 * `isBeauty` :boolean : （可选项）是否显示美颜按钮 （true 显示 false 隐藏）
	 *
	 * `isMusic` :boolean : （可选项）是否显示音乐按钮 （true 显示 false 隐藏）
	 *
	 * `isCustomMusic` :boolean : （可选项）是否自定义音乐 （true 显示模块自带音乐列表 false 点击音乐按钮返回事件并关闭录制界面**[使用该模式缺点:编辑视频时无法选择音乐]**）
	 *
	 * `musicPath` :string : （可选项）录制时播放音乐，（支持fs:// widget://路径，安卓不支持widget路径）【备注：安卓设置音乐时会覆盖麦克风的语音】
	 *
	 * `isUploadPic` :boolean : （可选项）下载按钮对应图片是否显示上传图片样式 （true 显示上传按钮样式 false 显示下载按钮样式）
	 *
	 * `data` :Array : 音乐列表的数据源，
	 *
	 * `styles` :JSON : （可选项）模块各部分的样式
	 *
	 * `refreshHeader` :JSON : （可选项）下拉刷新样式
	 *
	 * `refreshFooter` :JSON : （可选项）上拉加载更多样式
	 */
	startVideoRecordActivity(params:txCameraRecord_startVideoRecordActivity_Params, callback?: (ret:JSON) => void):void

	/** 音乐列表事件监听*/ 
	musicListEventListener():void

	/**
	 * `刷新音乐列表数据`
	 * ========params==========
	 *
	 * `data` :Array : （可选项）音乐列表的数据源，**若不传或传空，仅收起下拉刷新组件**
	 */
	reloadData(params:txCameraRecord_reloadData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向音乐列表末端追加数据`
	 * ========params==========
	 *
	 * `data` :Array : 音乐列表的数据源，**若不传或传空，仅收起上拉加载组件**
	 */
	appendData(params:txCameraRecord_appendData_Params, callback?: (ret:JSON) => void):void

}
interface txCameraRecord_setLicence_Params {
	/**（必填项）从腾讯云平台获取的LicenseUrl。[参考腾讯官方申请说明](https://cloud.tencent.com/document/product/584/20333#1.-.E7.94.B3.E8.AF.B7.E6.B5.8B.E8.AF.95license)*/ 
	ugcLicenceUrl:string,

	/**（必填项）从腾讯云平台获取的Key。[参考腾讯官方申请说明](https://cloud.tencent.com/document/product/584/20333#1.-.E7.94.B3.E8.AF.B7.E6.B5.8B.E8.AF.95license)*/ 
	ugcKey:string,

}

interface txCameraRecord_startVideoRecordActivity_Params {
	/**（可选项）录制视频比例 （0 > 1:1 1 > 4:3 2 > 16:9）。*/ 
	aspectRatio?:number,

	/**（可选项）录制分辨率 （0 > 360_640 1 > 540_960 2 > 720_1280）。*/ 
	recordResolution?:number,

	/**（可选项）码率 （范围：600-4800）。*/ 
	biteRate?:number,

	/**（可选项）帧率 （范围：15-30）。*/ 
	fps?:number,

	/**（可选项）关键帧间隔 （范围：1-10）。*/ 
	gop?:number,

	/**（可选项）视频尾部水印logo（支持fs:// widget://路径）。*/ 
	logo?:string,

	/**（可选项）视频最短时长(秒)。*/ 
	minDuration?:number,

	/**（可选项）视频最长时间（秒）。*/ 
	maxDuration?:number,

	/**（可选项）是否前置摄像头 （true 前置 fasle 后置）*/ 
	isFront?:boolean,

	/**（可选项）是否显示美颜按钮 （true 显示 false 隐藏）*/ 
	isBeauty?:boolean,

	/**（可选项）是否显示音乐按钮 （true 显示 false 隐藏）*/ 
	isMusic?:boolean,

	/**（可选项）是否自定义音乐 （true 显示模块自带音乐列表 false 点击音乐按钮返回事件并关闭录制界面**[使用该模式缺点:编辑视频时无法选择音乐]**）*/ 
	isCustomMusic?:boolean,

	/**（可选项）录制时播放音乐，（支持fs:// widget://路径，安卓不支持widget路径）【备注：安卓设置音乐时会覆盖麦克风的语音】*/ 
	musicPath?:string,

	/**（可选项）下载按钮对应图片是否显示上传图片样式 （true 显示上传按钮样式 false 显示下载按钮样式）*/ 
	isUploadPic?:boolean,

	/**音乐列表的数据源，*/ 
	data:Array,

	/**（可选项）模块各部分的样式*/ 
	styles?:JSON,

	/**（可选项）下拉刷新样式*/ 
	refreshHeader?:JSON,

	/**（可选项）上拉加载更多样式*/ 
	refreshFooter?:JSON,

}

interface txCameraRecord_reloadData_Params {
	/**（可选项）音乐列表的数据源，**若不传或传空，仅收起下拉刷新组件***/ 
	data?:Array,

}

interface txCameraRecord_appendData_Params {
	/**音乐列表的数据源，**若不传或传空，仅收起上拉加载组件***/ 
	data:Array,

}

interface baiduOCR {
}
interface ciaYi {
}
interface indoorLocation {
}
interface aliPhoneAuth {
	/** 检查终端是否支持号码认证*/ 
	checkEnvAvailable():void

	/** 修改一键登录授权页主题*/ 
	setAuthUIConfig():void

	/** 一键登录唤起授权页并获取token*/ 
	getLoginToken(callback?: (ret:JSON) => void):void

	/** 返回默认上网卡运营商*/ 
	getCurrentCarrierName():void

	/** 退出登录授权页*/ 
	quitLoginPage():void

	/** 一键登录集成入口*/ 
	oneKeyLogin():void

	/** 接口检查及准备接口调用环境*/ 
	checkEnvAvailableWithComplete(callback?: (ret:JSON) => void):void

	/**
	 * `调用取号接口，加速授权页的弹起`
	 * ========params==========
	 *
	 * `timeout` :string : （可选项）延迟等待时间（默认3.0s）。例：5.0
	 */
	accelerateLoginPageWithTimeout(params:aliPhoneAuth_accelerateLoginPageWithTimeout_Params, callback?: (ret:JSON) => void):void

	/**
	 * `一键登录获取token`
	 * ========params==========
	 *
	 * `timeout` :string : （可选项）延迟等待时间（默认3.0s）。例：5.0
	 */
	getLoginTokenWithTimeout(params:aliPhoneAuth_getLoginTokenWithTimeout_Params, callback?: (ret:JSON) => void):void

	/** 一键登录注销登录页面*/ 
	cancelLoginVCAnimated():void

}
interface aliPhoneAuth_accelerateLoginPageWithTimeout_Params {
	/**（可选项）延迟等待时间（默认3.0s）。例：5.0*/ 
	timeout?:string,

}

interface aliPhoneAuth_getLoginTokenWithTimeout_Params {
	/**（可选项）延迟等待时间（默认3.0s）。例：5.0*/ 
	timeout?:string,

}

interface yunfan {
	/**
	 * `开启心跳`
	 * ========params==========
	 *
	 * `heartListen` :boolean : （可选）是否对心跳进行监听，true则返回心跳状态，false则仅开启心跳
	 */
	startHeart(params:yunfan_startHeart_Params, callback?: (ret:JSON) => void):void

	/** 关闭心跳*/ 
	stopHeart(callback?: (ret:JSON) => void):void

	/** 设置返回机器人时时数据*/ 
	requestStatusAlways(callback?: (ret:JSON) => void):void

	/** 设置返回机器人时时数据*/ 
	setMaxSpeed(callback?: (ret:JSON) => void):void

	/** 获取机器人参数；目前只有最大速度*/ 
	getParams(callback?: (ret:JSON) => void):void

	/** 关机*/ 
	shutDown(callback?: (ret:JSON) => void):void

	/** 开启网络状态监听，不实时回调，配合getNetStatus接口使用*/ 
	netListenerStart(callback?: (ret:JSON) => void):void

	/** 获取当前网络状态，调用netListenerStart 接口后才可以获取实时网络状态*/ 
	getNetStatus(callback?: (ret:JSON) => void):void

	/** 设置底部虚拟按键隐藏显示*/ 
	bottomTabSet():void

	/** 获取产品Id，在addEventListener回调中接收productId.详情请见*/ 
	getProductId(callback?: (ret:JSON) => void):void

	/** 机器人事件监听*/ 
	addEventListener():void

	/** 获取当前地盘状态*/ 
	getCheckresult(callback?: (ret:JSON) => void):void

	/** 开启人腿时时检测*/ 
	humanDetect(callback?: (ret:JSON) => void):void

	/** 设置灯带最大亮度，急停或者充电状态下此接口虽然返回成功但是设置不能生效*/ 
	setMaxLight(callback?: (ret:JSON) => void):void

	/** 获取当前电池状态*/ 
	getPowerStatus(callback?: (ret:JSON) => void):void

	/**
	 * `人脸识别，并判断人脸是否在屏幕中间，如果不在屏幕中间则机器人转身将屏幕`
	 * ========params==========
	 *
	 * `responseTime` :number : （可选）人脸识别结果返回频率，单位:秒（s）
	 *
	 * `rect` :JSON : （可选）摄像头显示框设置，不设置则不显示摄像头图像
	 */
	faceDetectStart(params:yunfan_faceDetectStart_Params, callback?: (ret:JSON) => void):void

	/** 停止人脸扫描（1.0.1版本无效）*/ 
	faceDetectStop(callback?: (ret:JSON) => void):void

	/**
	 * `添加face到库（1.0.1版本无效）`
	 * ========params==========
	 *
	 * `data` :string : 人脸YUV图片内容
	 *
	 * `name` :string : 人脸姓名
	 *
	 * `width` :number : 图片宽
	 *
	 * `height` :number : 图片高
	 */
	addFace(params:yunfan_addFace_Params, callback?: (ret:JSON) => void):void

	/**
	 * `把人脸从库中移除（1.0.1版本无效）`
	 * ========params==========
	 *
	 * `name` :string : 人脸姓名
	 */
	removeFace(params:yunfan_removeFace_Params, callback?: (ret:JSON) => void):void

	/**
	 * `激活麦克风（注意这里只是激活，不是唤醒）`
	 * ========params==========
	 *
	 * `beam` :number : 麦克编号
	 */
	setBeam(params:yunfan_setBeam_Params):void

	/**
	 * `唤醒麦克风（改方法的效果与唤醒词唤醒机器人的的效果一样）`
	 * ========params==========
	 *
	 * `beam` :number : 麦克编号
	 */
	wakeupBeam(params:yunfan_wakeupBeam_Params):void

	/**
	 * `讲话`
	 * ========params==========
	 *
	 * `text` :string : 要说的话
	 *
	 * `content` :string : text标签，用于区别speak回调中“开始说话” 和“结束说话”事件中所说的文字
	 *
	 * `rnd` :string : 指定text中数字的读法；（比如 rnd=txt 123读“一二三”，rnd=num时，读“一百二十三”）
	 */
	speak(params:yunfan_speak_Params):void

	/**
	 * `语音交互场景切换`
	 * ========params==========
	 *
	 * `scene` :string : 场景
	 */
	changeScene(params:yunfan_changeScene_Params):void

	/** 获取当前场景（调用该方法后，需要在addEventListener中处理getScene事件，该事件下的content即为当前场景值）*/ 
	requestScene():void

	/**
	 * `设置休眠时间`
	 * ========params==========
	 *
	 * `time` :number : 休眠时间
	 */
	setSleepTime(params:yunfan_setSleepTime_Params):void

	/** 设置休眠时间*/ 
	getSleepTime():void

	/**
	 * `切换发音人`
	 * ========params==========
	 *
	 * `voicer` :string : 发音人
	 *
	 * `speed` :number : 讲话速度
	 *
	 * `intonation` :number : 音调
	 */
	changeVoicer(params:yunfan_changeVoicer_Params):void

	/**
	 * `控制语音识别Toast是否显示`
	 * ========params==========
	 *
	 * `isShow` :boolean : 是否显示
	 */
	setServiceToastShow(params:yunfan_setServiceToastShow_Params):void

	/** 终止讲故事等语音播放*/ 
	sendStopAudio():void

	/** 过滤指定字节数的问题*/ 
	asrLengthFilter():void

	/** 切换语音交互模式 （重启后失效，在oneshot模式下唤醒后5秒内没有发出语音指令则会自动休眠）*/ 
	setInteractMode():void

	/** 语音播放报暂停*/ 
	pauseSpeak():void

	/** 语音播放报继续*/ 
	resumeSpeak():void

	/** 文本互动接口 （注意：使用该方法时确认机器处于唤醒状态，否则不会返回文本对应的语义结果）*/ 
	textWrite():void

	/** 休眠*/ 
	sleep(callback?: (ret:JSON) => void):void

	/** 开启播报监听*/ 
	startSpeakListen():void

	/** 引领接口，指定目的地 自动前往*/ 
	leadWay(callback?: (ret:JSON) => void):void

	/** 转动*/ 
	turnRound():void

	/** 开始巡游*/ 
	startStroll(callback?: (ret:JSON) => void):void

	/** 开始巡游*/ 
	stopStroll(callback?: (ret:JSON) => void):void

	/** 回充电桩*/ 
	backPower(callback?: (ret:JSON) => void):void

	/** 根据xy坐标移动*/ 
	moveByXY():void

	/** 根据点位名称移动*/ 
	moveByName(callback?: (ret:JSON) => void):void

	/** 放弃当前移动任务，进入待命状态*/ 
	cancleMove(callback?: (ret:JSON) => void):void

	/** 根据xy坐标移动*/ 
	moveByNames(callback?: (ret:JSON) => void):void

	/** 获取机器人当前全局状态，包括任务状态*/ 
	getRobotStatus(callback?: (ret:JSON) => void):void

	/** 直接控制机器人前进后退转动，单个指令持续0.5s，可持续发送命令使动作连贯*/ 
	robotControl(callback?: (ret:JSON) => void):void

	/** 连续旋转一定角度*/ 
	roundAngle(callback?: (ret:JSON) => void):void

	/** 位置矫正*/ 
	positionAdJust(callback?: (ret:JSON) => void):void

	/** 获取当前地图名称*/ 
	getMapInfo(callback?: (ret:JSON) => void):void

	/** 添加新的点位*/ 
	addMarker(callback?: (ret:JSON) => void):void

	/** 获取点位列表*/ 
	getMarkers(callback?: (ret:JSON) => void):void

	/** 获取点位个数*/ 
	getMarkersCount(callback?: (ret:JSON) => void):void

	/** 获取当前楼层除充电桩之外的所有点位*/ 
	getNormalMarkers(callback?: (ret:JSON) => void):void

	/** 获取当前楼层充电桩点位*/ 
	getPowerMarker(callback?: (ret:JSON) => void):void

	/** 获取map型点位列表*/ 
	getMapMarkers(callback?: (ret:JSON) => void):void

	/** 获取所有楼层地图*/ 
	getAllMap(callback?: (ret:JSON) => void):void

	/** 设置当前楼层地图*/ 
	setMapAndFloor(callback?: (ret:JSON) => void):void

	/** 时时监听运行速度*/ 
	setSpeedListener(callback?: (ret:JSON) => void):void

	/** 取消时时监听运行速度*/ 
	removeSpeedListener(callback?: (ret:JSON) => void):void

	/** 根据坐标插入点位*/ 
	addMarkerByXY(callback?: (ret:JSON) => void):void

	/** 按坐标矫正机器人位置*/ 
	positionAdJustByXY(callback?: (ret:JSON) => void):void

	/** 删除点位*/ 
	deleteMarker(callback?: (ret:JSON) => void):void

}
interface yunfan_startHeart_Params {
	/**（可选）是否对心跳进行监听，true则返回心跳状态，false则仅开启心跳*/ 
	heartListen?:boolean,

}

interface yunfan_faceDetectStart_Params {
	/**（可选）人脸识别结果返回频率，单位:秒（s）*/ 
	responseTime?:number,

	/**（可选）摄像头显示框设置，不设置则不显示摄像头图像*/ 
	rect?:JSON,

}

interface yunfan_addFace_Params {
	/**人脸YUV图片内容*/ 
	data:string,

	/**人脸姓名*/ 
	name:string,

	/**图片宽*/ 
	width:number,

	/**图片高*/ 
	height:number,

}

interface yunfan_removeFace_Params {
	/**人脸姓名*/ 
	name:string,

}

interface yunfan_setBeam_Params {
	/**麦克编号*/ 
	beam:number,

}

interface yunfan_wakeupBeam_Params {
	/**麦克编号*/ 
	beam:number,

}

interface yunfan_speak_Params {
	/**要说的话*/ 
	text:string,

	/**text标签，用于区别speak回调中“开始说话” 和“结束说话”事件中所说的文字*/ 
	content:string,

	/**指定text中数字的读法；（比如 rnd=txt 123读“一二三”，rnd=num时，读“一百二十三”）*/ 
	rnd:string,

}

interface yunfan_changeScene_Params {
	/**场景*/ 
	scene:string,

}

interface yunfan_setSleepTime_Params {
	/**休眠时间*/ 
	time:number,

}

interface yunfan_changeVoicer_Params {
	/**发音人*/ 
	voicer:string,

	/**讲话速度*/ 
	speed:number,

	/**音调*/ 
	intonation:number,

}

interface yunfan_setServiceToastShow_Params {
	/**是否显示*/ 
	isShow:boolean,

}

interface quPaiModule {
	/** 摄像头、麦克风权限验证*/ 
	permissionCheck():void

	/**
	 * `录制视频`
	 * ========params==========
	 *
	 * `resolutionMode` :number : （可选项）设置分辨率基数  1:360P 2:480P 3:540P 4:720P；
	 *
	 * `ratioMode` :number : （可选项）设置分辨率宽高比 1>3:4 2>1:1 3>9:16
	 *
	 * `recordMode` :number : （可选项）设置录制模式 1>AUTO 2>PRESS 3>TOUCH
	 *
	 * `beautyStatus` :boolean : （可选项）是否开启美颜
	 *
	 * `beautyLevel` :number : （可选项）设置美颜级别 0-100
	 *
	 * `isCameraBack` :boolean : （可选项）是否默认后置摄像头(true后置|false前置)
	 *
	 * `minDuration` :number : （必填项）最小时长(秒)
	 *
	 * `maxDuration` :number : （必填项）最大时长(秒)
	 *
	 * `videoQuality` :number : （可选项）设置输出视频质量 1:标清 2:高清 3:超清 4:超高清
	 *
	 * `gop` :number : （可选项）关键帧间隔
	 *
	 * `frameRate` :number : （可选项）帧率
	 *
	 * `isImport` :boolean : （可选项）是否显示导入按钮(true 显示, false 隐藏)
	 *
	 * `recordRotation` :number : （可选项）设置录制视频摄像头角度(0,90,180,270)
	 */
	record(params:quPaiModule_record_Params, callback?: (ret:JSON) => void):void

	/** 获取视频存放文件夹大小*/ 
	getCacheSize():void

	/** 清除存放视频文件夹所有视频*/ 
	clearCache():void

}
interface quPaiModule_record_Params {
	/**（可选项）设置分辨率基数  1:360P 2:480P 3:540P 4:720P；*/ 
	resolutionMode?:number,

	/**（可选项）设置分辨率宽高比 1>3:4 2>1:1 3>9:16*/ 
	ratioMode?:number,

	/**（可选项）设置录制模式 1>AUTO 2>PRESS 3>TOUCH*/ 
	recordMode?:number,

	/**（可选项）是否开启美颜*/ 
	beautyStatus?:boolean,

	/**（可选项）设置美颜级别 0-100*/ 
	beautyLevel?:number,

	/**（可选项）是否默认后置摄像头(true后置|false前置)*/ 
	isCameraBack?:boolean,

	/**（必填项）最小时长(秒)*/ 
	minDuration:number,

	/**（必填项）最大时长(秒)*/ 
	maxDuration:number,

	/**（可选项）设置输出视频质量 1:标清 2:高清 3:超清 4:超高清*/ 
	videoQuality?:number,

	/**（可选项）关键帧间隔*/ 
	gop?:number,

	/**（可选项）帧率*/ 
	frameRate?:number,

	/**（可选项）是否显示导入按钮(true 显示, false 隐藏)*/ 
	isImport?:boolean,

	/**（可选项）设置录制视频摄像头角度(0,90,180,270)*/ 
	recordRotation?:number,

}

interface agoraLive {
	/**
	 * `初始化引擎`
	 * ========params==========
	 *
	 * `appId` :string : 在声网注册账号创建app后获取的id
	 */
	init(params:agoraLive_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入通话频道`
	 * ========params==========
	 *
	 * `channelToken` :string : （可选项）本参数为可选项，可不传。Agora 为应用程序开发者额外签发一个AppCertificate，如果你已经启用了 App Certificate， 请务必使用 Token。关于如何获取 Token，详见[https://docs.agora.io/cn/2.3.1/product/Video/Agora%20Platform/key_native]
	 *
	 * `channelId` :string : 标识通话的频道名称，长度在64字节以内的字符串，以下为支持的字符集范围（共89个字     符）：a-z A-Z 0-9 空格 ! #$%& ()+, - :;<=. >? @[] ^_` {|} ~
	 *
	 * `uid` :number : (可选项) 用户ID，32位无符号整数。建议设置范围：1到(2^32-1)，并保证唯一性。如果不指定（即设为 0），SDK会自动分配一个，并在 on
	 */
	joinChannelByToken(params:agoraLive_joinChannelByToken_Params, callback?: (ret:JSON) => void):void

	/** 离开通话频道*/ 
	leaveChannel():void

	/**
	 * `更新 channelToken。若已启用 channelToken 机制，一段时间后 channelToken 会失效。当 errorListener 回调 109 时，重新获取 channelToken，需调用本接口更新 channelToken，否则无法和服务器建立连接。`
	 * ========params==========
	 *
	 * `channelToken` :string : 要更新的 channelToken
	 */
	renewToken(params:agoraLive_renewToken_Params, callback?: (ret:JSON) => void):void

	/**
	 * `静音/取消静音，该方法可用于允许/禁止往网络发送本地音频流`
	 * ========params==========
	 *
	 * `muted` :boolean : （可选项）是否静音
	 */
	muteLocalAudioStream(params:agoraLive_muteLocalAudioStream_Params, callback?: (ret:JSON) => void):void

	/**
	 * `静音所有远端用户/对所有远端用户取消静音，本方法用于允许/禁止播放远端用户的音频流。`
	 * ========params==========
	 *
	 * `muted` :boolean : （可选项）是否静音
	 */
	muteAllRemoteAudioStreams(params:agoraLive_muteAllRemoteAudioStreams_Params, callback?: (ret:JSON) => void):void

	/**
	 * `静音指定远端用户/对指定远端用户取消静音，本方法用于允许/禁止播放远端用户的音频流。`
	 * ========params==========
	 *
	 * `uid` :number : 指定用户id
	 *
	 * `muted` :boolean : （可选项）是否静音
	 */
	muteRemoteAudioStream(params:agoraLive_muteRemoteAudioStream_Params, callback?: (ret:JSON) => void):void

	/**
	 * `切换音频输出方式（扬声器、听筒）`
	 * ========params==========
	 *
	 * `enabled` :boolean : （可选项）是否为扬声器
	 */
	setEnableSpeakerphone(params:agoraLive_setEnableSpeakerphone_Params, callback?: (ret:JSON) => void):void

	/** 判断当前设备是否是扬声器状态*/ 
	isSpeakerphoneEnabled():void

	/**
	 * `设定扬声器音量`
	 * ========params==========
	 *
	 * `volume` :number : 音量，最小为 0，最大为 255
	 */
	setSpeakerphoneVolume(params:agoraLive_setSpeakerphoneVolume_Params, callback?: (ret:JSON) => void):void

	/**
	 * `在通话中进行录音，该接口需要在 joinChannel 之后调用。leaveChannel 时会自动停止录音`
	 * ========params==========
	 *
	 * `filePath` :string : 录音文件的路径（包含后缀，如：fs://agoraLive/audio.wav），要求本地路径协议：fs://
	 */
	startAudioRecording(params:agoraLive_startAudioRecording_Params, callback?: (ret:JSON) => void):void

	/** 停止录音*/ 
	stopAudioRecording(callback?: (ret:JSON) => void):void

	/** 获取当前的通话 ID*/ 
	getCallId():void

	/**
	 * `通话结束后为本次通话评分`
	 * ========params==========
	 *
	 * `callId` :string : 通过 getCallId 函数获取的通话 ID
	 *
	 * `rating` :number : 给通话的评分，取值范围：1-10
	 *
	 * `description` :string : （可选项）评分本次通话的描述，小于 800 字节
	 */
	rate(params:agoraLive_rate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通话结束后对本次通话质量的投诉`
	 * ========params==========
	 *
	 * `callId` :string : 通过 getCallId 函数获取的通话 ID
	 *
	 * `description` :string : （可选项）本次通话投诉的描述，小于 800 字节
	 */
	complain(params:agoraLive_complain_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听耳机插拔事件，在加入通话前调用。若不监听，则拔掉耳机时不会自动停止播放声音。**iOS 不支持本接口，拔掉耳机即自动停止声音外放**`
	 * ========params==========
	 *
	 * `monitor` :boolean : 是否开启/关闭监听耳机插拔事件
	 */
	monitorHeadsetEvent(params:agoraLive_monitorHeadsetEvent_Params):void

	/**
	 * `监听蓝牙耳机事件，在加入通话前调用。**iOS 不支持本接口，拔掉耳机即自动停止声音外放**`
	 * ========params==========
	 *
	 * `monitor` :boolean : 是否开启/关闭监听蓝牙耳机插拔事件
	 */
	monitorBluetoothHeadsetEvent(params:agoraLive_monitorBluetoothHeadsetEvent_Params):void

	/** 打开音频 该方法设置内部引擎为启用状态，在 leaveChannel 后仍然有效。，**android支持***/ 
	enableAudio():void

	/**
	 * `启用说话者音量提示`
	 * ========params==========
	 *
	 * `interval` :number : 指定音量提示的时间间隔，建议设置大于 200 毫秒。小于等于零时表示禁用音量提示功能，大于零时表示设置的提示间隔，单位为毫秒
	 *
	 * `smooth` :number : （可选项）平滑系数
	 */
	enableAudioVolumeIndication(params:agoraLive_enableAudioVolumeIndication_Params, callback?: (ret:JSON) => void):void

	/**
	 * `启用内置的加密功能。`
	 * ========params==========
	 *
	 * `secret` :string : 加密密码
	 */
	setEncryptionSecret(params:agoraLive_setEncryptionSecret_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置内置的加密方案。`
	 * ========params==========
	 *
	 * `encryptionMode` :string : 加密方式
	 */
	setEncryptionMode(params:agoraLive_setEncryptionMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `启动服务端录音功能`
	 * ========params==========
	 *
	 * `recordingKey` :string : 录音KEY
	 */
	startRecordingService(params:agoraLive_startRecordingService_Params, callback?: (ret:JSON) => void):void

	/**
	 * `停止服务端录音功能`
	 * ========params==========
	 *
	 * `recordingKey` :string : 录音KEY
	 */
	stopRecordingService(params:agoraLive_stopRecordingService_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置频道通话模式。 Agora 引擎需知道应用程序的使用场景(例如群聊模式或主播模式)，从而使用不同的优化手段。`
	 * ========params==========
	 *
	 * `profile` :string : 指定频道的通话模式
	 */
	setChannelProfile(params:agoraLive_setChannelProfile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开启客户端本地混音。指定本地音频文件来和麦克风采集的音频流进行混音和替换(用音频文件替换麦克风采集的音频流)，可以通过参数选择是否让对方听到本地播放的音频和指定循环播放的次数。`
	 * ========params==========
	 *
	 * `filePath` :string : 需要混音的本地音频文件名和文件路径，支持格式：mp3，aac，m4a，3gp，wav，flac
	 *
	 * `loopback` :boolean : （可选项）是否只有本地可以听到混音或替换后的音频流
	 *
	 * `replace` :boolean : （可选项）是否将音频文件内容替换本地录音的音频流
	 *
	 * `cycle` :number : （可选项）指定音频文件循环播放的次数，为-1时表示无限循环
	 */
	startAudioMixing(params:agoraLive_startAudioMixing_Params, callback?: (ret:JSON) => void):void

	/** 停止客户端本地混音*/ 
	stopAudioMixing():void

	/**
	 * `特有属性设置`
	 * ========params==========
	 *
	 * `options` :string : 将特有参数组装为 json 字符串设置给 Agroa 引擎
	 */
	setParameters(params:agoraLive_setParameters_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取 Agora 引擎特有属性值`
	 * ========params==========
	 *
	 * `parameter` :string : sdk options in json format
	 *
	 * `args` :string : sdk options in json format
	 */
	getParameters(params:agoraLive_getParameters_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听警告信息`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动警告监听
	 */
	warningListener(params:agoraLive_warningListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听错误信息`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动错误监听
	 */
	errorListener(params:agoraLive_errorListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `声音质量监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动声音质量监听
	 */
	audioQualityListener(params:agoraLive_audioQualityListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `声音音量监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动声音音量监听
	 */
	audioVolumeListener(params:agoraLive_audioVolumeListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户加入频道监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动用户加入频道监听
	 */
	userJoinedListener(params:agoraLive_userJoinedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `再次进入频道监听。`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用再次进入频道监听
	 */
	rejoinChannelListener(params:agoraLive_rejoinChannelListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户离开频道监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用户离开频道监听
	 */
	userOfflineListener(params:agoraLive_userOfflineListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户静音监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用户静音监听
	 */
	userMuteAudioListener(params:agoraLive_userMuteAudioListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `统计数据监听，每两秒触发一次`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启统计数据监听
	 */
	rtcStatsListener(params:agoraLive_rtcStatsListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `报告网络质量监听。不在通话中时，不定期触发，向应用程序上报当前网络连接质量`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用报告网络质量监听
	 */
	lastmileQualityListener(params:agoraLive_lastmileQualityListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `网络连接中断监听。**iOS 平台不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用网络连接中断监听
	 */
	connectionInterruptedListener(params:agoraLive_connectionInterruptedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `网络连接丢失监听。客户端和服务器失去了网络连接，并且尝试自动重连一段时间（默认 10 秒）`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用网络连接丢失监听
	 */
	connectionLostListener(params:agoraLive_connectionLostListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `网络质量监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用报告网络质量监听
	 */
	networkQualityListener(params:agoraLive_networkQualityListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置 agora 引擎的输出 log 文件。`
	 * ========params==========
	 *
	 * `filePath` :string : 日志文件的全路径（包含后缀，如：fs://agoraLive/log.txt），要求本地路径协议：fs://
	 */
	setLogFile(params:agoraLive_setLogFile_Params, callback?: (ret:JSON) => void):void

	/** 关闭音频 该方法设置内部引擎为启用状态，在 leaveChannel 后仍然有效。，**android支持***/ 
	disableAudio():void

	/**
	 * `初始化视频（本地、远程）区域`
	 * ========params==========
	 *
	 * `uid` :number : 用户id，当为 0 时表示打开本地视频播放区域
	 *
	 * `rect` :JSON : （可选项）视频区域的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	initVideoRect(params:agoraLive_initVideoRect_Params):void

	/** 该方法用于开启视频模式。可以在加入频道前或者通话中调用，在加入频道前调用，则自动开*/ 
	enableVideo():void

	/** 该方法用于关闭视频，开启纯音频模式。可以在加入频道前或者通话中调用，在加入频道前调*/ 
	disableVideo():void

	/** 该方法用于启动本地视频预览。在开启预览前，必须先调用 setupLocalVideo 设置预览窗口及*/ 
	startPreview():void

	/** 该方法用于停止本地视频预览*/ 
	stopPreview():void

	/**
	 * `将指定视频窗口置为最上层显示`
	 * ========params==========
	 *
	 * `uid` :number : 指定用户id
	 */
	bringToFront(params:agoraLive_bringToFront_Params):void

	/** 添加视频窗口的点击事件*/ 
	addVideoClickListener():void

	/**
	 * `该方法设置视频编码属性(Profile)。每个属性对应一套视频参数，如分辨率、帧率、码率等。`
	 * ========params==========
	 *
	 * `profile` :string : 视频属性
	 *
	 * `swapWidthAndHeight` :number : 是否交换宽和高
	 */
	setVideoProfile(params:agoraLive_setVideoProfile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `该方法设置本地视频显示信息,通常在初始化后调用该方法进行本地视频设置，然后再加入频道。`
	 * ========params==========
	 *
	 * `renderMode` :string : 视频显示模式
	 *
	 * `uid` :number : 本地用户id，与 joinchannel 方法中的 uid 保持一致
	 */
	setupLocalVideo(params:agoraLive_setupLocalVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `该方法绑定远程用户和显示视图，即设定 uid 指定的用户用哪个视图显示。调用该接口时需要`
	 * ========params==========
	 *
	 * `renderMode` :string : 视频显示模式
	 *
	 * `uid` :number : 远端用户id
	 */
	setupRemoteVideo(params:agoraLive_setupRemoteVideo_Params, callback?: (ret:JSON) => void):void

	/** 该方法用于在前置/后置摄像头间切换*/ 
	switchCamera(callback?: (ret:JSON) => void):void

	/**
	 * `禁用/启用本地视频功能。该方法用于只看不发的视频场景。该方法不需要本地有摄像头`
	 * ========params==========
	 *
	 * `enabled` :boolean : 是否启用本地视频
	 */
	enableLocalVideo(params:agoraLive_enableLocalVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停/恢复发送本地视频流。该方法用于允许/禁止往网络发送本地视频流`
	 * ========params==========
	 *
	 * `muted` :boolean : 是否禁止发送本地视频流
	 */
	muteLocalVideoStream(params:agoraLive_muteLocalVideoStream_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停/恢复所有人视频流。本方法用于允许/禁止播放所有人的视频流`
	 * ========params==========
	 *
	 * `muted` :boolean : 是否停止播放接收到的所有视频流
	 */
	muteAllRemoteVideoStreams(params:agoraLive_muteAllRemoteVideoStreams_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停/恢复指定远端视频流。本方法用于允许/禁止播放指定远端视频流。`
	 * ========params==========
	 *
	 * `uid` :number : 用户id
	 *
	 * `muted` :boolean : 是否停止播放接收到的视频流
	 */
	muteRemoteVideoStream(params:agoraLive_muteRemoteVideoStream_Params, callback?: (ret:JSON) => void):void

	/**
	 * `提示第一帧本地视频画面已经显示在屏幕上`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用第一帧本地视频画面已经显示在屏幕上的回调监听
	 */
	firstLocalVideoFrameListener(params:agoraLive_firstLocalVideoFrameListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `第一帧远程视频显示在视图回调监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用第一帧远程视频显示在视图回调监听
	 */
	firstRemoteVideoFrameListener(params:agoraLive_firstRemoteVideoFrameListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `远端视频接收解码回调，收到第一帧远程视频流并解码成功时，触发此调用`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用远端视频接收解码回调
	 */
	firstRemoteVideoDecodedListener(params:agoraLive_firstRemoteVideoDecodedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `其他用户停止/重启视频回调，**iOS 暂不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用其他用户停止/重启视频回调
	 */
	userMuteVideoListener(params:agoraLive_userMuteVideoListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `其他用户启用/关闭视频回调，**iOS 暂不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用其他用户启用/关闭视频回调
	 */
	userEnableVideoListener(params:agoraLive_userEnableVideoListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `本地视频统计回调，报告更新本地视频统计信息，该回调函数每两秒触发一次`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用本地视频统计回调
	 */
	localVideoStatListener(params:agoraLive_localVideoStatListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `远端视频统计回调，报告更新远端视频统计信息，该回调函数每两秒触发一次。`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用远端视频统计回调
	 */
	remoteVideoStatListener(params:agoraLive_remoteVideoStatListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `摄像头启用回调，提示已成功打开摄像头，可以开始捕获视频。如果摄像头打开失败，可在 onError()中处理相应错误。 **iOS 平台暂不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用摄像头启用回调
	 */
	cameraReadyListener(params:agoraLive_cameraReadyListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `视频功能停止回调。 **iOS 平台暂不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用视频功能停止回调
	 */
	videoStoppedListener(params:agoraLive_videoStoppedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `接收到对方数据流消息的回调`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用接收到对方数据流消息的回调
	 */
	streamMessageListener(params:agoraLive_streamMessageListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `接收对方数据流消息错误的回调`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用接收对方数据流消息错误的回调
	 */
	streamMessageErrorListener(params:agoraLive_streamMessageErrorListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `伴奏已播放结束的回调，**iOS 平台暂不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用伴奏已播放结束的回调
	 */
	audioMixingFinishedListener(params:agoraLive_audioMixingFinishedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `在加入频道前， 用户需要通过本方法设置观众或主播模式（默认）。`
	 * ========params==========
	 *
	 * `role` :string : 直播的用户角色
	 *
	 * `permissionKey` :string : （可选项）permission key of role change
	 */
	setClientRole(params:agoraLive_setClientRole_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭视频预览区域`
	 * ========params==========
	 *
	 * `uid` :number : 指定用户id
	 */
	closePreview(params:agoraLive_closePreview_Params):void

	/**
	 * `重设视频预览区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频区域的位置及尺寸
	 *
	 * `animation` :boolean : 重设过程中是否带0.3秒的动画
	 *
	 * `uid` :number : 指定用户id
	 */
	resetVideoRect(params:agoraLive_resetVideoRect_Params):void

	/**
	 * `设置远程视频流质量`
	 * ========params==========
	 *
	 * `uid` :number : 指定用户id
	 *
	 * `type` :string : 视频质量
	 */
	setRemoteVideoStream(params:agoraLive_setRemoteVideoStream_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开与Web SDK的互通`
	 * ========params==========
	 *
	 * `enabled` :boolean : 是否已打开与Agora Web SDK的互通:
	 */
	enableWebSdkInteroperability(params:agoraLive_enableWebSdkInteroperability_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置音频参数和应用场景`
	 * ========params==========
	 *
	 * `profile` :string : 音频参数
	 *
	 * `scenario` :string : 应用场景
	 */
	setAudioProfile(params:agoraLive_setAudioProfile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `提供基础变声功能`
	 * ========params==========
	 *
	 * `pitch` :number : 频率
	 */
	setLocalVoicePitch(params:agoraLive_setLocalVoicePitch_Params, callback?: (ret:JSON) => void):void

	/**
	 * `提供调节耳返音量功能`
	 * ========params==========
	 *
	 * `volume` :number : 音量
	 */
	setInEarMonitoringVolume(params:agoraLive_setInEarMonitoringVolume_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置本地语音音效均衡`
	 * ========params==========
	 *
	 * `bandFrequency` :number : 取值范围是 [0-9]，分别代表音效的 10 个 band 的中心频率 [31，62，125，250，500，1k，2k，4k，8k，16k]Hz
	 *
	 * `bandGain` :number : 每个 band 的增益，单位是 dB，每一个值的范围是 [-15，15]
	 */
	setLocalVoiceEqualization(params:agoraLive_setLocalVoiceEqualization_Params):void

	/**
	 * `设置本地音效混响`
	 * ========params==========
	 *
	 * `reverbKey` :number : 混响音效 Key。该方法共有 5 个混响音效 Key，分别如 value 栏列出
	 *
	 * `value` :number : 各混响音效 Key 所对应的值：
	 */
	setLocalVoiceReverb(params:agoraLive_setLocalVoiceReverb_Params):void

	/**
	 * `修改默认的语音路由,该方法只在纯音频模式下工作，在有视频的模式下不工作。该方法需要在 joinChannel 前设置，否则不生效。`
	 * ========params==========
	 *
	 * `defaultToSpeaker` :boolean : 默认路由更改
	 *
	 * `ret` :JSON : null
	 */
	setDefaultAudioRouteToSpeakerphone(params:agoraLive_setDefaultAudioRouteToSpeakerphone_Params):void

	/**
	 * `该方法打开或关闭耳返监听功能。`
	 * ========params==========
	 *
	 * `enabled` :boolean : 打开或关闭耳返监听功能
	 *
	 * `ret` :JSON : null
	 */
	enableInEarMonitoring(params:agoraLive_enableInEarMonitoring_Params):void

	/**
	 * `在加入频道前， 用户需要通过本方法设置观众或主播模式。`
	 * ========params==========
	 *
	 * `role` :number : 直播的用户角色
	 */
	setClientRoleOrAndroid(params:agoraLive_setClientRoleOrAndroid_Params, callback?: (ret:JSON) => void):void

	/** 设置美颜*/ 
	setBeautyEffectOptions():void

	/** 该方法释放 Agora SDK 使用的所有资源。有些应用程序只在用户需要时才进行语音通话，不需要时则将资源释放出来用于其他操作，该方法对这类程序可能比较有用。 只要调用了 destroy(), 用户将无法再使用和回调该 SDK 内的其它方法。如需再次使用通信功能，必须重新初始化。*/ 
	destroy():void

}
interface agoraLive_init_Params {
	/**在声网注册账号创建app后获取的id*/ 
	appId:string,

}

interface agoraLive_joinChannelByToken_Params {
	/**（可选项）本参数为可选项，可不传。Agora 为应用程序开发者额外签发一个AppCertificate，如果你已经启用了 App Certificate， 请务必使用 Token。关于如何获取 Token，详见[https://docs.agora.io/cn/2.3.1/product/Video/Agora%20Platform/key_native]*/ 
	channelToken?:string,

	/**标识通话的频道名称，长度在64字节以内的字符串，以下为支持的字符集范围（共89个字     符）：a-z A-Z 0-9 空格 ! #$%& ()+, - :;<=. >? @[] ^_` {|} ~*/ 
	channelId:string,

	/**(可选项) 用户ID，32位无符号整数。建议设置范围：1到(2^32-1)，并保证唯一性。如果不指定（即设为 0），SDK会自动分配一个，并在 on*/ 
	uid?:number,

}

interface agoraLive_renewToken_Params {
	/**要更新的 channelToken*/ 
	channelToken:string,

}

interface agoraLive_muteLocalAudioStream_Params {
	/**（可选项）是否静音*/ 
	muted?:boolean,

}

interface agoraLive_muteAllRemoteAudioStreams_Params {
	/**（可选项）是否静音*/ 
	muted?:boolean,

}

interface agoraLive_muteRemoteAudioStream_Params {
	/**指定用户id*/ 
	uid:number,

	/**（可选项）是否静音*/ 
	muted?:boolean,

}

interface agoraLive_setEnableSpeakerphone_Params {
	/**（可选项）是否为扬声器*/ 
	enabled?:boolean,

}

interface agoraLive_setSpeakerphoneVolume_Params {
	/**音量，最小为 0，最大为 255*/ 
	volume:number,

}

interface agoraLive_startAudioRecording_Params {
	/**录音文件的路径（包含后缀，如：fs://agoraLive/audio.wav），要求本地路径协议：fs://*/ 
	filePath:string,

}

interface agoraLive_rate_Params {
	/**通过 getCallId 函数获取的通话 ID*/ 
	callId:string,

	/**给通话的评分，取值范围：1-10*/ 
	rating:number,

	/**（可选项）评分本次通话的描述，小于 800 字节*/ 
	description?:string,

}

interface agoraLive_complain_Params {
	/**通过 getCallId 函数获取的通话 ID*/ 
	callId:string,

	/**（可选项）本次通话投诉的描述，小于 800 字节*/ 
	description?:string,

}

interface agoraLive_monitorHeadsetEvent_Params {
	/**是否开启/关闭监听耳机插拔事件*/ 
	monitor:boolean,

}

interface agoraLive_monitorBluetoothHeadsetEvent_Params {
	/**是否开启/关闭监听蓝牙耳机插拔事件*/ 
	monitor:boolean,

}

interface agoraLive_enableAudioVolumeIndication_Params {
	/**指定音量提示的时间间隔，建议设置大于 200 毫秒。小于等于零时表示禁用音量提示功能，大于零时表示设置的提示间隔，单位为毫秒*/ 
	interval:number,

	/**（可选项）平滑系数*/ 
	smooth?:number,

}

interface agoraLive_setEncryptionSecret_Params {
	/**加密密码*/ 
	secret:string,

}

interface agoraLive_setEncryptionMode_Params {
	/**加密方式*/ 
	encryptionMode:string,

}

interface agoraLive_startRecordingService_Params {
	/**录音KEY*/ 
	recordingKey:string,

}

interface agoraLive_stopRecordingService_Params {
	/**录音KEY*/ 
	recordingKey:string,

}

interface agoraLive_setChannelProfile_Params {
	/**指定频道的通话模式*/ 
	profile:string,

}

interface agoraLive_startAudioMixing_Params {
	/**需要混音的本地音频文件名和文件路径，支持格式：mp3，aac，m4a，3gp，wav，flac*/ 
	filePath:string,

	/**（可选项）是否只有本地可以听到混音或替换后的音频流*/ 
	loopback?:boolean,

	/**（可选项）是否将音频文件内容替换本地录音的音频流*/ 
	replace?:boolean,

	/**（可选项）指定音频文件循环播放的次数，为-1时表示无限循环*/ 
	cycle?:number,

}

interface agoraLive_setParameters_Params {
	/**将特有参数组装为 json 字符串设置给 Agroa 引擎*/ 
	options:string,

}

interface agoraLive_getParameters_Params {
	/**sdk options in json format*/ 
	parameter:string,

	/**sdk options in json format*/ 
	args:string,

}

interface agoraLive_warningListener_Params {
	/**（可选项）是否启动警告监听*/ 
	enable?:boolean,

}

interface agoraLive_errorListener_Params {
	/**（可选项）是否启动错误监听*/ 
	enable?:boolean,

}

interface agoraLive_audioQualityListener_Params {
	/**（可选项）是否启动声音质量监听*/ 
	enable?:boolean,

}

interface agoraLive_audioVolumeListener_Params {
	/**（可选项）是否启动声音音量监听*/ 
	enable?:boolean,

}

interface agoraLive_userJoinedListener_Params {
	/**（可选项）是否启动用户加入频道监听*/ 
	enable?:boolean,

}

interface agoraLive_rejoinChannelListener_Params {
	/**（可选项）是否启用再次进入频道监听*/ 
	enable?:boolean,

}

interface agoraLive_userOfflineListener_Params {
	/**（可选项）是否启用户离开频道监听*/ 
	enable?:boolean,

}

interface agoraLive_userMuteAudioListener_Params {
	/**（可选项）是否启用户静音监听*/ 
	enable?:boolean,

}

interface agoraLive_rtcStatsListener_Params {
	/**（可选项）是否启统计数据监听*/ 
	enable?:boolean,

}

interface agoraLive_lastmileQualityListener_Params {
	/**（可选项）是否启用报告网络质量监听*/ 
	enable?:boolean,

}

interface agoraLive_connectionInterruptedListener_Params {
	/**（可选项）是否启用网络连接中断监听*/ 
	enable?:boolean,

}

interface agoraLive_connectionLostListener_Params {
	/**（可选项）是否启用网络连接丢失监听*/ 
	enable?:boolean,

}

interface agoraLive_networkQualityListener_Params {
	/**（可选项）是否启用报告网络质量监听*/ 
	enable?:boolean,

}

interface agoraLive_setLogFile_Params {
	/**日志文件的全路径（包含后缀，如：fs://agoraLive/log.txt），要求本地路径协议：fs://*/ 
	filePath:string,

}

interface agoraLive_initVideoRect_Params {
	/**用户id，当为 0 时表示打开本地视频播放区域*/ 
	uid:number,

	/**（可选项）视频区域的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface agoraLive_bringToFront_Params {
	/**指定用户id*/ 
	uid:number,

}

interface agoraLive_setVideoProfile_Params {
	/**视频属性*/ 
	profile:string,

	/**是否交换宽和高*/ 
	swapWidthAndHeight:number,

}

interface agoraLive_setupLocalVideo_Params {
	/**视频显示模式*/ 
	renderMode:string,

	/**本地用户id，与 joinchannel 方法中的 uid 保持一致*/ 
	uid:number,

}

interface agoraLive_setupRemoteVideo_Params {
	/**视频显示模式*/ 
	renderMode:string,

	/**远端用户id*/ 
	uid:number,

}

interface agoraLive_enableLocalVideo_Params {
	/**是否启用本地视频*/ 
	enabled:boolean,

}

interface agoraLive_muteLocalVideoStream_Params {
	/**是否禁止发送本地视频流*/ 
	muted:boolean,

}

interface agoraLive_muteAllRemoteVideoStreams_Params {
	/**是否停止播放接收到的所有视频流*/ 
	muted:boolean,

}

interface agoraLive_muteRemoteVideoStream_Params {
	/**用户id*/ 
	uid:number,

	/**是否停止播放接收到的视频流*/ 
	muted:boolean,

}

interface agoraLive_firstLocalVideoFrameListener_Params {
	/**（可选项）是否启用第一帧本地视频画面已经显示在屏幕上的回调监听*/ 
	enable?:boolean,

}

interface agoraLive_firstRemoteVideoFrameListener_Params {
	/**（可选项）是否启用第一帧远程视频显示在视图回调监听*/ 
	enable?:boolean,

}

interface agoraLive_firstRemoteVideoDecodedListener_Params {
	/**（可选项）是否启用远端视频接收解码回调*/ 
	enable?:boolean,

}

interface agoraLive_userMuteVideoListener_Params {
	/**（可选项）是否启用其他用户停止/重启视频回调*/ 
	enable?:boolean,

}

interface agoraLive_userEnableVideoListener_Params {
	/**（可选项）是否启用其他用户启用/关闭视频回调*/ 
	enable?:boolean,

}

interface agoraLive_localVideoStatListener_Params {
	/**（可选项）是否启用本地视频统计回调*/ 
	enable?:boolean,

}

interface agoraLive_remoteVideoStatListener_Params {
	/**（可选项）是否启用远端视频统计回调*/ 
	enable?:boolean,

}

interface agoraLive_cameraReadyListener_Params {
	/**（可选项）是否启用摄像头启用回调*/ 
	enable?:boolean,

}

interface agoraLive_videoStoppedListener_Params {
	/**（可选项）是否启用视频功能停止回调*/ 
	enable?:boolean,

}

interface agoraLive_streamMessageListener_Params {
	/**（可选项）是否启用接收到对方数据流消息的回调*/ 
	enable?:boolean,

}

interface agoraLive_streamMessageErrorListener_Params {
	/**（可选项）是否启用接收对方数据流消息错误的回调*/ 
	enable?:boolean,

}

interface agoraLive_audioMixingFinishedListener_Params {
	/**（可选项）是否启用伴奏已播放结束的回调*/ 
	enable?:boolean,

}

interface agoraLive_setClientRole_Params {
	/**直播的用户角色*/ 
	role:string,

	/**（可选项）permission key of role change*/ 
	permissionKey?:string,

}

interface agoraLive_closePreview_Params {
	/**指定用户id*/ 
	uid:number,

}

interface agoraLive_resetVideoRect_Params {
	/**（可选项）视频区域的位置及尺寸*/ 
	rect?:JSON,

	/**重设过程中是否带0.3秒的动画*/ 
	animation:boolean,

	/**指定用户id*/ 
	uid:number,

}

interface agoraLive_setRemoteVideoStream_Params {
	/**指定用户id*/ 
	uid:number,

	/**视频质量*/ 
	type:string,

}

interface agoraLive_enableWebSdkInteroperability_Params {
	/**是否已打开与Agora Web SDK的互通:*/ 
	enabled:boolean,

}

interface agoraLive_setAudioProfile_Params {
	/**音频参数*/ 
	profile:string,

	/**应用场景*/ 
	scenario:string,

}

interface agoraLive_setLocalVoicePitch_Params {
	/**频率*/ 
	pitch:number,

}

interface agoraLive_setInEarMonitoringVolume_Params {
	/**音量*/ 
	volume:number,

}

interface agoraLive_setLocalVoiceEqualization_Params {
	/**取值范围是 [0-9]，分别代表音效的 10 个 band 的中心频率 [31，62，125，250，500，1k，2k，4k，8k，16k]Hz*/ 
	bandFrequency:number,

	/**每个 band 的增益，单位是 dB，每一个值的范围是 [-15，15]*/ 
	bandGain:number,

}

interface agoraLive_setLocalVoiceReverb_Params {
	/**混响音效 Key。该方法共有 5 个混响音效 Key，分别如 value 栏列出*/ 
	reverbKey:number,

	/**各混响音效 Key 所对应的值：*/ 
	value:number,

}

interface agoraLive_setDefaultAudioRouteToSpeakerphone_Params {
	/**默认路由更改*/ 
	defaultToSpeaker:boolean,

	/**null*/ 
	ret:JSON,

}

interface agoraLive_enableInEarMonitoring_Params {
	/**打开或关闭耳返监听功能*/ 
	enabled:boolean,

	/**null*/ 
	ret:JSON,

}

interface agoraLive_setClientRoleOrAndroid_Params {
	/**直播的用户角色*/ 
	role:number,

}

interface rongCloudCS {
	/**
	 * `连接融云 IM 服务器，进行后续各种方法操作前务必要先调用此方法`
	 * ========params==========
	 *
	 * `token` :string : 从服务端获取的用户身份令牌（Token）
	 */
	connect(params:rongCloudCS_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `断开连接`
	 * ========params==========
	 *
	 * `receivePush` :boolean : （可选项）断开后是否接收 Push
	 */
	disconnect(params:rongCloudCS_disconnect_Params):void

	/**
	 * `打开聊天界面`
	 * ========params==========
	 *
	 * `targetId` :string : 客服 Id
	 *
	 * `title` :string : (可选项)顶部导航栏标题
	 *
	 * `userInfo` :JSON : (可选项)用户信息
	 */
	showConversation(params:rongCloudCS_showConversation_Params):void

	/**
	 * `获取某一会话的最新消息记录`
	 * ========params==========
	 *
	 * `targetId` :string : 客服 Id
	 *
	 * `count` :number : （可选项）要获取的消息数量
	 */
	getLatestMessages(params:rongCloudCS_getLatestMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话的历史消息记录`
	 * ========params==========
	 *
	 * `targetId` :string : 客服 Id
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息
	 *
	 * `count` :number : （可选项）要获取的消息数量
	 */
	getHistoryMessages(params:rongCloudCS_getHistoryMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清空某一会话的所有聊天消息记录`
	 * ========params==========
	 *
	 * `targetId` :string : 客服 Id
	 */
	clearMessages(params:rongCloudCS_clearMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取未读消息数量`
	 * ========params==========
	 *
	 * `targetId` :string : 客服 Id
	 */
	getUnreadCount(params:rongCloudCS_getUnreadCount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除某一会话的消息未读状态`
	 * ========params==========
	 *
	 * `targetId` :string : 客服 Id
	 */
	clearMessagesUnreadStatus(params:rongCloudCS_clearMessagesUnreadStatus_Params, callback?: (ret:JSON) => void):void

}
interface rongCloudCS_connect_Params {
	/**从服务端获取的用户身份令牌（Token）*/ 
	token:string,

}

interface rongCloudCS_disconnect_Params {
	/**（可选项）断开后是否接收 Push*/ 
	receivePush?:boolean,

}

interface rongCloudCS_showConversation_Params {
	/**客服 Id*/ 
	targetId:string,

	/**(可选项)顶部导航栏标题*/ 
	title?:string,

	/**(可选项)用户信息*/ 
	userInfo?:JSON,

}

interface rongCloudCS_getLatestMessages_Params {
	/**客服 Id*/ 
	targetId:string,

	/**（可选项）要获取的消息数量*/ 
	count?:number,

}

interface rongCloudCS_getHistoryMessages_Params {
	/**客服 Id*/ 
	targetId:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息*/ 
	oldestMessageId:number,

	/**（可选项）要获取的消息数量*/ 
	count?:number,

}

interface rongCloudCS_clearMessages_Params {
	/**客服 Id*/ 
	targetId:string,

}

interface rongCloudCS_getUnreadCount_Params {
	/**客服 Id*/ 
	targetId:string,

}

interface rongCloudCS_clearMessagesUnreadStatus_Params {
	/**客服 Id*/ 
	targetId:string,

}

interface miniQuPai {
	/** 摄像头、麦克风权限验证*/ 
	permissionCheck(callback?: (ret:JSON) => void):void

	/**
	 * `录制视频`
	 * ========params==========
	 *
	 * `minDuration` :number : （必填项）允许拍摄的最小时长；
	 *
	 * `maxDuration` :number : （必填项）允许拍摄的最大时长，时长越大，产生的视频文件越大；
	 *
	 * `videoWidth` :number : （必填项）安卓：输出视频的尺寸>宽、iOS：预览窗口宽度；
	 *
	 * `videoHeight` :number : （必填项）安卓：输出视频的尺寸>高、iOS：预览窗口高度；
	 *
	 * `isBackCamera` :boolean : （可选项）是否默认后置摄像头: true 后置摄像头 false 前置摄像头
	 */
	record(params:miniQuPai_record_Params, callback?: (ret:JSON) => void):void

	/** 获取视频存放文件夹大小*/ 
	getCacheSize(callback?: (ret:JSON) => void):void

	/** 清除存放视频文件夹所有视频*/ 
	clearCache(callback?: (ret:JSON) => void):void

}
interface miniQuPai_record_Params {
	/**（必填项）允许拍摄的最小时长；*/ 
	minDuration:number,

	/**（必填项）允许拍摄的最大时长，时长越大，产生的视频文件越大；*/ 
	maxDuration:number,

	/**（必填项）安卓：输出视频的尺寸>宽、iOS：预览窗口宽度；*/ 
	videoWidth:number,

	/**（必填项）安卓：输出视频的尺寸>高、iOS：预览窗口高度；*/ 
	videoHeight:number,

	/**（可选项）是否默认后置摄像头: true 后置摄像头 false 前置摄像头*/ 
	isBackCamera?:boolean,

}

interface adTracking {
	/** 初始化，只有在SDK正确初始化后，SDK的其他方法才可以使用*/ 
	init(callback?: (ret:JSON) => void):void

	/** 账号注册成功*/ 
	onRegister(callback?: (ret:JSON) => void):void

	/** 登录成功*/ 
	onLogin(callback?: (ret:JSON) => void):void

	/** 通过Deep Link唤起应用*/ 
	onReceiveDeepLink(callback?: (ret:JSON) => void):void

	/** 通过Deep Link唤起应用*/ 
	onPay(callback?: (ret:JSON) => void):void

	/** 自定义事件*/ 
	onCustEvent(callback?: (ret:JSON) => void):void

}
interface googleMap {
	/**
	 * `打开谷歌地图`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `center` :number : （可选项）打开地图时设置的中心点经纬度
	 *
	 * `zoomLevel` :number : （可选项）设置谷歌地图缩放等级，取值范围：1-21级（Android）、getZoomExtremity接口获取（iOS）
	 *
	 * `showUserLocation` :boolean : （可选项）是否在地图上显示用户位置
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:googleMap_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭谷歌地图*/ 
	close():void

	/** 显示谷歌地图*/ 
	show():void

	/** 隐藏谷歌地图*/ 
	hide():void

	/**
	 * `设置地图类型`
	 * ========params==========
	 *
	 * `type` :string : 指定的地图的类型
	 */
	setType(params:googleMap_setType_Params):void

	/**
	 * `设置地图是否显示定位按钮`
	 * ========params==========
	 *
	 * `locationButton` :boolean : 是否显示定位按钮
	 */
	setLocationButton(params:googleMap_setLocationButton_Params):void

	/**
	 * `设置地图是否显示指南针`
	 * ========params==========
	 *
	 * `compassButton` :boolean : 是否显示指南针
	 */
	setCompassButton(params:googleMap_setCompassButton_Params):void

	/**
	 * `设置地图是否显示交通路况`
	 * ========params==========
	 *
	 * `traffic` :boolean : 是否显示交通路况
	 */
	setTraffic(params:googleMap_setTraffic_Params):void

	/**
	 * `设置地图是否显示建筑`
	 * ========params==========
	 *
	 * `buildings` :boolean : 是否显示建筑
	 */
	setBuildings(params:googleMap_setBuildings_Params):void

	/**
	 * `重设地图的显示区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 */
	setRect(params:googleMap_setRect_Params):void

	/**
	 * `获取当前位置信息，若要支持后台定位需[配置 [config.xml](/APICloud/技术专题/app-config-manual) 文件 location 字段](//docs.apicloud.com/APICloud/技术专题/app-config-manual#14-2)，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `autoStop` :boolean : （可选项）获取到位置信息后是否自动停止定位
	 *
	 * `locationType` :string : （可选项）获取定位的方式 (ios不支持)
	 *
	 * `accuracy` :string : （可选项）定位精度，仅支持 iOS 端
	 *
	 * `filter` :number : （可选项）位置更新所需的最小距离（单位米），autoStop 为 true 时，此参数有效，仅支持 iOS 端
	 */
	getLocation(params:googleMap_getLocation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取当前位置信息，若要支持后台定位需[配置 [config.xml](/APICloud/技术专题/app-config-manual) 文件 location 字段](//docs.apicloud.com/APICloud/技术专题/app-config-manual#14-2)，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `autoStop` :boolean : （可选项）获取到位置信息后是否自动停止定位
	 */
	getLocationForAPI(params:googleMap_getLocationForAPI_Params, callback?: (ret:JSON) => void):void

	/** 停止定位*/ 
	stopLocation():void

	/** 停止定位*/ 
	stopLocationForAPI():void

	/**
	 * `根据地址查找经纬度，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `city` :string : 所要搜索的地址所在的城市，cityname（中文或中文全拼）、citycode、adcode
	 *
	 * `address` :string : 完整的地址信息
	 */
	getCoordsFromName(params:googleMap_getCoordsFromName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据经纬度查找地址信息，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `lon` :number : 经度
	 *
	 * `lat` :number : 纬度
	 */
	getNameFromCoords(params:googleMap_getNameFromCoords_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取地图两点之间的距离，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `start` :JSON : 起点经纬度
	 *
	 * `end` :JSON : 终点经纬度
	 */
	getDistance(params:googleMap_getDistance_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否在地图上显示用户位置`
	 * ========params==========
	 *
	 * `isShow` :boolean : （可选项）是否显示用户位置
	 */
	showUserLocation(params:googleMap_showUserLocation_Params):void

	/**
	 * `根据经纬度设置谷歌地图中心点`
	 * ========params==========
	 *
	 * `coords` :JSON : （可选项）中心点的经纬度
	 *
	 * `animation` :boolean : （可选项）设置地图的中心点时，是否带动画效果
	 */
	setCenter(params:googleMap_setCenter_Params):void

	/** 获取谷歌地图中心点坐标*/ 
	getCenter():void

	/** 获取谷歌地图缩放最大、最小值*/ 
	getZoomExtremity():void

	/**
	 * `设置谷歌地图缩放等级`
	 * ========params==========
	 *
	 * `level` :number : （可选项）地图比例尺级别，取值范围：1-21级（Android）、通过getZoomExtremity接口获得（iOS）
	 *
	 * `animation` :boolean : （可选项）地图缩放时，是否带动画效果
	 */
	setZoomLevel(params:googleMap_setZoomLevel_Params):void

	/** 获取地图缩放级别取值范围：1-21级（Android）、通过getZoomExtremity接口获得（iOS）*/ 
	getZoomLevel():void

	/**
	 * `监听地图相关事件`
	 * ========params==========
	 *
	 * `name` :string : 地图相关事件名称
	 */
	addEventListener(params:googleMap_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `停止监听地图相关事件`
	 * ========params==========
	 *
	 * `name` :string : 地图相关事件名称
	 */
	removeEventListener(params:googleMap_removeEventListener_Params):void

	/**
	 * `在地图上添加标注信息，标注大小为 icons 内第一张图片大小的二分之一。**图标中轴线的下边缘点为坐标基准点**`
	 * ========params==========
	 *
	 * `annotations` :Array : 图标标注信息组成的数组
	 *
	 * `icons` :Array : （可选项）指定的标注图标路径组成的数组，若包含多张图片，则此标注显示为多图联动的 gif ，要求本地路径（fs://、widget://）（仅支持ios）
	 *
	 * `icon` :string : （可选项）指定的标注图标路径，要求本地路径（fs://、widget://）（仅支持android）
	 *
	 * `draggable` :boolean : （可选项）所添加的标注是否可被拖动
	 *
	 * `timeInterval` :number : （可选项）若添加的标注为动态图，则本参数表示动态图循环播放一次的时间，单位为秒（s），否则本参数无效（仅支持ios）
	 */
	addAnnotations(params:googleMap_addAnnotations_Params):void

	/** 添加对地图上标注的监听*/ 
	addAnnotationListener(callback?: (ret:JSON) => void):void

	/**
	 * `获取指定标注的经纬度`
	 * ========params==========
	 *
	 * `id` :number : 指定的标注 id
	 */
	getAnnotationCoords(params:googleMap_getAnnotationCoords_Params, callback?: (ret:JSON) => void):void

	/** 设置某个已添加标注的经纬度*/ 
	setAnnotationCoords():void

	/** 设置某个已添加标注的图标*/ 
	setAnnotationIcon():void

	/**
	 * `移除制定标注`
	 * ========params==========
	 *
	 * `id` :Array : 指定的标注 id 组成的数组，若不传或传空，则移除所有标注
	 */
	removeAnnotations(params:googleMap_removeAnnotations_Params):void

	/**
	 * `设置某个已添加标注的气泡（点击标注弹出的信息窗口），`
	 * ========params==========
	 *
	 * `id` :number : 指定的标注 id
	 *
	 * `content` :JSON : 气泡内容文本
	 *
	 * `caption` :JSON : (可选项)气泡配图
	 */
	setBubble(params:googleMap_setBubble_Params):void

	/**
	 * `搜索路线方案，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `id` :number : 搜索的路线 id ，drawRoute 时使用
	 *
	 * `origin` :string : 路线计算起点的地址、纬度/经度文本值
	 *
	 * `destination` :string : 路线计算终点的地址、纬度/经度文本值
	 *
	 * `mode` :string : （可选项）指定在计算路线时使用的交通模式
	 *
	 * `waypoints` :string : （可选项）指定一组路径点。路径点通过使路线经过指定位置来改变路线。路径点以纬度/经度坐标或将接受地理编码的地址形式指定。路径点不适用于公交路线。您可以利用路径点计算途经附加位置的路线，在这种情况下，返回的路线将包括在每个已知路径点处的停靠站。可以地址、纬度/经度坐标提供一个或多个以管道字符 (|) 分隔的位置。对于请求中的每个路径点，路线响应均会在 legs 数组中加入一个额外条目，提供该段旅程的对应详情。如果您想在不添加停靠站的情况下利用路径点影响路线，请为路径点添加 via: 前缀。带有 via: 前缀的路径点不会向 legs 数组添加条目，而是将旅程路线改为途经提供的路径点。
	 *
	 * `alternatives` :boolean : （可选项）设置为 true 时，可在响应中提供多个备选路线。请注意，提供备选路线可能会增加服务器的响应时间。
	 *
	 * `avoid` :string : （可选项）指定一个或多个首选公共交通模式。只能为公共交通路线指定此参数
	 */
	searchRoute(params:googleMap_searchRoute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `在地图上显示指定路线，**调用本接口前，必须保证已经调用过接口 open 和 searchRoute**`
	 * ========params==========
	 *
	 * `id` :number : 路线 id （searchRoute 时传的 id），removeRoute 时使用此 id 移除路线
	 *
	 * `index` :number : （可选项）路线方案的索引，在 searchRoute 时返回的多个路线方案组成的数组中的索引
	 *
	 * `styles` :JSON : 路线样式设置
	 */
	drawRoute(params:googleMap_drawRoute_Params):void

	/**
	 * `移除指定 id ，指定索引的路线`
	 * ========params==========
	 *
	 * `ids` :Array : （可选项）所要移除的 id（数字）和路径索引组成的数组
	 */
	removeRoute(params:googleMap_removeRoute_Params):void

	/**
	 * `在地图上添加折线`
	 * ========params==========
	 *
	 * `geodesic` :boolean : 何时true，将此折线边缘渲染为测地线。测地线段沿着地球表面沿着最短路径行进，并且可以在具有墨卡托投影的地图上显示为曲线。非测地线段在地图上绘制为直线。
	 *
	 * `styles` :JSON : （可选项）折线的样式
	 *
	 * `points` :Array : 折线的多个点组成的数组
	 */
	addLine(params:googleMap_addLine_Params):void

	/**
	 * `在地图上添加多边形`
	 * ========params==========
	 *
	 * `geodesic` :boolean : 何时true，将此折线边缘渲染为测地线。测地线段沿着地球表面沿着最短路径行进，并且可以在具有墨卡托投影的地图上显示为曲线。非测地线段在地图上绘制为直线。
	 *
	 * `styles` :JSON : （可选项）多边形的样式
	 *
	 * `points` :Array : 多边形的各个点组成的数组
	 */
	addPolygon(params:googleMap_addPolygon_Params):void

	/**
	 * `在地图上添加圆形`
	 * ========params==========
	 *
	 * `center` :JSON : 圆形中心点的经纬度
	 *
	 * `radius` :number : 圆形的半径
	 *
	 * `styles` :JSON : （可选项）圆形的样式
	 */
	addCircle(params:googleMap_addCircle_Params):void

	/**
	 * `在地图上添加地面叠加层，地面叠加层是地图上与纬度/经度坐标相关联的叠加层，因此当您拖动或缩放地图时它们会移动`
	 * ========params==========
	 *
	 * `icon` :number : （可选项）透明度，取值范围0-1
	 */
	addGroundOverlay(params:googleMap_addGroundOverlay_Params):void

	/** 清除图层(Android清除的是addGroundOverlay添加的数据 )*/ 
	removeLayer():void

}
interface googleMap_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）打开地图时设置的中心点经纬度*/ 
	center?:number,

	/**（可选项）设置谷歌地图缩放等级，取值范围：1-21级（Android）、getZoomExtremity接口获取（iOS）*/ 
	zoomLevel?:number,

	/**（可选项）是否在地图上显示用户位置*/ 
	showUserLocation?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface googleMap_setType_Params {
	/**指定的地图的类型*/ 
	type:string,

}

interface googleMap_setLocationButton_Params {
	/**是否显示定位按钮*/ 
	locationButton:boolean,

}

interface googleMap_setCompassButton_Params {
	/**是否显示指南针*/ 
	compassButton:boolean,

}

interface googleMap_setTraffic_Params {
	/**是否显示交通路况*/ 
	traffic:boolean,

}

interface googleMap_setBuildings_Params {
	/**是否显示建筑*/ 
	buildings:boolean,

}

interface googleMap_setRect_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

}

interface googleMap_getLocation_Params {
	/**（可选项）获取到位置信息后是否自动停止定位*/ 
	autoStop?:boolean,

	/**（可选项）获取定位的方式 (ios不支持)*/ 
	locationType?:string,

	/**（可选项）定位精度，仅支持 iOS 端*/ 
	accuracy?:string,

	/**（可选项）位置更新所需的最小距离（单位米），autoStop 为 true 时，此参数有效，仅支持 iOS 端*/ 
	filter?:number,

}

interface googleMap_getLocationForAPI_Params {
	/**（可选项）获取到位置信息后是否自动停止定位*/ 
	autoStop?:boolean,

}

interface googleMap_getCoordsFromName_Params {
	/**所要搜索的地址所在的城市，cityname（中文或中文全拼）、citycode、adcode*/ 
	city:string,

	/**完整的地址信息*/ 
	address:string,

}

interface googleMap_getNameFromCoords_Params {
	/**经度*/ 
	lon:number,

	/**纬度*/ 
	lat:number,

}

interface googleMap_getDistance_Params {
	/**起点经纬度*/ 
	start:JSON,

	/**终点经纬度*/ 
	end:JSON,

}

interface googleMap_showUserLocation_Params {
	/**（可选项）是否显示用户位置*/ 
	isShow?:boolean,

}

interface googleMap_setCenter_Params {
	/**（可选项）中心点的经纬度*/ 
	coords?:JSON,

	/**（可选项）设置地图的中心点时，是否带动画效果*/ 
	animation?:boolean,

}

interface googleMap_setZoomLevel_Params {
	/**（可选项）地图比例尺级别，取值范围：1-21级（Android）、通过getZoomExtremity接口获得（iOS）*/ 
	level?:number,

	/**（可选项）地图缩放时，是否带动画效果*/ 
	animation?:boolean,

}

interface googleMap_addEventListener_Params {
	/**地图相关事件名称*/ 
	name:string,

}

interface googleMap_removeEventListener_Params {
	/**地图相关事件名称*/ 
	name:string,

}

interface googleMap_addAnnotations_Params {
	/**图标标注信息组成的数组*/ 
	annotations:Array,

	/**（可选项）指定的标注图标路径组成的数组，若包含多张图片，则此标注显示为多图联动的 gif ，要求本地路径（fs://、widget://）（仅支持ios）*/ 
	icons?:Array,

	/**（可选项）指定的标注图标路径，要求本地路径（fs://、widget://）（仅支持android）*/ 
	icon?:string,

	/**（可选项）所添加的标注是否可被拖动*/ 
	draggable?:boolean,

	/**（可选项）若添加的标注为动态图，则本参数表示动态图循环播放一次的时间，单位为秒（s），否则本参数无效（仅支持ios）*/ 
	timeInterval?:number,

}

interface googleMap_getAnnotationCoords_Params {
	/**指定的标注 id*/ 
	id:number,

}

interface googleMap_removeAnnotations_Params {
	/**指定的标注 id 组成的数组，若不传或传空，则移除所有标注*/ 
	id:Array,

}

interface googleMap_setBubble_Params {
	/**指定的标注 id*/ 
	id:number,

	/**气泡内容文本*/ 
	content:JSON,

	/**(可选项)气泡配图*/ 
	caption?:JSON,

}

interface googleMap_searchRoute_Params {
	/**搜索的路线 id ，drawRoute 时使用*/ 
	id:number,

	/**路线计算起点的地址、纬度/经度文本值*/ 
	origin:string,

	/**路线计算终点的地址、纬度/经度文本值*/ 
	destination:string,

	/**（可选项）指定在计算路线时使用的交通模式*/ 
	mode?:string,

	/**（可选项）指定一组路径点。路径点通过使路线经过指定位置来改变路线。路径点以纬度/经度坐标或将接受地理编码的地址形式指定。路径点不适用于公交路线。您可以利用路径点计算途经附加位置的路线，在这种情况下，返回的路线将包括在每个已知路径点处的停靠站。可以地址、纬度/经度坐标提供一个或多个以管道字符 (|) 分隔的位置。对于请求中的每个路径点，路线响应均会在 legs 数组中加入一个额外条目，提供该段旅程的对应详情。如果您想在不添加停靠站的情况下利用路径点影响路线，请为路径点添加 via: 前缀。带有 via: 前缀的路径点不会向 legs 数组添加条目，而是将旅程路线改为途经提供的路径点。*/ 
	waypoints?:string,

	/**（可选项）设置为 true 时，可在响应中提供多个备选路线。请注意，提供备选路线可能会增加服务器的响应时间。*/ 
	alternatives?:boolean,

	/**（可选项）指定一个或多个首选公共交通模式。只能为公共交通路线指定此参数*/ 
	avoid?:string,

}

interface googleMap_drawRoute_Params {
	/**路线 id （searchRoute 时传的 id），removeRoute 时使用此 id 移除路线*/ 
	id:number,

	/**（可选项）路线方案的索引，在 searchRoute 时返回的多个路线方案组成的数组中的索引*/ 
	index?:number,

	/**路线样式设置*/ 
	styles:JSON,

}

interface googleMap_removeRoute_Params {
	/**（可选项）所要移除的 id（数字）和路径索引组成的数组*/ 
	ids?:Array,

}

interface googleMap_addLine_Params {
	/**何时true，将此折线边缘渲染为测地线。测地线段沿着地球表面沿着最短路径行进，并且可以在具有墨卡托投影的地图上显示为曲线。非测地线段在地图上绘制为直线。*/ 
	geodesic:boolean,

	/**（可选项）折线的样式*/ 
	styles?:JSON,

	/**折线的多个点组成的数组*/ 
	points:Array,

}

interface googleMap_addPolygon_Params {
	/**何时true，将此折线边缘渲染为测地线。测地线段沿着地球表面沿着最短路径行进，并且可以在具有墨卡托投影的地图上显示为曲线。非测地线段在地图上绘制为直线。*/ 
	geodesic:boolean,

	/**（可选项）多边形的样式*/ 
	styles?:JSON,

	/**多边形的各个点组成的数组*/ 
	points:Array,

}

interface googleMap_addCircle_Params {
	/**圆形中心点的经纬度*/ 
	center:JSON,

	/**圆形的半径*/ 
	radius:number,

	/**（可选项）圆形的样式*/ 
	styles?:JSON,

}

interface googleMap_addGroundOverlay_Params {
	/**（可选项）透明度，取值范围0-1*/ 
	icon?:number,

}

interface UDYhy {
}
interface anyRTCModule {
	/**
	 * `初始化sdk（只需要调用一次）`
	 * ========params==========
	 *
	 * `developerId` :string : （必须项）开发者ID。
	 *
	 * `token` :string : （必须项）每个项目的API Key都有对应的一个API Token，相当于项目的秘钥，用户对Token进行重置，客户端和服务器端使用AnyRTC服务时，同样需要提供这该Token。
	 *
	 * `appKey` :string : （必须项）API KEY相当于项目的识别号，系统自动生成用户不可更改，客户端和服务器端都通过这个Key来使用AnyRTC服务。
	 *
	 * `appId` :string : （必须项）创建app的app id。
	 */
	init(params:anyRTCModule_init_Params):void

	/**
	 * `观看直播`
	 * ========params==========
	 *
	 * `anyrtcid` :string : （必须项）直播频道id，需要获取发布直播人员的直播频道id。
	 *
	 * `userid` :string : （必须项）观看直播用户id。
	 *
	 * `username` :string : （必须项）观看直播人员的名称。
	 */
	guestLive(params:anyRTCModule_guestLive_Params, callback?: (ret:JSON) => void):void

}
interface anyRTCModule_init_Params {
	/**（必须项）开发者ID。*/ 
	developerId:string,

	/**（必须项）每个项目的API Key都有对应的一个API Token，相当于项目的秘钥，用户对Token进行重置，客户端和服务器端使用AnyRTC服务时，同样需要提供这该Token。*/ 
	token:string,

	/**（必须项）API KEY相当于项目的识别号，系统自动生成用户不可更改，客户端和服务器端都通过这个Key来使用AnyRTC服务。*/ 
	appKey:string,

	/**（必须项）创建app的app id。*/ 
	appId:string,

}

interface anyRTCModule_guestLive_Params {
	/**（必须项）直播频道id，需要获取发布直播人员的直播频道id。*/ 
	anyrtcid:string,

	/**（必须项）观看直播用户id。*/ 
	userid:string,

	/**（必须项）观看直播人员的名称。*/ 
	username:string,

}

interface XLPlayer {
	/**
	 * `打开播放器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `path` :string : 视频路径，支持网络和本地（fs://和widget://）路径
	 *
	 * `imagePath` :string : 视频加载时的背景图片路径，支持网络和本地（fs://和widget://）路径
	 */
	open(params:XLPlayer_open_Params, callback?: (ret:JSON) => void):void

	/** 添加监听*/ 
	addEventListener():void

	/** 移除添加监听*/ 
	removeEventListener():void

	/** 暂停*/ 
	pause():void

	/** 播放*/ 
	play():void

	/** 停止播放*/ 
	close():void

	/** 关闭播放器*/ 
	closeView():void

	/** 获取当前状态*/ 
	getState():void

	/** 获取当前状态*/ 
	getDuration():void

	/** 获取当前播放的时间*/ 
	getPosition():void

	/** 设置播放位置*/ 
	setPosition():void

	/** 获取视频宽度*/ 
	getVideoWidth():void

	/** 获取视频高度*/ 
	getVideoHeight():void

	/** 全屏*/ 
	full():void

	/** 取消全屏*/ 
	cancleFull():void

}
interface XLPlayer_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**视频路径，支持网络和本地（fs://和widget://）路径*/ 
	path:string,

	/**视频加载时的背景图片路径，支持网络和本地（fs://和widget://）路径*/ 
	imagePath:string,

}

interface logCrash {
	/** 注册监听事件*/ 
	listenCrash():void

	/** 测试报错信息，调用就会报错或闪退*/ 
	testlog():void

}
interface talkFunLive {
	/** 初始化云直播*/ 
	initCloudLive():void

	/** 通过用户id登录*/ 
	loginByUserId():void

	/** 通过token登录*/ 
	loginByToken():void

	/** 取消登录，iOS端无此接口*/ 
	cancelLogin():void

	/** 退出登录*/ 
	logout():void

	/** 获取用户信息*/ 
	getUserInfo():void

	/** 判断是否已登录*/ 
	isLogin():void

	/** 加载课程*/ 
	loadCourses():void

	/** 进入课程检测是否允许进入直播（仅android支持）*/ 
	checkAllowedToLive():void

	/** 设置白板*/ 
	setWhiteBoardView():void

	/** 设置画笔颜色*/ 
	setPaintColor():void

	/** 设置文字大小*/ 
	setTextSize():void

	/** 涂鸦类型*/ 
	setDrawType():void

	/** 下一页*/ 
	nextPage():void

	/** 上一页*/ 
	prePage():void

	/** 跳转到指定页*/ 
	gotoPage():void

	/** 添加白板*/ 
	addWhiteBoard():void

	/** 撤销*/ 
	undoDrawable():void

	/** 还原*/ 
	redoDrawable():void

	/** 清除当前页涂鸦*/ 
	clearPage():void

	/** 向上滚动*/ 
	scrollUp():void

	/** 向下滚动*/ 
	scrollDown():void

	/** 设置是否可以滚动*/ 
	setScroll():void

	/** 数据清除*/ 
	destoryWhiteBoard():void

	/** 获取当前页数*/ 
	getCurrentPage():void

	/** 获取总页数*/ 
	getTotalPage():void

	/** 发送操作命令，仅支持 Android 端*/ 
	startSendOperateCommand():void

	/** 停止发送操作命令，仅支持 Android 端*/ 
	stopSendOperateCommand():void

	/** 添加文档数据，仅支持 Android 端*/ 
	addPageDatas():void

	/** 画笔的粗细，仅支持 Android 端*/ 
	setStrokeSize():void

	/** 获取user information(已经登录才有）*/ 
	getUserFolder():void

	/** 获取ID（登录过才有）（仅iOS支持）*/ 
	getID():void

	/** 根据参数创建课程*/ 
	createCurriculum():void

	/** 验证账号是否在直播（仅iOS支持）*/ 
	verifyLivingOrNot():void

	/** 启动课程直播（仅iOS支持）*/ 
	launch():void

	/** 蒋白板置为最上层显示（仅iOS支持）*/ 
	whiteboardBringToFront():void

	/** 设置line颜色（仅iOS支持，android参考setPaintColor接口）*/ 
	setLineRgbColor():void

	/** 获取当前索引（仅iOS支持，android参考getCurrentPage）*/ 
	getCurrentIndex():void

	/** 获取当前子页码（仅iOS支持）*/ 
	getCurrentSubPage():void

	/** 获取当前子页索引（仅iOS支持）*/ 
	getCurrentSubIndex():void

	/** 关闭白板*/ 
	closeWhiteboard():void

	/** 隐藏白板*/ 
	hideWhiteboard():void

	/** 显示白板*/ 
	showWhiteboard():void

	/** 是否能够撤退（仅iOS支持）*/ 
	canUndo():void

	/** 是否能够前进（仅iOS支持）*/ 
	canRedo():void

	/** 插入白板,根据当前的索引,再添加在后面（仅iOS支持，android参考addWhiteBoard接口）*/ 
	insertWhiteboard():void

	/** 清除所有页码的涂鸦（仅iOS支持，android参考clearPage接口）*/ 
	clearData():void

	/** 传入指令  执行操作，仅支持 iOS 端*/ 
	execute():void

	/** 清除缓存*/ 
	clearCache():void

	/** 获取缓存大小*/ 
	getCacheSize(callback?: (ret:JSON) => void):void

	/** 获取是否美颜*/ 
	getBeauty(callback?: (ret:JSON) => void):void

	/**
	 * `设置是否开启美颜`
	 * ========params==========
	 *
	 * `isOn` :boolean : 是否开启美颜
	 */
	setBeauty(params:talkFunLive_setBeauty_Params):void

	/** 获取是否开启涂鸦状态*/ 
	getGraffiti(callback?: (ret:JSON) => void):void

	/**
	 * `设置涂鸦开关状态`
	 * ========params==========
	 *
	 * `isOn` :boolean : 是否开启涂鸦
	 */
	setGraffiti(params:talkFunLive_setGraffiti_Params):void

	/** 获取 自动上传开关 状态*/ 
	getAutoUpload(callback?: (ret:JSON) => void):void

	/**
	 * `设置 自动上传开关  状态`
	 * ========params==========
	 *
	 * `isOn` :boolean : 是否开启自动上传
	 */
	setAutoUpload(params:talkFunLive_setAutoUpload_Params):void

	/** 获取文档列表*/ 
	getDocumentListOfCourse(callback?: (ret:JSON) => void):void

	/** 根据PPT课件ID获取相应课件信息（仅iOS支持）*/ 
	getDocument():void

	/** 根据PPT课件ID加载课件   清空原文档与清空白板（仅iOS支持）*/ 
	addDocument():void

	/** 根据PPT课件ID加载课件   清空原文档,保留白板*/ 
	insertDocument():void

	/** 扫描本地文件接口（仅android支持）*/ 
	scanLocalFile():void

	/** 停止扫描本地文件接口（仅android支持）*/ 
	stopScanLocalFile():void

	/** 获取已扫描本地文件接口（仅android支持）*/ 
	getScanDocList():void

	/** 提供courseID和文件文件的地址 上传图片或文档，返回上传结果*/ 
	upload():void

	/** 轮询文件处理进度*/ 
	processProgress():void

	/** 停止所有文档上传和转换（仅android支持 ）*/ 
	stopAll():void

	/** 取消上传某个文档*/ 
	cancelUpload():void

	/** 是否正在上传或转换文档（仅android支持）*/ 
	isUploadOrCovering():void

	/** 发送消息（仅android支持）*/ 
	sendMessage():void

	/** 设置更新聊天内容监听（仅android支持）*/ 
	setUpdateChatListener():void

	/** 连接socket（仅android支持）*/ 
	socketConnect():void

	/** 断开socket（仅android支持）*/ 
	socketDisconnect():void

	/** 判断socket是否已连接（仅android支持）*/ 
	socketIsConnected():void

	/** 发送消息（仅android支持）*/ 
	socketEmit():void

	/** 注册指令事件监听（仅android支持）*/ 
	setSocketEmitListener():void

	/** 取消指令事件监听（仅android支持）*/ 
	cancleSocketEmitListener():void

	/** 设置socket连接监听（仅android支持）*/ 
	setSocketConnectListener():void

	/**
	 * `初始化大班直播管理器`
	 * ========params==========
	 *
	 * `courseID` :string : 课程ID（仅iOS支持）
	 *
	 * `courseName` :string : 课程名（仅iOS支持）
	 *
	 * `startTimeDetai` :string : 课程ID（仅iOS支持）
	 *
	 * `endTimeDetail` :string : 课程名（仅iOS支持）
	 *
	 * `rect` :JSON : 视频播放器的窗口位置及大小（仅android支持）
	 *
	 * `fixedOn` :string : 附着frame或window的名称（仅android支持）
	 *
	 * `fixed` :boolean : 是否固定（仅android支持）
	 */
	initLiveManager(params:talkFunLive_initLiveManager_Params, callback?: (ret:JSON) => void):void

	/** 销毁大班直播管理器*/ 
	shutdownManager():void

	/** 获取大班直播管理器信息（仅iOS支持）*/ 
	getLiveManagerInfo():void

	/**
	 * `配置大班直播管理器（仅iOS支持）`
	 * ========params==========
	 *
	 * `micGain` :number : （可选项）麦克风音量增益因子，初始化时默认为1.0，推流开始后可以修改，其取值范围为[0, 1]（仅iOS支持）
	 *
	 * `zoomScale` :number : （可选项）对原始视频进行缩放的比例，初始化时默认为1，推流开始后可以修改，取值范围为(1, 3]
	 *
	 * `beauty` :boolean : （可选项）是否设置美颜
	 *
	 * `saveLocalVideo` :boolean : （可选项）视频录制 开关
	 *
	 * `autorotate` :boolean : （可选项）自动旋转(这里只支持 left 变 right  portrait 变 portraitUpsideDown)
	 */
	setLiveManagerInfo(params:talkFunLive_setLiveManagerInfo_Params, callback?: (ret:JSON) => void):void

	/** 设置大班直播的画面（仅iOS支持，android在[initLiveManager](#initLiveManager)接口配置）*/ 
	setLiveView():void

	/** 关闭大班直播的画面*/ 
	closeLiveView():void

	/** 隐藏大班直播的画面*/ 
	hideLiveView():void

	/** 显示大班直播的画面*/ 
	showLiveView():void

	/** 蒋大班直播画面置为最上层显示（仅iOS支持）*/ 
	liveViewBringToFront():void

	/** 设置大班直播视频流状态改变的监听*/ 
	streamStatusChangedListener():void

	/** 设置大班直播状态的监听*/ 
	liveStatusChangedListener():void

	/** 设置大班直播延时的监听（仅iOS支持）*/ 
	liveDelayListener():void

	/** 设置大班直播的丢包的监听（仅iOS支持）*/ 
	livePacketLossListener():void

	/**
	 * `蒋大班直播画面置为前置摄像头（仅iOS支持）`
	 * ========params==========
	 *
	 * `isFront` :string : 是否启用前置摄像头
	 */
	setLiveCameraFront(params:talkFunLive_setLiveCameraFront_Params):void

	/** 切换摄像头（仅android支持）*/ 
	swapCamera():void

	/** 获取直播流帧率（仅android支持）*/ 
	getSendFrameRate():void

	/** 获取是否静音（仅android支持）*/ 
	isMute():void

	/** 设置是否静音（仅android支持）*/ 
	setIsMute():void

	/** 获取是否已关闭摄像头（仅android支持）*/ 
	isCloseCamera():void

	/** 设置屏幕方向（仅android支持）*/ 
	setOrientation():void

	/** 获取屏幕方向（仅android支持）*/ 
	getOrientation():void

	/** 获取焦距缩放百分比（仅android支持）*/ 
	getZoomPercent():void

	/** 设备授权相关的接口（仅iOS支持）*/ 
	applyPermission():void

	/** 开始直播*/ 
	startLive():void

	/** 开启摄像头*/ 
	cameraStart():void

	/** 关闭摄像头*/ 
	cameraStop():void

	/** 暂停直播*/ 
	pauseLive():void

	/** 恢复直播*/ 
	resumeLive():void

	/** 停止直播*/ 
	stopLive():void

	/**
	 * `触发某个事件(有回调)（仅iOS支持）`
	 * ========params==========
	 *
	 * `event` :string : 事件
	 *
	 * `params` :JSON : 参数
	 */
	liveEmit(params:talkFunLive_liveEmit_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置问答监听事件`
	 * ========params==========
	 *
	 * `event` :string : 事件，取值范围参考欢拓云官方文档：[http://open.talk-fun.com/docs/CloudLive-iOS/TalkfunLive/question.html](http://open.talk-fun.com/docs/CloudLive-iOS/TalkfunLive/question.html)。（仅iOS支持）
	 */
	liveOnEvent(params:talkFunLive_liveOnEvent_Params, callback?: (ret:JSON) => void):void

	/**
	 * `大班问答发送回复消息（仅android支持）`
	 * ========params==========
	 *
	 * `replyId` :string : 提问id
	 *
	 * `content` :string : 回复内容
	 */
	bQASendMessage(params:talkFunLive_bQASendMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消监听事件`
	 * ========params==========
	 *
	 * `event` :string : 事件
	 */
	liveOffEvent(params:talkFunLive_liveOffEvent_Params, callback?: (ret:JSON) => void):void

	/** 获取分辨率列表（仅iOS支持）*/ 
	getDefinitionList():void

	/**
	 * `设置分辨率（仅iOS支持）`
	 * ========params==========
	 *
	 * `config` :JSON : 配置参数
	 */
	setDefinition(params:talkFunLive_setDefinition_Params, callback?: (ret:JSON) => void):void

	/** 获取可加速的列表（仅iOS支持）*/ 
	getSpeedLineList():void

	/**
	 * `设置加速（仅iOS支持）`
	 * ========params==========
	 *
	 * `config` :JSON : 配置参数
	 */
	setSpeedup(params:talkFunLive_setSpeedup_Params, callback?: (ret:JSON) => void):void

	/** 大班新人数监听（仅android支持）*/ 
	setUpdateMemberListener(callback?: (ret:JSON) => void):void

	/** 获取成员列表,需要先连接socket（仅android支持）*/ 
	getMemberList(callback?: (ret:JSON) => void):void

	/**
	 * `初始化小班直播管理器`
	 * ========params==========
	 *
	 * `courseID` :string : 课程ID（仅iOS支持）
	 */
	initRtcEngineKit(params:talkFunLive_initRtcEngineKit_Params, callback?: (ret:JSON) => void):void

	/** 销毁小班直播管理器*/ 
	destroyRtcEngineKit():void

	/** 重新加载小班直播管理器*/ 
	reloadRtcEngineKit():void

	/** 获取小班直播管理器信息（仅iOS支持）*/ 
	getRtcEngineKitInfo():void

	/**
	 * `触发某个事件(有回调)（仅iOS支持）`
	 * ========params==========
	 *
	 * `event` :string : 课程ID
	 *
	 * `params` :JSON : 参数
	 */
	emitRtcEngineKit(params:talkFunLive_emitRtcEngineKit_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听事件，处理回调数据（仅iOS支持）`
	 * ========params==========
	 *
	 * `event` :string : 课程ID
	 */
	onEventRtcEngineKit(params:talkFunLive_onEventRtcEngineKit_Params, callback?: (ret:JSON) => void):void

	/** 开始直播*/ 
	startRtcLive():void

	/** 停止直播*/ 
	stopRtcLive():void

	/** 开启讲台*/ 
	openRtcLive():void

	/** 关闭讲台*/ 
	closeRtcLive():void

	/** 切换摄像头*/ 
	switchRtcCamera():void

	/** 获取状态（仅iOS支持）*/ 
	getVideoState():void

	/**
	 * `打开摄像头`
	 * ========params==========
	 *
	 * `xid` :string : ID
	 */
	openRtcVideo(params:talkFunLive_openRtcVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭摄像头`
	 * ========params==========
	 *
	 * `xid` :string : ID
	 */
	closeRtcVideo(params:talkFunLive_closeRtcVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开麦克风`
	 * ========params==========
	 *
	 * `xid` :string : ID
	 */
	openRtcAudio(params:talkFunLive_openRtcAudio_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭麦克风`
	 * ========params==========
	 *
	 * `xid` :string : ID
	 */
	closeRtcAudio(params:talkFunLive_closeRtcAudio_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开涂鸦`
	 * ========params==========
	 *
	 * `xid` :string : ID
	 */
	giveDrawPower(params:talkFunLive_giveDrawPower_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭涂鸦`
	 * ========params==========
	 *
	 * `xid` :string : ID
	 */
	cancelDrawPower(params:talkFunLive_cancelDrawPower_Params, callback?: (ret:JSON) => void):void

	/**
	 * `奖励（仅iOS支持）`
	 * ========params==========
	 *
	 * `xid` :string : ID
	 *
	 * `score` :string : 数量
	 *
	 * `goodsId` :string : 奖励的物品ID
	 */
	awardRtc(params:talkFunLive_awardRtc_Params, callback?: (ret:JSON) => void):void

	/**
	 * `允许上讲台的申请`
	 * ========params==========
	 *
	 * `xid` :string : ID
	 */
	upRtc(params:talkFunLive_upRtc_Params, callback?: (ret:JSON) => void):void

	/**
	 * `踢下讲台`
	 * ========params==========
	 *
	 * `xid` :string : ID
	 */
	kickRtc(params:talkFunLive_kickRtc_Params, callback?: (ret:JSON) => void):void

	/** 所有在线人员数据（仅iOS支持）*/ 
	getRtcMemberList():void

	/** 所有学员（仅iOS支持）*/ 
	getRtcAllStudents():void

	/** 获取申请上讲台的列表*/ 
	getRtcApplyList():void

	/** 讲台上的用户列表*/ 
	getRtcUserEntityList():void

	/** 添加白板操作，需要先初始化白板（仅android支持）*/ 
	setWhiteBoardPresenter():void

	/** 直播时长监听（仅android支持）*/ 
	setLiveDurationListener():void

	/** 设置开启直播，关闭直播，及主播被踢出的监听（仅android支持）*/ 
	setLiveListener():void

	/** 设置视频连麦多媒体状态的监听（仅android支持）*/ 
	setRtcMediaStatusListener(callback?: (ret:JSON) => void):void

	/** 设置连麦错误监听（仅android支持）*/ 
	setRtcErrorListener(callback?: (ret:JSON) => void):void

	/** 设置涂鸦权限的监听（仅android支持）*/ 
	setWhiteboardPowerListener(callback?: (ret:JSON) => void):void

	/** 设置涂鸦权限的监听（仅android支持）*/ 
	setWhiteboardRecoverListener(callback?: (ret:JSON) => void):void

	/** 设置视频状态连接监听（仅android支持）*/ 
	setRtcStatusListener(callback?: (ret:JSON) => void):void

	/** rtc人员相关监听（仅android支持）*/ 
	setRtcMemberListener(callback?: (ret:JSON) => void):void

	/**
	 * `群聊（仅iOS支持）`
	 * ========params==========
	 *
	 * `chatInfo` :string : 聊天信息
	 */
	publicChat(params:talkFunLive_publicChat_Params, callback?: (ret:JSON) => void):void

	/**
	 * `私聊（仅iOS支持）`
	 * ========params==========
	 *
	 * `chatInfo` :string : 聊天信息
	 *
	 * `xid` :string : id
	 */
	privateChat(params:talkFunLive_privateChat_Params, callback?: (ret:JSON) => void):void

	/** 提问监听（仅iOS支持）*/ 
	questionListening():void

	/**
	 * `回复提问（仅iOS支持）`
	 * ========params==========
	 *
	 * `message` :string : 回复的信息
	 *
	 * `replyId` :string : 提问id
	 *
	 * `courseId` :string : 课程ID
	 */
	answerQuestion(params:talkFunLive_answerQuestion_Params, callback?: (ret:JSON) => void):void

	/** 提问的回复的监听（仅iOS支持）*/ 
	questionReplyListening():void

}
interface talkFunLive_setBeauty_Params {
	/**是否开启美颜*/ 
	isOn:boolean,

}

interface talkFunLive_setGraffiti_Params {
	/**是否开启涂鸦*/ 
	isOn:boolean,

}

interface talkFunLive_setAutoUpload_Params {
	/**是否开启自动上传*/ 
	isOn:boolean,

}

interface talkFunLive_initLiveManager_Params {
	/**课程ID（仅iOS支持）*/ 
	courseID:string,

	/**课程名（仅iOS支持）*/ 
	courseName:string,

	/**课程ID（仅iOS支持）*/ 
	startTimeDetai:string,

	/**课程名（仅iOS支持）*/ 
	endTimeDetail:string,

	/**视频播放器的窗口位置及大小（仅android支持）*/ 
	rect:JSON,

	/**附着frame或window的名称（仅android支持）*/ 
	fixedOn:string,

	/**是否固定（仅android支持）*/ 
	fixed:boolean,

}

interface talkFunLive_setLiveManagerInfo_Params {
	/**（可选项）麦克风音量增益因子，初始化时默认为1.0，推流开始后可以修改，其取值范围为[0, 1]（仅iOS支持）*/ 
	micGain?:number,

	/**（可选项）对原始视频进行缩放的比例，初始化时默认为1，推流开始后可以修改，取值范围为(1, 3]*/ 
	zoomScale?:number,

	/**（可选项）是否设置美颜*/ 
	beauty?:boolean,

	/**（可选项）视频录制 开关*/ 
	saveLocalVideo?:boolean,

	/**（可选项）自动旋转(这里只支持 left 变 right  portrait 变 portraitUpsideDown)*/ 
	autorotate?:boolean,

}

interface talkFunLive_setLiveCameraFront_Params {
	/**是否启用前置摄像头*/ 
	isFront:string,

}

interface talkFunLive_liveEmit_Params {
	/**事件*/ 
	event:string,

	/**参数*/ 
	params:JSON,

}

interface talkFunLive_liveOnEvent_Params {
	/**事件，取值范围参考欢拓云官方文档：[http://open.talk-fun.com/docs/CloudLive-iOS/TalkfunLive/question.html](http://open.talk-fun.com/docs/CloudLive-iOS/TalkfunLive/question.html)。（仅iOS支持）*/ 
	event:string,

}

interface talkFunLive_bQASendMessage_Params {
	/**提问id*/ 
	replyId:string,

	/**回复内容*/ 
	content:string,

}

interface talkFunLive_liveOffEvent_Params {
	/**事件*/ 
	event:string,

}

interface talkFunLive_setDefinition_Params {
	/**配置参数*/ 
	config:JSON,

}

interface talkFunLive_setSpeedup_Params {
	/**配置参数*/ 
	config:JSON,

}

interface talkFunLive_initRtcEngineKit_Params {
	/**课程ID（仅iOS支持）*/ 
	courseID:string,

}

interface talkFunLive_emitRtcEngineKit_Params {
	/**课程ID*/ 
	event:string,

	/**参数*/ 
	params:JSON,

}

interface talkFunLive_onEventRtcEngineKit_Params {
	/**课程ID*/ 
	event:string,

}

interface talkFunLive_openRtcVideo_Params {
	/**ID*/ 
	xid:string,

}

interface talkFunLive_closeRtcVideo_Params {
	/**ID*/ 
	xid:string,

}

interface talkFunLive_openRtcAudio_Params {
	/**ID*/ 
	xid:string,

}

interface talkFunLive_closeRtcAudio_Params {
	/**ID*/ 
	xid:string,

}

interface talkFunLive_giveDrawPower_Params {
	/**ID*/ 
	xid:string,

}

interface talkFunLive_cancelDrawPower_Params {
	/**ID*/ 
	xid:string,

}

interface talkFunLive_awardRtc_Params {
	/**ID*/ 
	xid:string,

	/**数量*/ 
	score:string,

	/**奖励的物品ID*/ 
	goodsId:string,

}

interface talkFunLive_upRtc_Params {
	/**ID*/ 
	xid:string,

}

interface talkFunLive_kickRtc_Params {
	/**ID*/ 
	xid:string,

}

interface talkFunLive_publicChat_Params {
	/**聊天信息*/ 
	chatInfo:string,

}

interface talkFunLive_privateChat_Params {
	/**聊天信息*/ 
	chatInfo:string,

	/**id*/ 
	xid:string,

}

interface talkFunLive_answerQuestion_Params {
	/**回复的信息*/ 
	message:string,

	/**提问id*/ 
	replyId:string,

	/**课程ID*/ 
	courseId:string,

}

interface didi {
	/** 注册appid与secrect，调用其他接口前需先调用该接口注册，只需调用一次。*/ 
	registerApp(callback?: (ret:JSON) => void):void

	/**
	 * `拉起滴滴叫车主页面`
	 * ========params==========
	 *
	 * `fromlat` :any : （可选项）出发地纬度。
	 *
	 * `fromlng` :any : （可选项）出发地经度。
	 *
	 * `fromaddr` :string : （可选项）出发地地址。
	 *
	 * `fromname` :string : （可选项）出发地名称。
	 *
	 * `tolat` :any : （可选项）目的地纬度。
	 *
	 * `tolng` :any : （可选项）目的地经度。
	 *
	 * `toaddr` :string : （可选项）目的地地址。
	 *
	 * `toname` :string : （可选项）目的地名称。
	 *
	 * `biz` :any : （可选项）默认选中的业务线类型。
	 *
	 * `phone` :string : （可选项）乘客手机号，方便乘客登录使用，会默认补全到登录框中
	 *
	 * `maptype` :string : （可选项）经纬度类型
	 */
	showDDPage(params:didi_showDDPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拉起滴滴打车登录页面`
	 * ========params==========
	 *
	 * `finish` :string : （可选项）完成登录的动作，close_page（关闭登录页面） / home_page（跳转至打车主页)，默认close_page
	 */
	login(params:didi_login_Params):void

	/**
	 * `拉起滴滴打车行程详情页面（须先登录）`
	 * ========params==========
	 *
	 * `biz` :string : 业务线标识，目前支持2:快车 3:专车
	 *
	 * `oid` :string : 需要展示行程的订单号
	 */
	orderDetail(params:didi_orderDetail_Params):void

	/** 拉起滴滴打车行程列表页面（须先登录）*/ 
	orderList():void

	/** 拉起滴滴打车发票打印页面（须先登录）*/ 
	invoice():void

	/** 获取用户登录状态*/ 
	isLogin(callback?: (ret:JSON) => void):void

	/**
	 * `根据当前经纬度获取预估接驾时间`
	 * ========params==========
	 *
	 * `fromlat` :any : （必填项）出发地纬度。
	 *
	 * `fromlng` :any : （必填项）出发地经度。
	 *
	 * `fromaddr` :string : （可选项）出发地地址。
	 *
	 * `fromname` :string : （可选项）出发地名称。
	 *
	 * `biz` :string : （可选项）默认选中的业务线类型。
	 *
	 * `maptype` :string : （可选项）经纬度类型 wgs/baidu/soso。
	 */
	getEstimateTime(params:didi_getEstimateTime_Params, callback?: (ret:JSON) => void):void

	/**
	 * `传入起始地目的地，获取预估费用`
	 * ========params==========
	 *
	 * `fromlat` :any : （必填项）出发地纬度。
	 *
	 * `fromlng` :any : （必填项）出发地经度。
	 *
	 * `fromaddr` :string : （可选项）出发地地址。
	 *
	 * `fromname` :string : （可选项）出发地名称。
	 *
	 * `tolat` :any : （必填项）目的地纬度。
	 *
	 * `tolng` :any : （必填项）目的地经度。
	 *
	 * `toaddr` :string : （可选项）目的地地址。
	 *
	 * `toname` :string : （可选项）目的地名称。
	 *
	 * `biz` :string : （可选项）默认选中的业务线类型。
	 *
	 * `maptype` :string : （可选项）经纬度类型 wgs/baidu/soso。
	 */
	getEstimatePrice(params:didi_getEstimatePrice_Params, callback?: (ret:JSON) => void):void

	/** 获取当前正在进行的订单的信息*/ 
	getCurrentOrderStatus(callback?: (ret:JSON) => void):void

	/** 获取当前订单的司机信息，如果当前没有订单正在行程中，则会返回空数据*/ 
	getCurrentDriverInfo(callback?: (ret:JSON) => void):void

	/** 获取行程列表*/ 
	getOrderList(callback?: (ret:JSON) => void):void

	/** 获取供服务端直接调用滴滴API的ticket。*/ 
	getTicket(callback?: (ret:JSON) => void):void

}
interface didi_showDDPage_Params {
	/**（可选项）出发地纬度。*/ 
	fromlat?:any,

	/**（可选项）出发地经度。*/ 
	fromlng?:any,

	/**（可选项）出发地地址。*/ 
	fromaddr?:string,

	/**（可选项）出发地名称。*/ 
	fromname?:string,

	/**（可选项）目的地纬度。*/ 
	tolat?:any,

	/**（可选项）目的地经度。*/ 
	tolng?:any,

	/**（可选项）目的地地址。*/ 
	toaddr?:string,

	/**（可选项）目的地名称。*/ 
	toname?:string,

	/**（可选项）默认选中的业务线类型。*/ 
	biz?:any,

	/**（可选项）乘客手机号，方便乘客登录使用，会默认补全到登录框中*/ 
	phone?:string,

	/**（可选项）经纬度类型*/ 
	maptype?:string,

}

interface didi_login_Params {
	/**（可选项）完成登录的动作，close_page（关闭登录页面） / home_page（跳转至打车主页)，默认close_page*/ 
	finish?:string,

}

interface didi_orderDetail_Params {
	/**业务线标识，目前支持2:快车 3:专车*/ 
	biz:string,

	/**需要展示行程的订单号*/ 
	oid:string,

}

interface didi_getEstimateTime_Params {
	/**（必填项）出发地纬度。*/ 
	fromlat:any,

	/**（必填项）出发地经度。*/ 
	fromlng:any,

	/**（可选项）出发地地址。*/ 
	fromaddr?:string,

	/**（可选项）出发地名称。*/ 
	fromname?:string,

	/**（可选项）默认选中的业务线类型。*/ 
	biz?:string,

	/**（可选项）经纬度类型 wgs/baidu/soso。*/ 
	maptype?:string,

}

interface didi_getEstimatePrice_Params {
	/**（必填项）出发地纬度。*/ 
	fromlat:any,

	/**（必填项）出发地经度。*/ 
	fromlng:any,

	/**（可选项）出发地地址。*/ 
	fromaddr?:string,

	/**（可选项）出发地名称。*/ 
	fromname?:string,

	/**（必填项）目的地纬度。*/ 
	tolat:any,

	/**（必填项）目的地经度。*/ 
	tolng:any,

	/**（可选项）目的地地址。*/ 
	toaddr?:string,

	/**（可选项）目的地名称。*/ 
	toname?:string,

	/**（可选项）默认选中的业务线类型。*/ 
	biz?:string,

	/**（可选项）经纬度类型 wgs/baidu/soso。*/ 
	maptype?:string,

}

interface ArcFace {
	/**
	 * `打开摄像头识别人脸并添加`
	 * ========params==========
	 *
	 * `angle` :number : 摄像头角度（可选）
	 *
	 * `facing` :string : 设置前后摄像头  (可选)
	 *
	 * `mirror` :boolean : 是否镜像  (可选)
	 *
	 * `outTime` :number : 扫描超时时间（s）（可选）
	 */
	addFace(params:ArcFace_addFace_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据姓名删除已注册人员信息`
	 * ========params==========
	 *
	 * `name` :string : 要删除人员信息的姓名
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	delete(params:ArcFace_delete_Params):void

	/**
	 * `打开摄像头检测人脸`
	 * ========params==========
	 *
	 * `angle` :number : 摄像头角度（可选）
	 *
	 * `facing` :string : 设置前后摄像头
	 *
	 * `mirror` :boolean : 是否镜像  (可选)
	 *
	 * `outTime` :number : 扫描超时时间（s）（可选）
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	detecter(params:ArcFace_detecter_Params):void

	/**
	 * `关闭扫描页面`
	 * ========params==========
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	close(params:ArcFace_close_Params):void

}
interface ArcFace_addFace_Params {
	/**摄像头角度（可选）*/ 
	angle?:number,

	/**设置前后摄像头  (可选)*/ 
	facing?:string,

	/**是否镜像  (可选)*/ 
	mirror?:boolean,

	/**扫描超时时间（s）（可选）*/ 
	outTime?:number,

}

interface ArcFace_delete_Params {
	/**要删除人员信息的姓名*/ 
	name:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ArcFace_detecter_Params {
	/**摄像头角度（可选）*/ 
	angle?:number,

	/**设置前后摄像头*/ 
	facing:string,

	/**是否镜像  (可选)*/ 
	mirror?:boolean,

	/**扫描超时时间（s）（可选）*/ 
	outTime?:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ArcFace_close_Params {
	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface mobileMove {
	/** 获取本机号码校验token*/ 
	getinit(callback?: (ret:JSON) => void):void

	/** 应用调用一键登录方法，SDK将会拉起用户授权页面，用户授权后，SDK将返回token给应用客户端。*/ 
	loginAuth(callback?: (ret:JSON) => void):void

	/** 获取手机号码，前提是调用loginAuth返回openId信息。*/ 
	getPhoneNumber(callback?: (ret:JSON) => void):void

}
interface shareMorePic {
}
interface aliyunOSS {
	/**
	 * `初始化sdk  （调用优先级最高，只需要调用一次）`
	 * ========params==========
	 *
	 * `accessKeyId` :string : （可选项）从阿里云获取的accessKeyId
	 *
	 * `accessKeySecret` :string : （可选项）从阿里云获取的accessKeySecret
	 *
	 * `endpoint` :string : 阿里云OSS服务在各个区域的地址，如：https://oss-cn-hangzhou.aliyuncs.com
	 *
	 * `serverUrl` :string : （可选项）自签名URL地址，明文模式时可选。如：https://localhost:8080/distribute-token.json
	 */
	initOSSClient(params:aliyunOSS_initOSSClient_Params, callback?: (ret:JSON) => void):void

	/**
	 * `文件上传， 通过NSURL上传一个文件`
	 * ========params==========
	 *
	 * `bucketName` :string : Bucket名称。
	 *
	 * `objectKey` :string : Object名称。如："folder/subfolder/file"
	 *
	 * `file` :string : 要上传的文件，支持fs://、cache://等文件路径协议及真实路径。
	 *
	 * `uploadType` :number : 上传文件的类型，1为异步上传，2为追加上传，3为断点续传(Android仅支持异步上传)
	 */
	upload(params:aliyunOSS_upload_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载文件，当下载图片并且传入process参数时可以处理图片。`
	 * ========params==========
	 *
	 * `bucketName` :string : Bucket名称。
	 *
	 * `objectKey` :string : 待下载的阿里OSS文件名，"folder/subfolder/file"
	 *
	 * `process` :string : （可选项）下载图片时对图片进行处理的命令。处理命令参见阿里文档：图片处理 (仅当下载图片时有效)
	 *
	 * `saveFileName` :string : 下载文件路径（仅支持 fs://）
	 */
	download(params:aliyunOSS_download_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除单个文件，要求对所在的Bucket有写权限。`
	 * ========params==========
	 *
	 * `bucketName` :string : Bucket名称。
	 *
	 * `objectKey` :string : 待删除的阿里OSS文件名，"folder/subfolder/file"
	 */
	deleteObject(params:aliyunOSS_deleteObject_Params, callback?: (ret:JSON) => void):void

}
interface aliyunOSS_initOSSClient_Params {
	/**（可选项）从阿里云获取的accessKeyId*/ 
	accessKeyId?:string,

	/**（可选项）从阿里云获取的accessKeySecret*/ 
	accessKeySecret?:string,

	/**阿里云OSS服务在各个区域的地址，如：https://oss-cn-hangzhou.aliyuncs.com*/ 
	endpoint:string,

	/**（可选项）自签名URL地址，明文模式时可选。如：https://localhost:8080/distribute-token.json*/ 
	serverUrl?:string,

}

interface aliyunOSS_upload_Params {
	/**Bucket名称。*/ 
	bucketName:string,

	/**Object名称。如："folder/subfolder/file"*/ 
	objectKey:string,

	/**要上传的文件，支持fs://、cache://等文件路径协议及真实路径。*/ 
	file:string,

	/**上传文件的类型，1为异步上传，2为追加上传，3为断点续传(Android仅支持异步上传)*/ 
	uploadType:number,

}

interface aliyunOSS_download_Params {
	/**Bucket名称。*/ 
	bucketName:string,

	/**待下载的阿里OSS文件名，"folder/subfolder/file"*/ 
	objectKey:string,

	/**（可选项）下载图片时对图片进行处理的命令。处理命令参见阿里文档：图片处理 (仅当下载图片时有效)*/ 
	process?:string,

	/**下载文件路径（仅支持 fs://）*/ 
	saveFileName:string,

}

interface aliyunOSS_deleteObject_Params {
	/**Bucket名称。*/ 
	bucketName:string,

	/**待删除的阿里OSS文件名，"folder/subfolder/file"*/ 
	objectKey:string,

}

interface alibaic {
	/** -设置监听后可以添加api事件监听来获取相关信息：*/ 
	addEventListener():void

	/** 初始化SDK（优先级最高，只调用一次）*/ 
	init():void

}
interface UIFaceID {
}
interface wxPlus {
	/** 判断当前设备是否安装微信客户端*/ 
	isInstalled(callback?: (ret:JSON) => void):void

	/**
	 * `分享文本内容`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :string : （可选项）场景
	 *
	 * `text` :string : 分享的文本
	 */
	shareText(params:wxPlus_shareText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享图片内容`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :string : （可选项）场景
	 *
	 * `thumb` :string : 缩略图片的地址，支持 fs://、widget:// 协议。**大小不能超过32K，若 contentUrl 为本地图片地址则本参数忽略,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败**
	 *
	 * `contentUrl` :string : 分享图片的 url 地址（支持 fs://、widget://），长度不能超过10M，（注：图片内容大小不超过 10MB，不是图片大小）
	 */
	shareImage(params:wxPlus_shareImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享网络音频资源`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :string : （可选项）场景
	 *
	 * `title` :string : （可选项）分享网络音频的标题。
	 *
	 * `description` :string : （可选项）分享网络音频的描述。
	 *
	 * `thumb` :string : （可选项）分享网络音频的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败**
	 *
	 * `musicDataUrl` :string : （可选项）分享的音频数据 url 地址，长度不能超过10k。
	 *
	 * `contentUrl` :string : 分享网络音频的 url 地址，长度不能超过10k。
	 */
	shareMusic(params:wxPlus_shareMusic_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享网络视频资源`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :string : （可选项）场景
	 *
	 * `title` :string : （可选项）分享网络视频的标题。
	 *
	 * `description` :string : （可选项）分享网络视频的描述。**由于微信平台限制，对不同平台部分场景本参数无效**
	 *
	 * `thumb` :string : （可选项）分享网络视频的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败**
	 *
	 * `contentUrl` :string : 分享网络视频的 url 地址，长度不能超过10k。
	 */
	shareVideo(params:wxPlus_shareVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享网页`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :string : （可选项）场景
	 *
	 * `title` :string : （可选项）分享网页的标题
	 *
	 * `description` :string : （可选项）分享网页的描述。**由于微信平台限制，对不同平台部分场景本参数无效**
	 *
	 * `thumb` :string : （可选项）分享网页的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败**
	 *
	 * `contentUrl` :string : 分享网页的 url 地址，长度不能超过10k。
	 */
	shareWebpage(params:wxPlus_shareWebpage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享小程序`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :string : （可选项）场景，目前只支持会话
	 *
	 * `title` :string : （可选项）分享小程序的标题
	 *
	 * `description` :string : （可选项）分享小程序的描述。**由于微信平台限制，对不同平台部分场景本参数无效**
	 *
	 * `thumb` :string : （可选项）分享小程序的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败**
	 *
	 * `webpageUrl` :string : 兼容低版本微信的网页
	 *
	 * `userName` :string : 分享小程序的原始 id
	 *
	 * `path` :string : 分享小程序的页面的路径
	 *
	 * `hdImageData` :string : 小程序新版本的预览图的路径(128k)(android不支持)
	 *
	 * `withShareTicket` :boolean : 是否使用带 shareTicket 的转发
	 *
	 * `miniProgramType` :string : 分享小程序的版本（正式，开发，体验）
	 */
	shareProgram(params:wxPlus_shareProgram_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拉起小程序功能`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `miniProgramType` :string : 拉起小程序的类型
	 *
	 * `userName` :string : 拉起的小程序的username，小程序的原始ID
	 *
	 * `path` :string : 拉起小程序页面的可带参路径，不填默认拉起小程序首页
	 */
	launchMiniProgram(params:wxPlus_launchMiniProgram_Params, callback?: (ret:JSON) => void):void

	/**
	 * `一键订阅，详情参考 [微信文档](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1500434436_aWfqW&token=&lang=zh_CN)。`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `scene` :number : 重定向后会带上scene参数，开发者可以填0-10000 的整形值，用来标识订阅场值
	 *
	 * `templateId` :string : 订阅消息模板ID，在微信开放平台提交应用审核通过后获得
	 *
	 * `reserved` :string : （可选项）用于保持请求和回调的状态，授权请后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验，开发者可以填写a-zA-Z0-9的参数值，最多128字节，要求做urlencode
	 */
	subscribeMsg(params:wxPlus_subscribeMsg_Params, callback?: (ret:JSON) => void):void

	/**
	 * `登录授权（**用于实现第三方登录**），详情参考微信官方文档，[移动登录开发指南](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419317851&token=f3e0c83a0c4fffb6d86968019561cd409ddf3b4e&lang=zh_CN)`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取，不传或传入错误的 apiKey，则无法打开微信进行登录。
	 *
	 * `scope` :string : （可选项）授权域，[什么是授权域?](https://open.weixin.qq.com/cgi-bin/showdocument?action=doc&id=open1419317851&t=0.1891884393385983#scope)
	 */
	auth(params:wxPlus_auth_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取授权 accessToken（**需要登录授权成功**）`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `apiSecret` :string : （可选项）从微信开放平台获取的 secret，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `code` :string : 通过 auth 接口授权成功后返回的 code 参数
	 */
	getToken(params:wxPlus_getToken_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取用户信息（**需要获取 accessToken 成功**）`
	 * ========params==========
	 *
	 * `accessToken` :string : getToken 接口或 refreshToken 接口成功获取的 accessToken 值
	 *
	 * `openId` :string : getToken 接口或 refreshToken 接口成功获取的 openId 值
	 *
	 * `lang` :string : （可选项）国家地区语言版本
	 */
	getUserInfo(params:wxPlus_getUserInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `调用 getUserInfo 接口错误码返回1时，代表 accessToken 过期，调用此接口刷新 accessToken`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。
	 *
	 * `dynamicToken` :string : getToken 接口或 refreshToken 接口获取的 dynamicToken 值
	 */
	refreshToken(params:wxPlus_refreshToken_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享多张图片到朋友圈，**暂仅支持 Android 平台，iOS 平台可使用 shareAction 模块来实现多图分享。注意：由于不是使用的官方sdk进行的分享，而是直接调用的微信客户端的分享界面，分享后无法回到原应用，且微信端不会给出是否分享成功的反馈，所以本接口暂无回调**`
	 * ========params==========
	 *
	 * `imgs` :Array : 要分享的图片的路径组成的数组，要求本地路径（fs://、widget://）
	 *
	 * `description` :string : 分享的文字
	 */
	shareMutableImg(params:wxPlus_shareMutableImg_Params):void

	/** 监听从微信打开本 App 的事件和参数*/ 
	addJumpFromWxListener():void

	/**
	 * `本 App 处理完后向微信发送的处理结果。`
	 * ========params==========
	 *
	 * `type` :number : 类型
	 *
	 * `errStr` :string : 错误信息
	 *
	 * `errCode` :number : 错误码
	 */
	sendShowMessageResp(params:wxPlus_sendShowMessageResp_Params, callback?: (ret:JSON) => void):void

	/**
	 * `本 App 处理完后向微信发送的处理结果。`
	 * ========params==========
	 *
	 * `type` :number : 类型
	 *
	 * `errStr` :string : 错误信息
	 *
	 * `errCode` :number : 错误码
	 *
	 * `text` :string : （可选项）存文本消息内容，与 message 为互斥参数
	 *
	 * `message` :JSON : （可选项）多媒体消息
	 */
	sendGetMessageResp(params:wxPlus_sendGetMessageResp_Params, callback?: (ret:JSON) => void):void

}
interface wxPlus_shareText_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）场景*/ 
	scene?:string,

	/**分享的文本*/ 
	text:string,

}

interface wxPlus_shareImage_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）场景*/ 
	scene?:string,

	/**缩略图片的地址，支持 fs://、widget:// 协议。**大小不能超过32K，若 contentUrl 为本地图片地址则本参数忽略,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败***/ 
	thumb:string,

	/**分享图片的 url 地址（支持 fs://、widget://），长度不能超过10M，（注：图片内容大小不超过 10MB，不是图片大小）*/ 
	contentUrl:string,

}

interface wxPlus_shareMusic_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）场景*/ 
	scene?:string,

	/**（可选项）分享网络音频的标题。*/ 
	title?:string,

	/**（可选项）分享网络音频的描述。*/ 
	description?:string,

	/**（可选项）分享网络音频的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败***/ 
	thumb?:string,

	/**（可选项）分享的音频数据 url 地址，长度不能超过10k。*/ 
	musicDataUrl?:string,

	/**分享网络音频的 url 地址，长度不能超过10k。*/ 
	contentUrl:string,

}

interface wxPlus_shareVideo_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）场景*/ 
	scene?:string,

	/**（可选项）分享网络视频的标题。*/ 
	title?:string,

	/**（可选项）分享网络视频的描述。**由于微信平台限制，对不同平台部分场景本参数无效***/ 
	description?:string,

	/**（可选项）分享网络视频的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败***/ 
	thumb?:string,

	/**分享网络视频的 url 地址，长度不能超过10k。*/ 
	contentUrl:string,

}

interface wxPlus_shareWebpage_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）场景*/ 
	scene?:string,

	/**（可选项）分享网页的标题*/ 
	title?:string,

	/**（可选项）分享网页的描述。**由于微信平台限制，对不同平台部分场景本参数无效***/ 
	description?:string,

	/**（可选项）分享网页的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败***/ 
	thumb?:string,

	/**分享网页的 url 地址，长度不能超过10k。*/ 
	contentUrl:string,

}

interface wxPlus_shareProgram_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）场景，目前只支持会话*/ 
	scene?:string,

	/**（可选项）分享小程序的标题*/ 
	title?:string,

	/**（可选项）分享小程序的描述。**由于微信平台限制，对不同平台部分场景本参数无效***/ 
	description?:string,

	/**（可选项）分享小程序的缩略图地址，要求本地路径（fs://、widget://）**大小不能超过32K,需要路径包含图片格式后缀，否则如果原图片为非png格式，会分享失败***/ 
	thumb?:string,

	/**兼容低版本微信的网页*/ 
	webpageUrl:string,

	/**分享小程序的原始 id*/ 
	userName:string,

	/**分享小程序的页面的路径*/ 
	path:string,

	/**小程序新版本的预览图的路径(128k)(android不支持)*/ 
	hdImageData:string,

	/**是否使用带 shareTicket 的转发*/ 
	withShareTicket:boolean,

	/**分享小程序的版本（正式，开发，体验）*/ 
	miniProgramType:string,

}

interface wxPlus_launchMiniProgram_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**拉起小程序的类型*/ 
	miniProgramType:string,

	/**拉起的小程序的username，小程序的原始ID*/ 
	userName:string,

	/**拉起小程序页面的可带参路径，不填默认拉起小程序首页*/ 
	path:string,

}

interface wxPlus_subscribeMsg_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**重定向后会带上scene参数，开发者可以填0-10000 的整形值，用来标识订阅场值*/ 
	scene:number,

	/**订阅消息模板ID，在微信开放平台提交应用审核通过后获得*/ 
	templateId:string,

	/**（可选项）用于保持请求和回调的状态，授权请后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验，开发者可以填写a-zA-Z0-9的参数值，最多128字节，要求做urlencode*/ 
	reserved?:string,

}

interface wxPlus_auth_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取，不传或传入错误的 apiKey，则无法打开微信进行登录。*/ 
	apiKey?:string,

	/**（可选项）授权域，[什么是授权域?](https://open.weixin.qq.com/cgi-bin/showdocument?action=doc&id=open1419317851&t=0.1891884393385983#scope)*/ 
	scope?:string,

}

interface wxPlus_getToken_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**（可选项）从微信开放平台获取的 secret，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiSecret?:string,

	/**通过 auth 接口授权成功后返回的 code 参数*/ 
	code:string,

}

interface wxPlus_getUserInfo_Params {
	/**getToken 接口或 refreshToken 接口成功获取的 accessToken 值*/ 
	accessToken:string,

	/**getToken 接口或 refreshToken 接口成功获取的 openId 值*/ 
	openId:string,

	/**（可选项）国家地区语言版本*/ 
	lang?:string,

}

interface wxPlus_refreshToken_Params {
	/**（可选项）从微信开放平台获取的 appid，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取。*/ 
	apiKey?:string,

	/**getToken 接口或 refreshToken 接口获取的 dynamicToken 值*/ 
	dynamicToken:string,

}

interface wxPlus_shareMutableImg_Params {
	/**要分享的图片的路径组成的数组，要求本地路径（fs://、widget://）*/ 
	imgs:Array,

	/**分享的文字*/ 
	description:string,

}

interface wxPlus_sendShowMessageResp_Params {
	/**类型*/ 
	type:number,

	/**错误信息*/ 
	errStr:string,

	/**错误码*/ 
	errCode:number,

}

interface wxPlus_sendGetMessageResp_Params {
	/**类型*/ 
	type:number,

	/**错误信息*/ 
	errStr:string,

	/**错误码*/ 
	errCode:number,

	/**（可选项）存文本消息内容，与 message 为互斥参数*/ 
	text?:string,

	/**（可选项）多媒体消息*/ 
	message?:JSON,

}

interface baiduTrace {
	/**
	 * `开始追踪`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID
	 *
	 * `entityName` :string : 终端实体的名称，采集的轨迹将算在该 entity 名下
	 *
	 * `gatherInterval` :number : （可选项）位置采集周期 （单位：秒），值域为[2,300]，且上传周期必须是采集周期的整数倍
	 *
	 * `packInterval` :number : （可选项）打包上传周期 （单位：秒），值域为[2,300]，且上传周期必须是采集周期的整数倍
	 *
	 * `traceType` :number : （可选项）轨迹服务类型，**仅支持 Android 平台**
	 *
	 * `keepAlive` :boolean : （可选项）是否保活
	 */
	startTrace(params:baiduTrace_startTrace_Params, callback?: (ret:JSON) => void):void

	/**
	 * `停止追踪`
	 * ========params==========
	 *
	 * `entityName` :string : 要停止的终端实体的名称，在 iOS 平台上忽略本参数
	 */
	stopTrace(params:baiduTrace_stopTrace_Params, callback?: (ret:JSON) => void):void

	/**
	 * `检索符合过滤条件的Entity终端实体`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务的ID
	 *
	 * `entityNames` :string : entity标识,可以是多个，不同标识之间用逗号隔开
	 *
	 * `columnKey` :string : （可选项）检索条件（格式为 : "key1=value1,key2=value2,....."）
	 *
	 * `activeTime` :number : （可选项）UNIX时间戳，查询在此时间之后有定位信息上传的entity（loc_time>=activeTime）如查询2016-8-21 00:00:00之后仍活跃的entity，此字段设置为1471708800
	 *
	 * `pageSize` :number : 分页大小
	 *
	 * `pageIndex` :number : （可选项）分页索引
	 *
	 * `returnType` :number : （可选项）返回结果的类型，**仅支持 Android 平台**
	 */
	queryRTTrack(params:baiduTrace_queryRTTrack_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询历史轨迹， 仅支持 Android 平台`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务的ID
	 *
	 * `entityName` :string : entity标识
	 *
	 * `simpleReturn` :number : （可选项）是否返回精简的结果
	 *
	 * `isProcessed` :number : （可选项）是否返回纠偏数据
	 *
	 * `startTime` :number : 开始时间 （Unix时间戳）
	 *
	 * `endTime` :number : 结束时间 （Unix时间戳）
	 *
	 * `pageSize` :number : 分页大小
	 *
	 * `pageIndex` :number : 分页索引
	 */
	queryHistoryTrack(params:baiduTrace_queryHistoryTrack_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建圆形围栏`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务的ID
	 *
	 * `center` :string : 围栏圆心（圆心位置, 格式 : "经度,纬度"）
	 *
	 * `radius` :number : 围栏半径（单位 : 米）
	 *
	 * `fenceName` :string : 围栏名称
	 *
	 * `monitorEntity` :string : 监控对象列表（多个entityName，以英文逗号"," 分割），ios仅支持单个
	 *
	 * `coordType` :number : （可选项）坐标类型
	 *
	 * `denoiseAccuracy` :number : 去燥精度
	 *
	 * `observers` :string : 观察者列表（多个entityName，以英文逗号"," 分割），仅支持 Android 平台
	 *
	 * `fenceDesc` :string : 围栏描述，仅支持 Android 平台
	 *
	 * `creator` :string : 创建者（entity标识），仅支持 Android 平台
	 *
	 * `validCycle` :number : 生效周期，仅支持 Android 平台
	 *
	 * `alarmCondition` :number : （可选项）报警条件，仅支持 Android 平台
	 */
	createCircularFence(params:baiduTrace_createCircularFence_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除围栏`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务的ID，iOS 平台上忽略此参数
	 *
	 * `fenceId` :number : 要删除的地理围栏的 ID 数组
	 *
	 * `monitor` :number : 被监控对象entity，仅支持 iOS 平台
	 */
	deleteFence(params:baiduTrace_deleteFence_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询实时状态，查询被监控对象和客户端地理围栏的位置关系`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID，在 ios 平台忽略本参数
	 *
	 * `fenceId` :number : 要查询的围栏ID
	 *
	 * `monitoredPersons` :string : 监控对象列表（多个entityName，以英文逗号"," 分割），ios平台仅读取第一个
	 */
	queryMonitoredStatus(params:baiduTrace_queryMonitoredStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询历史报警信息`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID，在 iOS 平台上会忽略本参数
	 *
	 * `fenceId` :number : 要查询的围栏ID
	 *
	 * `monitoredPersons` :string : 监控对象列表（多个entityName，以英文逗号"," 分割），ios平台上获取第一个
	 *
	 * `startTime` :number : 开始时间（unix时间戳）
	 *
	 * `endTime` :number : 结束时间（unix时间戳）
	 */
	queryFenceHistoryAlarmInfo(params:baiduTrace_queryFenceHistoryAlarmInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加Entity`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID
	 *
	 * `entityName` :string : entity名称，作为其唯一标识
	 *
	 * `entityDES` :string : entity的可读性描述
	 *
	 * `columnKey` :string : 属性名称（格式 : "key1=value1,key2=value2......."）
	 */
	addEntity(params:baiduTrace_addEntity_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询缓存的轨迹信息`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID
	 *
	 * `entityNames` :Array : entity名称组成的数组
	 *
	 * `tag` :number : 请求标识
	 */
	queryTrackCache(params:baiduTrace_queryTrackCache_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除缓存的轨迹信息`
	 * ========params==========
	 *
	 * `serviceId` :number : 开发者创建的鹰眼服务ID
	 *
	 * `entities` :JSON : entity信息组成的数组
	 *
	 * `tag` :number : 请求标识
	 */
	clearTrackCache(params:baiduTrace_clearTrackCache_Params, callback?: (ret:JSON) => void):void

}
interface baiduTrace_startTrace_Params {
	/**开发者创建的鹰眼服务ID*/ 
	serviceId:number,

	/**终端实体的名称，采集的轨迹将算在该 entity 名下*/ 
	entityName:string,

	/**（可选项）位置采集周期 （单位：秒），值域为[2,300]，且上传周期必须是采集周期的整数倍*/ 
	gatherInterval?:number,

	/**（可选项）打包上传周期 （单位：秒），值域为[2,300]，且上传周期必须是采集周期的整数倍*/ 
	packInterval?:number,

	/**（可选项）轨迹服务类型，**仅支持 Android 平台***/ 
	traceType?:number,

	/**（可选项）是否保活*/ 
	keepAlive?:boolean,

}

interface baiduTrace_stopTrace_Params {
	/**要停止的终端实体的名称，在 iOS 平台上忽略本参数*/ 
	entityName:string,

}

interface baiduTrace_queryRTTrack_Params {
	/**开发者创建的鹰眼服务的ID*/ 
	serviceId:number,

	/**entity标识,可以是多个，不同标识之间用逗号隔开*/ 
	entityNames:string,

	/**（可选项）检索条件（格式为 : "key1=value1,key2=value2,....."）*/ 
	columnKey?:string,

	/**（可选项）UNIX时间戳，查询在此时间之后有定位信息上传的entity（loc_time>=activeTime）如查询2016-8-21 00:00:00之后仍活跃的entity，此字段设置为1471708800*/ 
	activeTime?:number,

	/**分页大小*/ 
	pageSize:number,

	/**（可选项）分页索引*/ 
	pageIndex?:number,

	/**（可选项）返回结果的类型，**仅支持 Android 平台***/ 
	returnType?:number,

}

interface baiduTrace_queryHistoryTrack_Params {
	/**开发者创建的鹰眼服务的ID*/ 
	serviceId:number,

	/**entity标识*/ 
	entityName:string,

	/**（可选项）是否返回精简的结果*/ 
	simpleReturn?:number,

	/**（可选项）是否返回纠偏数据*/ 
	isProcessed?:number,

	/**开始时间 （Unix时间戳）*/ 
	startTime:number,

	/**结束时间 （Unix时间戳）*/ 
	endTime:number,

	/**分页大小*/ 
	pageSize:number,

	/**分页索引*/ 
	pageIndex:number,

}

interface baiduTrace_createCircularFence_Params {
	/**开发者创建的鹰眼服务的ID*/ 
	serviceId:number,

	/**围栏圆心（圆心位置, 格式 : "经度,纬度"）*/ 
	center:string,

	/**围栏半径（单位 : 米）*/ 
	radius:number,

	/**围栏名称*/ 
	fenceName:string,

	/**监控对象列表（多个entityName，以英文逗号"," 分割），ios仅支持单个*/ 
	monitorEntity:string,

	/**（可选项）坐标类型*/ 
	coordType?:number,

	/**去燥精度*/ 
	denoiseAccuracy:number,

	/**观察者列表（多个entityName，以英文逗号"," 分割），仅支持 Android 平台*/ 
	observers:string,

	/**围栏描述，仅支持 Android 平台*/ 
	fenceDesc:string,

	/**创建者（entity标识），仅支持 Android 平台*/ 
	creator:string,

	/**生效周期，仅支持 Android 平台*/ 
	validCycle:number,

	/**（可选项）报警条件，仅支持 Android 平台*/ 
	alarmCondition?:number,

}

interface baiduTrace_deleteFence_Params {
	/**开发者创建的鹰眼服务的ID，iOS 平台上忽略此参数*/ 
	serviceId:number,

	/**要删除的地理围栏的 ID 数组*/ 
	fenceId:number,

	/**被监控对象entity，仅支持 iOS 平台*/ 
	monitor:number,

}

interface baiduTrace_queryMonitoredStatus_Params {
	/**开发者创建的鹰眼服务ID，在 ios 平台忽略本参数*/ 
	serviceId:number,

	/**要查询的围栏ID*/ 
	fenceId:number,

	/**监控对象列表（多个entityName，以英文逗号"," 分割），ios平台仅读取第一个*/ 
	monitoredPersons:string,

}

interface baiduTrace_queryFenceHistoryAlarmInfo_Params {
	/**开发者创建的鹰眼服务ID，在 iOS 平台上会忽略本参数*/ 
	serviceId:number,

	/**要查询的围栏ID*/ 
	fenceId:number,

	/**监控对象列表（多个entityName，以英文逗号"," 分割），ios平台上获取第一个*/ 
	monitoredPersons:string,

	/**开始时间（unix时间戳）*/ 
	startTime:number,

	/**结束时间（unix时间戳）*/ 
	endTime:number,

}

interface baiduTrace_addEntity_Params {
	/**开发者创建的鹰眼服务ID*/ 
	serviceId:number,

	/**entity名称，作为其唯一标识*/ 
	entityName:string,

	/**entity的可读性描述*/ 
	entityDES:string,

	/**属性名称（格式 : "key1=value1,key2=value2......."）*/ 
	columnKey:string,

}

interface baiduTrace_queryTrackCache_Params {
	/**开发者创建的鹰眼服务ID*/ 
	serviceId:number,

	/**entity名称组成的数组*/ 
	entityNames:Array,

	/**请求标识*/ 
	tag:number,

}

interface baiduTrace_clearTrackCache_Params {
	/**开发者创建的鹰眼服务ID*/ 
	serviceId:number,

	/**entity信息组成的数组*/ 
	entities:JSON,

	/**请求标识*/ 
	tag:number,

}

interface szcaSDK {
	/**
	 * `初始化`
	 * ========params==========
	 *
	 * `account` :string : 账号。
	 *
	 * `password` :string : 密码
	 */
	sofInitialize(params:szcaSDK_sofInitialize_Params, callback?: (ret:JSON) => void):void

	/** 下载证书*/ 
	sofRequestCert():void

	/** 获取用户证书的序列号*/ 
	sofGetCertSerialNo(callback?: (ret:JSON) => void):void

	/** 查询证书有效性*/ 
	sofValidataCertificate(callback?: (ret:JSON) => void):void

	/** 生成随机数*/ 
	sofGenRandom(callback?: (ret:JSON) => void):void

	/** 清空内存数据*/ 
	sofWipeData():void

	/** 获取用户证书信息*/ 
	sofGetCertInfo(callback?: (ret:JSON) => void):void

}
interface szcaSDK_sofInitialize_Params {
	/**账号。*/ 
	account:string,

	/**密码*/ 
	password:string,

}

interface appsee {
	/** ### **示例代码：***/ 
	start():void

	/** 设置用户id*/ 
	setUserId():void

	/** 监听打开一个页面*/ 
	startPage():void

	/** 设置位置*/ 
	setLocation():void

	/** 自定义事件*/ 
	addEvent():void

	/** 停止屏幕录制*/ 
	stopVideo():void

	/** 暂停屏幕录制*/ 
	pauseVideo():void

	/** 恢复屏幕录制*/ 
	resumeVideo():void

	/** 设置跟踪状态*/ 
	setOptOutStatus():void

	/** 获取跟踪状态*/ 
	getOptOutStatus():void

	/** 结束一个会话跟踪，同时上报 appsee 服务器。*/ 
	finishSession():void

	/** 当前没有运行的回话时，开启一个新的会话。*/ 
	forceNewSession():void

	/** 上传当前会话监听到的行为。*/ 
	upload():void

	/** 标记一个敏感页面,本接口暂仅支持ios平台*/ 
	markViewAsSensitive():void

	/** 解除页面的敏感,本接口暂仅支持ios平台*/ 
	unmarkViewAsSensitive():void

	/** 生成第三方平台的Appsee ID*/ 
	generate3rdPartyID():void

	/** 添加跟踪的监听*/ 
	addEventListener():void

	/** 设置laog输出，本接口暂仅支持ios平台*/ 
	setDebugToNSLog():void

}
interface udesk {
	/** 设置语言*/ 
	setLanguage():void

}
interface baichuan {
	/**
	 * `通过url打开商品详情页`
	 * ========params==========
	 *
	 * `url` :string : 官方说是套件名称,留着备用,一般不传此字段即可,可以看看百川官方说明
	 */
	showUrlPage(params:baichuan_showUrlPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通过商品id打开淘宝详情页`
	 * ========params==========
	 *
	 * `itemid` :string : 联盟的pid
	 */
	showItemDetailPage(params:baichuan_showItemDetailPage_Params, callback?: (ret:JSON) => void):void

	/** 显示百川授权登录页面,成功后回调用户信息*/ 
	showLogin(callback?: (ret:JSON) => void):void

	/** 获取用户信息*/ 
	getUserInfo(callback?: (ret:JSON) => void):void

	/** 退出登录*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 打开店铺*/ 
	showShopPage(callback?: (ret:JSON) => void):void

	/** 打开我的订单页面*/ 
	showMyOrders(callback?: (ret:JSON) => void):void

	/** 显示我的购物车*/ 
	showMyCar():void

	/**
	 * `获取某网站的cookie(附增功能,如果想调用淘宝任意数据,可以自己拿cookie然后破解吧)`
	 * ========params==========
	 *
	 * `url` :string : 获取某网站的cookie
	 */
	getCookies(params:baichuan_getCookies_Params, callback?: (ret:JSON) => void):void

}
interface baichuan_showUrlPage_Params {
	/**官方说是套件名称,留着备用,一般不传此字段即可,可以看看百川官方说明*/ 
	url:string,

}

interface baichuan_showItemDetailPage_Params {
	/**联盟的pid*/ 
	itemid:string,

}

interface baichuan_getCookies_Params {
	/**获取某网站的cookie*/ 
	url:string,

}

interface wyLive {
	/**
	 * `初始化默认推流引擎`
	 * ========params==========
	 *
	 * `url` :string : 直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID
	 */
	defaultStream(params:wyLive_defaultStream_Params):void

	/**
	 * `直播推流引擎初始化，不仅设置直播推流的地址，同时提供直播中视频相关参数设置`
	 * ========params==========
	 *
	 * `url` :string : 直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID
	 *
	 * `videoParaCtx` :JSON : （可选项）直播推流视频参数配置
	 */
	videoParaCtxStream(params:wyLive_videoParaCtxStream_Params):void

	/**
	 * `初始化直播推流引擎，不仅设置直播推流地址，同时提供直播中所有可配置参数设置`
	 * ========params==========
	 *
	 * `url` :string : 直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID
	 *
	 * `paraCtx` :JSON : （可选项）直播推流视频参数配置
	 */
	initStream(params:wyLive_initStream_Params):void

	/** 反初始化：释放直播推流所占系统资源*/ 
	unInitLiveStream():void

	/**
	 * `设置推流url`
	 * ========params==========
	 *
	 * `url` :string : 直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID
	 */
	setPushUrl(params:wyLive_setPushUrl_Params):void

	/**
	 * `设置视频关键参数`
	 * ========params==========
	 *
	 * `quality` :string : （可选项）直播视频流质量
	 *
	 * `bitrate` :number : （可选项）推流码率 default 会按照分辨率设置，取值范围：
	 *
	 * `fps` :number : （可选项）采集帧率，取值范围：
	 *
	 * `orientation` :string : （可选项）摄像头采集方向
	 */
	setVideoParameters(params:wyLive_setVideoParameters_Params):void

	/** 准备开始推流接口*/ 
	startLiveStream(callback?: (ret:JSON) => void):void

	/** 重启开始视频推流，需要先启动推流startLiveStream，开启音视频推流，才可以中断视频推流，重启视频推流*/ 
	resumeVideoLiveStream():void

	/** 中断视频推流，需要先启动推流startLiveStream，开启音视频推流，才可以中断视频推流，重启视频推流*/ 
	pauseVideoLiveStream():void

	/** 重启音频推流，需要先启动推流startLiveStream，开启音视频推流，才可以中断音频推流，重启音频推流。*/ 
	resumeAudioLiveStream():void

	/** 中断音频推流，需要先启动推流startLiveStream，开启音视频推流，才可以中断音频推流，重启音频推流。*/ 
	pauseAudioLiveStream():void

	/** 监听推流*/ 
	addStreamListener():void

	/** 结束推流*/ 
	stopLiveStream(callback?: (ret:JSON) => void):void

	/**
	 * `开启预览窗口（相当于 open 一个 frame）`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	startVideoPreview(params:wyLive_startVideoPreview_Params):void

	/** 暂停视频预览，如果正在直播，则同时关闭视频预览以及视频推流*/ 
	pauseVideoPreview():void

	/** 继续视频预览，如果正在直播，则开始视频推流*/ 
	resumeVideoPreview():void

	/**
	 * `本地录制部分（目前仅支持flv），开始录制并保存本地文件`
	 * ========params==========
	 *
	 * `recordFileName` :string : 本地录制的文件路径，要求本地路径（支持widget://、fs://）
	 */
	startRecord(params:wyLive_startRecord_Params, callback?: (ret:JSON) => void):void

	/** 停止本地录制*/ 
	stopRecord():void

	/**
	 * `开始播放混音文件`
	 * ========params==========
	 *
	 * `musicPath` :string : 音频文件地址/文件名，要求本地路径（支持widget://、fs://）
	 *
	 * `enableLoop` :boolean : （可选项）当前音频文件是否单曲循环
	 */
	startPlayMusic(params:wyLive_startPlayMusic_Params, callback?: (ret:JSON) => void):void

	/** 结束播放混音文件，释放播放文件*/ 
	stopPlayMusic():void

	/** 继续播放混音文件*/ 
	resumePlayMusic():void

	/** 中断播放混音文件*/ 
	pausePlayMusic():void

	/**
	 * `设置混音强度`
	 * ========params==========
	 *
	 * `value` :number : （可选项）混音强度范围【1-10】
	 */
	setMixIntensity(params:wyLive_setMixIntensity_Params):void

	/**
	 * `设置美颜`
	 * ========params==========
	 *
	 * `type` :string : （可选项）美颜类型
	 */
	setFilter(params:wyLive_setFilter_Params):void

	/**
	 * `设置磨皮滤镜强度`
	 * ========params==========
	 *
	 * `value` :number : 滤镜强度
	 */
	setSmoothFilterIntensity(params:wyLive_setSmoothFilterIntensity_Params):void

	/**
	 * `设置对比度滤镜强度`
	 * ========params==========
	 *
	 * `value` :number : 滤镜强度
	 */
	setContrastFilterIntensity(params:wyLive_setContrastFilterIntensity_Params):void

	/** 切换前后摄像头，任意时刻的前后摄像头切换功能*/ 
	switchCamera():void

	/**
	 * `如果已经通过 cameraFlash （videoParaCtxStream initStream接口内的参数）开启了摄像头闪关灯功能，你可以在任意时刻实时打开或关闭摄像头闪关灯。`
	 * ========params==========
	 *
	 * `flash` :boolean : （可选项）闪光灯开关
	 */
	switchFlash(params:wyLive_switchFlash_Params):void

	/** 获取当前摄像头的拉伸值*/ 
	getZoomScale():void

	/** 获取摄像头最大拉伸值*/ 
	getMaxZoomScale():void

	/**
	 * `如果已经通过 zoom （videoParaCtxStream initStream接口内的参数）开启了摄像头 zoom 功能，你可以在任意时刻实时改变最大 zoom 拉伸值 和 实时 zoom 拉伸值。`
	 * ========params==========
	 *
	 * `zoomScale` :number : 摄像头拉伸值
	 */
	setZoomScale(params:wyLive_setZoomScale_Params):void

	/**
	 * `添加水印`
	 * ========params==========
	 *
	 * `image` :string : 水印图片地址，要求本地路径（fs://、widget://）
	 *
	 * `rect` :JSON : （可选项）水印图片的在预览视频区域的位置及尺寸
	 *
	 * `location` :string : （可选项）水印图片在预览视频区域的的位置
	 */
	addWaterMark(params:wyLive_addWaterMark_Params):void

	/**
	 * `关闭本地预览静态水印`
	 * ========params==========
	 *
	 * `close` :boolean : 是否关闭
	 */
	closePreviewWaterMark(params:wyLive_closePreviewWaterMark_Params):void

	/**
	 * `关闭本地预览动态水印`
	 * ========params==========
	 *
	 * `close` :boolean : 是否关闭
	 */
	closePreviewDynamicWaterMark(params:wyLive_closePreviewDynamicWaterMark_Params):void

	/** 清除水印*/ 
	cleanWaterMark():void

	/** 直播统计信息监听*/ 
	addStatisticInfoListener():void

	/** 获取当前视频截图*/ 
	getFrameImage():void

	/**
	 * `设置trace 的level，loglevl trace 信息的级别`
	 * ========params==========
	 *
	 * `logLevel` :string : 信息的级别
	 */
	setTraceLevel(params:wyLive_setTraceLevel_Params):void

	/**
	 * `设置是否输出 log 到文件`
	 * ========params==========
	 *
	 * `isToFile` :boolean : 是否输出 log 文件
	 */
	isLogToFile(params:wyLive_isLogToFile_Params):void

	/** 获取当前sdk的版本号*/ 
	getSDKVersionID():void

	/**
	 * `测速之前设置测速次数和上传数据大小`
	 * ========params==========
	 *
	 * `count` :number : （可选项）测速次数，测速之后，取平均值返回结果
	 *
	 * `capacity` :number : （可选项）上传数据大小(仅限于文件上传类型,经测试，NTS2不能超过500k（含500k)),单位是字节，500k＝500*1024，控制最大不超过10M
	 */
	setSpeedCacl(params:wyLive_setSpeedCacl_Params):void

	/**
	 * `开始测速`
	 * ========params==========
	 *
	 * `url` :string : 测速地址
	 */
	startSpeedCalc(params:wyLive_startSpeedCalc_Params, callback?: (ret:JSON) => void):void

	/**  结束测速*/ 
	stopSpeedCalc():void

}
interface wyLive_defaultStream_Params {
	/**直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID*/ 
	url:string,

}

interface wyLive_videoParaCtxStream_Params {
	/**直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID*/ 
	url:string,

	/**（可选项）直播推流视频参数配置*/ 
	videoParaCtx?:JSON,

}

interface wyLive_initStream_Params {
	/**直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID*/ 
	url:string,

	/**（可选项）直播推流视频参数配置*/ 
	paraCtx?:JSON,

}

interface wyLive_setPushUrl_Params {
	/**直播推流地址，直播推流地址由 [网易视频云](https://vcloud.163.com) 注册用户通过调用服务端api产生，或者从官网管理平台手动创建频道获得，格式如：rtmp://pxxxx.live.126.net/live/channelID*/ 
	url:string,

}

interface wyLive_setVideoParameters_Params {
	/**（可选项）直播视频流质量*/ 
	quality?:string,

	/**（可选项）推流码率 default 会按照分辨率设置，取值范围：*/ 
	bitrate?:number,

	/**（可选项）采集帧率，取值范围：*/ 
	fps?:number,

	/**（可选项）摄像头采集方向*/ 
	orientation?:string,

}

interface wyLive_startVideoPreview_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface wyLive_startRecord_Params {
	/**本地录制的文件路径，要求本地路径（支持widget://、fs://）*/ 
	recordFileName:string,

}

interface wyLive_startPlayMusic_Params {
	/**音频文件地址/文件名，要求本地路径（支持widget://、fs://）*/ 
	musicPath:string,

	/**（可选项）当前音频文件是否单曲循环*/ 
	enableLoop?:boolean,

}

interface wyLive_setMixIntensity_Params {
	/**（可选项）混音强度范围【1-10】*/ 
	value?:number,

}

interface wyLive_setFilter_Params {
	/**（可选项）美颜类型*/ 
	type?:string,

}

interface wyLive_setSmoothFilterIntensity_Params {
	/**滤镜强度*/ 
	value:number,

}

interface wyLive_setContrastFilterIntensity_Params {
	/**滤镜强度*/ 
	value:number,

}

interface wyLive_switchFlash_Params {
	/**（可选项）闪光灯开关*/ 
	flash?:boolean,

}

interface wyLive_setZoomScale_Params {
	/**摄像头拉伸值*/ 
	zoomScale:number,

}

interface wyLive_addWaterMark_Params {
	/**水印图片地址，要求本地路径（fs://、widget://）*/ 
	image:string,

	/**（可选项）水印图片的在预览视频区域的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）水印图片在预览视频区域的的位置*/ 
	location?:string,

}

interface wyLive_closePreviewWaterMark_Params {
	/**是否关闭*/ 
	close:boolean,

}

interface wyLive_closePreviewDynamicWaterMark_Params {
	/**是否关闭*/ 
	close:boolean,

}

interface wyLive_setTraceLevel_Params {
	/**信息的级别*/ 
	logLevel:string,

}

interface wyLive_isLogToFile_Params {
	/**是否输出 log 文件*/ 
	isToFile:boolean,

}

interface wyLive_setSpeedCacl_Params {
	/**（可选项）测速次数，测速之后，取平均值返回结果*/ 
	count?:number,

	/**（可选项）上传数据大小(仅限于文件上传类型,经测试，NTS2不能超过500k（含500k)),单位是字节，500k＝500*1024，控制最大不超过10M*/ 
	capacity?:number,

}

interface wyLive_startSpeedCalc_Params {
	/**测速地址*/ 
	url:string,

}

interface huaweiPush {
	/** 初始化推送服务*/ 
	init(callback?: (ret:JSON) => void):void

	/** 获取token*/ 
	getToken(callback?: (ret:JSON) => void):void

	/** 删除token*/ 
	deleteToken(callback?: (ret:JSON) => void):void

	/** 获取当前推送状态*/ 
	getState(callback?: (ret:JSON) => void):void

	/** 设置是否接受推送消息*/ 
	setPassByMsg():void

	/** 监听推送信息*/ 
	pushListener(callback?: (ret:JSON) => void):void

	/** 监听点击推送信息事件*/ 
	eventListener(callback?: (ret:JSON) => void):void

	/** 设置桌面角标*/ 
	setBadge(callback?: (ret:JSON) => void):void

}
interface analysysAPICloudSDK {
}
interface rcIM {
	/**
	 * `设置私有部署的导航服务器和媒体服务器地址。 此方法要在 init() 前使用 可以支持设置 http://cn.xxx.com 或者 cn.xxx.com 如果设置成 cn.xxx.com，sdk 会组装成并仅支持 http:// 协议格式。 支持传入多个导航, 多个导航地址之间须以分号 ; 分隔`
	 * ========params==========
	 *
	 * `naviServer` :string : 私有部署的导航服务器地址
	 *
	 * `fileServer` :string : 私有部署的媒体服务器地址，即文件和图片的上传地址。使用私有云时必须填写
	 *
	 * `naviServer` :string : 私有部署的导航服务器地址
	 *
	 * `fileServer` :string : 私有部署的媒体服务器地址，即文件和图片的上传地址。使用私有云时必须填写
	 */
	setServerInfo(params:rcIM_setServerInfo_Params):void

	/**
	 * `初始化融云 SDK，调用 connect 连接前务必保证调用此方法`
	 * ========params==========
	 *
	 * `miPush` :JSON : (可选项)配置小米推送的信息
	 *
	 * `huaweiPush` :boolean : (可选项) 是否集成华为推送
	 *
	 * `miPush` :JSON : (可选项)配置小米推送的信息
	 *
	 * `huaweiPush` :boolean : (可选项) 是否集成华为推送
	 */
	init(params:rcIM_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `连接融云 IM 服务器，进行后续各种方法操作前务必要先调用此方法`
	 * ========params==========
	 *
	 * `token` :string : 从服务端获取的用户身份令牌（Token）
	 *
	 * `token` :string : 从服务端获取的用户身份令牌（Token）
	 */
	connect(params:rcIM_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `断开连接`
	 * ========params==========
	 *
	 * `isReceivePush` :boolean : （可选项）断开后是否接收 Push
	 *
	 * `isReceivePush` :boolean : （可选项）断开后是否接收 Push
	 */
	disconnect(params:rcIM_disconnect_Params, callback?: (ret:JSON) => void):void

	/** 设置连接状态变化的监听器，请在调用 init 方法之后，调用 connect 方法之前设置*/ 
	setConnectionStatusListener(callback?: (ret:JSON) => void):void

	/** 获取连接状态*/ 
	getConnectionStatus(callback?: (ret:JSON) => void):void

	/** 获取当前连接用户的信息*/ 
	getCurrentUserId(callback?: (ret:JSON) => void):void

	/**
	 * `发送文字消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `text` :string : 消息的文字内容
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `mentionedInfo` :JSON : （可选项）@功能，当conversationType为GROUP或DISCUSSION有效；(ios不支持DISCUSSION)；注：＠ 消息推送会越过所有免打扰逻辑，给用户推送 Push 通知。
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `text` :string : 消息的文字内容
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `mentionedInfo` :JSON : （可选项）@功能，当conversationType为GROUP或DISCUSSION有效；(ios不支持DISCUSSION)；注：＠ 消息推送会越过所有免打扰逻辑，给用户推送 Push 通知。
	 */
	sendTextMessage(params:rcIM_sendTextMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `imagePath` :string : 图片的路径，支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `isFull` :boolean : （可选项）是否发送原图
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `imagePath` :string : 图片的路径，支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `isFull` :boolean : （可选项）是否发送原图
	 */
	sendImageMessage(params:rcIM_sendImageMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送 GIF 消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `imagePath` :string : 图片的路径，仅支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : 消息的附加信息
	 *
	 * `width` :number : gif 图宽度
	 *
	 * `height` :number : gif 图高度
	 */
	sendGifMessage(params:rcIM_sendGifMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送语音消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `voicePath` :string : 语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式
	 *
	 * `duration` :number : 语音消息的时长，单位为秒
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `voicePath` :string : 语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式
	 *
	 * `duration` :number : 语音消息的时长，单位为秒
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 */
	sendVoiceMessage(params:rcIM_sendVoiceMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送高清语音消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `voicePath` :string : 语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式
	 *
	 * `duration` :number : 语音消息的时长，单位为秒
	 *
	 * `extra` :string : 消息的附加信息
	 */
	sendHQVoiceMessage(params:rcIM_sendHQVoiceMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文件消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `filePath` :string : 文件的路径，仅支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : 消息的附加信息
	 */
	sendFileMessage(params:rcIM_sendFileMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送小视频消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `sightPath` :string : 小视频的路径，仅支持 fs://，如：fs:///image/123.jpg
	 *
	 * `thumbPath` :string : 缩略图的路径，仅支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : 消息的附加信息
	 *
	 * `duration` :number : 小视频时长
	 */
	sendSightMessage(params:rcIM_sendSightMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `latitude` :number : 纬度
	 *
	 * `longitude` :number : 经度
	 *
	 * `poi` :string : 兴趣点
	 *
	 * `imagePath` :string : 地图缩率图的路径，支持 fs://，如：fs:///location_thumb/123.jpg
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `latitude` :number : 纬度
	 *
	 * `longitude` :number : 经度
	 *
	 * `poi` :string : 兴趣点
	 *
	 * `imagePath` :string : 地图缩率图的路径，支持 fs://，如：fs:///location_thumb/123.jpg
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 */
	sendLocationMessage(params:rcIM_sendLocationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图文消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `title` :string : 消息的标题
	 *
	 * `description` :string : 消息的内容描述
	 *
	 * `imageUrl` :string : 消息图片的网络地址
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `title` :string : 消息的标题
	 *
	 * `description` :string : 消息的内容描述
	 *
	 * `imageUrl` :string : 消息图片的网络地址
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 */
	sendRichContentMessage(params:rcIM_sendRichContentMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送命令消息，可以用来实现任何自定义消息的发送`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `name` :string : 命令的名称
	 *
	 * `data` :string : 命令的数据
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `name` :string : 命令的名称
	 *
	 * `data` :string : 命令的数据
	 */
	sendCommandNotificationMessage(params:rcIM_sendCommandNotificationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送命令消息，您需要这种类型的消息时可以直接使用，不需要再自定义。此消息不保存、不计数。`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `name` :string : 命令的名称
	 *
	 * `data` :string : 命令的数据
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `name` :string : 命令的名称
	 *
	 * `data` :string : 命令的数据
	 */
	sendCommandMessage(params:rcIM_sendCommandMessage_Params, callback?: (ret:JSON) => void):void

	/** 设置接收消息的监听器，请在调用 init 方法之后，调用 connect 方法之前设置*/ 
	setOnReceiveMessageListener(callback?: (ret:JSON) => void):void

	/**
	 * `发送单聊中消息已读的回执`
	 * ========params==========
	 *
	 * `targetId` :string : 目标会话ID
	 *
	 * `timestamp` :number : 该会话中已阅读的最后一条消息的发送时间戳
	 *
	 * `targetId` :string : 目标会话ID
	 *
	 * `timestamp` :number : 该会话中已阅读的最后一条消息的发送时间戳
	 */
	sendReadReceiptMessage(params:rcIM_sendReadReceiptMessage_Params, callback?: (ret:JSON) => void):void

	/** 添加收到已读回执的监听*/ 
	addReceiveReadReceiptListener():void

	/** 监听撤回消息*/ 
	setOnMessageRecalledListener():void

	/**
	 * `发起群组消息回执请求。只能对自己发送的消息发起消息回执请求。`
	 * ========params==========
	 *
	 * `messageId` :number : 消息id
	 *
	 * `messageId` :number : 消息id
	 */
	sendReadReceiptRequest(params:rcIM_sendReadReceiptRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加消息回执监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `target` :string : 要监听的事件
	 */
	addReadReceiptListener(params:rcIM_addReadReceiptListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除消息回执监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `target` :string : 要监听的事件
	 */
	removeReadReceiptListener(params:rcIM_removeReadReceiptListener_Params):void

	/**
	 * `如果在会话中收到了回执请求，接收者需要在合适的时机响应该请求，以通知发送者自己已经阅读了该消息。`
	 * ========params==========
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : targetId
	 *
	 * `messageId` :number : 消息id
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : targetId
	 *
	 * `messageId` :number : 消息id
	 */
	sendReadReceiptResponse(params:rcIM_sendReadReceiptResponse_Params, callback?: (ret:JSON) => void):void

	/** 获取当前用户离线消息时间*/ 
	getOfflineMessageDuration(callback?: (ret:JSON) => void):void

	/**
	 * `设置当前用户离线消息存储时间`
	 * ========params==========
	 *
	 * `duration` :number : (可选项)用户离线消息存储时间（以天为单位），范围【1~7天】
	 *
	 * `duration` :number : (可选项)用户离线消息存储时间（以天为单位），范围【1~7天】
	 */
	setOfflineMessageDuration(params:rcIM_setOfflineMessageDuration_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话的最新消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `count` :number : 要获取的消息数量
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `count` :number : 要获取的消息数量
	 */
	getLatestMessages(params:rcIM_getLatestMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置是否将用户信息携带到消息中`
	 * ========params==========
	 *
	 * `attached` :boolean : 是否将用户信息携带到消息中
	 */
	setMessageAttachedUserInfo(params:rcIM_setMessageAttachedUserInfo_Params):void

	/**
	 * `获取某一会话的历史消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1
	 *
	 * `count` :number : 要获取的消息数量
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1
	 *
	 * `count` :number : 要获取的消息数量
	 */
	getHistoryMessages(params:rcIM_getHistoryMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `按照消息类型获取历史消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 消息类型标识
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1
	 *
	 * `count` :number : 要获取的消息数量
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 消息类型标识
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1
	 *
	 * `count` :number : 要获取的消息数量
	 */
	getHistoryMessagesByObjectName(params:rcIM_getHistoryMessagesByObjectName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取历史消息记录（特别说明：调用此方法需要开启历史消息漫游；当用户因换设备或重装app导致本地本地存储丢失的情况，可用此方法获取记录；此方法返回值中messageId均为0，融云服务器不会保存此值）`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)；不支持传入 RCConversationType.CHATROOM。
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `dateTime ` :any : 从该时间点开始获取消息。即：消息中的 sentTime；第一次可传 0，再次取值此参数可传入上一次获取的最后一条记录的sentTime值。
	 *
	 * `count` :number : 要获取的消息数量（1-20条）
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)；不支持传入 RCConversationType.CHATROOM。
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `dateTime ` :any : 从该时间点开始获取消息。即：消息中的 sentTime；第一次可传 0，再次取值此参数可传入上一次获取的最后一条记录的sentTime值。
	 *
	 * `count` :number : 要获取的消息数量（1-20条）
	 */
	getRemoteHistoryMessages(params:rcIM_getRemoteHistoryMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除指定的一条或者一组消息`
	 * ========params==========
	 *
	 * `messageIds` :Array : 要删除的消息 Id 数组
	 *
	 * `messageIds` :Array : 要删除的消息 Id 数组
	 */
	deleteMessages(params:rcIM_deleteMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清空某一会话的所有聊天消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	clearMessages(params:rcIM_clearMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `撤回消息`
	 * ========params==========
	 *
	 * `messageId` :string : 消息ID
	 *
	 * `messageId` :string : 消息ID
	 */
	recallMessage(params:rcIM_recallMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `同步会话阅读状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : targetId
	 *
	 * `time` :number : 已经阅读的最后一条消息的Unix时间戳(毫秒)
	 */
	syncConversationReadStatus(params:rcIM_syncConversationReadStatus_Params, callback?: (ret:JSON) => void):void

	/** 获取所有未读消息数*/ 
	getTotalUnreadCount(callback?: (ret:JSON) => void):void

	/**
	 * `获取来自某用户（某会话）的未读消息数`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getUnreadCount(params:rcIM_getUnreadCount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某（些）会话类型的未读消息数`
	 * ========params==========
	 *
	 * `conversationTypes` :Array : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `conversationTypes` :Array : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 */
	getUnreadCountByConversationTypes(params:rcIM_getUnreadCountByConversationTypes_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某会话里未读的@消息。`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getUnreadMentionedMessages(params:rcIM_getUnreadMentionedMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置接收到的消息状态`
	 * ========params==========
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `receivedStatus` :string : 设置接收到的消息状态，参见 [接收到的消息状态](#receivedStatus)
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `receivedStatus` :string : 设置接收到的消息状态，参见 [接收到的消息状态](#receivedStatus)
	 */
	setMessageReceivedStatus(params:rcIM_setMessageReceivedStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置消息发送状态`
	 * ========params==========
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `sentStatus ` :string : 发送出的消息的状态枚举，参见 [发送状态](#sentStatus)；
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `sentStatus ` :string : 发送出的消息的状态枚举，参见 [发送状态](#sentStatus)；
	 */
	setMessageSentStatus(params:rcIM_setMessageSentStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除某一会话的消息未读状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	clearMessagesUnreadStatus(params:rcIM_clearMessagesUnreadStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向会话中发送正在输入的状态。`
	 * ========params==========
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。
	 */
	sendTypingStatus(params:rcIM_sendTypingStatus_Params):void

	/** 监听对方输入状态*/ 
	addTypingStatusListener():void

	/**
	 * `设置消息的附加信息，此信息只保存在本地`
	 * ========params==========
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `value` :string : 消息附加信息，最大 1024 字节
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `value` :string : 消息附加信息，最大 1024 字节
	 */
	setMessageExtra(params:rcIM_setMessageExtra_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话的文字消息草稿`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getTextMessageDraft(params:rcIM_getTextMessageDraft_Params, callback?: (ret:JSON) => void):void

	/**
	 * `保存某一会话的文字消息草稿`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `content` :string : 草稿的文字内容
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `content` :string : 草稿的文字内容
	 */
	saveTextMessageDraft(params:rcIM_saveTextMessageDraft_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除某一会话的文字消息草稿`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	clearTextMessageDraft(params:rcIM_clearTextMessageDraft_Params, callback?: (ret:JSON) => void):void

	/** 获取会话列表*/ 
	getConversationList(callback?: (ret:JSON) => void):void

	/** 获取置顶会话列表*/ 
	getTopConversationList():void

	/**
	 * `获取屏蔽消息的会话列表`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)(ios不支持)
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)(ios不支持)
	 */
	getBlockedConversationList(params:rcIM_getBlockedConversationList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分页获取会话列表`
	 * ========params==========
	 *
	 * `typeList` :Array : （可选项）回话类型组成的数组
	 *
	 * `count` :number : （可选项）获取的数量
	 *
	 * `startTime` :number : （可选项）会话的时间戳（获取这个时间戳之前的会话列表，0表示从最新开始获取）
	 *
	 * `typeList` :Array : （可选项）回话类型组成的数组
	 *
	 * `count` :number : （可选项）获取的数量
	 *
	 * `startTime` :number : （可选项）会话的时间戳（获取这个时间戳之前的会话列表，0表示从最新开始获取）
	 */
	getConversationListByCount(params:rcIM_getConversationListByCount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话信息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getConversation(params:rcIM_getConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从会话列表中移除某一会话，但是不删除会话内的消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	removeConversation(params:rcIM_removeConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清空所有会话及会话消息`
	 * ========params==========
	 *
	 * `conversationTypes` :Array : 消息的会话类型组成的数组，参见 [会话类型](!Constant#conversationType)
	 *
	 * `conversationTypes` :Array : 消息的会话类型组成的数组，参见 [会话类型](!Constant#conversationType)
	 */
	clearConversations(params:rcIM_clearConversations_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置某一会话为置顶或者取消置顶`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `isTop` :boolean : 是否置顶
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `isTop` :boolean : 是否置顶
	 */
	setConversationToTop(params:rcIM_setConversationToTop_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话信息数量`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getMessageCount(params:rcIM_getMessageCount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `搜索本地历史消息`
	 * ========params==========
	 *
	 * `conversationTypes` :Array : 搜索的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `objectNames` :Array : 搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息
	 *
	 * `keyword` :string : 搜索的关键字
	 *
	 * `conversationTypes` :Array : 搜索的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `objectNames` :Array : 搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息
	 *
	 * `keyword` :string : 搜索的关键字
	 */
	searchConversations(params:rcIM_searchConversations_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据会话，搜索本地历史消息。`
	 * ========params==========
	 *
	 * `conversationType` :string : 指定的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 指定的会话 id
	 *
	 * `keyword` :string : 搜索的关键字
	 *
	 * `count` :number : 返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回
	 *
	 * `beginTime` :number : 查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）
	 *
	 * `conversationType` :string : 指定的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 指定的会话 id
	 *
	 * `keyword` :string : 搜索的关键字
	 *
	 * `count` :number : 返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回
	 *
	 * `beginTime` :number : 查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）
	 */
	searchMessages(params:rcIM_searchMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建讨论组`
	 * ========params==========
	 *
	 * `name` :string : 讨论组名称，如：当前所有成员的名字的组合。
	 *
	 * `userIdList` :Array : 讨论组成员 Id 列表
	 *
	 * `name` :string : 讨论组名称，如：当前所有成员的名字的组合。
	 *
	 * `userIdList` :Array : 讨论组成员 Id 列表
	 */
	createDiscussion(params:rcIM_createDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取讨论组信息和设置`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `discussionId` :string : 讨论组 Id
	 */
	getDiscussion(params:rcIM_getDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置讨论组名称`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `name` :string : 讨论组名称
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `name` :string : 讨论组名称
	 */
	setDiscussionName(params:rcIM_setDiscussionName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加一名或者一组用户加入讨论组`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `userIdList` :Array : 邀请的用户 Id 列表
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `userIdList` :Array : 邀请的用户 Id 列表
	 */
	addMemberToDiscussion(params:rcIM_addMemberToDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `供创建者将某用户移出讨论组`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `userId` :string : 用户 Id
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `userId` :string : 用户 Id
	 */
	removeMemberFromDiscussion(params:rcIM_removeMemberFromDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `退出当前用户所在的某讨论组`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `discussionId` :string : 讨论组 Id
	 */
	quitDiscussion(params:rcIM_quitDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置讨论组成员邀请权限`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `inviteStatus` :string : 邀请状态，默认为开放，参见 [讨论组邀请状态](!Constant#discussionInviteStatus)
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `inviteStatus` :string : 邀请状态，默认为开放，参见 [讨论组邀请状态](!Constant#discussionInviteStatus)
	 */
	setDiscussionInviteStatus(params:rcIM_setDiscussionInviteStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `当前用户加入某聊天室`
	 * ========params==========
	 *
	 * `chatRoomId` :string : 聊天室 Id
	 *
	 * `defMessageCount` :number : 进入聊天室拉取消息数目
	 *
	 * `chatRoomId` :string : 聊天室 Id
	 *
	 * `defMessageCount` :number : 进入聊天室拉取消息数目
	 */
	joinChatRoom(params:rcIM_joinChatRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `当前用户退出某聊天室`
	 * ========params==========
	 *
	 * `chatRoomId` :string : 聊天室 Id
	 *
	 * `chatRoomId` :string : 聊天室 Id
	 */
	quitChatRoom(params:rcIM_quitChatRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将某个用户加到黑名单中`
	 * ========params==========
	 *
	 * `userId` :string : 要加入黑名单的用户 Id
	 *
	 * `userId` :string : 要加入黑名单的用户 Id
	 */
	addToBlacklist(params:rcIM_addToBlacklist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将个某用户从黑名单中移出`
	 * ========params==========
	 *
	 * `userId` :string : 要移出黑名单的用户 Id
	 *
	 * `userId` :string : 要移出黑名单的用户 Id
	 */
	removeFromBlacklist(params:rcIM_removeFromBlacklist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某用户是否在黑名单中`
	 * ========params==========
	 *
	 * `userId` :string : 要查询的用户 Id
	 *
	 * `userId` :string : 要查询的用户 Id
	 */
	getBlacklistStatus(params:rcIM_getBlacklistStatus_Params, callback?: (ret:JSON) => void):void

	/** 获取当前用户的黑名单列表*/ 
	getBlacklist():void

	/**
	 * `音视频来电事件监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `ret` :JSON : 操作结果
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `ret` :JSON : 操作结果
	 */
	addCallReceiveListener(params:rcIM_addCallReceiveListener_Params):void

	/**
	 * `移除音视频来电事件监听`
	 * ========params==========
	 *
	 * `target` :string : 要移除的来电监听的事件
	 *
	 * `target` :string : 要移除的来电监听的事件
	 */
	removeCallReceiveListener(params:rcIM_removeCallReceiveListener_Params):void

	/**
	 * `发起音视频通话`
	 * ========params==========
	 *
	 * `targetId` :string : 目标会话ID
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `mediaType` :string : （可选项）发起的通话媒体类型
	 *
	 * `userIdList` :string : （可选项）邀请的用户 ID 列表
	 *
	 * `extra` :string : （可选项）附件信息
	 *
	 * `ret` :JSON : 操作结果
	 *
	 * `targetId` :string : 目标会话ID
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `mediaType` :string : （可选项）发起的通话媒体类型
	 *
	 * `userIdList` :string : （可选项）邀请的用户 ID 列表
	 *
	 * `extra` :string : （可选项）附件信息
	 *
	 * `ret` :JSON : 操作结果
	 */
	startCall(params:rcIM_startCall_Params):void

	/**
	 * `音视频通话事件的监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `ret` :JSON : 监听事件返回，其中callOutgoing、callDidConnect、callDidDisconnect(android上会有disConnectReason参数回调)、shouldAlertForWaitingRemoteResponse、shouldRingForIncomingCall、shouldStopAlertAndRing只返回事件，无参数返回
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `ret` :JSON : 监听事件返回，其中callOutgoing、callDidConnect、callDidDisconnect(android上会有disConnectReason参数回调)、shouldAlertForWaitingRemoteResponse、shouldRingForIncomingCall、shouldStopAlertAndRing只返回事件，无参数返回
	 */
	addCallSessionListener(params:rcIM_addCallSessionListener_Params):void

	/**
	 * `移除音视频来电事件监听`
	 * ========params==========
	 *
	 * `target` :string : 要移除的来电监听的事件
	 *
	 * `target` :string : 要移除的来电监听的事件
	 */
	removeCallSessionListener(params:rcIM_removeCallSessionListener_Params):void

	/** 获取当前通话实体，通话实体中维护着当前通话的所有信息。*/ 
	getCallSession():void

	/**
	 * `判断当前是否支持音视频通话 (注:android上此接口用来判断音视频引擎是否可用)`
	 * ========params==========
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType) (android不支持)
	 *
	 * `mediaType` :string : （可选项）发起的通话媒体类型 (android不支持)
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType) (android不支持)
	 *
	 * `mediaType` :string : （可选项）发起的通话媒体类型 (android不支持)
	 */
	isCallEnabled(params:rcIM_isCallEnabled_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置本地视频属性，可用此接口设置本地视频分辨率，设置宽和高替换`
	 * ========params==========
	 *
	 * `profile` :string : （可选项）通话视频参数
	 *
	 * `profile` :string : （可选项）通话视频参数
	 */
	setVideoProfile(params:rcIM_setVideoProfile_Params):void

	/**
	 * `设置本地视频属性，是否使用默认美颜`
	 * ========params==========
	 *
	 * `enableBeauty` :boolean : （可选项）是否使用美颜
	 *
	 * `enableBeauty` :boolean : （可选项）是否使用美颜
	 */
	setEnableBeauty(params:rcIM_setEnableBeauty_Params):void

	/**
	 * `设接听来电`
	 * ========params==========
	 *
	 * `mediaType` :string : （可选项）接听使用的媒体类型 (android不支持)
	 *
	 * `callId ` :string : 呼叫id (ios不支持)
	 *
	 * `mediaType` :string : （可选项）接听使用的媒体类型 (android不支持)
	 *
	 * `callId ` :string : 呼叫id (ios不支持)
	 */
	accept(params:rcIM_accept_Params):void

	/** 挂断*/ 
	hangup():void

	/**
	 * `邀请用户加入当前通话 （仅限讨论组和群组）`
	 * ========params==========
	 *
	 * `userIds` :Array : 邀请的用户 ID 列表
	 *
	 * `observerUserIds` :Array : 邀请的观察者列表,没有观察者可以不传(iOS不支持)
	 *
	 * `userIds` :Array : 邀请的用户 ID 列表
	 *
	 * `observerUserIds` :Array : 邀请的观察者列表,没有观察者可以不传(iOS不支持)
	 */
	addParticipants(params:rcIM_addParticipants_Params):void

	/**
	 * `打开视频区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `renderModel` :string : （可选项）设视频显示模式 (android不支持)
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、#、img（本地路径）
	 *
	 * `fixedOn` :string : （可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）视频是否随所属 window 或 frame 滚动
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `renderModel` :string : （可选项）设视频显示模式 (android不支持)
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、#、img（本地路径）
	 *
	 * `fixedOn` :string : （可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）视频是否随所属 window 或 frame 滚动
	 */
	setVideoView(params:rcIM_setVideoView_Params):void

	/**
	 * `重设打开的视频区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `renderModel` :string : （可选项）设视频显示模式 (android不支持)
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、#、img（本地路径）
	 *
	 * `animationDuration` :number : （可选项）改变位置大小时添加的动画效果时长，为负数或0时表示没动画效果
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `renderModel` :string : （可选项）设视频显示模式 (android不支持)
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、#、img（本地路径）
	 *
	 * `animationDuration` :number : （可选项）改变位置大小时添加的动画效果时长，为负数或0时表示没动画效果
	 *
	 * `userId` :string : 用户 ID
	 */
	resetVideoView(params:rcIM_resetVideoView_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭移除打开的视频区域`
	 * ========params==========
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `userId` :string : 用户 ID
	 */
	removeVideoView(params:rcIM_removeVideoView_Params):void

	/** 添加视频区域的监听*/ 
	addVideoViewListener():void

	/**
	 * `改变当前通话的媒体类型`
	 * ========params==========
	 *
	 * `mediaType` :string : （可选项）接听使用的媒体类型
	 *
	 * `mediaType` :string : （可选项）接听使用的媒体类型
	 */
	changeMediaType(params:rcIM_changeMediaType_Params):void

	/** 是否是静音*/ 
	isMuted():void

	/**
	 * `设置静音`
	 * ========params==========
	 *
	 * `muted` :boolean : （可选项）是否静音
	 *
	 * `muted` :boolean : （可选项）是否静音
	 */
	setMuted(params:rcIM_setMuted_Params, callback?: (ret:JSON) => void):void

	/** 是否打开扬声器*/ 
	speakerEnabled():void

	/**
	 * `设置扬声器状态`
	 * ========params==========
	 *
	 * `speakerEnabled` :boolean : （可选项）是否开启扬声器
	 *
	 * `speakerEnabled` :boolean : （可选项）是否开启扬声器
	 */
	setSpeakerEnabled(params:rcIM_setSpeakerEnabled_Params, callback?: (ret:JSON) => void):void

	/** 是否开启摄像头*/ 
	cameraEnabled():void

	/**
	 * `设置打开摄像头`
	 * ========params==========
	 *
	 * `cameraEnabled` :boolean : （可选项）是否打开摄像头
	 *
	 * `cameraEnabled` :boolean : （可选项）是否打开摄像头
	 */
	setCameraEnabled(params:rcIM_setCameraEnabled_Params, callback?: (ret:JSON) => void):void

	/** 切换摄像头*/ 
	switchCameraMode():void

	/** 设置本地消息不提示*/ 
	disableLocalNotification(callback?: (ret:JSON) => void):void

	/** 设置本地消息提示*/ 
	enableLocalNotification(callback?: (ret:JSON) => void):void

	/**
	 * `配置本地推送相关参数`
	 * ========params==========
	 *
	 * `alertTitle` :string : 进入后台两分钟内收到通知的显示内容，不传则显示消息内容
	 *
	 * `showNickname` :boolean : 推送提示是否显示昵称，注：设置昵称的方式为：在发送消息接口的extra字段中填写昵称信息，格式为extra:{userInfo:{nickName:"用户昵称"}}
	 *
	 * `alertTitle` :string : 进入后台两分钟内收到通知的显示内容，不传则显示消息内容
	 *
	 * `showNickname` :boolean : 推送提示是否显示昵称，注：设置昵称的方式为：在发送消息接口的extra字段中填写昵称信息，格式为extra:{userInfo:{nickName:"用户昵称"}}
	 */
	configLocalNotification(params:rcIM_configLocalNotification_Params):void

	/**
	 * `获取某一会话的通知状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getConversationNotificationStatus(params:rcIM_getConversationNotificationStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置某一会话的通知状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `notificationStatus` :string : 会话通知提醒状态，参见 [会话通知提醒状态](!Constant#conversationNotificationStatus)
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `notificationStatus` :string : 会话通知提醒状态，参见 [会话通知提醒状态](!Constant#conversationNotificationStatus)
	 */
	setConversationNotificationStatus(params:rcIM_setConversationNotificationStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置消息通知免打扰时间，此方法会屏蔽该会话在该时间段的远程推送；`
	 * ========params==========
	 *
	 * `startTime` :string : 起始时间 格式 HH:MM:SS
	 *
	 * `spanMinutes` :number : 间隔分钟数 0 < spanMinutes < 1440。
	 *
	 * `startTime` :string : 起始时间 格式 HH:MM:SS
	 *
	 * `spanMinutes` :number : 间隔分钟数 0 < spanMinutes < 1440。
	 */
	setNotificationQuietHours(params:rcIM_setNotificationQuietHours_Params, callback?: (ret:JSON) => void):void

	/** 移除消息通知免打扰时间*/ 
	removeNotificationQuietHours(callback?: (ret:JSON) => void):void

	/** 获取消息通知免打扰时间*/ 
	getNotificationQuietHours():void

	/** 添加需要设置头像的时刻的监听*/ 
	addNeedAvatarListener():void

	/**
	 * `设置用户头像，此方法在 connect 成功回调之后执行`
	 * ========params==========
	 *
	 * `userId` :string : 用户id(connect成功回调返回来的id)
	 *
	 * `nickName` :string : 用户昵称
	 *
	 * `avatarUrl` :string : 头像URI
	 *
	 * `userId` :string : 用户id(connect成功回调返回来的id)
	 *
	 * `nickName` :string : 用户昵称
	 *
	 * `avatarUrl` :string : 头像URI
	 */
	setUserAvatar(params:rcIM_setUserAvatar_Params):void

	/**
	 * `刷新用户缓存数据。`
	 * ========params==========
	 *
	 * `userId` :string : 用户id(addNeedAvatarListener成功回调返回来的id)
	 *
	 * `nickName` :string : 用户昵称
	 *
	 * `avatarUrl` :string : 头像URI
	 *
	 * `userId` :string : 用户id(addNeedAvatarListener成功回调返回来的id)
	 *
	 * `nickName` :string : 用户昵称
	 *
	 * `avatarUrl` :string : 头像URI
	 */
	refreshUserInfoCache(params:rcIM_refreshUserInfoCache_Params):void

	/** 关闭会话页面*/ 
	close():void

	/** 添加点击聊天页面内头像的监听*/ 
	addAvatarListener():void

	/**
	 * `配置聊天页面的副标题；会在会话页面标题下方显示`
	 * ========params==========
	 *
	 * `titleConfig` :Array<JSON> : (必选项) 根据会话id配置会话页面的副标题
	 *
	 * `subTitleSize` :number : 可选， 副标题字体大小
	 *
	 * `subTitleColor` :string : 可选，副标题字体颜色
	 *
	 * `bgColor` :string : 可选，副标题背景颜色
	 *
	 * `bgHeight` :number : 可选，副标题背景的高度
	 *
	 * `titleConfig` :Array<JSON> : (必选项) 根据会话id配置会话页面的副标题
	 *
	 * `subTitleSize` :number : 可选， 副标题字体大小
	 *
	 * `subTitleColor` :string : 可选，副标题字体颜色
	 *
	 * `bgColor` :string : 可选，副标题背景颜色
	 *
	 * `bgHeight` :number : 可选，副标题背景的高度
	 */
	configChatSubTitle(params:rcIM_configChatSubTitle_Params):void

	/**
	 * `配置通过 openConversation 或 openConversationList接口打开的聊天页面的右上角按钮和输入框扩展面板按钮`
	 * ========params==========
	 *
	 * `pluginItems` :Array : (可选项) 聊天界面输入框扩展面板自定义显示各默认功能按钮
	 *
	 * `insertPluginItems` :Array : （可选项）聊天扩展功能面板添加自定义按钮信息组成的数组(android不支持)
	 *
	 * `rightIcon` :string : （可选项）聊天页面右上角按钮图标，要求本地路径（fs://、widget)
	 *
	 * `rightIcons` :Array : （可选项）聊天页面右上角按钮图标路径（要求本地路径fs://、widget://)组成的数组
	 *
	 * `dndIcon` :boolean : （可选项）聊天页面标题后面是否显示消息免打扰图标(此参数用来控制在调用setConversationNotificationStatus接口后是否在会话页面的标题栏后面显示消息免打扰图标)
	 *
	 * `pluginItems` :Array : (可选项) 聊天界面输入框扩展面板自定义显示各默认功能按钮
	 *
	 * `insertPluginItems` :Array : （可选项）聊天扩展功能面板添加自定义按钮信息组成的数组(android不支持)
	 *
	 * `rightIcon` :string : （可选项）聊天页面右上角按钮图标，要求本地路径（fs://、widget)
	 *
	 * `rightIcons` :Array : （可选项）聊天页面右上角按钮图标路径（要求本地路径fs://、widget://)组成的数组
	 *
	 * `dndIcon` :boolean : （可选项）聊天页面标题后面是否显示消息免打扰图标(此参数用来控制在调用setConversationNotificationStatus接口后是否在会话页面的标题栏后面显示消息免打扰图标)
	 */
	configChatButtons(params:rcIM_configChatButtons_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示对方输入状态、撤销刚（120秒）发送的消息功能配置`
	 * ========params==========
	 *
	 * `messageRecall` :boolean : (可选项) 是否开启撤销刚发送消息的功能(android不支持；sdk默认会打开此功能)
	 *
	 * `typingStatus` :boolean : (可选项) 是否显示对方输入状态
	 *
	 * `messageRecall` :boolean : (可选项) 是否开启撤销刚发送消息的功能(android不支持；sdk默认会打开此功能)
	 *
	 * `typingStatus` :boolean : (可选项) 是否显示对方输入状态
	 */
	configChat(params:rcIM_configChat_Params):void

	/**
	 * `配置群聊相关功能。`
	 * ========params==========
	 *
	 * `messageMentioned` :boolean : (可选项) 是否开启@功能
	 *
	 * `members` :Array : 群组成员id列表，若不传则@功能和群组红包功能均会失效(android不支持)
	 *
	 * `membersInfo` :Array<JSON> : 群组成员信息列表(ios不支持)
	 *
	 * `messageMentioned` :boolean : (可选项) 是否开启@功能
	 *
	 * `members` :Array : 群组成员id列表，若不传则@功能和群组红包功能均会失效(android不支持)
	 *
	 * `membersInfo` :Array<JSON> : 群组成员信息列表(ios不支持)
	 */
	configGroupChat(params:rcIM_configGroupChat_Params):void

	/**
	 * `会话列表页`
	 * ========params==========
	 *
	 * `title` :string : （可选项）会话列表页面标题
	 *
	 * `isEnteredToCollectionWindow` :boolean : （可选项）当前会话列表是否为从聚合Cell点击进入的子会话列表，您在点击会话列表中的聚合Cell跳转到到子会话列表时，需要将此属性设置为true。
	 *
	 * `showConnectingStatus` :boolean : （可选项）当连接状态变化SDK自动重连时，是否在NavigationBar中显示连接中的提示。
	 *
	 * `conversationTypes` :Array : （可选项）设置需要显示哪些类型的会话参见 [会话类型](!Constant#conversationType)
	 *
	 * `collectionTypes` :Array : （可选项）设置在列表中需要聚合为一条显示的会话类型数组参见[会话类型](!Constant#conversationType)
	 *
	 * `avatarStyle` :string : （可选项）头像形状，(android不支持)
	 *
	 * `avatarSize` :JSON : （可选项）头像大小，(android不支持)
	 *
	 * `cellBgColor` :string : （可选项） Cell的背景颜色，(android不支持)
	 *
	 * `topCellBgColor` :string : （可选项） 置顶会话的Cell背景颜色，(android不支持)
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 *
	 * `title` :string : （可选项）会话列表页面标题
	 *
	 * `isEnteredToCollectionWindow` :boolean : （可选项）当前会话列表是否为从聚合Cell点击进入的子会话列表，您在点击会话列表中的聚合Cell跳转到到子会话列表时，需要将此属性设置为true。
	 *
	 * `showConnectingStatus` :boolean : （可选项）当连接状态变化SDK自动重连时，是否在NavigationBar中显示连接中的提示。
	 *
	 * `conversationTypes` :Array : （可选项）设置需要显示哪些类型的会话参见 [会话类型](!Constant#conversationType)
	 *
	 * `collectionTypes` :Array : （可选项）设置在列表中需要聚合为一条显示的会话类型数组参见[会话类型](!Constant#conversationType)
	 *
	 * `avatarStyle` :string : （可选项）头像形状，(android不支持)
	 *
	 * `avatarSize` :JSON : （可选项）头像大小，(android不支持)
	 *
	 * `cellBgColor` :string : （可选项） Cell的背景颜色，(android不支持)
	 *
	 * `topCellBgColor` :string : （可选项） 置顶会话的Cell背景颜色，(android不支持)
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 */
	openConversationList(params:rcIM_openConversationList_Params):void

	/**
	 * `会话页面`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `title` :string : 页面标题
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `title` :string : 页面标题
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 */
	openConversation(params:rcIM_openConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发起单人通话`
	 * ========params==========
	 *
	 * `targetId` :string : 会话 id
	 *
	 * `type` :string : 会话媒体类型
	 *
	 * `targetId` :string : 会话 id
	 *
	 * `type` :string : 会话媒体类型
	 */
	startSingleCall(params:rcIM_startSingleCall_Params):void

	/**
	 * `发起多人通话`
	 * ========params==========
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : 会话 id
	 *
	 * `type` :string : 会话媒体类型
	 *
	 * `userids` :Array : 参与者 id 列表
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : 会话 id
	 *
	 * `type` :string : 会话媒体类型
	 *
	 * `userids` :Array : 参与者 id 列表
	 */
	startMultiCall(params:rcIM_startMultiCall_Params):void

	/**
	 * `设置钱包页面的样式，请在打开红包之前设置`
	 * ========params==========
	 *
	 * `themeFontSize` :number : （可选项）标准字体大小
	 *
	 * `NavTitfontSize` :number : （可选项）标题栏字体大小
	 *
	 * `pageChargeFont` :number : （可选项）首页金额大小
	 *
	 * `pageTitleStr` :string : （可选项）钱包标题
	 *
	 * `themePageColor` :string : （可选项）钱包页顶部主题色
	 *
	 * `pageBtnColor` :string : （可选项）钱包页，充值、提现按钮颜色
	 *
	 * `themeBtnColor` :string : （可选项）按钮主题色
	 *
	 * `themeNavColor` :string : （可选项）导航条主题色
	 *
	 * `NavTitColor` :string : （可选项）标题颜色
	 *
	 * `themeFontSize` :number : （可选项）标准字体大小
	 *
	 * `NavTitfontSize` :number : （可选项）标题栏字体大小
	 *
	 * `pageChargeFont` :number : （可选项）首页金额大小
	 *
	 * `pageTitleStr` :string : （可选项）钱包标题
	 *
	 * `themePageColor` :string : （可选项）钱包页顶部主题色
	 *
	 * `pageBtnColor` :string : （可选项）钱包页，充值、提现按钮颜色
	 *
	 * `themeBtnColor` :string : （可选项）按钮主题色
	 *
	 * `themeNavColor` :string : （可选项）导航条主题色
	 *
	 * `NavTitColor` :string : （可选项）标题颜色
	 */
	setWalletStyles(params:rcIM_setWalletStyles_Params):void

	/**
	 * `初始化函数`
	 * ========params==========
	 *
	 * `partnerId` :string : 渠道ID（融云/魔方金融分配给贵公司的渠道名称）
	 *
	 * `partnerId` :string : 渠道ID（融云/魔方金融分配给贵公司的渠道名称）
	 */
	walletSDKWithPartnerId(params:rcIM_walletSDKWithPartnerId_Params):void

	/**
	 * `初始化三方令牌`
	 * ========params==========
	 *
	 * `token` :string : 三方令牌
	 *
	 * `token` :string : 三方令牌
	 */
	walletSDKWithThirdToken(params:rcIM_walletSDKWithThirdToken_Params):void

	/** 我的钱包页面*/ 
	openMyWallet():void

	/**
	 * `设置私有部署的导航服务器和媒体服务器地址。 此方法要在 init() 前使用 可以支持设置 http://cn.xxx.com 或者 cn.xxx.com 如果设置成 cn.xxx.com，sdk 会组装成并仅支持 http:// 协议格式。 支持传入多个导航, 多个导航地址之间须以分号 ; 分隔`
	 * ========params==========
	 *
	 * `naviServer` :string : 私有部署的导航服务器地址
	 *
	 * `fileServer` :string : 私有部署的媒体服务器地址，即文件和图片的上传地址。使用私有云时必须填写
	 *
	 * `naviServer` :string : 私有部署的导航服务器地址
	 *
	 * `fileServer` :string : 私有部署的媒体服务器地址，即文件和图片的上传地址。使用私有云时必须填写
	 */
	setServerInfo(params:rcIM_setServerInfo_Params):void

	/**
	 * `初始化融云 SDK，调用 connect 连接前务必保证调用此方法`
	 * ========params==========
	 *
	 * `miPush` :JSON : (可选项)配置小米推送的信息
	 *
	 * `huaweiPush` :boolean : (可选项) 是否集成华为推送
	 *
	 * `miPush` :JSON : (可选项)配置小米推送的信息
	 *
	 * `huaweiPush` :boolean : (可选项) 是否集成华为推送
	 */
	init(params:rcIM_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `连接融云 IM 服务器，进行后续各种方法操作前务必要先调用此方法`
	 * ========params==========
	 *
	 * `token` :string : 从服务端获取的用户身份令牌（Token）
	 *
	 * `token` :string : 从服务端获取的用户身份令牌（Token）
	 */
	connect(params:rcIM_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `断开连接`
	 * ========params==========
	 *
	 * `isReceivePush` :boolean : （可选项）断开后是否接收 Push
	 *
	 * `isReceivePush` :boolean : （可选项）断开后是否接收 Push
	 */
	disconnect(params:rcIM_disconnect_Params, callback?: (ret:JSON) => void):void

	/** 设置连接状态变化的监听器，请在调用 init 方法之后，调用 connect 方法之前设置*/ 
	setConnectionStatusListener(callback?: (ret:JSON) => void):void

	/** 获取连接状态*/ 
	getConnectionStatus(callback?: (ret:JSON) => void):void

	/** 获取当前连接用户的信息*/ 
	getCurrentUserId(callback?: (ret:JSON) => void):void

	/**
	 * `发送文字消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `text` :string : 消息的文字内容
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `mentionedInfo` :JSON : （可选项）@功能，当conversationType为GROUP或DISCUSSION有效；(ios不支持DISCUSSION)；注：＠ 消息推送会越过所有免打扰逻辑，给用户推送 Push 通知。
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `text` :string : 消息的文字内容
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `mentionedInfo` :JSON : （可选项）@功能，当conversationType为GROUP或DISCUSSION有效；(ios不支持DISCUSSION)；注：＠ 消息推送会越过所有免打扰逻辑，给用户推送 Push 通知。
	 */
	sendTextMessage(params:rcIM_sendTextMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `imagePath` :string : 图片的路径，支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `isFull` :boolean : （可选项）是否发送原图
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `imagePath` :string : 图片的路径，支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `isFull` :boolean : （可选项）是否发送原图
	 */
	sendImageMessage(params:rcIM_sendImageMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送语音消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `voicePath` :string : 语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式
	 *
	 * `duration` :number : 语音消息的时长，单位为秒
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `voicePath` :string : 语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式
	 *
	 * `duration` :number : 语音消息的时长，单位为秒
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 */
	sendVoiceMessage(params:rcIM_sendVoiceMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `latitude` :number : 纬度
	 *
	 * `longitude` :number : 经度
	 *
	 * `poi` :string : 兴趣点
	 *
	 * `imagePath` :string : 地图缩率图的路径，支持 fs://，如：fs:///location_thumb/123.jpg
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `latitude` :number : 纬度
	 *
	 * `longitude` :number : 经度
	 *
	 * `poi` :string : 兴趣点
	 *
	 * `imagePath` :string : 地图缩率图的路径，支持 fs://，如：fs:///location_thumb/123.jpg
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 */
	sendLocationMessage(params:rcIM_sendLocationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图文消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `title` :string : 消息的标题
	 *
	 * `description` :string : 消息的内容描述
	 *
	 * `imageUrl` :string : 消息图片的网络地址
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `title` :string : 消息的标题
	 *
	 * `description` :string : 消息的内容描述
	 *
	 * `imageUrl` :string : 消息图片的网络地址
	 *
	 * `extra` :string : （可选项）消息的附加信息
	 */
	sendRichContentMessage(params:rcIM_sendRichContentMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送命令消息，可以用来实现任何自定义消息的发送`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `name` :string : 命令的名称
	 *
	 * `data` :string : 命令的数据
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `name` :string : 命令的名称
	 *
	 * `data` :string : 命令的数据
	 */
	sendCommandNotificationMessage(params:rcIM_sendCommandNotificationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送好友通知消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `operation` :string : 好友请求当前的操作名
	 *
	 * `sourceUserId` :string : 当前操作发起用户的用户ID
	 *
	 * `message` :string : 当前操作的消息内容
	 *
	 * `extra` :string : 当前操作的附加信息
	 */
	sendContactNotificationMessage(params:rcIM_sendContactNotificationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送资料通知消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `operation` :string : 资料通知的操作名
	 *
	 * `data` :string : 信息变更的数据，可以为任意格式，如json数据。
	 *
	 * `extra` :string : 当前操作的附加信息
	 */
	sendProfileNotificationMessage(params:rcIM_sendProfileNotificationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送通知消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `message` :string : 当前操作的消息内容
	 *
	 * `extra` :string : 当前操作的附加信息
	 */
	sendInformationNotificationMessage(params:rcIM_sendInformationNotificationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送群组通知消息类消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `operation` :string : 群组通知当前的操作名
	 *
	 * `operatorUserId` :string : 当前操作发起用户的用户ID
	 *
	 * `message` :string : 当前操作的消息内容
	 *
	 * `data` :string : 当前操作的目标对象，如被当前操作目标用户的用户ID或变更后的群主名称等。
	 *
	 * `extra` :string : 当前操作的附加信息
	 */
	sendGroupNotificationMessage(params:rcIM_sendGroupNotificationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送命令消息，您需要这种类型的消息时可以直接使用，不需要再自定义。此消息不保存、不计数。`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `name` :string : 命令的名称
	 *
	 * `data` :string : 命令的数据
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `name` :string : 命令的名称
	 *
	 * `data` :string : 命令的数据
	 */
	sendCommandMessage(params:rcIM_sendCommandMessage_Params, callback?: (ret:JSON) => void):void

	/** 设置接收消息的监听器，请在调用 init 方法之后，调用 connect 方法之前设置*/ 
	setOnReceiveMessageListener(callback?: (ret:JSON) => void):void

	/**
	 * `发送单聊中消息已读的回执`
	 * ========params==========
	 *
	 * `targetId` :string : 目标会话ID
	 *
	 * `timestamp` :number : 该会话中已阅读的最后一条消息的发送时间戳
	 *
	 * `targetId` :string : 目标会话ID
	 *
	 * `timestamp` :number : 该会话中已阅读的最后一条消息的发送时间戳
	 */
	sendReadReceiptMessage(params:rcIM_sendReadReceiptMessage_Params, callback?: (ret:JSON) => void):void

	/** 添加收到已读回执的监听*/ 
	addReceiveReadReceiptListener():void

	/** 监听撤回消息*/ 
	setOnMessageRecalledListener():void

	/**
	 * `发起群组消息回执请求。只能对自己发送的消息发起消息回执请求。`
	 * ========params==========
	 *
	 * `messageId` :number : 消息id
	 *
	 * `messageId` :number : 消息id
	 */
	sendReadReceiptRequest(params:rcIM_sendReadReceiptRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加消息回执监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `target` :string : 要监听的事件
	 */
	addReadReceiptListener(params:rcIM_addReadReceiptListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除消息回执监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `target` :string : 要监听的事件
	 */
	removeReadReceiptListener(params:rcIM_removeReadReceiptListener_Params):void

	/**
	 * `如果在会话中收到了回执请求，接收者需要在合适的时机响应该请求，以通知发送者自己已经阅读了该消息。`
	 * ========params==========
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : targetId
	 *
	 * `messageId` :number : 消息id
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : targetId
	 *
	 * `messageId` :number : 消息id
	 */
	sendReadReceiptResponse(params:rcIM_sendReadReceiptResponse_Params, callback?: (ret:JSON) => void):void

	/** 获取当前用户离线消息时间*/ 
	getOfflineMessageDuration(callback?: (ret:JSON) => void):void

	/**
	 * `设置当前用户离线消息存储时间`
	 * ========params==========
	 *
	 * `duration` :number : (可选项)用户离线消息存储时间（以天为单位），范围【1~7天】
	 *
	 * `duration` :number : (可选项)用户离线消息存储时间（以天为单位），范围【1~7天】
	 */
	setOfflineMessageDuration(params:rcIM_setOfflineMessageDuration_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话的最新消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `count` :number : 要获取的消息数量
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `count` :number : 要获取的消息数量
	 */
	getLatestMessages(params:rcIM_getLatestMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话的历史消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1
	 *
	 * `count` :number : 要获取的消息数量
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1
	 *
	 * `count` :number : 要获取的消息数量
	 */
	getHistoryMessages(params:rcIM_getHistoryMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `按照消息类型获取历史消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 消息类型标识
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1
	 *
	 * `count` :number : 要获取的消息数量
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 消息类型标识
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1
	 *
	 * `count` :number : 要获取的消息数量
	 */
	getHistoryMessagesByObjectName(params:rcIM_getHistoryMessagesByObjectName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取历史消息记录（特别说明：调用此方法需要开启历史消息漫游；当用户因换设备或重装app导致本地本地存储丢失的情况，可用此方法获取记录；此方法返回值中messageId均为0，融云服务器不会保存此值）`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)；不支持传入 RCConversationType.CHATROOM。
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `dateTime ` :any : 从该时间点开始获取消息。即：消息中的 sentTime；第一次可传 0，再次取值此参数可传入上一次获取的最后一条记录的sentTime值。
	 *
	 * `count` :number : 要获取的消息数量（1-20条）
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)；不支持传入 RCConversationType.CHATROOM。
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `dateTime ` :any : 从该时间点开始获取消息。即：消息中的 sentTime；第一次可传 0，再次取值此参数可传入上一次获取的最后一条记录的sentTime值。
	 *
	 * `count` :number : 要获取的消息数量（1-20条）
	 */
	getRemoteHistoryMessages(params:rcIM_getRemoteHistoryMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除指定的一条或者一组消息`
	 * ========params==========
	 *
	 * `messageIds` :Array : 要删除的消息 Id 数组
	 *
	 * `messageIds` :Array : 要删除的消息 Id 数组
	 */
	deleteMessages(params:rcIM_deleteMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清空某一会话的所有聊天消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	clearMessages(params:rcIM_clearMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `撤回消息`
	 * ========params==========
	 *
	 * `messageId` :string : 消息ID
	 *
	 * `messageId` :string : 消息ID
	 */
	recallMessage(params:rcIM_recallMessage_Params, callback?: (ret:JSON) => void):void

	/** 获取所有未读消息数*/ 
	getTotalUnreadCount(callback?: (ret:JSON) => void):void

	/**
	 * `获取来自某用户（某会话）的未读消息数`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getUnreadCount(params:rcIM_getUnreadCount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某（些）会话类型的未读消息数`
	 * ========params==========
	 *
	 * `conversationTypes` :Array : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `conversationTypes` :Array : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 */
	getUnreadCountByConversationTypes(params:rcIM_getUnreadCountByConversationTypes_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某会话里未读的@消息。`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getUnreadMentionedMessages(params:rcIM_getUnreadMentionedMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置接收到的消息状态`
	 * ========params==========
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `receivedStatus` :string : 设置接收到的消息状态，参见 [接收到的消息状态](#receivedStatus)
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `receivedStatus` :string : 设置接收到的消息状态，参见 [接收到的消息状态](#receivedStatus)
	 */
	setMessageReceivedStatus(params:rcIM_setMessageReceivedStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置消息发送状态`
	 * ========params==========
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `sentStatus ` :string : 发送出的消息的状态枚举，参见 [发送状态](#sentStatus)；
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `sentStatus ` :string : 发送出的消息的状态枚举，参见 [发送状态](#sentStatus)；
	 */
	setMessageSentStatus(params:rcIM_setMessageSentStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除某一会话的消息未读状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	clearMessagesUnreadStatus(params:rcIM_clearMessagesUnreadStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向会话中发送正在输入的状态。`
	 * ========params==========
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。
	 */
	sendTypingStatus(params:rcIM_sendTypingStatus_Params):void

	/** 监听对方输入状态*/ 
	addTypingStatusListener():void

	/**
	 * `设置消息的附加信息，此信息只保存在本地`
	 * ========params==========
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `value` :string : 消息附加信息，最大 1024 字节
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `value` :string : 消息附加信息，最大 1024 字节
	 */
	setMessageExtra(params:rcIM_setMessageExtra_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话的文字消息草稿`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getTextMessageDraft(params:rcIM_getTextMessageDraft_Params, callback?: (ret:JSON) => void):void

	/**
	 * `保存某一会话的文字消息草稿`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `content` :string : 草稿的文字内容
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `content` :string : 草稿的文字内容
	 */
	saveTextMessageDraft(params:rcIM_saveTextMessageDraft_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除某一会话的文字消息草稿`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	clearTextMessageDraft(params:rcIM_clearTextMessageDraft_Params, callback?: (ret:JSON) => void):void

	/** 获取会话列表*/ 
	getConversationList(callback?: (ret:JSON) => void):void

	/** 获取置顶会话列表*/ 
	getTopConversationList():void

	/**
	 * `获取屏蔽消息的会话列表`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)(ios不支持)
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)(ios不支持)
	 */
	getBlockedConversationList(params:rcIM_getBlockedConversationList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分页获取会话列表`
	 * ========params==========
	 *
	 * `typeList` :Array : （可选项）回话类型组成的数组
	 *
	 * `count` :number : （可选项）获取的数量
	 *
	 * `startTime` :number : （可选项）会话的时间戳（获取这个时间戳之前的会话列表，0表示从最新开始获取）
	 *
	 * `typeList` :Array : （可选项）回话类型组成的数组
	 *
	 * `count` :number : （可选项）获取的数量
	 *
	 * `startTime` :number : （可选项）会话的时间戳（获取这个时间戳之前的会话列表，0表示从最新开始获取）
	 */
	getConversationListByCount(params:rcIM_getConversationListByCount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话信息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getConversation(params:rcIM_getConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从会话列表中移除某一会话，但是不删除会话内的消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	removeConversation(params:rcIM_removeConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清空所有会话及会话消息`
	 * ========params==========
	 *
	 * `conversationTypes` :Array : 消息的会话类型组成的数组，参见 [会话类型](!Constant#conversationType)
	 *
	 * `conversationTypes` :Array : 消息的会话类型组成的数组，参见 [会话类型](!Constant#conversationType)
	 */
	clearConversations(params:rcIM_clearConversations_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置某一会话为置顶或者取消置顶`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `isTop` :boolean : 是否置顶
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `isTop` :boolean : 是否置顶
	 */
	setConversationToTop(params:rcIM_setConversationToTop_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话信息数量`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getMessageCount(params:rcIM_getMessageCount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `搜索本地历史消息`
	 * ========params==========
	 *
	 * `conversationTypes` :Array : 搜索的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `objectNames` :Array : 搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息
	 *
	 * `keyword` :string : 搜索的关键字
	 *
	 * `conversationTypes` :Array : 搜索的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `objectNames` :Array : 搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息
	 *
	 * `keyword` :string : 搜索的关键字
	 */
	searchConversations(params:rcIM_searchConversations_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据会话，搜索本地历史消息。`
	 * ========params==========
	 *
	 * `conversationType` :string : 指定的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 指定的会话 id
	 *
	 * `keyword` :string : 搜索的关键字
	 *
	 * `count` :number : 返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回
	 *
	 * `beginTime` :number : 查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）
	 *
	 * `conversationType` :string : 指定的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 指定的会话 id
	 *
	 * `keyword` :string : 搜索的关键字
	 *
	 * `count` :number : 返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回
	 *
	 * `beginTime` :number : 查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）
	 */
	searchMessages(params:rcIM_searchMessages_Params, callback?: (ret:JSON) => void):void

	/** 清空指定时间戳之前的历史消息 **Notes：此方法从服务器端清除历史消息，但是必须先开通历史消息云存储功能。***/ 
	cleanHistoryMessages():void

	/**
	 * `创建讨论组`
	 * ========params==========
	 *
	 * `name` :string : 讨论组名称，如：当前所有成员的名字的组合。
	 *
	 * `userIdList` :Array : 讨论组成员 Id 列表
	 *
	 * `name` :string : 讨论组名称，如：当前所有成员的名字的组合。
	 *
	 * `userIdList` :Array : 讨论组成员 Id 列表
	 */
	createDiscussion(params:rcIM_createDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取讨论组信息和设置`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `discussionId` :string : 讨论组 Id
	 */
	getDiscussion(params:rcIM_getDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置讨论组名称`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `name` :string : 讨论组名称
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `name` :string : 讨论组名称
	 */
	setDiscussionName(params:rcIM_setDiscussionName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加一名或者一组用户加入讨论组`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `userIdList` :Array : 邀请的用户 Id 列表
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `userIdList` :Array : 邀请的用户 Id 列表
	 */
	addMemberToDiscussion(params:rcIM_addMemberToDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `供创建者将某用户移出讨论组`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `userId` :string : 用户 Id
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `userId` :string : 用户 Id
	 */
	removeMemberFromDiscussion(params:rcIM_removeMemberFromDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `退出当前用户所在的某讨论组`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `discussionId` :string : 讨论组 Id
	 */
	quitDiscussion(params:rcIM_quitDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置讨论组成员邀请权限`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `inviteStatus` :string : 邀请状态，默认为开放，参见 [讨论组邀请状态](!Constant#discussionInviteStatus)
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `inviteStatus` :string : 邀请状态，默认为开放，参见 [讨论组邀请状态](!Constant#discussionInviteStatus)
	 */
	setDiscussionInviteStatus(params:rcIM_setDiscussionInviteStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `当前用户加入某聊天室`
	 * ========params==========
	 *
	 * `chatRoomId` :string : 聊天室 Id
	 *
	 * `defMessageCount` :number : 进入聊天室拉取消息数目
	 *
	 * `chatRoomId` :string : 聊天室 Id
	 *
	 * `defMessageCount` :number : 进入聊天室拉取消息数目
	 */
	joinChatRoom(params:rcIM_joinChatRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `当前用户退出某聊天室`
	 * ========params==========
	 *
	 * `chatRoomId` :string : 聊天室 Id
	 *
	 * `chatRoomId` :string : 聊天室 Id
	 */
	quitChatRoom(params:rcIM_quitChatRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将某个用户加到黑名单中`
	 * ========params==========
	 *
	 * `userId` :string : 要加入黑名单的用户 Id
	 *
	 * `userId` :string : 要加入黑名单的用户 Id
	 */
	addToBlacklist(params:rcIM_addToBlacklist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将个某用户从黑名单中移出`
	 * ========params==========
	 *
	 * `userId` :string : 要移出黑名单的用户 Id
	 *
	 * `userId` :string : 要移出黑名单的用户 Id
	 */
	removeFromBlacklist(params:rcIM_removeFromBlacklist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某用户是否在黑名单中`
	 * ========params==========
	 *
	 * `userId` :string : 要查询的用户 Id
	 *
	 * `userId` :string : 要查询的用户 Id
	 */
	getBlacklistStatus(params:rcIM_getBlacklistStatus_Params, callback?: (ret:JSON) => void):void

	/** 获取当前用户的黑名单列表*/ 
	getBlacklist():void

	/** 设置本地消息不提示*/ 
	disableLocalNotification(callback?: (ret:JSON) => void):void

	/** 设置本地消息提示*/ 
	enableLocalNotification(callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话的通知状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getConversationNotificationStatus(params:rcIM_getConversationNotificationStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置某一会话的通知状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `notificationStatus` :string : 会话通知提醒状态，参见 [会话通知提醒状态](!Constant#conversationNotificationStatus)
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `notificationStatus` :string : 会话通知提醒状态，参见 [会话通知提醒状态](!Constant#conversationNotificationStatus)
	 */
	setConversationNotificationStatus(params:rcIM_setConversationNotificationStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置消息通知免打扰时间，此方法会屏蔽该会话在该时间段的远程推送；`
	 * ========params==========
	 *
	 * `startTime` :string : 起始时间 格式 HH:MM:SS
	 *
	 * `spanMinutes` :number : 间隔分钟数 0 < spanMinutes < 1440。
	 *
	 * `startTime` :string : 起始时间 格式 HH:MM:SS
	 *
	 * `spanMinutes` :number : 间隔分钟数 0 < spanMinutes < 1440。
	 */
	setNotificationQuietHours(params:rcIM_setNotificationQuietHours_Params, callback?: (ret:JSON) => void):void

	/** 移除消息通知免打扰时间*/ 
	removeNotificationQuietHours(callback?: (ret:JSON) => void):void

	/** 获取消息通知免打扰时间*/ 
	getNotificationQuietHours():void

	/**
	 * `音视频来电事件监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `ret` :JSON : 操作结果
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `ret` :JSON : 操作结果
	 */
	addCallReceiveListener(params:rcIM_addCallReceiveListener_Params):void

	/**
	 * `移除音视频来电事件监听`
	 * ========params==========
	 *
	 * `target` :string : 要移除的来电监听的事件
	 *
	 * `target` :string : 要移除的来电监听的事件
	 */
	removeCallReceiveListener(params:rcIM_removeCallReceiveListener_Params):void

	/**
	 * `发起音视频通话`
	 * ========params==========
	 *
	 * `targetId` :string : 目标会话ID
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `mediaType` :string : （可选项）发起的通话媒体类型
	 *
	 * `userIdList` :string : （可选项）邀请的用户 ID 列表
	 *
	 * `extra` :string : （可选项）附件信息
	 *
	 * `ret` :JSON : 操作结果
	 *
	 * `targetId` :string : 目标会话ID
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `mediaType` :string : （可选项）发起的通话媒体类型
	 *
	 * `userIdList` :string : （可选项）邀请的用户 ID 列表
	 *
	 * `extra` :string : （可选项）附件信息
	 *
	 * `ret` :JSON : 操作结果
	 */
	startCall(params:rcIM_startCall_Params):void

	/**
	 * `音视频通话事件的监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `ret` :JSON : 监听事件返回，其中callOutgoing、callDidConnect、callDidDisconnect(android上会有disConnectReason参数回调)、shouldAlertForWaitingRemoteResponse、shouldRingForIncomingCall、shouldStopAlertAndRing只返回事件，无参数返回
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `ret` :JSON : 监听事件返回，其中callOutgoing、callDidConnect、callDidDisconnect(android上会有disConnectReason参数回调)、shouldAlertForWaitingRemoteResponse、shouldRingForIncomingCall、shouldStopAlertAndRing只返回事件，无参数返回
	 */
	addCallSessionListener(params:rcIM_addCallSessionListener_Params):void

	/**
	 * `移除音视频来电事件监听`
	 * ========params==========
	 *
	 * `target` :string : 要移除的来电监听的事件
	 *
	 * `target` :string : 要移除的来电监听的事件
	 */
	removeCallSessionListener(params:rcIM_removeCallSessionListener_Params):void

	/** 获取当前通话实体，通话实体中维护着当前通话的所有信息。*/ 
	getCallSession():void

	/**
	 * `判断当前是否支持音视频通话 (注:android上此接口用来判断音视频引擎是否可用)`
	 * ========params==========
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType) (android不支持)
	 *
	 * `mediaType` :string : （可选项）发起的通话媒体类型 (android不支持)
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType) (android不支持)
	 *
	 * `mediaType` :string : （可选项）发起的通话媒体类型 (android不支持)
	 */
	isCallEnabled(params:rcIM_isCallEnabled_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置本地视频属性，可用此接口设置本地视频分辨率，设置宽和高替换`
	 * ========params==========
	 *
	 * `profile` :string : （可选项）通话视频参数
	 *
	 * `profile` :string : （可选项）通话视频参数
	 */
	setVideoProfile(params:rcIM_setVideoProfile_Params):void

	/**
	 * `设置本地视频属性，是否使用默认美颜`
	 * ========params==========
	 *
	 * `enableBeauty` :boolean : （可选项）是否使用美颜
	 *
	 * `enableBeauty` :boolean : （可选项）是否使用美颜
	 */
	setEnableBeauty(params:rcIM_setEnableBeauty_Params):void

	/**
	 * `设接听来电`
	 * ========params==========
	 *
	 * `mediaType` :string : （可选项）接听使用的媒体类型 (android不支持)
	 *
	 * `callId ` :string : 呼叫id (ios不支持)
	 *
	 * `mediaType` :string : （可选项）接听使用的媒体类型 (android不支持)
	 *
	 * `callId ` :string : 呼叫id (ios不支持)
	 */
	accept(params:rcIM_accept_Params):void

	/** 挂断*/ 
	hangup():void

	/**
	 * `邀请用户加入当前通话 （仅限讨论组和群组）`
	 * ========params==========
	 *
	 * `userIds` :Array : 邀请的用户 ID 列表
	 *
	 * `observerUserIds` :Array : 邀请的观察者列表,没有观察者可以不传(iOS不支持)
	 *
	 * `userIds` :Array : 邀请的用户 ID 列表
	 *
	 * `observerUserIds` :Array : 邀请的观察者列表,没有观察者可以不传(iOS不支持)
	 */
	addParticipants(params:rcIM_addParticipants_Params):void

	/**
	 * `打开视频区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `renderModel` :string : （可选项）设视频显示模式 (android不支持)
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、#、img（本地路径）
	 *
	 * `fixedOn` :string : （可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）视频是否随所属 window 或 frame 滚动
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `renderModel` :string : （可选项）设视频显示模式 (android不支持)
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、#、img（本地路径）
	 *
	 * `fixedOn` :string : （可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）视频是否随所属 window 或 frame 滚动
	 */
	setVideoView(params:rcIM_setVideoView_Params):void

	/**
	 * `重设打开的视频区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `renderModel` :string : （可选项）设视频显示模式 (android不支持)
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、#、img（本地路径）
	 *
	 * `animationDuration` :number : （可选项）改变位置大小时添加的动画效果时长，为负数或0时表示没动画效果
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `renderModel` :string : （可选项）设视频显示模式 (android不支持)
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、#、img（本地路径）
	 *
	 * `animationDuration` :number : （可选项）改变位置大小时添加的动画效果时长，为负数或0时表示没动画效果
	 *
	 * `userId` :string : 用户 ID
	 */
	resetVideoView(params:rcIM_resetVideoView_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭移除打开的视频区域`
	 * ========params==========
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `userId` :string : 用户 ID
	 */
	removeVideoView(params:rcIM_removeVideoView_Params):void

	/** 添加视频区域的监听*/ 
	addVideoViewListener():void

	/**
	 * `改变当前通话的媒体类型`
	 * ========params==========
	 *
	 * `mediaType` :string : （可选项）接听使用的媒体类型
	 *
	 * `mediaType` :string : （可选项）接听使用的媒体类型
	 */
	changeMediaType(params:rcIM_changeMediaType_Params):void

	/** 是否是静音*/ 
	isMuted():void

	/**
	 * `设置静音`
	 * ========params==========
	 *
	 * `muted` :boolean : （可选项）是否静音
	 *
	 * `muted` :boolean : （可选项）是否静音
	 */
	setMuted(params:rcIM_setMuted_Params, callback?: (ret:JSON) => void):void

	/** 是否打开扬声器*/ 
	speakerEnabled():void

	/**
	 * `设置扬声器状态`
	 * ========params==========
	 *
	 * `speakerEnabled` :boolean : （可选项）是否开启扬声器
	 *
	 * `speakerEnabled` :boolean : （可选项）是否开启扬声器
	 */
	setSpeakerEnabled(params:rcIM_setSpeakerEnabled_Params, callback?: (ret:JSON) => void):void

	/** 是否开启摄像头*/ 
	cameraEnabled():void

	/**
	 * `设置打开摄像头`
	 * ========params==========
	 *
	 * `cameraEnabled` :boolean : （可选项）是否打开摄像头
	 *
	 * `cameraEnabled` :boolean : （可选项）是否打开摄像头
	 */
	setCameraEnabled(params:rcIM_setCameraEnabled_Params, callback?: (ret:JSON) => void):void

	/** 切换摄像头*/ 
	switchCameraMode():void

	/**
	 * `配置本地推送相关参数`
	 * ========params==========
	 *
	 * `alertTitle` :string : 进入后台两分钟内收到通知的显示内容，不传则显示消息内容
	 *
	 * `showNickname` :boolean : 推送提示是否显示昵称，注：设置昵称的方式为：在发送消息接口的extra字段中填写昵称信息，格式为extra:{userInfo:{nickName:"用户昵称"}}
	 *
	 * `alertTitle` :string : 进入后台两分钟内收到通知的显示内容，不传则显示消息内容
	 *
	 * `showNickname` :boolean : 推送提示是否显示昵称，注：设置昵称的方式为：在发送消息接口的extra字段中填写昵称信息，格式为extra:{userInfo:{nickName:"用户昵称"}}
	 */
	configLocalNotification(params:rcIM_configLocalNotification_Params):void

	/** 添加需要设置头像的时刻的监听*/ 
	addNeedAvatarListener():void

	/**
	 * `设置用户头像，此方法在 connect 成功回调之后执行`
	 * ========params==========
	 *
	 * `userId` :string : 用户id(connect成功回调返回来的id)
	 *
	 * `nickName` :string : 用户昵称
	 *
	 * `avatarUrl` :string : 头像URI
	 *
	 * `userId` :string : 用户id(connect成功回调返回来的id)
	 *
	 * `nickName` :string : 用户昵称
	 *
	 * `avatarUrl` :string : 头像URI
	 */
	setUserAvatar(params:rcIM_setUserAvatar_Params):void

	/**
	 * `刷新用户缓存数据。`
	 * ========params==========
	 *
	 * `userId` :string : 用户id(addNeedAvatarListener成功回调返回来的id)
	 *
	 * `nickName` :string : 用户昵称
	 *
	 * `avatarUrl` :string : 头像URI
	 *
	 * `userId` :string : 用户id(addNeedAvatarListener成功回调返回来的id)
	 *
	 * `nickName` :string : 用户昵称
	 *
	 * `avatarUrl` :string : 头像URI
	 */
	refreshUserInfoCache(params:rcIM_refreshUserInfoCache_Params):void

	/** 关闭会话页面*/ 
	close():void

	/** 添加点击聊天页面内头像的监听*/ 
	addAvatarListener():void

	/**
	 * `配置聊天页面的副标题；会在会话页面标题下方显示`
	 * ========params==========
	 *
	 * `titleConfig` :Array<JSON> : (必选项) 根据会话id配置会话页面的副标题
	 *
	 * `subTitleSize` :number : 可选， 副标题字体大小
	 *
	 * `subTitleColor` :string : 可选，副标题字体颜色
	 *
	 * `bgColor` :string : 可选，副标题背景颜色
	 *
	 * `bgHeight` :number : 可选，副标题背景的高度
	 *
	 * `titleConfig` :Array<JSON> : (必选项) 根据会话id配置会话页面的副标题
	 *
	 * `subTitleSize` :number : 可选， 副标题字体大小
	 *
	 * `subTitleColor` :string : 可选，副标题字体颜色
	 *
	 * `bgColor` :string : 可选，副标题背景颜色
	 *
	 * `bgHeight` :number : 可选，副标题背景的高度
	 */
	configChatSubTitle(params:rcIM_configChatSubTitle_Params):void

	/**
	 * `配置通过 openConversation 或 openConversationList接口打开的聊天页面的右上角按钮和输入框扩展面板按钮`
	 * ========params==========
	 *
	 * `pluginItems` :Array : (可选项) 聊天界面输入框扩展面板自定义显示各默认功能按钮
	 *
	 * `insertPluginItems` :Array : （可选项）聊天扩展功能面板添加自定义按钮信息组成的数组(android不支持)
	 *
	 * `rightIcon` :string : （可选项）聊天页面右上角按钮图标，要求本地路径（fs://、widget)
	 *
	 * `rightIcons` :Array : （可选项）聊天页面右上角按钮图标路径（要求本地路径fs://、widget://)组成的数组
	 *
	 * `dndIcon` :boolean : （可选项）聊天页面标题后面是否显示消息免打扰图标(此参数用来控制在调用setConversationNotificationStatus接口后是否在会话页面的标题栏后面显示消息免打扰图标)
	 *
	 * `pluginItems` :Array : (可选项) 聊天界面输入框扩展面板自定义显示各默认功能按钮
	 *
	 * `insertPluginItems` :Array : （可选项）聊天扩展功能面板添加自定义按钮信息组成的数组(android不支持)
	 *
	 * `rightIcon` :string : （可选项）聊天页面右上角按钮图标，要求本地路径（fs://、widget)
	 *
	 * `rightIcons` :Array : （可选项）聊天页面右上角按钮图标路径（要求本地路径fs://、widget://)组成的数组
	 *
	 * `dndIcon` :boolean : （可选项）聊天页面标题后面是否显示消息免打扰图标(此参数用来控制在调用setConversationNotificationStatus接口后是否在会话页面的标题栏后面显示消息免打扰图标)
	 */
	configChatButtons(params:rcIM_configChatButtons_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示对方输入状态、撤销刚（120秒）发送的消息功能配置`
	 * ========params==========
	 *
	 * `messageRecall` :boolean : (可选项) 是否开启撤销刚发送消息的功能(android不支持；sdk默认会打开此功能)
	 *
	 * `typingStatus` :boolean : (可选项) 是否显示对方输入状态
	 *
	 * `messageRecall` :boolean : (可选项) 是否开启撤销刚发送消息的功能(android不支持；sdk默认会打开此功能)
	 *
	 * `typingStatus` :boolean : (可选项) 是否显示对方输入状态
	 */
	configChat(params:rcIM_configChat_Params):void

	/**
	 * `配置群聊相关功能。`
	 * ========params==========
	 *
	 * `messageMentioned` :boolean : (可选项) 是否开启@功能
	 *
	 * `members` :Array : 群组成员id列表，若不传则@功能和群组红包功能均会失效(android不支持)
	 *
	 * `membersInfo` :Array<JSON> : 群组成员信息列表(ios不支持)
	 *
	 * `messageMentioned` :boolean : (可选项) 是否开启@功能
	 *
	 * `members` :Array : 群组成员id列表，若不传则@功能和群组红包功能均会失效(android不支持)
	 *
	 * `membersInfo` :Array<JSON> : 群组成员信息列表(ios不支持)
	 */
	configGroupChat(params:rcIM_configGroupChat_Params):void

	/**
	 * `会话列表页`
	 * ========params==========
	 *
	 * `title` :string : （可选项）会话列表页面标题
	 *
	 * `isEnteredToCollectionWindow` :boolean : （可选项）当前会话列表是否为从聚合Cell点击进入的子会话列表，您在点击会话列表中的聚合Cell跳转到到子会话列表时，需要将此属性设置为true。
	 *
	 * `showConnectingStatus` :boolean : （可选项）当连接状态变化SDK自动重连时，是否在NavigationBar中显示连接中的提示。
	 *
	 * `conversationTypes` :Array : （可选项）设置需要显示哪些类型的会话参见 [会话类型](!Constant#conversationType)
	 *
	 * `collectionTypes` :Array : （可选项）设置在列表中需要聚合为一条显示的会话类型数组参见[会话类型](!Constant#conversationType)
	 *
	 * `avatarStyle` :string : （可选项）头像形状，(android不支持)
	 *
	 * `avatarSize` :JSON : （可选项）头像大小，(android不支持)
	 *
	 * `cellBgColor` :string : （可选项） Cell的背景颜色，(android不支持)
	 *
	 * `topCellBgColor` :string : （可选项） 置顶会话的Cell背景颜色，(android不支持)
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 *
	 * `title` :string : （可选项）会话列表页面标题
	 *
	 * `isEnteredToCollectionWindow` :boolean : （可选项）当前会话列表是否为从聚合Cell点击进入的子会话列表，您在点击会话列表中的聚合Cell跳转到到子会话列表时，需要将此属性设置为true。
	 *
	 * `showConnectingStatus` :boolean : （可选项）当连接状态变化SDK自动重连时，是否在NavigationBar中显示连接中的提示。
	 *
	 * `conversationTypes` :Array : （可选项）设置需要显示哪些类型的会话参见 [会话类型](!Constant#conversationType)
	 *
	 * `collectionTypes` :Array : （可选项）设置在列表中需要聚合为一条显示的会话类型数组参见[会话类型](!Constant#conversationType)
	 *
	 * `avatarStyle` :string : （可选项）头像形状，(android不支持)
	 *
	 * `avatarSize` :JSON : （可选项）头像大小，(android不支持)
	 *
	 * `cellBgColor` :string : （可选项） Cell的背景颜色，(android不支持)
	 *
	 * `topCellBgColor` :string : （可选项） 置顶会话的Cell背景颜色，(android不支持)
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 */
	openConversationList(params:rcIM_openConversationList_Params):void

	/**
	 * `会话页面`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `title` :string : 页面标题
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `title` :string : 页面标题
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 */
	openConversation(params:rcIM_openConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发起单人通话`
	 * ========params==========
	 *
	 * `targetId` :string : 会话 id
	 *
	 * `type` :string : 会话媒体类型
	 *
	 * `targetId` :string : 会话 id
	 *
	 * `type` :string : 会话媒体类型
	 */
	startSingleCall(params:rcIM_startSingleCall_Params):void

	/**
	 * `发起多人通话`
	 * ========params==========
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : 会话 id
	 *
	 * `type` :string : 会话媒体类型
	 *
	 * `userids` :Array : 参与者 id 列表
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : 会话 id
	 *
	 * `type` :string : 会话媒体类型
	 *
	 * `userids` :Array : 参与者 id 列表
	 */
	startMultiCall(params:rcIM_startMultiCall_Params):void

	/**
	 * `设置钱包页面的样式，请在打开红包之前设置`
	 * ========params==========
	 *
	 * `themeFontSize` :number : （可选项）标准字体大小
	 *
	 * `NavTitfontSize` :number : （可选项）标题栏字体大小
	 *
	 * `pageChargeFont` :number : （可选项）首页金额大小
	 *
	 * `pageTitleStr` :string : （可选项）钱包标题
	 *
	 * `themePageColor` :string : （可选项）钱包页顶部主题色
	 *
	 * `pageBtnColor` :string : （可选项）钱包页，充值、提现按钮颜色
	 *
	 * `themeBtnColor` :string : （可选项）按钮主题色
	 *
	 * `themeNavColor` :string : （可选项）导航条主题色
	 *
	 * `NavTitColor` :string : （可选项）标题颜色
	 *
	 * `themeFontSize` :number : （可选项）标准字体大小
	 *
	 * `NavTitfontSize` :number : （可选项）标题栏字体大小
	 *
	 * `pageChargeFont` :number : （可选项）首页金额大小
	 *
	 * `pageTitleStr` :string : （可选项）钱包标题
	 *
	 * `themePageColor` :string : （可选项）钱包页顶部主题色
	 *
	 * `pageBtnColor` :string : （可选项）钱包页，充值、提现按钮颜色
	 *
	 * `themeBtnColor` :string : （可选项）按钮主题色
	 *
	 * `themeNavColor` :string : （可选项）导航条主题色
	 *
	 * `NavTitColor` :string : （可选项）标题颜色
	 */
	setWalletStyles(params:rcIM_setWalletStyles_Params):void

	/**
	 * `初始化函数`
	 * ========params==========
	 *
	 * `partnerId` :string : 渠道ID（融云/魔方金融分配给贵公司的渠道名称）
	 *
	 * `partnerId` :string : 渠道ID（融云/魔方金融分配给贵公司的渠道名称）
	 */
	walletSDKWithPartnerId(params:rcIM_walletSDKWithPartnerId_Params):void

	/**
	 * `初始化三方令牌`
	 * ========params==========
	 *
	 * `token` :string : 三方令牌
	 *
	 * `token` :string : 三方令牌
	 */
	walletSDKWithThirdToken(params:rcIM_walletSDKWithThirdToken_Params):void

	/** 我的钱包页面*/ 
	openMyWallet():void

}
interface rcIM_setServerInfo_Params {
	/**私有部署的导航服务器地址*/ 
	naviServer:string,

	/**私有部署的媒体服务器地址，即文件和图片的上传地址。使用私有云时必须填写*/ 
	fileServer:string,

	/**私有部署的导航服务器地址*/ 
	naviServer:string,

	/**私有部署的媒体服务器地址，即文件和图片的上传地址。使用私有云时必须填写*/ 
	fileServer:string,

}

interface rcIM_init_Params {
	/**(可选项)配置小米推送的信息*/ 
	miPush?:JSON,

	/**(可选项) 是否集成华为推送*/ 
	huaweiPush?:boolean,

	/**(可选项)配置小米推送的信息*/ 
	miPush?:JSON,

	/**(可选项) 是否集成华为推送*/ 
	huaweiPush?:boolean,

}

interface rcIM_connect_Params {
	/**从服务端获取的用户身份令牌（Token）*/ 
	token:string,

	/**从服务端获取的用户身份令牌（Token）*/ 
	token:string,

}

interface rcIM_disconnect_Params {
	/**（可选项）断开后是否接收 Push*/ 
	isReceivePush?:boolean,

	/**（可选项）断开后是否接收 Push*/ 
	isReceivePush?:boolean,

}

interface rcIM_sendTextMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的文字内容*/ 
	text:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**（可选项）@功能，当conversationType为GROUP或DISCUSSION有效；(ios不支持DISCUSSION)；注：＠ 消息推送会越过所有免打扰逻辑，给用户推送 Push 通知。*/ 
	mentionedInfo?:JSON,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的文字内容*/ 
	text:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**（可选项）@功能，当conversationType为GROUP或DISCUSSION有效；(ios不支持DISCUSSION)；注：＠ 消息推送会越过所有免打扰逻辑，给用户推送 Push 通知。*/ 
	mentionedInfo?:JSON,

}

interface rcIM_sendImageMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**图片的路径，支持 fs://，如：fs:///image/123.jpg*/ 
	imagePath:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**（可选项）是否发送原图*/ 
	isFull?:boolean,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**图片的路径，支持 fs://，如：fs:///image/123.jpg*/ 
	imagePath:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**（可选项）是否发送原图*/ 
	isFull?:boolean,

}

interface rcIM_sendGifMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**图片的路径，仅支持 fs://，如：fs:///image/123.jpg*/ 
	imagePath:string,

	/**消息的附加信息*/ 
	extra:string,

	/**gif 图宽度*/ 
	width:number,

	/**gif 图高度*/ 
	height:number,

}

interface rcIM_sendVoiceMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式*/ 
	voicePath:string,

	/**语音消息的时长，单位为秒*/ 
	duration:number,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式*/ 
	voicePath:string,

	/**语音消息的时长，单位为秒*/ 
	duration:number,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

}

interface rcIM_sendHQVoiceMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式*/ 
	voicePath:string,

	/**语音消息的时长，单位为秒*/ 
	duration:number,

	/**消息的附加信息*/ 
	extra:string,

}

interface rcIM_sendFileMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**文件的路径，仅支持 fs://，如：fs:///image/123.jpg*/ 
	filePath:string,

	/**消息的附加信息*/ 
	extra:string,

}

interface rcIM_sendSightMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**小视频的路径，仅支持 fs://，如：fs:///image/123.jpg*/ 
	sightPath:string,

	/**缩略图的路径，仅支持 fs://，如：fs:///image/123.jpg*/ 
	thumbPath:string,

	/**消息的附加信息*/ 
	extra:string,

	/**小视频时长*/ 
	duration:number,

}

interface rcIM_sendLocationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**纬度*/ 
	latitude:number,

	/**经度*/ 
	longitude:number,

	/**兴趣点*/ 
	poi:string,

	/**地图缩率图的路径，支持 fs://，如：fs:///location_thumb/123.jpg*/ 
	imagePath:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**纬度*/ 
	latitude:number,

	/**经度*/ 
	longitude:number,

	/**兴趣点*/ 
	poi:string,

	/**地图缩率图的路径，支持 fs://，如：fs:///location_thumb/123.jpg*/ 
	imagePath:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

}

interface rcIM_sendRichContentMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的标题*/ 
	title:string,

	/**消息的内容描述*/ 
	description:string,

	/**消息图片的网络地址*/ 
	imageUrl:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的标题*/ 
	title:string,

	/**消息的内容描述*/ 
	description:string,

	/**消息图片的网络地址*/ 
	imageUrl:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

}

interface rcIM_sendCommandNotificationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**命令的名称*/ 
	name:string,

	/**命令的数据*/ 
	data:string,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**命令的名称*/ 
	name:string,

	/**命令的数据*/ 
	data:string,

}

interface rcIM_sendCommandMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**命令的名称*/ 
	name:string,

	/**命令的数据*/ 
	data:string,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**命令的名称*/ 
	name:string,

	/**命令的数据*/ 
	data:string,

}

interface rcIM_sendReadReceiptMessage_Params {
	/**目标会话ID*/ 
	targetId:string,

	/**该会话中已阅读的最后一条消息的发送时间戳*/ 
	timestamp:number,

	/**目标会话ID*/ 
	targetId:string,

	/**该会话中已阅读的最后一条消息的发送时间戳*/ 
	timestamp:number,

}

interface rcIM_sendReadReceiptRequest_Params {
	/**消息id*/ 
	messageId:number,

	/**消息id*/ 
	messageId:number,

}

interface rcIM_addReadReceiptListener_Params {
	/**要监听的事件*/ 
	target:string,

	/**要监听的事件*/ 
	target:string,

}

interface rcIM_removeReadReceiptListener_Params {
	/**要监听的事件*/ 
	target:string,

	/**要监听的事件*/ 
	target:string,

}

interface rcIM_sendReadReceiptResponse_Params {
	/**会话类型*/ 
	conversationType:string,

	/**targetId*/ 
	targetId:string,

	/**消息id*/ 
	messageId:number,

	/**会话类型*/ 
	conversationType:string,

	/**targetId*/ 
	targetId:string,

	/**消息id*/ 
	messageId:number,

}

interface rcIM_setOfflineMessageDuration_Params {
	/**(可选项)用户离线消息存储时间（以天为单位），范围【1~7天】*/ 
	duration?:number,

	/**(可选项)用户离线消息存储时间（以天为单位），范围【1~7天】*/ 
	duration?:number,

}

interface rcIM_getLatestMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**要获取的消息数量*/ 
	count:number,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**要获取的消息数量*/ 
	count:number,

}

interface rcIM_setMessageAttachedUserInfo_Params {
	/**是否将用户信息携带到消息中*/ 
	attached:boolean,

}

interface rcIM_getHistoryMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1*/ 
	oldestMessageId:number,

	/**要获取的消息数量*/ 
	count:number,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1*/ 
	oldestMessageId:number,

	/**要获取的消息数量*/ 
	count:number,

}

interface rcIM_getHistoryMessagesByObjectName_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息类型标识*/ 
	objectName:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1*/ 
	oldestMessageId:number,

	/**要获取的消息数量*/ 
	count:number,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息类型标识*/ 
	objectName:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1*/ 
	oldestMessageId:number,

	/**要获取的消息数量*/ 
	count:number,

}

interface rcIM_getRemoteHistoryMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)；不支持传入 RCConversationType.CHATROOM。*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**从该时间点开始获取消息。即：消息中的 sentTime；第一次可传 0，再次取值此参数可传入上一次获取的最后一条记录的sentTime值。*/ 
	dateTime :any,

	/**要获取的消息数量（1-20条）*/ 
	count:number,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)；不支持传入 RCConversationType.CHATROOM。*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**从该时间点开始获取消息。即：消息中的 sentTime；第一次可传 0，再次取值此参数可传入上一次获取的最后一条记录的sentTime值。*/ 
	dateTime :any,

	/**要获取的消息数量（1-20条）*/ 
	count:number,

}

interface rcIM_deleteMessages_Params {
	/**要删除的消息 Id 数组*/ 
	messageIds:Array,

	/**要删除的消息 Id 数组*/ 
	messageIds:Array,

}

interface rcIM_clearMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_recallMessage_Params {
	/**消息ID*/ 
	messageId:string,

	/**消息ID*/ 
	messageId:string,

}

interface rcIM_syncConversationReadStatus_Params {
	/**会话类型*/ 
	conversationType:string,

	/**targetId*/ 
	targetId:string,

	/**已经阅读的最后一条消息的Unix时间戳(毫秒)*/ 
	time:number,

}

interface rcIM_getUnreadCount_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_getUnreadCountByConversationTypes_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

}

interface rcIM_getUnreadMentionedMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_setMessageReceivedStatus_Params {
	/**消息 Id*/ 
	messageId:number,

	/**设置接收到的消息状态，参见 [接收到的消息状态](#receivedStatus)*/ 
	receivedStatus:string,

	/**消息 Id*/ 
	messageId:number,

	/**设置接收到的消息状态，参见 [接收到的消息状态](#receivedStatus)*/ 
	receivedStatus:string,

}

interface rcIM_setMessageSentStatus_Params {
	/**消息 Id*/ 
	messageId:number,

	/**发送出的消息的状态枚举，参见 [发送状态](#sentStatus)；*/ 
	sentStatus :string,

	/**消息 Id*/ 
	messageId:number,

	/**发送出的消息的状态枚举，参见 [发送状态](#sentStatus)；*/ 
	sentStatus :string,

}

interface rcIM_clearMessagesUnreadStatus_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_sendTypingStatus_Params {
	/**（可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType?:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。*/ 
	objectName:string,

	/**（可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType?:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。*/ 
	objectName:string,

}

interface rcIM_setMessageExtra_Params {
	/**消息 Id*/ 
	messageId:number,

	/**消息附加信息，最大 1024 字节*/ 
	value:string,

	/**消息 Id*/ 
	messageId:number,

	/**消息附加信息，最大 1024 字节*/ 
	value:string,

}

interface rcIM_getTextMessageDraft_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_saveTextMessageDraft_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**草稿的文字内容*/ 
	content:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**草稿的文字内容*/ 
	content:string,

}

interface rcIM_clearTextMessageDraft_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_getBlockedConversationList_Params {
	/**消息的会话类型，参见[会话类型](!Constant#conversationType)(ios不支持)*/ 
	conversationType:string,

	/**消息的会话类型，参见[会话类型](!Constant#conversationType)(ios不支持)*/ 
	conversationType:string,

}

interface rcIM_getConversationListByCount_Params {
	/**（可选项）回话类型组成的数组*/ 
	typeList?:Array,

	/**（可选项）获取的数量*/ 
	count?:number,

	/**（可选项）会话的时间戳（获取这个时间戳之前的会话列表，0表示从最新开始获取）*/ 
	startTime?:number,

	/**（可选项）回话类型组成的数组*/ 
	typeList?:Array,

	/**（可选项）获取的数量*/ 
	count?:number,

	/**（可选项）会话的时间戳（获取这个时间戳之前的会话列表，0表示从最新开始获取）*/ 
	startTime?:number,

}

interface rcIM_getConversation_Params {
	/**消息的会话类型，参见[会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见[会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_removeConversation_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_clearConversations_Params {
	/**消息的会话类型组成的数组，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

	/**消息的会话类型组成的数组，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

}

interface rcIM_setConversationToTop_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**是否置顶*/ 
	isTop:boolean,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**是否置顶*/ 
	isTop:boolean,

}

interface rcIM_getMessageCount_Params {
	/**消息的会话类型，参见[会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见[会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_searchConversations_Params {
	/**搜索的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

	/**搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息*/ 
	objectNames:Array,

	/**搜索的关键字*/ 
	keyword:string,

	/**搜索的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

	/**搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息*/ 
	objectNames:Array,

	/**搜索的关键字*/ 
	keyword:string,

}

interface rcIM_searchMessages_Params {
	/**指定的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**指定的会话 id*/ 
	targetId:string,

	/**搜索的关键字*/ 
	keyword:string,

	/**返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回*/ 
	count:number,

	/**查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）*/ 
	beginTime:number,

	/**指定的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**指定的会话 id*/ 
	targetId:string,

	/**搜索的关键字*/ 
	keyword:string,

	/**返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回*/ 
	count:number,

	/**查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）*/ 
	beginTime:number,

}

interface rcIM_createDiscussion_Params {
	/**讨论组名称，如：当前所有成员的名字的组合。*/ 
	name:string,

	/**讨论组成员 Id 列表*/ 
	userIdList:Array,

	/**讨论组名称，如：当前所有成员的名字的组合。*/ 
	name:string,

	/**讨论组成员 Id 列表*/ 
	userIdList:Array,

}

interface rcIM_getDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**讨论组 Id*/ 
	discussionId:string,

}

interface rcIM_setDiscussionName_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**讨论组名称*/ 
	name:string,

	/**讨论组 Id*/ 
	discussionId:string,

	/**讨论组名称*/ 
	name:string,

}

interface rcIM_addMemberToDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**邀请的用户 Id 列表*/ 
	userIdList:Array,

	/**讨论组 Id*/ 
	discussionId:string,

	/**邀请的用户 Id 列表*/ 
	userIdList:Array,

}

interface rcIM_removeMemberFromDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**用户 Id*/ 
	userId:string,

	/**讨论组 Id*/ 
	discussionId:string,

	/**用户 Id*/ 
	userId:string,

}

interface rcIM_quitDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**讨论组 Id*/ 
	discussionId:string,

}

interface rcIM_setDiscussionInviteStatus_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**邀请状态，默认为开放，参见 [讨论组邀请状态](!Constant#discussionInviteStatus)*/ 
	inviteStatus:string,

	/**讨论组 Id*/ 
	discussionId:string,

	/**邀请状态，默认为开放，参见 [讨论组邀请状态](!Constant#discussionInviteStatus)*/ 
	inviteStatus:string,

}

interface rcIM_joinChatRoom_Params {
	/**聊天室 Id*/ 
	chatRoomId:string,

	/**进入聊天室拉取消息数目*/ 
	defMessageCount:number,

	/**聊天室 Id*/ 
	chatRoomId:string,

	/**进入聊天室拉取消息数目*/ 
	defMessageCount:number,

}

interface rcIM_quitChatRoom_Params {
	/**聊天室 Id*/ 
	chatRoomId:string,

	/**聊天室 Id*/ 
	chatRoomId:string,

}

interface rcIM_addToBlacklist_Params {
	/**要加入黑名单的用户 Id*/ 
	userId:string,

	/**要加入黑名单的用户 Id*/ 
	userId:string,

}

interface rcIM_removeFromBlacklist_Params {
	/**要移出黑名单的用户 Id*/ 
	userId:string,

	/**要移出黑名单的用户 Id*/ 
	userId:string,

}

interface rcIM_getBlacklistStatus_Params {
	/**要查询的用户 Id*/ 
	userId:string,

	/**要查询的用户 Id*/ 
	userId:string,

}

interface rcIM_addCallReceiveListener_Params {
	/**要监听的事件*/ 
	target:string,

	/**操作结果*/ 
	ret:JSON,

	/**要监听的事件*/ 
	target:string,

	/**操作结果*/ 
	ret:JSON,

}

interface rcIM_removeCallReceiveListener_Params {
	/**要移除的来电监听的事件*/ 
	target:string,

	/**要移除的来电监听的事件*/ 
	target:string,

}

interface rcIM_startCall_Params {
	/**目标会话ID*/ 
	targetId:string,

	/**（可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType?:string,

	/**（可选项）发起的通话媒体类型*/ 
	mediaType?:string,

	/**（可选项）邀请的用户 ID 列表*/ 
	userIdList?:string,

	/**（可选项）附件信息*/ 
	extra?:string,

	/**操作结果*/ 
	ret:JSON,

	/**目标会话ID*/ 
	targetId:string,

	/**（可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType?:string,

	/**（可选项）发起的通话媒体类型*/ 
	mediaType?:string,

	/**（可选项）邀请的用户 ID 列表*/ 
	userIdList?:string,

	/**（可选项）附件信息*/ 
	extra?:string,

	/**操作结果*/ 
	ret:JSON,

}

interface rcIM_addCallSessionListener_Params {
	/**要监听的事件*/ 
	target:string,

	/**监听事件返回，其中callOutgoing、callDidConnect、callDidDisconnect(android上会有disConnectReason参数回调)、shouldAlertForWaitingRemoteResponse、shouldRingForIncomingCall、shouldStopAlertAndRing只返回事件，无参数返回*/ 
	ret:JSON,

	/**要监听的事件*/ 
	target:string,

	/**监听事件返回，其中callOutgoing、callDidConnect、callDidDisconnect(android上会有disConnectReason参数回调)、shouldAlertForWaitingRemoteResponse、shouldRingForIncomingCall、shouldStopAlertAndRing只返回事件，无参数返回*/ 
	ret:JSON,

}

interface rcIM_removeCallSessionListener_Params {
	/**要移除的来电监听的事件*/ 
	target:string,

	/**要移除的来电监听的事件*/ 
	target:string,

}

interface rcIM_isCallEnabled_Params {
	/**（可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType) (android不支持)*/ 
	conversationType?:string,

	/**（可选项）发起的通话媒体类型 (android不支持)*/ 
	mediaType?:string,

	/**（可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType) (android不支持)*/ 
	conversationType?:string,

	/**（可选项）发起的通话媒体类型 (android不支持)*/ 
	mediaType?:string,

}

interface rcIM_setVideoProfile_Params {
	/**（可选项）通话视频参数*/ 
	profile?:string,

	/**（可选项）通话视频参数*/ 
	profile?:string,

}

interface rcIM_setEnableBeauty_Params {
	/**（可选项）是否使用美颜*/ 
	enableBeauty?:boolean,

	/**（可选项）是否使用美颜*/ 
	enableBeauty?:boolean,

}

interface rcIM_accept_Params {
	/**（可选项）接听使用的媒体类型 (android不支持)*/ 
	mediaType?:string,

	/**呼叫id (ios不支持)*/ 
	callId :string,

	/**（可选项）接听使用的媒体类型 (android不支持)*/ 
	mediaType?:string,

	/**呼叫id (ios不支持)*/ 
	callId :string,

}

interface rcIM_addParticipants_Params {
	/**邀请的用户 ID 列表*/ 
	userIds:Array,

	/**邀请的观察者列表,没有观察者可以不传(iOS不支持)*/ 
	observerUserIds:Array,

	/**邀请的用户 ID 列表*/ 
	userIds:Array,

	/**邀请的观察者列表,没有观察者可以不传(iOS不支持)*/ 
	observerUserIds:Array,

}

interface rcIM_setVideoView_Params {
	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**用户 ID*/ 
	userId:string,

	/**（可选项）设视频显示模式 (android不支持)*/ 
	renderModel?:string,

	/**（可选项）背景配置，支持rgb、rgba()、#、img（本地路径）*/ 
	bg?:string,

	/**（可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）视频是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**用户 ID*/ 
	userId:string,

	/**（可选项）设视频显示模式 (android不支持)*/ 
	renderModel?:string,

	/**（可选项）背景配置，支持rgb、rgba()、#、img（本地路径）*/ 
	bg?:string,

	/**（可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）视频是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface rcIM_resetVideoView_Params {
	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**用户 ID*/ 
	userId:string,

	/**（可选项）设视频显示模式 (android不支持)*/ 
	renderModel?:string,

	/**（可选项）背景配置，支持rgb、rgba()、#、img（本地路径）*/ 
	bg?:string,

	/**（可选项）改变位置大小时添加的动画效果时长，为负数或0时表示没动画效果*/ 
	animationDuration?:number,

	/**用户 ID*/ 
	userId:string,

	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**用户 ID*/ 
	userId:string,

	/**（可选项）设视频显示模式 (android不支持)*/ 
	renderModel?:string,

	/**（可选项）背景配置，支持rgb、rgba()、#、img（本地路径）*/ 
	bg?:string,

	/**（可选项）改变位置大小时添加的动画效果时长，为负数或0时表示没动画效果*/ 
	animationDuration?:number,

	/**用户 ID*/ 
	userId:string,

}

interface rcIM_removeVideoView_Params {
	/**用户 ID*/ 
	userId:string,

	/**用户 ID*/ 
	userId:string,

}

interface rcIM_changeMediaType_Params {
	/**（可选项）接听使用的媒体类型*/ 
	mediaType?:string,

	/**（可选项）接听使用的媒体类型*/ 
	mediaType?:string,

}

interface rcIM_setMuted_Params {
	/**（可选项）是否静音*/ 
	muted?:boolean,

	/**（可选项）是否静音*/ 
	muted?:boolean,

}

interface rcIM_setSpeakerEnabled_Params {
	/**（可选项）是否开启扬声器*/ 
	speakerEnabled?:boolean,

	/**（可选项）是否开启扬声器*/ 
	speakerEnabled?:boolean,

}

interface rcIM_setCameraEnabled_Params {
	/**（可选项）是否打开摄像头*/ 
	cameraEnabled?:boolean,

	/**（可选项）是否打开摄像头*/ 
	cameraEnabled?:boolean,

}

interface rcIM_configLocalNotification_Params {
	/**进入后台两分钟内收到通知的显示内容，不传则显示消息内容*/ 
	alertTitle:string,

	/**推送提示是否显示昵称，注：设置昵称的方式为：在发送消息接口的extra字段中填写昵称信息，格式为extra:{userInfo:{nickName:"用户昵称"}}*/ 
	showNickname:boolean,

	/**进入后台两分钟内收到通知的显示内容，不传则显示消息内容*/ 
	alertTitle:string,

	/**推送提示是否显示昵称，注：设置昵称的方式为：在发送消息接口的extra字段中填写昵称信息，格式为extra:{userInfo:{nickName:"用户昵称"}}*/ 
	showNickname:boolean,

}

interface rcIM_getConversationNotificationStatus_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_setConversationNotificationStatus_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**会话通知提醒状态，参见 [会话通知提醒状态](!Constant#conversationNotificationStatus)*/ 
	notificationStatus:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**会话通知提醒状态，参见 [会话通知提醒状态](!Constant#conversationNotificationStatus)*/ 
	notificationStatus:string,

}

interface rcIM_setNotificationQuietHours_Params {
	/**起始时间 格式 HH:MM:SS*/ 
	startTime:string,

	/**间隔分钟数 0 < spanMinutes < 1440。*/ 
	spanMinutes:number,

	/**起始时间 格式 HH:MM:SS*/ 
	startTime:string,

	/**间隔分钟数 0 < spanMinutes < 1440。*/ 
	spanMinutes:number,

}

interface rcIM_setUserAvatar_Params {
	/**用户id(connect成功回调返回来的id)*/ 
	userId:string,

	/**用户昵称*/ 
	nickName:string,

	/**头像URI*/ 
	avatarUrl:string,

	/**用户id(connect成功回调返回来的id)*/ 
	userId:string,

	/**用户昵称*/ 
	nickName:string,

	/**头像URI*/ 
	avatarUrl:string,

}

interface rcIM_refreshUserInfoCache_Params {
	/**用户id(addNeedAvatarListener成功回调返回来的id)*/ 
	userId:string,

	/**用户昵称*/ 
	nickName:string,

	/**头像URI*/ 
	avatarUrl:string,

	/**用户id(addNeedAvatarListener成功回调返回来的id)*/ 
	userId:string,

	/**用户昵称*/ 
	nickName:string,

	/**头像URI*/ 
	avatarUrl:string,

}

interface rcIM_configChatSubTitle_Params {
	/**(必选项) 根据会话id配置会话页面的副标题*/ 
	titleConfig:Array<JSON>,

	/**可选， 副标题字体大小*/ 
	subTitleSize?:number,

	/**可选，副标题字体颜色*/ 
	subTitleColor?:string,

	/**可选，副标题背景颜色*/ 
	bgColor?:string,

	/**可选，副标题背景的高度*/ 
	bgHeight?:number,

	/**(必选项) 根据会话id配置会话页面的副标题*/ 
	titleConfig:Array<JSON>,

	/**可选， 副标题字体大小*/ 
	subTitleSize?:number,

	/**可选，副标题字体颜色*/ 
	subTitleColor?:string,

	/**可选，副标题背景颜色*/ 
	bgColor?:string,

	/**可选，副标题背景的高度*/ 
	bgHeight?:number,

}

interface rcIM_configChatButtons_Params {
	/**(可选项) 聊天界面输入框扩展面板自定义显示各默认功能按钮*/ 
	pluginItems?:Array,

	/**（可选项）聊天扩展功能面板添加自定义按钮信息组成的数组(android不支持)*/ 
	insertPluginItems?:Array,

	/**（可选项）聊天页面右上角按钮图标，要求本地路径（fs://、widget)*/ 
	rightIcon?:string,

	/**（可选项）聊天页面右上角按钮图标路径（要求本地路径fs://、widget://)组成的数组*/ 
	rightIcons?:Array,

	/**（可选项）聊天页面标题后面是否显示消息免打扰图标(此参数用来控制在调用setConversationNotificationStatus接口后是否在会话页面的标题栏后面显示消息免打扰图标)*/ 
	dndIcon?:boolean,

	/**(可选项) 聊天界面输入框扩展面板自定义显示各默认功能按钮*/ 
	pluginItems?:Array,

	/**（可选项）聊天扩展功能面板添加自定义按钮信息组成的数组(android不支持)*/ 
	insertPluginItems?:Array,

	/**（可选项）聊天页面右上角按钮图标，要求本地路径（fs://、widget)*/ 
	rightIcon?:string,

	/**（可选项）聊天页面右上角按钮图标路径（要求本地路径fs://、widget://)组成的数组*/ 
	rightIcons?:Array,

	/**（可选项）聊天页面标题后面是否显示消息免打扰图标(此参数用来控制在调用setConversationNotificationStatus接口后是否在会话页面的标题栏后面显示消息免打扰图标)*/ 
	dndIcon?:boolean,

}

interface rcIM_configChat_Params {
	/**(可选项) 是否开启撤销刚发送消息的功能(android不支持；sdk默认会打开此功能)*/ 
	messageRecall?:boolean,

	/**(可选项) 是否显示对方输入状态*/ 
	typingStatus?:boolean,

	/**(可选项) 是否开启撤销刚发送消息的功能(android不支持；sdk默认会打开此功能)*/ 
	messageRecall?:boolean,

	/**(可选项) 是否显示对方输入状态*/ 
	typingStatus?:boolean,

}

interface rcIM_configGroupChat_Params {
	/**(可选项) 是否开启@功能*/ 
	messageMentioned?:boolean,

	/**群组成员id列表，若不传则@功能和群组红包功能均会失效(android不支持)*/ 
	members:Array,

	/**群组成员信息列表(ios不支持)*/ 
	membersInfo:Array<JSON>,

	/**(可选项) 是否开启@功能*/ 
	messageMentioned?:boolean,

	/**群组成员id列表，若不传则@功能和群组红包功能均会失效(android不支持)*/ 
	members:Array,

	/**群组成员信息列表(ios不支持)*/ 
	membersInfo:Array<JSON>,

}

interface rcIM_openConversationList_Params {
	/**（可选项）会话列表页面标题*/ 
	title?:string,

	/**（可选项）当前会话列表是否为从聚合Cell点击进入的子会话列表，您在点击会话列表中的聚合Cell跳转到到子会话列表时，需要将此属性设置为true。*/ 
	isEnteredToCollectionWindow?:boolean,

	/**（可选项）当连接状态变化SDK自动重连时，是否在NavigationBar中显示连接中的提示。*/ 
	showConnectingStatus?:boolean,

	/**（可选项）设置需要显示哪些类型的会话参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes?:Array,

	/**（可选项）设置在列表中需要聚合为一条显示的会话类型数组参见[会话类型](!Constant#conversationType)*/ 
	collectionTypes?:Array,

	/**（可选项）头像形状，(android不支持)*/ 
	avatarStyle?:string,

	/**（可选项）头像大小，(android不支持)*/ 
	avatarSize?:JSON,

	/**（可选项） Cell的背景颜色，(android不支持)*/ 
	cellBgColor?:string,

	/**（可选项） 置顶会话的Cell背景颜色，(android不支持)*/ 
	topCellBgColor?:string,

	/**导航条样式配置*/ 
	navigationBar:JSON,

	/**（可选项）会话列表页面标题*/ 
	title?:string,

	/**（可选项）当前会话列表是否为从聚合Cell点击进入的子会话列表，您在点击会话列表中的聚合Cell跳转到到子会话列表时，需要将此属性设置为true。*/ 
	isEnteredToCollectionWindow?:boolean,

	/**（可选项）当连接状态变化SDK自动重连时，是否在NavigationBar中显示连接中的提示。*/ 
	showConnectingStatus?:boolean,

	/**（可选项）设置需要显示哪些类型的会话参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes?:Array,

	/**（可选项）设置在列表中需要聚合为一条显示的会话类型数组参见[会话类型](!Constant#conversationType)*/ 
	collectionTypes?:Array,

	/**（可选项）头像形状，(android不支持)*/ 
	avatarStyle?:string,

	/**（可选项）头像大小，(android不支持)*/ 
	avatarSize?:JSON,

	/**（可选项） Cell的背景颜色，(android不支持)*/ 
	cellBgColor?:string,

	/**（可选项） 置顶会话的Cell背景颜色，(android不支持)*/ 
	topCellBgColor?:string,

	/**导航条样式配置*/ 
	navigationBar:JSON,

}

interface rcIM_openConversation_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**页面标题*/ 
	title:string,

	/**导航条样式配置*/ 
	navigationBar:JSON,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**页面标题*/ 
	title:string,

	/**导航条样式配置*/ 
	navigationBar:JSON,

}

interface rcIM_startSingleCall_Params {
	/**会话 id*/ 
	targetId:string,

	/**会话媒体类型*/ 
	type:string,

	/**会话 id*/ 
	targetId:string,

	/**会话媒体类型*/ 
	type:string,

}

interface rcIM_startMultiCall_Params {
	/**会话类型*/ 
	conversationType:string,

	/**会话 id*/ 
	targetId:string,

	/**会话媒体类型*/ 
	type:string,

	/**参与者 id 列表*/ 
	userids:Array,

	/**会话类型*/ 
	conversationType:string,

	/**会话 id*/ 
	targetId:string,

	/**会话媒体类型*/ 
	type:string,

	/**参与者 id 列表*/ 
	userids:Array,

}

interface rcIM_setWalletStyles_Params {
	/**（可选项）标准字体大小*/ 
	themeFontSize?:number,

	/**（可选项）标题栏字体大小*/ 
	NavTitfontSize?:number,

	/**（可选项）首页金额大小*/ 
	pageChargeFont?:number,

	/**（可选项）钱包标题*/ 
	pageTitleStr?:string,

	/**（可选项）钱包页顶部主题色*/ 
	themePageColor?:string,

	/**（可选项）钱包页，充值、提现按钮颜色*/ 
	pageBtnColor?:string,

	/**（可选项）按钮主题色*/ 
	themeBtnColor?:string,

	/**（可选项）导航条主题色*/ 
	themeNavColor?:string,

	/**（可选项）标题颜色*/ 
	NavTitColor?:string,

	/**（可选项）标准字体大小*/ 
	themeFontSize?:number,

	/**（可选项）标题栏字体大小*/ 
	NavTitfontSize?:number,

	/**（可选项）首页金额大小*/ 
	pageChargeFont?:number,

	/**（可选项）钱包标题*/ 
	pageTitleStr?:string,

	/**（可选项）钱包页顶部主题色*/ 
	themePageColor?:string,

	/**（可选项）钱包页，充值、提现按钮颜色*/ 
	pageBtnColor?:string,

	/**（可选项）按钮主题色*/ 
	themeBtnColor?:string,

	/**（可选项）导航条主题色*/ 
	themeNavColor?:string,

	/**（可选项）标题颜色*/ 
	NavTitColor?:string,

}

interface rcIM_walletSDKWithPartnerId_Params {
	/**渠道ID（融云/魔方金融分配给贵公司的渠道名称）*/ 
	partnerId:string,

	/**渠道ID（融云/魔方金融分配给贵公司的渠道名称）*/ 
	partnerId:string,

}

interface rcIM_walletSDKWithThirdToken_Params {
	/**三方令牌*/ 
	token:string,

	/**三方令牌*/ 
	token:string,

}

interface rcIM_setServerInfo_Params {
	/**私有部署的导航服务器地址*/ 
	naviServer:string,

	/**私有部署的媒体服务器地址，即文件和图片的上传地址。使用私有云时必须填写*/ 
	fileServer:string,

	/**私有部署的导航服务器地址*/ 
	naviServer:string,

	/**私有部署的媒体服务器地址，即文件和图片的上传地址。使用私有云时必须填写*/ 
	fileServer:string,

}

interface rcIM_init_Params {
	/**(可选项)配置小米推送的信息*/ 
	miPush?:JSON,

	/**(可选项) 是否集成华为推送*/ 
	huaweiPush?:boolean,

	/**(可选项)配置小米推送的信息*/ 
	miPush?:JSON,

	/**(可选项) 是否集成华为推送*/ 
	huaweiPush?:boolean,

}

interface rcIM_connect_Params {
	/**从服务端获取的用户身份令牌（Token）*/ 
	token:string,

	/**从服务端获取的用户身份令牌（Token）*/ 
	token:string,

}

interface rcIM_disconnect_Params {
	/**（可选项）断开后是否接收 Push*/ 
	isReceivePush?:boolean,

	/**（可选项）断开后是否接收 Push*/ 
	isReceivePush?:boolean,

}

interface rcIM_sendTextMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的文字内容*/ 
	text:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**（可选项）@功能，当conversationType为GROUP或DISCUSSION有效；(ios不支持DISCUSSION)；注：＠ 消息推送会越过所有免打扰逻辑，给用户推送 Push 通知。*/ 
	mentionedInfo?:JSON,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的文字内容*/ 
	text:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**（可选项）@功能，当conversationType为GROUP或DISCUSSION有效；(ios不支持DISCUSSION)；注：＠ 消息推送会越过所有免打扰逻辑，给用户推送 Push 通知。*/ 
	mentionedInfo?:JSON,

}

interface rcIM_sendImageMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**图片的路径，支持 fs://，如：fs:///image/123.jpg*/ 
	imagePath:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**（可选项）是否发送原图*/ 
	isFull?:boolean,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**图片的路径，支持 fs://，如：fs:///image/123.jpg*/ 
	imagePath:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**（可选项）是否发送原图*/ 
	isFull?:boolean,

}

interface rcIM_sendVoiceMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式*/ 
	voicePath:string,

	/**语音消息的时长，单位为秒*/ 
	duration:number,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式*/ 
	voicePath:string,

	/**语音消息的时长，单位为秒*/ 
	duration:number,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

}

interface rcIM_sendLocationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**纬度*/ 
	latitude:number,

	/**经度*/ 
	longitude:number,

	/**兴趣点*/ 
	poi:string,

	/**地图缩率图的路径，支持 fs://，如：fs:///location_thumb/123.jpg*/ 
	imagePath:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**纬度*/ 
	latitude:number,

	/**经度*/ 
	longitude:number,

	/**兴趣点*/ 
	poi:string,

	/**地图缩率图的路径，支持 fs://，如：fs:///location_thumb/123.jpg*/ 
	imagePath:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

}

interface rcIM_sendRichContentMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的标题*/ 
	title:string,

	/**消息的内容描述*/ 
	description:string,

	/**消息图片的网络地址*/ 
	imageUrl:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的标题*/ 
	title:string,

	/**消息的内容描述*/ 
	description:string,

	/**消息图片的网络地址*/ 
	imageUrl:string,

	/**（可选项）消息的附加信息*/ 
	extra?:string,

}

interface rcIM_sendCommandNotificationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**命令的名称*/ 
	name:string,

	/**命令的数据*/ 
	data:string,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**命令的名称*/ 
	name:string,

	/**命令的数据*/ 
	data:string,

}

interface rcIM_sendContactNotificationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**好友请求当前的操作名*/ 
	operation:string,

	/**当前操作发起用户的用户ID*/ 
	sourceUserId:string,

	/**当前操作的消息内容*/ 
	message:string,

	/**当前操作的附加信息*/ 
	extra:string,

}

interface rcIM_sendProfileNotificationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**资料通知的操作名*/ 
	operation:string,

	/**信息变更的数据，可以为任意格式，如json数据。*/ 
	data:string,

	/**当前操作的附加信息*/ 
	extra:string,

}

interface rcIM_sendInformationNotificationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**当前操作的消息内容*/ 
	message:string,

	/**当前操作的附加信息*/ 
	extra:string,

}

interface rcIM_sendGroupNotificationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**群组通知当前的操作名*/ 
	operation:string,

	/**当前操作发起用户的用户ID*/ 
	operatorUserId:string,

	/**当前操作的消息内容*/ 
	message:string,

	/**当前操作的目标对象，如被当前操作目标用户的用户ID或变更后的群主名称等。*/ 
	data:string,

	/**当前操作的附加信息*/ 
	extra:string,

}

interface rcIM_sendCommandMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**命令的名称*/ 
	name:string,

	/**命令的数据*/ 
	data:string,

	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**命令的名称*/ 
	name:string,

	/**命令的数据*/ 
	data:string,

}

interface rcIM_sendReadReceiptMessage_Params {
	/**目标会话ID*/ 
	targetId:string,

	/**该会话中已阅读的最后一条消息的发送时间戳*/ 
	timestamp:number,

	/**目标会话ID*/ 
	targetId:string,

	/**该会话中已阅读的最后一条消息的发送时间戳*/ 
	timestamp:number,

}

interface rcIM_sendReadReceiptRequest_Params {
	/**消息id*/ 
	messageId:number,

	/**消息id*/ 
	messageId:number,

}

interface rcIM_addReadReceiptListener_Params {
	/**要监听的事件*/ 
	target:string,

	/**要监听的事件*/ 
	target:string,

}

interface rcIM_removeReadReceiptListener_Params {
	/**要监听的事件*/ 
	target:string,

	/**要监听的事件*/ 
	target:string,

}

interface rcIM_sendReadReceiptResponse_Params {
	/**会话类型*/ 
	conversationType:string,

	/**targetId*/ 
	targetId:string,

	/**消息id*/ 
	messageId:number,

	/**会话类型*/ 
	conversationType:string,

	/**targetId*/ 
	targetId:string,

	/**消息id*/ 
	messageId:number,

}

interface rcIM_setOfflineMessageDuration_Params {
	/**(可选项)用户离线消息存储时间（以天为单位），范围【1~7天】*/ 
	duration?:number,

	/**(可选项)用户离线消息存储时间（以天为单位），范围【1~7天】*/ 
	duration?:number,

}

interface rcIM_getLatestMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**要获取的消息数量*/ 
	count:number,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**要获取的消息数量*/ 
	count:number,

}

interface rcIM_getHistoryMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1*/ 
	oldestMessageId:number,

	/**要获取的消息数量*/ 
	count:number,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1*/ 
	oldestMessageId:number,

	/**要获取的消息数量*/ 
	count:number,

}

interface rcIM_getHistoryMessagesByObjectName_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息类型标识*/ 
	objectName:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1*/ 
	oldestMessageId:number,

	/**要获取的消息数量*/ 
	count:number,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息类型标识*/ 
	objectName:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1*/ 
	oldestMessageId:number,

	/**要获取的消息数量*/ 
	count:number,

}

interface rcIM_getRemoteHistoryMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)；不支持传入 RCConversationType.CHATROOM。*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**从该时间点开始获取消息。即：消息中的 sentTime；第一次可传 0，再次取值此参数可传入上一次获取的最后一条记录的sentTime值。*/ 
	dateTime :any,

	/**要获取的消息数量（1-20条）*/ 
	count:number,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)；不支持传入 RCConversationType.CHATROOM。*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**从该时间点开始获取消息。即：消息中的 sentTime；第一次可传 0，再次取值此参数可传入上一次获取的最后一条记录的sentTime值。*/ 
	dateTime :any,

	/**要获取的消息数量（1-20条）*/ 
	count:number,

}

interface rcIM_deleteMessages_Params {
	/**要删除的消息 Id 数组*/ 
	messageIds:Array,

	/**要删除的消息 Id 数组*/ 
	messageIds:Array,

}

interface rcIM_clearMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_recallMessage_Params {
	/**消息ID*/ 
	messageId:string,

	/**消息ID*/ 
	messageId:string,

}

interface rcIM_getUnreadCount_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_getUnreadCountByConversationTypes_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

}

interface rcIM_getUnreadMentionedMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_setMessageReceivedStatus_Params {
	/**消息 Id*/ 
	messageId:number,

	/**设置接收到的消息状态，参见 [接收到的消息状态](#receivedStatus)*/ 
	receivedStatus:string,

	/**消息 Id*/ 
	messageId:number,

	/**设置接收到的消息状态，参见 [接收到的消息状态](#receivedStatus)*/ 
	receivedStatus:string,

}

interface rcIM_setMessageSentStatus_Params {
	/**消息 Id*/ 
	messageId:number,

	/**发送出的消息的状态枚举，参见 [发送状态](#sentStatus)；*/ 
	sentStatus :string,

	/**消息 Id*/ 
	messageId:number,

	/**发送出的消息的状态枚举，参见 [发送状态](#sentStatus)；*/ 
	sentStatus :string,

}

interface rcIM_clearMessagesUnreadStatus_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_sendTypingStatus_Params {
	/**（可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType?:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。*/ 
	objectName:string,

	/**（可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType?:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。*/ 
	objectName:string,

}

interface rcIM_setMessageExtra_Params {
	/**消息 Id*/ 
	messageId:number,

	/**消息附加信息，最大 1024 字节*/ 
	value:string,

	/**消息 Id*/ 
	messageId:number,

	/**消息附加信息，最大 1024 字节*/ 
	value:string,

}

interface rcIM_getTextMessageDraft_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_saveTextMessageDraft_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**草稿的文字内容*/ 
	content:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**草稿的文字内容*/ 
	content:string,

}

interface rcIM_clearTextMessageDraft_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_getBlockedConversationList_Params {
	/**消息的会话类型，参见[会话类型](!Constant#conversationType)(ios不支持)*/ 
	conversationType:string,

	/**消息的会话类型，参见[会话类型](!Constant#conversationType)(ios不支持)*/ 
	conversationType:string,

}

interface rcIM_getConversationListByCount_Params {
	/**（可选项）回话类型组成的数组*/ 
	typeList?:Array,

	/**（可选项）获取的数量*/ 
	count?:number,

	/**（可选项）会话的时间戳（获取这个时间戳之前的会话列表，0表示从最新开始获取）*/ 
	startTime?:number,

	/**（可选项）回话类型组成的数组*/ 
	typeList?:Array,

	/**（可选项）获取的数量*/ 
	count?:number,

	/**（可选项）会话的时间戳（获取这个时间戳之前的会话列表，0表示从最新开始获取）*/ 
	startTime?:number,

}

interface rcIM_getConversation_Params {
	/**消息的会话类型，参见[会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见[会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_removeConversation_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_clearConversations_Params {
	/**消息的会话类型组成的数组，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

	/**消息的会话类型组成的数组，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

}

interface rcIM_setConversationToTop_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**是否置顶*/ 
	isTop:boolean,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**是否置顶*/ 
	isTop:boolean,

}

interface rcIM_getMessageCount_Params {
	/**消息的会话类型，参见[会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见[会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_searchConversations_Params {
	/**搜索的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

	/**搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息*/ 
	objectNames:Array,

	/**搜索的关键字*/ 
	keyword:string,

	/**搜索的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

	/**搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息*/ 
	objectNames:Array,

	/**搜索的关键字*/ 
	keyword:string,

}

interface rcIM_searchMessages_Params {
	/**指定的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**指定的会话 id*/ 
	targetId:string,

	/**搜索的关键字*/ 
	keyword:string,

	/**返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回*/ 
	count:number,

	/**查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）*/ 
	beginTime:number,

	/**指定的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**指定的会话 id*/ 
	targetId:string,

	/**搜索的关键字*/ 
	keyword:string,

	/**返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回*/ 
	count:number,

	/**查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）*/ 
	beginTime:number,

}

interface rcIM_createDiscussion_Params {
	/**讨论组名称，如：当前所有成员的名字的组合。*/ 
	name:string,

	/**讨论组成员 Id 列表*/ 
	userIdList:Array,

	/**讨论组名称，如：当前所有成员的名字的组合。*/ 
	name:string,

	/**讨论组成员 Id 列表*/ 
	userIdList:Array,

}

interface rcIM_getDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**讨论组 Id*/ 
	discussionId:string,

}

interface rcIM_setDiscussionName_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**讨论组名称*/ 
	name:string,

	/**讨论组 Id*/ 
	discussionId:string,

	/**讨论组名称*/ 
	name:string,

}

interface rcIM_addMemberToDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**邀请的用户 Id 列表*/ 
	userIdList:Array,

	/**讨论组 Id*/ 
	discussionId:string,

	/**邀请的用户 Id 列表*/ 
	userIdList:Array,

}

interface rcIM_removeMemberFromDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**用户 Id*/ 
	userId:string,

	/**讨论组 Id*/ 
	discussionId:string,

	/**用户 Id*/ 
	userId:string,

}

interface rcIM_quitDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**讨论组 Id*/ 
	discussionId:string,

}

interface rcIM_setDiscussionInviteStatus_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**邀请状态，默认为开放，参见 [讨论组邀请状态](!Constant#discussionInviteStatus)*/ 
	inviteStatus:string,

	/**讨论组 Id*/ 
	discussionId:string,

	/**邀请状态，默认为开放，参见 [讨论组邀请状态](!Constant#discussionInviteStatus)*/ 
	inviteStatus:string,

}

interface rcIM_joinChatRoom_Params {
	/**聊天室 Id*/ 
	chatRoomId:string,

	/**进入聊天室拉取消息数目*/ 
	defMessageCount:number,

	/**聊天室 Id*/ 
	chatRoomId:string,

	/**进入聊天室拉取消息数目*/ 
	defMessageCount:number,

}

interface rcIM_quitChatRoom_Params {
	/**聊天室 Id*/ 
	chatRoomId:string,

	/**聊天室 Id*/ 
	chatRoomId:string,

}

interface rcIM_addToBlacklist_Params {
	/**要加入黑名单的用户 Id*/ 
	userId:string,

	/**要加入黑名单的用户 Id*/ 
	userId:string,

}

interface rcIM_removeFromBlacklist_Params {
	/**要移出黑名单的用户 Id*/ 
	userId:string,

	/**要移出黑名单的用户 Id*/ 
	userId:string,

}

interface rcIM_getBlacklistStatus_Params {
	/**要查询的用户 Id*/ 
	userId:string,

	/**要查询的用户 Id*/ 
	userId:string,

}

interface rcIM_getConversationNotificationStatus_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rcIM_setConversationNotificationStatus_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**会话通知提醒状态，参见 [会话通知提醒状态](!Constant#conversationNotificationStatus)*/ 
	notificationStatus:string,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**会话通知提醒状态，参见 [会话通知提醒状态](!Constant#conversationNotificationStatus)*/ 
	notificationStatus:string,

}

interface rcIM_setNotificationQuietHours_Params {
	/**起始时间 格式 HH:MM:SS*/ 
	startTime:string,

	/**间隔分钟数 0 < spanMinutes < 1440。*/ 
	spanMinutes:number,

	/**起始时间 格式 HH:MM:SS*/ 
	startTime:string,

	/**间隔分钟数 0 < spanMinutes < 1440。*/ 
	spanMinutes:number,

}

interface rcIM_addCallReceiveListener_Params {
	/**要监听的事件*/ 
	target:string,

	/**操作结果*/ 
	ret:JSON,

	/**要监听的事件*/ 
	target:string,

	/**操作结果*/ 
	ret:JSON,

}

interface rcIM_removeCallReceiveListener_Params {
	/**要移除的来电监听的事件*/ 
	target:string,

	/**要移除的来电监听的事件*/ 
	target:string,

}

interface rcIM_startCall_Params {
	/**目标会话ID*/ 
	targetId:string,

	/**（可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType?:string,

	/**（可选项）发起的通话媒体类型*/ 
	mediaType?:string,

	/**（可选项）邀请的用户 ID 列表*/ 
	userIdList?:string,

	/**（可选项）附件信息*/ 
	extra?:string,

	/**操作结果*/ 
	ret:JSON,

	/**目标会话ID*/ 
	targetId:string,

	/**（可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType?:string,

	/**（可选项）发起的通话媒体类型*/ 
	mediaType?:string,

	/**（可选项）邀请的用户 ID 列表*/ 
	userIdList?:string,

	/**（可选项）附件信息*/ 
	extra?:string,

	/**操作结果*/ 
	ret:JSON,

}

interface rcIM_addCallSessionListener_Params {
	/**要监听的事件*/ 
	target:string,

	/**监听事件返回，其中callOutgoing、callDidConnect、callDidDisconnect(android上会有disConnectReason参数回调)、shouldAlertForWaitingRemoteResponse、shouldRingForIncomingCall、shouldStopAlertAndRing只返回事件，无参数返回*/ 
	ret:JSON,

	/**要监听的事件*/ 
	target:string,

	/**监听事件返回，其中callOutgoing、callDidConnect、callDidDisconnect(android上会有disConnectReason参数回调)、shouldAlertForWaitingRemoteResponse、shouldRingForIncomingCall、shouldStopAlertAndRing只返回事件，无参数返回*/ 
	ret:JSON,

}

interface rcIM_removeCallSessionListener_Params {
	/**要移除的来电监听的事件*/ 
	target:string,

	/**要移除的来电监听的事件*/ 
	target:string,

}

interface rcIM_isCallEnabled_Params {
	/**（可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType) (android不支持)*/ 
	conversationType?:string,

	/**（可选项）发起的通话媒体类型 (android不支持)*/ 
	mediaType?:string,

	/**（可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType) (android不支持)*/ 
	conversationType?:string,

	/**（可选项）发起的通话媒体类型 (android不支持)*/ 
	mediaType?:string,

}

interface rcIM_setVideoProfile_Params {
	/**（可选项）通话视频参数*/ 
	profile?:string,

	/**（可选项）通话视频参数*/ 
	profile?:string,

}

interface rcIM_setEnableBeauty_Params {
	/**（可选项）是否使用美颜*/ 
	enableBeauty?:boolean,

	/**（可选项）是否使用美颜*/ 
	enableBeauty?:boolean,

}

interface rcIM_accept_Params {
	/**（可选项）接听使用的媒体类型 (android不支持)*/ 
	mediaType?:string,

	/**呼叫id (ios不支持)*/ 
	callId :string,

	/**（可选项）接听使用的媒体类型 (android不支持)*/ 
	mediaType?:string,

	/**呼叫id (ios不支持)*/ 
	callId :string,

}

interface rcIM_addParticipants_Params {
	/**邀请的用户 ID 列表*/ 
	userIds:Array,

	/**邀请的观察者列表,没有观察者可以不传(iOS不支持)*/ 
	observerUserIds:Array,

	/**邀请的用户 ID 列表*/ 
	userIds:Array,

	/**邀请的观察者列表,没有观察者可以不传(iOS不支持)*/ 
	observerUserIds:Array,

}

interface rcIM_setVideoView_Params {
	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**用户 ID*/ 
	userId:string,

	/**（可选项）设视频显示模式 (android不支持)*/ 
	renderModel?:string,

	/**（可选项）背景配置，支持rgb、rgba()、#、img（本地路径）*/ 
	bg?:string,

	/**（可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）视频是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**用户 ID*/ 
	userId:string,

	/**（可选项）设视频显示模式 (android不支持)*/ 
	renderModel?:string,

	/**（可选项）背景配置，支持rgb、rgba()、#、img（本地路径）*/ 
	bg?:string,

	/**（可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）视频是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface rcIM_resetVideoView_Params {
	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**用户 ID*/ 
	userId:string,

	/**（可选项）设视频显示模式 (android不支持)*/ 
	renderModel?:string,

	/**（可选项）背景配置，支持rgb、rgba()、#、img（本地路径）*/ 
	bg?:string,

	/**（可选项）改变位置大小时添加的动画效果时长，为负数或0时表示没动画效果*/ 
	animationDuration?:number,

	/**用户 ID*/ 
	userId:string,

	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**用户 ID*/ 
	userId:string,

	/**（可选项）设视频显示模式 (android不支持)*/ 
	renderModel?:string,

	/**（可选项）背景配置，支持rgb、rgba()、#、img（本地路径）*/ 
	bg?:string,

	/**（可选项）改变位置大小时添加的动画效果时长，为负数或0时表示没动画效果*/ 
	animationDuration?:number,

	/**用户 ID*/ 
	userId:string,

}

interface rcIM_removeVideoView_Params {
	/**用户 ID*/ 
	userId:string,

	/**用户 ID*/ 
	userId:string,

}

interface rcIM_changeMediaType_Params {
	/**（可选项）接听使用的媒体类型*/ 
	mediaType?:string,

	/**（可选项）接听使用的媒体类型*/ 
	mediaType?:string,

}

interface rcIM_setMuted_Params {
	/**（可选项）是否静音*/ 
	muted?:boolean,

	/**（可选项）是否静音*/ 
	muted?:boolean,

}

interface rcIM_setSpeakerEnabled_Params {
	/**（可选项）是否开启扬声器*/ 
	speakerEnabled?:boolean,

	/**（可选项）是否开启扬声器*/ 
	speakerEnabled?:boolean,

}

interface rcIM_setCameraEnabled_Params {
	/**（可选项）是否打开摄像头*/ 
	cameraEnabled?:boolean,

	/**（可选项）是否打开摄像头*/ 
	cameraEnabled?:boolean,

}

interface rcIM_configLocalNotification_Params {
	/**进入后台两分钟内收到通知的显示内容，不传则显示消息内容*/ 
	alertTitle:string,

	/**推送提示是否显示昵称，注：设置昵称的方式为：在发送消息接口的extra字段中填写昵称信息，格式为extra:{userInfo:{nickName:"用户昵称"}}*/ 
	showNickname:boolean,

	/**进入后台两分钟内收到通知的显示内容，不传则显示消息内容*/ 
	alertTitle:string,

	/**推送提示是否显示昵称，注：设置昵称的方式为：在发送消息接口的extra字段中填写昵称信息，格式为extra:{userInfo:{nickName:"用户昵称"}}*/ 
	showNickname:boolean,

}

interface rcIM_setUserAvatar_Params {
	/**用户id(connect成功回调返回来的id)*/ 
	userId:string,

	/**用户昵称*/ 
	nickName:string,

	/**头像URI*/ 
	avatarUrl:string,

	/**用户id(connect成功回调返回来的id)*/ 
	userId:string,

	/**用户昵称*/ 
	nickName:string,

	/**头像URI*/ 
	avatarUrl:string,

}

interface rcIM_refreshUserInfoCache_Params {
	/**用户id(addNeedAvatarListener成功回调返回来的id)*/ 
	userId:string,

	/**用户昵称*/ 
	nickName:string,

	/**头像URI*/ 
	avatarUrl:string,

	/**用户id(addNeedAvatarListener成功回调返回来的id)*/ 
	userId:string,

	/**用户昵称*/ 
	nickName:string,

	/**头像URI*/ 
	avatarUrl:string,

}

interface rcIM_configChatSubTitle_Params {
	/**(必选项) 根据会话id配置会话页面的副标题*/ 
	titleConfig:Array<JSON>,

	/**可选， 副标题字体大小*/ 
	subTitleSize?:number,

	/**可选，副标题字体颜色*/ 
	subTitleColor?:string,

	/**可选，副标题背景颜色*/ 
	bgColor?:string,

	/**可选，副标题背景的高度*/ 
	bgHeight?:number,

	/**(必选项) 根据会话id配置会话页面的副标题*/ 
	titleConfig:Array<JSON>,

	/**可选， 副标题字体大小*/ 
	subTitleSize?:number,

	/**可选，副标题字体颜色*/ 
	subTitleColor?:string,

	/**可选，副标题背景颜色*/ 
	bgColor?:string,

	/**可选，副标题背景的高度*/ 
	bgHeight?:number,

}

interface rcIM_configChatButtons_Params {
	/**(可选项) 聊天界面输入框扩展面板自定义显示各默认功能按钮*/ 
	pluginItems?:Array,

	/**（可选项）聊天扩展功能面板添加自定义按钮信息组成的数组(android不支持)*/ 
	insertPluginItems?:Array,

	/**（可选项）聊天页面右上角按钮图标，要求本地路径（fs://、widget)*/ 
	rightIcon?:string,

	/**（可选项）聊天页面右上角按钮图标路径（要求本地路径fs://、widget://)组成的数组*/ 
	rightIcons?:Array,

	/**（可选项）聊天页面标题后面是否显示消息免打扰图标(此参数用来控制在调用setConversationNotificationStatus接口后是否在会话页面的标题栏后面显示消息免打扰图标)*/ 
	dndIcon?:boolean,

	/**(可选项) 聊天界面输入框扩展面板自定义显示各默认功能按钮*/ 
	pluginItems?:Array,

	/**（可选项）聊天扩展功能面板添加自定义按钮信息组成的数组(android不支持)*/ 
	insertPluginItems?:Array,

	/**（可选项）聊天页面右上角按钮图标，要求本地路径（fs://、widget)*/ 
	rightIcon?:string,

	/**（可选项）聊天页面右上角按钮图标路径（要求本地路径fs://、widget://)组成的数组*/ 
	rightIcons?:Array,

	/**（可选项）聊天页面标题后面是否显示消息免打扰图标(此参数用来控制在调用setConversationNotificationStatus接口后是否在会话页面的标题栏后面显示消息免打扰图标)*/ 
	dndIcon?:boolean,

}

interface rcIM_configChat_Params {
	/**(可选项) 是否开启撤销刚发送消息的功能(android不支持；sdk默认会打开此功能)*/ 
	messageRecall?:boolean,

	/**(可选项) 是否显示对方输入状态*/ 
	typingStatus?:boolean,

	/**(可选项) 是否开启撤销刚发送消息的功能(android不支持；sdk默认会打开此功能)*/ 
	messageRecall?:boolean,

	/**(可选项) 是否显示对方输入状态*/ 
	typingStatus?:boolean,

}

interface rcIM_configGroupChat_Params {
	/**(可选项) 是否开启@功能*/ 
	messageMentioned?:boolean,

	/**群组成员id列表，若不传则@功能和群组红包功能均会失效(android不支持)*/ 
	members:Array,

	/**群组成员信息列表(ios不支持)*/ 
	membersInfo:Array<JSON>,

	/**(可选项) 是否开启@功能*/ 
	messageMentioned?:boolean,

	/**群组成员id列表，若不传则@功能和群组红包功能均会失效(android不支持)*/ 
	members:Array,

	/**群组成员信息列表(ios不支持)*/ 
	membersInfo:Array<JSON>,

}

interface rcIM_openConversationList_Params {
	/**（可选项）会话列表页面标题*/ 
	title?:string,

	/**（可选项）当前会话列表是否为从聚合Cell点击进入的子会话列表，您在点击会话列表中的聚合Cell跳转到到子会话列表时，需要将此属性设置为true。*/ 
	isEnteredToCollectionWindow?:boolean,

	/**（可选项）当连接状态变化SDK自动重连时，是否在NavigationBar中显示连接中的提示。*/ 
	showConnectingStatus?:boolean,

	/**（可选项）设置需要显示哪些类型的会话参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes?:Array,

	/**（可选项）设置在列表中需要聚合为一条显示的会话类型数组参见[会话类型](!Constant#conversationType)*/ 
	collectionTypes?:Array,

	/**（可选项）头像形状，(android不支持)*/ 
	avatarStyle?:string,

	/**（可选项）头像大小，(android不支持)*/ 
	avatarSize?:JSON,

	/**（可选项） Cell的背景颜色，(android不支持)*/ 
	cellBgColor?:string,

	/**（可选项） 置顶会话的Cell背景颜色，(android不支持)*/ 
	topCellBgColor?:string,

	/**导航条样式配置*/ 
	navigationBar:JSON,

	/**（可选项）会话列表页面标题*/ 
	title?:string,

	/**（可选项）当前会话列表是否为从聚合Cell点击进入的子会话列表，您在点击会话列表中的聚合Cell跳转到到子会话列表时，需要将此属性设置为true。*/ 
	isEnteredToCollectionWindow?:boolean,

	/**（可选项）当连接状态变化SDK自动重连时，是否在NavigationBar中显示连接中的提示。*/ 
	showConnectingStatus?:boolean,

	/**（可选项）设置需要显示哪些类型的会话参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes?:Array,

	/**（可选项）设置在列表中需要聚合为一条显示的会话类型数组参见[会话类型](!Constant#conversationType)*/ 
	collectionTypes?:Array,

	/**（可选项）头像形状，(android不支持)*/ 
	avatarStyle?:string,

	/**（可选项）头像大小，(android不支持)*/ 
	avatarSize?:JSON,

	/**（可选项） Cell的背景颜色，(android不支持)*/ 
	cellBgColor?:string,

	/**（可选项） 置顶会话的Cell背景颜色，(android不支持)*/ 
	topCellBgColor?:string,

	/**导航条样式配置*/ 
	navigationBar:JSON,

}

interface rcIM_openConversation_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**页面标题*/ 
	title:string,

	/**导航条样式配置*/ 
	navigationBar:JSON,

	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**页面标题*/ 
	title:string,

	/**导航条样式配置*/ 
	navigationBar:JSON,

}

interface rcIM_startSingleCall_Params {
	/**会话 id*/ 
	targetId:string,

	/**会话媒体类型*/ 
	type:string,

	/**会话 id*/ 
	targetId:string,

	/**会话媒体类型*/ 
	type:string,

}

interface rcIM_startMultiCall_Params {
	/**会话类型*/ 
	conversationType:string,

	/**会话 id*/ 
	targetId:string,

	/**会话媒体类型*/ 
	type:string,

	/**参与者 id 列表*/ 
	userids:Array,

	/**会话类型*/ 
	conversationType:string,

	/**会话 id*/ 
	targetId:string,

	/**会话媒体类型*/ 
	type:string,

	/**参与者 id 列表*/ 
	userids:Array,

}

interface rcIM_setWalletStyles_Params {
	/**（可选项）标准字体大小*/ 
	themeFontSize?:number,

	/**（可选项）标题栏字体大小*/ 
	NavTitfontSize?:number,

	/**（可选项）首页金额大小*/ 
	pageChargeFont?:number,

	/**（可选项）钱包标题*/ 
	pageTitleStr?:string,

	/**（可选项）钱包页顶部主题色*/ 
	themePageColor?:string,

	/**（可选项）钱包页，充值、提现按钮颜色*/ 
	pageBtnColor?:string,

	/**（可选项）按钮主题色*/ 
	themeBtnColor?:string,

	/**（可选项）导航条主题色*/ 
	themeNavColor?:string,

	/**（可选项）标题颜色*/ 
	NavTitColor?:string,

	/**（可选项）标准字体大小*/ 
	themeFontSize?:number,

	/**（可选项）标题栏字体大小*/ 
	NavTitfontSize?:number,

	/**（可选项）首页金额大小*/ 
	pageChargeFont?:number,

	/**（可选项）钱包标题*/ 
	pageTitleStr?:string,

	/**（可选项）钱包页顶部主题色*/ 
	themePageColor?:string,

	/**（可选项）钱包页，充值、提现按钮颜色*/ 
	pageBtnColor?:string,

	/**（可选项）按钮主题色*/ 
	themeBtnColor?:string,

	/**（可选项）导航条主题色*/ 
	themeNavColor?:string,

	/**（可选项）标题颜色*/ 
	NavTitColor?:string,

}

interface rcIM_walletSDKWithPartnerId_Params {
	/**渠道ID（融云/魔方金融分配给贵公司的渠道名称）*/ 
	partnerId:string,

	/**渠道ID（融云/魔方金融分配给贵公司的渠道名称）*/ 
	partnerId:string,

}

interface rcIM_walletSDKWithThirdToken_Params {
	/**三方令牌*/ 
	token:string,

	/**三方令牌*/ 
	token:string,

}

interface BaiduMobAds {
	/** 初始化*/ 
	init(callback?: (ret:JSON) => void):void

	/**
	 * `显示闪屏广告`
	 * ========params==========
	 *
	 * `adId` :string : 广告代码位id
	 *
	 * `rect ` :JSON : 位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed ` :string : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	showSplash(params:BaiduMobAds_showSplash_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示横幅广告`
	 * ========params==========
	 *
	 * `adId` :string : 广告代码位id
	 *
	 * `rect ` :JSON : 位置及尺寸
	 */
	showBanner(params:BaiduMobAds_showBanner_Params, callback?: (ret:JSON) => void):void

	/** 关闭已打开的横幅广告*/ 
	closeBanner(callback?: (ret:JSON) => void):void

	/**
	 * `分享网络视频资源`
	 * ========params==========
	 *
	 * `adId` :string : 广告代码位id
	 *
	 * `rect ` :JSON : （可选项） 位置及尺寸,type为非other时，需要传参
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed ` :string : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `type` :string : （可选项） 广告类型，默认other
	 */
	showInterstitialAd(params:BaiduMobAds_showInterstitialAd_Params, callback?: (ret:JSON) => void):void

	/** 显示激励广告*/ 
	showRewardVideo():void

	/**
	 * `显示贴片广告`
	 * ========params==========
	 *
	 * `adId` :string : 广告代码位id
	 *
	 * `rect ` :JSON : 位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed ` :string : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	showPatchVideo(params:BaiduMobAds_showPatchVideo_Params, callback?: (ret:JSON) => void):void

}
interface BaiduMobAds_showSplash_Params {
	/**广告代码位id*/ 
	adId:string,

	/**位置及尺寸*/ 
	rect :JSON,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed ?:string,

}

interface BaiduMobAds_showBanner_Params {
	/**广告代码位id*/ 
	adId:string,

	/**位置及尺寸*/ 
	rect :JSON,

}

interface BaiduMobAds_showInterstitialAd_Params {
	/**广告代码位id*/ 
	adId:string,

	/**（可选项） 位置及尺寸,type为非other时，需要传参*/ 
	rect ?:JSON,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed ?:string,

	/**（可选项） 广告类型，默认other*/ 
	type?:string,

}

interface BaiduMobAds_showPatchVideo_Params {
	/**广告代码位id*/ 
	adId:string,

	/**位置及尺寸*/ 
	rect :JSON,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed ?:string,

}

interface haierIM {
	/**
	 * `登录`
	 * ========params==========
	 *
	 * `userName` :string : 用户工号
	 */
	login(params:haierIM_login_Params):void

	/**
	 * `根据用户名获取该人在 ihaier 中的 Token 和 userid`
	 * ========params==========
	 *
	 * `userName` :string : 用户工号
	 */
	getTokenByUserName(params:haierIM_getTokenByUserName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建聊天会话(调用该接口则直接创建群组会话，进入聊天界面，否则直接进入消息列表界面)`
	 * ========params==========
	 *
	 * `groupId` :string : 圈子id
	 *
	 * `userName` :string : 当前用户名称
	 *
	 * `password` :string : 当前用户密码
	 *
	 * `userNames` :Array : 用户工号数组
	 *
	 * `flag` :number : 标记是客户端还是员工端
	 *
	 * `share` :JSON : （可选项）分享的内容，若不传本参数表示不分享
	 */
	creatChat(params:haierIM_creatChat_Params):void

	/** 刷新token*/ 
	exitChatListener():void

	/** 打开消息列表*/ 
	openMessageList():void

}
interface haierIM_login_Params {
	/**用户工号*/ 
	userName:string,

}

interface haierIM_getTokenByUserName_Params {
	/**用户工号*/ 
	userName:string,

}

interface haierIM_creatChat_Params {
	/**圈子id*/ 
	groupId:string,

	/**当前用户名称*/ 
	userName:string,

	/**当前用户密码*/ 
	password:string,

	/**用户工号数组*/ 
	userNames:Array,

	/**标记是客户端还是员工端*/ 
	flag:number,

	/**（可选项）分享的内容，若不传本参数表示不分享*/ 
	share?:JSON,

}

interface tencentCos {
	/** 服务初始化*/ 
	init():void

	/**
	 * `上传文件`
	 * ========params==========
	 *
	 * `url` :string : 需上传的本地文件路径，要求本地路径（fs://、widget://）
	 *
	 * `object` :string : 文件存储在腾讯云上的命名，如：test/test.jpg，腾讯云会自动test文件夹，以便存储文件
	 */
	putObject(params:tencentCos_putObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载文件`
	 * ========params==========
	 *
	 * `url` :string : 文件下载后的路径；注意：android下载后是目录加文件名，如：/storage/emulated/0/UZMap/A6097717088936/download/test.jpg; ios下载后直接是文件名，如：/var/mobile/Containers/Data/Application/729BFF43-D52E-44B9-85F0-CE71B24C197D/Documents/uzfs/wgt/A6097717088936/download
	 *
	 * `object` :string : 文件在腾讯云上的命名
	 */
	downloadObject(params:tencentCos_downloadObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除文件`
	 * ========params==========
	 *
	 * `object` :string : 文件在腾讯云上的命名
	 */
	deleteObject(params:tencentCos_deleteObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `多文件删除`
	 * ========params==========
	 *
	 * `objects` :Array : 数组内部为文件在腾讯云上的命名
	 */
	deleteMultipleObject(params:tencentCos_deleteMultipleObject_Params, callback?: (ret:JSON) => void):void

}
interface tencentCos_putObject_Params {
	/**需上传的本地文件路径，要求本地路径（fs://、widget://）*/ 
	url:string,

	/**文件存储在腾讯云上的命名，如：test/test.jpg，腾讯云会自动test文件夹，以便存储文件*/ 
	object:string,

}

interface tencentCos_downloadObject_Params {
	/**文件下载后的路径；注意：android下载后是目录加文件名，如：/storage/emulated/0/UZMap/A6097717088936/download/test.jpg; ios下载后直接是文件名，如：/var/mobile/Containers/Data/Application/729BFF43-D52E-44B9-85F0-CE71B24C197D/Documents/uzfs/wgt/A6097717088936/download*/ 
	url:string,

	/**文件在腾讯云上的命名*/ 
	object:string,

}

interface tencentCos_deleteObject_Params {
	/**文件在腾讯云上的命名*/ 
	object:string,

}

interface tencentCos_deleteMultipleObject_Params {
	/**数组内部为文件在腾讯云上的命名*/ 
	objects:Array,

}

interface googleAdMob {
	/** 初始化admob服务，仅支持Android系统*/ 
	init(callback?: (ret:JSON) => void):void

	/** 添加横幅广告*/ 
	addBinnerAd(callback?: (ret:JSON) => void):void

	/** 显示横幅广告*/ 
	showBinnerAd():void

	/** 隐藏横幅广告*/ 
	hideBinnerAd():void

	/** 删除横幅广告*/ 
	removeBinnerAd():void

	/** 添加插页式广告*/ 
	addInterstitialAd(callback?: (ret:JSON) => void):void

	/** 显示插页式广告*/ 
	showInterstitialAd(callback?: (ret:JSON) => void):void

	/** 激励视频广告*/ 
	addRewardedVideoAd(callback?: (ret:JSON) => void):void

	/** 显示激励视频广告*/ 
	showRewardedVideoAd(callback?: (ret:JSON) => void):void

	/** 重新加载广告*/ 
	reloadRewardedVideoAd():void

}
interface takePicCutOut {
	/**
	 * `打开身份证裁剪界面`
	 * ========params==========
	 *
	 * `isCardFront` :boolean : （可选项）身份证正面还是背面。(true:正面 false:背面)
	 */
	openIDCardCut(params:takePicCutOut_openIDCardCut_Params, callback?: (ret:JSON) => void):void

	/** 打开卡片裁剪界面*/ 
	openCardCut():void

	/** 打开自定义裁剪界面*/ 
	openCustomCut():void

}
interface takePicCutOut_openIDCardCut_Params {
	/**（可选项）身份证正面还是背面。(true:正面 false:背面)*/ 
	isCardFront?:boolean,

}

interface baiduFaceLive {
	/**
	 * `打开人脸识别界面`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）浏览器窗口的位置和大小，设置margin后，在不同手机上面会保持与父页面的各方向边距一致，而中间区域会自动扩充。建议使用margin布局，可以完美适配带smartBar的手机。
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `defaultUI` :boolean : （可选项）是否显示自带UI布局(true : 显示 false : 不显示)
	 *
	 * `isShowRectLine` :boolean : （可选项）是否隐藏识别区域的圆形边框(true : 显示 false : 隐藏)
	 *
	 * `blurnessValue` :any : （可选项）设置图像模糊阀值 (0-1) 推荐小于0.7
	 *
	 * `brightnessValue` :any : （可选项）设置亮度阀值 (0-100) 推荐大于40
	 *
	 * `cropFaceValue` :number : （可选项）设置截取人脸图片大小
	 *
	 * `headPitchValue` :number : （可选项）设置头部姿态角度Pitch范围（-45，45），推荐-15-15
	 *
	 * `headRollValue` :number : （可选项）设置头部姿态角度Yaw范围（-45，45），推荐-15-15
	 *
	 * `headYawValue` :number : （可选项）设置头部姿态角度Roll范围（-45，45），推荐-15-15
	 *
	 * `minFaceSize` :number : （可选项）设置最小检测人脸阈值 （在图片人脸能够被检测到最小值）80-200， 越小越耗性能，推荐120-200
	 *
	 * `notFaceValue` :any : （可选项）设置人脸检测精度阀值(0-1)
	 *
	 * `occlusionValue` :any : （可选项）设置人脸遮挡阀值（0-1） 推荐小于0.5
	 *
	 * `isCheckQuality` :boolean : （可选项）设置是否进行人脸图片质量检测(true:开启 false:关闭)
	 *
	 * `isSound` :boolean : （可选项）设置是否开启声音播放(true:开启 false:关闭)
	 */
	openFaceDetectView(params:baiduFaceLive_openFaceDetectView_Params, callback?: (ret:JSON) => void):void

	/** 识别结果处理后继续人脸识别(识别界面未关闭时调用)*/ 
	continueFaceDetect(callback?: (ret:JSON) => void):void

	/** 关闭人脸识别界面*/ 
	closeFaceDetectView(callback?: (ret:JSON) => void):void

}
interface baiduFaceLive_openFaceDetectView_Params {
	/**（可选项）浏览器窗口的位置和大小，设置margin后，在不同手机上面会保持与父页面的各方向边距一致，而中间区域会自动扩充。建议使用margin布局，可以完美适配带smartBar的手机。*/ 
	rect?:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）是否显示自带UI布局(true : 显示 false : 不显示)*/ 
	defaultUI?:boolean,

	/**（可选项）是否隐藏识别区域的圆形边框(true : 显示 false : 隐藏)*/ 
	isShowRectLine?:boolean,

	/**（可选项）设置图像模糊阀值 (0-1) 推荐小于0.7*/ 
	blurnessValue?:any,

	/**（可选项）设置亮度阀值 (0-100) 推荐大于40*/ 
	brightnessValue?:any,

	/**（可选项）设置截取人脸图片大小*/ 
	cropFaceValue?:number,

	/**（可选项）设置头部姿态角度Pitch范围（-45，45），推荐-15-15*/ 
	headPitchValue?:number,

	/**（可选项）设置头部姿态角度Yaw范围（-45，45），推荐-15-15*/ 
	headRollValue?:number,

	/**（可选项）设置头部姿态角度Roll范围（-45，45），推荐-15-15*/ 
	headYawValue?:number,

	/**（可选项）设置最小检测人脸阈值 （在图片人脸能够被检测到最小值）80-200， 越小越耗性能，推荐120-200*/ 
	minFaceSize?:number,

	/**（可选项）设置人脸检测精度阀值(0-1)*/ 
	notFaceValue?:any,

	/**（可选项）设置人脸遮挡阀值（0-1） 推荐小于0.5*/ 
	occlusionValue?:any,

	/**（可选项）设置是否进行人脸图片质量检测(true:开启 false:关闭)*/ 
	isCheckQuality?:boolean,

	/**（可选项）设置是否开启声音播放(true:开启 false:关闭)*/ 
	isSound?:boolean,

}

interface aliyunStsOss {
	/**
	 * `获取sts鉴权临时secret（可用自身的请求替代）`
	 * ========params==========
	 *
	 * `url` :string : （必选项）获取stsToken的请求的地址
	 *
	 * `type` :string : （可选项）请求方式 POST 或 GET
	 *
	 * `data` :JSON : （可选项）发送到服务器的数据
	 */
	getStsToken(params:aliyunStsOss_getStsToken_Params, callback?: (ret:JSON) => void):void

	/**
	 * `初始化oss对象。`
	 * ========params==========
	 *
	 * `endpoint` :string : （可选项）阿里云OSS服务在各个区域的地址，如使用CDN加速并有自定义endpoint须填
	 *
	 * `accessKeyId` :string : （必选项）从阿里云获取的accessKeyId
	 *
	 * `accessKeySecret` :string : （必选项）从阿里云获取的accessKeySecret
	 *
	 * `securityToken` :string : （必选项）从阿里云获取的securityToken
	 */
	initConfig(params:aliyunStsOss_initConfig_Params, callback?: (ret:JSON) => void):void

	/**
	 * `初始化oss对象。（本文档推荐使用）`
	 * ========params==========
	 *
	 * `url` :string : （必选项）获取stsToken的请求的地址
	 *
	 * `type` :string : （可选项）请求方式 POST 或 GET
	 *
	 * `data` :JSON : （可选项）发送到服务器的数据
	 *
	 * `endpoint` :string : （可选项）阿里云OSS服务在各个区域的地址，如使用CDN加速并有自定义endpoint须填
	 */
	init(params:aliyunStsOss_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `文件上传，通过NSURL上传一个文件`
	 * ========params==========
	 *
	 * `bucketName` :string : （必选项）Bucket名称
	 *
	 * `objectKey` :string : （必选项）Object名称，包含文件最终命名。如："folder/subfolder/file"
	 *
	 * `file` :string : （必选项）要上传的文件，支持fs://、cache://等文件路径协议及真实路径。
	 *
	 * `type` :any : （可选项）上传类型：0同步；1异步。
	 */
	upload(params:aliyunStsOss_upload_Params, callback?: (ret:JSON) => void):void

	/**
	 * `文件断点续传，通过NSURL上传一个文件`
	 * ========params==========
	 *
	 * `bucketName` :string : （必选项）Bucket名称
	 *
	 * `objectKey` :string : （必选项）Object名称，包含文件最终命名。如："folder/subfolder/file"
	 *
	 * `file` :string : （必选项）要上传的文件，支持fs://、cache://等文件路径协议及真实路径。
	 */
	resumableUpload(params:aliyunStsOss_resumableUpload_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载文件`
	 * ========params==========
	 *
	 * `bucketName` :string : （必选项）Bucket名称
	 *
	 * `objectKey` :string : （必选项）Object名称，包含文件最终命名。如："folder/subfolder/file"
	 *
	 * `path` :string : （必选项）要上传的文件，支持fs://、cache://等文件路径协议及真实路径。
	 *
	 * `type` :any : （可选项）上传类型：0同步；1异步。
	 */
	download(params:aliyunStsOss_download_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除文件`
	 * ========params==========
	 *
	 * `bucketName` :string : （必选项）Bucket名称
	 *
	 * `objectKey` :string : （必选项）Object名称，包含文件最终命名。如："folder/subfolder/file"
	 */
	deleteObject(params:aliyunStsOss_deleteObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `签名URL授予第三方访问（私有读的情况下使用，亦可获取文件的正确访问地址使用）`
	 * ========params==========
	 *
	 * `bucketName` :string : （必选项）Bucket名称
	 *
	 * `objectKey` :string : （必选项）Object名称，包含文件最终命名。如："folder/subfolder/file"
	 *
	 * `type` :any : （可选项）公开私有类型0：公开；1：私有
	 *
	 * `interval` :any : （可选项）过期时间秒
	 */
	signAccessObjectURL(params:aliyunStsOss_signAccessObjectURL_Params, callback?: (ret:JSON) => void):void

}
interface aliyunStsOss_getStsToken_Params {
	/**（必选项）获取stsToken的请求的地址*/ 
	url:string,

	/**（可选项）请求方式 POST 或 GET*/ 
	type?:string,

	/**（可选项）发送到服务器的数据*/ 
	data?:JSON,

}

interface aliyunStsOss_initConfig_Params {
	/**（可选项）阿里云OSS服务在各个区域的地址，如使用CDN加速并有自定义endpoint须填*/ 
	endpoint?:string,

	/**（必选项）从阿里云获取的accessKeyId*/ 
	accessKeyId:string,

	/**（必选项）从阿里云获取的accessKeySecret*/ 
	accessKeySecret:string,

	/**（必选项）从阿里云获取的securityToken*/ 
	securityToken:string,

}

interface aliyunStsOss_init_Params {
	/**（必选项）获取stsToken的请求的地址*/ 
	url:string,

	/**（可选项）请求方式 POST 或 GET*/ 
	type?:string,

	/**（可选项）发送到服务器的数据*/ 
	data?:JSON,

	/**（可选项）阿里云OSS服务在各个区域的地址，如使用CDN加速并有自定义endpoint须填*/ 
	endpoint?:string,

}

interface aliyunStsOss_upload_Params {
	/**（必选项）Bucket名称*/ 
	bucketName:string,

	/**（必选项）Object名称，包含文件最终命名。如："folder/subfolder/file"*/ 
	objectKey:string,

	/**（必选项）要上传的文件，支持fs://、cache://等文件路径协议及真实路径。*/ 
	file:string,

	/**（可选项）上传类型：0同步；1异步。*/ 
	type?:any,

}

interface aliyunStsOss_resumableUpload_Params {
	/**（必选项）Bucket名称*/ 
	bucketName:string,

	/**（必选项）Object名称，包含文件最终命名。如："folder/subfolder/file"*/ 
	objectKey:string,

	/**（必选项）要上传的文件，支持fs://、cache://等文件路径协议及真实路径。*/ 
	file:string,

}

interface aliyunStsOss_download_Params {
	/**（必选项）Bucket名称*/ 
	bucketName:string,

	/**（必选项）Object名称，包含文件最终命名。如："folder/subfolder/file"*/ 
	objectKey:string,

	/**（必选项）要上传的文件，支持fs://、cache://等文件路径协议及真实路径。*/ 
	path:string,

	/**（可选项）上传类型：0同步；1异步。*/ 
	type?:any,

}

interface aliyunStsOss_deleteObject_Params {
	/**（必选项）Bucket名称*/ 
	bucketName:string,

	/**（必选项）Object名称，包含文件最终命名。如："folder/subfolder/file"*/ 
	objectKey:string,

}

interface aliyunStsOss_signAccessObjectURL_Params {
	/**（必选项）Bucket名称*/ 
	bucketName:string,

	/**（必选项）Object名称，包含文件最终命名。如："folder/subfolder/file"*/ 
	objectKey:string,

	/**（可选项）公开私有类型0：公开；1：私有*/ 
	type?:any,

	/**（可选项）过期时间秒*/ 
	interval?:any,

}

interface baiduAR {
	/**
	 * `打开AR识别界面`
	 * ========params==========
	 *
	 * `arKey` :string : （必填项）从DuMix AR内容平台获取的 arKey 。
	 *
	 * `arType` :number : （可选项）从DuMix AR内容平台获取的 arType 。
	 */
	startARActivity(params:baiduAR_startARActivity_Params, callback?: (ret:JSON) => void):void

}
interface baiduAR_startARActivity_Params {
	/**（必填项）从DuMix AR内容平台获取的 arKey 。*/ 
	arKey:string,

	/**（可选项）从DuMix AR内容平台获取的 arType 。*/ 
	arType?:number,

}

interface swLocate {
	/**
	 * `初始化场景识别模块。`
	 * ========params==========
	 *
	 * `debug` :boolean : （可选项）是否开启debug模式，如果打开，则会输出模块内部的运行日志。
	 */
	initLocateSDK(params:swLocate_initLocateSDK_Params):void

	/** 启动场景识别服务，场景识别模块中的所有功能，都依赖于场景识别服务的启动。*/ 
	startService():void

	/** 停止场景识别服务，当不再需要使用场景识别模块中的功能时，可以停止场景识别服务以释放服务资源。*/ 
	stopService():void

	/**
	 * `调用主动定位接口，获取精准的室内位置信息。主动定位是每调用一次只获取一次定位结果。`
	 * ========params==========
	 *
	 * `ext` :string : （可选项）扩展字段，有些应用场景或者业务下，集成方需要在场景识别的时候加上自己的标识或者数据，因此我们开放了一个扩展参数字段。扩展参数可以根据客户的要求来配置是否在对应的回调接口中返回。如果配置为返回，则会原样返回；如果配置为不返回，则不会返回该字段。
	 *
	 * `passThrough` :string : （可选项）透传字段。透传字段和扩展字段的使用类似，不过透传字段是不需要通过后台配置是否返回的，而是一定会在对应的回调接口中原样返回的。主要用来区分不同触发请求的。
	 */
	startLocate(params:swLocate_startLocate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `调用周期定位接口，获取精准的室内位置信息。周期定位调用一次之后，会按照一定的时间频率返回定位结果，时间频率可以在数位云开发平台上设置，默认是5分钟返回一次定位结果。`
	 * ========params==========
	 *
	 * `ext` :string : （可选项）扩展字段，有些应用场景或者业务下，集成方需要在场景识别的时候加上自己的标识或者数据，因此我们开放了一个扩展参数字段。扩展参数可以根据客户的要求来配置是否在对应的回调接口中返回。如果配置为返回，则会原样返回；如果配置为不返回，则不会返回该字段。
	 *
	 * `passThrough` :string : （可选项）透传字段。透传字段和扩展字段的使用类似，不过透传字段是不需要通过后台配置是否返回的，而是一定会在对应的回调接口中原样返回的。主要用来区分不同触发请求的。
	 */
	startCycleLocate(params:swLocate_startCycleLocate_Params, callback?: (ret:JSON) => void):void

	/** 停止周期定位，不再按照设置的时间频率返回定位结果。*/ 
	stopCycleLocate():void

	/**
	 * `采集位置数据，并会将对应的位置信息和信号数据上传到数位云服务器。`
	 * ========params==========
	 *
	 * `name` :string : （必选项）采集点的名称或者店铺的名称
	 *
	 * `floorName` :string : （可选项）采集点的所在的楼层名称
	 *
	 * `building` :string : （可选项）采集点的所在的楼宇名称
	 *
	 * `area` :string : （可选项）采集点的所在的商圈名称
	 *
	 * `address` :string : （可选项）采集点的所在的详细地址
	 *
	 * `street` :string : （可选项）采集点的所在的街道
	 *
	 * `region` :string : （可选项）采集点的所在的行政区
	 *
	 * `area` :string : （可选项）采集点的所在的商圈名称
	 *
	 * `city` :string : （可选项）采集点的所在的城市
	 *
	 * `province` :string : （可选项）采集点的所在的省份
	 *
	 * `collectExt` :string : （可选项）扩展字段，有些应用场景或者业务下，集成方需要在采集位置点的时候加上自己的标识或者数据，因此我们开放了一个扩展参数字段。该扩展字段必须是json格式的字符串。
	 *
	 * `passThrough` :string : （可选项）透传字段。透传字段和扩展字段的使用类似，不过透传字段是不需要通过后台配置是否返回的，而是一定会在对应的回调接口中原样返回的。主要用来区分不同触发请求的。
	 *
	 * `poiId` :string : （可选项）采集点的 id。主要用于“单店多点”采集功能，即在同一个店铺的多个位置进行采集，如：采集同一个店铺的门口、收银台、试衣间、卫生间等多个点位。一个店铺对应一个 poiId，一个采集点对应一个 collectPoint，poiId和collectPoint是一对多的关系。
	 *
	 * `collectorId` :string : （可选项）采集者的 id。通过设置这个字段，可以指明该条采集数据是由哪个采集者上传的，之后在查询或删除对应的采集信息时，也需要带上同样的采集者id字段。如果没有传递这个字段，则默认使用设备的唯一标识作为采集者id字段。建议开发者传递用户id或其他能唯一识别用户的字符串到这个字段以便进行用户账号对于采集数据的权限控制。
	 */
	submitCollectData(params:swLocate_submitCollectData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `采集位置数据，并会将对应的位置信息和信号数据上传到数位云服务器。`
	 * ========params==========
	 *
	 * `pageOffset` :number : （可选项）当前页，即查询第几页的数据
	 *
	 * `pageSize` :number : （可选项）每一页的数量
	 *
	 * `passThrough` :string : （可选项）透传字段。透传字段和扩展字段的使用类似，不过透传字段是不需要通过后台配置是否返回的，而是一定会在对应的回调接口中原样返回的。主要用来区分不同触发请求的。
	 *
	 * `collectorId` :string : （可选项）采集者的 id。通过设置这个字段，可以指明该条采集数据是由哪个采集者上传的，之后在查询或删除对应的采集信息时，也需要带上同样的采集者id字段。如果没有传递这个字段，则默认使用设备的唯一标识作为采集者id字段。建议开发者传递用户id或其他能唯一识别用户的字符串到这个字段以便进行用户账号对于采集数据的权限控制。
	 */
	queryCollectData(params:swLocate_queryCollectData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `采集位置数据，并会将对应的位置信息和信号数据上传到数位云服务器。`
	 * ========params==========
	 *
	 * `poiIds` :Array : （可选项）需要删除的兴趣点集合，对应采集查询结果中的 poiPoints 的 poiId
	 *
	 * `cpCodes` :Array : （可选项）需要删除的采集点集合，对应采集查询中的 collectPoints 的 cpCode
	 *
	 * `passThrough` :string : （可选项）透传字段。透传字段和扩展字段的使用类似，不过透传字段是不需要通过后台配置是否返回的，而是一定会在对应的回调接口中原样返回的。主要用来区分不同触发请求的。
	 *
	 * `collectorId` :string : （可选项）采集者的 id。通过设置这个字段，可以指明该条采集数据是由哪个采集者上传的，之后在查询或删除对应的采集信息时，也需要带上同样的采集者id字段。如果没有传递这个字段，则默认使用设备的唯一标识作为采集者id字段。建议开发者传递用户id或其他能唯一识别用户的字符串到这个字段以便进行用户账号对于采集数据的权限控制。
	 */
	deleteCollectData(params:swLocate_deleteCollectData_Params, callback?: (ret:JSON) => void):void

}
interface swLocate_initLocateSDK_Params {
	/**（可选项）是否开启debug模式，如果打开，则会输出模块内部的运行日志。*/ 
	debug?:boolean,

}

interface swLocate_startLocate_Params {
	/**（可选项）扩展字段，有些应用场景或者业务下，集成方需要在场景识别的时候加上自己的标识或者数据，因此我们开放了一个扩展参数字段。扩展参数可以根据客户的要求来配置是否在对应的回调接口中返回。如果配置为返回，则会原样返回；如果配置为不返回，则不会返回该字段。*/ 
	ext?:string,

	/**（可选项）透传字段。透传字段和扩展字段的使用类似，不过透传字段是不需要通过后台配置是否返回的，而是一定会在对应的回调接口中原样返回的。主要用来区分不同触发请求的。*/ 
	passThrough?:string,

}

interface swLocate_startCycleLocate_Params {
	/**（可选项）扩展字段，有些应用场景或者业务下，集成方需要在场景识别的时候加上自己的标识或者数据，因此我们开放了一个扩展参数字段。扩展参数可以根据客户的要求来配置是否在对应的回调接口中返回。如果配置为返回，则会原样返回；如果配置为不返回，则不会返回该字段。*/ 
	ext?:string,

	/**（可选项）透传字段。透传字段和扩展字段的使用类似，不过透传字段是不需要通过后台配置是否返回的，而是一定会在对应的回调接口中原样返回的。主要用来区分不同触发请求的。*/ 
	passThrough?:string,

}

interface swLocate_submitCollectData_Params {
	/**（必选项）采集点的名称或者店铺的名称*/ 
	name:string,

	/**（可选项）采集点的所在的楼层名称*/ 
	floorName?:string,

	/**（可选项）采集点的所在的楼宇名称*/ 
	building?:string,

	/**（可选项）采集点的所在的商圈名称*/ 
	area?:string,

	/**（可选项）采集点的所在的详细地址*/ 
	address?:string,

	/**（可选项）采集点的所在的街道*/ 
	street?:string,

	/**（可选项）采集点的所在的行政区*/ 
	region?:string,

	/**（可选项）采集点的所在的商圈名称*/ 
	area?:string,

	/**（可选项）采集点的所在的城市*/ 
	city?:string,

	/**（可选项）采集点的所在的省份*/ 
	province?:string,

	/**（可选项）扩展字段，有些应用场景或者业务下，集成方需要在采集位置点的时候加上自己的标识或者数据，因此我们开放了一个扩展参数字段。该扩展字段必须是json格式的字符串。*/ 
	collectExt?:string,

	/**（可选项）透传字段。透传字段和扩展字段的使用类似，不过透传字段是不需要通过后台配置是否返回的，而是一定会在对应的回调接口中原样返回的。主要用来区分不同触发请求的。*/ 
	passThrough?:string,

	/**（可选项）采集点的 id。主要用于“单店多点”采集功能，即在同一个店铺的多个位置进行采集，如：采集同一个店铺的门口、收银台、试衣间、卫生间等多个点位。一个店铺对应一个 poiId，一个采集点对应一个 collectPoint，poiId和collectPoint是一对多的关系。*/ 
	poiId?:string,

	/**（可选项）采集者的 id。通过设置这个字段，可以指明该条采集数据是由哪个采集者上传的，之后在查询或删除对应的采集信息时，也需要带上同样的采集者id字段。如果没有传递这个字段，则默认使用设备的唯一标识作为采集者id字段。建议开发者传递用户id或其他能唯一识别用户的字符串到这个字段以便进行用户账号对于采集数据的权限控制。*/ 
	collectorId?:string,

}

interface swLocate_queryCollectData_Params {
	/**（可选项）当前页，即查询第几页的数据*/ 
	pageOffset?:number,

	/**（可选项）每一页的数量*/ 
	pageSize?:number,

	/**（可选项）透传字段。透传字段和扩展字段的使用类似，不过透传字段是不需要通过后台配置是否返回的，而是一定会在对应的回调接口中原样返回的。主要用来区分不同触发请求的。*/ 
	passThrough?:string,

	/**（可选项）采集者的 id。通过设置这个字段，可以指明该条采集数据是由哪个采集者上传的，之后在查询或删除对应的采集信息时，也需要带上同样的采集者id字段。如果没有传递这个字段，则默认使用设备的唯一标识作为采集者id字段。建议开发者传递用户id或其他能唯一识别用户的字符串到这个字段以便进行用户账号对于采集数据的权限控制。*/ 
	collectorId?:string,

}

interface swLocate_deleteCollectData_Params {
	/**（可选项）需要删除的兴趣点集合，对应采集查询结果中的 poiPoints 的 poiId*/ 
	poiIds?:Array,

	/**（可选项）需要删除的采集点集合，对应采集查询中的 collectPoints 的 cpCode*/ 
	cpCodes?:Array,

	/**（可选项）透传字段。透传字段和扩展字段的使用类似，不过透传字段是不需要通过后台配置是否返回的，而是一定会在对应的回调接口中原样返回的。主要用来区分不同触发请求的。*/ 
	passThrough?:string,

	/**（可选项）采集者的 id。通过设置这个字段，可以指明该条采集数据是由哪个采集者上传的，之后在查询或删除对应的采集信息时，也需要带上同样的采集者id字段。如果没有传递这个字段，则默认使用设备的唯一标识作为采集者id字段。建议开发者传递用户id或其他能唯一识别用户的字符串到这个字段以便进行用户账号对于采集数据的权限控制。*/ 
	collectorId?:string,

}

interface lingYue {
	/** 开始扫描设备。Android此接口不返回数据获取扫描数据通过getPeripheral接口*/ 
	scan():void

	/**
	 * `连接设备。`
	 * ========params==========
	 *
	 * `uuid` :string : 设备的UUID
	 *
	 * `perName` :string : （可选项）scan接口返回的perName，可以不传
	 */
	connect(params:lingYue_connect_Params):void

	/** 连接状态是否改变，蓝牙连接状态改变时会执行回调。*/ 
	connectStateChanged():void

	/** 断开当前连接的设备。*/ 
	disConnect():void

	/** 获取设备电量。*/ 
	batteryInfo():void

	/** 获取当前数据。*/ 
	actualData():void

	/**
	 * `开启或关闭心率检测状态`
	 * ========params==========
	 *
	 * `state` :boolean : (可选项)开启或关闭心率检测状态，通过此接口打开心率检测,不发送关闭的话,手环会检测5分钟后自动关闭
	 */
	switchHeart(params:lingYue_switchHeart_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取历史数据`
	 * ========params==========
	 *
	 * `year` :number : (可选项)年份后两位, 如2017年传入17
	 *
	 * `month` :number : (可选项)查询日期的月
	 *
	 * `day` :number : (可选项)查询日期的日
	 *
	 * `hour` :number : (可选项)查询日期的小时, 0 - 23
	 */
	historyData(params:lingYue_historyData_Params, callback?: (ret:JSON) => void):void

	/** 获取硬件版本。*/ 
	hardWearVersion():void

	/**
	 * `获取闹钟`
	 * ========params==========
	 *
	 * `alarmID` :number : (可选项)闹钟的id, 从0 - 7最多8个
	 */
	alarm(params:lingYue_alarm_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置闹钟。`
	 * ========params==========
	 *
	 * `alarmID` :number : （可选项）闹钟的id, 从0 - 7最多8个
	 *
	 * `state` :number : （可选项）闹钟状态 0为关闭,1为开启,2为删除 设置为删除后仍然可以查询,返回状态为2删除
	 *
	 * `hour` :number : （可选项）闹钟时间的时 0 - 23
	 *
	 * `minute` :number : （可选项）闹钟时间的分钟 0 - 59
	 *
	 * `repeat` :number : （可选项）重复 0（日）  0（六）  0（五） 0（四） 0（三）  0（二）  0（一） 0 ，重复值为一个字节,8位最低位默认为0,其他从低位到高位为周一,周二,周三,周四,周五,周六,周日,1为当天开启,0为当天关闭
	 */
	setAlarm(params:lingYue_setAlarm_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置闹钟名。`
	 * ========params==========
	 *
	 * `alarmID` :number : （可选项）闹钟id
	 *
	 * `name` :string : （可选项）闹钟名称,带字库手环可显示,name最长为16字节
	 */
	setAlarmName(params:lingYue_setAlarmName_Params, callback?: (ret:JSON) => void):void

	/** 获取来电提醒,短信提醒,APP提醒等信息，提醒需要手环与手机配对后才可实现。*/ 
	notify():void

	/**
	 * `设置提醒，提醒需要手环与手机配对后才可实现。`
	 * ========params==========
	 *
	 * `notifyState` :boolean : （可选项）APP提醒总开关
	 *
	 * `smsState` :boolean : （可选项）短信提醒开关
	 *
	 * `callState` :boolean : （可选项）来电提醒开关
	 *
	 * `emailState` :boolean : （可选项）邮件提醒开关
	 *
	 * `wechartState` :boolean : （可选项）微信消息提醒开关
	 *
	 * `qqState` :boolean : （可选项）qq推送提醒开关
	 *
	 * `facebookState` :boolean : （可选项）facebook messenger 提醒开关
	 *
	 * `twitterState` :boolean : （可选项）twitter提醒开关
	 *
	 * `whatsAppState` :boolean : （可选项）whatsAApp提醒开关
	 *
	 * `instagramState` :boolean : （可选项）Instagram提醒
	 *
	 * `linkedinState` :boolean : （可选项）Linkedin提醒
	 *
	 * `callDelay` :number : （可选项）来电提醒的延时,即来电多少秒未接后开始提醒
	 */
	setNotify(params:lingYue_setNotify_Params):void

	/** 获取久坐提醒设置信息。*/ 
	sedentary():void

	/**
	 * `设置久坐提醒。`
	 * ========params==========
	 *
	 * `beginHour` :number : （可选项）开始时间的时
	 *
	 * `beginMin` :number : （可选项）开始时间的分
	 *
	 * `endHour` :number : （可选项）结束时间的时
	 *
	 * `endMin` :number : （可选项）结束时间的分
	 *
	 * `timeInteval` :number : （可选项）久坐多久后开始提醒,单位为分钟
	 *
	 * `repeats` :number : （可选项）重复 0（日）  0（六）  0（五） 0（四） 0（三）  0（二）  0（一） 0 ，重复值为一个字节,8位最低位默认为0,其他从低位到高位为周一,周二,周三,周四,周五,周六,周日,1为当天开启,0为当天关闭
	 */
	setSedentary(params:lingYue_setSedentary_Params):void

	/** 寻找手环,发送此命令后手环会震动。*/ 
	findBracelet():void

	/**
	 * `开启/关闭手环控制拍照模式。`
	 * ========params==========
	 *
	 * `state` :boolean : （可选项）开启/关闭手环控制拍照模式
	 */
	takePhoteState(params:lingYue_takePhoteState_Params):void

	/** 获取抬腕亮屏的状态。*/ 
	liftHandState():void

	/**
	 * `设置抬腕亮屏。`
	 * ========params==========
	 *
	 * `state` :number : （可选项）1为开启,0为关闭
	 */
	setLiftHandState(params:lingYue_setLiftHandState_Params):void

	/** 查询心率检测开关状态。*/ 
	heartRateState():void

	/** 查询心率检测时间间隔,心率监测为开启状态时有效。(此接口目前无效)*/ 
	heartRateInterval():void

	/**
	 * `设置手环自动监测心率的时间间隔。(此接口目前无效)`
	 * ========params==========
	 *
	 * `interval` :number : （可选项）单位为分钟 仅可传入 2.5 (android),3(ios)  ,5,10,30,60,120共6种选择,其他时间传入无效
	 */
	setHeartRateInterval(params:lingYue_setHeartRateInterval_Params):void

	/**
	 * `设置心率检测状态。`
	 * ========params==========
	 *
	 * `state` :number : （可选项）1为开启, 0 为关闭
	 */
	setHeartRateState(params:lingYue_setHeartRateState_Params):void

	/** 查询勿扰模式状态。*/ 
	disturbMode():void

	/**
	 * `设置勿扰模式状态。`
	 * ========params==========
	 *
	 * `state` :boolean : （可选项）勿扰模式开关
	 *
	 * `beginHour` :number : （可选项）勿扰模式开始时间时
	 *
	 * `beginMin` :number : （可选项）勿扰模式开始时间分
	 *
	 * `endHour` :number : （可选项）勿扰模式结束时间时
	 *
	 * `endMin` :number : （可选项）勿扰模式结束时间分
	 */
	setDisturb(params:lingYue_setDisturb_Params):void

	/**
	 * `发送用户信息到手环。`
	 * ========params==========
	 *
	 * `height` :number : （可选项）身高，单位cm
	 *
	 * `weight` :number : （可选项）体重，单位kg
	 *
	 * `gender` :number : （可选项）性别 0为女性 1为男性
	 */
	sendUserInfo(params:lingYue_sendUserInfo_Params):void

	/**
	 * `设置手环。`
	 * ========params==========
	 *
	 * `unit` :number : （可选项）手环显示单位 0为公制 1为英制
	 *
	 * `timeType` :number : （可选项）设置手环时间显示方式 0为24小时制 1为12小时制
	 *
	 * `english` :boolean : （可选项）设置手环语言 false为汉语 true为英语
	 */
	setBindUnit(params:lingYue_setBindUnit_Params):void

	/** 添加监听。*/ 
	addEventLisener():void

	/** 移除监听。*/ 
	removeEventLisener():void

}
interface lingYue_connect_Params {
	/**设备的UUID*/ 
	uuid:string,

	/**（可选项）scan接口返回的perName，可以不传*/ 
	perName?:string,

}

interface lingYue_switchHeart_Params {
	/**(可选项)开启或关闭心率检测状态，通过此接口打开心率检测,不发送关闭的话,手环会检测5分钟后自动关闭*/ 
	state?:boolean,

}

interface lingYue_historyData_Params {
	/**(可选项)年份后两位, 如2017年传入17*/ 
	year?:number,

	/**(可选项)查询日期的月*/ 
	month?:number,

	/**(可选项)查询日期的日*/ 
	day?:number,

	/**(可选项)查询日期的小时, 0 - 23*/ 
	hour?:number,

}

interface lingYue_alarm_Params {
	/**(可选项)闹钟的id, 从0 - 7最多8个*/ 
	alarmID?:number,

}

interface lingYue_setAlarm_Params {
	/**（可选项）闹钟的id, 从0 - 7最多8个*/ 
	alarmID?:number,

	/**（可选项）闹钟状态 0为关闭,1为开启,2为删除 设置为删除后仍然可以查询,返回状态为2删除*/ 
	state?:number,

	/**（可选项）闹钟时间的时 0 - 23*/ 
	hour?:number,

	/**（可选项）闹钟时间的分钟 0 - 59*/ 
	minute?:number,

	/**（可选项）重复 0（日）  0（六）  0（五） 0（四） 0（三）  0（二）  0（一） 0 ，重复值为一个字节,8位最低位默认为0,其他从低位到高位为周一,周二,周三,周四,周五,周六,周日,1为当天开启,0为当天关闭*/ 
	repeat?:number,

}

interface lingYue_setAlarmName_Params {
	/**（可选项）闹钟id*/ 
	alarmID?:number,

	/**（可选项）闹钟名称,带字库手环可显示,name最长为16字节*/ 
	name?:string,

}

interface lingYue_setNotify_Params {
	/**（可选项）APP提醒总开关*/ 
	notifyState?:boolean,

	/**（可选项）短信提醒开关*/ 
	smsState?:boolean,

	/**（可选项）来电提醒开关*/ 
	callState?:boolean,

	/**（可选项）邮件提醒开关*/ 
	emailState?:boolean,

	/**（可选项）微信消息提醒开关*/ 
	wechartState?:boolean,

	/**（可选项）qq推送提醒开关*/ 
	qqState?:boolean,

	/**（可选项）facebook messenger 提醒开关*/ 
	facebookState?:boolean,

	/**（可选项）twitter提醒开关*/ 
	twitterState?:boolean,

	/**（可选项）whatsAApp提醒开关*/ 
	whatsAppState?:boolean,

	/**（可选项）Instagram提醒*/ 
	instagramState?:boolean,

	/**（可选项）Linkedin提醒*/ 
	linkedinState?:boolean,

	/**（可选项）来电提醒的延时,即来电多少秒未接后开始提醒*/ 
	callDelay?:number,

}

interface lingYue_setSedentary_Params {
	/**（可选项）开始时间的时*/ 
	beginHour?:number,

	/**（可选项）开始时间的分*/ 
	beginMin?:number,

	/**（可选项）结束时间的时*/ 
	endHour?:number,

	/**（可选项）结束时间的分*/ 
	endMin?:number,

	/**（可选项）久坐多久后开始提醒,单位为分钟*/ 
	timeInteval?:number,

	/**（可选项）重复 0（日）  0（六）  0（五） 0（四） 0（三）  0（二）  0（一） 0 ，重复值为一个字节,8位最低位默认为0,其他从低位到高位为周一,周二,周三,周四,周五,周六,周日,1为当天开启,0为当天关闭*/ 
	repeats?:number,

}

interface lingYue_takePhoteState_Params {
	/**（可选项）开启/关闭手环控制拍照模式*/ 
	state?:boolean,

}

interface lingYue_setLiftHandState_Params {
	/**（可选项）1为开启,0为关闭*/ 
	state?:number,

}

interface lingYue_setHeartRateInterval_Params {
	/**（可选项）单位为分钟 仅可传入 2.5 (android),3(ios)  ,5,10,30,60,120共6种选择,其他时间传入无效*/ 
	interval?:number,

}

interface lingYue_setHeartRateState_Params {
	/**（可选项）1为开启, 0 为关闭*/ 
	state?:number,

}

interface lingYue_setDisturb_Params {
	/**（可选项）勿扰模式开关*/ 
	state?:boolean,

	/**（可选项）勿扰模式开始时间时*/ 
	beginHour?:number,

	/**（可选项）勿扰模式开始时间分*/ 
	beginMin?:number,

	/**（可选项）勿扰模式结束时间时*/ 
	endHour?:number,

	/**（可选项）勿扰模式结束时间分*/ 
	endMin?:number,

}

interface lingYue_sendUserInfo_Params {
	/**（可选项）身高，单位cm*/ 
	height?:number,

	/**（可选项）体重，单位kg*/ 
	weight?:number,

	/**（可选项）性别 0为女性 1为男性*/ 
	gender?:number,

}

interface lingYue_setBindUnit_Params {
	/**（可选项）手环显示单位 0为公制 1为英制*/ 
	unit?:number,

	/**（可选项）设置手环时间显示方式 0为24小时制 1为12小时制*/ 
	timeType?:number,

	/**（可选项）设置手环语言 false为汉语 true为英语*/ 
	english?:boolean,

}

interface jyVerify {
}
interface STFace {
	/**
	 * `使用获取的lic初始化`
	 * ========params==========
	 *
	 * `lic` :string : 设定定位精度
	 */
	init(params:STFace_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `活体人脸检测`
	 * ========params==========
	 *
	 * `rect` :JSON : 显示控件位置
	 *
	 * `rotation` :number : （可选项）摄像头角度
	 *
	 * `livence` :number : （可选项）设置活体检测还是人脸识别
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（ios：只指 frame，传 window 无效）(android可以是frame或者Window，但是在全屏的时候，需要挂在Window上或者frame是全屏)
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	liveFaceDetect(params:STFace_liveFaceDetect_Params, callback?: (ret:JSON) => void):void

	/** 结束活体人脸检测*/ 
	endLiveFaceDetect(callback?: (ret:JSON) => void):void

	/** 根据liveFaceDetect接口返回的数据获取图片*/ 
	getImageByData(callback?: (ret:JSON) => void):void

	/** 人脸图片比对相似度*/ 
	faceVerify(callback?: (ret:JSON) => void):void

	/** 一对多检测人脸，返回相似度最高几张*/ 
	detectFaceFromArray(callback?: (ret:JSON) => void):void

	/** 获取人脸特征*/ 
	getImageFeature(callback?: (ret:JSON) => void):void

	/** 通过比对人脸特征一对多检测人脸，返回相似度最高几张*/ 
	detectFaceFromFeature(callback?: (ret:JSON) => void):void

}
interface STFace_init_Params {
	/**设定定位精度*/ 
	lic:string,

}

interface STFace_liveFaceDetect_Params {
	/**显示控件位置*/ 
	rect:JSON,

	/**（可选项）摄像头角度*/ 
	rotation?:number,

	/**（可选项）设置活体检测还是人脸识别*/ 
	livence?:number,

	/**（可选项）模块视图添加到指定 frame 的名字（ios：只指 frame，传 window 无效）(android可以是frame或者Window，但是在全屏的时候，需要挂在Window上或者frame是全屏)*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface speechRecognizer {
}
interface baiduLocation {
	/**
	 * `开始定位`
	 * ========params==========
	 *
	 * `accuracy` :string : （可选项）精度
	 *
	 * `filter` :number : （可选项）位置更新所需最小距离（单位米）
	 *
	 * `autoStop` :boolean : （可选项）获取到位置信息后是否自动停止定位
	 */
	startLocation(params:baiduLocation_startLocation_Params, callback?: (ret:JSON) => void):void

	/** 停止定位*/ 
	stopLocation():void

	/** 获取位置信息*/ 
	getLocation(callback?: (ret:JSON) => void):void

}
interface baiduLocation_startLocation_Params {
	/**（可选项）精度*/ 
	accuracy?:string,

	/**（可选项）位置更新所需最小距离（单位米）*/ 
	filter?:number,

	/**（可选项）获取到位置信息后是否自动停止定位*/ 
	autoStop?:boolean,

}

interface uzkAlibc {
	/** 阿里百川SDK模块初始化（使用模块前务必进行一次初始化操作，该方法可以写在入口文件index.html页面）*/ 
	initsdk(callback?: (ret:JSON) => void):void

	/** 拉起淘宝进行授权登录*/ 
	tblogin(callback?: (ret:JSON) => void):void

	/**
	 * `拉起手淘打开指定url（比如优惠券二合一领券页面）`
	 * ========params==========
	 *
	 * `url` :string : （必传）优惠券二合一领券页面
	 *
	 * `linkkey` :string : （可选项）拉起淘宝或者天猫客户端，默认拉起淘宝客户端
	 *
	 * `opentype` :string : null
	 *
	 * `pid` :string : (可选项)采用联盟PID方式打点。
	 *
	 * `adzoneid` :string : (可选项)采用联盟adzoneid方式打点，**传入该参数之后pid参数生效,adzoneid为pid三段式中间那段，如pid : mm_123_456_789,adzoneid为456**
	 *
	 * `appkey` :string : （可选项）淘宝联盟Appkey，当采用联盟adzoneid方式分佣打点，该参数为必传，否则分佣打点失败。
	 *
	 * `nativeFailedMode` :string : （可选项）唤端失败模式（用户在未安装手淘的一些操作）
	 */
	tbopenurl(params:uzkAlibc_tbopenurl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拉起手淘打开指定商品详情页面`
	 * ========params==========
	 *
	 * `itemid` :string : （可选项）拉起淘宝或者天猫客户端，默认拉起淘宝客户端
	 *
	 * `pid` :string : (可选项)采用联盟PID方式打点。
	 *
	 * `adzoneid` :string : (可选项)采用联盟adzoneid方式打点，**传入该参数之后pid参数生效,adzoneid为pid三段式中间那段，如pid : mm_123_456_789,adzoneid为456**
	 *
	 * `appkey` :string : （可选项）淘宝联盟Appkey，当采用联盟adzoneid方式分佣打点，该参数为必传，否则分佣打点失败。
	 *
	 * `opentype` :string : null
	 *
	 * `linkkey` :string : （可选项）拉起淘宝或者天猫客户端，默认拉起淘宝客户端
	 *
	 * `nativeFailedMode` :string : （可选项）唤端失败模式（用户在未安装手淘的一些操作）
	 */
	tbopendetail(params:uzkAlibc_tbopendetail_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拉起手淘打开我的购物车页面`
	 * ========params==========
	 *
	 * `pid` :string : (可选项)采用联盟PID方式打点。
	 *
	 * `adzoneid` :string : (可选项)采用联盟adzoneid方式打点，**传入该参数之后pid参数生效,adzoneid为pid三段式中间那段，如pid : mm_123_456_789,adzoneid为456**
	 *
	 * `appkey` :string : （可选项）淘宝联盟Appkey，当采用联盟adzoneid方式分佣打点，该参数为必传，否则分佣打点失败。
	 *
	 * `linkkey` :string : （可选项）拉起淘宝或者天猫客户端，默认拉起淘宝客户端
	 *
	 * `opentype` :string : null
	 *
	 * `nativeFailedMode` :string : （可选项）唤端失败模式（用户在未安装手淘的一些操作）
	 */
	tbopenmycart(params:uzkAlibc_tbopenmycart_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拉起手淘打开店铺页面`
	 * ========params==========
	 *
	 * `shopid` :string : （必须）淘宝店铺ID
	 *
	 * `sellerid` :string : （必须）淘宝卖家ID
	 *
	 * `appkey` :string : （可选项）淘宝联盟Appkey，当采用联盟adzoneid方式分佣打点，该参数为必传，否则分佣打点失败。
	 *
	 * `pid` :string : (可选项)采用联盟PID方式打点。
	 *
	 * `adzoneid` :string : (可选项)采用联盟adzoneid方式打点，**传入该参数之后pid参数生效,adzoneid为pid三段式中间那段，如pid : mm_123_456_789,adzoneid为456**
	 *
	 * `linkkey` :string : （可选项）拉起淘宝或者天猫客户端，默认拉起淘宝客户端
	 *
	 * `opentype` :string : null
	 *
	 * `nativeFailedMode` :string : （可选项）唤端失败模式（用户在未安装手淘的一些操作）
	 */
	tbopenshop(params:uzkAlibc_tbopenshop_Params, callback?: (ret:JSON) => void):void

	/** 退出登录*/ 
	tblogout(callback?: (ret:JSON) => void):void

	/** 获取授权登录用户信息*/ 
	getuserinfo(callback?: (ret:JSON) => void):void

}
interface uzkAlibc_tbopenurl_Params {
	/**（必传）优惠券二合一领券页面*/ 
	url:string,

	/**（可选项）拉起淘宝或者天猫客户端，默认拉起淘宝客户端*/ 
	linkkey?:string,

	/**null*/ 
	opentype:string,

	/**(可选项)采用联盟PID方式打点。*/ 
	pid?:string,

	/**(可选项)采用联盟adzoneid方式打点，**传入该参数之后pid参数生效,adzoneid为pid三段式中间那段，如pid : mm_123_456_789,adzoneid为456***/ 
	adzoneid?:string,

	/**（可选项）淘宝联盟Appkey，当采用联盟adzoneid方式分佣打点，该参数为必传，否则分佣打点失败。*/ 
	appkey?:string,

	/**（可选项）唤端失败模式（用户在未安装手淘的一些操作）*/ 
	nativeFailedMode?:string,

}

interface uzkAlibc_tbopendetail_Params {
	/**（可选项）拉起淘宝或者天猫客户端，默认拉起淘宝客户端*/ 
	itemid?:string,

	/**(可选项)采用联盟PID方式打点。*/ 
	pid?:string,

	/**(可选项)采用联盟adzoneid方式打点，**传入该参数之后pid参数生效,adzoneid为pid三段式中间那段，如pid : mm_123_456_789,adzoneid为456***/ 
	adzoneid?:string,

	/**（可选项）淘宝联盟Appkey，当采用联盟adzoneid方式分佣打点，该参数为必传，否则分佣打点失败。*/ 
	appkey?:string,

	/**null*/ 
	opentype:string,

	/**（可选项）拉起淘宝或者天猫客户端，默认拉起淘宝客户端*/ 
	linkkey?:string,

	/**（可选项）唤端失败模式（用户在未安装手淘的一些操作）*/ 
	nativeFailedMode?:string,

}

interface uzkAlibc_tbopenmycart_Params {
	/**(可选项)采用联盟PID方式打点。*/ 
	pid?:string,

	/**(可选项)采用联盟adzoneid方式打点，**传入该参数之后pid参数生效,adzoneid为pid三段式中间那段，如pid : mm_123_456_789,adzoneid为456***/ 
	adzoneid?:string,

	/**（可选项）淘宝联盟Appkey，当采用联盟adzoneid方式分佣打点，该参数为必传，否则分佣打点失败。*/ 
	appkey?:string,

	/**（可选项）拉起淘宝或者天猫客户端，默认拉起淘宝客户端*/ 
	linkkey?:string,

	/**null*/ 
	opentype:string,

	/**（可选项）唤端失败模式（用户在未安装手淘的一些操作）*/ 
	nativeFailedMode?:string,

}

interface uzkAlibc_tbopenshop_Params {
	/**（必须）淘宝店铺ID*/ 
	shopid:string,

	/**（必须）淘宝卖家ID*/ 
	sellerid:string,

	/**（可选项）淘宝联盟Appkey，当采用联盟adzoneid方式分佣打点，该参数为必传，否则分佣打点失败。*/ 
	appkey?:string,

	/**(可选项)采用联盟PID方式打点。*/ 
	pid?:string,

	/**(可选项)采用联盟adzoneid方式打点，**传入该参数之后pid参数生效,adzoneid为pid三段式中间那段，如pid : mm_123_456_789,adzoneid为456***/ 
	adzoneid?:string,

	/**（可选项）拉起淘宝或者天猫客户端，默认拉起淘宝客户端*/ 
	linkkey?:string,

	/**null*/ 
	opentype:string,

	/**（可选项）唤端失败模式（用户在未安装手淘的一些操作）*/ 
	nativeFailedMode?:string,

}

interface BLNetwork {
	/**
	 * `发送请求`
	 * ========params==========
	 *
	 * `command` :string : 请求命令；可参考 [BroadLink Android/IOS SDK 用户手册](/res/open_sdk用户手册 0519.pdf)
	 */
	requestDispatch(params:BLNetwork_requestDispatch_Params, callback?: (ret:JSON) => void):void

}
interface BLNetwork_requestDispatch_Params {
	/**请求命令；可参考 [BroadLink Android/IOS SDK 用户手册](/res/open_sdk用户手册 0519.pdf)*/ 
	command:string,

}

interface TKOpen {
	/**
	 * `开始开户`
	 * ========params==========
	 *
	 * `channelKey` :string : （可选项）渠道校验密钥 ，如：100DD998EB5BF11FC554C861601628EC
	 *
	 * `channelUserid` :string : (可选项)渠道系统的用户标识，暂仅支持 android 平台
	 *
	 * `channelSeq` :string : （可选项）渠道系统的其他信息，暂仅支持 android 平台
	 *
	 * `secName` :string : （可选项）券商英文简称
	 *
	 * `statusBarBgColor` :string : （可选项）状态栏背景色，十六进制色值，注意去掉 # 号，暂仅支持 iOS 平台
	 *
	 * `statusBarStyle` :string : （可选项）状态栏样式 0黑色或1白色，暂仅支持 iOS 平台
	 *
	 * `channelUrl` :string : 对应的券商相应环境的h5地址 (android为云平台校验地址)
	 */
	start(params:TKOpen_start_Params, callback?: (ret:JSON) => void):void

}
interface TKOpen_start_Params {
	/**（可选项）渠道校验密钥 ，如：100DD998EB5BF11FC554C861601628EC*/ 
	channelKey?:string,

	/**(可选项)渠道系统的用户标识，暂仅支持 android 平台*/ 
	channelUserid?:string,

	/**（可选项）渠道系统的其他信息，暂仅支持 android 平台*/ 
	channelSeq?:string,

	/**（可选项）券商英文简称*/ 
	secName?:string,

	/**（可选项）状态栏背景色，十六进制色值，注意去掉 # 号，暂仅支持 iOS 平台*/ 
	statusBarBgColor?:string,

	/**（可选项）状态栏样式 0黑色或1白色，暂仅支持 iOS 平台*/ 
	statusBarStyle?:string,

	/**对应的券商相应环境的h5地址 (android为云平台校验地址)*/ 
	channelUrl:string,

}

interface checkpush {
}
interface rongCloudIM {
	/**
	 * `初始化融云 SDK，调用 connect 连接前务必保证调用此方法`
	 * ========params==========
	 *
	 * `miPush` :JSON : (可选项)配置小米推送的信息
	 *
	 * `huaweiPush` :boolean : (可选项) 是否集成华为推送
	 */
	init(params:rongCloudIM_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `配置推送相关参数`
	 * ========params==========
	 *
	 * `alertTitle` :string : 进入后台两分钟内收到通知的显示内容，不传则显示消息内容
	 *
	 * `showNickname` :boolean : 推送提示是否显示昵称，注：设置昵称的方式为：在发送消息接口的extra字段中填写昵称信息，格式为extra:{userInfo:{nickName:"用户昵称"}}
	 */
	configurationParameter(params:rongCloudIM_configurationParameter_Params):void

	/**
	 * `连接融云 IM 服务器，进行后续各种方法操作前务必要先调用此方法`
	 * ========params==========
	 *
	 * `token` :string : 从服务端获取的用户身份令牌（Token）
	 */
	connect(params:rongCloudIM_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `断开连接`
	 * ========params==========
	 *
	 * `isReceivePush` :boolean : 断开后是否接收 Push
	 */
	disconnect(params:rongCloudIM_disconnect_Params, callback?: (ret:JSON) => void):void

	/** 注销登录(不再接收 Push 消息)*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 设置连接状态变化的监听器，请在调用 init 方法之后，调用 connect 方法之前设置*/ 
	setConnectionStatusListener(callback?: (ret:JSON) => void):void

	/** 获取连接状态*/ 
	getConnectionStatus(callback?: (ret:JSON) => void):void

	/** 获取当前连接用户的信息*/ 
	getCurrentUserId(callback?: (ret:JSON) => void):void

	/**
	 * `发送文字消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `text` :string : 消息的文字内容
	 *
	 * `extra` :string : 消息的附加信息
	 *
	 * `mentionedInfo` :JSON : @功能，当conversationType为GROUP或DISCUSSION有效；(ios不支持DISCUSSION)；注：＠ 消息推送会越过所有免打扰逻辑，给用户推送 Push 通知。
	 */
	sendTextMessage(params:rongCloudIM_sendTextMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `imagePath` :string : 图片的路径，支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : 消息的附加信息
	 *
	 * `isFull` :boolean : 是否发送原图
	 */
	sendImageMessage(params:rongCloudIM_sendImageMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送语音消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `voicePath` :string : 语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式
	 *
	 * `duration` :number : 语音消息的时长，单位为秒
	 *
	 * `extra` :string : 消息的附加信息
	 */
	sendVoiceMessage(params:rongCloudIM_sendVoiceMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `latitude` :number : 消息的文字内容
	 *
	 * `longitude` :number : 消息的文字内容
	 *
	 * `poi` :string : 消息的文字内容
	 *
	 * `imagePath` :string : 地图缩率图的路径，支持 fs://，如：fs:///location_thumb/123.jpg
	 *
	 * `extra` :string : 消息的附加信息
	 */
	sendLocationMessage(params:rongCloudIM_sendLocationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图文消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `title` :string : 消息的标题
	 *
	 * `description` :string : 消息的内容描述
	 *
	 * `imageUrl` :string : 消息图片的网络地址
	 *
	 * `extra` :string : 消息的附加信息
	 */
	sendRichContentMessage(params:rongCloudIM_sendRichContentMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送命令消息，可以用来实现任何自定义消息的发送`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `name` :string : 命令的名称
	 *
	 * `data` :string : 命令的数据
	 */
	sendCommandNotificationMessage(params:rongCloudIM_sendCommandNotificationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送命令消息，您需要这种类型的消息时可以直接使用，不需要再自定义。此消息不保存、不计数。`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `name` :string : 命令的名称
	 *
	 * `data` :string : 命令的数据
	 */
	sendCommandMessage(params:rongCloudIM_sendCommandMessage_Params, callback?: (ret:JSON) => void):void

	/** 设置接收消息的监听器，请在调用 init 方法之后，调用 connect 方法之前设置*/ 
	setOnReceiveMessageListener(callback?: (ret:JSON) => void):void

	/** 获取当前用户离线消息时间*/ 
	getOfflineMessageDuration(callback?: (ret:JSON) => void):void

	/**
	 * `设置当前用户离线消息存储时间`
	 * ========params==========
	 *
	 * `duration` :number : (可选项)用户离线消息存储时间（以天为单位），范围【1~7天】
	 */
	setOfflineMessageDuration(params:rongCloudIM_setOfflineMessageDuration_Params, callback?: (ret:JSON) => void):void

	/**
	 * `搜索本地历史消息`
	 * ========params==========
	 *
	 * `conversationTypes` :Array : 搜索的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `objectNames` :Array : 搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息
	 *
	 * `keyword` :string : 搜索的关键字
	 */
	searchConversations(params:rongCloudIM_searchConversations_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据会话,搜索本地历史消息。`
	 * ========params==========
	 *
	 * `conversationType` :string : 指定的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 指定的会话 id
	 *
	 * `keyword` :string : 搜索的关键字
	 *
	 * `count` :number : 返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回
	 *
	 * `beginTime` :number : 查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）
	 */
	searchMessages(params:rongCloudIM_searchMessages_Params, callback?: (ret:JSON) => void):void

	/** 获取会话列表*/ 
	getConversationList(callback?: (ret:JSON) => void):void

	/** 获取置顶会话列表*/ 
	getTopConversationList():void

	/**
	 * `获取屏蔽消息的会话列表`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)(ios不支持)
	 */
	getBlockedConversationList(params:rongCloudIM_getBlockedConversationList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分页获取会话列表`
	 * ========params==========
	 *
	 * `typeList` :Array : （可选项）回话类型组成的数组
	 *
	 * `count` :number : （可选项）获取的数量
	 *
	 * `startTime` :number : （可选项）会话的时间戳（获取这个时间戳之前的会话列表，0表示从最新开始获取）
	 */
	getConversationListByCount(params:rongCloudIM_getConversationListByCount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话信息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见[会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getConversation(params:rongCloudIM_getConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从会话列表中移除某一会话，但是不删除会话内的消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	removeConversation(params:rongCloudIM_removeConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清空所有会话及会话消息`
	 * ========params==========
	 *
	 * `conversationTypes` :Array : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 */
	clearConversations(params:rongCloudIM_clearConversations_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置某一会话为置顶或者取消置顶`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `isTop` :boolean : 是否置顶
	 */
	setConversationToTop(params:rongCloudIM_setConversationToTop_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话的通知状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getConversationNotificationStatus(params:rongCloudIM_getConversationNotificationStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置某一会话的通知状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `notificationStatus` :string : 会话通知提醒状态，参见 [会话通知提醒状态](!Constant#conversationNotificationStatus)
	 */
	setConversationNotificationStatus(params:rongCloudIM_setConversationNotificationStatus_Params, callback?: (ret:JSON) => void):void

	/** 设置本地消息不提示*/ 
	disableLocalNotification(callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话的最新消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `count` :number : 要获取的消息数量
	 */
	getLatestMessages(params:rongCloudIM_getLatestMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话的历史消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1
	 *
	 * `count` :number : 要获取的消息数量
	 */
	getHistoryMessages(params:rongCloudIM_getHistoryMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `按照消息类型获取历史消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 消息类型标识
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1
	 *
	 * `count` :number : 要获取的消息数量
	 */
	getHistoryMessagesByObjectName(params:rongCloudIM_getHistoryMessagesByObjectName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取历史消息记录（特别说明：调用此方法需要开启历史消息漫游；当用户因换设备或重装app导致本地本地存储丢失的情况，可用此方法获取记录；此方法返回值中messageId均为0，融云服务器不会保存此值）`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)；不支持传入 RCConversationType.CHATROOM。
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `dateTime ` :any : 从该时间点开始获取消息。即：消息中的 sentTime；第一次可传 0，再次取值此参数可传入上一次获取的最后一条记录的sentTime值。
	 *
	 * `count` :number : 要获取的消息数量（1-20条）
	 */
	getRemoteHistoryMessages(params:rongCloudIM_getRemoteHistoryMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除指定的一条或者一组消息`
	 * ========params==========
	 *
	 * `messageIds` :Array : 要删除的消息 Id 数组
	 */
	deleteMessages(params:rongCloudIM_deleteMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清空某一会话的所有聊天消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	clearMessages(params:rongCloudIM_clearMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除某一会话的消息未读状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	clearMessagesUnreadStatus(params:rongCloudIM_clearMessagesUnreadStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `撤回消息`
	 * ========params==========
	 *
	 * `messageId` :string : 消息ID
	 */
	recallMessage(params:rongCloudIM_recallMessage_Params, callback?: (ret:JSON) => void):void

	/** 监听撤回消息*/ 
	setOnMessageRecalledListener():void

	/**
	 * `获取某会话里未读的@消息。`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getUnreadMentionedMessages(params:rongCloudIM_getUnreadMentionedMessages_Params, callback?: (ret:JSON) => void):void

	/** 获取所有未读消息数*/ 
	getTotalUnreadCount(callback?: (ret:JSON) => void):void

	/**
	 * `获取来自某用户（某会话）的未读消息数`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getUnreadCount(params:rongCloudIM_getUnreadCount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某（些）会话类型的未读消息数`
	 * ========params==========
	 *
	 * `conversationTypes` :Array : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 */
	getUnreadCountByConversationTypes(params:rongCloudIM_getUnreadCountByConversationTypes_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置接收到的消息状态`
	 * ========params==========
	 *
	 * `messageId` :string : 设置接收到的消息状态，参见 [接收到的消息状态](#receivedStatus)
	 */
	setMessageReceivedStatus(params:rongCloudIM_setMessageReceivedStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置消息的附加信息，此信息只保存在本地`
	 * ========params==========
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `value` :string : 消息附加信息，最大 1024 字节
	 */
	setMessageExtra(params:rongCloudIM_setMessageExtra_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置消息发送状态`
	 * ========params==========
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `sentStatus ` :string : 发送出的消息的状态枚举，参见 [发送状态](#sentStatus)；
	 */
	setMessageSentStatus(params:rongCloudIM_setMessageSentStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向会话中发送正在输入的状态。`
	 * ========params==========
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。
	 */
	sendTypingStatus(params:rongCloudIM_sendTypingStatus_Params):void

	/** 监听对方输入状态*/ 
	addTypingStatusListener():void

	/**
	 * `发送单聊中消息已读的回执`
	 * ========params==========
	 *
	 * `targetId` :string : 目标会话ID
	 *
	 * `timestamp` :number : 该会话中已阅读的最后一条消息的发送时间戳
	 */
	sendReadReceiptMessage(params:rongCloudIM_sendReadReceiptMessage_Params, callback?: (ret:JSON) => void):void

	/** 添加收到已读回执的监听*/ 
	addReceiveReadReceiptListener():void

	/**
	 * `发起群组消息回执请求。只能对自己发送的消息发起消息回执请求。`
	 * ========params==========
	 *
	 * `messageId` :number : 消息id
	 */
	sendReadReceiptRequest(params:rongCloudIM_sendReadReceiptRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `如果在会话中收到了回执请求，接收者需要在合适的时机响应该请求，以通知发送者自己已经阅读了该消息。`
	 * ========params==========
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : targetId
	 *
	 * `messageId` :number : 消息id
	 */
	sendReadReceiptResponse(params:rongCloudIM_sendReadReceiptResponse_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加消息回执监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 */
	addReadReceiptListener(params:rongCloudIM_addReadReceiptListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除消息回执监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 */
	removeReadReceiptListener(params:rongCloudIM_removeReadReceiptListener_Params):void

	/**
	 * `获取某一会话的文字消息草稿`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getTextMessageDraft(params:rongCloudIM_getTextMessageDraft_Params, callback?: (ret:JSON) => void):void

	/**
	 * `保存某一会话的文字消息草稿`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `content` :string : 草稿的文字内容
	 */
	saveTextMessageDraft(params:rongCloudIM_saveTextMessageDraft_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除某一会话的文字消息草稿`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	clearTextMessageDraft(params:rongCloudIM_clearTextMessageDraft_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建讨论组`
	 * ========params==========
	 *
	 * `name` :string : 讨论组名称，如：当前所有成员的名字的组合。
	 *
	 * `userIdList` :Array : 讨论组成员 Id 列表
	 */
	createDiscussion(params:rongCloudIM_createDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取讨论组信息和设置`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 */
	getDiscussion(params:rongCloudIM_getDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置讨论组名称`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `name` :string : 讨论组名称
	 */
	setDiscussionName(params:rongCloudIM_setDiscussionName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加一名或者一组用户加入讨论组`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `userIdList` :Array : 邀请的用户 Id 列表
	 */
	addMemberToDiscussion(params:rongCloudIM_addMemberToDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `供创建者将某用户移出讨论组`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `userId` :string : 用户 Id
	 */
	removeMemberFromDiscussion(params:rongCloudIM_removeMemberFromDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `退出当前用户所在的某讨论组`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 */
	quitDiscussion(params:rongCloudIM_quitDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置讨论组成员邀请权限`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `inviteStatus` :string : 邀请状态，默认为开放，参见 [讨论组邀请状态](!Constant#discussionInviteStatus)
	 */
	setDiscussionInviteStatus(params:rongCloudIM_setDiscussionInviteStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `当前用户加入某聊天室`
	 * ========params==========
	 *
	 * `chatRoomId` :string : 聊天室 Id
	 *
	 * `defMessageCount` :number : 进入聊天室拉取消息数目
	 */
	joinChatRoom(params:rongCloudIM_joinChatRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `当前用户退出某聊天室`
	 * ========params==========
	 *
	 * `chatRoomId` :string : 聊天室 Id
	 */
	quitChatRoom(params:rongCloudIM_quitChatRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将某个用户加到黑名单中`
	 * ========params==========
	 *
	 * `userId` :string : 要加入黑名单的用户 Id
	 */
	addToBlacklist(params:rongCloudIM_addToBlacklist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将个某用户从黑名单中移出`
	 * ========params==========
	 *
	 * `userId` :string : 要移出黑名单的用户 Id
	 */
	removeFromBlacklist(params:rongCloudIM_removeFromBlacklist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某用户是否在黑名单中`
	 * ========params==========
	 *
	 * `userId` :string : 要查询的用户 Id
	 */
	getBlacklistStatus(params:rongCloudIM_getBlacklistStatus_Params, callback?: (ret:JSON) => void):void

	/** 获取当前用户的黑名单列表*/ 
	getBlacklist():void

	/**
	 * `设置消息通知免打扰时间，此方法会屏蔽该会话在该时间段的远程推送；`
	 * ========params==========
	 *
	 * `startTime` :string : 起始时间 格式 HH:MM:SS
	 *
	 * `spanMinutes ` :number : 间隔分钟数 0 < spanMinutes < 1440。
	 */
	setNotificationQuietHours(params:rongCloudIM_setNotificationQuietHours_Params, callback?: (ret:JSON) => void):void

	/** 移除消息通知免打扰时间*/ 
	removeNotificationQuietHours(callback?: (ret:JSON) => void):void

	/** 获取消息通知免打扰时间*/ 
	getNotificationQuietHours():void

}
interface rongCloudIM_init_Params {
	/**(可选项)配置小米推送的信息*/ 
	miPush?:JSON,

	/**(可选项) 是否集成华为推送*/ 
	huaweiPush?:boolean,

}

interface rongCloudIM_configurationParameter_Params {
	/**进入后台两分钟内收到通知的显示内容，不传则显示消息内容*/ 
	alertTitle:string,

	/**推送提示是否显示昵称，注：设置昵称的方式为：在发送消息接口的extra字段中填写昵称信息，格式为extra:{userInfo:{nickName:"用户昵称"}}*/ 
	showNickname:boolean,

}

interface rongCloudIM_connect_Params {
	/**从服务端获取的用户身份令牌（Token）*/ 
	token:string,

}

interface rongCloudIM_disconnect_Params {
	/**断开后是否接收 Push*/ 
	isReceivePush:boolean,

}

interface rongCloudIM_sendTextMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的文字内容*/ 
	text:string,

	/**消息的附加信息*/ 
	extra:string,

	/**@功能，当conversationType为GROUP或DISCUSSION有效；(ios不支持DISCUSSION)；注：＠ 消息推送会越过所有免打扰逻辑，给用户推送 Push 通知。*/ 
	mentionedInfo:JSON,

}

interface rongCloudIM_sendImageMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**图片的路径，支持 fs://，如：fs:///image/123.jpg*/ 
	imagePath:string,

	/**消息的附加信息*/ 
	extra:string,

	/**是否发送原图*/ 
	isFull:boolean,

}

interface rongCloudIM_sendVoiceMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式*/ 
	voicePath:string,

	/**语音消息的时长，单位为秒*/ 
	duration:number,

	/**消息的附加信息*/ 
	extra:string,

}

interface rongCloudIM_sendLocationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的文字内容*/ 
	latitude:number,

	/**消息的文字内容*/ 
	longitude:number,

	/**消息的文字内容*/ 
	poi:string,

	/**地图缩率图的路径，支持 fs://，如：fs:///location_thumb/123.jpg*/ 
	imagePath:string,

	/**消息的附加信息*/ 
	extra:string,

}

interface rongCloudIM_sendRichContentMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的标题*/ 
	title:string,

	/**消息的内容描述*/ 
	description:string,

	/**消息图片的网络地址*/ 
	imageUrl:string,

	/**消息的附加信息*/ 
	extra:string,

}

interface rongCloudIM_sendCommandNotificationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**命令的名称*/ 
	name:string,

	/**命令的数据*/ 
	data:string,

}

interface rongCloudIM_sendCommandMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**命令的名称*/ 
	name:string,

	/**命令的数据*/ 
	data:string,

}

interface rongCloudIM_setOfflineMessageDuration_Params {
	/**(可选项)用户离线消息存储时间（以天为单位），范围【1~7天】*/ 
	duration?:number,

}

interface rongCloudIM_searchConversations_Params {
	/**搜索的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

	/**搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息*/ 
	objectNames:Array,

	/**搜索的关键字*/ 
	keyword:string,

}

interface rongCloudIM_searchMessages_Params {
	/**指定的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**指定的会话 id*/ 
	targetId:string,

	/**搜索的关键字*/ 
	keyword:string,

	/**返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回*/ 
	count:number,

	/**查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）*/ 
	beginTime:number,

}

interface rongCloudIM_getBlockedConversationList_Params {
	/**消息的会话类型，参见[会话类型](!Constant#conversationType)(ios不支持)*/ 
	conversationType:string,

}

interface rongCloudIM_getConversationListByCount_Params {
	/**（可选项）回话类型组成的数组*/ 
	typeList?:Array,

	/**（可选项）获取的数量*/ 
	count?:number,

	/**（可选项）会话的时间戳（获取这个时间戳之前的会话列表，0表示从最新开始获取）*/ 
	startTime?:number,

}

interface rongCloudIM_getConversation_Params {
	/**消息的会话类型，参见[会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rongCloudIM_removeConversation_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rongCloudIM_clearConversations_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

}

interface rongCloudIM_setConversationToTop_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**是否置顶*/ 
	isTop:boolean,

}

interface rongCloudIM_getConversationNotificationStatus_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rongCloudIM_setConversationNotificationStatus_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**会话通知提醒状态，参见 [会话通知提醒状态](!Constant#conversationNotificationStatus)*/ 
	notificationStatus:string,

}

interface rongCloudIM_getLatestMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**要获取的消息数量*/ 
	count:number,

}

interface rongCloudIM_getHistoryMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1*/ 
	oldestMessageId:number,

	/**要获取的消息数量*/ 
	count:number,

}

interface rongCloudIM_getHistoryMessagesByObjectName_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息类型标识*/ 
	objectName:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1*/ 
	oldestMessageId:number,

	/**要获取的消息数量*/ 
	count:number,

}

interface rongCloudIM_getRemoteHistoryMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)；不支持传入 RCConversationType.CHATROOM。*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**从该时间点开始获取消息。即：消息中的 sentTime；第一次可传 0，再次取值此参数可传入上一次获取的最后一条记录的sentTime值。*/ 
	dateTime :any,

	/**要获取的消息数量（1-20条）*/ 
	count:number,

}

interface rongCloudIM_deleteMessages_Params {
	/**要删除的消息 Id 数组*/ 
	messageIds:Array,

}

interface rongCloudIM_clearMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rongCloudIM_clearMessagesUnreadStatus_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rongCloudIM_recallMessage_Params {
	/**消息ID*/ 
	messageId:string,

}

interface rongCloudIM_getUnreadMentionedMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rongCloudIM_getUnreadCount_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rongCloudIM_getUnreadCountByConversationTypes_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

}

interface rongCloudIM_setMessageReceivedStatus_Params {
	/**设置接收到的消息状态，参见 [接收到的消息状态](#receivedStatus)*/ 
	messageId:string,

}

interface rongCloudIM_setMessageExtra_Params {
	/**消息 Id*/ 
	messageId:number,

	/**消息附加信息，最大 1024 字节*/ 
	value:string,

}

interface rongCloudIM_setMessageSentStatus_Params {
	/**消息 Id*/ 
	messageId:number,

	/**发送出的消息的状态枚举，参见 [发送状态](#sentStatus)；*/ 
	sentStatus :string,

}

interface rongCloudIM_sendTypingStatus_Params {
	/**（可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType?:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。*/ 
	objectName:string,

}

interface rongCloudIM_sendReadReceiptMessage_Params {
	/**目标会话ID*/ 
	targetId:string,

	/**该会话中已阅读的最后一条消息的发送时间戳*/ 
	timestamp:number,

}

interface rongCloudIM_sendReadReceiptRequest_Params {
	/**消息id*/ 
	messageId:number,

}

interface rongCloudIM_sendReadReceiptResponse_Params {
	/**会话类型*/ 
	conversationType:string,

	/**targetId*/ 
	targetId:string,

	/**消息id*/ 
	messageId:number,

}

interface rongCloudIM_addReadReceiptListener_Params {
	/**要监听的事件*/ 
	target:string,

}

interface rongCloudIM_removeReadReceiptListener_Params {
	/**要监听的事件*/ 
	target:string,

}

interface rongCloudIM_getTextMessageDraft_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rongCloudIM_saveTextMessageDraft_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**草稿的文字内容*/ 
	content:string,

}

interface rongCloudIM_clearTextMessageDraft_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface rongCloudIM_createDiscussion_Params {
	/**讨论组名称，如：当前所有成员的名字的组合。*/ 
	name:string,

	/**讨论组成员 Id 列表*/ 
	userIdList:Array,

}

interface rongCloudIM_getDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

}

interface rongCloudIM_setDiscussionName_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**讨论组名称*/ 
	name:string,

}

interface rongCloudIM_addMemberToDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**邀请的用户 Id 列表*/ 
	userIdList:Array,

}

interface rongCloudIM_removeMemberFromDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**用户 Id*/ 
	userId:string,

}

interface rongCloudIM_quitDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

}

interface rongCloudIM_setDiscussionInviteStatus_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**邀请状态，默认为开放，参见 [讨论组邀请状态](!Constant#discussionInviteStatus)*/ 
	inviteStatus:string,

}

interface rongCloudIM_joinChatRoom_Params {
	/**聊天室 Id*/ 
	chatRoomId:string,

	/**进入聊天室拉取消息数目*/ 
	defMessageCount:number,

}

interface rongCloudIM_quitChatRoom_Params {
	/**聊天室 Id*/ 
	chatRoomId:string,

}

interface rongCloudIM_addToBlacklist_Params {
	/**要加入黑名单的用户 Id*/ 
	userId:string,

}

interface rongCloudIM_removeFromBlacklist_Params {
	/**要移出黑名单的用户 Id*/ 
	userId:string,

}

interface rongCloudIM_getBlacklistStatus_Params {
	/**要查询的用户 Id*/ 
	userId:string,

}

interface rongCloudIM_setNotificationQuietHours_Params {
	/**起始时间 格式 HH:MM:SS*/ 
	startTime:string,

	/**间隔分钟数 0 < spanMinutes < 1440。*/ 
	spanMinutes :number,

}

interface ksi {
}
interface moduleShareSMS {
}
interface rongCloud2 {
	/**
	 * `发送图片消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `imagePath` :string : 图片的路径，支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : 消息的附加信息
	 *
	 * `isFull` :boolean : 是否发送原图
	 */
	sendImageMessage(params:rongCloud2_sendImageMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送 GIF 消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `imagePath` :string : 图片的路径，仅支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : 消息的附加信息
	 *
	 * `width` :number : gif 图宽度
	 *
	 * `height` :number : gif 图高度
	 */
	sendGifMessage(params:rongCloud2_sendGifMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送高清语音消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `voicePath` :string : 语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式
	 *
	 * `duration` :number : 语音消息的时长，单位为秒
	 *
	 * `extra` :string : 消息的附加信息
	 */
	sendHQVoiceMessage(params:rongCloud2_sendHQVoiceMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文件消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `filePath` :string : 文件的路径，仅支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : 消息的附加信息
	 */
	sendFileMessage(params:rongCloud2_sendFileMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送小视频消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `sightPath` :string : 小视频的路径，仅支持 fs://，如：fs:///image/123.jpg
	 *
	 * `thumbPath` :string : 缩略图的路径，仅支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : 消息的附加信息
	 *
	 * `duration` :number : 小视频时长
	 */
	sendSightMessage(params:rongCloud2_sendSightMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送好友通知消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `operation` :string : 好友请求当前的操作名
	 *
	 * `sourceUserId` :string : 当前操作发起用户的用户ID
	 *
	 * `message` :string : 当前操作的消息内容
	 *
	 * `extra` :string : 当前操作的附加信息
	 */
	sendContactNotificationMessage(params:rongCloud2_sendContactNotificationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送资料通知消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `operation` :string : 资料通知的操作名
	 *
	 * `data` :string : 信息变更的数据，可以为任意格式，如json数据。
	 *
	 * `extra` :string : 当前操作的附加信息
	 */
	sendProfileNotificationMessage(params:rongCloud2_sendProfileNotificationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送通知消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `message` :string : 当前操作的消息内容
	 *
	 * `extra` :string : 当前操作的附加信息
	 */
	sendInformationNotificationMessage(params:rongCloud2_sendInformationNotificationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送群组通知消息类消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `operation` :string : 群组通知当前的操作名
	 *
	 * `operatorUserId` :string : 当前操作发起用户的用户ID
	 *
	 * `message` :string : 当前操作的消息内容
	 *
	 * `data` :string : 当前操作的目标对象，如被当前操作目标用户的用户ID或变更后的群主名称等。
	 *
	 * `extra` :string : 当前操作的附加信息
	 */
	sendGroupNotificationMessage(params:rongCloud2_sendGroupNotificationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `搜索本地历史消息`
	 * ========params==========
	 *
	 * `conversationTypes` :Array : 搜索的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `objectNames` :Array : 搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息
	 *
	 * `keyword` :string : 搜索的关键字
	 */
	searchConversations(params:rongCloud2_searchConversations_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据会话,搜索本地历史消息。`
	 * ========params==========
	 *
	 * `conversationType` :string : 指定的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 指定的会话 id
	 *
	 * `keyword` :string : 搜索的关键字
	 *
	 * `count` :number : 返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回
	 *
	 * `beginTime` :number : 查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）
	 */
	searchMessages(params:rongCloud2_searchMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `同步会话阅读状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : targetId
	 *
	 * `time` :number : 已经阅读的最后一条消息的Unix时间戳(毫秒)
	 */
	syncConversationReadStatus(params:rongCloud2_syncConversationReadStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向会话中发送正在输入的状态。`
	 * ========params==========
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。
	 */
	sendTypingStatus(params:rongCloud2_sendTypingStatus_Params):void

	/** 监听对方输入状态*/ 
	addTypingStatusListener():void

	/**
	 * `发送单聊中消息已读的回执`
	 * ========params==========
	 *
	 * `targetId` :string : 目标会话ID
	 *
	 * `timestamp` :number : 该会话中已阅读的最后一条消息的发送时间戳
	 */
	sendReadReceiptMessage(params:rongCloud2_sendReadReceiptMessage_Params, callback?: (ret:JSON) => void):void

	/** 添加收到已读回执的监听*/ 
	addReceiveReadReceiptListener():void

	/**
	 * `发起群组消息回执请求。只能对自己发送的消息发起消息回执请求。`
	 * ========params==========
	 *
	 * `messageId` :number : 消息id
	 */
	sendReadReceiptRequest(params:rongCloud2_sendReadReceiptRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `如果在会话中收到了回执请求，接收者需要在合适的时机响应该请求，以通知发送者自己已经阅读了该消息。`
	 * ========params==========
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : targetId
	 *
	 * `messageId` :number : 消息id
	 */
	sendReadReceiptResponse(params:rongCloud2_sendReadReceiptResponse_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加消息回执监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 */
	addReadReceiptListener(params:rongCloud2_addReadReceiptListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除消息回执监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 */
	removeReadReceiptListener(params:rongCloud2_removeReadReceiptListener_Params):void

	/**
	 * `音视频来电事件监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `ret` :JSON : 操作结果
	 */
	addCallReceiveListener(params:rongCloud2_addCallReceiveListener_Params):void

	/**
	 * `移除音视频来电事件监听`
	 * ========params==========
	 *
	 * `target` :string : 要移除的来电监听的事件
	 */
	removeCallReceiveListener(params:rongCloud2_removeCallReceiveListener_Params):void

	/**
	 * `发起音视频通话`
	 * ========params==========
	 *
	 * `targetId` :string : 目标会话ID
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `mediaType` :string : （可选项）发起的通话媒体类型
	 *
	 * `userIdList` :string : （可选项）邀请的用户 ID 列表，**注意发起端不要传入自己的id**
	 *
	 * `extra` :string : （可选项）附件信息
	 *
	 * `ret` :JSON : 操作结果
	 */
	startCall(params:rongCloud2_startCall_Params):void

	/**
	 * `音视频通话事件的监听`
	 * ========params==========
	 *
	 * `target` :string : 要监听的事件
	 *
	 * `ret` :JSON : 监听事件返回，其中callOutgoing、callDidConnect、callDidDisconnect(android上会有disConnectReason参数回调)、shouldAlertForWaitingRemoteResponse、shouldRingForIncomingCall、shouldStopAlertAndRing只返回事件，无参数返回
	 */
	addCallSessionListener(params:rongCloud2_addCallSessionListener_Params):void

	/**
	 * `移除音视频来电事件监听`
	 * ========params==========
	 *
	 * `target` :string : 要移除的来电监听的事件
	 */
	removeCallSessionListener(params:rongCloud2_removeCallSessionListener_Params):void

	/** 获取当前通话实体，通话实体中维护着当前通话的所有信息。*/ 
	getCallSession():void

	/**
	 * `判断当前是否支持音视频通话 (注:android上此接口用来判断音视频引擎是否可用)`
	 * ========params==========
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType) (android不支持)
	 *
	 * `mediaType` :string : （可选项）发起的通话媒体类型 (android不支持)
	 */
	isCallEnabled(params:rongCloud2_isCallEnabled_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置本地视频属性，可用此接口设置本地视频分辨率，设置宽和高替换`
	 * ========params==========
	 *
	 * `profile` :string : （可选项）通话视频参数
	 *
	 * `swapWidthAndHeight` :boolean : （可选项）是否交换宽和高 (android不支持)
	 *
	 * `fps` :number : 帧率
	 *
	 * `cameraDisplayOrientation` :number : 相机旋转角度
	 */
	setVideoProfile(params:rongCloud2_setVideoProfile_Params):void

	/**
	 * `设置本地视频属性，是否使用默认美颜`
	 * ========params==========
	 *
	 * `enableBeauty` :boolean : （可选项）是否使用美颜
	 */
	setEnableBeauty(params:rongCloud2_setEnableBeauty_Params):void

	/**
	 * `设接听来电`
	 * ========params==========
	 *
	 * `mediaType` :string : （可选项）接听使用的媒体类型 (android不支持)
	 *
	 * `callId ` :string : 呼叫id (ios不支持)
	 */
	accept(params:rongCloud2_accept_Params):void

	/** 挂断*/ 
	hangup():void

	/** 白板*/ 
	whiteBoard():void

	/**
	 * `邀请用户加入当前通话 （仅限讨论组和群组）`
	 * ========params==========
	 *
	 * `userIds` :Array : 邀请的用户 ID 列表
	 *
	 * `observerUserIds` :Array : 邀请的观察者列表,没有观察者可以不传(iOS不支持)
	 */
	addParticipants(params:rongCloud2_addParticipants_Params):void

	/**
	 * `打开视频区域 **（注意：Android如果设置对方窗口时，需要监听到 remoteUserDidJoin 事件之后设置，否则可能导致窗口无法显示的问题）**`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `renderModel` :string : （可选项）设视频显示模式 (android不支持)
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、#、img（本地路径）
	 *
	 * `isMirror` :boolean : 是否设置镜像(该参数仅支持Android)
	 *
	 * `fixedOn` :string : （可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）视频是否随所属 window 或 frame 滚动
	 */
	setVideoView(params:rongCloud2_setVideoView_Params):void

	/**
	 * `重设打开的视频区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频的位置及尺寸
	 *
	 * `userId` :string : 用户 ID
	 *
	 * `renderModel` :string : （可选项）设视频显示模式 (android不支持)
	 *
	 * `bg` :string : （可选项）背景配置，支持rgb、rgba()、#、img（本地路径）
	 *
	 * `animationDuration` :number : （可选项）改变位置大小时添加的动画效果时长，为负数或0时表示没动画效果
	 */
	resetVideoView(params:rongCloud2_resetVideoView_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将指定画面窗口从其父窗口带到最上层显示`
	 * ========params==========
	 *
	 * `userId` :string : 用户 ID
	 */
	videoViewBringToFront(params:rongCloud2_videoViewBringToFront_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭移除打开的视频区域`
	 * ========params==========
	 *
	 * `userId` :string : 用户 ID
	 */
	removeVideoView(params:rongCloud2_removeVideoView_Params):void

	/** 添加视频区域的监听*/ 
	addVideoViewListener():void

	/**
	 * `改变当前通话的媒体类型`
	 * ========params==========
	 *
	 * `mediaType` :string : （可选项）接听使用的媒体类型
	 */
	changeMediaType(params:rongCloud2_changeMediaType_Params):void

	/** 是否是静音*/ 
	isMuted():void

	/**
	 * `设置静音`
	 * ========params==========
	 *
	 * `muted` :boolean : （可选项）是否静音
	 */
	setMuted(params:rongCloud2_setMuted_Params, callback?: (ret:JSON) => void):void

	/** 是否有最小化窗口*/ 
	minimized():void

	/**
	 * `设置是否有最小化窗口状态`
	 * ========params==========
	 *
	 * `minimized` :boolean : （可选项）是否最小化
	 */
	setMinimized(params:rongCloud2_setMinimized_Params):void

	/** 是否打开扬声器*/ 
	speakerEnabled():void

	/**
	 * `设置扬声器状态`
	 * ========params==========
	 *
	 * `speakerEnabled` :boolean : （可选项）是否开启扬声器
	 */
	setSpeakerEnabled(params:rongCloud2_setSpeakerEnabled_Params, callback?: (ret:JSON) => void):void

	/** 是否开启摄像头*/ 
	cameraEnabled():void

	/**
	 * `设置打开摄像头`
	 * ========params==========
	 *
	 * `cameraEnabled` :boolean : （可选项）是否打开摄像头
	 */
	setCameraEnabled(params:rongCloud2_setCameraEnabled_Params, callback?: (ret:JSON) => void):void

	/** 切换摄像头*/ 
	switchCameraMode():void

	/**
	 * `开始声音录制，目前只支持录制wav格式音频文件, 请给出完整沙盒路径+文件名`
	 * ========params==========
	 *
	 * `filePath` :string : 录制文件保存路径
	 */
	startAudioRecording(params:rongCloud2_startAudioRecording_Params, callback?: (ret:JSON) => void):void

	/** 停止录音*/ 
	stopAudioRecording():void

}
interface rongCloud2_sendImageMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**图片的路径，支持 fs://，如：fs:///image/123.jpg*/ 
	imagePath:string,

	/**消息的附加信息*/ 
	extra:string,

	/**是否发送原图*/ 
	isFull:boolean,

}

interface rongCloud2_sendGifMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**图片的路径，仅支持 fs://，如：fs:///image/123.jpg*/ 
	imagePath:string,

	/**消息的附加信息*/ 
	extra:string,

	/**gif 图宽度*/ 
	width:number,

	/**gif 图高度*/ 
	height:number,

}

interface rongCloud2_sendHQVoiceMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式*/ 
	voicePath:string,

	/**语音消息的时长，单位为秒*/ 
	duration:number,

	/**消息的附加信息*/ 
	extra:string,

}

interface rongCloud2_sendFileMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**文件的路径，仅支持 fs://，如：fs:///image/123.jpg*/ 
	filePath:string,

	/**消息的附加信息*/ 
	extra:string,

}

interface rongCloud2_sendSightMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**小视频的路径，仅支持 fs://，如：fs:///image/123.jpg*/ 
	sightPath:string,

	/**缩略图的路径，仅支持 fs://，如：fs:///image/123.jpg*/ 
	thumbPath:string,

	/**消息的附加信息*/ 
	extra:string,

	/**小视频时长*/ 
	duration:number,

}

interface rongCloud2_sendContactNotificationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**好友请求当前的操作名*/ 
	operation:string,

	/**当前操作发起用户的用户ID*/ 
	sourceUserId:string,

	/**当前操作的消息内容*/ 
	message:string,

	/**当前操作的附加信息*/ 
	extra:string,

}

interface rongCloud2_sendProfileNotificationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**资料通知的操作名*/ 
	operation:string,

	/**信息变更的数据，可以为任意格式，如json数据。*/ 
	data:string,

	/**当前操作的附加信息*/ 
	extra:string,

}

interface rongCloud2_sendInformationNotificationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**当前操作的消息内容*/ 
	message:string,

	/**当前操作的附加信息*/ 
	extra:string,

}

interface rongCloud2_sendGroupNotificationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**群组通知当前的操作名*/ 
	operation:string,

	/**当前操作发起用户的用户ID*/ 
	operatorUserId:string,

	/**当前操作的消息内容*/ 
	message:string,

	/**当前操作的目标对象，如被当前操作目标用户的用户ID或变更后的群主名称等。*/ 
	data:string,

	/**当前操作的附加信息*/ 
	extra:string,

}

interface rongCloud2_searchConversations_Params {
	/**搜索的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

	/**搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息*/ 
	objectNames:Array,

	/**搜索的关键字*/ 
	keyword:string,

}

interface rongCloud2_searchMessages_Params {
	/**指定的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**指定的会话 id*/ 
	targetId:string,

	/**搜索的关键字*/ 
	keyword:string,

	/**返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回*/ 
	count:number,

	/**查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）*/ 
	beginTime:number,

}

interface rongCloud2_syncConversationReadStatus_Params {
	/**会话类型*/ 
	conversationType:string,

	/**targetId*/ 
	targetId:string,

	/**已经阅读的最后一条消息的Unix时间戳(毫秒)*/ 
	time:number,

}

interface rongCloud2_sendTypingStatus_Params {
	/**（可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType?:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。*/ 
	objectName:string,

}

interface rongCloud2_sendReadReceiptMessage_Params {
	/**目标会话ID*/ 
	targetId:string,

	/**该会话中已阅读的最后一条消息的发送时间戳*/ 
	timestamp:number,

}

interface rongCloud2_sendReadReceiptRequest_Params {
	/**消息id*/ 
	messageId:number,

}

interface rongCloud2_sendReadReceiptResponse_Params {
	/**会话类型*/ 
	conversationType:string,

	/**targetId*/ 
	targetId:string,

	/**消息id*/ 
	messageId:number,

}

interface rongCloud2_addReadReceiptListener_Params {
	/**要监听的事件*/ 
	target:string,

}

interface rongCloud2_removeReadReceiptListener_Params {
	/**要监听的事件*/ 
	target:string,

}

interface rongCloud2_addCallReceiveListener_Params {
	/**要监听的事件*/ 
	target:string,

	/**操作结果*/ 
	ret:JSON,

}

interface rongCloud2_removeCallReceiveListener_Params {
	/**要移除的来电监听的事件*/ 
	target:string,

}

interface rongCloud2_startCall_Params {
	/**目标会话ID*/ 
	targetId:string,

	/**（可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType?:string,

	/**（可选项）发起的通话媒体类型*/ 
	mediaType?:string,

	/**（可选项）邀请的用户 ID 列表，**注意发起端不要传入自己的id***/ 
	userIdList?:string,

	/**（可选项）附件信息*/ 
	extra?:string,

	/**操作结果*/ 
	ret:JSON,

}

interface rongCloud2_addCallSessionListener_Params {
	/**要监听的事件*/ 
	target:string,

	/**监听事件返回，其中callOutgoing、callDidConnect、callDidDisconnect(android上会有disConnectReason参数回调)、shouldAlertForWaitingRemoteResponse、shouldRingForIncomingCall、shouldStopAlertAndRing只返回事件，无参数返回*/ 
	ret:JSON,

}

interface rongCloud2_removeCallSessionListener_Params {
	/**要移除的来电监听的事件*/ 
	target:string,

}

interface rongCloud2_isCallEnabled_Params {
	/**（可选项）消息的会话类型，参见 [会话类型](!Constant#conversationType) (android不支持)*/ 
	conversationType?:string,

	/**（可选项）发起的通话媒体类型 (android不支持)*/ 
	mediaType?:string,

}

interface rongCloud2_setVideoProfile_Params {
	/**（可选项）通话视频参数*/ 
	profile?:string,

	/**（可选项）是否交换宽和高 (android不支持)*/ 
	swapWidthAndHeight?:boolean,

	/**帧率*/ 
	fps:number,

	/**相机旋转角度*/ 
	cameraDisplayOrientation:number,

}

interface rongCloud2_setEnableBeauty_Params {
	/**（可选项）是否使用美颜*/ 
	enableBeauty?:boolean,

}

interface rongCloud2_accept_Params {
	/**（可选项）接听使用的媒体类型 (android不支持)*/ 
	mediaType?:string,

	/**呼叫id (ios不支持)*/ 
	callId :string,

}

interface rongCloud2_addParticipants_Params {
	/**邀请的用户 ID 列表*/ 
	userIds:Array,

	/**邀请的观察者列表,没有观察者可以不传(iOS不支持)*/ 
	observerUserIds:Array,

}

interface rongCloud2_setVideoView_Params {
	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**用户 ID*/ 
	userId:string,

	/**（可选项）设视频显示模式 (android不支持)*/ 
	renderModel?:string,

	/**（可选项）背景配置，支持rgb、rgba()、#、img（本地路径）*/ 
	bg?:string,

	/**是否设置镜像(该参数仅支持Android)*/ 
	isMirror:boolean,

	/**（可选项）视频视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）视频是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface rongCloud2_resetVideoView_Params {
	/**（可选项）视频的位置及尺寸*/ 
	rect?:JSON,

	/**用户 ID*/ 
	userId:string,

	/**（可选项）设视频显示模式 (android不支持)*/ 
	renderModel?:string,

	/**（可选项）背景配置，支持rgb、rgba()、#、img（本地路径）*/ 
	bg?:string,

	/**（可选项）改变位置大小时添加的动画效果时长，为负数或0时表示没动画效果*/ 
	animationDuration?:number,

}

interface rongCloud2_videoViewBringToFront_Params {
	/**用户 ID*/ 
	userId:string,

}

interface rongCloud2_removeVideoView_Params {
	/**用户 ID*/ 
	userId:string,

}

interface rongCloud2_changeMediaType_Params {
	/**（可选项）接听使用的媒体类型*/ 
	mediaType?:string,

}

interface rongCloud2_setMuted_Params {
	/**（可选项）是否静音*/ 
	muted?:boolean,

}

interface rongCloud2_setMinimized_Params {
	/**（可选项）是否最小化*/ 
	minimized?:boolean,

}

interface rongCloud2_setSpeakerEnabled_Params {
	/**（可选项）是否开启扬声器*/ 
	speakerEnabled?:boolean,

}

interface rongCloud2_setCameraEnabled_Params {
	/**（可选项）是否打开摄像头*/ 
	cameraEnabled?:boolean,

}

interface rongCloud2_startAudioRecording_Params {
	/**录制文件保存路径*/ 
	filePath:string,

}

interface mapleIM {
}
interface dahuatech {
	/** 初始化登陆模块*/ 
	login():void

	/** 加载组织设备信息。*/ 
	loadGroupInfo():void

	/** 打开播放窗口并播放*/ 
	addPlayWin():void

	/** 开始播放视频*/ 
	start():void

	/** 暂停视频*/ 
	pause():void

	/** 关闭播放页面*/ 
	close():void

	/** 隐藏监控画面*/ 
	hidePlay():void

	/** 显示监控画面*/ 
	showPlay():void

	/** 控制云台*/ 
	startPTZ():void

	/** 停止控制云台*/ 
	stopPTZ():void

	/** 抓图*/ 
	snapShot():void

	/** 开始录像*/ 
	startRecord():void

	/** 停止录像*/ 
	stopRecord():void

	/** 打开声音*/ 
	openAudio():void

	/** 关闭声音*/ 
	stopAudio():void

	/** 打开对讲*/ 
	openTalk():void

	/** 关闭对讲*/ 
	closeTalk():void

	/** 查询录像录像*/ 
	queryRecord():void

	/** 打开录像*/ 
	startPlayback():void

	/** 关闭录像*/ 
	closePlayback():void

	/**  暂停录像*/ 
	pausePlayback():void

	/** 打开录像声音*/ 
	openBackAudio():void

	/** 关闭录像声音*/ 
	closeBackAudio():void

	/** 隐藏录像*/ 
	hidePlayback():void

	/** 显示录像*/ 
	showPlayback():void

}
interface bdTTS {
	/** 初始化引擎，设置参数。语音合成需要先调用此接口。*/ 
	init():void

	/**
	 * `授权检验接口，离线模式可自动下载更新正式授权文件。`
	 * ========params==========
	 *
	 * `mode` :string : 检测离在线模式还是在线模式
	 */
	authCheck(params:bdTTS_authCheck_Params, callback?: (ret:JSON) => void):void

	/** 语音合成并播放*/ 
	speak():void

	/** 语音合成不播放*/ 
	synthesize():void

	/** 批量合成并播放（iOS不支持此接口）*/ 
	batchSpeak():void

	/** 继续播放*/ 
	speakResume():void

	/** 暂停播放*/ 
	speakPause():void

	/** 停止合成并停止播放*/ 
	stop():void

	/** 释放引擎，调用此接口会如需语音合成需要先调用init接口*/ 
	release():void

	/** 添加监听*/ 
	addListener():void

}
interface bdTTS_authCheck_Params {
	/**检测离在线模式还是在线模式*/ 
	mode:string,

}

interface AliyunPlayer {
	/** 初始化播放器*/ 
	initPlayer():void

	/** 打开定制播放器（sts、playAuth、url这三种播放方式只需选取一种，播放器首先尝试以sts的方式播放，如果没有传sts参数，播放器就以playAuth，如果playAuth也没有传参，就以url方式进行播放）*/ 
	openCustomPlayer():void

	/** 关闭自定义播放器*/ 
	closeCustomPlayer():void

	/** 返回功能接口，如当前是全屏模式则转为小屏播放，如果是小屏模式 则返回back事件*/ 
	onBack():void

	/** 打开悬浮窗口（注意Android需要打开悬浮窗权限，否则会出现异常）*/ 
	openFloatWindow():void

	/**
	 * `准备播放 （sts、playAuth、url这三种播放方式只需选取一种，播放器首先尝试以sts的方式播放，如果没有传sts参数，播放器就以playAuth，如果playAuth也没有传参，就以url方式进行播放）`
	 * ========params==========
	 *
	 * `sts` :JSON : 使用vid+STS方式播放
	 *
	 * `playAuth` :JSON : 使用playAuth方式播放
	 *
	 * `url` :string : 播放url
	 */
	prepareToPlay(params:AliyunPlayer_prepareToPlay_Params):void

	/** 开始播放*/ 
	start():void

	/** 显示*/ 
	show():void

	/** 隐藏*/ 
	hide():void

	/** 关闭*/ 
	close():void

	/** 停止播放*/ 
	stop():void

	/** 暂停播放*/ 
	pause():void

	/** 重播，播放上一次的url*/ 
	replay():void

	/**
	 * `跳转到指定时间点播放(在播放器状态firstFrame之后才能调用此函数)`
	 * ========params==========
	 *
	 * `position` :number : 播放的指定位置
	 *
	 * `ret` :JSON : 返回值
	 */
	seekToTime(params:AliyunPlayer_seekToTime_Params):void

	/**
	 * `循环播放设置`
	 * ========params==========
	 *
	 * `isCirclePlay` :boolean : 是否循环播放；默认false
	 */
	setCirclePlay(params:AliyunPlayer_setCirclePlay_Params):void

	/** 获取当前播放位置*/ 
	getCurrentPosition():void

	/** 获取视频长度*/ 
	getDuration():void

	/**
	 * `倍数播放支持0.5~2倍的设置，支持音频变速不变调`
	 * ========params==========
	 *
	 * `speed` :number : 倍速
	 */
	setPlaySpeed(params:AliyunPlayer_setPlaySpeed_Params):void

	/**
	 * `清晰度切换`
	 * ========params==========
	 *
	 * `quality` :string : 清晰度
	 */
	quality(params:AliyunPlayer_quality_Params):void

	/**
	 * `截图`
	 * ========params==========
	 *
	 * `path` :string : 截图保存路径（如果路径无效会保存失败）只支持fs://等本地路径
	 */
	snapShot(params:AliyunPlayer_snapShot_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置视频画面旋转角度，支持0°，90°，180°，270°设置，默认0°，角度按顺时针方向计算`
	 * ========params==========
	 *
	 * `rotate` :number : 画面旋转角度
	 */
	setRenderRotate(params:AliyunPlayer_setRenderRotate_Params):void

	/**
	 * `支持设置画面镜像，包括水平镜像和垂直镜像。默认为无镜像`
	 * ========params==========
	 *
	 * `mode` :string : 画面镜像模式
	 */
	setRenderMirrorMode(params:AliyunPlayer_setRenderMirrorMode_Params):void

	/**
	 * `音量设置`
	 * ========params==========
	 *
	 * `volume` :number : 音量
	 */
	setVolume(params:AliyunPlayer_setVolume_Params):void

	/**
	 * `静音设置`
	 * ========params==========
	 *
	 * `isMute` :boolean : 是否静音
	 */
	setMuteMode(params:AliyunPlayer_setMuteMode_Params):void

	/**
	 * `设置屏幕亮度`
	 * ========params==========
	 *
	 * `brightness` :number : 屏幕亮度
	 */
	setScreenBrightness(params:AliyunPlayer_setScreenBrightness_Params):void

	/**
	 * `设置显示模式`
	 * ========params==========
	 *
	 * `scalingMode` :string : 显示模式
	 */
	setDisplayMode(params:AliyunPlayer_setDisplayMode_Params):void

	/** 添加播放器监听事件*/ 
	addEventListener():void

	/** 异常监听 （错误码及错误信息请参考阿里云 [官方文档](https://help.aliyun.com/document_detail/61908.html?spm=5176.doc51992.2.41.DRtsJB#h2--6)）*/ 
	setOnErrorListener():void

	/** **注意:由于SDK限制,下载文件路径暂时仅支持一级目录如:(fs://)***/ 
	initDownloader():void

	/** **注意: 对于iOS而言，authInfo可以是过期的值,然后会回调错误的参数，这时,开始下载的接口必须传最新的authInfo,否则会下载失败***/ 
	prepareDownload():void

	/** 开始下载*/ 
	startDownload():void

	/** 停止下载*/ 
	stopDownload():void

	/** 删除下载（仅ios支持）*/ 
	removeDownload():void

	/** 是否锁屏*/ 
	isScreenLock():void

	/** 打开弹幕开关*/ 
	openBarrageSwitch():void

	/** 关闭弹幕开关*/ 
	closeBarrageSwitch():void

	/** 打开设置面板（音量，亮度面板）*/ 
	openSettingPanel():void

	/** 关闭设置面板（音量，亮度面板）*/ 
	closeSettingPanel():void

	/** 解锁屏幕*/ 
	unlockScreen():void

	/** 锁定屏幕*/ 
	lockScreen():void

	/** 设置媒体控制器隐藏与否 此处可以隐藏显示进度条*/ 
	setMediaControllerVisible():void

	/** 媒体控制器是否隐藏*/ 
	getMediaControllerVisibility():void

	/** 设置播放器为全屏*/ 
	fullScreen():void

	/** 退出全屏*/ 
	unfullScreen():void

	/** 设置全屏按钮的可见性*/ 
	setFullscreenBtnVisible():void

	/** 设置返回按钮图片*/ 
	setBackBtnImage():void

	/** 设置播放器界面的触摸监听（仅ios支持）*/ 
	addTouchListener(callback?: (ret:JSON) => void):void

	/**
	 * `设置加密下载校验文件`
	 * ========params==========
	 *
	 * `filePath` :string : 校验文件路径，支持fs路径
	 */
	setDownloadVerifyFile(params:AliyunPlayer_setDownloadVerifyFile_Params):void

}
interface AliyunPlayer_prepareToPlay_Params {
	/**使用vid+STS方式播放*/ 
	sts:JSON,

	/**使用playAuth方式播放*/ 
	playAuth:JSON,

	/**播放url*/ 
	url:string,

}

interface AliyunPlayer_seekToTime_Params {
	/**播放的指定位置*/ 
	position:number,

	/**返回值*/ 
	ret:JSON,

}

interface AliyunPlayer_setCirclePlay_Params {
	/**是否循环播放；默认false*/ 
	isCirclePlay:boolean,

}

interface AliyunPlayer_setPlaySpeed_Params {
	/**倍速*/ 
	speed:number,

}

interface AliyunPlayer_quality_Params {
	/**清晰度*/ 
	quality:string,

}

interface AliyunPlayer_snapShot_Params {
	/**截图保存路径（如果路径无效会保存失败）只支持fs://等本地路径*/ 
	path:string,

}

interface AliyunPlayer_setRenderRotate_Params {
	/**画面旋转角度*/ 
	rotate:number,

}

interface AliyunPlayer_setRenderMirrorMode_Params {
	/**画面镜像模式*/ 
	mode:string,

}

interface AliyunPlayer_setVolume_Params {
	/**音量*/ 
	volume:number,

}

interface AliyunPlayer_setMuteMode_Params {
	/**是否静音*/ 
	isMute:boolean,

}

interface AliyunPlayer_setScreenBrightness_Params {
	/**屏幕亮度*/ 
	brightness:number,

}

interface AliyunPlayer_setDisplayMode_Params {
	/**显示模式*/ 
	scalingMode:string,

}

interface AliyunPlayer_setDownloadVerifyFile_Params {
	/**校验文件路径，支持fs路径*/ 
	filePath:string,

}

interface inShare {
	/**
	 * `分享多张图片到其他应用（要求用户有安装该应用并且已登录账户，才可分享成功）`
	 * ========params==========
	 *
	 * `imgPaths` :string : 要分享的图片的路径由“,”(逗号)分隔组成的字符串；要求本地路径,相对路径如：fs://、cache://，绝对路径如：var/mobile/Containers/Data/Application/...
	 *
	 * `sendPattern` :string : （可选项）分享打开其他应用的模式
	 *
	 * `app` :string : （可选项）模块提供了几个常用的分享应用。若本参数不为空则模块忽略 packageName 和 activityName 参数。
	 *
	 * `packageName` :string : （app 参数为空时 必需）分享应用的 包名（android）/bundleId（ios）。
	 *
	 * `activityName` :string : （可选项）指定分享到应用的具体页面，比如 分享到"QQ好友"。当 sendPattern 参数为“ONLY”,而 app 参数为空时 必需传该参数。**仅Android有效**
	 *
	 * `description` :string : （可选项）对分享的描述，只在个别情况下有效，比如：分享图片到“微信朋友圈”时。
	 *
	 * `dialogTitle` :string : （可选项）设置分享选择列表的标题，当sendPattern 不为“ONLY”时有用，若不设置该参数 则用户在“始终”和“仅此一次”的方式中选择始终分享应用后，再次分享时将直接分享到上次已经选择的应用。**仅Android有效，且部分机型不支持**（如 华为Honor 6A）
	 *
	 * `forResult` :boolean : （可选项）是否采用startActivityForResult的方式打开其他应用（采用该方式打开分享完成后会在回调的ret 中返回resultCode值）。**仅Android有效**
	 *
	 * `imgSetType` :any : （可选项）用于设置图片的添加方式。**仅ios有效**
	 *
	 * `needDecodePath` :boolean : （可选项）是否将图片路径转换为绝对路径，当所传 imgPaths 参数为类似“fs://cache/xx.png”的相对路径时，须设置为true。**仅ios有效**
	 */
	shareImgsTo(params:inShare_shareImgsTo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `主要用于分享文本内容到其他应用（要求用户有安装该应用并且已登录账户，才可分享成功）`
	 * ========params==========
	 *
	 * `content` :string : 要分享的文本内容。
	 *
	 * `urlScheme` :string : （可选项）当 sendPattern 参数为“ONLY” 时，ios 通过urlScheme去打开应用（只是打开应用 不做分享操作，可以事先将分享内容复制到系统剪切板让用户自己粘贴）。**仅ios有效**
	 *
	 * `sendPattern` :string : （可选项）分享打开其他应用的模式
	 *
	 * `app` :string : （可选项）模块提供了几个常用的分享应用。若本参数不为空则模块忽略 packageName activityName 和 urlScheme参数。
	 *
	 * `packageName` :string : （app 参数为空时 必需）分享应用的 包名（android）/bundleId（ios）。
	 *
	 * `activityName` :string : （可选项）指定分享到应用的具体页面，比如 分享到"QQ好友"。当 sendPattern 参数为“ONLY”,而 app 参数为空时 必需传该参数。**仅Android有效**
	 *
	 * `dialogTitle` :string : （可选项）设置分享选择列表的标题，当sendPattern 不为“ONLY”时有用，若不设置该参数 则用户在“始终”和“仅此一次”的方式中选择始终分享应用后，再次分享时将直接分享到上次已经选择的应用。**仅Android有效，且部分机型不支持**（如 华为Honor 6A）
	 *
	 * `forResult` :boolean : （可选项）是否采用startActivityForResult的方式打开其他应用（采用该方式打开分享完成后会在回调的ret 中返回resultCode值）。**仅Android有效**
	 */
	shareTextTo(params:inShare_shareTextTo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用于**Android**手机中获取当前已安装的支持多图/文本分享的应用信息（包名/支持分享类型的页面类路径）`
	 * ========params==========
	 *
	 * `type` :string : 支持类型
	 */
	getSupportedApp(params:inShare_getSupportedApp_Params, callback?: (ret:JSON) => void):void

}
interface inShare_shareImgsTo_Params {
	/**要分享的图片的路径由“,”(逗号)分隔组成的字符串；要求本地路径,相对路径如：fs://、cache://，绝对路径如：var/mobile/Containers/Data/Application/...*/ 
	imgPaths:string,

	/**（可选项）分享打开其他应用的模式*/ 
	sendPattern?:string,

	/**（可选项）模块提供了几个常用的分享应用。若本参数不为空则模块忽略 packageName 和 activityName 参数。*/ 
	app?:string,

	/**（app 参数为空时 必需）分享应用的 包名（android）/bundleId（ios）。*/ 
	packageName:string,

	/**（可选项）指定分享到应用的具体页面，比如 分享到"QQ好友"。当 sendPattern 参数为“ONLY”,而 app 参数为空时 必需传该参数。**仅Android有效***/ 
	activityName?:string,

	/**（可选项）对分享的描述，只在个别情况下有效，比如：分享图片到“微信朋友圈”时。*/ 
	description?:string,

	/**（可选项）设置分享选择列表的标题，当sendPattern 不为“ONLY”时有用，若不设置该参数 则用户在“始终”和“仅此一次”的方式中选择始终分享应用后，再次分享时将直接分享到上次已经选择的应用。**仅Android有效，且部分机型不支持**（如 华为Honor 6A）*/ 
	dialogTitle?:string,

	/**（可选项）是否采用startActivityForResult的方式打开其他应用（采用该方式打开分享完成后会在回调的ret 中返回resultCode值）。**仅Android有效***/ 
	forResult?:boolean,

	/**（可选项）用于设置图片的添加方式。**仅ios有效***/ 
	imgSetType?:any,

	/**（可选项）是否将图片路径转换为绝对路径，当所传 imgPaths 参数为类似“fs://cache/xx.png”的相对路径时，须设置为true。**仅ios有效***/ 
	needDecodePath?:boolean,

}

interface inShare_shareTextTo_Params {
	/**要分享的文本内容。*/ 
	content:string,

	/**（可选项）当 sendPattern 参数为“ONLY” 时，ios 通过urlScheme去打开应用（只是打开应用 不做分享操作，可以事先将分享内容复制到系统剪切板让用户自己粘贴）。**仅ios有效***/ 
	urlScheme?:string,

	/**（可选项）分享打开其他应用的模式*/ 
	sendPattern?:string,

	/**（可选项）模块提供了几个常用的分享应用。若本参数不为空则模块忽略 packageName activityName 和 urlScheme参数。*/ 
	app?:string,

	/**（app 参数为空时 必需）分享应用的 包名（android）/bundleId（ios）。*/ 
	packageName:string,

	/**（可选项）指定分享到应用的具体页面，比如 分享到"QQ好友"。当 sendPattern 参数为“ONLY”,而 app 参数为空时 必需传该参数。**仅Android有效***/ 
	activityName?:string,

	/**（可选项）设置分享选择列表的标题，当sendPattern 不为“ONLY”时有用，若不设置该参数 则用户在“始终”和“仅此一次”的方式中选择始终分享应用后，再次分享时将直接分享到上次已经选择的应用。**仅Android有效，且部分机型不支持**（如 华为Honor 6A）*/ 
	dialogTitle?:string,

	/**（可选项）是否采用startActivityForResult的方式打开其他应用（采用该方式打开分享完成后会在回调的ret 中返回resultCode值）。**仅Android有效***/ 
	forResult?:boolean,

}

interface inShare_getSupportedApp_Params {
	/**支持类型*/ 
	type:string,

}

interface vivoPush {
	/** 开启推送*/ 
	turnOnPush():void

	/** 关闭推送*/ 
	turnOffPush():void

	/** 设置别名*/ 
	bindAlias():void

	/** 解除别名*/ 
	unBindAlias():void

	/** 设置标签*/ 
	setTopic():void

	/** 删除标签*/ 
	delTopic():void

	/** 获取已设置标签*/ 
	getTopics():void

	/** 获取已设置的别名*/ 
	getAlias():void

	/** 获取注册id*/ 
	getRegId():void

	/** 设置regId变化监听*/ 
	setRegIdListener():void

	/** 消息点击监听*/ 
	notificationClickListener():void

}
interface ccAPI {
	/**
	 * `视频录制`
	 * ========params==========
	 *
	 * `userId` :string : 账号ID。
	 *
	 * `apiKey` :string : 秘钥。
	 *
	 * `videoTitle` :string : 视频标题。
	 *
	 * `videoDescription` :string : 视频描述。
	 *
	 * `videoTag` :string : 视频标签。
	 *
	 * `videoPath` :string : 视频路径 ； 支持widget://和fs://（android仅支持fs）
	 */
	upLoad(params:ccAPI_upLoad_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停上传`
	 * ========params==========
	 *
	 * `videoId` :string : 视频id。
	 */
	pause(params:ccAPI_pause_Params):void

	/**
	 * `继续上传`
	 * ========params==========
	 *
	 * `videoId` :string : 视频id。
	 */
	continue(params:ccAPI_continue_Params):void

	/**
	 * `删除上传`
	 * ========params==========
	 *
	 * `videoId` :string : 视频id。
	 */
	delete(params:ccAPI_delete_Params):void

	/**
	 * `打开播放器`
	 * ========params==========
	 *
	 * `userId` :string : 用户id
	 *
	 * `videoId` :string : 视频id
	 *
	 * `key` :string : key值
	 *
	 * `verificationCode` :string : 验证信息（仅android支持）
	 *
	 * `support` :string : 获取播放地址时，若账号支持hls，填@"1"会返回m3u8下载地址。获取下载地址时，请填@"0"（仅iOS支持）
	 *
	 * `mediatype` :string : 1为视频 2为音频 0为视频+音频 若不传该参数默认为视频
	 *
	 * `setOfflineVideoPath` :string : （可选项）加密视频文件地址（仅android支持）
	 *
	 * `audioPlay` :boolean : （可选项）是否自动播放（仅android支持）
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `looping` :boolean : 是否循环播放（仅iOS支持）
	 *
	 * `muted` :boolean : 是否静音（仅iOS支持）
	 *
	 * `videoProtect` :boolean : 是否开启防录屏
	 *
	 * `playInBackground` :boolean : 是否允许后台播放（仅iOS支持）
	 *
	 * `timeOutLoad` :number : 视频加载超时时间（仅iOS支持）
	 *
	 * `isLocalVideo` :boolean : 是否播放本地视频；（true为本地视频，false为网络视频）（仅iOS支持）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）（仅android支持）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动（仅android支持）
	 */
	openPlayer(params:ccAPI_openPlayer_Params, callback?: (ret:JSON) => void):void

	/** 关闭播放器*/ 
	close():void

	/** 暂停播放器*/ 
	playerPause():void

	/** 播放播放器*/ 
	playerPlay():void

	/** 重播*/ 
	repeatPlay():void

	/**
	 * `设置播放倍速`
	 * ========params==========
	 *
	 * `rate` :string : 播放的倍速
	 */
	setPlayerRate(params:ccAPI_setPlayerRate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拖拽到XX秒`
	 * ========params==========
	 *
	 * `time` :number : 拖拽到XX秒播放
	 */
	seekTo(params:ccAPI_seekTo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置音量`
	 * ========params==========
	 *
	 * `volume` :string : 音量值
	 */
	setVolume(params:ccAPI_setVolume_Params, callback?: (ret:JSON) => void):void

	/** 播放器全屏*/ 
	full():void

	/** 播放器取消全屏*/ 
	cancleFull():void

	/**
	 * `下载`
	 * ========params==========
	 *
	 * `userId` :string : 用户id
	 *
	 * `videoId` :string : 视频id
	 *
	 * `key` :string : key值
	 *
	 * `verificationCode` :string : （可选项）验证信息（仅android支持）
	 *
	 * `downloadPath` :string : 存储路径，支持fs,原生路径，例：‘fs://’（仅android支持）
	 *
	 * `fileName` :string : 文件名（仅android支持）
	 *
	 * `downloadMode` :number : （可选项）下载模式（仅android支持）
	 *
	 * `definition` :number : （可选项）要下载的清晰度（仅android支持）
	 */
	downLoadVideo(params:ccAPI_downLoadVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停下载`
	 * ========params==========
	 *
	 * `videoId` :string : 视频id
	 */
	downLoadPause(params:ccAPI_downLoadPause_Params):void

	/**
	 * `恢复下载`
	 * ========params==========
	 *
	 * `videoId` :string : 视频id
	 */
	downLoadResume(params:ccAPI_downLoadResume_Params):void

	/**
	 * `删除全部任务`
	 * ========params==========
	 *
	 * `videoId` :string : 视频id
	 */
	deleteAllDownload(params:ccAPI_deleteAllDownload_Params):void

}
interface ccAPI_upLoad_Params {
	/**账号ID。*/ 
	userId:string,

	/**秘钥。*/ 
	apiKey:string,

	/**视频标题。*/ 
	videoTitle:string,

	/**视频描述。*/ 
	videoDescription:string,

	/**视频标签。*/ 
	videoTag:string,

	/**视频路径 ； 支持widget://和fs://（android仅支持fs）*/ 
	videoPath:string,

}

interface ccAPI_pause_Params {
	/**视频id。*/ 
	videoId:string,

}

interface ccAPI_continue_Params {
	/**视频id。*/ 
	videoId:string,

}

interface ccAPI_delete_Params {
	/**视频id。*/ 
	videoId:string,

}

interface ccAPI_openPlayer_Params {
	/**用户id*/ 
	userId:string,

	/**视频id*/ 
	videoId:string,

	/**key值*/ 
	key:string,

	/**验证信息（仅android支持）*/ 
	verificationCode:string,

	/**获取播放地址时，若账号支持hls，填@"1"会返回m3u8下载地址。获取下载地址时，请填@"0"（仅iOS支持）*/ 
	support:string,

	/**1为视频 2为音频 0为视频+音频 若不传该参数默认为视频*/ 
	mediatype:string,

	/**（可选项）加密视频文件地址（仅android支持）*/ 
	setOfflineVideoPath?:string,

	/**（可选项）是否自动播放（仅android支持）*/ 
	audioPlay?:boolean,

	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**是否循环播放（仅iOS支持）*/ 
	looping:boolean,

	/**是否静音（仅iOS支持）*/ 
	muted:boolean,

	/**是否开启防录屏*/ 
	videoProtect:boolean,

	/**是否允许后台播放（仅iOS支持）*/ 
	playInBackground:boolean,

	/**视频加载超时时间（仅iOS支持）*/ 
	timeOutLoad:number,

	/**是否播放本地视频；（true为本地视频，false为网络视频）（仅iOS支持）*/ 
	isLocalVideo:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）（仅android支持）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动（仅android支持）*/ 
	fixed?:boolean,

}

interface ccAPI_setPlayerRate_Params {
	/**播放的倍速*/ 
	rate:string,

}

interface ccAPI_seekTo_Params {
	/**拖拽到XX秒播放*/ 
	time:number,

}

interface ccAPI_setVolume_Params {
	/**音量值*/ 
	volume:string,

}

interface ccAPI_downLoadVideo_Params {
	/**用户id*/ 
	userId:string,

	/**视频id*/ 
	videoId:string,

	/**key值*/ 
	key:string,

	/**（可选项）验证信息（仅android支持）*/ 
	verificationCode?:string,

	/**存储路径，支持fs,原生路径，例：‘fs://’（仅android支持）*/ 
	downloadPath:string,

	/**文件名（仅android支持）*/ 
	fileName:string,

	/**（可选项）下载模式（仅android支持）*/ 
	downloadMode?:number,

	/**（可选项）要下载的清晰度（仅android支持）*/ 
	definition?:number,

}

interface ccAPI_downLoadPause_Params {
	/**视频id*/ 
	videoId:string,

}

interface ccAPI_downLoadResume_Params {
	/**视频id*/ 
	videoId:string,

}

interface ccAPI_deleteAllDownload_Params {
	/**视频id*/ 
	videoId:string,

}

interface uiFaceIDPlus {
}
interface tencentAds {
	/**
	 * `打开横幅广告`
	 * ========params==========
	 *
	 * `x` :number : （可选项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `y` :number : （可选项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `w` :number : （可选项）模块的宽度；页面从x位置开始自动充满所属的 Window 或 Frame 的宽度
	 *
	 * `refresh` :string : （可选项）横幅刷新时间
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定window或frame
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	showBanner(params:tencentAds_showBanner_Params, callback?: (ret:JSON) => void):void

	/** 关闭横幅广告*/ 
	closeBanner():void

	/** 展示插屏广告，有/无遮罩（可选）*/ 
	showInterstitialAD(callback?: (ret:JSON) => void):void

	/** 关闭插屏广告*/ 
	closeInterstitialAD():void

	/** 展示开屏广告*/ 
	showSplash(callback?: (ret:JSON) => void):void

	/** 以单独的Activity展示开屏广告*/ 
	showSplashActivity(callback?: (ret:JSON) => void):void

	/** - 类型：数字类型*/ 
	loadNative(callback?: (ret:JSON) => void):void

	/** - 类型：数字类型*/ 
	showNative():void

	/** 关闭横幅广告*/ 
	closeNative():void

	/** 预加载激励视频广告*/ 
	loadRewardVideoAD():void

	/** 展示已经预加载的激励视频广告*/ 
	showRewardVideoAD():void

}
interface tencentAds_showBanner_Params {
	/**（可选项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）*/ 
	x?:number,

	/**（可选项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）*/ 
	y?:number,

	/**（可选项）模块的宽度；页面从x位置开始自动充满所属的 Window 或 Frame 的宽度*/ 
	w?:number,

	/**（可选项）横幅刷新时间*/ 
	refresh?:string,

	/**（可选项）模块添加到指定window或frame*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface tencentYLH {
	/**
	 * `打开开屏广告`
	 * ========params==========
	 *
	 * `appId` :string : （必填）腾讯优量汇（原广点通）申请的应用appId
	 *
	 * `posId` :string : （必填）腾讯优量汇（原广点通）申请的广告位id
	 *
	 * `canJump` :boolean : （选填）用户点击跳过或者广告倒计时结束，是否自动关闭广告。如设置为false，可以收到回调dismiss后使用closeSplash关闭，并进行其他操作，此接口可以留给开发者做进一步调整业务流程。
	 */
	openSplash(params:tencentYLH_openSplash_Params, callback?: (ret:JSON) => void):void

	/** 关闭开屏广告*/ 
	closeSplash():void

	/**
	 * `打开横幅广告`
	 * ========params==========
	 *
	 * `appId` :string : （必填）腾讯优量汇（原广点通）申请的应用appId
	 *
	 * `posId` :string : （必填）腾讯优量汇（原广点通）申请的广告位id
	 *
	 * `rect` :any : 广告位置
	 *
	 * `frameName` :string : （选填）需要绑定的页面，仅frame有效。window不能传，并且window下只能固定，不能滚动
	 *
	 * `fixed` :boolean : （选填）是否需要跟随页面滚动,true-不滚动，false-跟随frame滚动，仅frameName设置了frame的情况有效
	 *
	 * `refreshTime` :number : （选填）banner广告刷新的时间（秒），默认为30，必须大于30
	 */
	openBanner(params:tencentYLH_openBanner_Params, callback?: (ret:JSON) => void):void

	/** 关闭当前页面的横幅banner广告*/ 
	closeBanner():void

	/**
	 * `打开插屏广告（含popUp类型插屏广告）`
	 * ========params==========
	 *
	 * `appId` :string : （必填）腾讯优量汇（原广点通）申请的应用appId
	 *
	 * `posId` :string : （必填）腾讯优量汇（原广点通）申请的广告位id
	 *
	 * `popUp` :boolean : （选填）是否是popUp类型（背景页面是否滚动），true-背景页面仍可滚动，false-背景页面不可滚动
	 */
	openInterstitial(params:tencentYLH_openInterstitial_Params, callback?: (ret:JSON) => void):void

	/** 关闭当前页面的插屏广告（含popUp类型插屏广告）*/ 
	closeInterstitial():void

	/**
	 * `打开原生信息流广告（模板渲染）`
	 * ========params==========
	 *
	 * `appId` :string : （必填）腾讯优量汇（原广点通）申请的应用appId
	 *
	 * `posId` :string : （必填）腾讯优量汇（原广点通）申请的广告位id
	 *
	 * `rect` :any : 广告位置
	 *
	 * `frameName` :string : （选填）需要绑定的页面，仅frame有效。window不能传，并不能随window滚动
	 *
	 * `fixed` :boolean : （选填）是否需要跟随页面滚动,true-不滚动，false-跟随frame滚动，仅当frameName传frame值时有效
	 *
	 * `tag` :number : （选填）指定当前广告位的一个标记，可用于adjustNative调整位置时使用。
	 *
	 * `videoPolicy` :string : （选填）当获取的广告为视频时，播放的策略。"always"-总是自动播放，"wifi"-仅wifi情况下自动播放，"manual"-任何时候都是用户手动点击播放。
	 */
	openNative(params:tencentYLH_openNative_Params, callback?: (ret:JSON) => void):void

	/** 关闭当前页面的所有原生信息流广告（模板渲染）*/ 
	closeNative():void

	/**
	 * `调整原生信息流广告的位置（模板渲染）`
	 * ========params==========
	 *
	 * `tag` :number : （必填）指定要调整位置广告位的标记（在openNative中打开广告时，设置的tag）。
	 *
	 * `rect` :any : 调整的广告新位置
	 */
	adjustNative(params:tencentYLH_adjustNative_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载、展示、下载并展示激励视频`
	 * ========params==========
	 *
	 * `appId` :string : （必填）腾讯优量汇（原广点通）申请的应用appId
	 *
	 * `posId` :string : （必填）腾讯优量汇（原广点通）申请的广告位id
	 *
	 * `option` :string : （必填）download-下载视频， show-展示视频， downloadShow-下载并展示视频。如果没有下载视频，直接展示将会失败。正常的流程是：先下载视频，监听到视频已经缓存videoCached后，再展示视频。如果开发者想省事，可以直接使用downloadShow，下载后即可马上展示视频。
	 */
	openRewardVideo(params:tencentYLH_openRewardVideo_Params, callback?: (ret:JSON) => void):void

}
interface tencentYLH_openSplash_Params {
	/**（必填）腾讯优量汇（原广点通）申请的应用appId*/ 
	appId:string,

	/**（必填）腾讯优量汇（原广点通）申请的广告位id*/ 
	posId:string,

	/**（选填）用户点击跳过或者广告倒计时结束，是否自动关闭广告。如设置为false，可以收到回调dismiss后使用closeSplash关闭，并进行其他操作，此接口可以留给开发者做进一步调整业务流程。*/ 
	canJump:boolean,

}

interface tencentYLH_openBanner_Params {
	/**（必填）腾讯优量汇（原广点通）申请的应用appId*/ 
	appId:string,

	/**（必填）腾讯优量汇（原广点通）申请的广告位id*/ 
	posId:string,

	/**广告位置*/ 
	rect:any,

	/**（选填）需要绑定的页面，仅frame有效。window不能传，并且window下只能固定，不能滚动*/ 
	frameName:string,

	/**（选填）是否需要跟随页面滚动,true-不滚动，false-跟随frame滚动，仅frameName设置了frame的情况有效*/ 
	fixed:boolean,

	/**（选填）banner广告刷新的时间（秒），默认为30，必须大于30*/ 
	refreshTime:number,

}

interface tencentYLH_openInterstitial_Params {
	/**（必填）腾讯优量汇（原广点通）申请的应用appId*/ 
	appId:string,

	/**（必填）腾讯优量汇（原广点通）申请的广告位id*/ 
	posId:string,

	/**（选填）是否是popUp类型（背景页面是否滚动），true-背景页面仍可滚动，false-背景页面不可滚动*/ 
	popUp:boolean,

}

interface tencentYLH_openNative_Params {
	/**（必填）腾讯优量汇（原广点通）申请的应用appId*/ 
	appId:string,

	/**（必填）腾讯优量汇（原广点通）申请的广告位id*/ 
	posId:string,

	/**广告位置*/ 
	rect:any,

	/**（选填）需要绑定的页面，仅frame有效。window不能传，并不能随window滚动*/ 
	frameName:string,

	/**（选填）是否需要跟随页面滚动,true-不滚动，false-跟随frame滚动，仅当frameName传frame值时有效*/ 
	fixed:boolean,

	/**（选填）指定当前广告位的一个标记，可用于adjustNative调整位置时使用。*/ 
	tag:number,

	/**（选填）当获取的广告为视频时，播放的策略。"always"-总是自动播放，"wifi"-仅wifi情况下自动播放，"manual"-任何时候都是用户手动点击播放。*/ 
	videoPolicy:string,

}

interface tencentYLH_adjustNative_Params {
	/**（必填）指定要调整位置广告位的标记（在openNative中打开广告时，设置的tag）。*/ 
	tag:number,

	/**调整的广告新位置*/ 
	rect:any,

}

interface tencentYLH_openRewardVideo_Params {
	/**（必填）腾讯优量汇（原广点通）申请的应用appId*/ 
	appId:string,

	/**（必填）腾讯优量汇（原广点通）申请的广告位id*/ 
	posId:string,

	/**（必填）download-下载视频， show-展示视频， downloadShow-下载并展示视频。如果没有下载视频，直接展示将会失败。正常的流程是：先下载视频，监听到视频已经缓存videoCached后，再展示视频。如果开发者想省事，可以直接使用downloadShow，下载后即可马上展示视频。*/ 
	option:string,

}

interface aliPayHK {
	/**
	 * `调用支付宝客户端支付`
	 * ========params==========
	 *
	 * `orderString` :string : 支付信息（由订单信息，签名，签名类型组成），支付信息生成（此过程可放在服务器端）可参照支付宝官方文档[请求参数说明](https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.x7kkCI&treeId=204&articleId=105465&docType=1)
	 */
	pay(params:aliPayHK_pay_Params, callback?: (ret:JSON) => void):void

	/**
	 * `支付宝授权登录，**参数及其回调详细说明参考 [App支付宝登录授权SDK调用方法](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.GRGqgT&treeId=218&articleId=105325&docType=1)**`
	 * ========params==========
	 *
	 * `authInfoStr` :string : ：登录信息字符串，**参数及其签名详细说明参考 [App支付宝登录授权SDK调用方法](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.GRGqgT&treeId=218&articleId=105325&docType=1)**
	 */
	auth(params:aliPayHK_auth_Params, callback?: (ret:JSON) => void):void

}
interface aliPayHK_pay_Params {
	/**支付信息（由订单信息，签名，签名类型组成），支付信息生成（此过程可放在服务器端）可参照支付宝官方文档[请求参数说明](https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.x7kkCI&treeId=204&articleId=105465&docType=1)*/ 
	orderString:string,

}

interface aliPayHK_auth_Params {
	/**：登录信息字符串，**参数及其签名详细说明参考 [App支付宝登录授权SDK调用方法](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.GRGqgT&treeId=218&articleId=105325&docType=1)***/ 
	authInfoStr:string,

}

interface superID {
}
interface UIPLShortVideo {
	/** 授权 （暂仅支持Android）*/ 
	auth():void

	/**
	 * `打开视频录像机`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `resPath` :string : 美颜资源的路径；仅支持 fs://
	 *
	 * `modelFileDirPath` :string : 算法模型文件所在目录路径，要求本地路径。如：widget://res/ModelResource.bundle
	 *
	 * `licenseFilePath` :string : 授权文件路径，要求本地路径。如：widget://res/LicenseBag.bundle/qiniu_20200214_20210213_com.qbox.PLShortVideoKit.ByteDance.Demo_qiniu_v3.4.2.licbag
	 *
	 * `maxDuration` :number : （可选项）视频录制的最大时长，单位为秒
	 *
	 * `minDuration` :number : （可选项）视频录制的最短时间，单位为秒；
	 *
	 * `beautifyModeOn` :boolean : （可选项）是否开启美颜
	 *
	 * `bgmPath` :string : 背景音乐路径，要求本地路径（fs://、widget://,android仅支持fs）
	 *
	 * `token` :string : 七牛云存储上传token
	 *
	 * `domain` :string : 七牛云存储上传域名
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openView(params:UIPLShortVideo_openView_Params, callback?: (ret:JSON) => void):void

	/** 关闭视频录像机*/ 
	closeView():void

	/**
	 * `截帧`
	 * ========params==========
	 *
	 * `savePath` :string : 保存路径（仅支持fs://）
	 */
	screenshot(params:UIPLShortVideo_screenshot_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置背景音乐`
	 * ========params==========
	 *
	 * `bgmPath` :string : 背景音乐路径（fs://、widget://,android仅支持fs）
	 */
	setBackgroundMusic(params:UIPLShortVideo_setBackgroundMusic_Params):void

	/** 取消背景音乐*/ 
	closeBackgroundMusic():void

	/**
	 * `设置视频录制时间`
	 * ========params==========
	 *
	 * `min` :number : 最短录制时间（单位：秒）
	 *
	 * `max` :number : 最长录制时间
	 */
	setRecordDuration(params:UIPLShortVideo_setRecordDuration_Params):void

	/**
	 * `设置相机模式`
	 * ========params==========
	 *
	 * `mode` :string : 相机模式
	 */
	setCameraMode(params:UIPLShortVideo_setCameraMode_Params):void

	/** 关闭上传页面*/ 
	closeUploadPage():void

}
interface UIPLShortVideo_openView_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**美颜资源的路径；仅支持 fs://*/ 
	resPath:string,

	/**算法模型文件所在目录路径，要求本地路径。如：widget://res/ModelResource.bundle*/ 
	modelFileDirPath:string,

	/**授权文件路径，要求本地路径。如：widget://res/LicenseBag.bundle/qiniu_20200214_20210213_com.qbox.PLShortVideoKit.ByteDance.Demo_qiniu_v3.4.2.licbag*/ 
	licenseFilePath:string,

	/**（可选项）视频录制的最大时长，单位为秒*/ 
	maxDuration?:number,

	/**（可选项）视频录制的最短时间，单位为秒；*/ 
	minDuration?:number,

	/**（可选项）是否开启美颜*/ 
	beautifyModeOn?:boolean,

	/**背景音乐路径，要求本地路径（fs://、widget://,android仅支持fs）*/ 
	bgmPath:string,

	/**七牛云存储上传token*/ 
	token:string,

	/**七牛云存储上传域名*/ 
	domain:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface UIPLShortVideo_screenshot_Params {
	/**保存路径（仅支持fs://）*/ 
	savePath:string,

}

interface UIPLShortVideo_setBackgroundMusic_Params {
	/**背景音乐路径（fs://、widget://,android仅支持fs）*/ 
	bgmPath:string,

}

interface UIPLShortVideo_setRecordDuration_Params {
	/**最短录制时间（单位：秒）*/ 
	min:number,

	/**最长录制时间*/ 
	max:number,

}

interface UIPLShortVideo_setCameraMode_Params {
	/**相机模式*/ 
	mode:string,

}

interface ccbPay {
	/**
	 * `给商户订单支付功能，该方法整合了调用手机银行APP支付和建行H5页面支付。客户端如安装建行手机银行APP，则优先调用手机银行APP进行支付交易，否则将调用建行H5支付界面完成支付（适用于支付方案一）。`
	 * ========params==========
	 *
	 * `orderStr` :string : 根据《商户下单支付参数》文档中字段及相应的值组成app支付请求参数字符串，主要包含商户的订单信息，key=value形式，以&连接。如@"MERCHANTID=%@&POSID=%@&BRANCHID=%@&ORDERID=%@&PAYMENT=%@&CURCODE=%@&TXCODE=%@&REMARK1=%@&REMARK2=%@&TYPE=%@&PUB=%@&GATEWAY=%@&CLIENTIP=%@&REGINFO=%@&PROINFO=%@&REFERER=%@&THIRDAPPINFO=%@"拼接字符串再进行MD5加密得到字段MAC。
	 */
	payOrder(params:ccbPay_payOrder_Params, callback?: (ret:JSON) => void):void

	/** 提供给商户订单支付功能，该方法将判断商户是否安装建行手机APP，如有安装则进行APP跳转支付，否则提醒商户未安装建行手机APP（适用于支付方案一）。*/ 
	payAppOrder(callback?: (ret:JSON) => void):void

	/** 提供给商户订单支付功能，该方法将使用建行H5支付界面完成交易（适用于支付方案一）。*/ 
	payUrlOrder(callback?: (ret:JSON) => void):void

	/** 给商户订单支付功能，该方法整合了调用手机银行APP支付和建行H5页面支付。客户端如安装建行手机银行APP，则优先调用手机银行APP进行支付交易，否则将调用建行H5支付界面完成支付（适用于支付方案二）。*/ 
	payOrderParams():void

	/** 提供给商户订单支付功能，该方法将判断商户是否安装建行手机APP，如有安装则进行APP跳转支付，否则提醒商户未安装建行手机APP（适用于支付方案二）。*/ 
	payAppOrderParams(callback?: (ret:JSON) => void):void

	/** 提供给商户订单支付功能，该方法将使用建行H5支付界面完成交易（适用于支付方案二）。*/ 
	payUrlOrderParams(callback?: (ret:JSON) => void):void

}
interface ccbPay_payOrder_Params {
	/**根据《商户下单支付参数》文档中字段及相应的值组成app支付请求参数字符串，主要包含商户的订单信息，key=value形式，以&连接。如@"MERCHANTID=%@&POSID=%@&BRANCHID=%@&ORDERID=%@&PAYMENT=%@&CURCODE=%@&TXCODE=%@&REMARK1=%@&REMARK2=%@&TYPE=%@&PUB=%@&GATEWAY=%@&CLIENTIP=%@&REGINFO=%@&PROINFO=%@&REFERER=%@&THIRDAPPINFO=%@"拼接字符串再进行MD5加密得到字段MAC。*/ 
	orderStr:string,

}

interface xGprinter {
	/** 连接打印机*/ 
	connect():void

	/** 打印测试页*/ 
	printTest():void

	/**
	 * `打印自定义数据（多行文本）`
	 * ========params==========
	 *
	 * `project` :Array : （必填项）打印联式名称。
	 *
	 * `title` :string : （必填项）票据抬头
	 *
	 * `rows` :Array : （必填项）票据每行内容及样式。
	 *
	 * `isSubject` :boolean : （必填项）是否需要打印联式名称。
	 */
	printMultipleText(params:xGprinter_printMultipleText_Params):void

	/** 打印自定义数据（打印图片）*/ 
	printImage(callback?: (ret:JSON) => void):void

}
interface xGprinter_printMultipleText_Params {
	/**（必填项）打印联式名称。*/ 
	project:Array,

	/**（必填项）票据抬头*/ 
	title:string,

	/**（必填项）票据每行内容及样式。*/ 
	rows:Array,

	/**（必填项）是否需要打印联式名称。*/ 
	isSubject:boolean,

}

interface nuanceSpeechRecognizer {
	/** 初始化模块nuance*/ 
	createNuance(callback?: (ret:JSON) => void):void

	/**
	 * `开始语音识别，更多语言请查询（ASR）：<https://developer.nuance.com/public/index.php?task=supportedLanguages/>`
	 * ========params==========
	 *
	 * `language` :string : （可选项）识别语言
	 */
	startTransaction(params:nuanceSpeechRecognizer_startTransaction_Params, callback?: (ret:JSON) => void):void

	/** 停止识别，把录音上传到服务器进行验证，验证成功后返回识别文字*/ 
	stopRecording(callback?: (ret:JSON) => void):void

	/** 根据文字转出为语音进行播放,更多语言请查询（TTS）：<https://developer.nuance.com/public/index.php?task=supportedLanguages/>*/ 
	startSpeech(callback?: (ret:JSON) => void):void

	/** 销毁模块nuance*/ 
	destroyNuance():void

}
interface nuanceSpeechRecognizer_startTransaction_Params {
	/**（可选项）识别语言*/ 
	language?:string,

}

interface smsVerification {
	/**
	 * `请求云之讯服务器，发送验证码到用户客户端`
	 * ========params==========
	 *
	 * `softVersion` :string : 云之讯REST API版本号
	 *
	 * `accountSid` :string : 账户Id，注册云之讯官网，在控制台中即可获取此参数
	 *
	 * `accountToken` :string : 账户授权令牌，注册云之讯官网，在控制台中即可获取此参数
	 *
	 * `body` :JSON : 发送短信参数配置
	 */
	sendMessage(params:smsVerification_sendMessage_Params, callback?: (ret:JSON) => void):void

}
interface smsVerification_sendMessage_Params {
	/**云之讯REST API版本号*/ 
	softVersion:string,

	/**账户Id，注册云之讯官网，在控制台中即可获取此参数*/ 
	accountSid:string,

	/**账户授权令牌，注册云之讯官网，在控制台中即可获取此参数*/ 
	accountToken:string,

	/**发送短信参数配置*/ 
	body:JSON,

}

interface txLiteAV {
	/**
	 * `设置授权`
	 * ========params==========
	 *
	 * `licenceURL` :string : （必填项）从腾讯云平台获取的LicenseUrl。[参考腾讯官方申请说明](https://cloud.tencent.com/document/product/584/20333#1.-.E7.94.B3.E8.AF.B7.E6.B5.8B.E8.AF.95license)
	 *
	 * `licenceKey` :string : （必填项）从腾讯云平台获取的Key。[参考腾讯官方申请说明](https://cloud.tencent.com/document/product/584/20333#1.-.E7.94.B3.E8.AF.B7.E6.B5.8B.E8.AF.95license)
	 */
	setLicence(params:txLiteAV_setLicence_Params):void

	/**
	 * `开始画面预览`
	 * ========params==========
	 *
	 * `rect` :JSON : (可选项）预览画面的位置及长宽
	 *
	 * `videoResolution` :number : （可选项）录制分辨率类型定义，如果设备不支持当前分辨率录制，SDK会默认采取低一级别的分辨率录制
	 *
	 * `videoFPS` :number : （可选项）自定义fps   15~30
	 *
	 * `videoBitratePIN` :number : （可选项）自定义码率，建议值：600~12000 (SDK上限不再做限制) ，单位kbps/s,这里需要注意的是，这里设置的码率只是给编码器一个参考值，实际出来视频的码率是会在这个参考值上下波动的
	 *
	 * `frontCamera` :boolean : （可选项）是否是前置摄像头
	 *
	 * `encodeMode` :number : （可选项）编码方式   （默认VBR编码方式，相同码率下能获得更好的画面质量）（仅iOS支持）
	 *
	 * `enableBFrame` :boolean : （可选项）是否开启B帧 （默认开启，相同码率下能获得更好的画面质量)（仅iOS支持）
	 *
	 * `enableAEC` :boolean : （可选项）是否开启回声消除（默认开启），开启回声消除，可以录制人声，BGM，人声+BGM （注意：录制中开启回声消除，BGM的播放模式是手机通话模式，这个模式下系统静音会失效，而视频播放预览走的是媒体播放模式，播放模式的不同会导致录制和预览在相同系统音量下播放声音大小有一定区别），关闭回声消除，可以录制人声、BGM，耳机模式下可以录制人声 + BGM ，外放模式下不能录制人声+BGM
	 *
	 * `GOP` :number : （可选项）关键帧间隔（1 ~10），单位秒
	 *
	 * `audioSampleRate` :number : （可选项）音频采样率
	 *
	 * `minDuration` :number : （可选项）设置视频录制的最小时长，大于0，单位秒
	 *
	 * `maxDuration` :number : （可选项）设置视频录制的最大时长，建议不超过300，单位秒
	 *
	 * `touchFocus` :boolean : （可选项）是否触摸聚焦（仅android支持）
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	startCameraPreview(params:txLiteAV_startCameraPreview_Params, callback?: (ret:JSON) => void):void

	/** 显示预览视图*/ 
	showPreviewView():void

	/** 隐藏预览视图*/ 
	hidePreviewView():void

	/** 结束画面预览*/ 
	stopCameraPreview():void

	/**
	 * `开始录制`
	 * ========params==========
	 *
	 * `videoPath` :any : 视频文件输出路径，支持fs、widget （android不支持widget路径）
	 *
	 * `coverPath` :any : 封面文件输出路径，支持fs、widget（android不支持widget路径）
	 *
	 * `videoPartsFolder` :any : 分片视频存储目录路径，支持fs、widget（android不支持widget路径）
	 */
	startRecord(params:txLiteAV_startRecord_Params, callback?: (ret:JSON) => void):void

	/** 暂停录制*/ 
	pauseRecord():void

	/** 恢复录制*/ 
	resumeRecord():void

	/** 结束录制*/ 
	stopRecord():void

	/**
	 * `切换视频录制分辨率,startCamera 之后调用有效，注意：需要在startRecord 之前设置，录制过程中设置无效`
	 * ========params==========
	 *
	 * `videoResolution` :number : （可选项）视频录制分辨率
	 */
	setVideoResolution(params:txLiteAV_setVideoResolution_Params):void

	/**
	 * `切换视频录制码率，注意：需要在startRecord 之前设置，录制过程中设置无效`
	 * ========params==========
	 *
	 * `videoBitratePIN` :number : （可选项）自定义码率，建议值：600~12000 (SDK上限不再做限制) ，单位kbps/s,这里需要注意的是，这里设置的码率只是给编码器一个参考值，实际出来视频的码率是会在这个参考值上下波动的
	 */
	setVideoBitrate(params:txLiteAV_setVideoBitrate_Params):void

	/** 获取最大焦距（仅android支持）*/ 
	getMaxZoom():void

	/**
	 * `调整焦距，startCamera 之后调用有效，取值范围 1~5 ，当为1的时候为最远视角（正常镜头），当为5的时候为最近视角（放大镜头），这里最大值推荐为5，超过5后视频数据会变得模糊不清；android取值范围为 0-getMaxZoom()接口返回值`
	 * ========params==========
	 *
	 * `zoom` :number : （可选项）焦距，当为1的时候为最远视角（正常镜头），当为5的时候为最近视角（放大镜头）
	 */
	setZoom(params:txLiteAV_setZoom_Params):void

	/**
	 * `切换前后摄像头，startCamera 之后调用有效`
	 * ========params==========
	 *
	 * `isFront` :boolean : （可选项）true 切换到前置摄像头, false 切换到后置摄像头
	 */
	switchCamera(params:txLiteAV_switchCamera_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开/关闭闪光灯,startCamera 之后调用有效`
	 * ========params==========
	 *
	 * `isOpen` :boolean : （可选项）是否打开闪光灯，true 打开，false 关闭
	 */
	toggleTorch(params:txLiteAV_toggleTorch_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置横竖屏录制，设置后可能会改变视频预览的方向,请调用setRenderRotation 来修本地视预览频流方向， 需要在startRecord 之前设置，录制过程中设置无效`
	 * ========params==========
	 *
	 * `orientation` :number : （可选项）横竖屏录制方向
	 */
	setHomeOrientation(params:txLiteAV_setHomeOrientation_Params):void

	/**
	 * `设置预览视频方向`
	 * ========params==========
	 *
	 * `renderRotation` :number : （可选项）预览视频方向，取值为 0 , 90, 180, 270（其他值无效）
	 */
	setRenderRotation(params:txLiteAV_setRenderRotation_Params):void

	/**
	 * `设置视频录制比例，需要在startRecord 之前设置，录制过程中设置无效`
	 * ========params==========
	 *
	 * `videoRatio` :number : （可选项）横竖屏录制方向
	 */
	setAspectRatio(params:txLiteAV_setAspectRatio_Params):void

	/**
	 * `设置录制速率 [精简版不支持]`
	 * ========params==========
	 *
	 * `speed` :number : （可选项）录制速率
	 */
	setRecordSpeed(params:txLiteAV_setRecordSpeed_Params):void

	/**
	 * `置是否静音录制`
	 * ========params==========
	 *
	 * `isMute` :boolean : （可选项）是否静音录制
	 */
	setMute(params:txLiteAV_setMute_Params):void

	/**
	 * `设置麦克风的音量大小，播放背景音乐混音时使用，用来控制麦克风音量大小 [精简版不支持]，注意：这个接口目前在playBGM之后才生效`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）音量大小，1为正常音量，建议值为0~2，如果需要调大音量可以设置更大的值
	 */
	setMicVolume(params:txLiteAV_setMicVolume_Params, callback?: (ret:JSON) => void):void

	/** 截图/拍照,startCamera 之后调用有效 [精简版不支持]*/ 
	snapshot():void

	/**
	 * `设置全局水印 [精简版不支持]`
	 * ========params==========
	 *
	 * `image` :string : 全局水印图片路径，支持fs、widget
	 *
	 * `rect` :JSON : (可选项）水印相对于视频图像的归一化frame，x,y,width,height 取值范围 0~1；height不用设置，sdk内部会根据水印宽高比自动计算height；比如视频图像大小为（540，960） frame设置为（0.1，0.1，0.1,0）,水印的实际像素坐标为（540 * 0.1，960 * 0.1，540 * 0.1 ，540 * 0.1 * waterMark.size.height / waterMark.size.width）
	 */
	setWaterMark(params:txLiteAV_setWaterMark_Params):void

	/**
	 * ` 设置指定素材滤镜特效`
	 * ========params==========
	 *
	 * `image` :string : 指定素材，即颜色查找表图片路径。注意：一定要用png格式；支持fs、widget
	 */
	setFilter(params:txLiteAV_setFilter_Params):void

	/**
	 * `设置滤镜效果程度`
	 * ========params==========
	 *
	 * `specialRatio` :number : （可选项）滤镜效果程度，从0到1，越大滤镜效果越明显
	 */
	setSpecialRatio(params:txLiteAV_setSpecialRatio_Params):void

	/**
	 * `设置两个滤镜效果 [精简版不支持]`
	 * ========params==========
	 *
	 * `leftFilter` :string : 左滤镜图片路径，支持fs、widget
	 *
	 * `leftIntensity` :number : 左滤镜浓度
	 *
	 * `rightFilter` :string : 右滤镜图片路径，支持fs、widget
	 *
	 * `rightIntensity` :number : 右滤镜浓度
	 *
	 * `leftRatio` :number : 左滤镜所占比例
	 */
	setCombinationFilter(params:txLiteAV_setCombinationFilter_Params):void

	/**
	 * `设置美颜 和 美白 效果级别`
	 * ========params==========
	 *
	 * `beautyStyle` :number : （可选项）美颜风格
	 *
	 * `beautyLevel` :number : 美颜级别取值范围 0 ~ 9； 0 表示关闭 1 ~ 9值越大 效果越明显
	 *
	 * `whitenessLevel` :number : 美白级别取值范围 0 ~ 9； 0 表示关闭 1 ~ 9值越大 效果越明显
	 *
	 * `ruddinessLevel` :number : 红润级别取值范围 0 ~ 9； 0 表示关闭 1 ~ 9值越大 效果越明显
	 */
	setBeauty(params:txLiteAV_setBeauty_Params):void

	/** 添加录制监听*/ 
	addRecordListener():void

	/**
	 * `设置背景音乐文件 [精简版不支持]`
	 * ========params==========
	 *
	 * `path` :string : 音乐文件路径，iOS一定要是app对应的document目录下面的路径，否则文件会读取失败; android 支持原生路径、fs路径
	 */
	setBGM(params:txLiteAV_setBGM_Params, callback?: (ret:JSON) => void):void

	/**
	 * `播放背景音乐 [精简版不支持]，必须在startCamera之后调用`
	 * ========params==========
	 *
	 * `startTime` :number : （可选项）音乐播放起始时间
	 *
	 * `endTime` :number : （可选项）音乐播放结束时间
	 */
	playBGM(params:txLiteAV_playBGM_Params, callback?: (ret:JSON) => void):void

	/** 暂停播放背景音乐 [精简版不支持]*/ 
	pauseBGM():void

	/** 继续播放背景音乐 [精简版不支持]*/ 
	resumeBGM():void

	/** 停止播放背景音乐 [精简版不支持]*/ 
	stopBGM():void

	/**
	 * `设置背景音乐的音量大小，播放背景音乐混音时使用，用来控制背景音音量大小 [精简版不支持]，这个接口目前在playBGM之后才生效`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）音量大小，1为正常音量，建议值为0~2，如果需要调大背景音量可以设置更大的值
	 */
	setBGMVolume(params:txLiteAV_setBGMVolume_Params, callback?: (ret:JSON) => void):void

	/** 获取当前录制视频片段的总时长  单位：s*/ 
	getDuration():void

	/** 获取当前录制所有视频片段路径*/ 
	getVideoPathList():void

	/** 删除当前录制视频最后一片段,默认删除本地视频文件*/ 
	deleteLastPart():void

	/**
	 * `删除当前录制视频指定片段，默认删除本地视频文件`
	 * ========params==========
	 *
	 * `index` :number : （可选项）删除录制视频的位置
	 */
	deletePart(params:txLiteAV_deletePart_Params):void

	/** 删除当前录制视频所有片段，默认删除本地视频文件*/ 
	deleteAllParts():void

	/**
	 * `您可以添加当前录制视频之外的视频，调用合joinAllParts的时候，SDK会把所有的视频合成（这里添加的视频需要和录制视频的分辨率保持一致，否则会合成失败）`
	 * ========params==========
	 *
	 * `videoPath` :string : 添加视频的文件路径
	 *
	 * `index` :number : （可选项）添加视频的所在整个视频list的位置
	 */
	insertPart(params:txLiteAV_insertPart_Params):void

	/** 合成所有片段，iOS合成所有当前录制视频，android合成insertPart接口添加的片段视频（这里需要保证视频片段的分辨率一致，否则会合成失败）*/ 
	joinAllParts(callback?: (ret:JSON) => void):void

	/**
	 * `变声 [精简版不支持]`
	 * ========params==========
	 *
	 * `voiceChangerType` :number : （可选项）设置变声类型 [精简版不支持]
	 */
	setVoiceChangerType(params:txLiteAV_setVoiceChangerType_Params):void

	/**
	 * `打开编辑预览页面`
	 * ========params==========
	 *
	 * `rect` :JSON : (可选项）预览画面的位置及长宽
	 *
	 * `videoPath` :string : 视频路径，支持fs、widget（android不支持widget）
	 *
	 * `renderMode` :number : （可选项）填充模式
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	startEditerPreview(params:txLiteAV_startEditerPreview_Params):void

	/**
	 * `渲染某一时刻的视频画面（编辑预览页面有效），需要在预加载成功后，且停止播放后有效`
	 * ========params==========
	 *
	 * `time` :number : （可选项）预览帧时间(s)
	 */
	previewAtTime(params:txLiteAV_previewAtTime_Params):void

	/**
	 * `播放某一时间段的视频（编辑预览页面有效）`
	 * ========params==========
	 *
	 * `startTime` :number : （可选项）播放起始时间(s)
	 *
	 * `endTime` :number : （可选项）播放结束时间(s)
	 */
	startPlayFromTime(params:txLiteAV_startPlayFromTime_Params):void

	/** 暂停播放（编辑预览页面有效）*/ 
	pausePlay():void

	/** 继续播放（编辑预览页面有效）*/ 
	resumePlay():void

	/** 停止播放（编辑预览页面有效）*/ 
	stopPlay():void

	/**
	 * `设置编辑页面全局水印[精简版不支持]（编辑预览页面有效）`
	 * ========params==========
	 *
	 * `image` :string : 全局水印图片路径，支持fs、widget
	 *
	 * `rect` :JSON : (可选项）水印相对于视频图像的归一化frame，x,y,width,height 取值范围 0~1；height不用设置，sdk内部会根据水印宽高比自动计算height；比如视频图像大小为（540，960） frame设置为（0.1，0.1，0.1,0）,水印的实际像素坐标为（540 * 0.1，960 * 0.1，540 * 0.1 ，540 * 0.1 * waterMark.size.height / waterMark.size.width）
	 */
	setEditerWaterMark(params:txLiteAV_setEditerWaterMark_Params):void

	/**
	 * `设置指定素材滤镜特效（编辑预览页面有效）`
	 * ========params==========
	 *
	 * `image` :string : 指定素材，即颜色查找表图片路径。注意：一定要用png格式；支持fs、widget
	 */
	setEditerFilter(params:txLiteAV_setEditerFilter_Params):void

	/**
	 * `设置片尾水印 [精简版不支持]（编辑预览页面有效）`
	 * ========params==========
	 *
	 * `image` :string : 全局水印图片路径，支持fs、widget
	 *
	 * `rect` :JSON : (可选项）水印相对于视频图像的归一化frame，x,y,width,height 取值范围 0~1；height不用设置，sdk内部会根据水印宽高比自动计算height；比如视频图像大小为（540，960） frame设置为（0.1，0.1，0.1,0）,水印的实际像素坐标为（540 * 0.1，960 * 0.1，540 * 0.1 ，540 * 0.1*waterMark.size.height / waterMark.size.width）
	 *
	 * `duration` :number : (可选项）水印的持续时长
	 */
	setTailWaterMark(params:txLiteAV_setTailWaterMark_Params):void

	/**
	 * `设置视频码率（编辑预览页面有效）`
	 * ========params==========
	 *
	 * `bitrate` :number : （可选项）视频码率 单位:kbps，如果设置了码率，SDK生成视频会优先使用这个码率，注意码率不要太大或则太小，码率太小视频会模糊不清，码率太大，生成视频体积会很大， 这里建议设置范围为：600~12000，如果没有调用这个接口，SDK内部会根据压缩质量自动计算码率
	 */
	setEditerVideoBitrate(params:txLiteAV_setEditerVideoBitrate_Params):void

	/**
	 * `获取视频缩略图列表`
	 * ========params==========
	 *
	 * `path` :string : 源视频文件路径，支持fs,widget（仅iOS支持，android截取正在预览视频缩略图）
	 *
	 * `outPath` :string : 图片保存路径，路径下不可跟图片名称，支持fs,widget（android不支持widget）
	 *
	 * `count` :number : （可选项）获取的采样图数量（均匀采样）
	 *
	 * `width` :number : （可选项）缩略图的最大宽，生成的缩略图大小不会超出这个宽
	 *
	 * `height` :number : （可选项）缩略图的最大高，生成的缩略图大小不会超出这个高
	 *
	 * `fast` :boolean : 是否精准出图；精准出图：输出的缩略图与视频时间点精准对应，但是在高分辨率上速度慢一些
	 */
	getSampleImages(params:txLiteAV_getSampleImages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置视频剪裁（编辑预览页面有效）`
	 * ========params==========
	 *
	 * `startTime` :number : （可选项）视频起始时间
	 *
	 * `endTime` :number : （可选项）视频结束时间)
	 */
	setCut(params:txLiteAV_setCut_Params):void

	/** 添加生成视频事件监听*/ 
	addVideoGenerateListener():void

	/**
	 * `设置背景音乐 [精简版不支持]（编辑预览页面有效）`
	 * ========params==========
	 *
	 * `path` :string : 音乐文件路径，支付fs、widget（android不支持widget）
	 */
	setEditerBGM(params:txLiteAV_setEditerBGM_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置背景音乐的起始时间和结束时间 [精简版不支持]（编辑预览页面有效）`
	 * ========params==========
	 *
	 * `startTime` :number : （可选项）音乐起始时间
	 *
	 * `endTime` :number : （可选项）音乐结束时间
	 */
	setEditerBGMTime(params:txLiteAV_setEditerBGMTime_Params):void

	/**
	 * `设置背景音乐是否循环播放 [精简版不支持]（编辑预览页面有效）`
	 * ========params==========
	 *
	 * `isLoop` :boolean : （可选项）是否循环播放
	 */
	setEditerBGMLoop(params:txLiteAV_setEditerBGMLoop_Params):void

	/**
	 * `设置背景音乐在视频的添加的起始位置 [精简版不支持]（编辑预览页面有效）`
	 * ========params==========
	 *
	 * `time` :number : （可选项）背景音乐在视频的添加的起始时间
	 */
	setEditerBGMAtVideoTime(params:txLiteAV_setEditerBGMAtVideoTime_Params):void

	/**
	 * `设置视频声音大小 [精简版不支持]（编辑预览页面有效）`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）背景音量, 取值范围 0.0 ~ 1.0
	 */
	setEditerVideoVolume(params:txLiteAV_setEditerVideoVolume_Params):void

	/**
	 * `设置背景音乐声音大小 [精简版不支持]（编辑预览页面有效）`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）背景音量, 取值范围 0.0 ~ 1.0
	 */
	setEditerBGMVolume(params:txLiteAV_setEditerBGMVolume_Params):void

	/** 显示编辑视图*/ 
	showEditerView():void

	/** 隐藏编辑视图*/ 
	hideEditerView():void

	/** 移除编辑视图*/ 
	removeEditerView():void

	/** 全功能预加载*/ 
	processVideo():void

}
interface txLiteAV_setLicence_Params {
	/**（必填项）从腾讯云平台获取的LicenseUrl。[参考腾讯官方申请说明](https://cloud.tencent.com/document/product/584/20333#1.-.E7.94.B3.E8.AF.B7.E6.B5.8B.E8.AF.95license)*/ 
	licenceURL:string,

	/**（必填项）从腾讯云平台获取的Key。[参考腾讯官方申请说明](https://cloud.tencent.com/document/product/584/20333#1.-.E7.94.B3.E8.AF.B7.E6.B5.8B.E8.AF.95license)*/ 
	licenceKey:string,

}

interface txLiteAV_startCameraPreview_Params {
	/**(可选项）预览画面的位置及长宽*/ 
	rect?:JSON,

	/**（可选项）录制分辨率类型定义，如果设备不支持当前分辨率录制，SDK会默认采取低一级别的分辨率录制*/ 
	videoResolution?:number,

	/**（可选项）自定义fps   15~30*/ 
	videoFPS?:number,

	/**（可选项）自定义码率，建议值：600~12000 (SDK上限不再做限制) ，单位kbps/s,这里需要注意的是，这里设置的码率只是给编码器一个参考值，实际出来视频的码率是会在这个参考值上下波动的*/ 
	videoBitratePIN?:number,

	/**（可选项）是否是前置摄像头*/ 
	frontCamera?:boolean,

	/**（可选项）编码方式   （默认VBR编码方式，相同码率下能获得更好的画面质量）（仅iOS支持）*/ 
	encodeMode?:number,

	/**（可选项）是否开启B帧 （默认开启，相同码率下能获得更好的画面质量)（仅iOS支持）*/ 
	enableBFrame?:boolean,

	/**（可选项）是否开启回声消除（默认开启），开启回声消除，可以录制人声，BGM，人声+BGM （注意：录制中开启回声消除，BGM的播放模式是手机通话模式，这个模式下系统静音会失效，而视频播放预览走的是媒体播放模式，播放模式的不同会导致录制和预览在相同系统音量下播放声音大小有一定区别），关闭回声消除，可以录制人声、BGM，耳机模式下可以录制人声 + BGM ，外放模式下不能录制人声+BGM*/ 
	enableAEC?:boolean,

	/**（可选项）关键帧间隔（1 ~10），单位秒*/ 
	GOP?:number,

	/**（可选项）音频采样率*/ 
	audioSampleRate?:number,

	/**（可选项）设置视频录制的最小时长，大于0，单位秒*/ 
	minDuration?:number,

	/**（可选项）设置视频录制的最大时长，建议不超过300，单位秒*/ 
	maxDuration?:number,

	/**（可选项）是否触摸聚焦（仅android支持）*/ 
	touchFocus?:boolean,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface txLiteAV_startRecord_Params {
	/**视频文件输出路径，支持fs、widget （android不支持widget路径）*/ 
	videoPath:any,

	/**封面文件输出路径，支持fs、widget（android不支持widget路径）*/ 
	coverPath:any,

	/**分片视频存储目录路径，支持fs、widget（android不支持widget路径）*/ 
	videoPartsFolder:any,

}

interface txLiteAV_setVideoResolution_Params {
	/**（可选项）视频录制分辨率*/ 
	videoResolution?:number,

}

interface txLiteAV_setVideoBitrate_Params {
	/**（可选项）自定义码率，建议值：600~12000 (SDK上限不再做限制) ，单位kbps/s,这里需要注意的是，这里设置的码率只是给编码器一个参考值，实际出来视频的码率是会在这个参考值上下波动的*/ 
	videoBitratePIN?:number,

}

interface txLiteAV_setZoom_Params {
	/**（可选项）焦距，当为1的时候为最远视角（正常镜头），当为5的时候为最近视角（放大镜头）*/ 
	zoom?:number,

}

interface txLiteAV_switchCamera_Params {
	/**（可选项）true 切换到前置摄像头, false 切换到后置摄像头*/ 
	isFront?:boolean,

}

interface txLiteAV_toggleTorch_Params {
	/**（可选项）是否打开闪光灯，true 打开，false 关闭*/ 
	isOpen?:boolean,

}

interface txLiteAV_setHomeOrientation_Params {
	/**（可选项）横竖屏录制方向*/ 
	orientation?:number,

}

interface txLiteAV_setRenderRotation_Params {
	/**（可选项）预览视频方向，取值为 0 , 90, 180, 270（其他值无效）*/ 
	renderRotation?:number,

}

interface txLiteAV_setAspectRatio_Params {
	/**（可选项）横竖屏录制方向*/ 
	videoRatio?:number,

}

interface txLiteAV_setRecordSpeed_Params {
	/**（可选项）录制速率*/ 
	speed?:number,

}

interface txLiteAV_setMute_Params {
	/**（可选项）是否静音录制*/ 
	isMute?:boolean,

}

interface txLiteAV_setMicVolume_Params {
	/**（可选项）音量大小，1为正常音量，建议值为0~2，如果需要调大音量可以设置更大的值*/ 
	volume?:number,

}

interface txLiteAV_setWaterMark_Params {
	/**全局水印图片路径，支持fs、widget*/ 
	image:string,

	/**(可选项）水印相对于视频图像的归一化frame，x,y,width,height 取值范围 0~1；height不用设置，sdk内部会根据水印宽高比自动计算height；比如视频图像大小为（540，960） frame设置为（0.1，0.1，0.1,0）,水印的实际像素坐标为（540 * 0.1，960 * 0.1，540 * 0.1 ，540 * 0.1 * waterMark.size.height / waterMark.size.width）*/ 
	rect?:JSON,

}

interface txLiteAV_setFilter_Params {
	/**指定素材，即颜色查找表图片路径。注意：一定要用png格式；支持fs、widget*/ 
	image:string,

}

interface txLiteAV_setSpecialRatio_Params {
	/**（可选项）滤镜效果程度，从0到1，越大滤镜效果越明显*/ 
	specialRatio?:number,

}

interface txLiteAV_setCombinationFilter_Params {
	/**左滤镜图片路径，支持fs、widget*/ 
	leftFilter:string,

	/**左滤镜浓度*/ 
	leftIntensity:number,

	/**右滤镜图片路径，支持fs、widget*/ 
	rightFilter:string,

	/**右滤镜浓度*/ 
	rightIntensity:number,

	/**左滤镜所占比例*/ 
	leftRatio:number,

}

interface txLiteAV_setBeauty_Params {
	/**（可选项）美颜风格*/ 
	beautyStyle?:number,

	/**美颜级别取值范围 0 ~ 9； 0 表示关闭 1 ~ 9值越大 效果越明显*/ 
	beautyLevel:number,

	/**美白级别取值范围 0 ~ 9； 0 表示关闭 1 ~ 9值越大 效果越明显*/ 
	whitenessLevel:number,

	/**红润级别取值范围 0 ~ 9； 0 表示关闭 1 ~ 9值越大 效果越明显*/ 
	ruddinessLevel:number,

}

interface txLiteAV_setBGM_Params {
	/**音乐文件路径，iOS一定要是app对应的document目录下面的路径，否则文件会读取失败; android 支持原生路径、fs路径*/ 
	path:string,

}

interface txLiteAV_playBGM_Params {
	/**（可选项）音乐播放起始时间*/ 
	startTime?:number,

	/**（可选项）音乐播放结束时间*/ 
	endTime?:number,

}

interface txLiteAV_setBGMVolume_Params {
	/**（可选项）音量大小，1为正常音量，建议值为0~2，如果需要调大背景音量可以设置更大的值*/ 
	volume?:number,

}

interface txLiteAV_deletePart_Params {
	/**（可选项）删除录制视频的位置*/ 
	index?:number,

}

interface txLiteAV_insertPart_Params {
	/**添加视频的文件路径*/ 
	videoPath:string,

	/**（可选项）添加视频的所在整个视频list的位置*/ 
	index?:number,

}

interface txLiteAV_setVoiceChangerType_Params {
	/**（可选项）设置变声类型 [精简版不支持]*/ 
	voiceChangerType?:number,

}

interface txLiteAV_startEditerPreview_Params {
	/**(可选项）预览画面的位置及长宽*/ 
	rect?:JSON,

	/**视频路径，支持fs、widget（android不支持widget）*/ 
	videoPath:string,

	/**（可选项）填充模式*/ 
	renderMode?:number,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface txLiteAV_previewAtTime_Params {
	/**（可选项）预览帧时间(s)*/ 
	time?:number,

}

interface txLiteAV_startPlayFromTime_Params {
	/**（可选项）播放起始时间(s)*/ 
	startTime?:number,

	/**（可选项）播放结束时间(s)*/ 
	endTime?:number,

}

interface txLiteAV_setEditerWaterMark_Params {
	/**全局水印图片路径，支持fs、widget*/ 
	image:string,

	/**(可选项）水印相对于视频图像的归一化frame，x,y,width,height 取值范围 0~1；height不用设置，sdk内部会根据水印宽高比自动计算height；比如视频图像大小为（540，960） frame设置为（0.1，0.1，0.1,0）,水印的实际像素坐标为（540 * 0.1，960 * 0.1，540 * 0.1 ，540 * 0.1 * waterMark.size.height / waterMark.size.width）*/ 
	rect?:JSON,

}

interface txLiteAV_setEditerFilter_Params {
	/**指定素材，即颜色查找表图片路径。注意：一定要用png格式；支持fs、widget*/ 
	image:string,

}

interface txLiteAV_setTailWaterMark_Params {
	/**全局水印图片路径，支持fs、widget*/ 
	image:string,

	/**(可选项）水印相对于视频图像的归一化frame，x,y,width,height 取值范围 0~1；height不用设置，sdk内部会根据水印宽高比自动计算height；比如视频图像大小为（540，960） frame设置为（0.1，0.1，0.1,0）,水印的实际像素坐标为（540 * 0.1，960 * 0.1，540 * 0.1 ，540 * 0.1*waterMark.size.height / waterMark.size.width）*/ 
	rect?:JSON,

	/**(可选项）水印的持续时长*/ 
	duration?:number,

}

interface txLiteAV_setEditerVideoBitrate_Params {
	/**（可选项）视频码率 单位:kbps，如果设置了码率，SDK生成视频会优先使用这个码率，注意码率不要太大或则太小，码率太小视频会模糊不清，码率太大，生成视频体积会很大， 这里建议设置范围为：600~12000，如果没有调用这个接口，SDK内部会根据压缩质量自动计算码率*/ 
	bitrate?:number,

}

interface txLiteAV_getSampleImages_Params {
	/**源视频文件路径，支持fs,widget（仅iOS支持，android截取正在预览视频缩略图）*/ 
	path:string,

	/**图片保存路径，路径下不可跟图片名称，支持fs,widget（android不支持widget）*/ 
	outPath:string,

	/**（可选项）获取的采样图数量（均匀采样）*/ 
	count?:number,

	/**（可选项）缩略图的最大宽，生成的缩略图大小不会超出这个宽*/ 
	width?:number,

	/**（可选项）缩略图的最大高，生成的缩略图大小不会超出这个高*/ 
	height?:number,

	/**是否精准出图；精准出图：输出的缩略图与视频时间点精准对应，但是在高分辨率上速度慢一些*/ 
	fast:boolean,

}

interface txLiteAV_setCut_Params {
	/**（可选项）视频起始时间*/ 
	startTime?:number,

	/**（可选项）视频结束时间)*/ 
	endTime?:number,

}

interface txLiteAV_setEditerBGM_Params {
	/**音乐文件路径，支付fs、widget（android不支持widget）*/ 
	path:string,

}

interface txLiteAV_setEditerBGMTime_Params {
	/**（可选项）音乐起始时间*/ 
	startTime?:number,

	/**（可选项）音乐结束时间*/ 
	endTime?:number,

}

interface txLiteAV_setEditerBGMLoop_Params {
	/**（可选项）是否循环播放*/ 
	isLoop?:boolean,

}

interface txLiteAV_setEditerBGMAtVideoTime_Params {
	/**（可选项）背景音乐在视频的添加的起始时间*/ 
	time?:number,

}

interface txLiteAV_setEditerVideoVolume_Params {
	/**（可选项）背景音量, 取值范围 0.0 ~ 1.0*/ 
	volume?:number,

}

interface txLiteAV_setEditerBGMVolume_Params {
	/**（可选项）背景音量, 取值范围 0.0 ~ 1.0*/ 
	volume?:number,

}

interface duibaView {
	/** 打开兑吧积分商城模块*/ 
	show():void

}
interface bgnArcFace {
	/** SDK激活*/ 
	active(callback?: (ret:JSON) => void):void

	/**
	 * `人脸注册`
	 * ========params==========
	 *
	 * `cameraId` :string : （可选项）摄像头ID 0是后置摄像头，1是前置摄像头，默认为前置摄像头。
	 */
	register(params:bgnArcFace_register_Params, callback?: (ret:JSON) => void):void

	/**
	 * `人脸对比`
	 * ========params==========
	 *
	 * `cameraId` :string : （可选项）摄像头ID 0是后置摄像头，1是前置摄像头，默认为前置摄像头。
	 *
	 * `faceFeature` :string : （必填项）通过人脸注册时获取到的人脸特征数据。
	 */
	compare(params:bgnArcFace_compare_Params, callback?: (ret:JSON) => void):void

	/**
	 * `人脸搜索`
	 * ========params==========
	 *
	 * `cameraId` :string : （可选项）摄像头ID 0是后置摄像头，1是前置摄像头，默认为前置摄像头。
	 *
	 * `alive` :boolean : （可选项）是否启用活体验证true为启用，false为不启用，启用活体验证后识别速度会有所下降，默认为false不启用。
	 *
	 * `mode` :string : （可选项）识别模式，表示单次搜索还是循环搜索，默认为单次搜索。单次搜索模式下搜索到结果后自动关闭搜索界面并返回结果。
	 *
	 * `score` :any : （可选项）搜索要求的最低相似度，搜索结果不小于该值时返回搜索到的用户，否则返回空对象。
	 */
	search(params:bgnArcFace_search_Params, callback?: (ret:JSON) => void):void

	/**
	 * `自定义界面人脸注册`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `cameraId` :string : （可选项）摄像头ID 0是后置摄像头，1是前置摄像头，默认为前置摄像头。
	 */
	openRegister(params:bgnArcFace_openRegister_Params, callback?: (ret:JSON) => void):void

	/** 关闭自定义注册界面*/ 
	closeRegister():void

	/**
	 * `自定义界面人脸对比`
	 * ========params==========
	 *
	 * `faceFeature` :string : （必填项）待比对的人脸特征数据。
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `cameraId` :string : （可选项）摄像头ID 0是后置摄像头，1是前置摄像头，默认为前置摄像头。
	 */
	openCompare(params:bgnArcFace_openCompare_Params, callback?: (ret:JSON) => void):void

	/** 关闭自定义人脸对比界面*/ 
	closeCompare():void

	/**
	 * `自定义界面人脸搜索`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `cameraId` :string : （可选项）摄像头ID 0是后置摄像头，1是前置摄像头，默认为前置摄像头。
	 *
	 * `alive` :boolean : （可选项）是否启用活体验证true为启用，false为不启用，启用活体验证后识别速度会有所下降，默认为false不启用。
	 *
	 * `mode` :string : （可选项）识别模式，表示单次搜索还是循环搜索，默认为单次搜索。单次搜索模式下搜索到结果后自动关闭搜索界面并返回结果。
	 *
	 * `score` :any : （可选项）搜索要求的最低相似度，搜索结果不小于该值时返回搜索到的用户，否则返回空对象。
	 */
	openSearch(params:bgnArcFace_openSearch_Params, callback?: (ret:JSON) => void):void

	/** 关闭自定义人脸搜索界面*/ 
	closeSearch():void

	/**
	 * `在本地添加注册用户`
	 * ========params==========
	 *
	 * `user` :JSON : 
	 */
	addUser(params:bgnArcFace_addUser_Params, callback?: (ret:JSON) => void):void

	/** 统计本地注册用户数*/ 
	countUser(callback?: (ret:JSON) => void):void

	/** 清空所有本地注册用户*/ 
	clearAllUser(callback?: (ret:JSON) => void):void

	/**
	 * `移除指定的本地注册用户`
	 * ========params==========
	 *
	 * `userId` :string : （必填项）要删除的用户ID
	 */
	removeUser(params:bgnArcFace_removeUser_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取得指定本地注册用户`
	 * ========params==========
	 *
	 * `userId` :string : （必填项）要获取的用户ID
	 */
	getUser(params:bgnArcFace_getUser_Params, callback?: (ret:JSON) => void):void

	/** 取得全部本地注册用户*/ 
	listUser(callback?: (ret:JSON) => void):void

}
interface bgnArcFace_register_Params {
	/**（可选项）摄像头ID 0是后置摄像头，1是前置摄像头，默认为前置摄像头。*/ 
	cameraId?:string,

}

interface bgnArcFace_compare_Params {
	/**（可选项）摄像头ID 0是后置摄像头，1是前置摄像头，默认为前置摄像头。*/ 
	cameraId?:string,

	/**（必填项）通过人脸注册时获取到的人脸特征数据。*/ 
	faceFeature:string,

}

interface bgnArcFace_search_Params {
	/**（可选项）摄像头ID 0是后置摄像头，1是前置摄像头，默认为前置摄像头。*/ 
	cameraId?:string,

	/**（可选项）是否启用活体验证true为启用，false为不启用，启用活体验证后识别速度会有所下降，默认为false不启用。*/ 
	alive?:boolean,

	/**（可选项）识别模式，表示单次搜索还是循环搜索，默认为单次搜索。单次搜索模式下搜索到结果后自动关闭搜索界面并返回结果。*/ 
	mode?:string,

	/**（可选项）搜索要求的最低相似度，搜索结果不小于该值时返回搜索到的用户，否则返回空对象。*/ 
	score?:any,

}

interface bgnArcFace_openRegister_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）摄像头ID 0是后置摄像头，1是前置摄像头，默认为前置摄像头。*/ 
	cameraId?:string,

}

interface bgnArcFace_openCompare_Params {
	/**（必填项）待比对的人脸特征数据。*/ 
	faceFeature:string,

	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）摄像头ID 0是后置摄像头，1是前置摄像头，默认为前置摄像头。*/ 
	cameraId?:string,

}

interface bgnArcFace_openSearch_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）摄像头ID 0是后置摄像头，1是前置摄像头，默认为前置摄像头。*/ 
	cameraId?:string,

	/**（可选项）是否启用活体验证true为启用，false为不启用，启用活体验证后识别速度会有所下降，默认为false不启用。*/ 
	alive?:boolean,

	/**（可选项）识别模式，表示单次搜索还是循环搜索，默认为单次搜索。单次搜索模式下搜索到结果后自动关闭搜索界面并返回结果。*/ 
	mode?:string,

	/**（可选项）搜索要求的最低相似度，搜索结果不小于该值时返回搜索到的用户，否则返回空对象。*/ 
	score?:any,

}

interface bgnArcFace_addUser_Params {
	/***/ 
	user:JSON,

}

interface bgnArcFace_removeUser_Params {
	/**（必填项）要删除的用户ID*/ 
	userId:string,

}

interface bgnArcFace_getUser_Params {
	/**（必填项）要获取的用户ID*/ 
	userId:string,

}

interface adsYoumi {
}
interface seckenModule {
	/** 初始化操作,在使用其它功能前,请先调用该方法进行初始化*/ 
	init():void

	/** 在Secken开发者平台申请应用的客户端情况下，使用sdk授权即可授权客户端，之后才能使用sdk的其他功能。*/ 
	auth():void

	/** 调用SeckenSDK扫描功能，可实现客户端扫码，服务器端验证用户身份的功能。*/ 
	qrcode():void

	/** 通过跳转SeckenSDK的人脸训练页面识别头像信息，成功识别三次则创建人脸信息成功，即可使用人脸验证功能；*/ 
	faceTrain():void

	/** 通过跳转SeckenSDK的人脸验证页面，由服务器返回该头像信息是否为创建时候的人脸信息作为人脸是否验证成功的标志。*/ 
	faceCompare():void

	/** 通过跳转SeckenSDK声音训练页面进行采集用户声音信息，采集三次成功则创建声音验证信息成功，即可使用声音验证功能；*/ 
	voiceTrain():void

	/** 通过跳转SeckenSDK的声音验证页面采集用户声音信息进行验证是否为创建声音的声音信息。*/ 
	voiceCompare():void

	/** 删除人脸验证的一切相关信息。注：删除后用户将无法使用人脸验证*/ 
	faceDelete():void

	/** 删除声音验证的一切相关信息。注：删除后用户将无法使用声音验证*/ 
	voiceDelete():void

	/** 取消用户的授权，客户端将不能使用SDK功能，但是不删除授权的声音和人脸信息，下次授权用户仍然可以使用之前训练的人脸和声音进行验证。*/ 
	unBind():void

	/** 判断是否存在人脸信息。（注：需要授权之后才有效）*/ 
	hasFace():void

	/** 判断是否存在声音信息。（注：需要授权之后才有效）*/ 
	hasVoice():void

}
interface baiduBos {
	/**
	 * `上传分块文件`
	 * ========params==========
	 *
	 * `accessKey` :string : （必填项）在百度云申请的accessKey。[见：安全认证 / Access Key]
	 *
	 * `secretAccessKey` :string : （必填项）在百度云申请的secretAccessKey。[见：安全认证 / Access Key]
	 *
	 * `endpointBos` :string : （必填项）百度云Bucket节点地址[见：BJ bj.bcebos.com | GZ hk-2.bcebos.com | SU su.bcebos.com]
	 *
	 * `token` :string : （可选项）STS 方式实现移动端的鉴权，STS的详细介绍请参考[临时授权访问](https://cloud.baidu.com/doc/BOS/API.html#.E4.B8.B4.E6.97.B6.E6.8E.88.E6.9D.83.E8.AE.BF.E9.97.AE)
	 *
	 * `bucketName` :string : （必填项）在百度bos申请的bucketName
	 *
	 * `url` :string : （必填项）上传文件本地路径。[支持fs:// widget://]。
	 *
	 * `objectKey` :string : （必填项）存储到Bucket的路径及文件名称。
	 *
	 * `maxConnections` :number : （可选项）最大连接数
	 *
	 * `connectionTimeoutInMillis` :number : （可选项）连接超时事件
	 *
	 * `socketTimeoutInMillis` :number : （可选项）socket连接超时时间
	 *
	 * `uploadId` :string : （可选项）上一次的上传id，用于断点续传。
	 */
	uploadPart(params:baiduBos_uploadPart_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取所有已上传的分块信息`
	 * ========params==========
	 *
	 * `accessKey` :string : （必填项）在百度云申请的accessKey。[见：安全认证 / Access Key]
	 *
	 * `secretAccessKey` :string : （必填项）在百度云申请的secretAccessKey。[见：安全认证 / Access Key]
	 *
	 * `endpointBos` :string : （必填项）百度云Bucket节点地址[见：BJ bj.bcebos.com | GZ hk-2.bcebos.com | SU su.bcebos.com]
	 *
	 * `token` :string : （可选项）STS 方式实现移动端的鉴权，STS的详细介绍请参考[临时授权访问](https://cloud.baidu.com/doc/BOS/API.html#.E4.B8.B4.E6.97.B6.E6.8E.88.E6.9D.83.E8.AE.BF.E9.97.AE)
	 *
	 * `bucketName` :string : （必填项）在百度bos申请的bucketName
	 *
	 * `objectKey` :string : （必填项）存储到Bucket的路径及文件名称。
	 *
	 * `maxParts` :number : （可选项）每次获取最大分块上传事件的数目
	 *
	 * `partNumberMarker` :number : （可选项）若想获取更多已上传的分块信息，可以使用PartNumberMarker参数分次读取
	 *
	 * `uploadId` :string : （可选项）上传id。
	 */
	listParts(params:baiduBos_listParts_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消分块上传`
	 * ========params==========
	 *
	 * `accessKey` :string : （必填项）在百度云申请的accessKey。[见：安全认证 / Access Key]
	 *
	 * `secretAccessKey` :string : （必填项）在百度云申请的secretAccessKey。[见：安全认证 / Access Key]
	 *
	 * `endpointBos` :string : （必填项）百度云Bucket节点地址[见：BJ bj.bcebos.com | GZ hk-2.bcebos.com | SU su.bcebos.com]
	 *
	 * `token` :string : （可选项）STS 方式实现移动端的鉴权，STS的详细介绍请参考[临时授权访问](https://cloud.baidu.com/doc/BOS/API.html#.E4.B8.B4.E6.97.B6.E6.8E.88.E6.9D.83.E8.AE.BF.E9.97.AE)
	 *
	 * `bucketName` :string : （必填项）在百度bos申请的bucketName
	 *
	 * `objectKey` :string : （必填项）存储到Bucket的路径及文件名称。
	 *
	 * `uploadId` :string : （可选项）上传id。
	 */
	abortMultipartUpload(params:baiduBos_abortMultipartUpload_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除文件`
	 * ========params==========
	 *
	 * `accessKey` :string : （必填项）在百度云申请的accessKey。[见：安全认证 / Access Key]
	 *
	 * `secretAccessKey` :string : （必填项）在百度云申请的secretAccessKey。[见：安全认证 / Access Key]
	 *
	 * `endpointBos` :string : （必填项）百度云Bucket节点地址[见：BJ bj.bcebos.com | GZ hk-2.bcebos.com | SU su.bcebos.com]
	 *
	 * `token` :string : （可选项）STS 方式实现移动端的鉴权，STS的详细介绍请参考[临时授权访问](https://cloud.baidu.com/doc/BOS/API.html#.E4.B8.B4.E6.97.B6.E6.8E.88.E6.9D.83.E8.AE.BF.E9.97.AE)
	 *
	 * `bucketName` :string : （必填项）在百度bos申请的bucketName
	 *
	 * `objectKey` :string : （必填项）存储到Bucket的路径及文件名称。
	 */
	deleteObject(params:baiduBos_deleteObject_Params, callback?: (ret:JSON) => void):void

}
interface baiduBos_uploadPart_Params {
	/**（必填项）在百度云申请的accessKey。[见：安全认证 / Access Key]*/ 
	accessKey:string,

	/**（必填项）在百度云申请的secretAccessKey。[见：安全认证 / Access Key]*/ 
	secretAccessKey:string,

	/**（必填项）百度云Bucket节点地址[见：BJ bj.bcebos.com | GZ hk-2.bcebos.com | SU su.bcebos.com]*/ 
	endpointBos:string,

	/**（可选项）STS 方式实现移动端的鉴权，STS的详细介绍请参考[临时授权访问](https://cloud.baidu.com/doc/BOS/API.html#.E4.B8.B4.E6.97.B6.E6.8E.88.E6.9D.83.E8.AE.BF.E9.97.AE)*/ 
	token?:string,

	/**（必填项）在百度bos申请的bucketName*/ 
	bucketName:string,

	/**（必填项）上传文件本地路径。[支持fs:// widget://]。*/ 
	url:string,

	/**（必填项）存储到Bucket的路径及文件名称。*/ 
	objectKey:string,

	/**（可选项）最大连接数*/ 
	maxConnections?:number,

	/**（可选项）连接超时事件*/ 
	connectionTimeoutInMillis?:number,

	/**（可选项）socket连接超时时间*/ 
	socketTimeoutInMillis?:number,

	/**（可选项）上一次的上传id，用于断点续传。*/ 
	uploadId?:string,

}

interface baiduBos_listParts_Params {
	/**（必填项）在百度云申请的accessKey。[见：安全认证 / Access Key]*/ 
	accessKey:string,

	/**（必填项）在百度云申请的secretAccessKey。[见：安全认证 / Access Key]*/ 
	secretAccessKey:string,

	/**（必填项）百度云Bucket节点地址[见：BJ bj.bcebos.com | GZ hk-2.bcebos.com | SU su.bcebos.com]*/ 
	endpointBos:string,

	/**（可选项）STS 方式实现移动端的鉴权，STS的详细介绍请参考[临时授权访问](https://cloud.baidu.com/doc/BOS/API.html#.E4.B8.B4.E6.97.B6.E6.8E.88.E6.9D.83.E8.AE.BF.E9.97.AE)*/ 
	token?:string,

	/**（必填项）在百度bos申请的bucketName*/ 
	bucketName:string,

	/**（必填项）存储到Bucket的路径及文件名称。*/ 
	objectKey:string,

	/**（可选项）每次获取最大分块上传事件的数目*/ 
	maxParts?:number,

	/**（可选项）若想获取更多已上传的分块信息，可以使用PartNumberMarker参数分次读取*/ 
	partNumberMarker?:number,

	/**（可选项）上传id。*/ 
	uploadId?:string,

}

interface baiduBos_abortMultipartUpload_Params {
	/**（必填项）在百度云申请的accessKey。[见：安全认证 / Access Key]*/ 
	accessKey:string,

	/**（必填项）在百度云申请的secretAccessKey。[见：安全认证 / Access Key]*/ 
	secretAccessKey:string,

	/**（必填项）百度云Bucket节点地址[见：BJ bj.bcebos.com | GZ hk-2.bcebos.com | SU su.bcebos.com]*/ 
	endpointBos:string,

	/**（可选项）STS 方式实现移动端的鉴权，STS的详细介绍请参考[临时授权访问](https://cloud.baidu.com/doc/BOS/API.html#.E4.B8.B4.E6.97.B6.E6.8E.88.E6.9D.83.E8.AE.BF.E9.97.AE)*/ 
	token?:string,

	/**（必填项）在百度bos申请的bucketName*/ 
	bucketName:string,

	/**（必填项）存储到Bucket的路径及文件名称。*/ 
	objectKey:string,

	/**（可选项）上传id。*/ 
	uploadId?:string,

}

interface baiduBos_deleteObject_Params {
	/**（必填项）在百度云申请的accessKey。[见：安全认证 / Access Key]*/ 
	accessKey:string,

	/**（必填项）在百度云申请的secretAccessKey。[见：安全认证 / Access Key]*/ 
	secretAccessKey:string,

	/**（必填项）百度云Bucket节点地址[见：BJ bj.bcebos.com | GZ hk-2.bcebos.com | SU su.bcebos.com]*/ 
	endpointBos:string,

	/**（可选项）STS 方式实现移动端的鉴权，STS的详细介绍请参考[临时授权访问](https://cloud.baidu.com/doc/BOS/API.html#.E4.B8.B4.E6.97.B6.E6.8E.88.E6.9D.83.E8.AE.BF.E9.97.AE)*/ 
	token?:string,

	/**（必填项）在百度bos申请的bucketName*/ 
	bucketName:string,

	/**（必填项）存储到Bucket的路径及文件名称。*/ 
	objectKey:string,

}

interface videoshare {
	/** 分享入口:*/ 
	systemsharevideo():void

}
interface hanvonCloudTableReader {
	/**
	 * `识别文本`
	 * ========params==========
	 *
	 * `androidkey` :string : 在汉王云官网申请的android key
	 *
	 * `ioskey` :string : 在汉王云官网申请的iOS key
	 *
	 * `picpath` :string : 文本的存放路径
	 *
	 * `type` :string : 返回的数据类型
	 *
	 * `uid` :string : 服务器ip地址
	 */
	recognitionTable(params:hanvonCloudTableReader_recognitionTable_Params, callback?: (ret:JSON) => void):void

}
interface hanvonCloudTableReader_recognitionTable_Params {
	/**在汉王云官网申请的android key*/ 
	androidkey:string,

	/**在汉王云官网申请的iOS key*/ 
	ioskey:string,

	/**文本的存放路径*/ 
	picpath:string,

	/**返回的数据类型*/ 
	type:string,

	/**服务器ip地址*/ 
	uid:string,

}

interface wawa {
	/** 开启、关闭log*/ 
	setLogEnable():void

	/** 获取版本号*/ 
	getVersion():void

	/** 判断阿凡达娃娃机 SDK 是否初始化成功*/ 
	isRegisterAppSuccess():void

	/** 初始化阿凡达娃娃机 SDK， 向 SDK 注册 appid appkey*/ 
	registerApp():void

	/**
	 * `设置用户信息`
	 * ========params==========
	 *
	 * `uid` :string : uid
	 *
	 * `name` :string : 用户名
	 *
	 * `avatar` :string : 头像地址
	 */
	setUserInfo(params:wawa_setUserInfo_Params):void

	/** 合作方，当用户从匿名，登陆之后，主动触发调用。*/ 
	login():void

	/** 合作方，退出登录。*/ 
	logout():void

	/** 请求当前登陆用户信息*/ 
	requestUserInfo():void

	/**
	 * `请求用户信息`
	 * ========params==========
	 *
	 * `uid` :number : （可选项）要请求的用户uid。注意，这个uid不是接入方服务器分配的uid, 而是通过SDK接口获取的uid. 当看自己，传0
	 */
	requestCommonUserInfoWithUid(params:wawa_requestCommonUserInfoWithUid_Params, callback?: (ret:JSON) => void):void

	/**
	 * `请求用户游戏记录`
	 * ========params==========
	 *
	 * `page` :number : 页数，从1开始
	 */
	requestGameHistoryAtPage(params:wawa_requestGameHistoryAtPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `请求用户战利品列表`
	 * ========params==========
	 *
	 * `page` :number : 页数，从1开始
	 *
	 * `userId` :number : 看谁的战利品，传谁的uid. 当登陆用户查看自己。 uid传0
	 */
	requestUserWardrobeAtPage(params:wawa_requestUserWardrobeAtPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `请求用户抓取到的娃娃列表`
	 * ========params==========
	 *
	 * `type` :string : 娃娃类型
	 */
	requestUserWawa(params:wawa_requestUserWawa_Params, callback?: (ret:JSON) => void):void

	/**
	 * `请求发货`
	 * ========params==========
	 *
	 * `wawaIds` :Array : 娃娃寄存项ID数组
	 *
	 * `addressModel` :JSON : 地址信息
	 */
	requestCreateOrderWithWawaIds(params:wawa_requestCreateOrderWithWawaIds_Params, callback?: (ret:JSON) => void):void

	/** 请求用户地址列表*/ 
	requestMyAddressList():void

	/**
	 * `新加入一个收货地址`
	 * ========params==========
	 *
	 * `addressModel` :JSON : 地址信息
	 */
	requestAddAddress(params:wawa_requestAddAddress_Params, callback?: (ret:JSON) => void):void

	/**
	 * `编辑修改一个收货地址。`
	 * ========params==========
	 *
	 * `addressModel` :JSON : 地址信息
	 */
	requestUpdateAddress(params:wawa_requestUpdateAddress_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置已有一个地址为默认地址`
	 * ========params==========
	 *
	 * `aId` :number : 地址ID
	 */
	requestSetDefaultAddress(params:wawa_requestSetDefaultAddress_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除一个收货地址`
	 * ========params==========
	 *
	 * `aID` :string : 地址 id
	 */
	requestDeleteAddress(params:wawa_requestDeleteAddress_Params, callback?: (ret:JSON) => void):void

	/**
	 * `物流查询`
	 * ========params==========
	 *
	 * `orderId` :string : 订单id
	 */
	requestExpressInfo(params:wawa_requestExpressInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `确认收货`
	 * ========params==========
	 *
	 * `orderId` :string : 订单id
	 */
	requestConfirmReceived(params:wawa_requestConfirmReceived_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将娃娃兑换为金币`
	 * ========params==========
	 *
	 * `type` :string : （可选项）娃娃类型
	 *
	 * `wawaIds` :Array : 娃娃id数组
	 */
	requestExchangeWawaWithType(params:wawa_requestExchangeWawaWithType_Params, callback?: (ret:JSON) => void):void

	/**
	 * `请求积分商城列表`
	 * ========params==========
	 *
	 * `page` :number : 页码，从1开始
	 */
	requestMallListAtPage(params:wawa_requestMallListAtPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `积分兑换娃娃`
	 * ========params==========
	 *
	 * `wid` :number : 兑换娃娃的 id
	 */
	requestMallExchangeWithWWID(params:wawa_requestMallExchangeWithWWID_Params, callback?: (ret:JSON) => void):void

	/** 获取申诉的原因列表*/ 
	requestComplainReasonList():void

	/**
	 * `请求申述游戏`
	 * ========params==========
	 *
	 * `orderID` :string : 订单 id
	 *
	 * `reason` :string : 理由
	 *
	 * `reasonId` :string : 理由 id
	 */
	requestComplainGame(params:wawa_requestComplainGame_Params, callback?: (ret:JSON) => void):void

	/**
	 * `游戏申述状态`
	 * ========params==========
	 *
	 * `orderID` :string : 订单 id
	 */
	requestComplainResultWithOrderID(params:wawa_requestComplainResultWithOrderID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `房间内举报某个用户`
	 * ========params==========
	 *
	 * `uid` :string : 用户id
	 *
	 * `type` :string : 类型
	 */
	requestReportUser(params:wawa_requestReportUser_Params, callback?: (ret:JSON) => void):void

	/**
	 * `请求房间列表`
	 * ========params==========
	 *
	 * `page` :number : 请求列表页，从1开始
	 *
	 * `size` :number : 每页个数
	 */
	requestRoomListAtPage(params:wawa_requestRoomListAtPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `请求指定房间信息`
	 * ========params==========
	 *
	 * `roomIds` :Array : 房间列表的id组成的数组
	 */
	requestRoomListByIds(params:wawa_requestRoomListByIds_Params, callback?: (ret:JSON) => void):void

	/**
	 * `启动首页数据刷新定时器`
	 * ========params==========
	 *
	 * `interval` :number : （可选项）定时器触发间隔，单位S, 最小10s
	 */
	startRequestRoomTimer(params:wawa_startRequestRoomTimer_Params):void

	/** 停止首页数据刷新定时器*/ 
	cancelRequestRoomTimer():void

	/**
	 * `获取房间信息与状态接口`
	 * ========params==========
	 *
	 * `roomId` :number : 房间列表的id
	 */
	requestRoomInfo(params:wawa_requestRoomInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `观众列表获取`
	 * ========params==========
	 *
	 * `roomId` :number : 房间列表的id
	 *
	 * `page` :number : 页码
	 */
	requestViewerWithRoomId(params:wawa_requestViewerWithRoomId_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开启定时刷新观众列表定时器，房间默认为当前进入的房间`
	 * ========params==========
	 *
	 * `interval` :number : （可选项）定时器触发间隔，单位S, 最小10s
	 */
	startRequestViewerTimer(params:wawa_startRequestViewerTimer_Params):void

	/** 取消刷新观众列表定时器*/ 
	cancelRequestViewerTimer():void

	/**
	 * `娃娃详情查询`
	 * ========params==========
	 *
	 * `wid` :number : 娃娃的id
	 */
	requestWawaDetail(params:wawa_requestWawaDetail_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询房间最近抓中记录`
	 * ========params==========
	 *
	 * `roomId` :number : 房间 id
	 *
	 * `page` :number : （可选项）请求第几页数据
	 */
	requestCatchHistory(params:wawa_requestCatchHistory_Params, callback?: (ret:JSON) => void):void

	/**
	 * `请求回放中 游戏操作信息`
	 * ========params==========
	 *
	 * `roomId` :number : 房间 id
	 *
	 * `startTimeSecond` :number : 游戏开始时间，单位S，秒
	 *
	 * `piece` :number : 第几片数据 从1开始，1片30s
	 */
	requestReplayVideoMessage(params:wawa_requestReplayVideoMessage_Params, callback?: (ret:JSON) => void):void

	/** 获取当前的服务器时间*/ 
	requestServerTime():void

	/**
	 * `加入房间`
	 * ========params==========
	 *
	 * `roomModel` :JSON : 房间描述
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	enterRoom(params:wawa_enterRoom_Params, callback?: (ret:JSON) => void):void

	/** 显示房间视频区域*/ 
	showRoom():void

	/** 隐藏房间视频区域*/ 
	hideRoom():void

	/** 关闭房间视频区域*/ 
	closeRoom():void

	/** 销毁房间, 离开房间时务必调用, 否则会影响之后的逻辑*/ 
	exitRoom():void

	/** 开始播放娃娃机视频流换面*/ 
	startGamePlayer():void

	/** 停止播放娃娃机视频流换面*/ 
	stopGamePlayer():void

	/** 特别注意: 在调用此接口前, 请确保用户信息已经注入到SDK用户信息回调中, 否则上机操作会直接失败*/ 
	requestStartGame():void

	/**
	 * `游戏操作, 上下左右操作`
	 * ========params==========
	 *
	 * `direction` :string : （可选项）方向
	 *
	 * `type` :string : （可选项）操作类型
	 */
	requestOperation(params:wawa_requestOperation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `游戏下爪操作`
	 * ========params==========
	 *
	 * `forceRelease` :boolean : （可选项）是否强制释放上机锁定
	 */
	requestClawWithForceRelease(params:wawa_requestClawWithForceRelease_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送弹幕`
	 * ========params==========
	 *
	 * `msg` :string : 要发送的字符串
	 */
	sendDamuMsg(params:wawa_sendDamuMsg_Params):void

	/** 快速上机请求, 无需传入参数, 会根据当前的机器空闲情况自动为用户分配可使用的机器*/ 
	requestQuickOnBoard():void

	/**
	 * `切换摄像头`
	 * ========params==========
	 *
	 * `isFront` :boolean : （可选项）是否要切换到正面摄像头, 传入true会切换到正面摄像头, 传入false则会切换到侧面摄像头
	 */
	cameraSwitchIsFront(params:wawa_cameraSwitchIsFront_Params):void

	/**
	 * `添加监听`
	 * ========params==========
	 *
	 * `name` :string : 指定监听的行为
	 */
	addEventListener(params:wawa_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除监听`
	 * ========params==========
	 *
	 * `name` :string : 指定监听的行为
	 */
	removeEventListener(params:wawa_removeEventListener_Params):void

}
interface wawa_setUserInfo_Params {
	/**uid*/ 
	uid:string,

	/**用户名*/ 
	name:string,

	/**头像地址*/ 
	avatar:string,

}

interface wawa_requestCommonUserInfoWithUid_Params {
	/**（可选项）要请求的用户uid。注意，这个uid不是接入方服务器分配的uid, 而是通过SDK接口获取的uid. 当看自己，传0*/ 
	uid?:number,

}

interface wawa_requestGameHistoryAtPage_Params {
	/**页数，从1开始*/ 
	page:number,

}

interface wawa_requestUserWardrobeAtPage_Params {
	/**页数，从1开始*/ 
	page:number,

	/**看谁的战利品，传谁的uid. 当登陆用户查看自己。 uid传0*/ 
	userId:number,

}

interface wawa_requestUserWawa_Params {
	/**娃娃类型*/ 
	type:string,

}

interface wawa_requestCreateOrderWithWawaIds_Params {
	/**娃娃寄存项ID数组*/ 
	wawaIds:Array,

	/**地址信息*/ 
	addressModel:JSON,

}

interface wawa_requestAddAddress_Params {
	/**地址信息*/ 
	addressModel:JSON,

}

interface wawa_requestUpdateAddress_Params {
	/**地址信息*/ 
	addressModel:JSON,

}

interface wawa_requestSetDefaultAddress_Params {
	/**地址ID*/ 
	aId:number,

}

interface wawa_requestDeleteAddress_Params {
	/**地址 id*/ 
	aID:string,

}

interface wawa_requestExpressInfo_Params {
	/**订单id*/ 
	orderId:string,

}

interface wawa_requestConfirmReceived_Params {
	/**订单id*/ 
	orderId:string,

}

interface wawa_requestExchangeWawaWithType_Params {
	/**（可选项）娃娃类型*/ 
	type?:string,

	/**娃娃id数组*/ 
	wawaIds:Array,

}

interface wawa_requestMallListAtPage_Params {
	/**页码，从1开始*/ 
	page:number,

}

interface wawa_requestMallExchangeWithWWID_Params {
	/**兑换娃娃的 id*/ 
	wid:number,

}

interface wawa_requestComplainGame_Params {
	/**订单 id*/ 
	orderID:string,

	/**理由*/ 
	reason:string,

	/**理由 id*/ 
	reasonId:string,

}

interface wawa_requestComplainResultWithOrderID_Params {
	/**订单 id*/ 
	orderID:string,

}

interface wawa_requestReportUser_Params {
	/**用户id*/ 
	uid:string,

	/**类型*/ 
	type:string,

}

interface wawa_requestRoomListAtPage_Params {
	/**请求列表页，从1开始*/ 
	page:number,

	/**每页个数*/ 
	size:number,

}

interface wawa_requestRoomListByIds_Params {
	/**房间列表的id组成的数组*/ 
	roomIds:Array,

}

interface wawa_startRequestRoomTimer_Params {
	/**（可选项）定时器触发间隔，单位S, 最小10s*/ 
	interval?:number,

}

interface wawa_requestRoomInfo_Params {
	/**房间列表的id*/ 
	roomId:number,

}

interface wawa_requestViewerWithRoomId_Params {
	/**房间列表的id*/ 
	roomId:number,

	/**页码*/ 
	page:number,

}

interface wawa_startRequestViewerTimer_Params {
	/**（可选项）定时器触发间隔，单位S, 最小10s*/ 
	interval?:number,

}

interface wawa_requestWawaDetail_Params {
	/**娃娃的id*/ 
	wid:number,

}

interface wawa_requestCatchHistory_Params {
	/**房间 id*/ 
	roomId:number,

	/**（可选项）请求第几页数据*/ 
	page?:number,

}

interface wawa_requestReplayVideoMessage_Params {
	/**房间 id*/ 
	roomId:number,

	/**游戏开始时间，单位S，秒*/ 
	startTimeSecond:number,

	/**第几片数据 从1开始，1片30s*/ 
	piece:number,

}

interface wawa_enterRoom_Params {
	/**房间描述*/ 
	roomModel:JSON,

	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface wawa_requestOperation_Params {
	/**（可选项）方向*/ 
	direction?:string,

	/**（可选项）操作类型*/ 
	type?:string,

}

interface wawa_requestClawWithForceRelease_Params {
	/**（可选项）是否强制释放上机锁定*/ 
	forceRelease?:boolean,

}

interface wawa_sendDamuMsg_Params {
	/**要发送的字符串*/ 
	msg:string,

}

interface wawa_cameraSwitchIsFront_Params {
	/**（可选项）是否要切换到正面摄像头, 传入true会切换到正面摄像头, 传入false则会切换到侧面摄像头*/ 
	isFront?:boolean,

}

interface wawa_addEventListener_Params {
	/**指定监听的行为*/ 
	name:string,

}

interface wawa_removeEventListener_Params {
	/**指定监听的行为*/ 
	name:string,

}

interface haikangVideo {
	/**
	 * `打开实时监控界面，需要在回调函数中调用video.play()预览监控视频或video.playback()回放录像,play()和playback()不能同时调用`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `ip` :string : （必选项）摄像头ip
	 *
	 * `port` :string : （必选项）摄像头端口号
	 *
	 * `channel` :string : （必选项）摄像头通道号
	 *
	 * `dwStreamType` :string : （可选项）摄像头码流类型，0-主码流，1-子码流，2-三码流，3-虚拟码流，默认为0主码流
	 *
	 * `user` :string : （必选项）摄像头账号用户名
	 *
	 * `pwd` :string : （必选项）摄像头账号密码
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:haikangVideo_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭实时监控界面*/ 
	close():void

	/** 显示监控视频*/ 
	show():void

	/** 隐藏监控视频*/ 
	hide():void

	/** 监控视频预览*/ 
	play():void

	/** 控制摄像头上抬*/ 
	up():void

	/** 控制摄像头下抬*/ 
	down():void

	/** 控制摄像头向左摆动*/ 
	left():void

	/** 控制摄像头向右摆动*/ 
	right():void

	/**
	 * `按时间回放录像文件`
	 * ========params==========
	 *
	 * `startYear` :string : （必选项）录像开始时间年份
	 *
	 * `startMonth` :string : （必选项）录像开始时间月份
	 *
	 * `startDay` :string : （必选项）录像开始时间日
	 *
	 * `startHour` :string : （必选项）录像开始时间时
	 *
	 * `startMinute` :string : （必选项）录像开始时间分
	 *
	 * `startSecond` :string : （必选项）录像开始时间秒
	 *
	 * `stopYear` :string : （必选项）录像结束时间年份
	 *
	 * `stopMonth` :string : （必选项）录像结束时间月份
	 *
	 * `stopDay` :string : （必选项）录像结束时间日
	 *
	 * `stopHour` :string : （必选项）录像结束时间时
	 *
	 * `stopMinute` :string : （必选项）录像结束时间分
	 *
	 * `stopSecond` :string : （必选项）录像结束时间秒
	 *
	 * `channel` :string : （必选项）通道号
	 */
	playback(params:haikangVideo_playback_Params, callback?: (ret:JSON) => void):void

	/** 停止视频回放*/ 
	stopplayback():void

	/** 暂停视频回放*/ 
	playpause():void

	/** 继续视频回放*/ 
	playrestart():void

	/** 控制摄像头焦距变大*/ 
	zoomin():void

	/** 控制摄像头焦距变小*/ 
	zoomout():void

}
interface haikangVideo_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（必选项）摄像头ip*/ 
	ip:string,

	/**（必选项）摄像头端口号*/ 
	port:string,

	/**（必选项）摄像头通道号*/ 
	channel:string,

	/**（可选项）摄像头码流类型，0-主码流，1-子码流，2-三码流，3-虚拟码流，默认为0主码流*/ 
	dwStreamType?:string,

	/**（必选项）摄像头账号用户名*/ 
	user:string,

	/**（必选项）摄像头账号密码*/ 
	pwd:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface haikangVideo_playback_Params {
	/**（必选项）录像开始时间年份*/ 
	startYear:string,

	/**（必选项）录像开始时间月份*/ 
	startMonth:string,

	/**（必选项）录像开始时间日*/ 
	startDay:string,

	/**（必选项）录像开始时间时*/ 
	startHour:string,

	/**（必选项）录像开始时间分*/ 
	startMinute:string,

	/**（必选项）录像开始时间秒*/ 
	startSecond:string,

	/**（必选项）录像结束时间年份*/ 
	stopYear:string,

	/**（必选项）录像结束时间月份*/ 
	stopMonth:string,

	/**（必选项）录像结束时间日*/ 
	stopDay:string,

	/**（必选项）录像结束时间时*/ 
	stopHour:string,

	/**（必选项）录像结束时间分*/ 
	stopMinute:string,

	/**（必选项）录像结束时间秒*/ 
	stopSecond:string,

	/**（必选项）通道号*/ 
	channel:string,

}

interface baiduSpeechRec {
}
interface zmCert {
	/**
	 * `这个方法其实应该是要给后台服务器来完成的，这样更灵活，也更安全，我加在这里，是为了能体验到完整功能，形成一个闭环。`
	 * ========params==========
	 *
	 * `channel` :any : （选填）商户自定的渠道编码。
	 *
	 * `platform` :any : （选填）认证商户自定义配置，支持一些商户可选的功能 。
	 */
	initialize(params:zmCert_initialize_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始认证。`
	 * ========params==========
	 *
	 * `bizNO` :any : （必填）本次认证的唯一标识，商户需要记录，bizNO有效期为23小时。由initialize方法或者商户后台服务器生成。
	 *
	 * `merchantID` :any : （必填）芝麻商户编码。
	 */
	startCertification(params:zmCert_startCertification_Params, callback?: (ret:JSON) => void):void

}
interface zmCert_initialize_Params {
	/**（选填）商户自定的渠道编码。*/ 
	channel:any,

	/**（选填）认证商户自定义配置，支持一些商户可选的功能 。*/ 
	platform?:any,

}

interface zmCert_startCertification_Params {
	/**（必填）本次认证的唯一标识，商户需要记录，bizNO有效期为23小时。由initialize方法或者商户后台服务器生成。*/ 
	bizNO:any,

	/**（必填）芝麻商户编码。*/ 
	merchantID:any,

}

interface tyRTCLive {
}
interface dianYan {
	/**
	 * `点验接口,(此接口在Android上必须开启移动数据，WiFi可以开也可以不开)`
	 * ========params==========
	 *
	 * `phoneNumber` :string : 手机号
	 */
	verify(params:dianYan_verify_Params, callback?: (ret:JSON) => void):void

}
interface dianYan_verify_Params {
	/**手机号*/ 
	phoneNumber:string,

}

interface sunmiPrint {
	/** 链接打印服务*/ 
	connect(callback?: (ret:JSON) => void):void

	/** 断开打印服务*/ 
	disConnect(callback?: (ret:JSON) => void):void

	/** 初始化打印服务，重置打印机的逻辑程序（例如：排版、加粗等样式设置），但不清空缓存区数据，因此未完成的打印作业将在重置后继续。*/ 
	init(callback?: (ret:JSON) => void):void

	/** 打印机自检*/ 
	selfCheck(callback?: (ret:JSON) => void):void

	/** 获取打印机板序列号*/ 
	getPrinterSerialNo(callback?: (ret:JSON) => void):void

	/** 获取打印机类型*/ 
	getPrinterModal(callback?: (ret:JSON) => void):void

	/** 获取打印机固件版本号*/ 
	getPrinterVersion(callback?: (ret:JSON) => void):void

	/** 获取打印机名称*/ 
	getDeviceName(callback?: (ret:JSON) => void):void

	/** 获取打印机状态*/ 
	getPrinterState(callback?: (ret:JSON) => void):void

	/** 获取打印机服务版本号*/ 
	getServiceVersion(callback?: (ret:JSON) => void):void

	/** 获取打印头打印⻓度*/ 
	getPrintedLength(callback?: (ret:JSON) => void):void

	/** 获取打印当前纸张规格，⽬前台式机器T1在v2.4.0版本以上⽀持此接⼝；T2、S2在v1.0.5以上⽀持此接⼝；其他机型在4.1.2版本后均⽀持此接⼝查询纸张规格;*/ 
	getPrinterPaper(callback?: (ret:JSON) => void):void

	/** 获取打印模式，仅⽀持 T1 、T2设备。相关模式设置，请在系统“设置”!”打印设置”中进⾏设置。*/ 
	getPrinterMode(callback?: (ret:JSON) => void):void

	/** 打印ESC/POS格式指令*/ 
	sendRAWData(callback?: (ret:JSON) => void):void

}
interface xinyanOCR {
}
interface speick {
	/** 拷贝离线语音合成资源文件到手机内存，路径为：/手机存储/Android/data/你的应用包名/file/baiduTTS，例如：/sdcard/Android/data/com.yourapp.tts/file/baiduTTS<br><b>提示：如果只使用在线模式进行语音合成，则不需要运行此方法。</b>*/ 
	dataCopy():void

	/**
	 * `语音合成初始化`
	 * ========params==========
	 *
	 * `onlyOnline` :boolean : （必填）是否只使用在线语音合成模式<br>true:只使用在线合成模式<br>false:使用离在线混合模式
	 *
	 * `speakId` :any : （选填）离线模式下的发音人。默认为离线女生。<br>1:离线女生<br>2:离线男生<br>3:离线度丫丫<br>4:离线度逍遥
	 *
	 * `file` :boolean : （选填）是否保存语音合成的文件到手机存储(路径为/手机存储/Android/data/你的应用包名/file/wav/voice.wav，例如：/sdcard/Android/data/com.yourapp.tts/file/wav/voice.wav)。
	 */
	init(params:speick_init_Params, callback?: (ret:JSON) => void):void

	/** 开始合成语音，如果初始化时参数file为true，调用本方法则会存储合成的语音音频文件到手机存储中，存储路径上面有介绍。*/ 
	play():void

	/** 监听语音播放事件。<br><b>注意：该函数在开始播放合成语音时会不停的进行回调，SpeechError返回的错误代码在此处查询https://ai.baidu.com/docs#/TTS-Android-SDK/ed68f1e9</b><br>*/ 
	listen():void

}
interface speick_init_Params {
	/**（必填）是否只使用在线语音合成模式<br>true:只使用在线合成模式<br>false:使用离在线混合模式*/ 
	onlyOnline:boolean,

	/**（选填）离线模式下的发音人。默认为离线女生。<br>1:离线女生<br>2:离线男生<br>3:离线度丫丫<br>4:离线度逍遥*/ 
	speakId:any,

	/**（选填）是否保存语音合成的文件到手机存储(路径为/手机存储/Android/data/你的应用包名/file/wav/voice.wav，例如：/sdcard/Android/data/com.yourapp.tts/file/wav/voice.wav)。*/ 
	file:boolean,

}

interface upyunUpfile {
}
interface zjBluetoothPrint {
	/** 蓝牙链接打印机*/ 
	bluetoothConnect(callback?: (ret:JSON) => void):void

	/** 断开链接*/ 
	bluetoothDisconnect():void

	/** 是否已链接打印机*/ 
	isConnect(callback?: (ret:JSON) => void):void

}
interface uSDK {
	/**
	 * `启动uSDK。启动uSDK是调用各种功能性API，使用U+物联功能的前提。`
	 * ========params==========
	 *
	 * `types` :Array : （可选）设置过滤设备类型
	 */
	startSDK(params:uSDK_startSDK_Params, callback?: (ret:JSON) => void):void

	/** 停止uSDK。*/ 
	stopSDK(callback?: (ret:JSON) => void):void

	/**
	 * `SmartLink方式配置设备入网。将设备加入指定无限网络，或更改设备所在网络。`
	 * ========params==========
	 *
	 * `ssid` :string : 无限网络名称，不支持中文，最大长度31
	 *
	 * `pwd` :string : 无限网络密码，不支持中文，最大长度63
	 *
	 * `mac` :string : 设备mac地址
	 *
	 * `timeoutInterval` :number : （可选）配置超时时间，单位为秒，范围为30秒-120秒
	 *
	 * `security` :boolean : （可选）安全配置方法标示。true时，进行安全配置；false，普通配置
	 */
	configDevice(params:uSDK_configDevice_Params, callback?: (ret:JSON) => void):void

	/** 在执行配置设备入网过程中，中断设备配置入网。*/ 
	stopConfigDevice(callback?: (ret:JSON) => void):void

	/** 获得设备列表集合。*/ 
	getDeviceList():void

	/**
	 * `与设备建立连接。调用此接口前需要先调用getDeviceList`
	 * ========params==========
	 *
	 * `deviceID` :string : 设备ID
	 */
	connect(params:uSDK_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `断开设备连接。调用此接口前需要先调用getDeviceList`
	 * ========params==========
	 *
	 * `deviceID` :string : 设备ID
	 */
	disconnect(params:uSDK_disconnect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获得当前设备所有属性值。调用此接口前需要先调用getDeviceList`
	 * ========params==========
	 *
	 * `deviceID` :string : 设备ID
	 */
	attributes(params:uSDK_attributes_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获得报警信息。调用此接口前需要先调用getDeviceList`
	 * ========params==========
	 *
	 * `deviceID` :string : 设备ID
	 */
	alarms(params:uSDK_alarms_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询设备连接状态。调用此接口前需要先调用getDeviceList`
	 * ========params==========
	 *
	 * `deviceID` :string : 设备ID
	 */
	state(params:uSDK_state_Params, callback?: (ret:JSON) => void):void

	/**
	 * `执行设备控制，发送单命令。需要严格遵守ID文档规定，不能使用发送组命令的方法发送单命令。调用此接口前需要先调用getDeviceList`
	 * ========params==========
	 *
	 * `deviceID` :string : 设备ID
	 *
	 * `name` :string : 属性名
	 *
	 * `value` :string : 属性值
	 *
	 * `timeoutInterval` :number : （可选）超时时间，单位为秒，范围为12秒-120秒
	 */
	writeAttribute(params:uSDK_writeAttribute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `执行设备控制，发送组命令。组命令是由组命令号或组命令标识、单命令集合两部分组成的。调用此接口前需要先调用getDeviceList`
	 * ========params==========
	 *
	 * `deviceID` :string : 设备ID
	 *
	 * `operationName` :string : 要执行的设备操作命令（组命令号或组命令标识）
	 *
	 * `cmdList` :Array : 要执行的设备操作命令列表（单命令集合）
	 *
	 * `timeoutInterval` :number : （可选）超时时间，单位为秒，范围为12秒-120秒
	 */
	executeOperation(params:uSDK_executeOperation_Params, callback?: (ret:JSON) => void):void

}
interface uSDK_startSDK_Params {
	/**（可选）设置过滤设备类型*/ 
	types?:Array,

}

interface uSDK_configDevice_Params {
	/**无限网络名称，不支持中文，最大长度31*/ 
	ssid:string,

	/**无限网络密码，不支持中文，最大长度63*/ 
	pwd:string,

	/**设备mac地址*/ 
	mac:string,

	/**（可选）配置超时时间，单位为秒，范围为30秒-120秒*/ 
	timeoutInterval?:number,

	/**（可选）安全配置方法标示。true时，进行安全配置；false，普通配置*/ 
	security?:boolean,

}

interface uSDK_connect_Params {
	/**设备ID*/ 
	deviceID:string,

}

interface uSDK_disconnect_Params {
	/**设备ID*/ 
	deviceID:string,

}

interface uSDK_attributes_Params {
	/**设备ID*/ 
	deviceID:string,

}

interface uSDK_alarms_Params {
	/**设备ID*/ 
	deviceID:string,

}

interface uSDK_state_Params {
	/**设备ID*/ 
	deviceID:string,

}

interface uSDK_writeAttribute_Params {
	/**设备ID*/ 
	deviceID:string,

	/**属性名*/ 
	name:string,

	/**属性值*/ 
	value:string,

	/**（可选）超时时间，单位为秒，范围为12秒-120秒*/ 
	timeoutInterval?:number,

}

interface uSDK_executeOperation_Params {
	/**设备ID*/ 
	deviceID:string,

	/**要执行的设备操作命令（组命令号或组命令标识）*/ 
	operationName:string,

	/**要执行的设备操作命令列表（单命令集合）*/ 
	cmdList:Array,

	/**（可选）超时时间，单位为秒，范围为12秒-120秒*/ 
	timeoutInterval?:number,

}

interface updatethis {
	/**
	 * `手动更新APP 检测360应用市场是否有最新版本`
	 * ========params==========
	 *
	 * `color` :string : （必选）事例为：#FF0000 为弹出的提示框的文字以及按钮的颜色。
	 *
	 * `packagename` :string : （必选）即将更新的APP的正式包的包名
	 */
	updateAPP(params:updatethis_updateAPP_Params, callback?: (ret:JSON) => void):void

}
interface updatethis_updateAPP_Params {
	/**（必选）事例为：#FF0000 为弹出的提示框的文字以及按钮的颜色。*/ 
	color:string,

	/**（必选）即将更新的APP的正式包的包名*/ 
	packagename:string,

}

interface alipayGlobal {
	/**
	 * `调用支付宝客户端支付`
	 * ========params==========
	 *
	 * `orderInfo` :string : 支付信息（由订单信息，签名，签名类型组成），支付信息生成（此过程需放在服务器端）可参照支付宝官方文档[请求参数说明](https://global.alipay.com/doc/global/mobile_securitypay_pay_cn)
	 *
	 * `showLoading` :boolean : （可选项）是否显示loading（仅android支持）
	 */
	payOrder(params:alipayGlobal_payOrder_Params, callback?: (ret:JSON) => void):void

}
interface alipayGlobal_payOrder_Params {
	/**支付信息（由订单信息，签名，签名类型组成），支付信息生成（此过程需放在服务器端）可参照支付宝官方文档[请求参数说明](https://global.alipay.com/doc/global/mobile_securitypay_pay_cn)*/ 
	orderInfo:string,

	/**（可选项）是否显示loading（仅android支持）*/ 
	showLoading?:boolean,

}

interface amapTrack {
	/**
	 * `查询终端id，创建之后才会存在（仅Android支持）`
	 * ========params==========
	 *
	 * `serviceID` :number : 服务ID,由服务端获取，创建请参考猎鹰[rest api接口](https://lbs.amap.com/api/track/lieying-kaifa/api/service)
	 *
	 * `terminalName` :string : 要查询的终端名称
	 */
	queryTerminal(params:amapTrack_queryTerminal_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建终端id（仅Android支持）`
	 * ========params==========
	 *
	 * `serviceID` :number : 服务ID,由服务端获取，创建请参考猎鹰[rest api接口](https://lbs.amap.com/api/track/lieying-kaifa/api/service)
	 *
	 * `terminalName` :string : 要查询的终端名称
	 */
	addTerminal(params:amapTrack_addTerminal_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建轨迹（仅Android支持）`
	 * ========params==========
	 *
	 * `serviceID` :number : 服务ID,由服务端获取，创建请参考猎鹰[rest api接口](https://lbs.amap.com/api/track/lieying-kaifa/api/service)
	 *
	 * `terminalId` :number : 终端id
	 */
	addTrack(params:amapTrack_addTrack_Params, callback?: (ret:JSON) => void):void

	/** 设置开启服务、轨迹上传等监听（仅Android支持）*/ 
	setTrackLifecycleListener(callback?: (ret:JSON) => void):void

	/**
	 * `查询终端所有轨迹点（仅Android支持）`
	 * ========params==========
	 *
	 * `serviceID` :number : 服务ID,由服务端获取，创建请参考猎鹰[rest api接口](https://lbs.amap.com/api/track/lieying-kaifa/api/service)
	 *
	 * `terminalId` :number : 终端id
	 *
	 * `hours` :number : 终端在最近几个小时内的行驶里程
	 *
	 * `mapmatch` :number : （可选项）是否绑路
	 *
	 * `recoup` :number : （可选项）是否进行距离补偿
	 *
	 * `gap` :number : （可选项）距离补偿生效点间距，单位：米
	 *
	 * `orde` :number : （可选项）排序规则
	 *
	 * `page` :number : （可选项）第几页数据，分页当前仅对查询单条轨迹生效
	 *
	 * `pageSize` :number : （可选项）每页点个数，分页当前仅对查询单条轨迹生效
	 */
	queryHistoryTrack(params:amapTrack_queryHistoryTrack_Params, callback?: (ret:JSON) => void):void

}
interface amapTrack_queryTerminal_Params {
	/**服务ID,由服务端获取，创建请参考猎鹰[rest api接口](https://lbs.amap.com/api/track/lieying-kaifa/api/service)*/ 
	serviceID:number,

	/**要查询的终端名称*/ 
	terminalName:string,

}

interface amapTrack_addTerminal_Params {
	/**服务ID,由服务端获取，创建请参考猎鹰[rest api接口](https://lbs.amap.com/api/track/lieying-kaifa/api/service)*/ 
	serviceID:number,

	/**要查询的终端名称*/ 
	terminalName:string,

}

interface amapTrack_addTrack_Params {
	/**服务ID,由服务端获取，创建请参考猎鹰[rest api接口](https://lbs.amap.com/api/track/lieying-kaifa/api/service)*/ 
	serviceID:number,

	/**终端id*/ 
	terminalId:number,

}

interface amapTrack_queryHistoryTrack_Params {
	/**服务ID,由服务端获取，创建请参考猎鹰[rest api接口](https://lbs.amap.com/api/track/lieying-kaifa/api/service)*/ 
	serviceID:number,

	/**终端id*/ 
	terminalId:number,

	/**终端在最近几个小时内的行驶里程*/ 
	hours:number,

	/**（可选项）是否绑路*/ 
	mapmatch?:number,

	/**（可选项）是否进行距离补偿*/ 
	recoup?:number,

	/**（可选项）距离补偿生效点间距，单位：米*/ 
	gap?:number,

	/**（可选项）排序规则*/ 
	orde?:number,

	/**（可选项）第几页数据，分页当前仅对查询单条轨迹生效*/ 
	page?:number,

	/**（可选项）每页点个数，分页当前仅对查询单条轨迹生效*/ 
	pageSize?:number,

}

interface qiniuKodo {
	/**
	 * `上传文件`
	 * ========params==========
	 *
	 * `token` :string : (可选项)上传文件所需的签名，从服务端获取的上传token
	 *
	 * `objectKey` :string : 文件存储在云上的命名，如：test.jpg
	 *
	 * `filePath` :string : 上传对象，需上传本地文件路径，支持fs://、widget://等文件路径协议及真实路径
	 */
	putObject(params:qiniuKodo_putObject_Params, callback?: (ret:JSON) => void):void

}
interface qiniuKodo_putObject_Params {
	/**(可选项)上传文件所需的签名，从服务端获取的上传token*/ 
	token?:string,

	/**文件存储在云上的命名，如：test.jpg*/ 
	objectKey:string,

	/**上传对象，需上传本地文件路径，支持fs://、widget://等文件路径协议及真实路径*/ 
	filePath:string,

}

interface admob {
	/**
	 * `开启横幅广告`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）浏览器窗口的位置和大小，设置margin后，在不同手机上面会保持与父页面的各方向边距一致，而中间区域会自动扩充。建议使用margin布局，可以完美适配带smartBar的手机。
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `adUnitID` :string : （必填项）横幅广告单元id。
	 */
	startBanner(params:admob_startBanner_Params, callback?: (ret:JSON) => void):void

	/** 隐藏横幅广告*/ 
	hideBanner(callback?: (ret:JSON) => void):void

	/** 显示横幅广告*/ 
	showBanner(callback?: (ret:JSON) => void):void

	/** 关闭横幅广告*/ 
	closeBanner(callback?: (ret:JSON) => void):void

	/**
	 * `初始化插页广告`
	 * ========params==========
	 *
	 * `adUnitID` :string : （必填项）插页广告单元id。
	 */
	initInterstitial(params:admob_initInterstitial_Params, callback?: (ret:JSON) => void):void

	/** 显示插页广告*/ 
	startInterstitial(callback?: (ret:JSON) => void):void

}
interface admob_startBanner_Params {
	/**（可选项）浏览器窗口的位置和大小，设置margin后，在不同手机上面会保持与父页面的各方向边距一致，而中间区域会自动扩充。建议使用margin布局，可以完美适配带smartBar的手机。*/ 
	rect?:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）横幅广告单元id。*/ 
	adUnitID:string,

}

interface admob_initInterstitial_Params {
	/**（必填项）插页广告单元id。*/ 
	adUnitID:string,

}

interface vcloudLive {
	/** 监测当前app的麦克风，以及摄像头权限都是打开状态中*/ 
	requestMediaCapturerAccess():void

	/**
	 * `直播初始化。由于网易直播sdk的问题，Android 只能全屏直播。`
	 * ========params==========
	 *
	 * `x` :number : （必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；iOS 有效；
	 *
	 * `y` :number : （必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0；iOS 有效；
	 *
	 * `w` :number : （可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度；iOS 有效；
	 *
	 * `h` :number : （可选项）模块的高度；默认：所属的 Window 或 Frame 的高度；iOS 有效；
	 *
	 * `orientation` :number : （可选项）推流视频方向；1:PORTRAIT 2:UPDOWN 3:RIGHT 4:LEFT。
	 *
	 * `cameraPosition` :number : （可选项）开启前置或者后置摄像头;1:FRONT 2:BACK。
	 *
	 * `bitrate` :number : （可选项）推流的视频流比特率。
	 *
	 * `fps` :number : （可选项）推流的视频帧率。
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `streamingQuality` :boolean : （可选项）视频质量;1:LOW低清 352*288 2:MEDIUM标清 480*360 3:HIGH高清 640*480 4:SUPER高清 960*540
	 *
	 * `videoRenderMode` :string : （可选项）设置推流视频显示模式；1:采集多大分辨率，则显示多大分辨率 2:设置为16:9模式
	 *
	 * `filterOn` :boolean : （可选项）是否开启滤镜
	 *
	 * `pushUrl` :string : （必填项）网易云信的推流地址
	 */
	pushLiveInit(params:vcloudLive_pushLiveInit_Params, callback?: (ret:JSON) => void):void

	/** 开始直播*/ 
	startLive(callback?: (ret:JSON) => void):void

	/** 停止直播*/ 
	stopLive(callback?: (ret:JSON) => void):void

	/** 关闭直播*/ 
	closeLive(callback?: (ret:JSON) => void):void

	/**
	 * `播放音乐`
	 * ========params==========
	 *
	 * `path` :string : （必填项）mp3音乐路径文件，支持fs:// widget:// (备注：安卓不支持widget://)；
	 */
	startMusic(params:vcloudLive_startMusic_Params, callback?: (ret:JSON) => void):void

	/** 停止音乐*/ 
	stopMusic():void

	/** 切换摄像头*/ 
	switchCamera():void

	/** 开关闪光灯*/ 
	switchFlash():void

	/**
	 * `设置滤镜`
	 * ========params==========
	 *
	 * `filter` :string : （必填项）滤镜名称：(iOS:正常,黑白,自然,粉嫩,怀旧,美颜,android:正常,美颜)；
	 */
	filterType(params:vcloudLive_filterType_Params):void

}
interface vcloudLive_pushLiveInit_Params {
	/**（必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；iOS 有效；*/ 
	x:number,

	/**（必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0；iOS 有效；*/ 
	y:number,

	/**（可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度；iOS 有效；*/ 
	w?:number,

	/**（可选项）模块的高度；默认：所属的 Window 或 Frame 的高度；iOS 有效；*/ 
	h?:number,

	/**（可选项）推流视频方向；1:PORTRAIT 2:UPDOWN 3:RIGHT 4:LEFT。*/ 
	orientation?:number,

	/**（可选项）开启前置或者后置摄像头;1:FRONT 2:BACK。*/ 
	cameraPosition?:number,

	/**（可选项）推流的视频流比特率。*/ 
	bitrate?:number,

	/**（可选项）推流的视频帧率。*/ 
	fps?:number,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）视频质量;1:LOW低清 352*288 2:MEDIUM标清 480*360 3:HIGH高清 640*480 4:SUPER高清 960*540*/ 
	streamingQuality?:boolean,

	/**（可选项）设置推流视频显示模式；1:采集多大分辨率，则显示多大分辨率 2:设置为16:9模式*/ 
	videoRenderMode?:string,

	/**（可选项）是否开启滤镜*/ 
	filterOn?:boolean,

	/**（必填项）网易云信的推流地址*/ 
	pushUrl:string,

}

interface vcloudLive_startMusic_Params {
	/**（必填项）mp3音乐路径文件，支持fs:// widget:// (备注：安卓不支持widget://)；*/ 
	path:string,

}

interface vcloudLive_filterType_Params {
	/**（必填项）滤镜名称：(iOS:正常,黑白,自然,粉嫩,怀旧,美颜,android:正常,美颜)；*/ 
	filter:string,

}

interface meChat {
}
interface jd {
}
interface camhi {
	/**
	 * `从本地删除摄像机`
	 * ========params==========
	 *
	 * `uid` :string : 设备 uid
	 */
	deleteCamera(params:camhi_deleteCamera_Params):void

	/**
	 * `开启摄像机 sd 卡回放`
	 * ========params==========
	 *
	 * `uid` :string : 设备 uid
	 *
	 * `startTime` :string : 录像开始时间;时间戳，，iOS精确到秒，Android精确到毫秒，由searchRemoteRecordingWithTime接口获取
	 *
	 * `endTime` :string : 录像结束时间；时间戳，iOS精确到秒，Android精确到毫秒，由searchRemoteRecordingWithTime接口获取
	 *
	 * `eventType` :string : 类型，由searchRemoteRecordingWithTime接口获取（android不支持）
	 *
	 * `ret` :JSON : 开启结果；
	 */
	startPlayback(params:camhi_startPlayback_Params):void

	/**
	 * `获取摄像机本地录像`
	 * ========params==========
	 *
	 * `uid` :string : 设备 uid
	 *
	 * `ret` :JSON : 摄像机；
	 */
	recordingsForCamera(params:camhi_recordingsForCamera_Params):void

	/**
	 * `获取摄像机信息`
	 * ========params==========
	 *
	 * `uid` :string : 设备 uid
	 *
	 * `ret` :JSON : 摄像机信息；
	 */
	getDeciveInfo(params:camhi_getDeciveInfo_Params):void

}
interface camhi_deleteCamera_Params {
	/**设备 uid*/ 
	uid:string,

}

interface camhi_startPlayback_Params {
	/**设备 uid*/ 
	uid:string,

	/**录像开始时间;时间戳，，iOS精确到秒，Android精确到毫秒，由searchRemoteRecordingWithTime接口获取*/ 
	startTime:string,

	/**录像结束时间；时间戳，iOS精确到秒，Android精确到毫秒，由searchRemoteRecordingWithTime接口获取*/ 
	endTime:string,

	/**类型，由searchRemoteRecordingWithTime接口获取（android不支持）*/ 
	eventType:string,

	/**开启结果；*/ 
	ret:JSON,

}

interface camhi_recordingsForCamera_Params {
	/**设备 uid*/ 
	uid:string,

	/**摄像机；*/ 
	ret:JSON,

}

interface camhi_getDeciveInfo_Params {
	/**设备 uid*/ 
	uid:string,

	/**摄像机信息；*/ 
	ret:JSON,

}

interface acmPush {
	/** 统计App启动信息。*/ 
	onAppStart(callback?: (ret:JSON) => void):void

	/** 获取设备唯一标识。*/ 
	getDeviceId(callback?: (ret:JSON) => void):void

	/** 打开推送通道。*/ 
	turnOnPushChannel(callback?: (ret:JSON) => void):void

	/** 关闭推送通道。*/ 
	turnOffPushChannel(callback?: (ret:JSON) => void):void

	/** 查询通道状态。*/ 
	checkPushChannelStatus(callback?: (ret:JSON) => void):void

	/** 通道与账号绑定。*/ 
	bindAccount(callback?: (ret:JSON) => void):void

	/** 通道与账号取消绑定。*/ 
	unbindAccount(callback?: (ret:JSON) => void):void

	/** 绑定标签。*/ 
	bindTag(callback?: (ret:JSON) => void):void

	/** 取消绑定标签。*/ 
	unbindTag(callback?: (ret:JSON) => void):void

	/** 本设备标签查询。*/ 
	listTags(callback?: (ret:JSON) => void):void

	/** 设备添加别名。*/ 
	addAlias(callback?: (ret:JSON) => void):void

	/** 设备移除别名。*/ 
	removeAlias(callback?: (ret:JSON) => void):void

	/** 设置通知声音。*/ 
	setNotificationSound(callback?: (ret:JSON) => void):void

	/** 设置通知栏图标。*/ 
	setNotificationLargeIcon(callback?: (ret:JSON) => void):void

	/** 设置免打扰时段。*/ 
	setDoNotDisturb(callback?: (ret:JSON) => void):void

	/** 关闭免打扰。*/ 
	closeDoNotDisturbMode(callback?: (ret:JSON) => void):void

	/** 删除所有通知。*/ 
	clearNotifications(callback?: (ret:JSON) => void):void

	/** 绑定电话号。开发者可以设置在一定时间内，如果用户未收到或未点击推送，通过短信补发通知用户。具体方案可参考：[推送短信融合](https://help.aliyun.com/document_detail/57008.html?spm=a2c4g.11186623.2.113.71de2055dhA2BN)。*/ 
	bindPhoneNumber(callback?: (ret:JSON) => void):void

	/** 设备解绑电话号。*/ 
	unbindPhoneNumber(callback?: (ret:JSON) => void):void

	/** 添加消息监听。*/ 
	addMessageListener(callback?: (ret:JSON) => void):void

	/** 移除消息监听。*/ 
	removeMessageListener(callback?: (ret:JSON) => void):void

	/** 同步角标数到服务端*/ 
	syncBadgeNum(callback?: (ret:JSON) => void):void

}
interface moblinkpro {
	/**
	 * `获取mobid`
	 * ========params==========
	 *
	 * `path` :string : 在Mob后台配置的需要还原的控制器对应的路径。
	 *
	 * `params` :string : 此时传入的字典数据，在场景还原时能够重新得到。
	 */
	getMobId(params:moblinkpro_getMobId_Params, callback?: (ret:JSON) => void):void

	/** 获取场景数据*/ 
	restoreScene():void

}
interface moblinkpro_getMobId_Params {
	/**在Mob后台配置的需要还原的控制器对应的路径。*/ 
	path:string,

	/**此时传入的字典数据，在场景还原时能够重新得到。*/ 
	params:string,

}

interface sunmiScan {
	/** 设置监听*/ 
	setListener(callback?: (ret:JSON) => void):void

	/** 取消监听*/ 
	removeListener(callback?: (ret:JSON) => void):void

}
interface polyVideo {
}
interface TouchFaceID {
	/** 当前设备系统是否支持指纹识别功能*/ 
	isValid():void

	/** 弹出验证界面，验证用户指纹*/ 
	verify(callback?: (ret:JSON) => void):void

}
interface faceVerify {
	/**
	 * `一登 登录授权`
	 * ========params==========
	 *
	 * `phone` :number : (可选项)传入用户的手机号码，作为一登账号
	 *
	 * `ret` :JSON : 用户信息说明
	 *
	 * `err` :JSON : null
	 */
	login(params:faceVerify_login_Params):void

	/** 退出登录请求*/ 
	logout():void

	/** 判断用户的openID是否已经授权绑定一登账号*/ 
	isOpenIDAuthorized():void

	/** 解除当前用户一登账号的授权绑定*/ 
	userCancelAuthorization():void

	/** 调用用户的手机号登陆*/ 
	faceLoginWithPhoneUid():void

	/** 更新上传用户个人信息至一登用户账号*/ 
	updateUserInfo():void

	/** 行为属性上传接口,正常情况不调用。*/ 
	uploadUserBehaviourEvent():void

	/** 用户登录授权成功后，调用人脸验证功能即可实现二次验证，实现签到等功能的需求。*/ 
	faceVerify():void

	/** 获取人脸属性*/ 
	getFaceFeatures():void

}
interface faceVerify_login_Params {
	/**(可选项)传入用户的手机号码，作为一登账号*/ 
	phone?:number,

	/**用户信息说明*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface sharetrace {
}
interface bmobPush {
}
interface UIRongCloud {
	/**
	 * `初始化融云 SDK，调用 connect 连接前务必保证调用此方法`
	 * ========params==========
	 *
	 * `miPush` :JSON : (可选项)配置小米推送的信息
	 *
	 * `huaweiPush` :boolean : (可选项) 是否集成华为推送
	 */
	init(params:UIRongCloud_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `连接融云 IM 服务器，进行后续各种方法操作前务必要先调用此方法`
	 * ========params==========
	 *
	 * `token` :string : 从服务端获取的用户身份令牌（Token）
	 */
	connect(params:UIRongCloud_connect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `断开连接`
	 * ========params==========
	 *
	 * `isReceivePush` :boolean : 断开后是否接收 Push
	 */
	disconnect(params:UIRongCloud_disconnect_Params, callback?: (ret:JSON) => void):void

	/** 注销登录(不再接收 Push 消息)*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 设置连接状态变化的监听器，请在调用 init 方法之后，调用 connect 方法之前设置*/ 
	setConnectionStatusListener(callback?: (ret:JSON) => void):void

	/** 获取连接状态*/ 
	getConnectionStatus(callback?: (ret:JSON) => void):void

	/** 获取当前连接用户的信息*/ 
	getCurrentUserId(callback?: (ret:JSON) => void):void

	/**
	 * `设置私有部署的导航服务器和媒体服务器地址。 此方法要在 init() 前使用 可以支持设置 http://cn.xxx.com 或者 cn.xxx.com 如果设置成 cn.xxx.com，sdk 会组装成并仅支持 http:// 协议格式。 支持传入多个导航, 多个导航地址之间须以分号 ; 分隔`
	 * ========params==========
	 *
	 * `naviServer` :string : 私有部署的导航服务器地址。
	 *
	 * `fileServer` :string : 私有部署的媒体服务器地址，即文件和图片的上传地址。使用私有云时必须填写。
	 */
	setServerInfo(params:UIRongCloud_setServerInfo_Params):void

	/**
	 * `发送文字消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `text` :string : 消息的文字内容
	 *
	 * `extra` :string : 消息的附加信息
	 *
	 * `mentionedInfo` :JSON : @功能，当conversationType为GROUP或DISCUSSION有效；(ios不支持DISCUSSION)；注：＠ 消息推送会越过所有免打扰逻辑，给用户推送 Push 通知。
	 */
	sendTextMessage(params:UIRongCloud_sendTextMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `imagePath` :string : 图片的路径，支持 fs://，如：fs:///image/123.jpg
	 *
	 * `extra` :string : 消息的附加信息
	 *
	 * `isFull` :boolean : 是否发送原图
	 */
	sendImageMessage(params:UIRongCloud_sendImageMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送语音消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `voicePath` :string : 语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式
	 *
	 * `duration` :number : 语音消息的时长，单位为秒
	 *
	 * `extra` :string : 消息的附加信息
	 */
	sendVoiceMessage(params:UIRongCloud_sendVoiceMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `latitude` :number : 消息的文字内容
	 *
	 * `longitude` :number : 消息的文字内容
	 *
	 * `poi` :string : 消息的文字内容
	 *
	 * `imagePath` :string : 地图缩率图的路径，支持 fs://，如：fs:///location_thumb/123.jpg
	 *
	 * `extra` :string : 消息的附加信息
	 */
	sendLocationMessage(params:UIRongCloud_sendLocationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图文消息`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `title` :string : 消息的标题
	 *
	 * `description` :string : 消息的内容描述
	 *
	 * `imageUrl` :string : 消息图片的网络地址
	 *
	 * `url` :string : 消息的页面链接
	 *
	 * `extra` :string : 消息的附加信息
	 */
	sendRichContentMessage(params:UIRongCloud_sendRichContentMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送命令消息，可以用来实现任何自定义消息的发送`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `name` :string : 命令的名称
	 *
	 * `data` :string : 命令的数据
	 */
	sendCommandNotificationMessage(params:UIRongCloud_sendCommandNotificationMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送命令消息，您需要这种类型的消息时可以直接使用，不需要再自定义。此消息不保存、不计数。`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `name` :string : 命令的名称
	 *
	 * `data` :string : 命令的数据
	 */
	sendCommandMessage(params:UIRongCloud_sendCommandMessage_Params, callback?: (ret:JSON) => void):void

	/** 设置接收消息的监听器，请在调用 init 方法之后，调用 connect 方法之前设置*/ 
	setOnReceiveMessageListener(callback?: (ret:JSON) => void):void

	/**
	 * `设置是否将用户信息携带到消息中`
	 * ========params==========
	 *
	 * `attached` :boolean : 是否将用户信息携带到消息中
	 */
	setMessageAttachedUserInfo(params:UIRongCloud_setMessageAttachedUserInfo_Params):void

	/**
	 * `获取某一会话的通知状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getConversationNotificationStatus(params:UIRongCloud_getConversationNotificationStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置某一会话的通知状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `notificationStatus` :string : 会话通知提醒状态，参见 [会话通知提醒状态](!Constant#conversationNotificationStatus)
	 */
	setConversationNotificationStatus(params:UIRongCloud_setConversationNotificationStatus_Params, callback?: (ret:JSON) => void):void

	/** 设置本地消息不提示*/ 
	disableLocalNotification(callback?: (ret:JSON) => void):void

	/** 设置本地消息提示*/ 
	enableLocalNotification(callback?: (ret:JSON) => void):void

	/**
	 * `设置某一会话为置顶或者取消置顶`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `isTop` :boolean : 是否置顶
	 */
	setConversationToTop(params:UIRongCloud_setConversationToTop_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话的最新消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `count` :number : 要获取的消息数量
	 */
	getLatestMessages(params:UIRongCloud_getLatestMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某一会话的历史消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1
	 *
	 * `count` :number : 要获取的消息数量
	 */
	getHistoryMessages(params:UIRongCloud_getHistoryMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `按照消息类型获取历史消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 消息类型标识
	 *
	 * `oldestMessageId` :number : 最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1
	 *
	 * `count` :number : 要获取的消息数量
	 */
	getHistoryMessagesByObjectName(params:UIRongCloud_getHistoryMessagesByObjectName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取历史消息记录（特别说明：调用此方法需要开启历史消息漫游；当用户因换设备或重装app导致本地本地存储丢失的情况，可用此方法获取记录；此方法返回值中messageId均为0，融云服务器不会保存此值）`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)；不支持传入 RCConversationType.CHATROOM。
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `dateTime ` :any : 从该时间点开始获取消息。即：消息中的 sentTime；第一次可传 0，再次取值此参数可传入上一次获取的最后一条记录的sentTime值。
	 *
	 * `count` :number : 要获取的消息数量（1-20条）
	 */
	getRemoteHistoryMessages(params:UIRongCloud_getRemoteHistoryMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除指定的一条或者一组消息`
	 * ========params==========
	 *
	 * `messageIds` :Array : 要删除的消息 Id 数组
	 */
	deleteMessages(params:UIRongCloud_deleteMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清空某一会话的所有聊天消息记录`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	clearMessages(params:UIRongCloud_clearMessages_Params, callback?: (ret:JSON) => void):void

	/**
	 * `搜索本地历史消息`
	 * ========params==========
	 *
	 * `conversationTypes` :Array : 搜索的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `objectNames` :Array : 搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息
	 *
	 * `keyword` :string : 搜索的关键字
	 */
	searchConversations(params:UIRongCloud_searchConversations_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据会话,搜索本地历史消息。`
	 * ========params==========
	 *
	 * `conversationType` :string : 指定的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 指定的会话 id
	 *
	 * `keyword` :string : 搜索的关键字
	 *
	 * `count` :number : 返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回
	 *
	 * `beginTime` :number : 查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）
	 */
	searchMessages(params:UIRongCloud_searchMessages_Params, callback?: (ret:JSON) => void):void

	/** 清空指定时间戳之前的历史消息 **Notes：此方法从服务器端清除历史消息，但是必须先开通历史消息云存储功能。***/ 
	cleanHistoryMessages():void

	/** 获取所有未读消息数*/ 
	getTotalUnreadCount(callback?: (ret:JSON) => void):void

	/**
	 * `获取来自某用户（某会话）的未读消息数`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getUnreadCount(params:UIRongCloud_getUnreadCount_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某（些）会话类型的未读消息数`
	 * ========params==========
	 *
	 * `conversationTypes` :Array : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 */
	getUnreadCountByConversationTypes(params:UIRongCloud_getUnreadCountByConversationTypes_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置接收到的消息状态`
	 * ========params==========
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `receivedStatus` :string : 设置接收到的消息状态，参见 [接收到的消息状态](#receivedStatus)
	 */
	setMessageReceivedStatus(params:UIRongCloud_setMessageReceivedStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除某一会话的消息未读状态`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	clearMessagesUnreadStatus(params:UIRongCloud_clearMessagesUnreadStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置消息的附加信息，此信息只保存在本地`
	 * ========params==========
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `value` :string : 消息附加信息，最大 1024 字节
	 */
	setMessageExtra(params:UIRongCloud_setMessageExtra_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置消息发送状态`
	 * ========params==========
	 *
	 * `messageId` :number : 消息 Id
	 *
	 * `sentStatus ` :string : 发送出的消息的状态枚举，参见 [发送状态](#sentStatus)；
	 */
	setMessageSentStatus(params:UIRongCloud_setMessageSentStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `向会话中发送正在输入的状态。`
	 * ========params==========
	 *
	 * `conversationType` :string : （可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)
	 *
	 * `targetId` :string : 消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `objectName` :string : 正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。
	 */
	sendTypingStatus(params:UIRongCloud_sendTypingStatus_Params):void

	/** 监听对方输入状态*/ 
	addTypingStatusListener():void

	/**
	 * `获取某一会话的文字消息草稿`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	getTextMessageDraft(params:UIRongCloud_getTextMessageDraft_Params, callback?: (ret:JSON) => void):void

	/**
	 * `保存某一会话的文字消息草稿`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `content` :string : 草稿的文字内容
	 */
	saveTextMessageDraft(params:UIRongCloud_saveTextMessageDraft_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除某一会话的文字消息草稿`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 */
	clearTextMessageDraft(params:UIRongCloud_clearTextMessageDraft_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建讨论组`
	 * ========params==========
	 *
	 * `name` :string : 讨论组名称，如：当前所有成员的名字的组合。
	 *
	 * `userIdList` :Array : 讨论组成员 Id 列表
	 */
	createDiscussion(params:UIRongCloud_createDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取讨论组信息和设置`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 */
	getDiscussion(params:UIRongCloud_getDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置讨论组名称`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `name` :string : 讨论组名称
	 */
	setDiscussionName(params:UIRongCloud_setDiscussionName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加一名或者一组用户加入讨论组`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `userIdList` :Array : 邀请的用户 Id 列表
	 */
	addMemberToDiscussion(params:UIRongCloud_addMemberToDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `供创建者将某用户移出讨论组`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `userId` :string : 用户 Id
	 */
	removeMemberFromDiscussion(params:UIRongCloud_removeMemberFromDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `退出当前用户所在的某讨论组`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 */
	quitDiscussion(params:UIRongCloud_quitDiscussion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置讨论组成员邀请权限`
	 * ========params==========
	 *
	 * `discussionId` :string : 讨论组 Id
	 *
	 * `inviteStatus` :string : 邀请状态，默认为开放，参见 [讨论组邀请状态](!Constant#discussionInviteStatus)
	 */
	setDiscussionInviteStatus(params:UIRongCloud_setDiscussionInviteStatus_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置钱包页面的样式，请在打开红包之前设置`
	 * ========params==========
	 *
	 * `themeFontSize` :number : （可选项）标准字体大小
	 *
	 * `NavTitfontSize` :number : （可选项）标题栏字体大小
	 *
	 * `pageChargeFont` :number : （可选项）首页金额大小
	 *
	 * `pageTitleStr` :string : （可选项）钱包标题
	 *
	 * `themePageColor` :string : （可选项）钱包页顶部主题色
	 *
	 * `pageBtnColor` :string : （可选项）钱包页，充值、提现按钮颜色
	 *
	 * `themeBtnColor` :string : （可选项）按钮主题色
	 *
	 * `themeNavColor` :string : （可选项）导航条主题色
	 *
	 * `NavTitColor` :string : （可选项）标题颜色
	 */
	setWalletStyles(params:UIRongCloud_setWalletStyles_Params):void

	/**
	 * `初始化函数`
	 * ========params==========
	 *
	 * `partnerId` :string : 渠道ID（融云/魔方金融分配给贵公司的渠道名称）
	 */
	walletSDKWithPartnerId(params:UIRongCloud_walletSDKWithPartnerId_Params):void

	/**
	 * `初始化三方令牌`
	 * ========params==========
	 *
	 * `token` :string : 三方令牌
	 */
	walletSDKWithThirdToken(params:UIRongCloud_walletSDKWithThirdToken_Params):void

	/** 我的钱包页面*/ 
	openMyWallet():void

	/**
	 * `会话列表页`
	 * ========params==========
	 *
	 * `title` :string : （可选项）会话列表页面标题
	 *
	 * `isEnteredToCollectionWindow` :boolean : （可选项）当前会话列表是否为从聚合Cell点击进入的子会话列表，您在点击会话列表中的聚合Cell跳转到到子会话列表时，需要将此属性设置为true。
	 *
	 * `showConnectingStatus` :boolean : （可选项）当连接状态变化SDK自动重连时，是否在NavigationBar中显示连接中的提示。
	 *
	 * `conversationTypes` :Array : （可选项）设置需要显示哪些类型的会话参见 [会话类型](!Constant#conversationType)
	 *
	 * `collectionTypes` :Array : （可选项）设置在列表中需要聚合为一条显示的会话类型数组参见[会话类型](!Constant#conversationType)
	 *
	 * `avatarStyle` :string : （可选项）头像形状，(android不支持)
	 *
	 * `avatarSize` :JSON : （可选项）头像大小，(android不支持)
	 *
	 * `cellBgColor` :string : （可选项） Cell的背景颜色，(android不支持)
	 *
	 * `topCellBgColor` :string : （可选项） 置顶会话的Cell背景颜色，(android不支持)
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 */
	openConversationList(params:UIRongCloud_openConversationList_Params):void

	/**
	 * `会话页面`
	 * ========params==========
	 *
	 * `conversationType` :string : 消息的会话类型，参见 [会话类型](!Constant#conversationType)
	 *
	 * `targetId` :string : 目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等
	 *
	 * `title` :string : 页面标题
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 */
	openConversation(params:UIRongCloud_openConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `配置通过 openConversation 或 openConversationList接口打开的聊天页面的右上角按钮和输入框扩展面板按钮`
	 * ========params==========
	 *
	 * `pluginItems` :Array : (可选项) 聊天界面输入框扩展面板自定义显示各默认功能按钮
	 *
	 * `insertPluginItems` :Array : （可选项）聊天扩展功能面板添加自定义按钮信息组成的数组(android不支持)
	 *
	 * `rightIcon` :string : （可选项）聊天页面右上角按钮图标，要求本地路径（fs://、widget)
	 *
	 * `rightIcons` :Array : （可选项）聊天页面右上角按钮图标路径（要求本地路径fs://、widget://)组成的数组
	 *
	 * `dndIcon` :boolean : （可选项）聊天页面标题后面是否显示消息免打扰图标(此参数用来控制在调用setConversationNotificationStatus接口后是否在会话页面的标题栏后面显示消息免打扰图标)
	 */
	configChatButtons(params:UIRongCloud_configChatButtons_Params, callback?: (ret:JSON) => void):void

	/**
	 * `显示对方输入状态、撤销刚（120秒）发送的消息功能配置`
	 * ========params==========
	 *
	 * `messageRecall` :boolean : (可选项) 是否开启撤销刚发送消息的功能(android不支持；sdk默认会打开此功能)
	 *
	 * `typingStatus` :boolean : (可选项) 是否显示对方输入状态
	 */
	configChat(params:UIRongCloud_configChat_Params):void

	/** 关闭会话页面*/ 
	close():void

	/**
	 * `配置群聊相关功能。`
	 * ========params==========
	 *
	 * `messageMentioned` :boolean : (可选项) 是否开启@功能
	 *
	 * `members` :Array : 群组成员id列表，若不传则@功能和群组红包功能均会失效(android不支持)
	 *
	 * `membersInfo` :Array<JSON> : 群组成员信息列表(ios不支持)
	 */
	configGroupChat(params:UIRongCloud_configGroupChat_Params):void

	/**
	 * `设置用户头像，此方法在 connect 成功回调之后执行`
	 * ========params==========
	 *
	 * `userId` :string : 用户id(connect成功回调返回来的id)
	 *
	 * `nickName` :string : 用户昵称
	 *
	 * `avatarUrl` :string : 头像URI
	 */
	setUserAvatar(params:UIRongCloud_setUserAvatar_Params):void

	/** 添加点击聊天页面内头像的监听*/ 
	addAvatarListener():void

	/** 添加需要设置头像的时刻的监听*/ 
	addNeedAvatarListener():void

	/**
	 * `配置聊天页面的副标题；会在会话页面标题下方显示`
	 * ========params==========
	 *
	 * `titleConfig` :Array<JSON> : (必选项) 根据会话id配置会话页面的副标题
	 *
	 * `subTitleSize` :number : 可选， 副标题字体大小
	 *
	 * `subTitleColor` :string : 可选，副标题字体颜色
	 *
	 * `bgColor` :string : 可选，副标题背景颜色
	 *
	 * `bgHeight` :number : 可选，副标题背景的高度
	 */
	configChatSubTitle(params:UIRongCloud_configChatSubTitle_Params):void

	/**
	 * `刷新用户缓存数据。`
	 * ========params==========
	 *
	 * `userId` :string : 用户id(addNeedAvatarListener成功回调返回来的id)
	 *
	 * `nickName` :string : 用户昵称
	 *
	 * `avatarUrl` :string : 头像URI
	 */
	refreshUserInfoCache(params:UIRongCloud_refreshUserInfoCache_Params):void

	/**
	 * `发起单人通话`
	 * ========params==========
	 *
	 * `targetId` :string : 会话 id
	 *
	 * `type` :string : 会话媒体类型
	 */
	startSingleCall(params:UIRongCloud_startSingleCall_Params):void

	/**
	 * `发起多人通话`
	 * ========params==========
	 *
	 * `conversationType` :string : 会话类型
	 *
	 * `targetId` :string : 会话 id
	 *
	 * `customUI` :boolean : 是否使用自定义UI
	 *
	 * `callName` :string : 拨号时显示的对方名称（不传不显示）
	 *
	 * `type` :string : 会话媒体类型
	 *
	 * `userids` :Array : 参与者 id 列表
	 *
	 * `names` :Array : 参与者的昵称列表（与userids相对应）
	 */
	startMultiCall(params:UIRongCloud_startMultiCall_Params):void

	/**
	 * `邀请用户加入当前通话 （仅限讨论组和群组）`
	 * ========params==========
	 *
	 * `userIds` :Array : 邀请的用户id列表
	 *
	 * `observerUserIds` :Array : 邀请的观察者列表,没有观察者可以不传(ios不支持)
	 */
	addParticipants(params:UIRongCloud_addParticipants_Params):void

	/** 获取当前通话实体，通话实体中维护着当前通话的所有信息。*/ 
	getCallSession():void

	/**
	 * `设置本地视频属性，可用此接口设置本地视频分辨率，设置宽和高替换`
	 * ========params==========
	 *
	 * `profile` :string : （可选项）通话视频参数
	 *
	 * `swapWidthAndHeight` :boolean : （可选项）是否交换宽和高 (android不支持)
	 */
	setVideoProfile(params:UIRongCloud_setVideoProfile_Params):void

	/**
	 * `检查是否开启悬浮窗权限（该接口暂仅支持android）`
	 * ========params==========
	 *
	 * `needOpenPermissionSetting` :boolean : 是否打开权限设置页面
	 */
	checkDrawOverlaysPermission(params:UIRongCloud_checkDrawOverlaysPermission_Params):void

	/** 语音通话相关接口*/ 
	addRTCCallListener():void

	/**
	 * `当前用户加入某聊天室`
	 * ========params==========
	 *
	 * `chatRoomId` :string : 聊天室 Id
	 *
	 * `defMessageCount` :number : 进入聊天室拉取消息数目
	 */
	joinChatRoom(params:UIRongCloud_joinChatRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `当前用户退出某聊天室`
	 * ========params==========
	 *
	 * `chatRoomId` :string : 聊天室 Id
	 */
	quitChatRoom(params:UIRongCloud_quitChatRoom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将某个用户加到黑名单中`
	 * ========params==========
	 *
	 * `userId` :string : 要加入黑名单的用户 Id
	 */
	addToBlacklist(params:UIRongCloud_addToBlacklist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将个某用户从黑名单中移出`
	 * ========params==========
	 *
	 * `userId` :string : 要移出黑名单的用户 Id
	 */
	removeFromBlacklist(params:UIRongCloud_removeFromBlacklist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取某用户是否在黑名单中`
	 * ========params==========
	 *
	 * `userId` :string : 要查询的用户 Id
	 */
	getBlacklistStatus(params:UIRongCloud_getBlacklistStatus_Params, callback?: (ret:JSON) => void):void

	/** 获取当前用户的黑名单列表*/ 
	getBlacklist():void

	/**
	 * `设置消息通知免打扰时间`
	 * ========params==========
	 *
	 * `startTime` :string : 起始时间 格式 HH:MM:SS
	 *
	 * `spanMinutes ` :number : 间隔分钟数 0 < spanMinutes < 1440。
	 */
	setNotificationQuietHours(params:UIRongCloud_setNotificationQuietHours_Params, callback?: (ret:JSON) => void):void

	/** 移除消息通知免打扰时间*/ 
	removeNotificationQuietHours(callback?: (ret:JSON) => void):void

	/** 获取消息通知免打扰时间*/ 
	getNotificationQuietHours():void

}
interface UIRongCloud_init_Params {
	/**(可选项)配置小米推送的信息*/ 
	miPush?:JSON,

	/**(可选项) 是否集成华为推送*/ 
	huaweiPush?:boolean,

}

interface UIRongCloud_connect_Params {
	/**从服务端获取的用户身份令牌（Token）*/ 
	token:string,

}

interface UIRongCloud_disconnect_Params {
	/**断开后是否接收 Push*/ 
	isReceivePush:boolean,

}

interface UIRongCloud_setServerInfo_Params {
	/**私有部署的导航服务器地址。*/ 
	naviServer:string,

	/**私有部署的媒体服务器地址，即文件和图片的上传地址。使用私有云时必须填写。*/ 
	fileServer:string,

}

interface UIRongCloud_sendTextMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的文字内容*/ 
	text:string,

	/**消息的附加信息*/ 
	extra:string,

	/**@功能，当conversationType为GROUP或DISCUSSION有效；(ios不支持DISCUSSION)；注：＠ 消息推送会越过所有免打扰逻辑，给用户推送 Push 通知。*/ 
	mentionedInfo:JSON,

}

interface UIRongCloud_sendImageMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**图片的路径，支持 fs://，如：fs:///image/123.jpg*/ 
	imagePath:string,

	/**消息的附加信息*/ 
	extra:string,

	/**是否发送原图*/ 
	isFull:boolean,

}

interface UIRongCloud_sendVoiceMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**语音文件的路径，支持 fs://，如：fs:///voice/123.amr。文件要求为 AMR 格式*/ 
	voicePath:string,

	/**语音消息的时长，单位为秒*/ 
	duration:number,

	/**消息的附加信息*/ 
	extra:string,

}

interface UIRongCloud_sendLocationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的文字内容*/ 
	latitude:number,

	/**消息的文字内容*/ 
	longitude:number,

	/**消息的文字内容*/ 
	poi:string,

	/**地图缩率图的路径，支持 fs://，如：fs:///location_thumb/123.jpg*/ 
	imagePath:string,

	/**消息的附加信息*/ 
	extra:string,

}

interface UIRongCloud_sendRichContentMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息的标题*/ 
	title:string,

	/**消息的内容描述*/ 
	description:string,

	/**消息图片的网络地址*/ 
	imageUrl:string,

	/**消息的页面链接*/ 
	url:string,

	/**消息的附加信息*/ 
	extra:string,

}

interface UIRongCloud_sendCommandNotificationMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**命令的名称*/ 
	name:string,

	/**命令的数据*/ 
	data:string,

}

interface UIRongCloud_sendCommandMessage_Params {
	/**消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**命令的名称*/ 
	name:string,

	/**命令的数据*/ 
	data:string,

}

interface UIRongCloud_setMessageAttachedUserInfo_Params {
	/**是否将用户信息携带到消息中*/ 
	attached:boolean,

}

interface UIRongCloud_getConversationNotificationStatus_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface UIRongCloud_setConversationNotificationStatus_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**会话通知提醒状态，参见 [会话通知提醒状态](!Constant#conversationNotificationStatus)*/ 
	notificationStatus:string,

}

interface UIRongCloud_setConversationToTop_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**是否置顶*/ 
	isTop:boolean,

}

interface UIRongCloud_getLatestMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**要获取的消息数量*/ 
	count:number,

}

interface UIRongCloud_getHistoryMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1*/ 
	oldestMessageId:number,

	/**要获取的消息数量*/ 
	count:number,

}

interface UIRongCloud_getHistoryMessagesByObjectName_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**消息类型标识*/ 
	objectName:string,

	/**最后一条消息的 Id，获取此消息之前的 count 条消息，没有消息第一次调用应设置为: -1*/ 
	oldestMessageId:number,

	/**要获取的消息数量*/ 
	count:number,

}

interface UIRongCloud_getRemoteHistoryMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)；不支持传入 RCConversationType.CHATROOM。*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**从该时间点开始获取消息。即：消息中的 sentTime；第一次可传 0，再次取值此参数可传入上一次获取的最后一条记录的sentTime值。*/ 
	dateTime :any,

	/**要获取的消息数量（1-20条）*/ 
	count:number,

}

interface UIRongCloud_deleteMessages_Params {
	/**要删除的消息 Id 数组*/ 
	messageIds:Array,

}

interface UIRongCloud_clearMessages_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface UIRongCloud_searchConversations_Params {
	/**搜索的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

	/**搜索的消息类型。比如：RC:TxtMsg；详情参见：http://docs.rongcloud.cn/android_message.html#_内置内容类消息*/ 
	objectNames:Array,

	/**搜索的关键字*/ 
	keyword:string,

}

interface UIRongCloud_searchMessages_Params {
	/**指定的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**指定的会话 id*/ 
	targetId:string,

	/**搜索的关键字*/ 
	keyword:string,

	/**返回的搜索结果数量（iOS平台为返回的最大搜索结果数量）, 安卓平台传0时会返回所有搜索到的消息, 非0时,逐页返回*/ 
	count:number,

	/**查询记录的起始时间, 传0时从最新消息开始搜索。（单位：毫秒值）*/ 
	beginTime:number,

}

interface UIRongCloud_getUnreadCount_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface UIRongCloud_getUnreadCountByConversationTypes_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes:Array,

}

interface UIRongCloud_setMessageReceivedStatus_Params {
	/**消息 Id*/ 
	messageId:number,

	/**设置接收到的消息状态，参见 [接收到的消息状态](#receivedStatus)*/ 
	receivedStatus:string,

}

interface UIRongCloud_clearMessagesUnreadStatus_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface UIRongCloud_setMessageExtra_Params {
	/**消息 Id*/ 
	messageId:number,

	/**消息附加信息，最大 1024 字节*/ 
	value:string,

}

interface UIRongCloud_setMessageSentStatus_Params {
	/**消息 Id*/ 
	messageId:number,

	/**发送出的消息的状态枚举，参见 [发送状态](#sentStatus)；*/ 
	sentStatus :string,

}

interface UIRongCloud_sendTypingStatus_Params {
	/**（可选项）消息的会话类型，通过改变消息会话类型，可以发送单聊消息、讨论组消息、群聊消息、聊天室消息等，参见 [会话类型](#conversationType)*/ 
	conversationType?:string,

	/**消息的接收方 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**正在输入的消息的类型名，如文本消息，应该传类型名"RC:TxtMsg"。会话中的其他用户输入状态回执中会收到此消息类型，可以通过此消息类型，自定义不同的输入状态提示（如：正在输入、正在讲话、正在拍摄等）。*/ 
	objectName:string,

}

interface UIRongCloud_getTextMessageDraft_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface UIRongCloud_saveTextMessageDraft_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**草稿的文字内容*/ 
	content:string,

}

interface UIRongCloud_clearTextMessageDraft_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

}

interface UIRongCloud_createDiscussion_Params {
	/**讨论组名称，如：当前所有成员的名字的组合。*/ 
	name:string,

	/**讨论组成员 Id 列表*/ 
	userIdList:Array,

}

interface UIRongCloud_getDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

}

interface UIRongCloud_setDiscussionName_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**讨论组名称*/ 
	name:string,

}

interface UIRongCloud_addMemberToDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**邀请的用户 Id 列表*/ 
	userIdList:Array,

}

interface UIRongCloud_removeMemberFromDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**用户 Id*/ 
	userId:string,

}

interface UIRongCloud_quitDiscussion_Params {
	/**讨论组 Id*/ 
	discussionId:string,

}

interface UIRongCloud_setDiscussionInviteStatus_Params {
	/**讨论组 Id*/ 
	discussionId:string,

	/**邀请状态，默认为开放，参见 [讨论组邀请状态](!Constant#discussionInviteStatus)*/ 
	inviteStatus:string,

}

interface UIRongCloud_setWalletStyles_Params {
	/**（可选项）标准字体大小*/ 
	themeFontSize?:number,

	/**（可选项）标题栏字体大小*/ 
	NavTitfontSize?:number,

	/**（可选项）首页金额大小*/ 
	pageChargeFont?:number,

	/**（可选项）钱包标题*/ 
	pageTitleStr?:string,

	/**（可选项）钱包页顶部主题色*/ 
	themePageColor?:string,

	/**（可选项）钱包页，充值、提现按钮颜色*/ 
	pageBtnColor?:string,

	/**（可选项）按钮主题色*/ 
	themeBtnColor?:string,

	/**（可选项）导航条主题色*/ 
	themeNavColor?:string,

	/**（可选项）标题颜色*/ 
	NavTitColor?:string,

}

interface UIRongCloud_walletSDKWithPartnerId_Params {
	/**渠道ID（融云/魔方金融分配给贵公司的渠道名称）*/ 
	partnerId:string,

}

interface UIRongCloud_walletSDKWithThirdToken_Params {
	/**三方令牌*/ 
	token:string,

}

interface UIRongCloud_openConversationList_Params {
	/**（可选项）会话列表页面标题*/ 
	title?:string,

	/**（可选项）当前会话列表是否为从聚合Cell点击进入的子会话列表，您在点击会话列表中的聚合Cell跳转到到子会话列表时，需要将此属性设置为true。*/ 
	isEnteredToCollectionWindow?:boolean,

	/**（可选项）当连接状态变化SDK自动重连时，是否在NavigationBar中显示连接中的提示。*/ 
	showConnectingStatus?:boolean,

	/**（可选项）设置需要显示哪些类型的会话参见 [会话类型](!Constant#conversationType)*/ 
	conversationTypes?:Array,

	/**（可选项）设置在列表中需要聚合为一条显示的会话类型数组参见[会话类型](!Constant#conversationType)*/ 
	collectionTypes?:Array,

	/**（可选项）头像形状，(android不支持)*/ 
	avatarStyle?:string,

	/**（可选项）头像大小，(android不支持)*/ 
	avatarSize?:JSON,

	/**（可选项） Cell的背景颜色，(android不支持)*/ 
	cellBgColor?:string,

	/**（可选项） 置顶会话的Cell背景颜色，(android不支持)*/ 
	topCellBgColor?:string,

	/**导航条样式配置*/ 
	navigationBar:JSON,

}

interface UIRongCloud_openConversation_Params {
	/**消息的会话类型，参见 [会话类型](!Constant#conversationType)*/ 
	conversationType:string,

	/**目标 Id。根据不同的 conversationType，可能是用户 Id、讨论组 Id、群组 Id 或聊天室 Id 等*/ 
	targetId:string,

	/**页面标题*/ 
	title:string,

	/**导航条样式配置*/ 
	navigationBar:JSON,

}

interface UIRongCloud_configChatButtons_Params {
	/**(可选项) 聊天界面输入框扩展面板自定义显示各默认功能按钮*/ 
	pluginItems?:Array,

	/**（可选项）聊天扩展功能面板添加自定义按钮信息组成的数组(android不支持)*/ 
	insertPluginItems?:Array,

	/**（可选项）聊天页面右上角按钮图标，要求本地路径（fs://、widget)*/ 
	rightIcon?:string,

	/**（可选项）聊天页面右上角按钮图标路径（要求本地路径fs://、widget://)组成的数组*/ 
	rightIcons?:Array,

	/**（可选项）聊天页面标题后面是否显示消息免打扰图标(此参数用来控制在调用setConversationNotificationStatus接口后是否在会话页面的标题栏后面显示消息免打扰图标)*/ 
	dndIcon?:boolean,

}

interface UIRongCloud_configChat_Params {
	/**(可选项) 是否开启撤销刚发送消息的功能(android不支持；sdk默认会打开此功能)*/ 
	messageRecall?:boolean,

	/**(可选项) 是否显示对方输入状态*/ 
	typingStatus?:boolean,

}

interface UIRongCloud_configGroupChat_Params {
	/**(可选项) 是否开启@功能*/ 
	messageMentioned?:boolean,

	/**群组成员id列表，若不传则@功能和群组红包功能均会失效(android不支持)*/ 
	members:Array,

	/**群组成员信息列表(ios不支持)*/ 
	membersInfo:Array<JSON>,

}

interface UIRongCloud_setUserAvatar_Params {
	/**用户id(connect成功回调返回来的id)*/ 
	userId:string,

	/**用户昵称*/ 
	nickName:string,

	/**头像URI*/ 
	avatarUrl:string,

}

interface UIRongCloud_configChatSubTitle_Params {
	/**(必选项) 根据会话id配置会话页面的副标题*/ 
	titleConfig:Array<JSON>,

	/**可选， 副标题字体大小*/ 
	subTitleSize?:number,

	/**可选，副标题字体颜色*/ 
	subTitleColor?:string,

	/**可选，副标题背景颜色*/ 
	bgColor?:string,

	/**可选，副标题背景的高度*/ 
	bgHeight?:number,

}

interface UIRongCloud_refreshUserInfoCache_Params {
	/**用户id(addNeedAvatarListener成功回调返回来的id)*/ 
	userId:string,

	/**用户昵称*/ 
	nickName:string,

	/**头像URI*/ 
	avatarUrl:string,

}

interface UIRongCloud_startSingleCall_Params {
	/**会话 id*/ 
	targetId:string,

	/**会话媒体类型*/ 
	type:string,

}

interface UIRongCloud_startMultiCall_Params {
	/**会话类型*/ 
	conversationType:string,

	/**会话 id*/ 
	targetId:string,

	/**是否使用自定义UI*/ 
	customUI:boolean,

	/**拨号时显示的对方名称（不传不显示）*/ 
	callName:string,

	/**会话媒体类型*/ 
	type:string,

	/**参与者 id 列表*/ 
	userids:Array,

	/**参与者的昵称列表（与userids相对应）*/ 
	names:Array,

}

interface UIRongCloud_addParticipants_Params {
	/**邀请的用户id列表*/ 
	userIds:Array,

	/**邀请的观察者列表,没有观察者可以不传(ios不支持)*/ 
	observerUserIds:Array,

}

interface UIRongCloud_setVideoProfile_Params {
	/**（可选项）通话视频参数*/ 
	profile?:string,

	/**（可选项）是否交换宽和高 (android不支持)*/ 
	swapWidthAndHeight?:boolean,

}

interface UIRongCloud_checkDrawOverlaysPermission_Params {
	/**是否打开权限设置页面*/ 
	needOpenPermissionSetting:boolean,

}

interface UIRongCloud_joinChatRoom_Params {
	/**聊天室 Id*/ 
	chatRoomId:string,

	/**进入聊天室拉取消息数目*/ 
	defMessageCount:number,

}

interface UIRongCloud_quitChatRoom_Params {
	/**聊天室 Id*/ 
	chatRoomId:string,

}

interface UIRongCloud_addToBlacklist_Params {
	/**要加入黑名单的用户 Id*/ 
	userId:string,

}

interface UIRongCloud_removeFromBlacklist_Params {
	/**要移出黑名单的用户 Id*/ 
	userId:string,

}

interface UIRongCloud_getBlacklistStatus_Params {
	/**要查询的用户 Id*/ 
	userId:string,

}

interface UIRongCloud_setNotificationQuietHours_Params {
	/**起始时间 格式 HH:MM:SS*/ 
	startTime:string,

	/**间隔分钟数 0 < spanMinutes < 1440。*/ 
	spanMinutes :number,

}

interface aMap {
	/**
	 * `打开高德地图`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `center` :number : （可选项）打开地图时设置的中心点经纬度，若不传则默认打开北京市为中心的地图
	 *
	 * `zoomLevel` :number : （可选项）设置高德地图缩放等级，取值范围：3-18级
	 *
	 * `showUserLocation` :boolean : （可选项）是否在地图上显示用户位置
	 *
	 * `userLocationCanShowCallout` :boolean : （可选项）地图上显示用户位置时，是否支持点击位置弹出提示，只支持iOS端
	 *
	 * `showsAccuracyRing` :boolean : （可选项）是否在地图上显示用户位置的精度圈儿
	 *
	 * `isGestureScaleByMapCenter` :boolean : (可选项) 设置是否以地图中心点缩放 (ios不支持)
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:aMap_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭高德地图*/ 
	close():void

	/** 显示高德地图*/ 
	show():void

	/** 隐藏高德地图*/ 
	hide():void

	/**
	 * `重设地图的显示区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 */
	setRect(params:aMap_setRect_Params):void

	/**
	 * `获取当前位置信息，若要支持后台定位需[配置 [config.xml](/APICloud/技术专题/app-config-manual) 文件 location 字段](//docs.apicloud.com/APICloud/技术专题/app-config-manual#14-2)。**iOS上调用本接口需先 open，在iOS 平台上 showUserLocation 为 false 时此接口不可用**`
	 * ========params==========
	 *
	 * `autoStop` :boolean : （可选项）获取到位置信息后是否自动停止定位
	 *
	 * `enableLocInForeground` :boolean : (可选项) 开发者应用如果有后台定位需求，在退到后台的时候，为了保证定位可以在后台一直运行，可以设置为true，适配android 8后台无法定位问题；注：单次定位(autoStop为true时)无效(ios不支持)
	 *
	 * `notification` :JSON : (必选项) 通知栏的提示，此字段只有在enableLocInForeground设置为true时有效。(ios不支持)
	 */
	getLocation(params:aMap_getLocation_Params, callback?: (ret:JSON) => void):void

	/** 停止定位*/ 
	stopLocation():void

	/**
	 * `根据地址查找经纬度，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `city` :string : （可选项）所要搜索的地址所在的城市，cityname（中文或中文全拼）、citycode、adcode
	 *
	 * `address` :string : 完整的地址信息
	 */
	getCoordsFromName(params:aMap_getCoordsFromName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据经纬度查找地址信息，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `lon` :number : 经度
	 *
	 * `lat` :number : 纬度
	 */
	getNameFromCoords(params:aMap_getNameFromCoords_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取地图两点之间的距离，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `start` :JSON : 起点经纬度
	 *
	 * `end` :JSON : 终点经纬度
	 */
	getDistance(params:aMap_getDistance_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否在地图上显示用户位置`
	 * ========params==========
	 *
	 * `isShow` :boolean : （可选项）是否显示用户位置
	 *
	 * `imagePath` :string : (可选项)当前位置显示图标的图片，要求本地路径支持fs,widget
	 *
	 * `imageSize` :JSON : (可选项)设置的当前位置显示图标的大小，当imagePath 为空时，本参数无意义。
	 *
	 * `showsAccuracyRing` :boolean : （可选项）精度圈是否显示
	 *
	 * `showsHeadingIndicator` :boolean : （可选项）是否显示方向指示(setTrackingMode接口heading模式开启)
	 *
	 * `enablePulseAnnimation` :boolean : （可选项）内部蓝色圆点是否使用律动效果(android不支持)
	 *
	 * `fillColor` :string : （可选项）精度圈 填充颜色
	 *
	 * `strokeColor` :string : （可选项）精度圈 边线颜色
	 *
	 * `dotBgColor` :string : （可选项）定位点背景色(android不支持)
	 *
	 * `dotFillColor` :string : （可选项）定位点蓝色圆点颜色(android不支持)
	 *
	 * `lineWidth` :number : （可选项）精度圈 边线宽度
	 */
	showUserLocation(params:aMap_showUserLocation_Params):void

	/**
	 * `设置跟踪类型`
	 * ========params==========
	 *
	 * `trackingMode` :string : （可选项）用户当前位置显示形式
	 *
	 * `animation` :boolean : （可选项）设置地图的当前位置标记的追踪状态时，是否带动画效果，**暂仅支持  iOS 平台**
	 */
	setTrackingMode(params:aMap_setTrackingMode_Params):void

	/**
	 * `根据经纬度设置高德地图中心点`
	 * ========params==========
	 *
	 * `coords` :JSON : （可选项）中心点的经纬度
	 *
	 * `animation` :boolean : （可选项）设置地图的中心点时，是否带动画效果
	 */
	setCenter(params:aMap_setCenter_Params):void

	/** 获取高德地图中心点坐标*/ 
	getCenter(callback?: (ret:JSON) => void):void

	/**
	 * `设置高德地图缩放等级`
	 * ========params==========
	 *
	 * `level` :number : （可选项）地图比例尺级别，取值范围：0.01-20
	 *
	 * `animation` :boolean : （可选项）地图缩放时，是否带动画效果
	 */
	setZoomLevel(params:aMap_setZoomLevel_Params):void

	/** 获取地图缩放级别（0.01-20）*/ 
	getZoomLevel(callback?: (ret:JSON) => void):void

	/**
	 * `设置高德地图相关属性`
	 * ========params==========
	 *
	 * `type` :string : （可选项）设置地图类型
	 *
	 * `trafficOn` :boolean : （可选项）是否打开实时路况
	 *
	 * `zoomEnable` :boolean : （可选项）捏合手势是否可以缩放地图
	 *
	 * `scrollEnable` :boolean : （可选项）拖动手势是否可以移动地图
	 *
	 * `overlookEnabled` :boolean : （可选项）是否支持俯视旋转
	 *
	 * `rotateEnabled` :boolean : （可选项）是否支持平面旋转
	 *
	 * `building` :boolean : （可选项）是否隐藏楼块，**俯视角度不为零时的楼快效果，Android 平台上默认打开状态，且不可改变**
	 */
	setMapAttr(params:aMap_setMapAttr_Params):void

	/**
	 * `设置高德地图旋转角度(逆时针为正向)`
	 * ========params==========
	 *
	 * `degree` :number : （可选项）地图旋转角度，取值范围：-180° - 180°
	 *
	 * `animation` :boolean : （可选项）地图旋转时，是否带动画效果
	 *
	 * `duration` :number : （可选项）地图旋转动画时长，单位秒（s）
	 */
	setRotation(params:aMap_setRotation_Params):void

	/** 获取地图当前旋转角度*/ 
	getRotation(callback?: (ret:JSON) => void):void

	/**
	 * `设置地图俯视角度(范围为[0.f, 60.f])`
	 * ========params==========
	 *
	 * `degree` :number : （可选项）地图俯视角度，取值范围：0° - 60°
	 *
	 * `animation` :boolean : （可选项）地图俯视角度转动时，是否带动画效果
	 *
	 * `duration` :number : （可选项）地图俯视角度转动动画时长，单位秒（s）
	 */
	setOverlook(params:aMap_setOverlook_Params):void

	/** 获取地图当前俯视角度*/ 
	getOverlook(callback?: (ret:JSON) => void):void

	/**
	 * `设置地图显示范围（矩形区域）`
	 * ========params==========
	 *
	 * `lbLon` :number : 矩形区域左下角的经度
	 *
	 * `lbLat` :number : 矩形区域左下角的纬度
	 *
	 * `rtLon` :number : 矩形区域右上角的经度
	 *
	 * `rtLat` :number : 矩形区域右上角的纬度
	 *
	 * `animation` :boolean : （可选项）设置地图的区域时，是否带动画效果
	 */
	setRegion(params:aMap_setRegion_Params):void

	/** 获取地图显示范围（矩形区域）*/ 
	getRegion(callback?: (ret:JSON) => void):void

	/**
	 * `设置高德地图比例尺`
	 * ========params==========
	 *
	 * `show` :boolean : （可选项）是否显示比例尺
	 *
	 * `position` :JSON : （可选项）比例尺的位置，设定坐标以地图左上角为原点，**在 Android 平台上为固定位置，本参数无效**
	 */
	setScaleBar(params:aMap_setScaleBar_Params):void

	/**
	 * `设置高德地图指南针`
	 * ========params==========
	 *
	 * `show` :boolean : （可选项）是否显示指南针
	 *
	 * `position` :JSON : （可选项）指南针的位置，设定坐标以地图左上角为原点，**在 Android 平台上为固定位置，本参数无效**
	 *
	 * `img` :boolean : （可选项）自定义指南针图标图片路径，要求本地路径（fs://、widget://），**Android 平台上忽略本参数**
	 */
	setCompass(params:aMap_setCompass_Params):void

	/**
	 * `设置高德地图 logo 的位置`
	 * ========params==========
	 *
	 * `position` :string : （可选项）高德地图 logo 的位置，取值范围如下：
	 */
	setLogo(params:aMap_setLogo_Params):void

	/**
	 * `在指定区域内截图(默认会包含该区域内的标注)`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）所截取区域的位置和大小（相对于地图区域）
	 *
	 * `path` :string : 截图保存路径，要求本地路径（fs://），如：fs://aMap/Snapshot.png
	 *
	 * `quality` :number : 截图图片质量，仅对iOS端图片格式为jpg时有效，0.1-2
	 */
	takeSnapshotInRect(params:aMap_takeSnapshotInRect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断已知点是否在指定的多边形区域内`
	 * ========params==========
	 *
	 * `point` :JSON : 已知点的地理坐标
	 *
	 * `points` :Array : 多边形的各个点组成的数组
	 *
	 * `ret` :JSON : null
	 */
	isPolygonContainsPoint(params:aMap_isPolygonContainsPoint_Params):void

	/**
	 * `判断已知点是否在指定的圆形区域内`
	 * ========params==========
	 *
	 * `point` :JSON : 已知点的地理坐标
	 *
	 * `circle` :JSON : 圆形信息
	 *
	 * `ret` :JSON : null
	 */
	isCircleContainsPoint(params:aMap_isCircleContainsPoint_Params):void

	/**
	 * `经纬度坐标与地图容器像素坐标相互转换，经纬度和x，y值传一种即可。`
	 * ========params==========
	 *
	 * `lon` :number : （可选项）原始地理坐标经度
	 *
	 * `lat` :number : （可选项）原始地理坐标纬度
	 *
	 * `x` :number : （可选项）地图容器的 x 坐标
	 *
	 * `y` :number : （可选项）地图容器的 y 坐标
	 */
	interconvertCoords(params:aMap_interconvertCoords_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听地图相关事件`
	 * ========params==========
	 *
	 * `name` :string : 地图相关事件名称
	 */
	addEventListener(params:aMap_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `停止监听地图相关事件`
	 * ========params==========
	 *
	 * `name` :string : 地图相关事件名称
	 */
	removeEventListener(params:aMap_removeEventListener_Params):void

	/** 地图中英文切换*/ 
	setMapLanguage():void

	/** 是否为显示室内地图状态*/ 
	isShowsIndoorMap():void

	/**
	 * `设置是否显示室内地图`
	 * ========params==========
	 *
	 * `isShows` :boolean : （可选项）是否显示室内地图
	 */
	showsIndoorMap(params:aMap_showsIndoorMap_Params):void

	/** 是否为显示室内地图默认控件*/ 
	isShowsIndoorMapControl():void

	/**
	 * `设置是否显示室内地图默认控件`
	 * ========params==========
	 *
	 * `isShows` :boolean : （可选项）是否显示室内地图默认控件
	 */
	showsIndoorMapControl(params:aMap_showsIndoorMapControl_Params):void

	/** 获取默认室内地图控件的最大宽高*/ 
	indoorMapControlSize():void

	/**
	 * `设置默认室内地图控件位置`
	 * ========params==========
	 *
	 * `point` :JSON : （可选项）左上角点位置
	 */
	setIndoorMapControlOrigin(params:aMap_setIndoorMapControlOrigin_Params):void

	/**
	 * `设置当前室内地图楼层数`
	 * ========params==========
	 *
	 * `floorIndex` :number : （可选项）要设置的楼层数
	 */
	setCurrentIndoorMapFloorIndex(params:aMap_setCurrentIndoorMapFloorIndex_Params):void

	/** 清空室内地图缓存*/ 
	clearIndoorMapCache():void

	/**
	 * `在地图上添加标注信息，标注大小默认为 icons 内第一张图片大小的二分之一。**图标中轴线的下边缘点为坐标基准点**`
	 * ========params==========
	 *
	 * `annotations` :Array : 图标标注信息组成的数组
	 *
	 * `icons` :Array : （可选项）指定的标注图标路径组成的数组，若包含多张图片，则此标注显示为多图联动的 gif ，要求本地路径（fs://、widget://）
	 *
	 * `selectedIcons` :Array : (可选项) 指定的标注图标路径组成的数组，若包含多张图片，则此标注显示为多图联动的 gif ，要求本地路径（fs://、widget://），
	 *
	 * `draggable` :boolean : （可选项）所添加的标注是否可被拖动
	 *
	 * `timeInterval` :number : （可选项）若添加的标注为动态图，则本参数表示动态图循环播放一次的时间，单位为秒（s），否则本参数无效
	 */
	addAnnotations(params:aMap_addAnnotations_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消标注选中状态`
	 * ========params==========
	 *
	 * `id` :number : 指定的标注 id（仅iOS支持，android仅一个为选中状态  调用此接口取消当前选中标注选中状态）
	 */
	cancelAnnotationSelected(params:aMap_cancelAnnotationSelected_Params):void

	/**
	 * `获取指定标注的经纬度`
	 * ========params==========
	 *
	 * `id` :number : 指定的标注 id
	 */
	getAnnotationCoords(params:aMap_getAnnotationCoords_Params, callback?: (ret:JSON) => void):void

	/** 设置某个已添加标注的经纬度*/ 
	setAnnotationCoords():void

	/**
	 * `判断标注是否存在`
	 * ========params==========
	 *
	 * `id` :number : 指定的标注 id
	 */
	annotationExist(params:aMap_annotationExist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置点击标注时弹出的气泡信息`
	 * ========params==========
	 *
	 * `id` :number : 要设置气泡的标注 id
	 *
	 * `bgImg` :string : （可选项）弹出气泡的背景图片，要求本地路径（fs://、widget://），中轴线下边缘点为气泡弹出点
	 *
	 * `content` :JSON : 弹出气泡的内容
	 *
	 * `styles` :JSON : 弹出气泡的样式
	 */
	setBubble(params:aMap_setBubble_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出指定标注的气泡`
	 * ========params==========
	 *
	 * `id` :number : 气泡的 id
	 */
	popupBubble(params:aMap_popupBubble_Params):void

	/**
	 * `关闭已弹出的气泡`
	 * ========params==========
	 *
	 * `id` :number : 气泡的 id
	 */
	closeBubble(params:aMap_closeBubble_Params):void

	/**
	 * `在地图上添加布告牌，**布告牌图标中轴线的下边缘点为坐标基准点**`
	 * ========params==========
	 *
	 * `id` :number : 布告牌的 id，**注意：本 id 不可与 addAnnotations 接口内的 id 相同**
	 *
	 * `coords` :JSON : 布告牌所在位置的坐标
	 *
	 * `bgImg` :string : 布告牌的背景图片，要求本地路径（fs://、widget://）
	 *
	 * `content` :JSON : 布告牌的内容
	 *
	 * `draggable` :boolean : （可选项）所添加的布告牌是否可被拖动
	 *
	 * `styles` :JSON : 布告牌的样式
	 *
	 * `selectedStyles` :JSON : 布告牌选中后的样式
	 *
	 * `useIllusPoint` :boolean : （可选项）是否以插图中轴线底部为基准点，此参数设置为true背景设置无效。此参数为true需要styles.size.height 等于styles.illusRect.h + styles.illusRect.y
	 *
	 * `ret` :JSON : null
	 */
	addBillboard(params:aMap_addBillboard_Params):void

	/**
	 * `在地图上添加网页布告牌，**布告牌图标中轴线的下边缘点为坐标基准点**`
	 * ========params==========
	 *
	 * `id` :number : 布告牌的 id，**注意：本 id 不可与 addAnnotations 接口内的 id 相同**
	 *
	 * `coords` :JSON : 布告牌所在位置的坐标
	 *
	 * `bg` :string : 布告牌的背景图片，要求本地路径（fs://、widget://）（仅ios支持）
	 *
	 * `url` :string : （可选项）网页布告牌的网页地址,当data参数不为空时，url将做为baseUrl，data中的html引用的资源文件根路径以该url为基础。
	 *
	 * `data` :string : （可选项）页面加载的数据内容，可以为html片段或者整张html文件的数据,当data为空或者不传的时候， 会将url地址作为整个加载进去
	 *
	 * `size` :JSON : （可选项）气泡的大小配置
	 */
	addWebBoard(params:aMap_addWebBoard_Params):void

	/** 添加网页布告牌点击监听*/ 
	addWebBoardListener():void

	/** 移除网页布告牌点击监听*/ 
	removeWebBoardListener():void

	/**
	 * `在地图上添加可移动、旋转的标注图标，**图标的中心点为坐标基准点**`
	 * ========params==========
	 *
	 * `annotations` :Array : 图标标注信息组成的数组
	 */
	addMobileAnnotations(params:aMap_addMobileAnnotations_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移动地图上已添加的可移动、旋转的标注图标，**在移动动画开始前，会先做 0.3 秒的旋转动画，使所移动的图标中间轴线顶端对准终点坐标点。在 Android 平台上，如果标注添加到地图当前可视区域以外的区域，则不可以移动该标注**`
	 * ========params==========
	 *
	 * `id` :number : 要移动的标注的 id
	 *
	 * `duration` :number : （可选项）标注图标移动动画的时间，单位为秒（s），**不包括旋转动画时间**
	 *
	 * `end` :JSON : 终点经纬度
	 */
	moveAnnotation(params:aMap_moveAnnotation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除指定 id 的标注（可移动、不可移动）或布告牌`
	 * ========params==========
	 *
	 * `ids` :Array : （可选项）要移除的标注或布告牌id（数字），若为空或不传，则移除所有标注
	 */
	removeAnnotations(params:aMap_removeAnnotations_Params):void

	/**
	 * `设置点击标注时弹出的气泡信息`
	 * ========params==========
	 *
	 * `id` :number : 要设置气泡的标注 id
	 *
	 * `url` :string : （可选项）弹出气泡的网页地址，用户点击标注时，模块在标注上弹出窗口（类似open一个frame，模块会用webview去加载此url的网页显示出来）,当data参数不为空时，url将做为baseUrl，data中的html引用的资源文件根路径以该url为基础。
	 *
	 * `data` :string : （可选项）页面加载的数据内容，可以为html片段或者整张html文件的数据,当data为空或者不传的时候， 会将url地址作为整个加载进去
	 *
	 * `size` :JSON : （可选项）气泡的大小配置
	 *
	 * `bg` :string : （可选项）弹出气泡的背景设置，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）
	 */
	setWebBubble(params:aMap_setWebBubble_Params):void

	/** 添加网页气泡点击监听*/ 
	addWebBubbleListener():void

	/** 移除网页气泡点击监听*/ 
	removeWebBubbleListener():void

	/** 给地图上的标注添加移动动画*/ 
	addMoveAnimation():void

	/**
	 * `取消地图上的标注移动动画`
	 * ========params==========
	 *
	 * `id` :string : 要移除的标注或布告牌id（数字）
	 */
	cancelMoveAnimation(params:aMap_cancelMoveAnimation_Params):void

	/**
	 * `显示指定 id 的标注（可移动、不可移动）或布告牌`
	 * ========params==========
	 *
	 * `animation` :boolean : （可选项）移动地图以显示标注时是否带动画效果
	 *
	 * `ids` :Array : （可选项）要显示的标注或布告牌id（数字），若为空或不传，则显示所有标注
	 *
	 * `insets` :JSON : （可选项）标注显示的区域上下左右边距
	 */
	showAnnotations(params:aMap_showAnnotations_Params):void

	/**
	 * `在地图上添加热力点图层`
	 * ========params==========
	 *
	 * `id` :number : 热力点图层的id，**不可与覆盖物类其它接口添加得图层 id 一样**
	 *
	 * `data` :Array : 为字符串类型时表示热力点信息文件路径，要求本地路径（widget://、fs://）；若传数组类型则表示直接将热力点数据传给模块
	 *
	 * `styles` :JSON : （可选项）直线的样式
	 */
	addHeatMap(params:aMap_addHeatMap_Params):void

	/**
	 * `刷新在地图上添加热力点图层`
	 * ========params==========
	 *
	 * `id` :number : 热力点图层的id
	 *
	 * `styles` :JSON : （可选项）直线的样式
	 */
	refreshHeatMap(params:aMap_refreshHeatMap_Params):void

	/**
	 * `在地图上添加点聚合图层`
	 * ========params==========
	 *
	 * `id` :number : 点聚合图层的id，**不可与覆盖物类其它接口添加得图层 id 一样**
	 *
	 * `path` :string : 聚合点信息文件路径，要求本地路径（widget://、fs://）
	 *
	 * `styles` :JSON : （可选项）直线的样式
	 */
	addMultiPoint(params:aMap_addMultiPoint_Params, callback?: (ret:JSON) => void):void

	/**
	 * `在地图上添加线`
	 * ========params==========
	 *
	 * `id` :number : 线的 id，**不可与覆盖物类其它接口添加得图层 id 一样**
	 *
	 * `styles` :JSON : （可选项）直线的样式
	 *
	 * `points` :Array : 线的两个点组成的数组
	 */
	addLine(params:aMap_addLine_Params):void

	/**
	 * `在地图上添加圆形`
	 * ========params==========
	 *
	 * `id` :number : 圆形的 id，**不可与覆盖物类其它接口添加得图层 id 一样**
	 *
	 * `center` :JSON : 圆形中心点的经纬度
	 *
	 * `radius` :number : 圆形的半径
	 *
	 * `styles` :JSON : （可选项）圆形的样式
	 */
	addCircle(params:aMap_addCircle_Params):void

	/**
	 * `在地图上添加多边形`
	 * ========params==========
	 *
	 * `id` :number : 多边形的 id，**不可与覆盖物类其它接口添加得图层 id 一样**
	 *
	 * `styles` :JSON : （可选项）多边形的样式
	 *
	 * `points` :Array : 多边形的各个点组成的数组
	 */
	addPolygon(params:aMap_addPolygon_Params):void

	/**
	 * `在地图上添加图片`
	 * ========params==========
	 *
	 * `id` :number : 图片 id，**不可与覆盖物类其它接口添加得图层 id 一样**
	 *
	 * `imgPath` :string : 图片的路径，要求本地路径（fs://、widget://）
	 *
	 * `lbLon` :number : 左下角点的经度
	 *
	 * `lbLat` :number : 左下角点的纬度
	 *
	 * `rtLon` :number : 右上角点的经度
	 *
	 * `rtLat` :number : 右上角点的纬度
	 */
	addImg(params:aMap_addImg_Params):void

	/**
	 * `在地图上添加轨迹线`
	 * ========params==========
	 *
	 * `id` :number : 线的 id，**不可与覆盖物类其它接口添加得图层 id 一样**
	 *
	 * `borderWidth` :number : （可选项）轨迹线的粗细
	 *
	 * `autoresizing` :boolean : 路线渲染结束是否自动调整地图可视区域，**为 true 时自带 0.3 秒地图移动动画效果**
	 *
	 * `locusData` :string : 组成轨迹线的点信息组文件路径（本地路径），该文件为 `.json` 文件
	 */
	addLocus(params:aMap_addLocus_Params):void

	/**
	 * `移除指定 id 的覆盖物`
	 * ========params==========
	 *
	 * `ids` :Array : 要移除的 id（数字）组成的数组
	 */
	removeOverlay(params:aMap_removeOverlay_Params):void

	/**
	 * `搜索路线方案，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `type` :string : （可选项）路线类型
	 *
	 * `strategy` :string : （可选项）路线策略，**type 为 walk（步行）或ride（骑行）时，此参数可不传**
	 *
	 * `start` :JSON : 起点信息
	 *
	 * `waypoints` :JSON : （可选项）途经点信息组成的数组，仅当 type 为 drive 时有效
	 *
	 * `nightflag` :boolean : （可选项）是否包含夜班车，仅当 type 为 transit 时有效
	 *
	 * `city` :string : （可选项）搜索公交路线时所在的城市，仅当 type 为 transit 时有效且必传
	 *
	 * `end` :JSON : 终点信息
	 */
	searchRoute(params:aMap_searchRoute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `在地图上绘制显示 searchRoute 搜索到的指定路线，**调用本接口前，必须保证已经调用过 open 和 searchRoute 接口**`
	 * ========params==========
	 *
	 * `id` :number : 绘制路线分配的 id ，removeRoute 时使用此 id 移除路线
	 *
	 * `autoresizing` :boolean : 路线渲染结束是否自动调整地图可视区域，**为 true 时自带 0.3 秒地图移动动画效果**
	 *
	 * `index` :number : 路线方案的索引，在 searchRoute 时返回的多个路线方案组成的数组中的索引
	 *
	 * `styles` :JSON : 路线样式设置
	 */
	drawRoute(params:aMap_drawRoute_Params):void

	/**
	 * `移除指定 id 的路线`
	 * ========params==========
	 *
	 * `ids` :Array : 所要移除的 id（数字）组成的数组
	 */
	removeRoute(params:aMap_removeRoute_Params):void

	/**
	 * `根据关键字搜索公交、地铁线路，**无需调用 open 接口即可搜索**`
	 * ========params==========
	 *
	 * `city` :string : 城市
	 *
	 * `line` :string : 公交、地铁线路号（例如：1路，1号线）
	 *
	 * `offset` :number : （可选项）每页记录数，取值为1－50
	 *
	 * `page` :number : （可选项）当前页数，取值为1-100
	 */
	searchBusRoute(params:aMap_searchBusRoute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据 searchBusRoute 搜索返回的公交信息，将指定线路绘制在地图上`
	 * ========params==========
	 *
	 * `id` :number : 地图上显示的公交、地铁路线的 id，**removeBusRoute 时使用此 id**
	 *
	 * `autoresizing` :boolean : 路线渲染结束是否自动调整地图可视区域
	 *
	 * `index` :number : 路线方案的索引，在 searchBusRoute 时返回的多个公交路线组成的数组中的索引
	 *
	 * `styles` :JSON : 路线样式设置
	 */
	drawBusRoute(params:aMap_drawBusRoute_Params):void

	/**
	 * `移除地图上显示的公交、地铁线路`
	 * ========params==========
	 *
	 * `ids` :Array : 所要移除的公交、地铁线路的 id（数字）组成的数组
	 */
	removeBusRoute(params:aMap_removeBusRoute_Params):void

	/**
	 * `根据单个关键字搜索兴趣点，**无需调用 open 接口即可搜索**`
	 * ========params==========
	 *
	 * `city` :string : 要搜索的城市，可选值：cityname（中文或中文全拼）、citycode、adcode
	 *
	 * `keyword` :string : 搜索的关键字，多个关键字用“|”分割
	 *
	 * `offset` :number : （可选项）每页记录数，取值为1－50
	 *
	 * `page` :number : （可选项）当前页数，取值为1-100
	 *
	 * `sortrule` :number : （可选项）排序规则，0-距离排序；1-综合排序,Android 平台上忽略本参数
	 */
	searchInCity(params:aMap_searchInCity_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据单个关键字在圆形区域内搜索兴趣点，**无需调用 open 接口即可搜索**`
	 * ========params==========
	 *
	 * `keyword` :string : 搜索关键字，多个关键字用“|”分割
	 *
	 * `lon` :number : 指定区域中心点的经度
	 *
	 * `lat` :number : 指定区域中心点的纬度
	 *
	 * `radius` :number : （可选项）指定区域的半径，单位为 m（米），范围：0-50000
	 *
	 * `offset` :number : （可选项）每页记录数，取值为1－50
	 *
	 * `page` :number : （可选项）当前页数，取值为1-100
	 *
	 * `sortrule` :number : （可选项）排序规则，0-距离排序；1-综合排序,Android 平台上忽略本参数
	 */
	searchNearby(params:aMap_searchNearby_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据单个关键字在指定的多边形区域内搜索兴趣点，**无需调用 open 接口即可搜索**`
	 * ========params==========
	 *
	 * `keyword` :string : 搜索关键字
	 *
	 * `points` :Array : 能确定一个多边形的坐标点集合
	 *
	 * `offset` :number : （可选项）每页记录数，取值为1－50
	 *
	 * `page` :number : （可选项）当前页数，取值为1-100
	 *
	 * `sortrule` :number : （可选项）排序规则，0-距离排序；1-综合排序,Android 平台上忽略本参数
	 */
	searchInPolygon(params:aMap_searchInPolygon_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据关键字返回建议搜索关键字，**无需调用 open 接口即可搜索**`
	 * ========params==========
	 *
	 * `keyword` :string : 关键字
	 *
	 * `city` :string : 要搜索的城市，查询城市，中文或中文全拼
	 */
	autocomplete(params:aMap_autocomplete_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据关键字返回行政区划数据，**无需调用 open 接口即可搜索，如果调用open打开了一个地图，则同时在地图上绘制并跳转到行政区划边界区域,是否绘制由showInMap控制**`
	 * ========params==========
	 *
	 * `keyword` :string : 关键字，该字段只支持精确名称，不可以是拼音，简写，代号等，如：北京可以用，但beijing，首都 等字样是无效的；
	 *
	 * `showInMap` :JSON : （可选项）搜索的区域是否同时显示在当前地图上，若不传，则不显示
	 */
	districtSearch(params:aMap_districtSearch_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询天气，**无需调用 open 接口即可搜索**`
	 * ========params==========
	 *
	 * `cityName` :string : 城市：如'北京'，iOS端支持cityname和adcode，如：'110000'
	 *
	 * `type` :string : （可选项）查询类型
	 */
	weatherSearch(params:aMap_weatherSearch_Params, callback?: (ret:JSON) => void):void

	/** 获取省份列表，**无需调用 open 接口***/ 
	getProvinces(callback?: (ret:JSON) => void):void

	/** 获取各个省份包括的城市列表，**无需调用 open 接口***/ 
	getCitiesByProvince(callback?: (ret:JSON) => void):void

	/** 获取直辖市列表，**无需调用 open 接口。Android 平台不支持此接口***/ 
	getMunicipalities():void

	/** 获取全国概要图信息，**无需调用 open 接口。Android 平台不支持此接口***/ 
	getNationWide():void

	/** 获取全国所有离线地图城市信息，**无需调用 open 接口***/ 
	getAllCities():void

	/** 获取离线数据的版本号，**无需调用 open 接口。Android 平台不支持此接口***/ 
	getVersion():void

	/**
	 * `启动下载指定 adcode 区域的离线地图，**无需调用 open 接口**`
	 * ========params==========
	 *
	 * `adcode` :string : 指定的区域的 adcode 码(在android平台使用区域的cityCode)
	 *
	 * `shouldContinueWhenAppEntersBackground` :boolean : （可选项）进入后台是否允许继续下载
	 */
	downloadRegion(params:aMap_downloadRegion_Params, callback?: (ret:JSON) => void):void

	/**
	 * `检测指定 adcode 的区域是否正在下载，**无需调用 open 接口**`
	 * ========params==========
	 *
	 * `adcode` :string : 指定的区域的 adcode 码
	 */
	isDownloading(params:aMap_isDownloading_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停下载指定 adcode 区域的离线地图，**无需调用 open 接口，android端会暂停所有下载**`
	 * ========params==========
	 *
	 * `adcode` :string : 指定的区域的 adcode 码
	 */
	pauseDownload(params:aMap_pauseDownload_Params):void

	/** 取消全部下载，**无需调用 open 接口，android端会取消所有下载***/ 
	cancelAllDownload():void

	/** 清除所有保存在磁盘上的离线地图数据, 之后调用 reloadMap 会使其立即生效*/ 
	clearDisk():void

	/** 监测新版本，**Android 平台不支持此接口***/ 
	checkNewestVersion():void

	/** 将离线地图下载解压、移除后，调用此函数使离线数据生效，**Android 平台不支持此接口***/ 
	reloadMap():void

	/** 获取已下载城市列表（仅android支持）*/ 
	getDownloadOfflineMapCityList():void

	/** 获取正在下载城市列表（仅android支持）*/ 
	getDownloadingCityList():void

	/** 设置离线地图加载监听，调用离线相关接口前使用有效（仅android支持）*/ 
	setOfflineLoadListenr():void

	/**
	 * `其它坐标系经纬度转换为高德地图经纬度`
	 * ========params==========
	 *
	 * `type` :string : （可选项）经纬度坐标类型
	 *
	 * `location` :JSON : 经纬度
	 */
	convertCoordinate(params:aMap_convertCoordinate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始纠偏轨迹`
	 * ========params==========
	 *
	 * `type` :string : （可选项）轨迹坐标类型
	 *
	 * `path` :string : 经纬度轨迹点信息文件路径，要求本地路径（widget://、fs://）
	 *
	 * `savePath` :string : （可选项）纠偏后的经纬度轨迹点信息文件保存路径，要求本地路径（fs://）
	 */
	processedTrace(params:aMap_processedTrace_Params, callback?: (ret:JSON) => void):void

	/** 取消轨迹纠偏*/ 
	cancelProcessedTrace():void

}
interface aMap_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）打开地图时设置的中心点经纬度，若不传则默认打开北京市为中心的地图*/ 
	center?:number,

	/**（可选项）设置高德地图缩放等级，取值范围：3-18级*/ 
	zoomLevel?:number,

	/**（可选项）是否在地图上显示用户位置*/ 
	showUserLocation?:boolean,

	/**（可选项）地图上显示用户位置时，是否支持点击位置弹出提示，只支持iOS端*/ 
	userLocationCanShowCallout?:boolean,

	/**（可选项）是否在地图上显示用户位置的精度圈儿*/ 
	showsAccuracyRing?:boolean,

	/**(可选项) 设置是否以地图中心点缩放 (ios不支持)*/ 
	isGestureScaleByMapCenter?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface aMap_setRect_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

}

interface aMap_getLocation_Params {
	/**（可选项）获取到位置信息后是否自动停止定位*/ 
	autoStop?:boolean,

	/**(可选项) 开发者应用如果有后台定位需求，在退到后台的时候，为了保证定位可以在后台一直运行，可以设置为true，适配android 8后台无法定位问题；注：单次定位(autoStop为true时)无效(ios不支持)*/ 
	enableLocInForeground?:boolean,

	/**(必选项) 通知栏的提示，此字段只有在enableLocInForeground设置为true时有效。(ios不支持)*/ 
	notification:JSON,

}

interface aMap_getCoordsFromName_Params {
	/**（可选项）所要搜索的地址所在的城市，cityname（中文或中文全拼）、citycode、adcode*/ 
	city?:string,

	/**完整的地址信息*/ 
	address:string,

}

interface aMap_getNameFromCoords_Params {
	/**经度*/ 
	lon:number,

	/**纬度*/ 
	lat:number,

}

interface aMap_getDistance_Params {
	/**起点经纬度*/ 
	start:JSON,

	/**终点经纬度*/ 
	end:JSON,

}

interface aMap_showUserLocation_Params {
	/**（可选项）是否显示用户位置*/ 
	isShow?:boolean,

	/**(可选项)当前位置显示图标的图片，要求本地路径支持fs,widget*/ 
	imagePath?:string,

	/**(可选项)设置的当前位置显示图标的大小，当imagePath 为空时，本参数无意义。*/ 
	imageSize?:JSON,

	/**（可选项）精度圈是否显示*/ 
	showsAccuracyRing?:boolean,

	/**（可选项）是否显示方向指示(setTrackingMode接口heading模式开启)*/ 
	showsHeadingIndicator?:boolean,

	/**（可选项）内部蓝色圆点是否使用律动效果(android不支持)*/ 
	enablePulseAnnimation?:boolean,

	/**（可选项）精度圈 填充颜色*/ 
	fillColor?:string,

	/**（可选项）精度圈 边线颜色*/ 
	strokeColor?:string,

	/**（可选项）定位点背景色(android不支持)*/ 
	dotBgColor?:string,

	/**（可选项）定位点蓝色圆点颜色(android不支持)*/ 
	dotFillColor?:string,

	/**（可选项）精度圈 边线宽度*/ 
	lineWidth?:number,

}

interface aMap_setTrackingMode_Params {
	/**（可选项）用户当前位置显示形式*/ 
	trackingMode?:string,

	/**（可选项）设置地图的当前位置标记的追踪状态时，是否带动画效果，**暂仅支持  iOS 平台***/ 
	animation?:boolean,

}

interface aMap_setCenter_Params {
	/**（可选项）中心点的经纬度*/ 
	coords?:JSON,

	/**（可选项）设置地图的中心点时，是否带动画效果*/ 
	animation?:boolean,

}

interface aMap_setZoomLevel_Params {
	/**（可选项）地图比例尺级别，取值范围：0.01-20*/ 
	level?:number,

	/**（可选项）地图缩放时，是否带动画效果*/ 
	animation?:boolean,

}

interface aMap_setMapAttr_Params {
	/**（可选项）设置地图类型*/ 
	type?:string,

	/**（可选项）是否打开实时路况*/ 
	trafficOn?:boolean,

	/**（可选项）捏合手势是否可以缩放地图*/ 
	zoomEnable?:boolean,

	/**（可选项）拖动手势是否可以移动地图*/ 
	scrollEnable?:boolean,

	/**（可选项）是否支持俯视旋转*/ 
	overlookEnabled?:boolean,

	/**（可选项）是否支持平面旋转*/ 
	rotateEnabled?:boolean,

	/**（可选项）是否隐藏楼块，**俯视角度不为零时的楼快效果，Android 平台上默认打开状态，且不可改变***/ 
	building?:boolean,

}

interface aMap_setRotation_Params {
	/**（可选项）地图旋转角度，取值范围：-180° - 180°*/ 
	degree?:number,

	/**（可选项）地图旋转时，是否带动画效果*/ 
	animation?:boolean,

	/**（可选项）地图旋转动画时长，单位秒（s）*/ 
	duration?:number,

}

interface aMap_setOverlook_Params {
	/**（可选项）地图俯视角度，取值范围：0° - 60°*/ 
	degree?:number,

	/**（可选项）地图俯视角度转动时，是否带动画效果*/ 
	animation?:boolean,

	/**（可选项）地图俯视角度转动动画时长，单位秒（s）*/ 
	duration?:number,

}

interface aMap_setRegion_Params {
	/**矩形区域左下角的经度*/ 
	lbLon:number,

	/**矩形区域左下角的纬度*/ 
	lbLat:number,

	/**矩形区域右上角的经度*/ 
	rtLon:number,

	/**矩形区域右上角的纬度*/ 
	rtLat:number,

	/**（可选项）设置地图的区域时，是否带动画效果*/ 
	animation?:boolean,

}

interface aMap_setScaleBar_Params {
	/**（可选项）是否显示比例尺*/ 
	show?:boolean,

	/**（可选项）比例尺的位置，设定坐标以地图左上角为原点，**在 Android 平台上为固定位置，本参数无效***/ 
	position?:JSON,

}

interface aMap_setCompass_Params {
	/**（可选项）是否显示指南针*/ 
	show?:boolean,

	/**（可选项）指南针的位置，设定坐标以地图左上角为原点，**在 Android 平台上为固定位置，本参数无效***/ 
	position?:JSON,

	/**（可选项）自定义指南针图标图片路径，要求本地路径（fs://、widget://），**Android 平台上忽略本参数***/ 
	img?:boolean,

}

interface aMap_setLogo_Params {
	/**（可选项）高德地图 logo 的位置，取值范围如下：*/ 
	position?:string,

}

interface aMap_takeSnapshotInRect_Params {
	/**（可选项）所截取区域的位置和大小（相对于地图区域）*/ 
	rect?:JSON,

	/**截图保存路径，要求本地路径（fs://），如：fs://aMap/Snapshot.png*/ 
	path:string,

	/**截图图片质量，仅对iOS端图片格式为jpg时有效，0.1-2*/ 
	quality:number,

}

interface aMap_isPolygonContainsPoint_Params {
	/**已知点的地理坐标*/ 
	point:JSON,

	/**多边形的各个点组成的数组*/ 
	points:Array,

	/**null*/ 
	ret:JSON,

}

interface aMap_isCircleContainsPoint_Params {
	/**已知点的地理坐标*/ 
	point:JSON,

	/**圆形信息*/ 
	circle:JSON,

	/**null*/ 
	ret:JSON,

}

interface aMap_interconvertCoords_Params {
	/**（可选项）原始地理坐标经度*/ 
	lon?:number,

	/**（可选项）原始地理坐标纬度*/ 
	lat?:number,

	/**（可选项）地图容器的 x 坐标*/ 
	x?:number,

	/**（可选项）地图容器的 y 坐标*/ 
	y?:number,

}

interface aMap_addEventListener_Params {
	/**地图相关事件名称*/ 
	name:string,

}

interface aMap_removeEventListener_Params {
	/**地图相关事件名称*/ 
	name:string,

}

interface aMap_showsIndoorMap_Params {
	/**（可选项）是否显示室内地图*/ 
	isShows?:boolean,

}

interface aMap_showsIndoorMapControl_Params {
	/**（可选项）是否显示室内地图默认控件*/ 
	isShows?:boolean,

}

interface aMap_setIndoorMapControlOrigin_Params {
	/**（可选项）左上角点位置*/ 
	point?:JSON,

}

interface aMap_setCurrentIndoorMapFloorIndex_Params {
	/**（可选项）要设置的楼层数*/ 
	floorIndex?:number,

}

interface aMap_addAnnotations_Params {
	/**图标标注信息组成的数组*/ 
	annotations:Array,

	/**（可选项）指定的标注图标路径组成的数组，若包含多张图片，则此标注显示为多图联动的 gif ，要求本地路径（fs://、widget://）*/ 
	icons?:Array,

	/**(可选项) 指定的标注图标路径组成的数组，若包含多张图片，则此标注显示为多图联动的 gif ，要求本地路径（fs://、widget://），*/ 
	selectedIcons?:Array,

	/**（可选项）所添加的标注是否可被拖动*/ 
	draggable?:boolean,

	/**（可选项）若添加的标注为动态图，则本参数表示动态图循环播放一次的时间，单位为秒（s），否则本参数无效*/ 
	timeInterval?:number,

}

interface aMap_cancelAnnotationSelected_Params {
	/**指定的标注 id（仅iOS支持，android仅一个为选中状态  调用此接口取消当前选中标注选中状态）*/ 
	id:number,

}

interface aMap_getAnnotationCoords_Params {
	/**指定的标注 id*/ 
	id:number,

}

interface aMap_annotationExist_Params {
	/**指定的标注 id*/ 
	id:number,

}

interface aMap_setBubble_Params {
	/**要设置气泡的标注 id*/ 
	id:number,

	/**（可选项）弹出气泡的背景图片，要求本地路径（fs://、widget://），中轴线下边缘点为气泡弹出点*/ 
	bgImg?:string,

	/**弹出气泡的内容*/ 
	content:JSON,

	/**弹出气泡的样式*/ 
	styles:JSON,

}

interface aMap_popupBubble_Params {
	/**气泡的 id*/ 
	id:number,

}

interface aMap_closeBubble_Params {
	/**气泡的 id*/ 
	id:number,

}

interface aMap_addBillboard_Params {
	/**布告牌的 id，**注意：本 id 不可与 addAnnotations 接口内的 id 相同***/ 
	id:number,

	/**布告牌所在位置的坐标*/ 
	coords:JSON,

	/**布告牌的背景图片，要求本地路径（fs://、widget://）*/ 
	bgImg:string,

	/**布告牌的内容*/ 
	content:JSON,

	/**（可选项）所添加的布告牌是否可被拖动*/ 
	draggable?:boolean,

	/**布告牌的样式*/ 
	styles:JSON,

	/**布告牌选中后的样式*/ 
	selectedStyles:JSON,

	/**（可选项）是否以插图中轴线底部为基准点，此参数设置为true背景设置无效。此参数为true需要styles.size.height 等于styles.illusRect.h + styles.illusRect.y*/ 
	useIllusPoint?:boolean,

	/**null*/ 
	ret:JSON,

}

interface aMap_addWebBoard_Params {
	/**布告牌的 id，**注意：本 id 不可与 addAnnotations 接口内的 id 相同***/ 
	id:number,

	/**布告牌所在位置的坐标*/ 
	coords:JSON,

	/**布告牌的背景图片，要求本地路径（fs://、widget://）（仅ios支持）*/ 
	bg:string,

	/**（可选项）网页布告牌的网页地址,当data参数不为空时，url将做为baseUrl，data中的html引用的资源文件根路径以该url为基础。*/ 
	url?:string,

	/**（可选项）页面加载的数据内容，可以为html片段或者整张html文件的数据,当data为空或者不传的时候， 会将url地址作为整个加载进去*/ 
	data?:string,

	/**（可选项）气泡的大小配置*/ 
	size?:JSON,

}

interface aMap_addMobileAnnotations_Params {
	/**图标标注信息组成的数组*/ 
	annotations:Array,

}

interface aMap_moveAnnotation_Params {
	/**要移动的标注的 id*/ 
	id:number,

	/**（可选项）标注图标移动动画的时间，单位为秒（s），**不包括旋转动画时间***/ 
	duration?:number,

	/**终点经纬度*/ 
	end:JSON,

}

interface aMap_removeAnnotations_Params {
	/**（可选项）要移除的标注或布告牌id（数字），若为空或不传，则移除所有标注*/ 
	ids?:Array,

}

interface aMap_setWebBubble_Params {
	/**要设置气泡的标注 id*/ 
	id:number,

	/**（可选项）弹出气泡的网页地址，用户点击标注时，模块在标注上弹出窗口（类似open一个frame，模块会用webview去加载此url的网页显示出来）,当data参数不为空时，url将做为baseUrl，data中的html引用的资源文件根路径以该url为基础。*/ 
	url?:string,

	/**（可选项）页面加载的数据内容，可以为html片段或者整张html文件的数据,当data为空或者不传的时候， 会将url地址作为整个加载进去*/ 
	data?:string,

	/**（可选项）气泡的大小配置*/ 
	size?:JSON,

	/**（可选项）弹出气泡的背景设置，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）*/ 
	bg?:string,

}

interface aMap_cancelMoveAnimation_Params {
	/**要移除的标注或布告牌id（数字）*/ 
	id:string,

}

interface aMap_showAnnotations_Params {
	/**（可选项）移动地图以显示标注时是否带动画效果*/ 
	animation?:boolean,

	/**（可选项）要显示的标注或布告牌id（数字），若为空或不传，则显示所有标注*/ 
	ids?:Array,

	/**（可选项）标注显示的区域上下左右边距*/ 
	insets?:JSON,

}

interface aMap_addHeatMap_Params {
	/**热力点图层的id，**不可与覆盖物类其它接口添加得图层 id 一样***/ 
	id:number,

	/**为字符串类型时表示热力点信息文件路径，要求本地路径（widget://、fs://）；若传数组类型则表示直接将热力点数据传给模块*/ 
	data:Array,

	/**（可选项）直线的样式*/ 
	styles?:JSON,

}

interface aMap_refreshHeatMap_Params {
	/**热力点图层的id*/ 
	id:number,

	/**（可选项）直线的样式*/ 
	styles?:JSON,

}

interface aMap_addMultiPoint_Params {
	/**点聚合图层的id，**不可与覆盖物类其它接口添加得图层 id 一样***/ 
	id:number,

	/**聚合点信息文件路径，要求本地路径（widget://、fs://）*/ 
	path:string,

	/**（可选项）直线的样式*/ 
	styles?:JSON,

}

interface aMap_addLine_Params {
	/**线的 id，**不可与覆盖物类其它接口添加得图层 id 一样***/ 
	id:number,

	/**（可选项）直线的样式*/ 
	styles?:JSON,

	/**线的两个点组成的数组*/ 
	points:Array,

}

interface aMap_addCircle_Params {
	/**圆形的 id，**不可与覆盖物类其它接口添加得图层 id 一样***/ 
	id:number,

	/**圆形中心点的经纬度*/ 
	center:JSON,

	/**圆形的半径*/ 
	radius:number,

	/**（可选项）圆形的样式*/ 
	styles?:JSON,

}

interface aMap_addPolygon_Params {
	/**多边形的 id，**不可与覆盖物类其它接口添加得图层 id 一样***/ 
	id:number,

	/**（可选项）多边形的样式*/ 
	styles?:JSON,

	/**多边形的各个点组成的数组*/ 
	points:Array,

}

interface aMap_addImg_Params {
	/**图片 id，**不可与覆盖物类其它接口添加得图层 id 一样***/ 
	id:number,

	/**图片的路径，要求本地路径（fs://、widget://）*/ 
	imgPath:string,

	/**左下角点的经度*/ 
	lbLon:number,

	/**左下角点的纬度*/ 
	lbLat:number,

	/**右上角点的经度*/ 
	rtLon:number,

	/**右上角点的纬度*/ 
	rtLat:number,

}

interface aMap_addLocus_Params {
	/**线的 id，**不可与覆盖物类其它接口添加得图层 id 一样***/ 
	id:number,

	/**（可选项）轨迹线的粗细*/ 
	borderWidth?:number,

	/**路线渲染结束是否自动调整地图可视区域，**为 true 时自带 0.3 秒地图移动动画效果***/ 
	autoresizing:boolean,

	/**组成轨迹线的点信息组文件路径（本地路径），该文件为 `.json` 文件*/ 
	locusData:string,

}

interface aMap_removeOverlay_Params {
	/**要移除的 id（数字）组成的数组*/ 
	ids:Array,

}

interface aMap_searchRoute_Params {
	/**（可选项）路线类型*/ 
	type?:string,

	/**（可选项）路线策略，**type 为 walk（步行）或ride（骑行）时，此参数可不传***/ 
	strategy?:string,

	/**起点信息*/ 
	start:JSON,

	/**（可选项）途经点信息组成的数组，仅当 type 为 drive 时有效*/ 
	waypoints?:JSON,

	/**（可选项）是否包含夜班车，仅当 type 为 transit 时有效*/ 
	nightflag?:boolean,

	/**（可选项）搜索公交路线时所在的城市，仅当 type 为 transit 时有效且必传*/ 
	city?:string,

	/**终点信息*/ 
	end:JSON,

}

interface aMap_drawRoute_Params {
	/**绘制路线分配的 id ，removeRoute 时使用此 id 移除路线*/ 
	id:number,

	/**路线渲染结束是否自动调整地图可视区域，**为 true 时自带 0.3 秒地图移动动画效果***/ 
	autoresizing:boolean,

	/**路线方案的索引，在 searchRoute 时返回的多个路线方案组成的数组中的索引*/ 
	index:number,

	/**路线样式设置*/ 
	styles:JSON,

}

interface aMap_removeRoute_Params {
	/**所要移除的 id（数字）组成的数组*/ 
	ids:Array,

}

interface aMap_searchBusRoute_Params {
	/**城市*/ 
	city:string,

	/**公交、地铁线路号（例如：1路，1号线）*/ 
	line:string,

	/**（可选项）每页记录数，取值为1－50*/ 
	offset?:number,

	/**（可选项）当前页数，取值为1-100*/ 
	page?:number,

}

interface aMap_drawBusRoute_Params {
	/**地图上显示的公交、地铁路线的 id，**removeBusRoute 时使用此 id***/ 
	id:number,

	/**路线渲染结束是否自动调整地图可视区域*/ 
	autoresizing:boolean,

	/**路线方案的索引，在 searchBusRoute 时返回的多个公交路线组成的数组中的索引*/ 
	index:number,

	/**路线样式设置*/ 
	styles:JSON,

}

interface aMap_removeBusRoute_Params {
	/**所要移除的公交、地铁线路的 id（数字）组成的数组*/ 
	ids:Array,

}

interface aMap_searchInCity_Params {
	/**要搜索的城市，可选值：cityname（中文或中文全拼）、citycode、adcode*/ 
	city?:string,

	/**搜索的关键字，多个关键字用“|”分割*/ 
	keyword:string,

	/**（可选项）每页记录数，取值为1－50*/ 
	offset?:number,

	/**（可选项）当前页数，取值为1-100*/ 
	page?:number,

	/**（可选项）排序规则，0-距离排序；1-综合排序,Android 平台上忽略本参数*/ 
	sortrule?:number,

}

interface aMap_searchNearby_Params {
	/**搜索关键字，多个关键字用“|”分割*/ 
	keyword:string,

	/**指定区域中心点的经度*/ 
	lon:number,

	/**指定区域中心点的纬度*/ 
	lat:number,

	/**（可选项）指定区域的半径，单位为 m（米），范围：0-50000*/ 
	radius?:number,

	/**（可选项）每页记录数，取值为1－50*/ 
	offset?:number,

	/**（可选项）当前页数，取值为1-100*/ 
	page?:number,

	/**（可选项）排序规则，0-距离排序；1-综合排序,Android 平台上忽略本参数*/ 
	sortrule?:number,

}

interface aMap_searchInPolygon_Params {
	/**搜索关键字*/ 
	keyword:string,

	/**能确定一个多边形的坐标点集合*/ 
	points:Array,

	/**（可选项）每页记录数，取值为1－50*/ 
	offset?:number,

	/**（可选项）当前页数，取值为1-100*/ 
	page?:number,

	/**（可选项）排序规则，0-距离排序；1-综合排序,Android 平台上忽略本参数*/ 
	sortrule?:number,

}

interface aMap_autocomplete_Params {
	/**关键字*/ 
	keyword:string,

	/**要搜索的城市，查询城市，中文或中文全拼*/ 
	city:string,

}

interface aMap_districtSearch_Params {
	/**关键字，该字段只支持精确名称，不可以是拼音，简写，代号等，如：北京可以用，但beijing，首都 等字样是无效的；*/ 
	keyword:string,

	/**（可选项）搜索的区域是否同时显示在当前地图上，若不传，则不显示*/ 
	showInMap?:JSON,

}

interface aMap_weatherSearch_Params {
	/**城市：如'北京'，iOS端支持cityname和adcode，如：'110000'*/ 
	cityName:string,

	/**（可选项）查询类型*/ 
	type?:string,

}

interface aMap_downloadRegion_Params {
	/**指定的区域的 adcode 码(在android平台使用区域的cityCode)*/ 
	adcode:string,

	/**（可选项）进入后台是否允许继续下载*/ 
	shouldContinueWhenAppEntersBackground?:boolean,

}

interface aMap_isDownloading_Params {
	/**指定的区域的 adcode 码*/ 
	adcode:string,

}

interface aMap_pauseDownload_Params {
	/**指定的区域的 adcode 码*/ 
	adcode:string,

}

interface aMap_convertCoordinate_Params {
	/**（可选项）经纬度坐标类型*/ 
	type?:string,

	/**经纬度*/ 
	location:JSON,

}

interface aMap_processedTrace_Params {
	/**（可选项）轨迹坐标类型*/ 
	type?:string,

	/**经纬度轨迹点信息文件路径，要求本地路径（widget://、fs://）*/ 
	path:string,

	/**（可选项）纠偏后的经纬度轨迹点信息文件保存路径，要求本地路径（fs://）*/ 
	savePath?:string,

}

interface talkingData {
	/** 获取TalkingData维护的设备ID*/ 
	getDeviceID():void

}
interface JGCertificateIDFA {
	/**
	 * `初始化`
	 * ========params==========
	 *
	 * `key` :string : appkey
	 */
	init(params:JGCertificateIDFA_init_Params, callback?: (ret:JSON) => void):void

	/** 判断网络环境是否支持*/ 
	checkVerifyEnable():void

	/** 获取认证token*/ 
	getToken():void

	/** 登录预取号*/ 
	preLogin():void

	/** 清除预取号缓存*/ 
	clearPreLoginCache():void

	/**
	 * `请求授权一键登录`
	 * ========params==========
	 *
	 * `type` :number : 一键登录页面类型
	 */
	getAuthorization(params:JGCertificateIDFA_getAuthorization_Params, callback?: (ret:JSON) => void):void

	/** 取消、返回*/ 
	dismissLoginController():void

}
interface JGCertificateIDFA_init_Params {
	/**appkey*/ 
	key:string,

}

interface JGCertificateIDFA_getAuthorization_Params {
	/**一键登录页面类型*/ 
	type:number,

}

interface aMapLocation {
}
interface uPush {
	/**
	 * `配置初始化推送SDK`
	 * ========params==========
	 *
	 * `host` :string : MQTT服务器地址
	 *
	 * `port` :string : MQTT服务器端口
	 *
	 * `deviceId` :string : 设备id
	 *
	 * `deviceType` :number : 设备类型
	 *
	 * `appId` :string : appId
	 *
	 * `userName` :string : MQTT服务器需验证用户名
	 *
	 * `passWord` :string : MQTT服务器需验证密码
	 *
	 * `publishQos` :number : （可选项）MQTT推消息型qos
	 *
	 * `subscribeQos` :number : （可选项）MQTT订阅型qos
	 *
	 * `clean` :boolean : （可选项）是否清除MQTT缓存s（仅iOS支持）
	 *
	 * `openSSL` :boolean : （可选项）是否开启自签名证书SSL,若true,则下面的certificate需要配置证书名称(自签名证书是der后缀)（仅iOS支持）
	 *
	 * `certificate` :string : （可选项）自签名证书名称（仅iOS支持）
	 *
	 * `openShock` :boolean : （可选项）是否开启手机静音震动（仅iOS支持）
	 *
	 * `soundID` :number : 默认系统提示音，若要使用系统铃声提醒静音功能，请按下方说明传入相应soundID；默认 soundID == -1，即不开启铃声提醒，（仅iOS支持）
	 *
	 * `useSDKPop` :boolean : （可选项）是否使用SDK内置消息弹框（仅iOS支持）
	 */
	configUPush(params:uPush_configUPush_Params):void

	/**
	 * `启动服务器连接`
	 * ========params==========
	 *
	 * `userId` :string : （可选项）用户Id，若userId为空，以未登录状态连接，若userId不空，以登录状态连接
	 *
	 * `userType` :number : （可选项）用户类型
	 */
	connect(params:uPush_connect_Params):void

	/** 断开连接*/ 
	disconnect(callback?: (ret:JSON) => void):void

	/** 添加uPush相关监听*/ 
	addUPushListener():void

	/** 获取未读数的主动调用方法*/ 
	queryUnreadCount(callback?: (ret:JSON) => void):void

	/**
	 * `自定义铃声（仅iOS支持）`
	 * ========params==========
	 *
	 * `fileName` :string : 铃声文件名，声音长度不能超过30秒
	 *
	 * `extension` :boolean : 铃声文件扩展名
	 */
	setCustomSound(params:uPush_setCustomSound_Params):void

	/** 获取设备类型*/ 
	getDeviceType():void

	/** 获取设备Id*/ 
	getDeviceId():void

	/** 用于传递到h5消息中心的参数。当connect没有传入userId时,此方法返回deviceId,否则返回userId。*/ 
	getUserId():void

	/** 用于传递到h5消息中心的参数。当connect没有传入userType时,此方法返回deviceType(50),否则返回userType。*/ 
	getUserType():void

	/** 获取当前是否可以接收通知及在线消息（仅iOS支持）*/ 
	getPushState():void

	/**
	 * `通知设置`
	 * ========params==========
	 *
	 * `enablePush` :boolean : （可选项）是否启用推送，true：启用能接收APNS通知，以及接收在线消息；false：禁用推送 关闭APNS通知，关闭在线消息，但是能查询未读数。
	 */
	setPush(params:uPush_setPush_Params):void

	/**
	 * `设置在线提示声音或震动（仅android支持）`
	 * ========params==========
	 *
	 * `warning` :boolean : 在线提示声音或震动
	 */
	setReceiverWarning(params:uPush_setReceiverWarning_Params):void

	/** 获取在线提示声音或震动（仅android支持）*/ 
	getReceiverWarning():void

	/**
	 * `显示自定义界面通知（仅android支持）`
	 * ========params==========
	 *
	 * `notifyId` :number : 通知id，可根据此id关闭通知。id相同仅显示最后一个通知，id不同分别展示
	 *
	 * `title` :string : title
	 *
	 * `content` :string : 内容
	 *
	 * `timeMillis` :number : 时间戳
	 *
	 * `extra` :string : （可选项）附加内容，会随点击事件回传
	 */
	notifyShow(params:uPush_notifyShow_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消通知（仅android支持）`
	 * ========params==========
	 *
	 * `notifyId` :number : 通知id，planRemind 接口中返回notifyId
	 */
	cancleNotify(params:uPush_cancleNotify_Params, callback?: (ret:JSON) => void):void

	/**
	 * `sdk内在线消息提示（仅android支持）`
	 * ========params==========
	 *
	 * `messageData` :string : 消息内容，[addUPushListener](#addUPushListener)接口接收到新消息的消息字符串.
	 *
	 * `duration` :number : （可选项）显示时间，毫秒
	 */
	sdkNotify(params:uPush_sdkNotify_Params, callback?: (ret:JSON) => void):void

}
interface uPush_configUPush_Params {
	/**MQTT服务器地址*/ 
	host:string,

	/**MQTT服务器端口*/ 
	port:string,

	/**设备id*/ 
	deviceId:string,

	/**设备类型*/ 
	deviceType:number,

	/**appId*/ 
	appId:string,

	/**MQTT服务器需验证用户名*/ 
	userName:string,

	/**MQTT服务器需验证密码*/ 
	passWord:string,

	/**（可选项）MQTT推消息型qos*/ 
	publishQos?:number,

	/**（可选项）MQTT订阅型qos*/ 
	subscribeQos?:number,

	/**（可选项）是否清除MQTT缓存s（仅iOS支持）*/ 
	clean?:boolean,

	/**（可选项）是否开启自签名证书SSL,若true,则下面的certificate需要配置证书名称(自签名证书是der后缀)（仅iOS支持）*/ 
	openSSL?:boolean,

	/**（可选项）自签名证书名称（仅iOS支持）*/ 
	certificate?:string,

	/**（可选项）是否开启手机静音震动（仅iOS支持）*/ 
	openShock?:boolean,

	/**默认系统提示音，若要使用系统铃声提醒静音功能，请按下方说明传入相应soundID；默认 soundID == -1，即不开启铃声提醒，（仅iOS支持）*/ 
	soundID:number,

	/**（可选项）是否使用SDK内置消息弹框（仅iOS支持）*/ 
	useSDKPop?:boolean,

}

interface uPush_connect_Params {
	/**（可选项）用户Id，若userId为空，以未登录状态连接，若userId不空，以登录状态连接*/ 
	userId?:string,

	/**（可选项）用户类型*/ 
	userType?:number,

}

interface uPush_setCustomSound_Params {
	/**铃声文件名，声音长度不能超过30秒*/ 
	fileName:string,

	/**铃声文件扩展名*/ 
	extension:boolean,

}

interface uPush_setPush_Params {
	/**（可选项）是否启用推送，true：启用能接收APNS通知，以及接收在线消息；false：禁用推送 关闭APNS通知，关闭在线消息，但是能查询未读数。*/ 
	enablePush?:boolean,

}

interface uPush_setReceiverWarning_Params {
	/**在线提示声音或震动*/ 
	warning:boolean,

}

interface uPush_notifyShow_Params {
	/**通知id，可根据此id关闭通知。id相同仅显示最后一个通知，id不同分别展示*/ 
	notifyId:number,

	/**title*/ 
	title:string,

	/**内容*/ 
	content:string,

	/**时间戳*/ 
	timeMillis:number,

	/**（可选项）附加内容，会随点击事件回传*/ 
	extra?:string,

}

interface uPush_cancleNotify_Params {
	/**通知id，planRemind 接口中返回notifyId*/ 
	notifyId:number,

}

interface uPush_sdkNotify_Params {
	/**消息内容，[addUPushListener](#addUPushListener)接口接收到新消息的消息字符串.*/ 
	messageData:string,

	/**（可选项）显示时间，毫秒*/ 
	duration?:number,

}

interface quPai2017 {
	/** 功能演示，用于给开发者体验，快速了解这个模块能实现的功能。*/ 
	demo():void

	/** 魔法相机功能，可以识别头像，自动加上贴图。*/ 
	camera():void

	/**
	 * `裁剪功能。`
	 * ========params==========
	 *
	 * `frameRate` :number : （可选项）帧率。建议20-30
	 *
	 * `gop` :number : （可选项）关键帧间隔。建议1-300
	 *
	 * `cropMode` :number : （可选项）画面裁剪=0，画面填充=1
	 *
	 * `videoQuality` :number : （可选项）低=0，中=1，高=2，极高=3，安卓是从0到3，iOS是从0到5，数字超大，画质越好。
	 *
	 * `resolutionMode` :string : （可选项）360P、480P、540P、720P
	 *
	 * `ratioMode` :string : （可选项）3:4 、 3:4 、 9:16
	 */
	cut(params:quPai2017_cut_Params, callback?: (ret:JSON) => void):void

	/** 短视频录制。*/ 
	record():void

	/** 编辑视频。*/ 
	edit():void

}
interface quPai2017_cut_Params {
	/**（可选项）帧率。建议20-30*/ 
	frameRate?:number,

	/**（可选项）关键帧间隔。建议1-300*/ 
	gop?:number,

	/**（可选项）画面裁剪=0，画面填充=1*/ 
	cropMode?:number,

	/**（可选项）低=0，中=1，高=2，极高=3，安卓是从0到3，iOS是从0到5，数字超大，画质越好。*/ 
	videoQuality?:number,

	/**（可选项）360P、480P、540P、720P*/ 
	resolutionMode?:string,

	/**（可选项）3:4 、 3:4 、 9:16*/ 
	ratioMode?:string,

}

interface QCloudCOS {
	/** 初始化模块,在调用其他接口之前Android必须先调用此接口,初始化接口只需要调用一次;*/ 
	init():void

	/**
	 * `上传文件`
	 * ========params==========
	 *
	 * `path` :string : 文件路径fs
	 *
	 * `bucket` :string : 存储桶名称
	 *
	 * `object` :string : （可选项）授予被授权者读写权限。格式同grantRead参数。
	 */
	beginUpload(params:QCloudCOS_beginUpload_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消上传`
	 * ========params==========
	 *
	 * `object` :string : 上传文件（对象）的文件名，也是对象的key
	 */
	abortUpload(params:QCloudCOS_abortUpload_Params, callback?: (ret:JSON) => void):void

	/** 取请求者名下的所有存储空间列表*/ 
	getService(callback?: (ret:JSON) => void):void

	/**
	 * `复制文件`
	 * ========params==========
	 *
	 * `bucket` :string : 目的存储桶名
	 *
	 * `object` :string : 目的文件名
	 *
	 * `sourceBucket` :string : 复制的源文件所在的存储桶名，需要是公有读或者在当前账号有权限
	 *
	 * `sourceObject` :number : 复制的源文件的文件名
	 *
	 * `sourceAPPID` :string : 复制的源文件的APPID
	 *
	 * `sourceRegion` :string : 复制的源文件所在的区域
	 */
	copyObject(params:QCloudCOS_copyObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建存储桶`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名
	 *
	 * `accessControlList` :Array : （可选项）授予被授权者子账号完全控制。子账号读的权限。数组中第一个值是主账号ID 第二个值是子账号ID,数组不传主账号授权
	 */
	putBucket(params:QCloudCOS_putBucket_Params, callback?: (ret:JSON) => void):void

	/**
	 * `列举存储桶内的内容`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367
	 *
	 * `prefix` :string : （可选项）前缀匹配，用来规定返回的文件前缀地址
	 *
	 * `delimiter` :string : （可选项）定界符为一个符号，如果有 Prefix，则将 Prefix 到 delimiter 之间的相同路径归为一类，定义为 Common Prefix，然后列出所有 Common Prefix。如果没有 Prefix，则从路径起点开始。可以将其理解为结束的符号，例如如果想要结尾是 A 的结果，那么将delimiter设置为 A 即可。
	 *
	 * `encodingType` :string : （可选项）规定返回值的编码方式，可选值：url
	 *
	 * `marker` :string : （可选项）默认以 UTF-8 二进制顺序列出条目，所有列出条目从 marker 开始
	 *
	 * `maxKeys` :number : （可选项）单次返回的最大条目数量，
	 */
	getBucket(params:QCloudCOS_getBucket_Params, callback?: (ret:JSON) => void):void

	/** 获取存储桶的 ACL（Access Control List）*/ 
	getBucketACL():void

	/**
	 * `设置存储桶的 ACL（Access Control List）`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367
	 *
	 * `accessControlList` :Array : （可选项）授予被授权者子账号完全控制。子账号读的权限。数组中第一个值是主账号ID 第二个值是子账号ID,数组不传主账号授权
	 */
	putBucketACL(params:QCloudCOS_putBucketACL_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取存储桶的 CORS(跨域访问)设置`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367
	 */
	getBucketCORS(params:QCloudCOS_getBucketCORS_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置存储桶的 CORS（跨域访问）`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367
	 *
	 * `rules` :Array<JSON> : 放置 CORS 的数组
	 */
	putBucketCORS(params:QCloudCOS_putBucketCORS_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除存储桶 CORS 设置`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367
	 */
	deleteBucketCORS(params:QCloudCOS_deleteBucketCORS_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取存储桶的地域信息`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367
	 */
	getBucketLocation(params:QCloudCOS_getBucketLocation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询 Bucket 是否存在`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367
	 */
	headBucket(params:QCloudCOS_headBucket_Params, callback?: (ret:JSON) => void):void

	/**
	 * `- 类型：字符串类型`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367
	 */
	deleteBucketLifeCycle(params:QCloudCOS_deleteBucketLifeCycle_Params, callback?: (ret:JSON) => void):void

	/**
	 * `简单上传仅限于小文件（20MB以下）`
	 * ========params==========
	 *
	 * `path` :string : 文件路径，支持、fs
	 *
	 * `bucket` :string : 存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367
	 *
	 * `object` :Array : （可选项）授予被授权者子账号完全控制。子账号读的权限。数组中第一个值是主账号ID 第二个值是子账号ID,数组不传主账号授权
	 */
	putObject(params:QCloudCOS_putObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询对象的 ACL（Access Control List）`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367
	 *
	 * `object` :string : （可选项）指定多版本中的 Version ID
	 */
	getObjectACL(params:QCloudCOS_getObjectACL_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置对象的 ACL（Access Control List）`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367
	 *
	 * `object` :string : 对象名
	 *
	 * `accessControlList` :Array : （可选项）授予被授权者子账号完全控制。子账号读的权限。数组中第一个值是主账号ID 第二个值是子账号ID,数组不传主账号授权
	 */
	putObjectACL(params:QCloudCOS_putObjectACL_Params, callback?: (ret:JSON) => void):void

	/**
	 * `Object 跨域访问配置的预请求  调用此接口之前需要先调用,putBucketCORS`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367
	 *
	 * `object` :string : 对象键（Key）是对象在存储桶中的唯一标识。例如，在对象的访问域名 bucket1-1250000000.cos.ap-guangzhou.myqcloud.com/doc1/pic1.jpg 中，对象键为 doc1/pic1.jpg。更详细的描述可以参考[对象描述](https://cloud.tencent.com/document/product/436/13324)
	 *
	 * `accessControlRequestMethod	` :string : 模拟跨域访问的请求HTTP方法
	 *
	 * `origin` :string : 模拟跨域访问允许的访问来源，支持通配符 * , 格式为：协议://域名[:端口]如：http://www.qq.com
	 *
	 * `accessControlRequestHeaders` :Array : （可选项）	在发送 OPTIONS 请求时告知服务端，接下来的请求可以使用哪些自定义的 HTTP 请求头部，支持通配符 *
	 */
	optionsObject(params:QCloudCOS_optionsObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除单个对象`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367
	 *
	 * `object` :string : 对象键（Key）是对象在存储桶中的唯一标识。例如，在对象的访问域名 bucket1-1250000000.cos.ap-guangzhou.myqcloud.com/doc1/pic1.jpg 中，对象键为 doc1/pic1.jpg。更详细的描述可以参考[对象描述](https://cloud.tencent.com/document/product/436/13324)
	 */
	deleteObject(params:QCloudCOS_deleteObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除多个对象`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367
	 *
	 * `deleteObjects` :Array : 存放需要删除对象信息的数组
	 */
	deleteMultipleObject(params:QCloudCOS_deleteMultipleObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取对象meta信息`
	 * ========params==========
	 *
	 * `bucket` :string : 存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367
	 *
	 * `object` :string : （可选项）如果HEAD指定版本的Object,请在该参数中指定versionID（在开启了多版本的情况才有）
	 */
	headObject(params:QCloudCOS_headObject_Params, callback?: (ret:JSON) => void):void

}
interface QCloudCOS_beginUpload_Params {
	/**文件路径fs*/ 
	path:string,

	/**存储桶名称*/ 
	bucket:string,

	/**（可选项）授予被授权者读写权限。格式同grantRead参数。*/ 
	object?:string,

}

interface QCloudCOS_abortUpload_Params {
	/**上传文件（对象）的文件名，也是对象的key*/ 
	object:string,

}

interface QCloudCOS_copyObject_Params {
	/**目的存储桶名*/ 
	bucket:string,

	/**目的文件名*/ 
	object:string,

	/**复制的源文件所在的存储桶名，需要是公有读或者在当前账号有权限*/ 
	sourceBucket:string,

	/**复制的源文件的文件名*/ 
	sourceObject:number,

	/**复制的源文件的APPID*/ 
	sourceAPPID:string,

	/**复制的源文件所在的区域*/ 
	sourceRegion:string,

}

interface QCloudCOS_putBucket_Params {
	/**存储桶名*/ 
	bucket:string,

	/**（可选项）授予被授权者子账号完全控制。子账号读的权限。数组中第一个值是主账号ID 第二个值是子账号ID,数组不传主账号授权*/ 
	accessControlList?:Array,

}

interface QCloudCOS_getBucket_Params {
	/**存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

	/**（可选项）前缀匹配，用来规定返回的文件前缀地址*/ 
	prefix?:string,

	/**（可选项）定界符为一个符号，如果有 Prefix，则将 Prefix 到 delimiter 之间的相同路径归为一类，定义为 Common Prefix，然后列出所有 Common Prefix。如果没有 Prefix，则从路径起点开始。可以将其理解为结束的符号，例如如果想要结尾是 A 的结果，那么将delimiter设置为 A 即可。*/ 
	delimiter?:string,

	/**（可选项）规定返回值的编码方式，可选值：url*/ 
	encodingType?:string,

	/**（可选项）默认以 UTF-8 二进制顺序列出条目，所有列出条目从 marker 开始*/ 
	marker?:string,

	/**（可选项）单次返回的最大条目数量，*/ 
	maxKeys?:number,

}

interface QCloudCOS_putBucketACL_Params {
	/**存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

	/**（可选项）授予被授权者子账号完全控制。子账号读的权限。数组中第一个值是主账号ID 第二个值是子账号ID,数组不传主账号授权*/ 
	accessControlList?:Array,

}

interface QCloudCOS_getBucketCORS_Params {
	/**存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

}

interface QCloudCOS_putBucketCORS_Params {
	/**存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

	/**放置 CORS 的数组*/ 
	rules:Array<JSON>,

}

interface QCloudCOS_deleteBucketCORS_Params {
	/**存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

}

interface QCloudCOS_getBucketLocation_Params {
	/**存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

}

interface QCloudCOS_headBucket_Params {
	/**存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

}

interface QCloudCOS_deleteBucketLifeCycle_Params {
	/**存储桶名，格式为 <bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

}

interface QCloudCOS_putObject_Params {
	/**文件路径，支持、fs*/ 
	path:string,

	/**存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

	/**（可选项）授予被授权者子账号完全控制。子账号读的权限。数组中第一个值是主账号ID 第二个值是子账号ID,数组不传主账号授权*/ 
	object?:Array,

}

interface QCloudCOS_getObjectACL_Params {
	/**存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

	/**（可选项）指定多版本中的 Version ID*/ 
	object?:string,

}

interface QCloudCOS_putObjectACL_Params {
	/**存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

	/**对象名*/ 
	object:string,

	/**（可选项）授予被授权者子账号完全控制。子账号读的权限。数组中第一个值是主账号ID 第二个值是子账号ID,数组不传主账号授权*/ 
	accessControlList?:Array,

}

interface QCloudCOS_optionsObject_Params {
	/**存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

	/**对象键（Key）是对象在存储桶中的唯一标识。例如，在对象的访问域名 bucket1-1250000000.cos.ap-guangzhou.myqcloud.com/doc1/pic1.jpg 中，对象键为 doc1/pic1.jpg。更详细的描述可以参考[对象描述](https://cloud.tencent.com/document/product/436/13324)*/ 
	object:string,

	/**模拟跨域访问的请求HTTP方法*/ 
	accessControlRequestMethod	:string,

	/**模拟跨域访问允许的访问来源，支持通配符 * , 格式为：协议://域名[:端口]如：http://www.qq.com*/ 
	origin:string,

	/**（可选项）	在发送 OPTIONS 请求时告知服务端，接下来的请求可以使用哪些自定义的 HTTP 请求头部，支持通配符 **/ 
	accessControlRequestHeaders?:Array,

}

interface QCloudCOS_deleteObject_Params {
	/**存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

	/**对象键（Key）是对象在存储桶中的唯一标识。例如，在对象的访问域名 bucket1-1250000000.cos.ap-guangzhou.myqcloud.com/doc1/pic1.jpg 中，对象键为 doc1/pic1.jpg。更详细的描述可以参考[对象描述](https://cloud.tencent.com/document/product/436/13324)*/ 
	object:string,

}

interface QCloudCOS_deleteMultipleObject_Params {
	/**存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

	/**存放需要删除对象信息的数组*/ 
	deleteObjects:Array,

}

interface QCloudCOS_headObject_Params {
	/**存储桶名,格式为<bucketName>-<APPID> ,例如 testBucket-1253653367*/ 
	bucket:string,

	/**（可选项）如果HEAD指定版本的Object,请在该参数中指定versionID（在开启了多版本的情况才有）*/ 
	object?:string,

}

interface googlePush {
	/** 注册谷歌服务并连接谷歌服务器获取token令牌，将该token令牌在合适的时机发送给后台，作为推送设备唯一标示；该接口在init之后立刻调用，可能会出现没值的情况，注意添加判断*/ 
	registerToken(callback?: (ret:JSON) => void):void

	/** 监听推送消息，这里返回每次收到的推送消息*/ 
	addOnMessageLisener():void

	/** 取消监听推送消息监听*/ 
	removeOnMessageLisener():void

	/** 监听token刷新消息 ，当token值发生变化时，即可收到刷新后返回的token值，可放在初始化之前使用。*/ 
	addOnTokenRefreshLisener():void

	/** 取消监听token刷新消息;*/ 
	removeOnTokenRefreshLisener():void

	/**
	 * `主题订阅`
	 * ========params==========
	 *
	 * `topic` :string : (必选项) 主题名称
	 */
	subscribeToTopic(params:googlePush_subscribeToTopic_Params):void

	/**
	 * `取消主题订阅`
	 * ========params==========
	 *
	 * `topic` :string : (必选项) 主题名称
	 */
	unsubscribeFromTopic(params:googlePush_unsubscribeFromTopic_Params):void

	/**
	 * `设置默认消息通道，设置通道后应用在前台消息则通过该通道显示。设置通道可使用模块notificationUtil模块。仅android8.0以及更高`
	 * ========params==========
	 *
	 * `channel` :string : 通道id
	 */
	setDefaultChannel(params:googlePush_setDefaultChannel_Params):void

}
interface googlePush_subscribeToTopic_Params {
	/**(必选项) 主题名称*/ 
	topic:string,

}

interface googlePush_unsubscribeFromTopic_Params {
	/**(必选项) 主题名称*/ 
	topic:string,

}

interface googlePush_setDefaultChannel_Params {
	/**通道id*/ 
	channel:string,

}

interface wxFacePay {
	/** 对人脸SDK进行初始化*/ 
	initWxpayface():void

	/** 获取人脸验证信息,*/ 
	getWxpayfaceRawdata():void

	/** 释放人脸服务，断开连接*/ 
	releaseWxpayface():void

}
interface yWQModule {
	/**
	 * `数据签名（批量签名最大限度不能超过100条）`
	 * ========params==========
	 *
	 * `uniqueIds` :Array : （必须项）厂商通过同步待签名数据到医网签平台返回的待签名数据唯一标识
	 */
	signData(params:yWQModule_signData_Params, callback?: (ret:JSON) => void):void

	/** 进入医网签证书管理首页*/ 
	openIndex():void

	/**
	 * `启动证书管理对应页面`
	 * ========params==========
	 *
	 * `page` :any : （必须）启动证书管理的对应页面（可以配合判断是否存在证书已经获取用户信息的接口使用）
	 */
	onpenPage(params:yWQModule_onpenPage_Params):void

	/** 判断当前是否存在本地证书*/ 
	existsCert():boolean;

	/** 获取用户信息*/ 
	getUserInfo():JSON;

	/** 清除本地证书*/ 
	clearCert():string;

	/** 清除用户在签名过程中在本地保存的密码*/ 
	clearPin():boolean;

	/** 判断用户当前是否处于免密签名状态*/ 
	isPinExempt():boolean;

	/** 获取当前SDK对应的业务版本号（）*/ 
	getVersion():string;

}
interface yWQModule_signData_Params {
	/**（必须项）厂商通过同步待签名数据到医网签平台返回的待签名数据唯一标识*/ 
	uniqueIds:Array,

}

interface yWQModule_onpenPage_Params {
	/**（必须）启动证书管理的对应页面（可以配合判断是否存在证书已经获取用户信息的接口使用）*/ 
	page:any,

}

interface ySKAuth {
}
interface aliyunNls {
	/** 停止一句话识别*/ 
	stopSentenceRecognize():void

	/** 判断一句话识别的录音是否开始*/ 
	sentenceRecorderIsStarted():void

	/** 获取一句话识别时录音的音量大小 （暂仅支持ios）*/ 
	sentenceRecorderVoiceVolume():void

	/** 一句话识别的相关事件监听*/ 
	addSentenceEventListener():void

	/** 移除一句话识别的相关事件的监听*/ 
	removeSentenceEventListener():void

	/**
	 * `开始实时语音识别`
	 * ========params==========
	 *
	 * `token` :string : 请使用 https://help.aliyun.com/document_detail/72153.html 动态生成token
	 *
	 * `appkey` :string : 请使用阿里云语音服务管控台 生成您的appkey
	 *
	 * `serviceUrl` :string : （可选项）设置语音识别的服务地址，请使用默认配置，可忽略
	 *
	 * `intermediate` :boolean : （可选项）是否在中间识别结果的输出
	 *
	 * `punctuation` :boolean : （可选项）是否在后处理中添加标点
	 *
	 * `ITN` :boolean : （可选项）是否在后处理中执行ITN（InverseTextNormalization）
	 *
	 * `maxSentenceSilence` :number : （可选项）设置一句话的最大结束时间。也可以认为是即两句话之间的时间间隔。
	 *
	 * `customizationId` :string : （可选项）定制模型id
	 *
	 * `vocabularyId` :string : （可选项）定制泛热词id
	 *
	 * `params` :JSON : （可选项）用户自定义字段值
	 */
	startTranscriberRecognize(params:aliyunNls_startTranscriberRecognize_Params):void

	/** 停止实时语音识别*/ 
	stopTranscriberRecognize():void

	/** 判断实时语音识别的录音是否开始*/ 
	transcriberRecorderIsStarted():void

	/** 获取实时语音识别时录音的音量大小 （暂仅支持ios）*/ 
	transcriberRecorderVoiceVolume():void

	/** 实时语音识别的相关事件监听*/ 
	addTranscriberEventListener():void

	/** 移除实时语音识别的相关事件的监听*/ 
	removeTranscriberEventListener():void

	/**
	 * `开始语音朗读`
	 * ========params==========
	 *
	 * `token` :string : 请使用 https://help.aliyun.com/document_detail/72153.html 动态生成token
	 *
	 * `appkey` :string : 请使用阿里云语音服务管控台 生成您的appkey
	 *
	 * `text` :string : 朗读的文本
	 *
	 * `format` :string : （可选项）设置语音格式
	 *
	 * `serviceUrl` :string : （可选项）设置语音识别的服务地址，请使用默认配置，可忽略
	 *
	 * `voice` :string : （可选项）选择合成语音发音人
	 *
	 * `volume` :number : （可选项）合成音量大小，范围是0~100
	 *
	 * `speechRate` :number : （可选项）合成音频的语速，范围是-500~500
	 *
	 * `sampleRate` :number : （可选项）合成音频的采样率
	 *
	 * `pitchRate` :number : （可选项）语调，范围是-500~500
	 *
	 * `method` :number : （可选项）选择使用合成参数类型
	 *
	 * `params` :JSON : （可选项）用户自定义字段值
	 */
	startRead(params:aliyunNls_startRead_Params):void

	/** 停止语音朗读*/ 
	stopRead():void

	/** 语音朗读的相关事件监听*/ 
	addReadEventListener():void

	/** 移除语音朗读的相关事件的监听*/ 
	removeReadEventListener():void

}
interface aliyunNls_startTranscriberRecognize_Params {
	/**请使用 https://help.aliyun.com/document_detail/72153.html 动态生成token*/ 
	token:string,

	/**请使用阿里云语音服务管控台 生成您的appkey*/ 
	appkey:string,

	/**（可选项）设置语音识别的服务地址，请使用默认配置，可忽略*/ 
	serviceUrl?:string,

	/**（可选项）是否在中间识别结果的输出*/ 
	intermediate?:boolean,

	/**（可选项）是否在后处理中添加标点*/ 
	punctuation?:boolean,

	/**（可选项）是否在后处理中执行ITN（InverseTextNormalization）*/ 
	ITN?:boolean,

	/**（可选项）设置一句话的最大结束时间。也可以认为是即两句话之间的时间间隔。*/ 
	maxSentenceSilence?:number,

	/**（可选项）定制模型id*/ 
	customizationId?:string,

	/**（可选项）定制泛热词id*/ 
	vocabularyId?:string,

	/**（可选项）用户自定义字段值*/ 
	params?:JSON,

}

interface aliyunNls_startRead_Params {
	/**请使用 https://help.aliyun.com/document_detail/72153.html 动态生成token*/ 
	token:string,

	/**请使用阿里云语音服务管控台 生成您的appkey*/ 
	appkey:string,

	/**朗读的文本*/ 
	text:string,

	/**（可选项）设置语音格式*/ 
	format?:string,

	/**（可选项）设置语音识别的服务地址，请使用默认配置，可忽略*/ 
	serviceUrl?:string,

	/**（可选项）选择合成语音发音人*/ 
	voice?:string,

	/**（可选项）合成音量大小，范围是0~100*/ 
	volume?:number,

	/**（可选项）合成音频的语速，范围是-500~500*/ 
	speechRate?:number,

	/**（可选项）合成音频的采样率*/ 
	sampleRate?:number,

	/**（可选项）语调，范围是-500~500*/ 
	pitchRate?:number,

	/**（可选项）选择使用合成参数类型*/ 
	method?:number,

	/**（可选项）用户自定义字段值*/ 
	params?:JSON,

}

interface plPlayer {
	/**
	 * `打开视频播放器页面`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `videoUrlPath` :string : 视频资源地址，支持fs://、widget://、rtmp://、http://（android不支持widget://）
	 *
	 * `isAutoPlay` :boolean : （可选项）是否自动播放 (自动播放:true ; 不自动播放:false)（仅iOS支持，android可再addPlayerStatusListener接口 监听到ready后调用播放接口）
	 *
	 * `timeoutIntervalForMediaPackets` :number : （可选项）默认二级缓存大小，单位为 ms，默认为 300ms，增大该值可以减小播放过程中的卡顿率，但会增大弱网环境的最大累积延迟，该缓存存放的是解码之后待渲染的数据，如果该缓存池满，则二级缓存将不再接收来自一级缓存的数据，该参数仅对 rtmp/flv 直播生效
	 *
	 * `isVideoToolbox` :boolean : （可选项）是否使用 video toolbox 硬解码，使用 video toolbox Player 将尝试硬解码，失败后，将切换回软解码，该参数仅对 rtmp/flv 直播生效
	 *
	 * `dNSManager` :string : （可选项）dns 查询，是否使用内置 DNS 解析，是否开启 DNS 解析，默认使用系统 API 解析，该参数仅对 rtmp/flv 直播生效
	 *
	 * `videoCacheFolderPath` :string : （可选项）视频缓存目录，默认为空，该属性仅对点播 mp4 有效, 当 videoCacheFolderPath 有值时，默认关闭 DNS  解析，支持fs
	 *
	 * `videoCacheExtensionName` :string : （可选项）视频缓存扩展名，该属性仅对点播 mp4 有效，需在视频缓存目录 videoCacheFolderPath 基础上设置
	 *
	 * `headUserAgent` :string : （可选项）该参数用于设置 http 的 header，不可包含 "\n" 或 "\r"，包含"\n" 或 "\r" 则设置无效，设置 http 的 header,需要以类似 @"key:value" 的方式，例如：给 http 的 header 添加 referer，则以 @"Referer:http://xxx.xxx.com" 格式配置
	 *
	 * `backgroundPlayEnable` :boolean : （可选项）是否支持后台播放，需要注意的是在后台播放时仅有音频，视频会在回到前台时继续播放。（android支持后台播放，但不支持此参数设置）
	 *
	 * `loopPlay` :boolean : （可选项）是否循环播放，该属性仅对点播有效。
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	openPlayer(params:plPlayer_openPlayer_Params):void

	/** 开始播放*/ 
	play():void

	/** 暂停播放*/ 
	pause():void

	/** 暂停后恢复播放*/ 
	resume():void

	/** 停止播放*/ 
	stop():void

	/**
	 * `同一个页面，已经调用play接口后，切换视频地址时调用（前提条件，同一界面已经调用过play接口）。`
	 * ========params==========
	 *
	 * `url` :string : 视频资源地址，支持fs://、widget://、rtmp://、http://（android不支持widget://）
	 *
	 * `sameSource` :boolean : （可选项）是否是同种格式播放，同格式切换打开更快(当sameSource 为 true 时，视频格式与切换前视频格式不同时，会导致视频打开失败)(仅iOS支持)
	 */
	switchPlayUrl(params:plPlayer_switchPlayUrl_Params, callback?: (ret:JSON) => void):void

	/** 获取视频的时长*/ 
	getTotalDuration(callback?: (ret:JSON) => void):void

	/** 获取已经播放的时长*/ 
	getCurrentTime(callback?: (ret:JSON) => void):void

	/** 添加播放状态监听*/ 
	addPlayerStatusListener(callback?: (ret:JSON) => void):void

	/**
	 * `快速定位到指定播放时间点，该方法仅在回放时起作用`
	 * ========params==========
	 *
	 * `time` :number : 时间点，单位秒
	 */
	seekTo(params:plPlayer_seekTo_Params):void

	/**
	 * `设置音量  (**注意:在iOS中，此接口设置的是播放器的音量，而不是系统音量**)`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）0-3.0
	 */
	setVolume(params:plPlayer_setVolume_Params):void

	/** 获取播放器音量  **注意:对于iOS来说:此接口只能获取播放器的音量，而不是系统的音量**（仅iOS支持）*/ 
	getVolume():void

	/**
	 * `设置屏幕亮度 **在 iOS 平台上设置的是系统屏幕亮度**`
	 * ========params==========
	 *
	 * `brightness` :number : （可选项）设置的屏幕的亮度，取值范围：0-100
	 */
	setBrightness(params:plPlayer_setBrightness_Params):void

	/** 获取当前屏幕亮度值 **在 iOS 平台上获取的是系统屏幕亮度***/ 
	getBrightness():void

	/** 隐藏播放器*/ 
	hidePlayer():void

	/** 显示播放器*/ 
	showPlayer():void

	/** 关闭播放器*/ 
	closePlayer():void

	/**
	 * `倍速播放`
	 * ========params==========
	 *
	 * `speed` :number : （可选项）设置视频播放倍速(取值范围 0.2-32)
	 */
	setSpeed(params:plPlayer_setSpeed_Params):void

	/**
	 * `截屏`
	 * ========params==========
	 *
	 * `isSavedPhotosAlbum` :boolean : （可选项）是否存入相册（仅iOS支持）
	 *
	 * `delayTime` :number : （可选项）延时毫秒数，延时此毫秒数后截屏
	 */
	getScreenShot(params:plPlayer_getScreenShot_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置画面旋转模式（该属性仅对 rtmp/flv 直播与 ffmpeg 点播有效）`
	 * ========params==========
	 *
	 * `rotationMode` :number : （可选项）画面旋转模式，0：无旋转，1：向左旋，2：向右旋，3：垂直翻转，4：水平翻转，5：旋转 180 度
	 */
	setRotationMode(params:plPlayer_setRotationMode_Params):void

}
interface plPlayer_openPlayer_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**视频资源地址，支持fs://、widget://、rtmp://、http://（android不支持widget://）*/ 
	videoUrlPath:string,

	/**（可选项）是否自动播放 (自动播放:true ; 不自动播放:false)（仅iOS支持，android可再addPlayerStatusListener接口 监听到ready后调用播放接口）*/ 
	isAutoPlay?:boolean,

	/**（可选项）默认二级缓存大小，单位为 ms，默认为 300ms，增大该值可以减小播放过程中的卡顿率，但会增大弱网环境的最大累积延迟，该缓存存放的是解码之后待渲染的数据，如果该缓存池满，则二级缓存将不再接收来自一级缓存的数据，该参数仅对 rtmp/flv 直播生效*/ 
	timeoutIntervalForMediaPackets?:number,

	/**（可选项）是否使用 video toolbox 硬解码，使用 video toolbox Player 将尝试硬解码，失败后，将切换回软解码，该参数仅对 rtmp/flv 直播生效*/ 
	isVideoToolbox?:boolean,

	/**（可选项）dns 查询，是否使用内置 DNS 解析，是否开启 DNS 解析，默认使用系统 API 解析，该参数仅对 rtmp/flv 直播生效*/ 
	dNSManager?:string,

	/**（可选项）视频缓存目录，默认为空，该属性仅对点播 mp4 有效, 当 videoCacheFolderPath 有值时，默认关闭 DNS  解析，支持fs*/ 
	videoCacheFolderPath?:string,

	/**（可选项）视频缓存扩展名，该属性仅对点播 mp4 有效，需在视频缓存目录 videoCacheFolderPath 基础上设置*/ 
	videoCacheExtensionName?:string,

	/**（可选项）该参数用于设置 http 的 header，不可包含 "\n" 或 "\r"，包含"\n" 或 "\r" 则设置无效，设置 http 的 header,需要以类似 @"key:value" 的方式，例如：给 http 的 header 添加 referer，则以 @"Referer:http://xxx.xxx.com" 格式配置*/ 
	headUserAgent?:string,

	/**（可选项）是否支持后台播放，需要注意的是在后台播放时仅有音频，视频会在回到前台时继续播放。（android支持后台播放，但不支持此参数设置）*/ 
	backgroundPlayEnable?:boolean,

	/**（可选项）是否循环播放，该属性仅对点播有效。*/ 
	loopPlay?:boolean,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface plPlayer_switchPlayUrl_Params {
	/**视频资源地址，支持fs://、widget://、rtmp://、http://（android不支持widget://）*/ 
	url:string,

	/**（可选项）是否是同种格式播放，同格式切换打开更快(当sameSource 为 true 时，视频格式与切换前视频格式不同时，会导致视频打开失败)(仅iOS支持)*/ 
	sameSource?:boolean,

}

interface plPlayer_seekTo_Params {
	/**时间点，单位秒*/ 
	time:number,

}

interface plPlayer_setVolume_Params {
	/**（可选项）0-3.0*/ 
	volume?:number,

}

interface plPlayer_setBrightness_Params {
	/**（可选项）设置的屏幕的亮度，取值范围：0-100*/ 
	brightness?:number,

}

interface plPlayer_setSpeed_Params {
	/**（可选项）设置视频播放倍速(取值范围 0.2-32)*/ 
	speed?:number,

}

interface plPlayer_getScreenShot_Params {
	/**（可选项）是否存入相册（仅iOS支持）*/ 
	isSavedPhotosAlbum?:boolean,

	/**（可选项）延时毫秒数，延时此毫秒数后截屏*/ 
	delayTime?:number,

}

interface plPlayer_setRotationMode_Params {
	/**（可选项）画面旋转模式，0：无旋转，1：向左旋，2：向右旋，3：垂直翻转，4：水平翻转，5：旋转 180 度*/ 
	rotationMode?:number,

}

interface arcFacePublic {
	/** 初始化引擎*/ 
	init(callback?: (ret:JSON) => void):void

	/**
	 * `开启人脸检测`
	 * ========params==========
	 *
	 * `rect` :any : （可选项）控件位置参数
	 *
	 * `cameraId` :number : （可选项）指定使用前摄像头或后摄像头
	 *
	 * `mirror` :boolean : (可选项)是否开启镜像，iOS不支持
	 *
	 * `faceOrientation` :string : (可选项)设置检测人脸方向
	 *
	 * `showFaceRect` :boolean : （可选项）识别到人脸是否显示人脸位置框
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openFaceDetect(params:arcFacePublic_openFaceDetect_Params, callback?: (ret:JSON) => void):void

	/** 关闭获取人脸控件*/ 
	closeFaceDetect(callback?: (ret:JSON) => void):void

	/**
	 * `开启人脸检测`
	 * ========params==========
	 *
	 * `imgPath` :string : 检测图片路径，支持fs，widget，原生路径。
	 */
	detectImg(params:arcFacePublic_detectImg_Params, callback?: (ret:JSON) => void):void

	/**
	 * `人脸对比返回相似度`
	 * ========params==========
	 *
	 * `featureL` :string : 对比人脸特征base64字符串，iOS传图片路径，支持fs，widget，
	 *
	 * `featureR` :string : 被对比人脸特征base64字符串，iOS传图片路径，支持fs，widget，
	 */
	compareFace(params:arcFacePublic_compareFace_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加人脸到本地库（iOS不支持）`
	 * ========params==========
	 *
	 * `feature` :string : 人脸特征base64字符串
	 *
	 * `img` :any : 人脸图片base64字符串
	 *
	 * `name` :string : 人脸对应信息
	 */
	addFace(params:arcFacePublic_addFace_Params, callback?: (ret:JSON) => void):void

	/**
	 * `把人脸从本地库删除（iOS不支持）`
	 * ========params==========
	 *
	 * `name` :string : 人脸对应信息
	 */
	delFace(params:arcFacePublic_delFace_Params, callback?: (ret:JSON) => void):void

	/** 获取本地库所有人脸信息（iOS不支持）*/ 
	getAllFace(callback?: (ret:JSON) => void):void

	/** 根据图片base64字符串获取图片（iOS不支持）*/ 
	getImagePath(callback?: (ret:JSON) => void):void

	/**
	 * `与本地库所有人脸对比返回最大相似度（iOS不支持）`
	 * ========params==========
	 *
	 * `feature` :string : 对比人脸特征base64字符串
	 */
	compareAllFace(params:arcFacePublic_compareAllFace_Params, callback?: (ret:JSON) => void):void

}
interface arcFacePublic_openFaceDetect_Params {
	/**（可选项）控件位置参数*/ 
	rect?:any,

	/**（可选项）指定使用前摄像头或后摄像头*/ 
	cameraId?:number,

	/**(可选项)是否开启镜像，iOS不支持*/ 
	mirror?:boolean,

	/**(可选项)设置检测人脸方向*/ 
	faceOrientation?:string,

	/**（可选项）识别到人脸是否显示人脸位置框*/ 
	showFaceRect?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface arcFacePublic_detectImg_Params {
	/**检测图片路径，支持fs，widget，原生路径。*/ 
	imgPath:string,

}

interface arcFacePublic_compareFace_Params {
	/**对比人脸特征base64字符串，iOS传图片路径，支持fs，widget，*/ 
	featureL:string,

	/**被对比人脸特征base64字符串，iOS传图片路径，支持fs，widget，*/ 
	featureR:string,

}

interface arcFacePublic_addFace_Params {
	/**人脸特征base64字符串*/ 
	feature:string,

	/**人脸图片base64字符串*/ 
	img:any,

	/**人脸对应信息*/ 
	name:string,

}

interface arcFacePublic_delFace_Params {
	/**人脸对应信息*/ 
	name:string,

}

interface arcFacePublic_compareAllFace_Params {
	/**对比人脸特征base64字符串*/ 
	feature:string,

}

interface stripePay {
	/** 打开输入信用卡信息界面，*/ 
	openCardView():void

	/**
	 * `根据信用卡信息，直接获取 token`
	 * ========params==========
	 *
	 * `number` :string : 卡号
	 *
	 * `expMonth` :number : 过期月份，如10
	 *
	 * `expYear` :number : 过期年份，如：2018
	 *
	 * `cvc` :string : （可选项）Three-letter ISO currency code representing the currency paid out to the bank account. This is only applicable when tokenizing debit cards to issue payouts to managed accounts. You should not set it otherwise. The card can then be used as a transfer destination for funds in this currency.
	 *
	 * `name` :string : （可选项）The cardholder's name-->
	 */
	getToken(params:stripePay_getToken_Params, callback?: (ret:JSON) => void):void

	/** 判断当前设备是否支持苹果支付*/ 
	deviceSupportsApplePay():void

	/**
	 * `调用苹果支付，获取 token`
	 * ========params==========
	 *
	 * `country` :string : The two-letter code for the country where the payment will be processed. This should be the country of your Stripe account
	 *
	 * `currency` :string : The three-letter code for the currency used by this payment request. Apple Pay interprets the amounts provided by the summary items attached to this request as amounts in this currency.
	 *
	 * `paymentItems` :Array : 要支付的实物信息组成的数组
	 */
	applePay(params:stripePay_applePay_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置苹果支付状态`
	 * ========params==========
	 *
	 * `status` :string : 支付状态
	 */
	setApplePayStatus(params:stripePay_setApplePayStatus_Params):void

}
interface stripePay_getToken_Params {
	/**卡号*/ 
	number:string,

	/**过期月份，如10*/ 
	expMonth:number,

	/**过期年份，如：2018*/ 
	expYear:number,

	/**（可选项）Three-letter ISO currency code representing the currency paid out to the bank account. This is only applicable when tokenizing debit cards to issue payouts to managed accounts. You should not set it otherwise. The card can then be used as a transfer destination for funds in this currency.*/ 
	cvc?:string,

	/**（可选项）The cardholder's name-->*/ 
	name?:string,

}

interface stripePay_applePay_Params {
	/**The two-letter code for the country where the payment will be processed. This should be the country of your Stripe account*/ 
	country:string,

	/**The three-letter code for the currency used by this payment request. Apple Pay interprets the amounts provided by the summary items attached to this request as amounts in this currency.*/ 
	currency:string,

	/**要支付的实物信息组成的数组*/ 
	paymentItems:Array,

}

interface stripePay_setApplePayStatus_Params {
	/**支付状态*/ 
	status:string,

}

interface omxVideo {
	/** 初始化SDK*/ 
	initSDKParms():void

	/** 请求数据*/ 
	reqVideoData():void

	/** 开始播放*/ 
	startPlayVideo():void

}
interface allinPay {
	/** 判断当前设备是否安装微信客户端.*/ 
	isInstalled():void

	/**
	 * `传入经过签名后的支付信息字符串，吊起支付页面支付`
	 * ========params==========
	 *
	 * `payData` :string : 支付信息经过签名后的字符串，签名方法参考通联支付文档---`02通联移动支付商户接入接口技术规范V4.5SDK版20170713` 之 `PayData 订单数据定义`
	 *
	 * `mode` :string : 环境配置
	 */
	pay(params:allinPay_pay_Params):void

	/**
	 * `绑卡，Android系统（暂不支持）`
	 * ========params==========
	 *
	 * `cardInfo` :string : 卡片信息
	 *
	 * `mode` :string : 环境配置
	 */
	bindCard(params:allinPay_bindCard_Params):void

	/**
	 * `控件支付，Android系统（暂不支持）`
	 * ========params==========
	 *
	 * `payData` :string : 支付信息
	 *
	 * `mode` :string : 环境配置
	 */
	widgetPay(params:allinPay_widgetPay_Params):void

	/**
	 * `用户银行卡快捷实名认证，Android系统（暂不支持）`
	 * ========params==========
	 *
	 * `userInfo` :string : 用户信息
	 *
	 * `mode` :string : 环境配置
	 */
	verifyUser(params:allinPay_verifyUser_Params):void

	/**
	 * `身份认证，Android系统（暂不支持）`
	 * ========params==========
	 *
	 * `authInfo` :string : 用户信息
	 *
	 * `mode` :string : 环境配置
	 */
	startAuth(params:allinPay_startAuth_Params):void

	/**
	 * `通联微信支付接口`
	 * ========params==========
	 *
	 * `trxamt` :number : 交易金额，单位为分,最大长度为15
	 *
	 * `reqsn` :string : 商户交易单号，商户交易订单号
	 *
	 * `randomst` :string : （可选项）随机字符串，商户自行生成的随机字符串
	 *
	 * `body` :string : （可选项）订单标题，订单商品名称，为空则以商户名作为商品名称
	 *
	 * `remark` :string : （可选项）交易结果通知地址，接收微信支付异步通知回调地址，通知url必须为直接可访问的url，不能携带参数。
	 *
	 * `version` :string : （可选项）接口版本号
	 *
	 * `validtime` :string : （可选项）订单有效时间，单位：分钟
	 */
	wxPay(params:allinPay_wxPay_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取微信支付相关参数后直接调起微信支付`
	 * ========params==========
	 *
	 * `appid` :string : 从微信开放平台获取的 appid
	 *
	 * `prepayid` :string : 预支付订单号
	 *
	 * `partnerid` :string : 商家和微信合作的 id 号，审核通过后微信服务器会发送到商家邮箱
	 *
	 * `noncestr` :string : 随机字符串，防重发
	 *
	 * `timestamp` :string : 时间戳，防重发
	 *
	 * `package` :string : （可选项）扩展字段，暂填写固定值Sign=WXPay
	 *
	 * `sign` :string : 商家根据微信开放平台文档对数据做的签名，详见：[安全规范-签名算法](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_12&index=2)
	 */
	wxPayDirect(params:allinPay_wxPayDirect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加结果监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件的名字
	 */
	addEventListener(params:allinPay_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加结果监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件的名字
	 */
	removeEventListener(params:allinPay_removeEventListener_Params):void

}
interface allinPay_pay_Params {
	/**支付信息经过签名后的字符串，签名方法参考通联支付文档---`02通联移动支付商户接入接口技术规范V4.5SDK版20170713` 之 `PayData 订单数据定义`*/ 
	payData:string,

	/**环境配置*/ 
	mode:string,

}

interface allinPay_bindCard_Params {
	/**卡片信息*/ 
	cardInfo:string,

	/**环境配置*/ 
	mode:string,

}

interface allinPay_widgetPay_Params {
	/**支付信息*/ 
	payData:string,

	/**环境配置*/ 
	mode:string,

}

interface allinPay_verifyUser_Params {
	/**用户信息*/ 
	userInfo:string,

	/**环境配置*/ 
	mode:string,

}

interface allinPay_startAuth_Params {
	/**用户信息*/ 
	authInfo:string,

	/**环境配置*/ 
	mode:string,

}

interface allinPay_wxPay_Params {
	/**交易金额，单位为分,最大长度为15*/ 
	trxamt:number,

	/**商户交易单号，商户交易订单号*/ 
	reqsn:string,

	/**（可选项）随机字符串，商户自行生成的随机字符串*/ 
	randomst?:string,

	/**（可选项）订单标题，订单商品名称，为空则以商户名作为商品名称*/ 
	body?:string,

	/**（可选项）交易结果通知地址，接收微信支付异步通知回调地址，通知url必须为直接可访问的url，不能携带参数。*/ 
	remark?:string,

	/**（可选项）接口版本号*/ 
	version?:string,

	/**（可选项）订单有效时间，单位：分钟*/ 
	validtime?:string,

}

interface allinPay_wxPayDirect_Params {
	/**从微信开放平台获取的 appid*/ 
	appid:string,

	/**预支付订单号*/ 
	prepayid:string,

	/**商家和微信合作的 id 号，审核通过后微信服务器会发送到商家邮箱*/ 
	partnerid:string,

	/**随机字符串，防重发*/ 
	noncestr:string,

	/**时间戳，防重发*/ 
	timestamp:string,

	/**（可选项）扩展字段，暂填写固定值Sign=WXPay*/ 
	package?:string,

	/**商家根据微信开放平台文档对数据做的签名，详见：[安全规范-签名算法](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_12&index=2)*/ 
	sign:string,

}

interface allinPay_addEventListener_Params {
	/**监听的事件的名字*/ 
	name:string,

}

interface allinPay_removeEventListener_Params {
	/**监听的事件的名字*/ 
	name:string,

}

interface geetestModule {
}
interface tencentOSS {
	/**
	 * `初始化`
	 * ========params==========
	 *
	 * `appid` :string : （必填项）在腾讯云创建“创建存储桶”名称后面跟随的固定id串,如：tyousan-1252112920,其中"1252112920"就是appid值。
	 *
	 * `secretId` :string : （必填项）在腾讯云申请的secretId。[见：[API密钥管理](https://console.cloud.tencent.com/cam/capi)]
	 *
	 * `secretKey` :string : （必填项）在腾讯云申请的secretKey。[见：[API密钥管理](https://console.cloud.tencent.com/cam/capi)]
	 *
	 * `region` :string : （必填项）腾讯云存储桶节点地址[ap-beijing-1,ap-beijing,ap-shanghai,ap-guangzhou,ap-guangzhou-2,ap-chengdu,ap-singapore,ap-hongkong,na-toronto,eu-frankfurt,cn-north,cn-south,cn-east,cn-southwest,sg]
	 */
	initUploadService(params:tencentOSS_initUploadService_Params, callback?: (ret:JSON) => void):void

	/**
	 * `上传文件`
	 * ========params==========
	 *
	 * `bucketName` :string : （必填项）存储桶名称。如：tyousan-1252112920,其中"tyousan"就是bucketName值。
	 *
	 * `cosPath` :string : （必填项）存储在腾讯云远端路径，即存储到 COS 上的绝对路径
	 *
	 * `srcPath` :string : （必填项）本地文件的绝对路径.(支持fs:// widget://)
	 */
	uploadFile(params:tencentOSS_uploadFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载文件`
	 * ========params==========
	 *
	 * `bucketName` :string : （必填项）存储桶名称。如：tyousan-1252112920,其中"tyousan"就是bucketName值。
	 *
	 * `cosPath` :string : （必填项）存储在腾讯云远端路径，即存储到 COS 上的绝对路径
	 *
	 * `srcPath` :string : （必填项）下载到本地的文件夹路径.(支持fs://)
	 */
	downloadFile(params:tencentOSS_downloadFile_Params, callback?: (ret:JSON) => void):void

}
interface tencentOSS_initUploadService_Params {
	/**（必填项）在腾讯云创建“创建存储桶”名称后面跟随的固定id串,如：tyousan-1252112920,其中"1252112920"就是appid值。*/ 
	appid:string,

	/**（必填项）在腾讯云申请的secretId。[见：[API密钥管理](https://console.cloud.tencent.com/cam/capi)]*/ 
	secretId:string,

	/**（必填项）在腾讯云申请的secretKey。[见：[API密钥管理](https://console.cloud.tencent.com/cam/capi)]*/ 
	secretKey:string,

	/**（必填项）腾讯云存储桶节点地址[ap-beijing-1,ap-beijing,ap-shanghai,ap-guangzhou,ap-guangzhou-2,ap-chengdu,ap-singapore,ap-hongkong,na-toronto,eu-frankfurt,cn-north,cn-south,cn-east,cn-southwest,sg]*/ 
	region:string,

}

interface tencentOSS_uploadFile_Params {
	/**（必填项）存储桶名称。如：tyousan-1252112920,其中"tyousan"就是bucketName值。*/ 
	bucketName:string,

	/**（必填项）存储在腾讯云远端路径，即存储到 COS 上的绝对路径*/ 
	cosPath:string,

	/**（必填项）本地文件的绝对路径.(支持fs:// widget://)*/ 
	srcPath:string,

}

interface tencentOSS_downloadFile_Params {
	/**（必填项）存储桶名称。如：tyousan-1252112920,其中"tyousan"就是bucketName值。*/ 
	bucketName:string,

	/**（必填项）存储在腾讯云远端路径，即存储到 COS 上的绝对路径*/ 
	cosPath:string,

	/**（必填项）下载到本地的文件夹路径.(支持fs://)*/ 
	srcPath:string,

}

interface mobVerify {
}
interface orcidcard {
	/** 分享文本内容*/ 
	frontIdCard():void

	/** 分享文本内容*/ 
	backIdCard():void

}
interface aUnifyPay {
	/**
	 * `支付订单，本接口仅供开发阶段测试使用。`
	 * ========params==========
	 *
	 * `payChannel` :string : 支付渠道
	 *
	 * `merOrderId` :string : 商户订单号
	 *
	 * `mid` :string : 商户号
	 *
	 * `tid` :string : 机构商户号
	 *
	 * `goods` :JSON : 商品详情
	 *
	 * `totalAmount` :string : MD5Key
	 *
	 * `msgSrc` :string : 消息来源
	 *
	 * `urlStr` :string : 下单接口URL
	 *
	 * `mobile` :string : 手机号
	 *
	 * `merchantUserId` :string : 商户用户号
	 *
	 * `notifyUrl` :string : 通知地址
	 *
	 * `srcReserve` :string : 商户定制化展示的内容，长度不大于255
	 *
	 * `secureTransaction` :boolean : （仅android支持）是否担保交易
	 *
	 * `msgId` :string : （仅android支持）消息id
	 */
	pay(params:aUnifyPay_pay_Params, callback?: (ret:JSON) => void):void

	/** （仅android支持）初始化，android调用 pay 接口前需要先调用此接口*/ 
	init(callback?: (ret:JSON) => void):void

	/**
	 * `支付订单`
	 * ========params==========
	 *
	 * `channel` :string : 支付渠道
	 *
	 * `appPayRequest` :string : 支付数据
	 */
	payWithData(params:aUnifyPay_payWithData_Params, callback?: (ret:JSON) => void):void

}
interface aUnifyPay_pay_Params {
	/**支付渠道*/ 
	payChannel:string,

	/**商户订单号*/ 
	merOrderId:string,

	/**商户号*/ 
	mid:string,

	/**机构商户号*/ 
	tid:string,

	/**商品详情*/ 
	goods:JSON,

	/**MD5Key*/ 
	totalAmount:string,

	/**消息来源*/ 
	msgSrc:string,

	/**下单接口URL*/ 
	urlStr:string,

	/**手机号*/ 
	mobile:string,

	/**商户用户号*/ 
	merchantUserId:string,

	/**通知地址*/ 
	notifyUrl:string,

	/**商户定制化展示的内容，长度不大于255*/ 
	srcReserve:string,

	/**（仅android支持）是否担保交易*/ 
	secureTransaction:boolean,

	/**（仅android支持）消息id*/ 
	msgId:string,

}

interface aUnifyPay_payWithData_Params {
	/**支付渠道*/ 
	channel:string,

	/**支付数据*/ 
	appPayRequest:string,

}

interface bLocation {
}
interface txLive {
	/**
	 * `打开推流界面`
	 * ========params==========
	 *
	 * `x` :number : （可选项）
	 *
	 * `y` :number : （可选项）
	 *
	 * `w` :number : （可选项）
	 *
	 * `h` :number : （可选项）
	 *
	 * `url` :string : 必填项，推流的rtmp地址
	 *
	 * `autoPush` :boolean : 是否自动推流
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动）
	 *
	 * `ret` :JSON : null
	 */
	openPusher(params:txLive_openPusher_Params):void

	/**
	 * `控制推流界面按钮可见状态`
	 * ========params==========
	 *
	 * `btnid` :string : 界面的可见按钮ID,
	 *
	 * `show` :number : 按钮可见状态0为隐藏1为显示
	 *
	 * `ret` :JSON : null
	 */
	setLiveBtnsVisibility(params:txLive_setLiveBtnsVisibility_Params):void

	/**
	 * `通过按钮id来模拟点击按钮`
	 * ========params==========
	 *
	 * `btnid` :string : 界面的可见按钮ID,
	 *
	 * `ret` :JSON : null
	 */
	liveBtnsPerformClickById(params:txLive_liveBtnsPerformClickById_Params):void

	/** 开始推流*/ 
	startPush(callback?: (ret:JSON) => void):void

	/** 结束视频推流*/ 
	stopPush():void

	/**
	 * `播放视频`
	 * ========params==========
	 *
	 * `x` :number : （可选项）
	 *
	 * `y` :number : （可选项）
	 *
	 * `w` :number : （可选项）
	 *
	 * `h` :number : （可选项）
	 *
	 * `url` :string : 必填项，播放视频地址
	 *
	 * `type` :number : 播放类型（仅支持Android）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动）
	 *
	 * `ret` :JSON : null
	 */
	openPlayer(params:txLive_openPlayer_Params):void

	/** 开始播放视频*/ 
	startPlay():void

	/** 停止播放视频*/ 
	stopPlay():void

	/**
	 * `通过按钮id来模拟点击按钮`
	 * ========params==========
	 *
	 * `btnid` :string : 界面的可见按钮ID,
	 *
	 * `ret` :JSON : null
	 */
	playBtnsPerformClickById(params:txLive_playBtnsPerformClickById_Params):void

	/** 隐藏视频*/ 
	hidePlayer():void

	/** 显示视频*/ 
	showPlayer():void

	/** 恢复推流*/ 
	resumePush():void

	/** 恢复推流*/ 
	resumePush():void

	/** 美颜面板显示/隐藏监听*/ 
	addBeautyBoardListener():void

}
interface txLive_openPusher_Params {
	/**（可选项）*/ 
	x?:number,

	/**（可选项）*/ 
	y?:number,

	/**（可选项）*/ 
	w?:number,

	/**（可选项）*/ 
	h?:number,

	/**必填项，推流的rtmp地址*/ 
	url:string,

	/**是否自动推流*/ 
	autoPush:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动）*/ 
	fixed?:boolean,

	/**null*/ 
	ret:JSON,

}

interface txLive_setLiveBtnsVisibility_Params {
	/**界面的可见按钮ID,*/ 
	btnid:string,

	/**按钮可见状态0为隐藏1为显示*/ 
	show:number,

	/**null*/ 
	ret:JSON,

}

interface txLive_liveBtnsPerformClickById_Params {
	/**界面的可见按钮ID,*/ 
	btnid:string,

	/**null*/ 
	ret:JSON,

}

interface txLive_openPlayer_Params {
	/**（可选项）*/ 
	x?:number,

	/**（可选项）*/ 
	y?:number,

	/**（可选项）*/ 
	w?:number,

	/**（可选项）*/ 
	h?:number,

	/**必填项，播放视频地址*/ 
	url:string,

	/**播放类型（仅支持Android）*/ 
	type:number,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动）*/ 
	fixed?:boolean,

	/**null*/ 
	ret:JSON,

}

interface txLive_playBtnsPerformClickById_Params {
	/**界面的可见按钮ID,*/ 
	btnid:string,

	/**null*/ 
	ret:JSON,

}

interface UIQiniuShortVideo {
	/**
	 * `打开短视频界面。 **注意：如果要将视频上传至七牛云，需要配置appKey，uploadToken，domain 参数**`
	 * ========params==========
	 *
	 * `token` :string : 上传视频空间 token
	 *
	 * `appKey` :string : 七牛云存储appKey（该参数暂仅支持Android，iOS不需要传此参数）
	 *
	 * `uploadToken` :string : 七牛云存储token
	 *
	 * `uploadKey` :string : 七牛上传文件的key，若不传sdk默认生成
	 *
	 * `domain` :string : 七牛云存储域名
	 *
	 * `storageDir` :string : 视频保存路径（仅支持fs:// & 本地路径）（该参数暂仅支持Android）
	 *
	 * `cacheDir` :string : 首帧缓存路径（仅支持fs:// & 本地路径）
	 *
	 * `cameraPreviewSetting` :JSON : 相机预览设置   (目前仅Android支持)
	 *
	 * `encodeVideoSetting` :JSON : 相机预览设置    (目前仅Android支持)
	 *
	 * `ret` :JSON : null
	 */
	open(params:UIQiniuShortVideo_open_Params):void

	/** 清除保存在本地的所有视频文件。*/ 
	clearCache():void

	/** 关闭录制页面*/ 
	close():void

	/** 制作GIF图*/ 
	makeGif():void

}
interface UIQiniuShortVideo_open_Params {
	/**上传视频空间 token*/ 
	token:string,

	/**七牛云存储appKey（该参数暂仅支持Android，iOS不需要传此参数）*/ 
	appKey:string,

	/**七牛云存储token*/ 
	uploadToken:string,

	/**七牛上传文件的key，若不传sdk默认生成*/ 
	uploadKey:string,

	/**七牛云存储域名*/ 
	domain:string,

	/**视频保存路径（仅支持fs:// & 本地路径）（该参数暂仅支持Android）*/ 
	storageDir:string,

	/**首帧缓存路径（仅支持fs:// & 本地路径）*/ 
	cacheDir:string,

	/**相机预览设置   (目前仅Android支持)*/ 
	cameraPreviewSetting:JSON,

	/**相机预览设置    (目前仅Android支持)*/ 
	encodeVideoSetting:JSON,

	/**null*/ 
	ret:JSON,

}

interface webp {
	/**
	 * `渐进式加载图片`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `path` :string : （必填项）图片地址，支持fs://、widget://、http://
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	open(params:webp_open_Params):void

	/** 关闭*/ 
	close():void

	/** 显示*/ 
	show():void

	/** 隐藏*/ 
	hide():void

	/**
	 * `重置rect`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 */
	move(params:webp_move_Params):void

}
interface webp_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（必填项）图片地址，支持fs://、widget://、http://*/ 
	path:string,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface webp_move_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

}

interface baiduIdentifyOCR {
	/** 初始化*/ 
	init(callback?: (ret:JSON) => void):void

	/** 获取身份证正面信息*/ 
	identifyIDFace(callback?: (ret:JSON) => void):void

	/** 获取身份证背面信息*/ 
	identifyIDBack():void

	/** 通用文字识别*/ 
	generalBasicOCR():void

	/** 通用文字识别(高精度版)*/ 
	generalAccurateBasicOCR():void

	/** 通用文字识别(含位置信息版)*/ 
	generalOCR():void

	/** 通用文字识别(高精度含位置版)*/ 
	generalAccurateOCR():void

	/** 通用文字识别(含生僻字版)*/ 
	generalEnchancedOCR():void

	/** 网络图片文字识别*/ 
	webImageOCR():void

	/** 银行卡正面拍照识别*/ 
	bankCardOCROnline():void

	/** 驾驶证识别*/ 
	drivingLicenseOCR():void

}
interface mobPush {
	/** 设置推送监听。*/ 
	setListener(callback?: (ret:JSON) => void):void

	/** 移除消息监听*/ 
	removeListener():void

	/**
	 * `绑定手机`
	 * ========params==========
	 *
	 * `phone` :Array : 手机号
	 */
	bindPhone(params:mobPush_bindPhone_Params, callback?: (ret:JSON) => void):void

	/**
	 * `绑定用户别名。服务端可以指定别名进行消息推送`
	 * ========params==========
	 *
	 * `alias` :string : 别名
	 */
	bindAlias(params:mobPush_bindAlias_Params, callback?: (ret:JSON) => void):void

	/**
	 * `绑定标签`
	 * ========params==========
	 *
	 * `tags` :number : 标签列表
	 */
	bindTags(params:mobPush_bindTags_Params, callback?: (ret:JSON) => void):void

	/** 删除用户别名*/ 
	deleteAlias(callback?: (ret:JSON) => void):void

	/**
	 * `删除标签`
	 * ========params==========
	 *
	 * `tags` :Array : 标签列表，不填则删除所有标签
	 */
	deleteTags(params:mobPush_deleteTags_Params, callback?: (ret:JSON) => void):void

	/** 获取所有标签*/ 
	getTags(callback?: (ret:JSON) => void):void

	/** 获取别名*/ 
	getAlias(callback?: (ret:JSON) => void):void

	/**
	 * `打开或关闭远程推送（应用内推送和本地通知不送影响，只关闭远程推送）`
	 * ========params==========
	 *
	 * `isPush` :boolean : 是否打开远程推送
	 */
	stopAndrestartPush(params:mobPush_stopAndrestartPush_Params):void

	/** 当前远程推送是否关闭*/ 
	isPushStopped(callback?: (ret:JSON) => void):void

	/**
	 * `设置角标值到Mob服务器（仅ios支持）`
	 * ========params==========
	 *
	 * `badge` :number : 角标值
	 */
	setBadge(params:mobPush_setBadge_Params):void

	/** 清除角标，但不清空通知栏消息（仅ios支持）*/ 
	clearBadge():void

	/** 获取注册id（可与用户id绑定，实现向指定用户推送消息）*/ 
	getRegistrationID(callback?: (ret:JSON) => void):void

	/**
	 * `设置是否显示角标（仅android支持）`
	 * ========params==========
	 *
	 * `show` :boolean : 是否显示角标
	 */
	setShowBadge(params:mobPush_setShowBadge_Params):void

	/** 当前是否显示角标（仅android支持）*/ 
	isShowBadge(callback?: (ret:JSON) => void):void

	/** 清除本地通知（仅android支持）*/ 
	clearLocalNotifications(callback?: (ret:JSON) => void):void

}
interface mobPush_bindPhone_Params {
	/**手机号*/ 
	phone:Array,

}

interface mobPush_bindAlias_Params {
	/**别名*/ 
	alias:string,

}

interface mobPush_bindTags_Params {
	/**标签列表*/ 
	tags:number,

}

interface mobPush_deleteTags_Params {
	/**标签列表，不填则删除所有标签*/ 
	tags:Array,

}

interface mobPush_stopAndrestartPush_Params {
	/**是否打开远程推送*/ 
	isPush:boolean,

}

interface mobPush_setBadge_Params {
	/**角标值*/ 
	badge:number,

}

interface mobPush_setShowBadge_Params {
	/**是否显示角标*/ 
	show:boolean,

}

interface ydAuth {
	/** 云慧眼全流程（V4.0）*/ 
	authAll(callback?: (ret:JSON) => void):void

}
interface MultipeerConnectivity {
	/** 接收文件*/ 
	recive():void

}
interface paypal {
	/** 初始化支付组件，从 1.0.6 版本开始支持本接口。1.0.5之前的版本需要配置 `key.xml` 文件才能初始化支付组件。*/ 
	initializeWithClientIds():void

	/**
	 * `支付`
	 * ========params==========
	 *
	 * `currency` :string : 交易货币类型，取值范围见：[PayPal REST API Country and Currency Support](https://developer.paypal.com/docs/integration/direct/rest-api-payment-country-currency-support/)。**注意本模块不支持 JPY（日元） HUF（匈牙利福林） TWD（台币）**
	 *
	 * `description` :string : 交易商品描述
	 *
	 * `price` :string : 交易商品的价钱，单位：元（$）
	 *
	 * `mode` :string : 支付环境，取值范围如下：
	 *
	 * `language` :string : （可选项）支付页面语音设置，若不传则默认当前系统语言
	 */
	pay(params:paypal_pay_Params, callback?: (ret:JSON) => void):void

}
interface paypal_pay_Params {
	/**交易货币类型，取值范围见：[PayPal REST API Country and Currency Support](https://developer.paypal.com/docs/integration/direct/rest-api-payment-country-currency-support/)。**注意本模块不支持 JPY（日元） HUF（匈牙利福林） TWD（台币）***/ 
	currency:string,

	/**交易商品描述*/ 
	description:string,

	/**交易商品的价钱，单位：元（$）*/ 
	price:string,

	/**支付环境，取值范围如下：*/ 
	mode:string,

	/**（可选项）支付页面语音设置，若不传则默认当前系统语言*/ 
	language?:string,

}

interface baiduMTJ {
}
interface aMapGeoFence {
	/**
	 * `配置定位信息`
	 * ========params==========
	 *
	 * `accuracy` :string : 设定定位精度
	 *
	 * `filter` :number : 位置更新所需最小距离（单位米）
	 */
	configManager(params:aMapGeoFence_configManager_Params, callback?: (ret:JSON) => void):void

	/**
	 * `单次地理定位，可以通过 stopUpdatingLocation 方法去取消正在进行的单次定位请求。**如果当前正在连续定位，调用此方法将会失败**`
	 * ========params==========
	 *
	 * `timeout` :number : 指定单次定位超时时间，单位为妙（s）。最小值是2s
	 */
	singleLocation(params:aMapGeoFence_singleLocation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `单次逆地理定位，可以通过 stopUpdatingLocation 方法去取消正在进行的单次定位请求。**如果当前正在连续定位，调用此方法将会失败**`
	 * ========params==========
	 *
	 * `timeout` :number : 指定单次定位逆地理超时时间，单位为妙（s）。最小值是2s
	 */
	singleAddress(params:aMapGeoFence_singleAddress_Params, callback?: (ret:JSON) => void):void

	/** 开始连续定位，可以通过 stopUpdatingLocation 方法去取消。**调用此方法会cancel掉所有的单次定位请求***/ 
	startLocation():void

	/** 停止连续定位，调用此方法会cancel掉所有的单次定位请求，可以用来取消单次定位*/ 
	stopUpdatingLocation():void

	/**
	 * `根据关键字创建POI围栏`
	 * ========params==========
	 *
	 * `keyword` :string : 要查询的关键字，多个关键字用“|”分割
	 *
	 * `type` :string : 要查询的POI类型，多个类型用“|”分割。[具体分类编码和规则](http://lbs.amap.com/api/webservice/guide/api/search/#text)
	 *
	 * `customID` :string : 用户自定义ID
	 *
	 * `city` :string : （可选项）要查询的城市
	 *
	 * `size` :number : （可选项）要查询的数据的条数，(0,25]，传入<=0的值为10，传入大于25的值为25，默认10
	 */
	addKeywordPOIRegion(params:aMapGeoFence_addKeywordPOIRegion_Params):void

	/**
	 * `根据经纬度进行周边搜索创建POI围栏`
	 * ========params==========
	 *
	 * `location` :JSON : 点的经纬度坐标，必填
	 *
	 * `customID` :string : 用户自定义ID
	 *
	 * `keyword` :string : （可选项）要查询的关键字，多个关键字用“|”分割
	 *
	 * `type` :string : （可选项）要查询的POI类型，多个类型用“|”分割
	 *
	 * `aroundRadius` :number : （可选项）查询半径，单位：米，(0,50000]，超出范围取3000，默认3000
	 *
	 * `size` :number : 要查询的数据的条数，(0,25]，传入<=0的值为10，传入大于25的值为25，默认10
	 */
	addAroundPOIRegion(params:aMapGeoFence_addAroundPOIRegion_Params):void

	/**
	 * `创建行政区域围栏`
	 * ========params==========
	 *
	 * `districtName` :string : 行政区域关键字，必填，只支持单个关键词语：行政区名称、citycode、adcode。[规则](http://lbs.amap.com/api/webservice/guide/api/district/#district)
	 *
	 * `customID` :string : 用户自定义ID
	 */
	addDistrictRegion(params:aMapGeoFence_addDistrictRegion_Params):void

	/**
	 * `创建自定义圆形围栏`
	 * ========params==========
	 *
	 * `center` :JSON : 围栏的中心点经纬度坐标
	 *
	 * `customID` :string : 用户自定义ID
	 *
	 * `radius` :number : （可选项）围栏的半径，单位：米，要求大于0
	 */
	addCircleRegion(params:aMapGeoFence_addCircleRegion_Params):void

	/**
	 * `创建自定义多边形围栏`
	 * ========params==========
	 *
	 * `coordinates` :Array : 经纬度坐标点数据，经纬度坐标点的个数不可小于3个
	 *
	 * `customID` :string : 用户自定义ID
	 */
	addPolygonRegion(params:aMapGeoFence_addPolygonRegion_Params):void

	/**
	 * `根据customID移除围栏`
	 * ========params==========
	 *
	 * `customID` :string : 用户自定义ID
	 */
	removeGeoFence(params:aMapGeoFence_removeGeoFence_Params):void

	/** 移除所有围栏*/ 
	removeAllGeoFence():void

	/** 添加监听*/ 
	addGeoFenceEventListener():void

	/** 移除监听*/ 
	removeGeoFenceEventListener():void

}
interface aMapGeoFence_configManager_Params {
	/**设定定位精度*/ 
	accuracy:string,

	/**位置更新所需最小距离（单位米）*/ 
	filter:number,

}

interface aMapGeoFence_singleLocation_Params {
	/**指定单次定位超时时间，单位为妙（s）。最小值是2s*/ 
	timeout:number,

}

interface aMapGeoFence_singleAddress_Params {
	/**指定单次定位逆地理超时时间，单位为妙（s）。最小值是2s*/ 
	timeout:number,

}

interface aMapGeoFence_addKeywordPOIRegion_Params {
	/**要查询的关键字，多个关键字用“|”分割*/ 
	keyword:string,

	/**要查询的POI类型，多个类型用“|”分割。[具体分类编码和规则](http://lbs.amap.com/api/webservice/guide/api/search/#text)*/ 
	type:string,

	/**用户自定义ID*/ 
	customID:string,

	/**（可选项）要查询的城市*/ 
	city?:string,

	/**（可选项）要查询的数据的条数，(0,25]，传入<=0的值为10，传入大于25的值为25，默认10*/ 
	size?:number,

}

interface aMapGeoFence_addAroundPOIRegion_Params {
	/**点的经纬度坐标，必填*/ 
	location:JSON,

	/**用户自定义ID*/ 
	customID:string,

	/**（可选项）要查询的关键字，多个关键字用“|”分割*/ 
	keyword?:string,

	/**（可选项）要查询的POI类型，多个类型用“|”分割*/ 
	type?:string,

	/**（可选项）查询半径，单位：米，(0,50000]，超出范围取3000，默认3000*/ 
	aroundRadius?:number,

	/**要查询的数据的条数，(0,25]，传入<=0的值为10，传入大于25的值为25，默认10*/ 
	size:number,

}

interface aMapGeoFence_addDistrictRegion_Params {
	/**行政区域关键字，必填，只支持单个关键词语：行政区名称、citycode、adcode。[规则](http://lbs.amap.com/api/webservice/guide/api/district/#district)*/ 
	districtName:string,

	/**用户自定义ID*/ 
	customID:string,

}

interface aMapGeoFence_addCircleRegion_Params {
	/**围栏的中心点经纬度坐标*/ 
	center:JSON,

	/**用户自定义ID*/ 
	customID:string,

	/**（可选项）围栏的半径，单位：米，要求大于0*/ 
	radius?:number,

}

interface aMapGeoFence_addPolygonRegion_Params {
	/**经纬度坐标点数据，经纬度坐标点的个数不可小于3个*/ 
	coordinates:Array,

	/**用户自定义ID*/ 
	customID:string,

}

interface aMapGeoFence_removeGeoFence_Params {
	/**用户自定义ID*/ 
	customID:string,

}

interface cchelperCaiHongNoIM {
	/**
	 * `启动服务。`
	 * ========params==========
	 *
	 * `appKey` :string : 领通科技CChelper SDK平台为应用生产的appKey，不可以为空
	 *
	 * `workNumber` :string : （可选项）客服工号
	 *
	 * `onlyNumber` :boolean : （可选项）是否仅连接指定客服，false：指定客服无法服务，可以连接其他客服。该参数仅在workNumber有值时有效
	 *
	 * `customData` :any : （可选项）自定义信息
	 *
	 * `userId` :string : （可选项）用户id
	 */
	start(params:cchelperCaiHongNoIM_start_Params):void

	/** 结束服务。*/ 
	stop():void

}
interface cchelperCaiHongNoIM_start_Params {
	/**领通科技CChelper SDK平台为应用生产的appKey，不可以为空*/ 
	appKey:string,

	/**（可选项）客服工号*/ 
	workNumber?:string,

	/**（可选项）是否仅连接指定客服，false：指定客服无法服务，可以连接其他客服。该参数仅在workNumber有值时有效*/ 
	onlyNumber?:boolean,

	/**（可选项）自定义信息*/ 
	customData?:any,

	/**（可选项）用户id*/ 
	userId?:string,

}

interface gotyeLiveCore {
}
interface googleAnalytics {
}
interface youtu {
	/**
	 * `检测给定图片(Image)中的所有人脸(Face)的位置和相应的面部属性。位置包括(x,y,w,h)，面部属性包括性别(gender)，年龄(age)，表情(expression),魅力(beauty)，眼镜(glasses)和姿态(pitch，roll，yaw)，至多返回5个人脸的属性。`
	 * ========params==========
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 *
	 * `mode` :number : 检测模式 0/1正常/大脸模式
	 */
	detectface(params:youtu_detectface_Params, callback?: (ret:JSON) => void):void

	/**
	 * `对请求图片进行五官定位，计算构成人脸轮廓的90个点，包括眉毛（左右各8点）、眼睛（左右各8点）、鼻子（13点）、嘴巴（22点）、脸型轮廓（21点）、眼珠[或瞳孔]（2点）。各个部分点的顺序如下图所示`
	 * ========params==========
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 *
	 * `mode` :number : 检测模式 0/1正常/大脸模式
	 */
	faceshape(params:youtu_faceshape_Params, callback?: (ret:JSON) => void):void

	/**
	 * `计算两个Face的相似性以及五官相似度。`
	 * ========params==========
	 *
	 * `imageAUrl` :string : A图片的url，支持fs,widget
	 *
	 * `imageBUrl` :string : B图片的url，支持fs,widget
	 */
	facecompare(params:youtu_facecompare_Params, callback?: (ret:JSON) => void):void

	/**
	 * `给定一个Face和一个Person，返回是否是同一个人的判断以及置信度。`
	 * ========params==========
	 *
	 * `imageUrl` :string : 待验证的Person
	 */
	faceverify(params:youtu_faceverify_Params, callback?: (ret:JSON) => void):void

	/**
	 * `上传人脸图片，进行人脸检索。`
	 * ========params==========
	 *
	 * `topn` :number : （可选项）候选人脸数量
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 */
	multifaceidentify(params:youtu_multifaceidentify_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建一个Person，并将Person放置到group_ids指定的组当中。`
	 * ========params==========
	 *
	 * `imageUrl` :string : （可选项）名字
	 *
	 * `tag` :string : （可选项）备注信息
	 */
	newperson(params:youtu_newperson_Params, callback?: (ret:JSON) => void):void

	/**  删除一个Person*/ 
	delperson(callback?: (ret:JSON) => void):void

	/**
	 * ` 将一组Face加入到一个Person中。注意，一个Face只能被加入到一个Person中；一个Person最多允许包含20个Face；一次调用最多加入5个Face；并且加入与库中几乎相同的人脸会返回错误。`
	 * ========params==========
	 *
	 * `imageUrls` :Array : 图片的url，支持fs,widget,数组中不可同时存在网络和本地图片路径
	 *
	 * `tag` :string : （可选项）备注信息
	 */
	addface(params:youtu_addface_Params, callback?: (ret:JSON) => void):void

	/** 删除一个person下的face，包括特征，属性和face_id.*/ 
	delface(callback?: (ret:JSON) => void):void

	/**
	 * `设置Person的name.`
	 * ========params==========
	 *
	 * `tag` :string : （可选项）备注信息
	 */
	setinfo(params:youtu_setinfo_Params, callback?: (ret:JSON) => void):void

	/** 获取一个AppId下所有group列表*/ 
	getgroupids(callback?: (ret:JSON) => void):void

	/** 获取一个组Group中所有person列表*/ 
	getpersonids(callback?: (ret:JSON) => void):void

	/**
	 * `上传图片，进行手势识别`
	 * ========params==========
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 */
	classify(params:youtu_classify_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断一个图像的模糊程度`
	 * ========params==========
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 *
	 * `seq` :string : （可选项）标示识别请求的序列号
	 */
	fuzzydetect(params:youtu_fuzzydetect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `识别一个图像是否为美食图像`
	 * ========params==========
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 *
	 * `seq` :string : （可选项）标示识别请求的序列号
	 */
	fooddetect(params:youtu_fooddetect_Params, callback?: (ret:JSON) => void):void

	/**
	 * `识别一个图像的标签信息,对图像分类。`
	 * ========params==========
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 *
	 * `seq` :string : （可选项）标示识别请求的序列号
	 */
	imagetag(params:youtu_imagetag_Params, callback?: (ret:JSON) => void):void

	/**
	 * `识别一个图像是否为色情图像。`
	 * ========params==========
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 *
	 * `cookie` :string : （可选项）下载url时需要的cookie信息
	 *
	 * `seq` :string : （可选项）标示识别请求的序列号
	 */
	imageporn(params:youtu_imageporn_Params, callback?: (ret:JSON) => void):void

	/**
	 * `识别一个图像是否为暴恐图像。`
	 * ========params==========
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 *
	 * `cookie` :string : （可选项）下载url时需要的cookie信息
	 *
	 * `seq` :string : （可选项）标示识别请求的序列号
	 */
	imageterrorism(params:youtu_imageterrorism_Params, callback?: (ret:JSON) => void):void

	/**
	 * `自动地检测图片车身以及识别车辆属性`
	 * ========params==========
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 *
	 * `cookie` :string : （可选项）客户端cookie
	 */
	carclassify(params:youtu_carclassify_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通用印刷体文字识别，根据用户上传的图像，返回识别出的字段信息。`
	 * ========params==========
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 */
	generalocr(params:youtu_generalocr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `手写体OCR识别，根据用户上传的图像，返回识别出的字段信息。`
	 * ========params==========
	 *
	 * `imageUrl` :string : 请求序列号
	 */
	handwritingocr(params:youtu_handwritingocr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据用户上传的包含身份证正反面照片，识别并且获取证件姓名、性别、民族、出生日期、地址、身份证号、证件有效期、发证机关等详细的身份证信息，并且可以返回精确剪裁对齐后的身份证正反面图片`
	 * ========params==========
	 *
	 * `imageUrl` :string : 请求序列号
	 */
	idcardocr(params:youtu_idcardocr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `名片识别，根据用户上传的名片图像，返回识别出的名片字段信息，目前已支持20多个字段识别（姓名、英文姓名、职位、英文职位、部门、英文部门、公司、英文公司、地址、英文地址、邮编、邮箱、网址、手机、电话、传真、QQ、MSN、微信、微博、公司账号、logo、其他。）`
	 * ========params==========
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 */
	bcocr(params:youtu_bcocr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `营业执照识别，根据用户上传的营业执照图像，返回识别出的注册号、公司名称、地址字段信息`
	 * ========params==========
	 *
	 * `imageUrl` :string : 请求序列号
	 */
	bizlicenseocr(params:youtu_bizlicenseocr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `银行卡识别，根据用户上传的银行卡图像，返回识别出的银行卡字段信息。`
	 * ========params==========
	 *
	 * `imageUrl` :string : 请求序列号
	 */
	creditcardocr(params:youtu_creditcardocr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `车牌识别，根据用户上传的图像，返回识别出的图片中的车牌号。`
	 * ========params==========
	 *
	 * `imageUrl` :string : 请求序列号
	 */
	plateocr(params:youtu_plateocr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据用户上传的图像，返回识别出行驶证&驾驶证各字段信息。（行驶证支持字段：车牌号码、车辆类型、所有人、住址、使用性质、品牌型号、识别代码、发动机号、注册日期、发证日期；驾驶证支持字段：证号、姓名、性别、国籍、住址、出生日期、领证日期、准驾车型、起始日期、有效日期。）。`
	 * ========params==========
	 *
	 * `imageUrl` :string : 图片的url，支持fs,widget
	 *
	 * `type` :string : (可选项)请求序列号
	 */
	driverlicenseocr(params:youtu_driverlicenseocr_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据用户输入的文字，进行音频合成，播放语音。`
	 * ========params==========
	 *
	 * `text` :number : (可选项)模型类型，0表示女声，1表示女声纯英文，2表示男声，6表示喜道公子
	 *
	 * `speed` :string : (可选项)请求唯一标识
	 */
	textToAudio(params:youtu_textToAudio_Params, callback?: (ret:JSON) => void):void

}
interface youtu_detectface_Params {
	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

	/**检测模式 0/1正常/大脸模式*/ 
	mode:number,

}

interface youtu_faceshape_Params {
	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

	/**检测模式 0/1正常/大脸模式*/ 
	mode:number,

}

interface youtu_facecompare_Params {
	/**A图片的url，支持fs,widget*/ 
	imageAUrl:string,

	/**B图片的url，支持fs,widget*/ 
	imageBUrl:string,

}

interface youtu_faceverify_Params {
	/**待验证的Person*/ 
	imageUrl:string,

}

interface youtu_multifaceidentify_Params {
	/**（可选项）候选人脸数量*/ 
	topn?:number,

	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

}

interface youtu_newperson_Params {
	/**（可选项）名字*/ 
	imageUrl?:string,

	/**（可选项）备注信息*/ 
	tag?:string,

}

interface youtu_addface_Params {
	/**图片的url，支持fs,widget,数组中不可同时存在网络和本地图片路径*/ 
	imageUrls:Array,

	/**（可选项）备注信息*/ 
	tag?:string,

}

interface youtu_setinfo_Params {
	/**（可选项）备注信息*/ 
	tag?:string,

}

interface youtu_classify_Params {
	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

}

interface youtu_fuzzydetect_Params {
	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

	/**（可选项）标示识别请求的序列号*/ 
	seq?:string,

}

interface youtu_fooddetect_Params {
	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

	/**（可选项）标示识别请求的序列号*/ 
	seq?:string,

}

interface youtu_imagetag_Params {
	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

	/**（可选项）标示识别请求的序列号*/ 
	seq?:string,

}

interface youtu_imageporn_Params {
	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

	/**（可选项）下载url时需要的cookie信息*/ 
	cookie?:string,

	/**（可选项）标示识别请求的序列号*/ 
	seq?:string,

}

interface youtu_imageterrorism_Params {
	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

	/**（可选项）下载url时需要的cookie信息*/ 
	cookie?:string,

	/**（可选项）标示识别请求的序列号*/ 
	seq?:string,

}

interface youtu_carclassify_Params {
	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

	/**（可选项）客户端cookie*/ 
	cookie?:string,

}

interface youtu_generalocr_Params {
	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

}

interface youtu_handwritingocr_Params {
	/**请求序列号*/ 
	imageUrl:string,

}

interface youtu_idcardocr_Params {
	/**请求序列号*/ 
	imageUrl:string,

}

interface youtu_bcocr_Params {
	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

}

interface youtu_bizlicenseocr_Params {
	/**请求序列号*/ 
	imageUrl:string,

}

interface youtu_creditcardocr_Params {
	/**请求序列号*/ 
	imageUrl:string,

}

interface youtu_plateocr_Params {
	/**请求序列号*/ 
	imageUrl:string,

}

interface youtu_driverlicenseocr_Params {
	/**图片的url，支持fs,widget*/ 
	imageUrl:string,

	/**(可选项)请求序列号*/ 
	type?:string,

}

interface youtu_textToAudio_Params {
	/**(可选项)模型类型，0表示女声，1表示女声纯英文，2表示男声，6表示喜道公子*/ 
	text?:number,

	/**(可选项)请求唯一标识*/ 
	speed?:string,

}

interface tyRTC {
}
interface acc5GSJC {
	/** 打开一个直播或点播*/ 
	playGS():void

	/** 关闭直播或者点播*/ 
	close():void

	/** 设置视频区域和文档区域的显示与隐藏*/ 
	changeVisible():void

	/**
	 * `发送聊天消息。`
	 * ========params==========
	 *
	 * `content` :string : 聊天消息纯文本。
	 *
	 * `richtext` :any : 聊天消息富文本。
	 */
	sendMsg(params:acc5GSJC_sendMsg_Params):void

	/** 文档区域全屏显示*/ 
	fullscreen():void

	/** 文档区域取消全屏*/ 
	cancelFullscreen():void

	/**
	 * `设置文档或者摄像头区域的位置及大小`
	 * ========params==========
	 *
	 * `type` :string : 要设置的区域，video为摄像头区域，doc文档区域。
	 *
	 * `rect` :JSON : （可选项）文档或摄像头区域的位置及尺寸
	 */
	setRect(params:acc5GSJC_setRect_Params):void

	/**
	 * `点播播放的位置`
	 * ========params==========
	 *
	 * `pos` :any : 点播播放的位置，单位为毫秒。
	 */
	seek(params:acc5GSJC_seek_Params):void

	/** 文档和摄像头区域互换位置大小,仅当playGS（）中switchFlag==true时有效*/ 
	switchDV():void

}
interface acc5GSJC_sendMsg_Params {
	/**聊天消息纯文本。*/ 
	content:string,

	/**聊天消息富文本。*/ 
	richtext:any,

}

interface acc5GSJC_setRect_Params {
	/**要设置的区域，video为摄像头区域，doc文档区域。*/ 
	type:string,

	/**（可选项）文档或摄像头区域的位置及尺寸*/ 
	rect?:JSON,

}

interface acc5GSJC_seek_Params {
	/**点播播放的位置，单位为毫秒。*/ 
	pos:any,

}

interface BluetoothDelegate {
	/**
	 * `生成动态密码`
	 * ========params==========
	 *
	 * `secret` :string : 用于生成token对应的key值
	 *
	 * `counter` :number : 计时步长；单位秒
	 */
	createTotpToken(params:BluetoothDelegate_createTotpToken_Params, callback?: (ret:JSON) => void):void

	/**
	 * `生成蓝牙动态`
	 * ========params==========
	 *
	 * `secret` :string : 用于生成token对应的key值
	 *
	 * `counter` :number : 计时步长；单位秒
	 */
	createBluetoothToken(params:BluetoothDelegate_createBluetoothToken_Params, callback?: (ret:JSON) => void):void

	/** 初始化*/ 
	init():void

	/**
	 * `开始连接蓝牙并发送token`
	 * ========params==========
	 *
	 * `address` :string : 蓝牙地址
	 *
	 * `key` :string : 蓝牙Key，iOS忽略此参数
	 *
	 * `token` :string : iOS传入由createTotpToken或者createBluetoothToken接口生成的token。androi忽略次参数
	 */
	start(params:BluetoothDelegate_start_Params, callback?: (ret:JSON) => void):void

}
interface BluetoothDelegate_createTotpToken_Params {
	/**用于生成token对应的key值*/ 
	secret:string,

	/**计时步长；单位秒*/ 
	counter:number,

}

interface BluetoothDelegate_createBluetoothToken_Params {
	/**用于生成token对应的key值*/ 
	secret:string,

	/**计时步长；单位秒*/ 
	counter:number,

}

interface BluetoothDelegate_start_Params {
	/**蓝牙地址*/ 
	address:string,

	/**蓝牙Key，iOS忽略此参数*/ 
	key:string,

	/**iOS传入由createTotpToken或者createBluetoothToken接口生成的token。androi忽略次参数*/ 
	token:string,

}

interface shareSDKPlus {
	/**
	 * `授权`
	 * ========params==========
	 *
	 * `platform` :number : 授权平台号，是新浪微博授权还是微信授权或者其他平台授权，由此参数决定
	 */
	authorize(params:shareSDKPlus_authorize_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消授权`
	 * ========params==========
	 *
	 * `platform` :number : 授权平台号
	 */
	cancelAuthorize(params:shareSDKPlus_cancelAuthorize_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取用户信息`
	 * ========params==========
	 *
	 * `platform` :number : 平台号，是获取新浪微博还是微信或者其他平台用户信息，由此参数决定
	 */
	getUserInfo(params:shareSDKPlus_getUserInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享`
	 * ========params==========
	 *
	 * `platform` :number : 平台号，分享到指定平台
	 *
	 * `shareParams` :any : 分享内容
	 */
	shareContent(params:shareSDKPlus_shareContent_Params, callback?: (ret:JSON) => void):void

	/**
	 * `一键分享/菜单分享`
	 * ========params==========
	 *
	 * `platforms` :Array : 可分享的平台列表，为null为全平台
	 *
	 * `shareParams` :any : 分享内容
	 */
	oneKeyShareContent(params:shareSDKPlus_oneKeyShareContent_Params, callback?: (ret:JSON) => void):void

}
interface shareSDKPlus_authorize_Params {
	/**授权平台号，是新浪微博授权还是微信授权或者其他平台授权，由此参数决定*/ 
	platform:number,

}

interface shareSDKPlus_cancelAuthorize_Params {
	/**授权平台号*/ 
	platform:number,

}

interface shareSDKPlus_getUserInfo_Params {
	/**平台号，是获取新浪微博还是微信或者其他平台用户信息，由此参数决定*/ 
	platform:number,

}

interface shareSDKPlus_shareContent_Params {
	/**平台号，分享到指定平台*/ 
	platform:number,

	/**分享内容*/ 
	shareParams:any,

}

interface shareSDKPlus_oneKeyShareContent_Params {
	/**可分享的平台列表，为null为全平台*/ 
	platforms:Array,

	/**分享内容*/ 
	shareParams:any,

}

interface leShiLive {
	/**
	 * `生成推流地址和播放地址，推流地址用于移动直播。`
	 * ========params==========
	 *
	 * `streamName` :string : （必填项）移动直播流名称。流名称可以是任意数字、字母的组合
	 */
	generateURL(params:leShiLive_generateURL_Params, callback?: (ret:JSON) => void):void

	/**
	 * `初始化直播，移动直播和乐视云直播的初始化都用该接口，移动直播initType参数传入"mobile"，乐视云直播initType传入"le"。调用该方法后就设置了乐视sdk的回调，当直播状态发生变化时，该模块会回调onPublish方法，onPublish方法由开发者自行实现，详见下面onPublish方法说明。`
	 * ========params==========
	 *
	 * `x` :number : (必填)模块左上角的 x 坐标（相对于所属的 Window 或 Frame）。
	 *
	 * `y` :number : (必填)模块左上角的 y 坐标（相对于所属的 Window 或 Frame）。
	 *
	 * `w` :number : （可选）播放视图的宽度;
	 *
	 * `h` :number : （可选）播放视图的高度;
	 *
	 * `initType` :string : （Android必填）初始化的类型，该参数只对Android平台有效;
	 *
	 * `activityId` :string : 乐视云直播的活动Id，initType为"le"时必填，initType为"mobile"时可不填;用户开通乐视云直播功能，需要在乐视云官网登录账号后到用户中心创建活动，创建活动后即可拿到活动Id。要注意在乐视后台看activityId的活动有效时间，无效的activityId即不在时间范围内不能直播成功。
	 *
	 * `fixedOn` :string : (可选)模块所属 Frame 的名字，如果不传该模块默认归属于当前 Window；
	 *
	 * `fixed` :boolean : (可选)模块是否固定在所属 Window 或 Frame上，true为固定，即模块不随所属 Window 或 Frame滚动；
	 *
	 * `previewWidth` :number : (可选)摄像头预览分辨率的宽,要求宽度必须是16的整倍数,高度没有要求;
	 *
	 * `previewHeight` :number : (可选)摄像头预览分辨率的高;
	 *
	 * `isLandscape` :boolean : (可选)是否横屏直播，该参数只对Android平台有效;
	 *
	 * `isBackCamare` :boolean : (可选)是否默认开启后置摄像头，为false则默认开启前置摄像头;
	 *
	 * `frameRate` :number : (可选)推流每秒的视频帧数,该参数只对iOS有效;
	 *
	 * `bitrate` :number : (可选)推流的视频流比特率;
	 */
	initLive(params:leShiLive_initLive_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始移动直播。`
	 * ========params==========
	 *
	 * `pushUrl` :string : （必填）移动直播推流地址
	 */
	startPushWithUrl(params:leShiLive_startPushWithUrl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取乐视云直播机位信息，用于乐视云直播。乐视云直播一个活动ID可以对应多个推流地址。最常规的用法就是在发布会上通过4个角落一起推流。然后用户选择其中一个点进行观看，在观看过程也可以切换到其他点。但是对于推流而言，一个设备只能在其中一个点进行推流。这一个点我们称呼为一个机位。`
	 * ========params==========
	 *
	 * `activityId` :string : （必填项）活动Id;用户开通乐视云直播功能，需要在乐视云官网登录账号后到用户中心创建活动，创建活动后即可拿到活动Id。
	 */
	getLiveMachinesInfo(params:leShiLive_getLiveMachinesInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始乐视云直播。`
	 * ========params==========
	 *
	 * `machineid` :number : （必填项）机位Id。传入getLiveMachinesInfo获取到的machine参数，注意machineid是从1开始，而不是0.
	 */
	startCloudLive(params:leShiLive_startCloudLive_Params, callback?: (ret:JSON) => void):void

	/** 暂停直播。暂停移动直播或乐视云直播。暂停后，如果要重新开始直播，移动直播再次调用startPushWithUrl方法即可，乐视云直播依次调用getLiveMachinesInfo、startCloudLive即可。无需再次初始化直播。*/ 
	pauseLive(callback?: (ret:JSON) => void):void

	/** 停止直播。停止移动直播或乐视云直播。停止直播后，需要再次调用初始化直播方法才能开始下一次直播，一般在关闭直播页面后调用该方法。*/ 
	stopLive(callback?: (ret:JSON) => void):void

	/**
	 * `设置滤镜。开始直播后调用，移动直播和乐视云直播都可设置滤镜`
	 * ========params==========
	 *
	 * `filter` :number : （必填项）滤镜效果。<br/>
	 */
	setFilter(params:leShiLive_setFilter_Params, callback?: (ret:JSON) => void):void

	/** 切换摄像头。开始直播后调用，移动直播和乐视云直播都可切换摄像头,需要注意,切换摄像头不能太频繁,如果太频繁会导致应用程序崩溃。建议最快10秒一次。*/ 
	setCamare(callback?: (ret:JSON) => void):void

	/** 设置闪光灯开关。开始直播后调用，移动直播和乐视云直播都可设置闪光灯开关，但是注意当前置摄像头打开时不能打开闪光灯。*/ 
	setTorchOpenState(callback?: (ret:JSON) => void):void

	/** 设置静音。开始直播后调用，移动直播和乐视云直播都可设置静音。*/ 
	setMute(callback?: (ret:JSON) => void):void

}
interface leShiLive_generateURL_Params {
	/**（必填项）移动直播流名称。流名称可以是任意数字、字母的组合*/ 
	streamName:string,

}

interface leShiLive_initLive_Params {
	/**(必填)模块左上角的 x 坐标（相对于所属的 Window 或 Frame）。*/ 
	x:number,

	/**(必填)模块左上角的 y 坐标（相对于所属的 Window 或 Frame）。*/ 
	y:number,

	/**（可选）播放视图的宽度;*/ 
	w?:number,

	/**（可选）播放视图的高度;*/ 
	h?:number,

	/**（Android必填）初始化的类型，该参数只对Android平台有效;*/ 
	initType:string,

	/**乐视云直播的活动Id，initType为"le"时必填，initType为"mobile"时可不填;用户开通乐视云直播功能，需要在乐视云官网登录账号后到用户中心创建活动，创建活动后即可拿到活动Id。要注意在乐视后台看activityId的活动有效时间，无效的activityId即不在时间范围内不能直播成功。*/ 
	activityId:string,

	/**(可选)模块所属 Frame 的名字，如果不传该模块默认归属于当前 Window；*/ 
	fixedOn?:string,

	/**(可选)模块是否固定在所属 Window 或 Frame上，true为固定，即模块不随所属 Window 或 Frame滚动；*/ 
	fixed?:boolean,

	/**(可选)摄像头预览分辨率的宽,要求宽度必须是16的整倍数,高度没有要求;*/ 
	previewWidth?:number,

	/**(可选)摄像头预览分辨率的高;*/ 
	previewHeight?:number,

	/**(可选)是否横屏直播，该参数只对Android平台有效;*/ 
	isLandscape?:boolean,

	/**(可选)是否默认开启后置摄像头，为false则默认开启前置摄像头;*/ 
	isBackCamare?:boolean,

	/**(可选)推流每秒的视频帧数,该参数只对iOS有效;*/ 
	frameRate?:number,

	/**(可选)推流的视频流比特率;*/ 
	bitrate?:number,

}

interface leShiLive_startPushWithUrl_Params {
	/**（必填）移动直播推流地址*/ 
	pushUrl:string,

}

interface leShiLive_getLiveMachinesInfo_Params {
	/**（必填项）活动Id;用户开通乐视云直播功能，需要在乐视云官网登录账号后到用户中心创建活动，创建活动后即可拿到活动Id。*/ 
	activityId:string,

}

interface leShiLive_startCloudLive_Params {
	/**（必填项）机位Id。传入getLiveMachinesInfo获取到的machine参数，注意machineid是从1开始，而不是0.*/ 
	machineid:number,

}

interface leShiLive_setFilter_Params {
	/**（必填项）滤镜效果。<br/>*/ 
	filter:number,

}

interface appleUnionPay {
	/** 跳转到钱包设置添加银行卡、信用卡*/ 
	addCard():void

	/** 判断手机是否支持 Apple Pay 功能*/ 
	isSupportPayments():void

	/** 判断手机是否已加载有可用的支付卡片*/ 
	canMakePayments():void

	/**
	 * `支付`
	 * ========params==========
	 *
	 * `tn` :string : 交易流水号，商户后台向银联后台提交订单信息后，由银联后台生成并下发给商户后台的交易凭证
	 *
	 * `mode` :string : 接入模式，标识商户以何种方式调用支付控件，该参数提供以下两个可选值
	 *
	 * `mID` :string : 在苹果公司申请的商户号，表示调用 Apple Pay 所需要的 MerchantID
	 */
	pay(params:appleUnionPay_pay_Params, callback?: (ret:JSON) => void):void

}
interface appleUnionPay_pay_Params {
	/**交易流水号，商户后台向银联后台提交订单信息后，由银联后台生成并下发给商户后台的交易凭证*/ 
	tn:string,

	/**接入模式，标识商户以何种方式调用支付控件，该参数提供以下两个可选值*/ 
	mode?:string,

	/**在苹果公司申请的商户号，表示调用 Apple Pay 所需要的 MerchantID*/ 
	mID:string,

}

interface utoVR {
	/** 全屏、横屏播放视频，里面可以开启陀螺仪感应和双屏vr模式。*/ 
	play(callback?: (ret:JSON) => void):void

	/**
	 * `以小窗口的形式打开。`
	 * ========params==========
	 *
	 * `url` :string : （必填）视频地址。
	 *
	 * `mediaType` :string : （选填）mp4或m3u8。（SDK里是要这样区分，它无法智能识别）
	 *
	 * `rect` :JSON : （选填）模块的位置及尺寸。
	 *
	 * `fixedOn` :string : （选填）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （选填）模块是否随所属 window 或 frame 滚动
	 */
	open(params:utoVR_open_Params, callback?: (ret:JSON) => void):void

	/** 暂停播放。（仅open模式有效，主要是为解决切换到后台时，停止播放）*/ 
	pause():void

	/** 继续播放。（仅open模式有效，主要是为解决从后台切回APP，继续播放）*/ 
	resume():void

	/** 目前的返回状态。（主要是为了解决open模式下，用户切换全屏时，按物理返回，退出全屏状态）*/ 
	back():void

	/** 关闭以open方式打开的小窗口。*/ 
	close():void

}
interface utoVR_open_Params {
	/**（必填）视频地址。*/ 
	url:string,

	/**（选填）mp4或m3u8。（SDK里是要这样区分，它无法智能识别）*/ 
	mediaType:string,

	/**（选填）模块的位置及尺寸。*/ 
	rect:JSON,

	/**（选填）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn:string,

	/**（选填）模块是否随所属 window 或 frame 滚动*/ 
	fixed:boolean,

}

interface youZan2 {
	/**
	 * `打开商城页面。`
	 * ========params==========
	 *
	 * `url` :string : （选填）用户昵称。
	 *
	 * `gender` :number : （选填）性别（0男1女2未知）。
	 *
	 * `telephone` :string : （选填）用户电话。
	 *
	 * `avatar` :string : （选填）用户头像。
	 *
	 * `extra` :string : （选填）用户设备ID。
	 */
	openWin(params:youZan2_openWin_Params, callback?: (ret:JSON) => void):void

}
interface youZan2_openWin_Params {
	/**（选填）用户昵称。*/ 
	url:string,

	/**（选填）性别（0男1女2未知）。*/ 
	gender:number,

	/**（选填）用户电话。*/ 
	telephone:string,

	/**（选填）用户头像。*/ 
	avatar:string,

	/**（选填）用户设备ID。*/ 
	extra:string,

}

interface huaweiObs {
	/** 服务初始化*/ 
	init():void

	/**
	 * `流式上传对象`
	 * ========params==========
	 *
	 * `bucket` :string : 文件存储桶的名称，如：module-wkz
	 *
	 * `objectKey` :string : 文件存储在云上的命名，如：test/test.jpg，云会自动创建test文件夹，以便存储文件
	 *
	 * `uploadType` :number : 上传的类型
	 *
	 * `uploadFile` :string : 上传对象，uploadType为1时传入字符串，uploadType为2时传入网络地址，uploadType为3时需上传本地文件路径，要求本地路径（fs://、widget://）
	 */
	putData(params:huaweiObs_putData_Params, callback?: (ret:JSON) => void):void

	/**
	 * `上传文件`
	 * ========params==========
	 *
	 * `bucket` :string : 文件存储桶的名称，如：module-wkz
	 *
	 * `objectKey` :string : 文件存储在云上的命名，如：test/test.jpg，云会自动创建test文件夹，以便存储文件
	 *
	 * `uploadFile` :string : 上传对象，需上传本地文件路径，要求本地路径（fs://、widget://）
	 */
	putFile(params:huaweiObs_putFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载文件`
	 * ========params==========
	 *
	 * `bucket` :string : 文件存储桶的名称，如：module-wkz
	 *
	 * `objectKey` :string : 文件存储在云上的命名，如：test/test.jpg
	 *
	 * `downloadFile` :string : 文件下载后的路径, 如：test.jpg
	 */
	downloadObject(params:huaweiObs_downloadObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除文件`
	 * ========params==========
	 *
	 * `bucket` :string : 文件存储桶的名称，如：module-wkz
	 *
	 * `objectKey` :string : 文件存储在云上的命名，如：test/test.jpg
	 */
	deleteObject(params:huaweiObs_deleteObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `多文件删除`
	 * ========params==========
	 *
	 * `bucket` :string : 文件存储桶的名称，如：module-wkz
	 *
	 * `objectKeys` :Array : 数组内部为文件在华为云上的命名
	 */
	deletesObject(params:huaweiObs_deletesObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `复制文件`
	 * ========params==========
	 *
	 * `srcBucket` :string : 目标文件存储桶的名称，如：module-wkz
	 *
	 * `srcObjectKey` :string : 目标文件存储在云上的命名，如：test/test1.jpg
	 *
	 * `dstBucket` :string : 复制文件存储桶的名称，如：module-wkz
	 *
	 * `dstObjectKey` :string : 复制文件存储在云上的命名，如：test/test2.jpg
	 */
	copyObject(params:huaweiObs_copyObject_Params, callback?: (ret:JSON) => void):void

}
interface huaweiObs_putData_Params {
	/**文件存储桶的名称，如：module-wkz*/ 
	bucket:string,

	/**文件存储在云上的命名，如：test/test.jpg，云会自动创建test文件夹，以便存储文件*/ 
	objectKey:string,

	/**上传的类型*/ 
	uploadType:number,

	/**上传对象，uploadType为1时传入字符串，uploadType为2时传入网络地址，uploadType为3时需上传本地文件路径，要求本地路径（fs://、widget://）*/ 
	uploadFile:string,

}

interface huaweiObs_putFile_Params {
	/**文件存储桶的名称，如：module-wkz*/ 
	bucket:string,

	/**文件存储在云上的命名，如：test/test.jpg，云会自动创建test文件夹，以便存储文件*/ 
	objectKey:string,

	/**上传对象，需上传本地文件路径，要求本地路径（fs://、widget://）*/ 
	uploadFile:string,

}

interface huaweiObs_downloadObject_Params {
	/**文件存储桶的名称，如：module-wkz*/ 
	bucket:string,

	/**文件存储在云上的命名，如：test/test.jpg*/ 
	objectKey:string,

	/**文件下载后的路径, 如：test.jpg*/ 
	downloadFile:string,

}

interface huaweiObs_deleteObject_Params {
	/**文件存储桶的名称，如：module-wkz*/ 
	bucket:string,

	/**文件存储在云上的命名，如：test/test.jpg*/ 
	objectKey:string,

}

interface huaweiObs_deletesObject_Params {
	/**文件存储桶的名称，如：module-wkz*/ 
	bucket:string,

	/**数组内部为文件在华为云上的命名*/ 
	objectKeys:Array,

}

interface huaweiObs_copyObject_Params {
	/**目标文件存储桶的名称，如：module-wkz*/ 
	srcBucket:string,

	/**目标文件存储在云上的命名，如：test/test1.jpg*/ 
	srcObjectKey:string,

	/**复制文件存储桶的名称，如：module-wkz*/ 
	dstBucket:string,

	/**复制文件存储在云上的命名，如：test/test2.jpg*/ 
	dstObjectKey:string,

}

interface ajAuthNoPush {
	/** 预取号并设置授权页样式*/ 
	init():void

	/** 打开授权页面*/ 
	loginAuth():void

	/** 获取token*/ 
	getToken():void

}
interface cBImageRecognize {
	/** 识别图片方法,传入：*/ 
	recognizeImage():void

}
interface easyQRCodeScan {
}
interface esptouch {
	/** 查找设备*/ 
	find():void

	/** 取消*/ 
	cancel():void

}
interface CPay {
	/**
	 * `配置运行环境`
	 * ========params==========
	 *
	 * `token` :string : （可选项）联系 [CITCON](https://www.citcon.com/contact/) 与之签约获得 token。或者访问 [文档中心](https://doc.citconpay.com/citconAPI/#) 申请测试 token。若为空则从 `key.xml` 或 `config.xml` 文件读取，优先读取 `key.xml`。
	 *
	 * `mode` :boolean : (可选项) 运行模式：DEV、UAT、PROD。若为空则从 `key.xml` 或 `config.xml` 文件读取，优先读取 `key.xml`。
	 */
	setEnvironment(params:CPay_setEnvironment_Params):void

	/**
	 * `支付`
	 * ========params==========
	 *
	 * `referenceId` :string : referenceId
	 *
	 * `currency` :string : 货币代号：USD, CNY
	 *
	 * `vendor` :string : 支付平台：wechatpay、alipay
	 *
	 * `amount` :string : 支付金额
	 *
	 * `subject` :string : 商品主题
	 *
	 * `body` :string : 商品简介
	 *
	 * `ipnUrl` :string : IPN Url
	 *
	 * `callbackUrl` :string : 回调url
	 *
	 * `transactionId` :string : transactionId
	 *
	 * `allowDuplicate` :boolean : （可选项）是否允许重复
	 */
	requestOrder(params:CPay_requestOrder_Params, callback?: (ret:JSON) => void):void

	/** checkOrder({params}, callback(ret)) **Android 暂不支持该方法***/ 
	checkOrder():void

	/** 支付完成事件监听*/ 
	paymentFinishedLisetner():void

}
interface CPay_setEnvironment_Params {
	/**（可选项）联系 [CITCON](https://www.citcon.com/contact/) 与之签约获得 token。或者访问 [文档中心](https://doc.citconpay.com/citconAPI/#) 申请测试 token。若为空则从 `key.xml` 或 `config.xml` 文件读取，优先读取 `key.xml`。*/ 
	token?:string,

	/**(可选项) 运行模式：DEV、UAT、PROD。若为空则从 `key.xml` 或 `config.xml` 文件读取，优先读取 `key.xml`。*/ 
	mode?:boolean,

}

interface CPay_requestOrder_Params {
	/**referenceId*/ 
	referenceId:string,

	/**货币代号：USD, CNY*/ 
	currency:string,

	/**支付平台：wechatpay、alipay*/ 
	vendor:string,

	/**支付金额*/ 
	amount:string,

	/**商品主题*/ 
	subject:string,

	/**商品简介*/ 
	body:string,

	/**IPN Url*/ 
	ipnUrl:string,

	/**回调url*/ 
	callbackUrl:string,

	/**transactionId*/ 
	transactionId:string,

	/**（可选项）是否允许重复*/ 
	allowDuplicate?:boolean,

}

interface jVerification {
	/**
	 * `SDK设置debug模式`
	 * ========params==========
	 *
	 * `debug` :boolean : null
	 */
	setDebugMode(params:jVerification_setDebugMode_Params):void

	/**
	 * `SDK初始化`
	 * ========params==========
	 *
	 * `timeout` :number : null
	 *
	 * `appKey` :string : null
	 *
	 * `channel` :string : null
	 *
	 * `isProduction` :boolean : null
	 *
	 * `advertisingId` :string : null
	 */
	init(params:jVerification_init_Params, callback?: (ret:JSON) => void):void

	/** 是否初始化成功*/ 
	isInitSuccess():void

	/** 判断当前手机网络环境是否支持认证 (必须要开启手机 4G｜3G｜5G，才支持认证)*/ 
	checkVerifyEnable():void

	/**
	 * `获取手机号校验token`
	 * ========params==========
	 *
	 * `timeout` :number : null
	 */
	getToken(params:jVerification_getToken_Params, callback?: (ret:JSON) => void):void

	/**
	 * `授权登录 预取号`
	 * ========params==========
	 *
	 * `timeout` :number : null
	 */
	preLogin(params:jVerification_preLogin_Params, callback?: (ret:JSON) => void):void

	/** 清除预取号缓存*/ 
	clearPreLoginCache():void

	/**
	 * `授权登录`
	 * ========params==========
	 *
	 * `autoFinish` :boolean : （可选项）完成后是否自动隐藏授权页
	 *
	 * `animationFlag` :boolean : （可选项）拉起授权页时是否需要动画效果
	 *
	 * `timeout` :number : null
	 */
	loginAuth(params:jVerification_loginAuth_Params, callback?: (ret:JSON) => void):void

	/**
	 * `隐藏登录页.当授权页被拉起以后，可调用此接口隐藏授权页。当一键登录自动隐藏授权页时，不建议调用此接口`
	 * ========params==========
	 *
	 * `needCloseAnim` :boolean : （可选项）隐藏时是否需要动画
	 */
	dismissLoginAuth(params:jVerification_dismissLoginAuth_Params, callback?: (ret:JSON) => void):void

	/**
	 * `自定义登录页UI样式参数  --**仅支持 ios**`
	 * ========params==========
	 *
	 * `logoImg` :string : （可选项）logo图片地址（支持本地路径）
	 *
	 * `logBtnTextColor` :string : （可选项）登录按钮文本颜色 支持css相关颜色设置 如：'#FF0000'
	 *
	 * `appPrivacyOne` :Array : （可选项）隐私条款一 （务必按顺序）[条款名称,条款链接]
	 *
	 * `appPrivacyTwo` :Array : （可选项）隐私条款二 （务必按顺序）[条款名称,条款链接]
	 *
	 * `appPrivacyColor` :Array : （可选项）隐私条款名称颜色 [基础文字颜色,条款颜色]
	 */
	setCustomUIWithConfigiOS(params:jVerification_setCustomUIWithConfigiOS_Params):void

	/** 自定义登录页UI样式参数  --**仅支持 android***/ 
	setCustomUIWithConfig():void

	/** 添加自定义控件的点击回调事件监听*/ 
	addCustomViewsClickCallback():void

	/**
	 * `获取短信验证码 （最小间隔时间内只能调用一次）`
	 * ========params==========
	 *
	 * `phoneNumber` :string : 手机号
	 *
	 * `templateID` :string : 短信模板ID 如果不传，则为默认短信签名ID
	 *
	 * `signID` :string : 签名ID 如果不传，则为默认短信签名id
	 */
	getCode(params:jVerification_getCode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置前后两次获取验证码的时间间隔`
	 * ========params==========
	 *
	 * `timeInter` :number : 设置前后两次获取验证码的时间间隔 ,默认为30000ms （30s），有效间隔 (0,300000）
	 */
	setTimeWithConfig(params:jVerification_setTimeWithConfig_Params):void

}
interface jVerification_setDebugMode_Params {
	/**null*/ 
	debug:boolean,

}

interface jVerification_init_Params {
	/**null*/ 
	timeout:number,

	/**null*/ 
	appKey:string,

	/**null*/ 
	channel:string,

	/**null*/ 
	isProduction:boolean,

	/**null*/ 
	advertisingId:string,

}

interface jVerification_getToken_Params {
	/**null*/ 
	timeout:number,

}

interface jVerification_preLogin_Params {
	/**null*/ 
	timeout:number,

}

interface jVerification_loginAuth_Params {
	/**（可选项）完成后是否自动隐藏授权页*/ 
	autoFinish?:boolean,

	/**（可选项）拉起授权页时是否需要动画效果*/ 
	animationFlag?:boolean,

	/**null*/ 
	timeout:number,

}

interface jVerification_dismissLoginAuth_Params {
	/**（可选项）隐藏时是否需要动画*/ 
	needCloseAnim?:boolean,

}

interface jVerification_setCustomUIWithConfigiOS_Params {
	/**（可选项）logo图片地址（支持本地路径）*/ 
	logoImg?:string,

	/**（可选项）登录按钮文本颜色 支持css相关颜色设置 如：'#FF0000'*/ 
	logBtnTextColor?:string,

	/**（可选项）隐私条款一 （务必按顺序）[条款名称,条款链接]*/ 
	appPrivacyOne?:Array,

	/**（可选项）隐私条款二 （务必按顺序）[条款名称,条款链接]*/ 
	appPrivacyTwo?:Array,

	/**（可选项）隐私条款名称颜色 [基础文字颜色,条款颜色]*/ 
	appPrivacyColor?:Array,

}

interface jVerification_getCode_Params {
	/**手机号*/ 
	phoneNumber:string,

	/**短信模板ID 如果不传，则为默认短信签名ID*/ 
	templateID:string,

	/**签名ID 如果不传，则为默认短信签名id*/ 
	signID:string,

}

interface jVerification_setTimeWithConfig_Params {
	/**设置前后两次获取验证码的时间间隔 ,默认为30000ms （30s），有效间隔 (0,300000）*/ 
	timeInter:number,

}

interface aliCloudOss {
	/**
	 * `初始化sdk （调用优先级最高，只需要调用一次）`
	 * ========params==========
	 *
	 * `accessKey` :string : （可选项）从阿里云获取的accessKeyId
	 *
	 * `secretKey` :string : （可选项）从阿里云获取的accessKeySecret
	 *
	 * `endpoint` :string : （可选项）阿里云OSS服务在各个区域的地址，如：[https://oss-cn-shenzhen.aliyuncs.com](https://help.aliyun.com/document_detail/31837.html)
	 */
	init(params:aliCloudOss_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `上传文件`
	 * ========params==========
	 *
	 * `bucket` :string : 文件存储桶的名称，如：module-wkz
	 *
	 * `objectKey` :string : 文件存储在云上的命名，如：test/test.jpg，云会自动创建test文件夹，以便存储文件
	 *
	 * `filePath` :string : 上传对象，需上传本地文件路径，支持fs://、widget://等文件路径协议及真实路径
	 */
	putObject(params:aliCloudOss_putObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载文件`
	 * ========params==========
	 *
	 * `bucket` :string : 文件存储桶的名称，如：module-wkz
	 *
	 * `objectKey` :string : 文件存储在云上的命名，如：test/test.jpg
	 *
	 * `filePath` :string : 文件下载后的路径, 如：test.jpg
	 *
	 * `xOssProcess` :string : （可选项）下载图片时对图片进行处理的命令, 如：[image/circle,r_100](https://help.aliyun.com/document_detail/44686.html)
	 */
	downloadObject(params:aliCloudOss_downloadObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除文件`
	 * ========params==========
	 *
	 * `bucket` :string : 文件存储桶的名称，如：module-wkz
	 *
	 * `objectKey` :string : 文件存储在云上的命名，如：test/test.jpg
	 */
	deleteObject(params:aliCloudOss_deleteObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `复制文件`
	 * ========params==========
	 *
	 * `srcBucket` :string : 目标文件存储桶的名称，如：module-wkz
	 *
	 * `srcObjectKey` :string : 目标文件存储在云上的命名，如：test/test1.jpg
	 *
	 * `dstBucket` :string : 复制文件存储桶的名称，如：module-wkz
	 *
	 * `dstObjectKey` :string : 复制文件存储在云上的命名，如：test/test2.jpg
	 */
	copyObject(params:aliCloudOss_copyObject_Params, callback?: (ret:JSON) => void):void

}
interface aliCloudOss_init_Params {
	/**（可选项）从阿里云获取的accessKeyId*/ 
	accessKey?:string,

	/**（可选项）从阿里云获取的accessKeySecret*/ 
	secretKey?:string,

	/**（可选项）阿里云OSS服务在各个区域的地址，如：[https://oss-cn-shenzhen.aliyuncs.com](https://help.aliyun.com/document_detail/31837.html)*/ 
	endpoint?:string,

}

interface aliCloudOss_putObject_Params {
	/**文件存储桶的名称，如：module-wkz*/ 
	bucket:string,

	/**文件存储在云上的命名，如：test/test.jpg，云会自动创建test文件夹，以便存储文件*/ 
	objectKey:string,

	/**上传对象，需上传本地文件路径，支持fs://、widget://等文件路径协议及真实路径*/ 
	filePath:string,

}

interface aliCloudOss_downloadObject_Params {
	/**文件存储桶的名称，如：module-wkz*/ 
	bucket:string,

	/**文件存储在云上的命名，如：test/test.jpg*/ 
	objectKey:string,

	/**文件下载后的路径, 如：test.jpg*/ 
	filePath:string,

	/**（可选项）下载图片时对图片进行处理的命令, 如：[image/circle,r_100](https://help.aliyun.com/document_detail/44686.html)*/ 
	xOssProcess?:string,

}

interface aliCloudOss_deleteObject_Params {
	/**文件存储桶的名称，如：module-wkz*/ 
	bucket:string,

	/**文件存储在云上的命名，如：test/test.jpg*/ 
	objectKey:string,

}

interface aliCloudOss_copyObject_Params {
	/**目标文件存储桶的名称，如：module-wkz*/ 
	srcBucket:string,

	/**目标文件存储在云上的命名，如：test/test1.jpg*/ 
	srcObjectKey:string,

	/**复制文件存储桶的名称，如：module-wkz*/ 
	dstBucket:string,

	/**复制文件存储在云上的命名，如：test/test2.jpg*/ 
	dstObjectKey:string,

}

interface videoClipsRecord {
	/**
	 * `设置视频参数。`
	 * ========params==========
	 *
	 * `minDuration` :number : （可选项）允许拍摄的最小时长
	 *
	 * `maxDuration` :number : （可选项）允许拍摄的最大时长，时长越大，产生的视频文件越大；
	 *
	 * `bitRate` :number : （可选项）视频码率，建议8001000-50001000,码率越大，视频越清析，视频文件也会越大。参考：8秒的视频以2000*1000的码率压缩，文件大小1.5M-2M。请开发者根据自己的业务场景设置时长和码率；
	 *
	 * `videoWidth` :number : （可选项）输出视频的尺寸>宽。输出视频宽高目前只能设置1：1的宽高，建议设置为480（默认值）。
	 *
	 * `videoHeight` :number : （可选项）输出视频的尺寸>高。输出视频宽高目前只能设置1：1的宽高，建议设置为480（默认值）。
	 *
	 * `watermarkImage` :string : （可选项）视频水印图片,传空则不加水印，支持widget://。需要透明的png图片。
	 *
	 * `waterMarkPosition` :number : （可选项）水印的位置。右上角=1，右下角=2，默认是右上角。拍摄过程中看不到，最后导出的视频里有。（保证watermarkImage设置了图片才有效）
	 *
	 * `enableBeautySkinOn` :boolean : （可选项）美颜是否显示
	 *
	 * `enableImport` :boolean : （可选项）是否开启本地视频导入。不开启只能用该SDK拍摄视频，开启可以导入手机中用系统相机拍摄的视频或者外部导入手机中的视频
	 *
	 * `enableVideoEffect` :boolean : （可选项）是否开启视频编辑功能
	 *
	 * `beautySkinProgress` :number : （可选项）美颜参数
	 *
	 * `isBackCamera` :boolean : （可选项）默认打开摄像头(true后置|false前置)
	 */
	initRecord(params:videoClipsRecord_initRecord_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置背景音乐库，提供给用户选择。`
	 * ========params==========
	 *
	 * `music` :Array : （必填）背景音乐信息。音乐对象有三个属性，分别是id、name和resourceUrl。id表示编码，name表示名字，resourceUrl表示音乐文件存放位置。建议是把资源文件放到res目录下。官方demo给的资源文件<a href="http://pan.baidu.com/s/1boC6NlP">http://pan.baidu.com/s/1boC6NlP</a>
	 */
	setMusic(params:videoClipsRecord_setMusic_Params, callback?: (ret:JSON) => void):void

	/** 开始录像。*/ 
	record():void

}
interface videoClipsRecord_initRecord_Params {
	/**（可选项）允许拍摄的最小时长*/ 
	minDuration?:number,

	/**（可选项）允许拍摄的最大时长，时长越大，产生的视频文件越大；*/ 
	maxDuration?:number,

	/**（可选项）视频码率，建议8001000-50001000,码率越大，视频越清析，视频文件也会越大。参考：8秒的视频以2000*1000的码率压缩，文件大小1.5M-2M。请开发者根据自己的业务场景设置时长和码率；*/ 
	bitRate?:number,

	/**（可选项）输出视频的尺寸>宽。输出视频宽高目前只能设置1：1的宽高，建议设置为480（默认值）。*/ 
	videoWidth?:number,

	/**（可选项）输出视频的尺寸>高。输出视频宽高目前只能设置1：1的宽高，建议设置为480（默认值）。*/ 
	videoHeight?:number,

	/**（可选项）视频水印图片,传空则不加水印，支持widget://。需要透明的png图片。*/ 
	watermarkImage?:string,

	/**（可选项）水印的位置。右上角=1，右下角=2，默认是右上角。拍摄过程中看不到，最后导出的视频里有。（保证watermarkImage设置了图片才有效）*/ 
	waterMarkPosition?:number,

	/**（可选项）美颜是否显示*/ 
	enableBeautySkinOn?:boolean,

	/**（可选项）是否开启本地视频导入。不开启只能用该SDK拍摄视频，开启可以导入手机中用系统相机拍摄的视频或者外部导入手机中的视频*/ 
	enableImport?:boolean,

	/**（可选项）是否开启视频编辑功能*/ 
	enableVideoEffect?:boolean,

	/**（可选项）美颜参数*/ 
	beautySkinProgress?:number,

	/**（可选项）默认打开摄像头(true后置|false前置)*/ 
	isBackCamera?:boolean,

}

interface videoClipsRecord_setMusic_Params {
	/**（必填）背景音乐信息。音乐对象有三个属性，分别是id、name和resourceUrl。id表示编码，name表示名字，resourceUrl表示音乐文件存放位置。建议是把资源文件放到res目录下。官方demo给的资源文件<a href="http://pan.baidu.com/s/1boC6NlP">http://pan.baidu.com/s/1boC6NlP</a>*/ 
	music:Array,

}

interface umengTJ {
}
interface baiduLogin {
	/** 登录授权（用于实现第三方登录）*/ 
	auth():void

	/** 获取用户信息（需要获取 token 成功）*/ 
	getUserInfo():void

	/** 登出当前账号*/ 
	cancelAuth():void

}
interface mgCard {
	/**
	 * `调用联网授权代码进行授权`
	 * ========params==========
	 *
	 * `key` :string : apiKey，访问 [Face++](https://www.faceplusplus.com.cn)官网，登录后在控制台生成对应的key
	 *
	 * `secret` :string : apiSecret，访问 [Face++](https://www.faceplusplus.com.cn)官网，登录后在控制台生成对应的secret
	 *
	 * `url` :string : （可选项）url
	 *
	 * `duration` :string : （可选项）appKey有效期
	 */
	licenseForNetwork(params:mgCard_licenseForNetwork_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开视频检测页面`
	 * ========params==========
	 *
	 * `isCard` :number : （可选项）是否为证件
	 *
	 * `inBound` :number : （可选项）是否在引导框内
	 *
	 * `clear` :number : （可选项）是否清晰
	 *
	 * `shadowAreaTh` :number : （可选项）被判定为阴影的最小面积
	 *
	 * `faculaAreaTh` :number : （可选项）被判定为光斑的最小面积
	 *
	 * `cardAreaTh` :number : （可选项）被判定为身份证的最小面积
	 *
	 * `flareType` :boolean : （可选项）光斑检测是否过滤
	 */
	openVideoDetection(params:mgCard_openVideoDetection_Params, callback?: (ret:JSON) => void):void

	/** 关闭视频检测页面*/ 
	closeVideoDetection():void

	/**
	 * `检测图片`
	 * ========params==========
	 *
	 * `imagePath` :string : 检测图片路径，支持fs、widget、base64
	 *
	 * `isCard` :number : （可选项）是否为证件
	 *
	 * `inBound` :number : （可选项）是否在引导框内
	 *
	 * `clear` :number : （可选项）是否清晰
	 *
	 * `shadowAreaTh` :number : （可选项）被判定为阴影的最小面积
	 *
	 * `faculaAreaTh` :number : （可选项）被判定为光斑的最小面积
	 *
	 * `cardAreaTh` :number : （可选项）被判定为身份证的最小面积
	 *
	 * `flareType` :boolean : （可选项）光斑检测是否过滤
	 */
	detectImage(params:mgCard_detectImage_Params, callback?: (ret:JSON) => void):void

}
interface mgCard_licenseForNetwork_Params {
	/**apiKey，访问 [Face++](https://www.faceplusplus.com.cn)官网，登录后在控制台生成对应的key*/ 
	key:string,

	/**apiSecret，访问 [Face++](https://www.faceplusplus.com.cn)官网，登录后在控制台生成对应的secret*/ 
	secret:string,

	/**（可选项）url*/ 
	url?:string,

	/**（可选项）appKey有效期*/ 
	duration?:string,

}

interface mgCard_openVideoDetection_Params {
	/**（可选项）是否为证件*/ 
	isCard?:number,

	/**（可选项）是否在引导框内*/ 
	inBound?:number,

	/**（可选项）是否清晰*/ 
	clear?:number,

	/**（可选项）被判定为阴影的最小面积*/ 
	shadowAreaTh?:number,

	/**（可选项）被判定为光斑的最小面积*/ 
	faculaAreaTh?:number,

	/**（可选项）被判定为身份证的最小面积*/ 
	cardAreaTh?:number,

	/**（可选项）光斑检测是否过滤*/ 
	flareType?:boolean,

}

interface mgCard_detectImage_Params {
	/**检测图片路径，支持fs、widget、base64*/ 
	imagePath:string,

	/**（可选项）是否为证件*/ 
	isCard?:number,

	/**（可选项）是否在引导框内*/ 
	inBound?:number,

	/**（可选项）是否清晰*/ 
	clear?:number,

	/**（可选项）被判定为阴影的最小面积*/ 
	shadowAreaTh?:number,

	/**（可选项）被判定为光斑的最小面积*/ 
	faculaAreaTh?:number,

	/**（可选项）被判定为身份证的最小面积*/ 
	cardAreaTh?:number,

	/**（可选项）光斑检测是否过滤*/ 
	flareType?:boolean,

}

interface xinyanIDVerification {
}
interface zyTencentAd {
}
interface mogoAds {
}
interface xiaoNeng {
	/** 初始化方法*/ 
	initSDK(callback?: (ret:JSON) => void):void

	/** 登录方法*/ 
	login(callback?: (ret:JSON) => void):void

	/** 登出方法*/ 
	logout():void

	/** 打开聊窗的方法（前提是已经执行了initSDK方法）*/ 
	startChat(callback?: (ret:JSON) => void):void

	/** 停止某个聊天会话,用于android打开聊天窗不刷新的时候需要先停止当前聊天会话*/ 
	stopChat():void

	/** 名片链接的显示样式设置，默认纯文本*/ 
	setShowCard():void

	/** 窗口头部标题栏的背景颜色设置*/ 
	setTopBarBgColor():void

	/** 访客头像的设置*/ 
	setUsersHeadIcon():void

	/** 设置聊天头像是否显示为圆形，建议统一设置，否则在ios上存在设置圆形就无法设置回正方形*/ 
	setHeadIconCircle():void

	/** android通知消息的标题前称设置*/ 
	setNotificationShowTitleHead():void

	/** 关闭聊天会话的时间设置（分钟）*/ 
	setCloseChatSessionTime():void

	/** 开启聊天小视频功能*/ 
	openVideoPlus():void

	/** 消息发送的扩展，在聊天窗口*/ 
	sendCustomMsg():void

	/** 增加聊天面板+号功能区除默认功能之外的功能(点击事件配合PlusFunctionClick事件使用)*/ 
	addPlusFunction():void

	/** 打开最近商品列表界面(配合聊天窗下方面板功能使用)*/ 
	openGoodsList():void

	/** 打开最近订单列表界面(配合聊天窗下方面板功能使用)*/ 
	openOrderList():void

	/** 打开会话列表界面(配合聊天窗下方面板功能使用)*/ 
	openConversationList():void

	/** 获取消息(会话)列表(支持同步)*/ 
	getConversationList():void

	/** 根据settingid移除消息(会话)*/ 
	deleteConversationItem():void

	/** 根据链接打开自定义浏览器*/ 
	openExplorer():void

	/** 设置播放提示音*/ 
	setBeepPath():void

	/** 播放提示音*/ 
	beepPlay():void

	/** 基本的事件监听*/ 
	addEventListener(callback?: (ret:JSON) => void):void

	/** 是否开启debug日志模式*/ 
	enableDebug():void

}
interface ajSms {
	/** 预取号并设置授权页样式*/ 
	init():void

	/** 获取短信验证码*/ 
	getSmsCode():void

	/** 获取语音验证码*/ 
	getVoiceCode():void

	/** 获取语音验证码*/ 
	checkSmsCode():void

}
interface qidaIM {
	/**
	 * `登录`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `password` :string : 密码
	 */
	login(params:qidaIM_login_Params, callback?: (ret:JSON) => void):void

	/** 退出登录*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 账号事件的监听*/ 
	addAccountListener():void

	/** 添加消息相关监听（该接口仅支持ios）*/ 
	addMessagesListener():void

	/** 添加消息相关监听（该接口仅支持android）*/ 
	addMessagesListenerForAndroid():void

	/** 添加会话相关监听(仅支持ios)*/ 
	addSessionListener():void

	/** 添加好友相关监听（仅支持ios）*/ 
	addContactsListener():void

	/** 添加群组相关监听（仅支持ios）*/ 
	addGroupListener():void

	/**
	 * `根据人员id获取人员信息`
	 * ========params==========
	 *
	 * `userId` :string : 人员id
	 */
	getUserByUserID(params:qidaIM_getUserByUserID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据子ID获取部门`
	 * ========params==========
	 *
	 * `deptId` :string : 部门ID
	 */
	getDeptByID(params:qidaIM_getDeptByID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取用户所在组织 （仅支持ios）`
	 * ========params==========
	 *
	 * `userId` :string : 用户ID
	 */
	getUserOrgByUserID(params:qidaIM_getUserOrgByUserID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文本消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号
	 *
	 * `chatType` :number : （可选项）要发送消息的会话类型
	 *
	 * `text` :string : 发送的消息
	 */
	sendText(params:qidaIM_sendText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片消息（仅支持ios，android可调用sendFile接口）`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号
	 *
	 * `chatType` :number : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的图片的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 */
	sendImage(params:qidaIM_sendImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号
	 *
	 * `chatType` :number : （可选项）要发送消息的会话类型
	 *
	 * `title` :string : （可选项）标题
	 *
	 * `info` :string : （可选项）信息
	 *
	 * `latitude` :number : 纬度
	 *
	 * `longitude` :number : 经度
	 */
	sendLocation(params:qidaIM_sendLocation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送声音消息 （仅支持ios，android可调用sendFile接口）`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号
	 *
	 * `chatType` :number : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的音频的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 */
	sendVoice(params:qidaIM_sendVoice_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送视频消息 （仅支持ios，android可调用sendFile接口）`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号
	 *
	 * `chatType` :number : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的视频的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 */
	sendVideo(params:qidaIM_sendVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文件消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号
	 *
	 * `chatType` :number : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的文件的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 *
	 * `type` :number : 文件类型
	 */
	sendFile(params:qidaIM_sendFile_Params, callback?: (ret:JSON) => void):void

	/** 删除某个会话的所有消息*/ 
	deleteAllmessagesInSession():void

	/** 设置一个会话里所有消息置为已读 （仅支持ios）*/ 
	markAllMessagesReadInSession():void

	/**
	 * `得到会话所有消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号
	 *
	 * `chatType` :number : （可选项）要发送消息的会话类型
	 */
	getSessionMessages(params:qidaIM_getSessionMessages_Params, callback?: (ret:JSON) => void):void

	/** 获取最近会话列表 （仅支持ios）*/ 
	getRecentSessionList():void

	/** 获取最近会话列表 （仅支持android）*/ 
	getRecentSessionListForAndroid():void

	/** 从服务端获取联系人列表 （仅支持ios）*/ 
	getContactsListCompletion(callback?: (ret:JSON) => void):void

	/**
	 * `添加联系人 （仅支持ios）`
	 * ========params==========
	 *
	 * `userId` :string : 联系人ID
	 *
	 * `nickname` :string : （可选项）被添加用户昵称
	 */
	addContactsWithUser(params:qidaIM_addContactsWithUser_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除联系人 （仅支持ios）`
	 * ========params==========
	 *
	 * `userId` :string : 联系人ID
	 */
	deleteContactsWithUserID(params:qidaIM_deleteContactsWithUserID_Params, callback?: (ret:JSON) => void):void

	/** 获取群组列表*/ 
	getGroupList():void

	/**
	 * `根据群组ID获取群组`
	 * ========params==========
	 *
	 * `groupId` :string : 群组ID
	 */
	getGroupByGroupID(params:qidaIM_getGroupByGroupID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建群组`
	 * ========params==========
	 *
	 * `groupName` :string : 群组名称
	 *
	 * `userList` :Array : 用户数组
	 *
	 * `pic` :string : （可选项）用户的ID数组
	 *
	 * `desc` :string : （可选项）群组描述
	 */
	createGroup(params:qidaIM_createGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `群组邀请`
	 * ========params==========
	 *
	 * `groupID` :string : 群组ID
	 *
	 * `userList` :Array : 邀请用户列表
	 */
	inviteGroupMembersForGroupID(params:qidaIM_inviteGroupMembersForGroupID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `退出群组 **（注意：android群主如果调用该方法会解散该群）**`
	 * ========params==========
	 *
	 * `groupID` :string : 群组ID
	 */
	quitGroupForGroupID(params:qidaIM_quitGroupForGroupID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `群组踢人`
	 * ========params==========
	 *
	 * `groupID` :string : 群组ID
	 *
	 * `userList` :Array : 用户列表
	 */
	removeGroupMembersForGroupID(params:qidaIM_removeGroupMembersForGroupID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解散群组 **（该方法仅支持ios， android解散群组需要群主调用quitGroupForGroupID即可）**`
	 * ========params==========
	 *
	 * `groupID` :string : 群组ID
	 */
	dissolveGroupForGroupID(params:qidaIM_dissolveGroupForGroupID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群组名称`
	 * ========params==========
	 *
	 * `groupID` :string : 群组ID
	 *
	 * `groupName` :string : 新的群组名称
	 */
	modifyGroupNameForGroupID(params:qidaIM_modifyGroupNameForGroupID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群组头像`
	 * ========params==========
	 *
	 * `groupID` :string : 群组ID
	 *
	 * `groupAvatar` :string : 新的群组头像地址
	 */
	modifyGroupAvatarForGroupID(params:qidaIM_modifyGroupAvatarForGroupID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群组描述`
	 * ========params==========
	 *
	 * `groupID` :string : 群组ID
	 *
	 * `groupIntro` :string : 新的群组描述
	 */
	modifyGroupIntroForGroupID(params:qidaIM_modifyGroupIntroForGroupID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改用户群昵称`
	 * ========params==========
	 *
	 * `groupID` :string : 群组ID
	 *
	 * `userID` :string : 用户ID
	 *
	 * `nickname` :string : 用户昵称
	 */
	modifyGroupNicknameForGroupID(params:qidaIM_modifyGroupNicknameForGroupID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `转让群主`
	 * ========params==========
	 *
	 * `groupID` :string : 群组ID
	 *
	 * `userID` :string : 要转让的用户ID
	 */
	transferGroupOwnerForGroupID(params:qidaIM_transferGroupOwnerForGroupID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置/取消群管理员`
	 * ========params==========
	 *
	 * `groupID` :string : 群组ID
	 *
	 * `userID` :string : 要设置/取消的用户ID
	 *
	 * `isAdministrator` :boolean : （可选项）是否是管理员
	 */
	setGroupManagerForGroupID(params:qidaIM_setGroupManagerForGroupID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置群消息屏蔽`
	 * ========params==========
	 *
	 * `groupID` :string : 群组ID
	 *
	 * `isShield` :boolean : （可选项）是否屏蔽
	 */
	setGroupMsgShieldForGroupID(params:qidaIM_setGroupMsgShieldForGroupID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置群禁言（只允许群组或者全管理员发消息，暂仅支持ios）`
	 * ========params==========
	 *
	 * `groupID` :string : 群组ID
	 *
	 * `isShutup` :boolean : （可选项）是否禁言
	 */
	setGroupShutupForGroupID(params:qidaIM_setGroupShutupForGroupID_Params, callback?: (ret:JSON) => void):void

	/** 打开会话页面*/ 
	openSession():void

	/** 打开联系人页面*/ 
	openContact():void

	/** 打开我的页面*/ 
	openMine():void

	/** 关闭打开的UI页面*/ 
	closeView():void

	/**
	 * `配置UI页面`
	 * ========params==========
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 */
	configureUI(params:qidaIM_configureUI_Params):void

}
interface qidaIM_login_Params {
	/**用户名*/ 
	username:string,

	/**密码*/ 
	password:string,

}

interface qidaIM_getUserByUserID_Params {
	/**人员id*/ 
	userId:string,

}

interface qidaIM_getDeptByID_Params {
	/**部门ID*/ 
	deptId:string,

}

interface qidaIM_getUserOrgByUserID_Params {
	/**用户ID*/ 
	userId:string,

}

interface qidaIM_sendText_Params {
	/**会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号*/ 
	sessionId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:number,

	/**发送的消息*/ 
	text:string,

}

interface qidaIM_sendImage_Params {
	/**会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号*/ 
	sessionId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:number,

	/**要发送的图片的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

}

interface qidaIM_sendLocation_Params {
	/**会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号*/ 
	sessionId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:number,

	/**（可选项）标题*/ 
	title?:string,

	/**（可选项）信息*/ 
	info?:string,

	/**纬度*/ 
	latitude:number,

	/**经度*/ 
	longitude:number,

}

interface qidaIM_sendVoice_Params {
	/**会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号*/ 
	sessionId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:number,

	/**要发送的音频的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

}

interface qidaIM_sendVideo_Params {
	/**会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号*/ 
	sessionId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:number,

	/**要发送的视频的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

}

interface qidaIM_sendFile_Params {
	/**会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号*/ 
	sessionId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:number,

	/**要发送的文件的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

	/**文件类型*/ 
	type:number,

}

interface qidaIM_getSessionMessages_Params {
	/**会话ID,如果当前session为group, 则sessionId为groupId,如果是P2P则为对方帐号*/ 
	sessionId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:number,

}

interface qidaIM_addContactsWithUser_Params {
	/**联系人ID*/ 
	userId:string,

	/**（可选项）被添加用户昵称*/ 
	nickname?:string,

}

interface qidaIM_deleteContactsWithUserID_Params {
	/**联系人ID*/ 
	userId:string,

}

interface qidaIM_getGroupByGroupID_Params {
	/**群组ID*/ 
	groupId:string,

}

interface qidaIM_createGroup_Params {
	/**群组名称*/ 
	groupName:string,

	/**用户数组*/ 
	userList:Array,

	/**（可选项）用户的ID数组*/ 
	pic?:string,

	/**（可选项）群组描述*/ 
	desc?:string,

}

interface qidaIM_inviteGroupMembersForGroupID_Params {
	/**群组ID*/ 
	groupID:string,

	/**邀请用户列表*/ 
	userList:Array,

}

interface qidaIM_quitGroupForGroupID_Params {
	/**群组ID*/ 
	groupID:string,

}

interface qidaIM_removeGroupMembersForGroupID_Params {
	/**群组ID*/ 
	groupID:string,

	/**用户列表*/ 
	userList:Array,

}

interface qidaIM_dissolveGroupForGroupID_Params {
	/**群组ID*/ 
	groupID:string,

}

interface qidaIM_modifyGroupNameForGroupID_Params {
	/**群组ID*/ 
	groupID:string,

	/**新的群组名称*/ 
	groupName:string,

}

interface qidaIM_modifyGroupAvatarForGroupID_Params {
	/**群组ID*/ 
	groupID:string,

	/**新的群组头像地址*/ 
	groupAvatar:string,

}

interface qidaIM_modifyGroupIntroForGroupID_Params {
	/**群组ID*/ 
	groupID:string,

	/**新的群组描述*/ 
	groupIntro:string,

}

interface qidaIM_modifyGroupNicknameForGroupID_Params {
	/**群组ID*/ 
	groupID:string,

	/**用户ID*/ 
	userID:string,

	/**用户昵称*/ 
	nickname:string,

}

interface qidaIM_transferGroupOwnerForGroupID_Params {
	/**群组ID*/ 
	groupID:string,

	/**要转让的用户ID*/ 
	userID:string,

}

interface qidaIM_setGroupManagerForGroupID_Params {
	/**群组ID*/ 
	groupID:string,

	/**要设置/取消的用户ID*/ 
	userID:string,

	/**（可选项）是否是管理员*/ 
	isAdministrator?:boolean,

}

interface qidaIM_setGroupMsgShieldForGroupID_Params {
	/**群组ID*/ 
	groupID:string,

	/**（可选项）是否屏蔽*/ 
	isShield?:boolean,

}

interface qidaIM_setGroupShutupForGroupID_Params {
	/**群组ID*/ 
	groupID:string,

	/**（可选项）是否禁言*/ 
	isShutup?:boolean,

}

interface qidaIM_configureUI_Params {
	/**导航条样式配置*/ 
	navigationBar:JSON,

}

interface haierUserCenter {
}
interface sangfor {
	/** 设置登陆超时时间*/ 
	setLoginTimeOut(callback?: (ret:JSON) => void):void

	/** 退出登陆*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 设置登陆监听*/ 
	setLoginListener(callback?: (ret:JSON) => void):void

	/** 开启ByPass模式，开启后，所有SDK功能将失效 需要在认证之前设置，否则设置无效*/ 
	enableByPass(callback?: (ret:JSON) => void):void

	/** 获取当前vpn状态*/ 
	queryStatus(callback?: (ret:JSON) => void):void

	/** 添加vpn状态监听*/ 
	addStatusChangedListener(callback?: (ret:JSON) => void):void

	/** 清除所有vpn状态监听*/ 
	clearStatusChangedListener(callback?: (ret:JSON) => void):void

	/** 初始化并使用账号密码登陆*/ 
	loginByAccount(callback?: (ret:JSON) => void):void

	/** 初始化并使用证书认证登陆*/ 
	loginByCertificate(callback?: (ret:JSON) => void):void

	/** 初始化并进行共享session认证*/ 
	loginBySession(callback?: (ret:JSON) => void):void

	/** 判断是否支持免密登陆*/ 
	ticketAuthAvailable(callback?: (ret:JSON) => void):void

	/** 初始化并进行免密登陆*/ 
	loginByAuthAvailable(callback?: (ret:JSON) => void):void

	/** 证书认证，不进行sdk初始化*/ 
	doCertificateAuth(callback?: (ret:JSON) => void):void

	/** 短信认证，不进行sdk初始化*/ 
	doSMSAuth(callback?: (ret:JSON) => void):void

	/** Radius挑战认证，不进行sdk初始化*/ 
	doRadiusAuth(callback?: (ret:JSON) => void):void

	/** token令牌认证，不进行sdk初始化*/ 
	doTokenAuth(callback?: (ret:JSON) => void):void

	/** 账号密码认证，不进行sdk初始化*/ 
	doPasswordAuth(callback?: (ret:JSON) => void):void

	/** 图形校验码认证*/ 
	doRandCodeAuth(callback?: (ret:JSON) => void):void

	/** 重新获取短信验证码*/ 
	reacquireSmsCode(callback?: (ret:JSON) => void):void

	/** 图形验证码监听*/ 
	addRandCodeListener(callback?: (ret:JSON) => void):void

	/** 获取共享登录的Session*/ 
	getSession(callback?: (ret:JSON) => void):void

}
interface arRtc {
}
interface reportLocation {
	/**
	 * `开始定位并上报指定服务器`
	 * ========params==========
	 *
	 * `accuracy` :string : （可选项）定位精度，**信号不稳定时，定位精度过高，在 iOS 平台上会偶现定位失败的问题**
	 *
	 * `filter` :number : （可选项）位置更新所需最小距离（单位米）
	 *
	 * `autoStop` :boolean : （可选项）获取到位置信息后是否自动停止定位
	 *
	 * `report` :JSON : （可选项）当 autoStop 为 false 时，本参数表示将当前位置信息上报的配置，若 autoStop 为 true，则本参数无意义。
	 */
	startLocation(params:reportLocation_startLocation_Params, callback?: (ret:JSON) => void):void

	/** 停止定位，当调用 startLocation 接口时 autoStop 参数传 false，则调用本接口可停止定位功能*/ 
	stopLocation():void

}
interface reportLocation_startLocation_Params {
	/**（可选项）定位精度，**信号不稳定时，定位精度过高，在 iOS 平台上会偶现定位失败的问题***/ 
	accuracy?:string,

	/**（可选项）位置更新所需最小距离（单位米）*/ 
	filter?:number,

	/**（可选项）获取到位置信息后是否自动停止定位*/ 
	autoStop?:boolean,

	/**（可选项）当 autoStop 为 false 时，本参数表示将当前位置信息上报的配置，若 autoStop 为 true，则本参数无意义。*/ 
	report?:JSON,

}

interface UIBaiduOCR {
	/**
	 * `sdk授权`
	 * ========params==========
	 *
	 * `apiKey` :string : （必填项）在百度云申请的apiKey。
	 *
	 * `secretKey` :string : （必填项）在百度云申请的secretKey。
	 */
	initAccessTokenWithAkSk(params:UIBaiduOCR_initAccessTokenWithAkSk_Params, callback?: (ret:JSON) => void):void

	/** 初始化本地能力控制*/ 
	initCameraNative(callback?: (ret:JSON) => void):void

	/**
	 * `打开身份证识别界面`
	 * ========params==========
	 *
	 * `isCardFront` :boolean : （可选项）识别身份证正面还是背面。(true:正面 false:背面)
	 *
	 * `isNativeManual` :string : （必填项）是否开启本地能力控制。(true:开启 false:关闭)
	 */
	openIDCard(params:UIBaiduOCR_openIDCard_Params, callback?: (ret:JSON) => void):void

	/** 打开银行卡识别界面*/ 
	openBankCard(callback?: (ret:JSON) => void):void

}
interface UIBaiduOCR_initAccessTokenWithAkSk_Params {
	/**（必填项）在百度云申请的apiKey。*/ 
	apiKey:string,

	/**（必填项）在百度云申请的secretKey。*/ 
	secretKey:string,

}

interface UIBaiduOCR_openIDCard_Params {
	/**（可选项）识别身份证正面还是背面。(true:正面 false:背面)*/ 
	isCardFront?:boolean,

	/**（必填项）是否开启本地能力控制。(true:开启 false:关闭)*/ 
	isNativeManual:string,

}

interface dataCollect {
	/**
	 * `记录行为统计`
	 * ========params==========
	 *
	 * `userName` :string : 用户登录名
	 *
	 * `pageName` :string : 页面名称
	 *
	 * `appName` :string : APP名称
	 *
	 * `uuid` :string : uuid
	 *
	 * `count` :string : (可选项)点击次数，不传时为1
	 */
	saveStatisticItem(params:dataCollect_saveStatisticItem_Params):void

}
interface dataCollect_saveStatisticItem_Params {
	/**用户登录名*/ 
	userName:string,

	/**页面名称*/ 
	pageName:string,

	/**APP名称*/ 
	appName:string,

	/**uuid*/ 
	uuid:string,

	/**(可选项)点击次数，不传时为1*/ 
	count?:string,

}

interface umAnalytics {
	/**
	 * `账号统计：登录。友盟在统计用户时以设备为标准，如果需要统计应用自身的账号，请使用此接口`
	 * ========params==========
	 *
	 * `userID` :string : 用户账号ID.长度小于64字节
	 *
	 * `provider` :string : （可选项）账号来源。如果用户通过第三方账号登陆，可以调用此接口进行统计。不能以下划线”_”开头，使用大写字母和数字标识; 如果是上市公司，建议使用股票代码。
	 */
	profileSignInWithPUID(params:umAnalytics_profileSignInWithPUID_Params, callback?: (ret:JSON) => void):void

	/** 账号统计：退出。友盟在统计用户时以设备为标准，如果需要统计应用自身的账号，请使用此接口*/ 
	profileSignOff(callback?: (ret:JSON) => void):void

}
interface umAnalytics_profileSignInWithPUID_Params {
	/**用户账号ID.长度小于64字节*/ 
	userID:string,

	/**（可选项）账号来源。如果用户通过第三方账号登陆，可以调用此接口进行统计。不能以下划线”_”开头，使用大写字母和数字标识; 如果是上市公司，建议使用股票代码。*/ 
	provider?:string,

}

interface pushGeTui {
}
interface baiduPlayer {
	/**
	 * `设置AccessKey（必须调用，否则会出现闪退）`
	 * ========params==========
	 *
	 * `accessKey` :string : （必填项）百度云AccessKey
	 */
	setAccessKey(params:baiduPlayer_setAccessKey_Params, callback?: (ret:JSON) => void):void

	/**
	 * `初始化视频播放配置`
	 * ========params==========
	 *
	 * `ttf` :string : （可选项）设置标题显示文字字体文件路径，仅支持widget://
	 *
	 * `fullBtnPlan` :number : （可选项）全屏默认按钮方案；1:不包含下面2的按钮，2:包含清晰度，选集，下载，收藏按钮事件
	 *
	 * `logo` :string : （可选项）右上角设置logo；支持fs://,widget:// （全屏默认按钮方案2不建议用此参数）
	 *
	 * `isImmerse` :boolean : （可选项）在APP仅全屏播放有效；当为true时:顶部菜单自动加上顶部状态栏的高度，为false时:顶部菜单不加顶部状态栏高度。
	 *
	 * `FullScreenViewIsFont` :boolean : （可选项）全屏view是否显示最上层,true:是|false:否，仅ios有效（注意，未开启沉侵式的App请不要设置该参数。）
	 */
	init(params:baiduPlayer_init_Params):void

	/**
	 * `播放本地视频、网络视频、rtmp直播流等`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）浏览器窗口的位置和大小，设置margin后，在不同手机上面会保持与父页面的各方向边距一致，而中间区域会自动扩充。建议使用margin布局，可以完美适配带smartBar的手机。
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `url` :string : （必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://
	 *
	 * `title` :string : （可选项）不填时标题默认显示url地址
	 *
	 * `defaultBtn` :boolean : （可选项）设置本次播放是否显示默认自带的播放控制按钮
	 *
	 * `enableFull` :boolean : （可选项）本次播放视频是否全屏播放，当为true时将直接全屏播放视频，x,y,w,h,fixedOn,fixed值不会生效。
	 *
	 * `isTopView` :boolean : （可选项）是否显示顶部标题栏
	 *
	 * `isFullBtn` :boolean : （可选项）小窗口是否显示进入全屏按钮
	 *
	 * `isBackBtn` :boolean : （可选项）小窗口是否显示返回按钮
	 *
	 * `rotation` :number : （可选项）设置播放视频旋转角度（取值范围：0 90 180 270）
	 *
	 * `fullscreenMode` :string : （可选项）设置全屏按钮控制全屏显示模式是横屏还是竖屏 竖屏:PORTRAIT ; 横屏:LANDSCAPE
	 *
	 * `isShowProcessView` :boolean : （可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动默认为false】
	 *
	 * `isShowTimeLable` :boolean : （可选项）是否显示播放时间 (显示:true ; 不显示:false)
	 *
	 * `isLive` :boolean : （可选项）是否直播视频源 （直播：true；点播：false）
	 *
	 * `token` :string : （可选项）播放HLS加密视频Token模式传值。
	 */
	play(params:baiduPlayer_play_Params, callback?: (ret:JSON) => void):void

	/**
	 * `同一个页面，已经调用play接口后，切换视频地址时调用（前提条件，同一界面已经调用过play接口）。`
	 * ========params==========
	 *
	 * `url` :string : （必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://
	 *
	 * `title` :string : （可选项）不填时标题默认显示url播放文件名
	 *
	 * `defaultBtn` :boolean : （可选项）设置本次播放是否显示默认自带的播放控制按钮
	 *
	 * `rotation` :number : （可选项）设置播放视频旋转角度（取值范围：0 90 180 270）
	 *
	 * `isLive` :boolean : （可选项）是否直播视频源 （直播：true；点播：false）
	 *
	 * `token` :string : （可选项）播放HLS加密视频Token模式传值。
	 */
	playUrl(params:baiduPlayer_playUrl_Params, callback?: (ret:JSON) => void):void

	/** 暂停播放*/ 
	pause():void

	/** 暂停后开始播放*/ 
	start():void

	/** 停止播放*/ 
	stop():void

	/** 获取视频的时长*/ 
	getDuration(callback?: (ret:JSON) => void):void

	/** 获取已经播放的时长*/ 
	getCurrentPosition(callback?: (ret:JSON) => void):void

	/** 全屏播放*/ 
	full():void

	/** 退出全屏*/ 
	unfull():void

	/**
	 * `视频播放完监听事件`
	 * ========params==========
	 *
	 * `name` :string : 监听事件名称,可以设置的播放界面监听类型有：playEnd(播放结束)，qingxidu(清晰度),xuanji(选集)，download(下载),collection(收藏),pause(暂停),play(播放),backBtn(小窗口返回按钮),full(进入全屏按钮),unfull(退出全屏按钮)
	 */
	addEventListener(params:baiduPlayer_addEventListener_Params, callback?: (ret:JSON) => void):void

	/** 获取是否全屏播放状态*/ 
	isFullScreen(callback?: (ret:JSON) => void):void

	/**
	 * `设置播放进度位置(请根据视频最大时长进行参数控制传入)`
	 * ========params==========
	 *
	 * `process` :number : （必填项）设置视频需要播放的时长
	 */
	seekTo(params:baiduPlayer_seekTo_Params):void

	/**
	 * `设置播音量`
	 * ========params==========
	 *
	 * `volume` :number : （必填项）0-100
	 */
	setVolume(params:baiduPlayer_setVolume_Params):void

	/** 隐藏播放器*/ 
	hidePlayer():void

	/** 显示播放器*/ 
	showPlayer():void

}
interface baiduPlayer_setAccessKey_Params {
	/**（必填项）百度云AccessKey*/ 
	accessKey:string,

}

interface baiduPlayer_init_Params {
	/**（可选项）设置标题显示文字字体文件路径，仅支持widget://*/ 
	ttf?:string,

	/**（可选项）全屏默认按钮方案；1:不包含下面2的按钮，2:包含清晰度，选集，下载，收藏按钮事件*/ 
	fullBtnPlan?:number,

	/**（可选项）右上角设置logo；支持fs://,widget:// （全屏默认按钮方案2不建议用此参数）*/ 
	logo?:string,

	/**（可选项）在APP仅全屏播放有效；当为true时:顶部菜单自动加上顶部状态栏的高度，为false时:顶部菜单不加顶部状态栏高度。*/ 
	isImmerse?:boolean,

	/**（可选项）全屏view是否显示最上层,true:是|false:否，仅ios有效（注意，未开启沉侵式的App请不要设置该参数。）*/ 
	FullScreenViewIsFont?:boolean,

}

interface baiduPlayer_play_Params {
	/**（可选项）浏览器窗口的位置和大小，设置margin后，在不同手机上面会保持与父页面的各方向边距一致，而中间区域会自动扩充。建议使用margin布局，可以完美适配带smartBar的手机。*/ 
	rect?:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://*/ 
	url:string,

	/**（可选项）不填时标题默认显示url地址*/ 
	title?:string,

	/**（可选项）设置本次播放是否显示默认自带的播放控制按钮*/ 
	defaultBtn?:boolean,

	/**（可选项）本次播放视频是否全屏播放，当为true时将直接全屏播放视频，x,y,w,h,fixedOn,fixed值不会生效。*/ 
	enableFull?:boolean,

	/**（可选项）是否显示顶部标题栏*/ 
	isTopView?:boolean,

	/**（可选项）小窗口是否显示进入全屏按钮*/ 
	isFullBtn?:boolean,

	/**（可选项）小窗口是否显示返回按钮*/ 
	isBackBtn?:boolean,

	/**（可选项）设置播放视频旋转角度（取值范围：0 90 180 270）*/ 
	rotation?:number,

	/**（可选项）设置全屏按钮控制全屏显示模式是横屏还是竖屏 竖屏:PORTRAIT ; 横屏:LANDSCAPE*/ 
	fullscreenMode?:string,

	/**（可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动默认为false】*/ 
	isShowProcessView?:boolean,

	/**（可选项）是否显示播放时间 (显示:true ; 不显示:false)*/ 
	isShowTimeLable?:boolean,

	/**（可选项）是否直播视频源 （直播：true；点播：false）*/ 
	isLive?:boolean,

	/**（可选项）播放HLS加密视频Token模式传值。*/ 
	token?:string,

}

interface baiduPlayer_playUrl_Params {
	/**（必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://*/ 
	url:string,

	/**（可选项）不填时标题默认显示url播放文件名*/ 
	title?:string,

	/**（可选项）设置本次播放是否显示默认自带的播放控制按钮*/ 
	defaultBtn?:boolean,

	/**（可选项）设置播放视频旋转角度（取值范围：0 90 180 270）*/ 
	rotation?:number,

	/**（可选项）是否直播视频源 （直播：true；点播：false）*/ 
	isLive?:boolean,

	/**（可选项）播放HLS加密视频Token模式传值。*/ 
	token?:string,

}

interface baiduPlayer_addEventListener_Params {
	/**监听事件名称,可以设置的播放界面监听类型有：playEnd(播放结束)，qingxidu(清晰度),xuanji(选集)，download(下载),collection(收藏),pause(暂停),play(播放),backBtn(小窗口返回按钮),full(进入全屏按钮),unfull(退出全屏按钮)*/ 
	name:string,

}

interface baiduPlayer_seekTo_Params {
	/**（必填项）设置视频需要播放的时长*/ 
	process:number,

}

interface baiduPlayer_setVolume_Params {
	/**（必填项）0-100*/ 
	volume:number,

}

interface alivcLivePusher {
	/**
	 * `初始化推流`
	 * ========params==========
	 *
	 * `resolution` :string : 分辨率
	 *
	 * `initialVideoBitrate` :number : 初始化码率
	 *
	 * `targetVideoBitrate` :number : 目标码率
	 *
	 * `minVideoBitrate` :number : 最小码率
	 *
	 * `qualityMode` :string : 码控
	 *
	 * `beautyMode` :string : 美颜模式
	 *
	 * `beautyEnable` :boolean : 是否开启美颜 (ios 不支持)
	 *
	 * `previewOrientation` :string : 推流方向设置
	 *
	 * `fps` :number : 帧率
	 *
	 * `videoOnly` :boolean : 纯视频推流 (如果设置为false则为纯音频推流)**注意:1.如果不调用startPreview接口进行预览的话,推流会失败 2.与 audioOnly互斥 3.如果videOnly和audioOnly都设置为false，则视频和音频都可以推流**
	 *
	 * `audioOnly` :boolean : 纯视频推流 (如果设置为false则为纯音频推流)**注意:1.如果不调用startPreview接口进行预览的话,推流会失败 2.与 videoOnly互斥**
	 *
	 * `waterMarkImage` :any : (可选项)水印图片，不添加该参数，则无水印图片
	 *
	 * `cameraType` :string : 相机方向
	 *
	 * `externMainStream` :boolean : 开启允许外部流输入 **仅支持iOS**
	 *
	 * `externVideoFormat` :string : 外部自定义音频数据 **仅支持iOS**
	 */
	initPusher(params:alivcLivePusher_initPusher_Params, callback?: (ret:JSON) => void):void

	/** 显示调试悬浮窗*/ 
	showDebugView():void

	/** 隐藏调试悬浮窗*/ 
	hideDebugView():void

	/**
	 * `插入SEI消息(在线问答,推送问题或者答案消息)`
	 * ========params==========
	 *
	 * `msg` :string : 需要插入流的SEI消息体，建议是json格式。阿里云播放器SDK可收到此SEI消息
	 *
	 * `repeatCount` :number : 发送的帧数。设置100，则在接下去的100帧均插入此SEI消息。
	 *
	 * `delayTime` :number : 延时多少毫秒发送
	 *
	 * `KeyFrameOnly` :boolean : 是否只发关键帧
	 */
	sendMessage(params:alivcLivePusher_sendMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始预览`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）预览窗口的位置及大小
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	startPreview(params:alivcLivePusher_startPreview_Params, callback?: (ret:JSON) => void):void

	/** 开始推流*/ 
	startPush():void

	/** 停止推流*/ 
	stopPush():void

	/** 暂停推流*/ 
	pause():void

	/** 回复推流*/ 
	resume():void

	/** 重新开始推流*/ 
	restartPush():void

	/** 推流重连*/ 
	reconnectPush():void

	/** 销毁推流*/ 
	destroy():void

	/** 设置静音*/ 
	setMute():void

	/** 切换摄像头 (必须在预览或者推流成功后才能调用)*/ 
	switchCamera():void

	/** 设置闪关灯 (必须在预览或者推流成功后才能调用)*/ 
	setFlash():void

	/** 打开预览镜像 (必须在预览或者推流成功后才能调用)*/ 
	setPreviewMirror():void

	/** 打开推流镜像 (必须在预览或者推流成功后才能调用)*/ 
	setPushMirror():void

	/** 是否打开美颜 (必须在预览或者推流成功后才能调用)*/ 
	setBeautyOn():void

	/** 设置美颜参数 (必须在预览或者推流成功后才能调用)*/ 
	setBeautyValues():void

	/** 是否自动对焦 (必须在预览或者推流成功后才能调用)*/ 
	setAutoFocus():void

	/** 手动对焦 (必须在预览或者推流成功后才能调用)*/ 
	focusCameraAtAdjustedPoint():void

	/** 设置缩放 (必须在预览或者推流成功后才能调用)*/ 
	setZoom():void

	/** 获取缩放最大值 (必须在预览或者推流成功后才能调用)*/ 
	getMaxZoom():void

	/** 获取当前缩放值 (必须在预览或者推流成功后才能调用)*/ 
	getCurrentZoom():void

	/** 是否正在推流 (必须在预览或者推流成功后才能调用)*/ 
	isPushing():void

	/** 获取推流地址 (必须在预览或者推流成功后才能调用)*/ 
	getPushUrl():void

	/**
	 * ` 播放背景音乐`
	 * ========params==========
	 *
	 * `path` :string : 背景音乐路径
	 */
	startBGMWithMusicPathAsync(params:alivcLivePusher_startBGMWithMusicPathAsync_Params):void

	/**  停止播放背景音乐*/ 
	stopBGMAsync():void

	/**  暂停播放背景音乐*/ 
	pauseBGM():void

	/** 恢复播放背景音乐*/ 
	resumeBGM():void

	/**
	 * `  设置背景音乐是否循环播放`
	 * ========params==========
	 *
	 * `isLoop` :boolean : 是否循环
	 */
	setBGMLoop(params:alivcLivePusher_setBGMLoop_Params):void

	/**
	 * `  设置背景音乐耳返开关`
	 * ========params==========
	 *
	 * `isOpen` :boolean : 是否打开耳返
	 */
	setBGMEarsBack(params:alivcLivePusher_setBGMEarsBack_Params):void

	/**
	 * `   设置降噪开关`
	 * ========params==========
	 *
	 * `isOpen` :boolean : 是否打开降噪
	 */
	setAudioDenoise(params:alivcLivePusher_setAudioDenoise_Params):void

	/**
	 * ` 设置背景音乐混音 音乐音量`
	 * ========params==========
	 *
	 * `volume` :number : 音乐音量大小
	 */
	setBGMVolume(params:alivcLivePusher_setBGMVolume_Params):void

	/**
	 * ` 设置背景音乐混音 人声音量`
	 * ========params==========
	 *
	 * `volume` :number : 人声音量大小
	 */
	setCaptureVolume(params:alivcLivePusher_setCaptureVolume_Params):void

	/** 监听推流相关事件*/ 
	addEventListener():void

	/** 相机是否支持自动对焦*/ 
	isCameraSupportAutoFocus():void

	/** 相机是否支持闪关灯*/ 
	isCameraSupportFlash():void

	/** 获取当前推流状态*/ 
	getLiveStatus():void

	/**
	 * `预览窗口显示模式`
	 * ========params==========
	 *
	 * `displayModel` :number : 预览显示模式
	 */
	setpreviewDisplayMode(params:alivcLivePusher_setpreviewDisplayMode_Params):void

	/**
	 * `添加贴图`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）预览窗口的位置及大小
	 *
	 * `path` :string : 贴图路径   //字符串类型，图片的路径，支持fs://,widget://（android 不支持widget://）
	 */
	addDynamicWaterMarkImage(params:alivcLivePusher_addDynamicWaterMarkImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始录屏 **（注意：android系统该接口只能在5.0及以上的系统版本中使用）**`
	 * ========params==========
	 *
	 * `url` :string : 推送url **iOS不支持**
	 *
	 * `networkPoorImage` :string : 在网络环境较差的情况下显示的图片（android仅支持fs://及系统本地路径）**iOS不支持**
	 *
	 * `pausePushImage` :string : 暂停推流时（即调用pauseScreenCapture）客户端显示的画面（android仅支持fs://及系统本地路径）**iOS不支持**
	 *
	 * `ret` :JSON : 返回值
	 */
	startScreenCapture(params:alivcLivePusher_startScreenCapture_Params):void

	/**
	 * `打开相机预览（即在录屏页面开启一个预览小窗口）`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）预览窗口的位置及大小(建议窗口比例1:1，这样在转屏时无需重新startCamera)
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `ret` :JSON : 返回值
	 */
	startCamera(params:alivcLivePusher_startCamera_Params):void

	/** 关闭预览窗口*/ 
	stopCamera():void

	/**
	 * `打开混流（改接口与startCamera的区别是录制端无需开启预览页面，如一些游戏主播在直播时不会开启预览页面以免挡住游戏画面）`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）混流窗口的位置及大小(建议窗口比例1:1，这样在转屏时无需重新startCamera)
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `ret` :JSON : 返回值
	 */
	startCameraMix(params:alivcLivePusher_startCameraMix_Params):void

	/** 关闭混流*/ 
	stopCameraMix():void

	/** 暂停录屏（比如需要输入密码等一些私密操作前可以调用此方法）*/ 
	pauseScreenCapture():void

	/** 恢复录屏*/ 
	resumeScreenCapture():void

}
interface alivcLivePusher_initPusher_Params {
	/**分辨率*/ 
	resolution:string,

	/**初始化码率*/ 
	initialVideoBitrate:number,

	/**目标码率*/ 
	targetVideoBitrate:number,

	/**最小码率*/ 
	minVideoBitrate:number,

	/**码控*/ 
	qualityMode:string,

	/**美颜模式*/ 
	beautyMode:string,

	/**是否开启美颜 (ios 不支持)*/ 
	beautyEnable:boolean,

	/**推流方向设置*/ 
	previewOrientation:string,

	/**帧率*/ 
	fps:number,

	/**纯视频推流 (如果设置为false则为纯音频推流)**注意:1.如果不调用startPreview接口进行预览的话,推流会失败 2.与 audioOnly互斥 3.如果videOnly和audioOnly都设置为false，则视频和音频都可以推流***/ 
	videoOnly:boolean,

	/**纯视频推流 (如果设置为false则为纯音频推流)**注意:1.如果不调用startPreview接口进行预览的话,推流会失败 2.与 videoOnly互斥***/ 
	audioOnly:boolean,

	/**(可选项)水印图片，不添加该参数，则无水印图片*/ 
	waterMarkImage?:any,

	/**相机方向*/ 
	cameraType:string,

	/**开启允许外部流输入 **仅支持iOS***/ 
	externMainStream:boolean,

	/**外部自定义音频数据 **仅支持iOS***/ 
	externVideoFormat:string,

}

interface alivcLivePusher_sendMessage_Params {
	/**需要插入流的SEI消息体，建议是json格式。阿里云播放器SDK可收到此SEI消息*/ 
	msg:string,

	/**发送的帧数。设置100，则在接下去的100帧均插入此SEI消息。*/ 
	repeatCount:number,

	/**延时多少毫秒发送*/ 
	delayTime:number,

	/**是否只发关键帧*/ 
	KeyFrameOnly:boolean,

}

interface alivcLivePusher_startPreview_Params {
	/**（可选项）预览窗口的位置及大小*/ 
	rect?:JSON,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface alivcLivePusher_startBGMWithMusicPathAsync_Params {
	/**背景音乐路径*/ 
	path:string,

}

interface alivcLivePusher_setBGMLoop_Params {
	/**是否循环*/ 
	isLoop:boolean,

}

interface alivcLivePusher_setBGMEarsBack_Params {
	/**是否打开耳返*/ 
	isOpen:boolean,

}

interface alivcLivePusher_setAudioDenoise_Params {
	/**是否打开降噪*/ 
	isOpen:boolean,

}

interface alivcLivePusher_setBGMVolume_Params {
	/**音乐音量大小*/ 
	volume:number,

}

interface alivcLivePusher_setCaptureVolume_Params {
	/**人声音量大小*/ 
	volume:number,

}

interface alivcLivePusher_setpreviewDisplayMode_Params {
	/**预览显示模式*/ 
	displayModel:number,

}

interface alivcLivePusher_addDynamicWaterMarkImage_Params {
	/**（可选项）预览窗口的位置及大小*/ 
	rect?:JSON,

	/**贴图路径   //字符串类型，图片的路径，支持fs://,widget://（android 不支持widget://）*/ 
	path:string,

}

interface alivcLivePusher_startScreenCapture_Params {
	/**推送url **iOS不支持***/ 
	url:string,

	/**在网络环境较差的情况下显示的图片（android仅支持fs://及系统本地路径）**iOS不支持***/ 
	networkPoorImage:string,

	/**暂停推流时（即调用pauseScreenCapture）客户端显示的画面（android仅支持fs://及系统本地路径）**iOS不支持***/ 
	pausePushImage:string,

	/**返回值*/ 
	ret:JSON,

}

interface alivcLivePusher_startCamera_Params {
	/**（可选项）预览窗口的位置及大小(建议窗口比例1:1，这样在转屏时无需重新startCamera)*/ 
	rect?:JSON,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**返回值*/ 
	ret:JSON,

}

interface alivcLivePusher_startCameraMix_Params {
	/**（可选项）混流窗口的位置及大小(建议窗口比例1:1，这样在转屏时无需重新startCamera)*/ 
	rect?:JSON,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**返回值*/ 
	ret:JSON,

}

interface mogoAdsBaidu {
}
interface alibcthb {
	/** 初始化百川SDK*/ 
	initSDK(callback?: (ret:JSON) => void):void

	/** 登录淘宝或者天猫，如果手机装了淘宝或天猫APP则会打开淘宝或天猫，如果没装会打开H5登录页面*/ 
	login(callback?: (ret:JSON) => void):void

	/** 退出登录*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 获取登录用户的信息，*/ 
	getUserInfo():void

	/**
	 * `设置是否使用同步淘客打点`
	 * ========params==========
	 *
	 * `status` :any : true:使用淘客同步打点
	 */
	setSyncForTaoke(params:alibcthb_setSyncForTaoke_Params):void

	/**
	 * `设置全局淘客参数，方便开发者用同一个淘客参数，不需要在show接口重复传入`
	 * ========params==========
	 *
	 * `pid` :string : pid
	 *
	 * `unionId` :string : unionId, 可不传
	 *
	 * `subPid` :string : subPid 可不传
	 */
	setTaokeParams(params:alibcthb_setTaokeParams_Params):void

	/**
	 * `设置渠道信息（如果有渠道专享价，需要设置）`
	 * ========params==========
	 *
	 * `typeName` :string : 渠道类型
	 *
	 * `channelName` :string : 渠道名
	 */
	setChannel(params:alibcthb_setChannel_Params):void

	/**
	 * `设置App标识字段，和isvcode同义，可用于区分使用本SDK的具体三方App`
	 * ========params==========
	 *
	 * `isvCode` :string : isv code 字段
	 */
	setISVCode(params:alibcthb_setISVCode_Params):void

	/**
	 * `设置三方App版本，可用于标识App版本`
	 * ========params==========
	 *
	 * `isvVersion` :string : 版本号
	 */
	setISVVersion(params:alibcthb_setISVVersion_Params):void

	/**
	 * `打开指定页面`
	 * ========params==========
	 *
	 * `x` :any : 打开的webView窗口X位置
	 *
	 * `y` :any : 打开的webView窗口Y位置
	 *
	 * `w` :any : 打开的webView窗口宽度
	 *
	 * `h` :any : 打开的webView窗口高度
	 *
	 * `frameName` :string : 在指定的frameName中打开webView, 如果不传就会在当前frameName中打开
	 *
	 * `fixed` :any : webView是否跟随frameName移动, true:webView会跟随fremeName一起移动
	 *
	 * `openType` :any : 打开页面的方式
	 *
	 * `ISVCode` :string : 开发者代码，如果已经使用setISVCode设置过，则无需重复传入
	 *
	 * `mmPID` :string : 妈妈ID,如果已经使用setTaokeParams设置过，则无需重复传入
	 *
	 * `page` :any : 是否显示全部订单
	 */
	show(params:alibcthb_show_Params, callback?: (ret:JSON) => void):void

}
interface alibcthb_setSyncForTaoke_Params {
	/**true:使用淘客同步打点*/ 
	status:any,

}

interface alibcthb_setTaokeParams_Params {
	/**pid*/ 
	pid:string,

	/**unionId, 可不传*/ 
	unionId:string,

	/**subPid 可不传*/ 
	subPid:string,

}

interface alibcthb_setChannel_Params {
	/**渠道类型*/ 
	typeName:string,

	/**渠道名*/ 
	channelName:string,

}

interface alibcthb_setISVCode_Params {
	/**isv code 字段*/ 
	isvCode:string,

}

interface alibcthb_setISVVersion_Params {
	/**版本号*/ 
	isvVersion:string,

}

interface alibcthb_show_Params {
	/**打开的webView窗口X位置*/ 
	x:any,

	/**打开的webView窗口Y位置*/ 
	y:any,

	/**打开的webView窗口宽度*/ 
	w:any,

	/**打开的webView窗口高度*/ 
	h:any,

	/**在指定的frameName中打开webView, 如果不传就会在当前frameName中打开*/ 
	frameName:string,

	/**webView是否跟随frameName移动, true:webView会跟随fremeName一起移动*/ 
	fixed:any,

	/**打开页面的方式*/ 
	openType:any,

	/**开发者代码，如果已经使用setISVCode设置过，则无需重复传入*/ 
	ISVCode:string,

	/**妈妈ID,如果已经使用setTaokeParams设置过，则无需重复传入*/ 
	mmPID:string,

	/**是否显示全部订单*/ 
	page:any,

}

interface fog2 {
}
interface toutiaoAd {
	/**
	 * `进入锁屏广告。【仅v1.0.0和v1.0.1支持，等待头条官方修复SDK】`
	 * ========params==========
	 *
	 * `codeId` :string : （必填）广告位code。
	 */
	locked(params:toutiaoAd_locked_Params):void

	/**
	 * `banner广告。`
	 * ========params==========
	 *
	 * `codeId` :string : （必填）广告位code。对应头条后台中的【Banner广告】
	 *
	 * `rect` :JSON : （选填）模块的位置及尺寸。
	 *
	 * `fixedOn` :string : （选填）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （选填）模块是否随所属 window 或 frame 滚动
	 */
	bannerExp(params:toutiaoAd_bannerExp_Params):void

	/**
	 * `进入开屏广告。`
	 * ========params==========
	 *
	 * `codeId` :string : （必填）广告位code。对应头条后台中的【开屏广告】
	 */
	splash(params:toutiaoAd_splash_Params):void

	/**
	 * `进入全屏视频广告。`
	 * ========params==========
	 *
	 * `codeId` :string : （必填）广告位code。对应头条后台中的【全屏视频广告】
	 */
	fullScreenVideo(params:toutiaoAd_fullScreenVideo_Params):void

}
interface toutiaoAd_locked_Params {
	/**（必填）广告位code。*/ 
	codeId:string,

}

interface toutiaoAd_bannerExp_Params {
	/**（必填）广告位code。对应头条后台中的【Banner广告】*/ 
	codeId:string,

	/**（选填）模块的位置及尺寸。*/ 
	rect:JSON,

	/**（选填）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn:string,

	/**（选填）模块是否随所属 window 或 frame 滚动*/ 
	fixed:boolean,

}

interface toutiaoAd_splash_Params {
	/**（必填）广告位code。对应头条后台中的【开屏广告】*/ 
	codeId:string,

}

interface toutiaoAd_fullScreenVideo_Params {
	/**（必填）广告位code。对应头条后台中的【全屏视频广告】*/ 
	codeId:string,

}

interface txAnalysis {
	/**
	 * `标记一次页面访问的开始，跟trackPageEnd配对使用`
	 * ========params==========
	 *
	 * `page` :string : 页面ID，ID需要先在MTA前台配置好才能生效
	 *
	 * `appkey` :string : (可选项)申请的appKey(仅ios支持)
	 */
	trackPageBegin(params:txAnalysis_trackPageBegin_Params):void

	/**
	 * `标记一次页面访问的结束，跟trackPageBegin配对使用`
	 * ========params==========
	 *
	 * `page` :string : 页面ID，ID需要先在MTA前台配置好才能生效
	 *
	 * `appkey` :string : (可选项)申请的appKey
	 *
	 * `isRealTime` :boolean : (可选项)是否实时上报，若传入true，则忽略全局上报策略实时上报。否则按照全局策略上报（仅ios支持）
	 */
	trackPageEnd(params:txAnalysis_trackPageEnd_Params):void

	/**
	 * `上报自定义事件`
	 * ========params==========
	 *
	 * `event` :string : 事件的ID，ID需要先在MTA前台配置好才能生效
	 *
	 * `props` :JSON : (可选项)事件的参数，参数需要先在MTA前台配置好才能生效
	 *
	 * `appkey` :string : (可选项)申请的appKey（仅ios支持）
	 *
	 * `isRealTime` :boolean : (可选项)是否实时上报，若传入true，则忽略全局上报策略实时上报。否则按照全局策略上报（仅ios支持）
	 */
	trackCustom(params:txAnalysis_trackCustom_Params):void

	/**
	 * `开始统计自定义时长事件`
	 * ========params==========
	 *
	 * `event` :string : 事件的ID，ID需要先在MTA前台配置好才能生效
	 *
	 * `props` :JSON : (可选项)事件的参数，参数需要先在MTA前台配置好才能生效
	 *
	 * `appkey` :string : (可选项)申请的appKey（仅ios支持）
	 */
	trackCustomBegin(params:txAnalysis_trackCustomBegin_Params):void

	/**
	 * `结束统计自定义时长事件`
	 * ========params==========
	 *
	 * `event` :string : 事件的ID，ID需要先在MTA前台配置好才能生效
	 *
	 * `props` :JSON : (可选项)事件的参数，参数需要先在MTA前台配置好才能生效
	 *
	 * `appkey` :string : (可选项)申请的appKey（仅ios支持）
	 *
	 * `isRealTime` :boolean : (可选项)是否实时上报，若传入true，则忽略全局上报策略实时上报。否则按照全局策略上报（仅ios支持）
	 */
	trackCustomEnd(params:txAnalysis_trackCustomEnd_Params):void

	/**
	 * `直接上报自定义时长事件（仅ios支持）`
	 * ========params==========
	 *
	 * `duration` :any : 自定义事件的时长，单位秒
	 *
	 * `event` :string : 事件的ID，ID需要先在MTA前台配置好才能生效
	 *
	 * `props` :JSON : (可选项)事件的参数，参数需要先在MTA前台配置好才能生效
	 *
	 * `appkey` :string : (可选项)申请的appKey
	 *
	 * `isRealTime` :boolean : (可选项)是否实时上报，若传入true，则忽略全局上报策略实时上报。否则按照全局策略上报
	 */
	trackCustomDuration(params:txAnalysis_trackCustomDuration_Params):void

	/** 开始统计使用时长，建议在App进入前台时调用（android会话统计用于统计启动次数，由SDK本身维护，通常开发者无需额外设置或调用接口。如有需要可以调用以下接口，也会视为用户打开一次新的会话：）*/ 
	trackActiveBegin():void

	/** 结束统计使用时长，建议在App离开前台时调用(仅ios支持)*/ 
	trackActiveEnd():void

	/**
	 * `用户画像（仅ios支持）`
	 * ========params==========
	 *
	 * `qq` :string : qq 号
	 *
	 * `appkey` :string : (可选项)申请的appKey
	 *
	 * `isRealTime` :boolean : (可选项)是否实时上报，若传入true，则忽略全局上报策略实时上报。否则按照全局策略上报
	 */
	reportQQ(params:txAnalysis_reportQQ_Params):void

	/**
	 * `统计程序逻辑错误，逻辑错误只有描述，没有堆栈信息（仅ios支持）`
	 * ========params==========
	 *
	 * `error` :string : 错误描述
	 *
	 * `appkey` :string : (可选项)申请的appKey
	 *
	 * `isRealTime` :boolean : (可选项)是否实时上报，若传入true，则忽略全局上报策略实时上报。否则按照全局策略上报
	 */
	trackError(params:txAnalysis_trackError_Params):void

	/**
	 * `开始带有统计时长的自定义参数事件（仅android支持）`
	 * ========params==========
	 *
	 * `event` :string : 事件的ID
	 *
	 * `args` :string : 事件的参数
	 */
	trackCustomBeginEvent(params:txAnalysis_trackCustomBeginEvent_Params):void

	/**
	 * `结束带有统计时长的自定义参数事件（仅android支持）`
	 * ========params==========
	 *
	 * `event` :string : 事件的ID，
	 *
	 * `args` :string : 事件的参数
	 */
	trackCustomEndEvent(params:txAnalysis_trackCustomEndEvent_Params):void

	/**
	 * `开启或关闭Java异常捕获（仅android支持）`
	 * ========params==========
	 *
	 * `open` :boolean : 是否开启
	 */
	setJavaCrashHandlerStatus(params:txAnalysis_setJavaCrashHandlerStatus_Params):void

	/** 监听Crash发生（仅android支持）*/ 
	addCrashCallback():void

	/** 取消监听Crash发生（仅android支持）*/ 
	removeCrashCallback():void

	/** 设置会话时长（默认30000ms，30000ms回到应用的用户视为同一次会话）（仅android支持）*/ 
	setSessionTimoutMillis():void

	/** 消息失败重发次数（默认3）（仅android支持）*/ 
	setMaxSendRetryCount():void

	/** 设置用户自定义时间类型事件的最大并行数量（默认1024）（仅android支持）*/ 
	setMaxParallelTimmingEvents():void

	/** 设置安装渠道（仅android支持）*/ 
	setInstallChannel():void

	/** 设置appKey（仅android支持）*/ 
	setAppKey():void

	/** 设置统计功能开关（仅android支持）*/ 
	setEnableStatService():void

	/** 设置是否支持多进程（仅android支持）*/ 
	setEnableConcurrentProcess():void

	/** 智能选择发送策略功能：如果是WIFI网络，自动切换至实时发送（不会覆盖原有的发送策略），否则，保持原有的策略。 注意：由于每次发送消息都要检查网络状态，用户交互极其频繁的应用（如水果忍者）需慎重使用。（仅android支持）*/ 
	setEnableSmartReporting():void

}
interface txAnalysis_trackPageBegin_Params {
	/**页面ID，ID需要先在MTA前台配置好才能生效*/ 
	page:string,

	/**(可选项)申请的appKey(仅ios支持)*/ 
	appkey?:string,

}

interface txAnalysis_trackPageEnd_Params {
	/**页面ID，ID需要先在MTA前台配置好才能生效*/ 
	page:string,

	/**(可选项)申请的appKey*/ 
	appkey?:string,

	/**(可选项)是否实时上报，若传入true，则忽略全局上报策略实时上报。否则按照全局策略上报（仅ios支持）*/ 
	isRealTime?:boolean,

}

interface txAnalysis_trackCustom_Params {
	/**事件的ID，ID需要先在MTA前台配置好才能生效*/ 
	event:string,

	/**(可选项)事件的参数，参数需要先在MTA前台配置好才能生效*/ 
	props?:JSON,

	/**(可选项)申请的appKey（仅ios支持）*/ 
	appkey?:string,

	/**(可选项)是否实时上报，若传入true，则忽略全局上报策略实时上报。否则按照全局策略上报（仅ios支持）*/ 
	isRealTime?:boolean,

}

interface txAnalysis_trackCustomBegin_Params {
	/**事件的ID，ID需要先在MTA前台配置好才能生效*/ 
	event:string,

	/**(可选项)事件的参数，参数需要先在MTA前台配置好才能生效*/ 
	props?:JSON,

	/**(可选项)申请的appKey（仅ios支持）*/ 
	appkey?:string,

}

interface txAnalysis_trackCustomEnd_Params {
	/**事件的ID，ID需要先在MTA前台配置好才能生效*/ 
	event:string,

	/**(可选项)事件的参数，参数需要先在MTA前台配置好才能生效*/ 
	props?:JSON,

	/**(可选项)申请的appKey（仅ios支持）*/ 
	appkey?:string,

	/**(可选项)是否实时上报，若传入true，则忽略全局上报策略实时上报。否则按照全局策略上报（仅ios支持）*/ 
	isRealTime?:boolean,

}

interface txAnalysis_trackCustomDuration_Params {
	/**自定义事件的时长，单位秒*/ 
	duration:any,

	/**事件的ID，ID需要先在MTA前台配置好才能生效*/ 
	event:string,

	/**(可选项)事件的参数，参数需要先在MTA前台配置好才能生效*/ 
	props?:JSON,

	/**(可选项)申请的appKey*/ 
	appkey?:string,

	/**(可选项)是否实时上报，若传入true，则忽略全局上报策略实时上报。否则按照全局策略上报*/ 
	isRealTime?:boolean,

}

interface txAnalysis_reportQQ_Params {
	/**qq 号*/ 
	qq:string,

	/**(可选项)申请的appKey*/ 
	appkey?:string,

	/**(可选项)是否实时上报，若传入true，则忽略全局上报策略实时上报。否则按照全局策略上报*/ 
	isRealTime?:boolean,

}

interface txAnalysis_trackError_Params {
	/**错误描述*/ 
	error:string,

	/**(可选项)申请的appKey*/ 
	appkey?:string,

	/**(可选项)是否实时上报，若传入true，则忽略全局上报策略实时上报。否则按照全局策略上报*/ 
	isRealTime?:boolean,

}

interface txAnalysis_trackCustomBeginEvent_Params {
	/**事件的ID*/ 
	event:string,

	/**事件的参数*/ 
	args:string,

}

interface txAnalysis_trackCustomEndEvent_Params {
	/**事件的ID，*/ 
	event:string,

	/**事件的参数*/ 
	args:string,

}

interface txAnalysis_setJavaCrashHandlerStatus_Params {
	/**是否开启*/ 
	open:boolean,

}

interface sensorsAnalyticsAPICloudSDK {
	/**
	 * `设置当前用户的 loginId`
	 * ========params==========
	 *
	 * `loginId` :string : (必填项)用户的登录id，不能为空，且长度不能大于255
	 */
	login(params:sensorsAnalyticsAPICloudSDK_login_Params):void

	/**
	 * `设置公共属性，设置之后，之后触发的事件会带上设置的公共属性`
	 * ========params==========
	 *
	 * `properties` :any : (必填项)公共属性，属性名需要满足一般变量的命名规则
	 */
	registerSuperProperties(params:sensorsAnalyticsAPICloudSDK_registerSuperProperties_Params):void

	/**
	 * `track 事件。`
	 * ========params==========
	 *
	 * `event` :string : (必填项)事件名称，名称需要满足一般变量的命名规则，即不能以数字开头，且只包含：大小写字母、数字、下划线和$
	 *
	 * `properties` :any : (选填项)事件属性，名称需要满足一般变量的命名规则，即不能以数字开头，且只包含：大小写字母、数字、下划线和$
	 */
	track(params:sensorsAnalyticsAPICloudSDK_track_Params):void

	/**
	 * `事件计时开始，需要和 `trackTimerEnd` 成对使用。`
	 * ========params==========
	 *
	 * `event` :string : (必填项)事件名称，名称需要满足一般变量的命名规则，即不能以数字开头，且只包含：大小写字母、数字、下划线和$
	 */
	trackTimerStart(params:sensorsAnalyticsAPICloudSDK_trackTimerStart_Params):void

	/**
	 * `trackTimerEnd 计时结束，并触发事件，事件时长记录在 event_duration 字段中。计时开始和计时结束，所对应的 event 事件名必须一致。`
	 * ========params==========
	 *
	 * `event` :string : (必填项)事件名称，名称需要满足一般变量的命名规则，即不能以数字开头，且只包含：大小写字母、数字、下划线和$
	 *
	 * `properties` :any : (选填项)事件属性，名称需要满足一般变量的命名规则，即不能以数字开头，且只包含：大小写字母、数字、下划线和$
	 */
	trackTimerEnd(params:sensorsAnalyticsAPICloudSDK_trackTimerEnd_Params):void

	/** profileSet 设置用户属性。*/ 
	profileSet():void

	/** profileSetOnce 设置用户首次属性。*/ 
	profileSetOnce():void

	/** getDistinctId 获取当前用户的 distinctId ，如果用户未登录时，返回值为 匿名 ID ；登录（调用login）后，返回值为 登录 ID 。*/ 
	getDistinctId():void

}
interface sensorsAnalyticsAPICloudSDK_login_Params {
	/**(必填项)用户的登录id，不能为空，且长度不能大于255*/ 
	loginId:string,

}

interface sensorsAnalyticsAPICloudSDK_registerSuperProperties_Params {
	/**(必填项)公共属性，属性名需要满足一般变量的命名规则*/ 
	properties:any,

}

interface sensorsAnalyticsAPICloudSDK_track_Params {
	/**(必填项)事件名称，名称需要满足一般变量的命名规则，即不能以数字开头，且只包含：大小写字母、数字、下划线和$*/ 
	event:string,

	/**(选填项)事件属性，名称需要满足一般变量的命名规则，即不能以数字开头，且只包含：大小写字母、数字、下划线和$*/ 
	properties:any,

}

interface sensorsAnalyticsAPICloudSDK_trackTimerStart_Params {
	/**(必填项)事件名称，名称需要满足一般变量的命名规则，即不能以数字开头，且只包含：大小写字母、数字、下划线和$*/ 
	event:string,

}

interface sensorsAnalyticsAPICloudSDK_trackTimerEnd_Params {
	/**(必填项)事件名称，名称需要满足一般变量的命名规则，即不能以数字开头，且只包含：大小写字母、数字、下划线和$*/ 
	event:string,

	/**(选填项)事件属性，名称需要满足一般变量的命名规则，即不能以数字开头，且只包含：大小写字母、数字、下划线和$*/ 
	properties:any,

}

interface webBrowser {
}
interface mobPushPlus {
}
interface aplayer {
	/**
	 * `初始化视频播放配置`
	 * ========params==========
	 *
	 * `fullBtnPlan` :number : （可选项）全屏默认按钮方案；1:不包含下面2的按钮，2:包含清晰度，选集，下载，收藏按钮事件
	 *
	 * `isImmerse` :string : （可选项）在APP仅全屏播放有效；当为true时:顶部菜单自动加上顶部状态栏的高度，为false时:顶部菜单不加顶部状态栏高度。
	 *
	 * `FullScreenViewIsFont` :boolean : （可选项）全屏view是否显示最上层,true:是|false:否，仅ios有效（为fasle时可通过openframe自定义按钮在播放器上层；注意，未开启沉侵式的App请不要设置该参数。）
	 */
	init(params:aplayer_init_Params):void

	/**
	 * `播放本地视频、网络视频等`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `url` :string : （必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://
	 *
	 * `title` :string : （可选项）不填时标题默认显示url地址
	 *
	 * `defaultBtn` :boolean : （可选项）设置本次播放是否显示默认自带的播放控制按钮
	 *
	 * `enableFull` :boolean : （可选项）本次播放视频是否全屏播放，当为true时将直接全屏播放视频，x,y,w,h,fixedOn,fixed值不会生效。
	 *
	 * `isTopView` :boolean : （可选项）是否显示顶部标题栏
	 *
	 * `isFullBtn` :boolean : （可选项）小窗口是否显示进入全屏按钮
	 *
	 * `isBackBtn` :boolean : （可选项）小窗口是否显示返回按钮
	 *
	 * `httpCookie` :string : （可选项）Cookie信息
	 *
	 * `httpReferer` :string : （可选项）访问来源
	 *
	 * `httpCustomHeaders` :string : （可选项）自定义http头信息
	 *
	 * `httpUserAgent` :string : （可选项）自定义http UserAgent
	 *
	 * `isReplayView` :boolean : （可选项）视频播放结束后是否显示重播视图层(该视图层会覆盖在整个播放器上层，播放器的按钮不能被操作)
	 *
	 * `isShowProcessView` :boolean : （可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动默认为false】
	 *
	 * `isShowTimeLable` :boolean : （可选项）是否显示播放时间 (显示:true ; 不显示:false)
	 *
	 * `isLive` :boolean : （可选项）是否直播视频源 （直播：true；点播：false）
	 *
	 * `isOpenGesture` :boolean : （可选项）是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）
	 */
	play(params:aplayer_play_Params, callback?: (ret:JSON) => void):void

	/** 暂停播放*/ 
	pause(callback?: (ret:JSON) => void):void

	/** 暂停后开始播放*/ 
	start(callback?: (ret:JSON) => void):void

	/** 停止播放*/ 
	stop(callback?: (ret:JSON) => void):void

	/** 获取视频的时长*/ 
	getDuration(callback?: (ret:JSON) => void):void

	/** 获取已经播放的时长*/ 
	getCurrentPosition(callback?: (ret:JSON) => void):void

	/** 全屏播放*/ 
	full(callback?: (ret:JSON) => void):void

	/** 退出全屏*/ 
	unfull(callback?: (ret:JSON) => void):void

	/**
	 * `视频播放完监听事件`
	 * ========params==========
	 *
	 * `name` :string : 监听事件名称,可以设置的播放界面监听类型有：playEnd(播放结束)，qingxidu(清晰度),xuanji(选集)，download(下载),collection(收藏),pause(暂停),play(播放),backBtn(小窗口返回按钮),full(进入全屏按钮),unfull(退出全屏按钮)
	 */
	addEventListener(params:aplayer_addEventListener_Params, callback?: (ret:JSON) => void):void

	/** 获取是否全屏播放状态*/ 
	isFullScreen(callback?: (ret:JSON) => void):void

	/**
	 * `设置播放进度位置(请根据视频最大时长进行参数控制传入)`
	 * ========params==========
	 *
	 * `process` :number : （必填项）设置视频需要播放的时长
	 */
	seekTo(params:aplayer_seekTo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置播音量`
	 * ========params==========
	 *
	 * `volume` :number : （必填项）0-100
	 */
	setVolume(params:aplayer_setVolume_Params, callback?: (ret:JSON) => void):void

}
interface aplayer_init_Params {
	/**（可选项）全屏默认按钮方案；1:不包含下面2的按钮，2:包含清晰度，选集，下载，收藏按钮事件*/ 
	fullBtnPlan?:number,

	/**（可选项）在APP仅全屏播放有效；当为true时:顶部菜单自动加上顶部状态栏的高度，为false时:顶部菜单不加顶部状态栏高度。*/ 
	isImmerse?:string,

	/**（可选项）全屏view是否显示最上层,true:是|false:否，仅ios有效（为fasle时可通过openframe自定义按钮在播放器上层；注意，未开启沉侵式的App请不要设置该参数。）*/ 
	FullScreenViewIsFont?:boolean,

}

interface aplayer_play_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）视频资源地址，支持fs://、widget://(在 android 平台上不支持 widget)、rtmp://、http://*/ 
	url:string,

	/**（可选项）不填时标题默认显示url地址*/ 
	title?:string,

	/**（可选项）设置本次播放是否显示默认自带的播放控制按钮*/ 
	defaultBtn?:boolean,

	/**（可选项）本次播放视频是否全屏播放，当为true时将直接全屏播放视频，x,y,w,h,fixedOn,fixed值不会生效。*/ 
	enableFull?:boolean,

	/**（可选项）是否显示顶部标题栏*/ 
	isTopView?:boolean,

	/**（可选项）小窗口是否显示进入全屏按钮*/ 
	isFullBtn?:boolean,

	/**（可选项）小窗口是否显示返回按钮*/ 
	isBackBtn?:boolean,

	/**（可选项）Cookie信息*/ 
	httpCookie?:string,

	/**（可选项）访问来源*/ 
	httpReferer?:string,

	/**（可选项）自定义http头信息*/ 
	httpCustomHeaders?:string,

	/**（可选项）自定义http UserAgent*/ 
	httpUserAgent?:string,

	/**（可选项）视频播放结束后是否显示重播视图层(该视图层会覆盖在整个播放器上层，播放器的按钮不能被操作)*/ 
	isReplayView?:boolean,

	/**（可选项）是否显示进度条 (显示:true ; 不显示:false)【备注:直播流自动默认为false】*/ 
	isShowProcessView?:boolean,

	/**（可选项）是否显示播放时间 (显示:true ; 不显示:false)*/ 
	isShowTimeLable?:boolean,

	/**（可选项）是否直播视频源 （直播：true；点播：false）*/ 
	isLive?:boolean,

	/**（可选项）是否开启手势控制音量，亮度和进度 （开启：true；不开启：false）*/ 
	isOpenGesture?:boolean,

}

interface aplayer_addEventListener_Params {
	/**监听事件名称,可以设置的播放界面监听类型有：playEnd(播放结束)，qingxidu(清晰度),xuanji(选集)，download(下载),collection(收藏),pause(暂停),play(播放),backBtn(小窗口返回按钮),full(进入全屏按钮),unfull(退出全屏按钮)*/ 
	name:string,

}

interface aplayer_seekTo_Params {
	/**（必填项）设置视频需要播放的时长*/ 
	process:number,

}

interface aplayer_setVolume_Params {
	/**（必填项）0-100*/ 
	volume:number,

}

interface agoraVideo {
	/**
	 * `初始化引擎`
	 * ========params==========
	 *
	 * `appId` :string : 在声网注册账号创建app后获取的id
	 */
	init(params:agoraVideo_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入通话频道`
	 * ========params==========
	 *
	 * `channelKey` :string : （可选项）本参数为可选项，可不传。Agora 为应用程序开发者额外签发一个AppCertificate，开发者结合 Agora 提供的算法生成此ChannelKey，用于服务器端用户验证。一般来说使用AppID即可，对于安全有极高要求的使用者需要使用ChannelKey。
	 *
	 * `channelName` :string : 标识通话的频道名称，长度在64字节以内的字符串，以下为支持的字符集范围（共89个字     符）：a-z A-Z 0-9 空格 ! #$%& ()+, - :;<=. >? @[] ^_` {|} ~
	 *
	 * `uid` :number : (可选项) 用户ID，32位无符号整数。建议设置范围：1到(2^32-1)，并保证唯一性。如果不指定（即设为 0），SDK会自动分配一个，并在 onJoinChannelSuccess 回调方法中返
	 */
	joinChannel(params:agoraVideo_joinChannel_Params, callback?: (ret:JSON) => void):void

	/** 离开通话频道*/ 
	leaveChannel():void

	/**
	 * `更新 ChannelKey。若已启用 ChannelKey 机制，一段时间后 ChannelKey 会失效。当 errorListener 回调 109 时，重新获取 ChannelKey，需调用本接口更新 ChannelKey，否则无法和服务器建立连接。`
	 * ========params==========
	 *
	 * `channelKey` :string : 要更新的 ChannelKey
	 */
	renewChannelKey(params:agoraVideo_renewChannelKey_Params, callback?: (ret:JSON) => void):void

	/**
	 * `静音/取消静音，该方法可用于允许/禁止往网络发送本地音频流`
	 * ========params==========
	 *
	 * `muted` :boolean : （可选项）是否静音
	 */
	muteLocalAudioStream(params:agoraVideo_muteLocalAudioStream_Params, callback?: (ret:JSON) => void):void

	/**
	 * `静音所有远端用户/对所有远端用户取消静音，本方法用于允许/禁止播放远端用户的音频流。`
	 * ========params==========
	 *
	 * `muted` :boolean : （可选项）是否静音
	 */
	muteAllRemoteAudioStreams(params:agoraVideo_muteAllRemoteAudioStreams_Params, callback?: (ret:JSON) => void):void

	/**
	 * `静音指定远端用户/对指定远端用户取消静音，本方法用于允许/禁止播放远端用户的音频流。`
	 * ========params==========
	 *
	 * `uid` :number : 指定用户id
	 *
	 * `muted` :boolean : （可选项）是否静音
	 */
	muteRemoteAudioStream(params:agoraVideo_muteRemoteAudioStream_Params, callback?: (ret:JSON) => void):void

	/**
	 * `切换音频输出方式（扬声器、听筒）`
	 * ========params==========
	 *
	 * `enabled` :boolean : （可选项）是否为扬声器
	 */
	setEnableSpeakerphone(params:agoraVideo_setEnableSpeakerphone_Params, callback?: (ret:JSON) => void):void

	/** 判断当前设备是否是扬声器状态*/ 
	isSpeakerphoneEnabled():void

	/**
	 * `设定扬声器音量`
	 * ========params==========
	 *
	 * `volume` :number : 音量，最小为 0，最大为 255
	 */
	setSpeakerphoneVolume(params:agoraVideo_setSpeakerphoneVolume_Params, callback?: (ret:JSON) => void):void

	/**
	 * `在通话中进行录音，该接口需要在 joinChannel 之后调用。leaveChannel 时会自动停止录音`
	 * ========params==========
	 *
	 * `filePath` :string : 录音文件的路径（包含后缀，如：fs://agoraVideo/audio.wav），要求本地路径协议：fs://
	 */
	startAudioRecording(params:agoraVideo_startAudioRecording_Params, callback?: (ret:JSON) => void):void

	/** 停止录音*/ 
	stopAudioRecording(callback?: (ret:JSON) => void):void

	/** 获取当前的通话 ID*/ 
	getCallId(callback?: (ret:JSON) => void):void

	/**
	 * `通话结束后为本次通话评分`
	 * ========params==========
	 *
	 * `callId` :string : 通过 getCallId 函数获取的通话 ID
	 *
	 * `rating` :number : 给通话的评分，取值范围：1-10
	 *
	 * `description` :string : （可选项）评分本次通话的描述，小于 800 字节
	 */
	rate(params:agoraVideo_rate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通话结束后对本次通话质量的投诉`
	 * ========params==========
	 *
	 * `callId` :string : 通过 getCallId 函数获取的通话 ID
	 *
	 * `description` :string : （可选项）本次通话投诉的描述，小于 800 字节
	 */
	complain(params:agoraVideo_complain_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听耳机插拔事件，在加入通话前调用。若不监听，则拔掉耳机时不会自动停止播放声音。**iOS 不支持本接口，拔掉耳机即自动停止声音外放**`
	 * ========params==========
	 *
	 * `monitor` :boolean : 是否开启/关闭监听耳机插拔事件
	 */
	monitorHeadsetEvent(params:agoraVideo_monitorHeadsetEvent_Params):void

	/**
	 * `监听蓝牙耳机事件，在加入通话前调用。**iOS 不支持本接口，拔掉耳机即自动停止声音外放**`
	 * ========params==========
	 *
	 * `monitor` :boolean : 是否开启/关闭监听蓝牙耳机插拔事件
	 */
	monitorBluetoothHeadsetEvent(params:agoraVideo_monitorBluetoothHeadsetEvent_Params):void

	/**
	 * `设置插入耳机时的音频输出设备优先级，需在通话前调用，**iOS 不支持本接口**`
	 * ========params==========
	 *
	 * `enabled` :boolean : 当本参数为 true 时表示耳机优先：插入耳机时，无论当前设置为耳机还是扬声器输出，都切换到耳机输出；当本参数为 false 时表示外放优先：插入耳机时，如果当前设置为耳机输出，则切换到耳机，如果当前设置为外放输出，则保留外放输出
	 */
	setPreferHeadset(params:agoraVideo_setPreferHeadset_Params):void

	/**
	 * `启用说话者音量提示`
	 * ========params==========
	 *
	 * `interval` :number : 指定音量提示的时间间隔，建议设置大于 200 毫秒。小于等于零时表示禁用音量提示功能，大于零时表示设置的提示间隔，单位为毫秒
	 *
	 * `smooth` :number : （可选项）平滑系数
	 */
	enableAudioVolumeIndication(params:agoraVideo_enableAudioVolumeIndication_Params, callback?: (ret:JSON) => void):void

	/**
	 * `启用内置的加密功能。`
	 * ========params==========
	 *
	 * `secret` :string : 加密密码
	 */
	setEncryptionSecret(params:agoraVideo_setEncryptionSecret_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置内置的加密方案。`
	 * ========params==========
	 *
	 * `encryptionMode` :string : 加密方式
	 */
	setEncryptionMode(params:agoraVideo_setEncryptionMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `启动服务端录音功能`
	 * ========params==========
	 *
	 * `recordingKey` :string : 录音KEY
	 */
	startRecordingService(params:agoraVideo_startRecordingService_Params, callback?: (ret:JSON) => void):void

	/**
	 * `停止服务端录音功能`
	 * ========params==========
	 *
	 * `recordingKey` :string : 录音KEY
	 */
	stopRecordingService(params:agoraVideo_stopRecordingService_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置频道通话模式。 Agora 引擎需知道应用程序的使用场景(例如群聊模式或主播模式)，从而使用不同的优化手段。`
	 * ========params==========
	 *
	 * `profile` :string : 指定频道的通话模式
	 */
	setChannelProfile(params:agoraVideo_setChannelProfile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开启客户端本地混音。指定本地音频文件来和麦克风采集的音频流进行混音和替换(用音频文件替换麦克风采集的音频流)，可以通过参数选择是否让对方听到本地播放的音频和指定循环播放的次数。`
	 * ========params==========
	 *
	 * `filePath` :string : 需要混音的本地音频文件名和文件路径，支持格式：mp3，aac，m4a，3gp，wav，flac
	 *
	 * `loopback` :boolean : （可选项）是否只有本地可以听到混音或替换后的音频流
	 *
	 * `replace` :boolean : （可选项）是否将音频文件内容替换本地录音的音频流
	 *
	 * `cycle` :number : （可选项）指定音频文件循环播放的次数，为-1时表示无限循环
	 */
	startAudioMixing(params:agoraVideo_startAudioMixing_Params, callback?: (ret:JSON) => void):void

	/** 停止客户端本地混音*/ 
	stopAudioMixing():void

	/**
	 * `特有属性设置`
	 * ========params==========
	 *
	 * `options` :string : 将特有参数组装为 json 字符串设置给 Agroa 引擎
	 */
	setParameters(params:agoraVideo_setParameters_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取 Agora 引擎特有属性值`
	 * ========params==========
	 *
	 * `parameter` :string : sdk options in json format
	 *
	 * `args` :string : sdk options in json format
	 */
	getParameters(params:agoraVideo_getParameters_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听警告信息`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动警告监听
	 */
	warningListener(params:agoraVideo_warningListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听错误信息`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动错误监听
	 */
	errorListener(params:agoraVideo_errorListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `声音质量监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动声音质量监听
	 */
	audioQualityListener(params:agoraVideo_audioQualityListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `声音音量监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动声音音量监听
	 */
	audioVolumeListener(params:agoraVideo_audioVolumeListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户加入频道监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动用户加入频道监听
	 */
	userJoinedListener(params:agoraVideo_userJoinedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `再次进入频道监听。`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用再次进入频道监听
	 */
	rejoinChannelListener(params:agoraVideo_rejoinChannelListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户离开频道监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用户离开频道监听
	 */
	userOfflineListener(params:agoraVideo_userOfflineListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户静音监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用户静音监听
	 */
	userMuteAudioListener(params:agoraVideo_userMuteAudioListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `统计数据监听，每两秒触发一次`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启统计数据监听
	 */
	rtcStatsListener(params:agoraVideo_rtcStatsListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `报告网络质量监听。不在通话中时，不定期触发，向应用程序上报当前网络连接质量`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用报告网络质量监听
	 */
	lastmileQualityListener(params:agoraVideo_lastmileQualityListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `网络连接中断监听。**iOS 平台不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用网络连接中断监听
	 */
	connectionInterruptedListener(params:agoraVideo_connectionInterruptedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `网络连接丢失监听。客户端和服务器失去了网络连接，并且尝试自动重连一段时间（默认 10 秒）`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用网络连接丢失监听
	 */
	connectionLostListener(params:agoraVideo_connectionLostListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `网络质量监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用报告网络质量监听
	 */
	networkQualityListener(params:agoraVideo_networkQualityListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置 agora 引擎的输出 log 文件。`
	 * ========params==========
	 *
	 * `filePath` :string : 日志文件的全路径（包含后缀，如：fs://agoraVideo/log.txt），要求本地路径协议：fs://
	 */
	setLogFile(params:agoraVideo_setLogFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `初始化视频（本地、远程）区域`
	 * ========params==========
	 *
	 * `uid` :number : 用户id，当为 0 时表示打开本地视频播放区域
	 *
	 * `rect` :JSON : （可选项）视频区域的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	initVideoRect(params:agoraVideo_initVideoRect_Params):void

	/** 该方法用于开启视频模式。可以在加入频道前或者通话中调用，在加入频道前调用，则自动开*/ 
	enableVideo():void

	/** 该方法用于关闭视频，开启纯音频模式。可以在加入频道前或者通话中调用，在加入频道前调*/ 
	disableVideo():void

	/** 该方法用于启动本地视频预览。在开启预览前，必须先调用 setupLocalVideo 设置预览窗口及*/ 
	startPreview():void

	/** 该方法用于停止本地视频预览*/ 
	stopPreview():void

	/**
	 * `该方法设置视频编码属性(Profile)。每个属性对应一套视频参数，如分辨率、帧率、码率等。`
	 * ========params==========
	 *
	 * `profile` :string : 视频属性
	 *
	 * `swapWidthAndHeight` :number : 是否交换宽和高
	 */
	setVideoProfile(params:agoraVideo_setVideoProfile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `该方法设置本地视频显示信息,通常在初始化后调用该方法进行本地视频设置，然后再加入频道。`
	 * ========params==========
	 *
	 * `renderMode` :string : 视频显示模式
	 *
	 * `uid` :number : 本地用户id，与 joinchannel 方法中的 uid 保持一致
	 */
	setupLocalVideo(params:agoraVideo_setupLocalVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `该方法绑定远程用户和显示视图，即设定 uid 指定的用户用哪个视图显示。调用该接口时需要`
	 * ========params==========
	 *
	 * `renderMode` :string : 视频显示模式
	 *
	 * `uid` :number : 远端用户id
	 */
	setupRemoteVideo(params:agoraVideo_setupRemoteVideo_Params, callback?: (ret:JSON) => void):void

	/** 该方法用于在前置/后置摄像头间切换*/ 
	switchCamera(callback?: (ret:JSON) => void):void

	/**
	 * `禁用/启用本地视频功能。该方法用于只看不发的视频场景。该方法不需要本地有摄像头`
	 * ========params==========
	 *
	 * `enabled` :boolean : 是否启用本地视频
	 */
	enableLocalVideo(params:agoraVideo_enableLocalVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停/恢复发送本地视频流。该方法用于允许/禁止往网络发送本地视频流`
	 * ========params==========
	 *
	 * `muted` :boolean : 是否禁止发送本地视频流
	 */
	muteLocalVideoStream(params:agoraVideo_muteLocalVideoStream_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停/恢复所有人视频流。本方法用于允许/禁止播放所有人的视频流`
	 * ========params==========
	 *
	 * `muted` :boolean : 是否停止播放接收到的所有视频流
	 */
	muteAllRemoteVideoStreams(params:agoraVideo_muteAllRemoteVideoStreams_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停/恢复指定远端视频流。本方法用于允许/禁止播放指定远端视频流。`
	 * ========params==========
	 *
	 * `uid` :number : 用户id
	 *
	 * `muted` :boolean : 是否停止播放接收到的视频流
	 */
	muteRemoteVideoStream(params:agoraVideo_muteRemoteVideoStream_Params, callback?: (ret:JSON) => void):void

	/**
	 * `提示第一帧本地视频画面已经显示在屏幕上`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用第一帧本地视频画面已经显示在屏幕上的回调监听
	 */
	firstLocalVideoFrameListener(params:agoraVideo_firstLocalVideoFrameListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `第一帧远程视频显示在视图回调监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用第一帧远程视频显示在视图回调监听
	 */
	firstRemoteVideoFrameListener(params:agoraVideo_firstRemoteVideoFrameListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `远端视频接收解码回调，收到第一帧远程视频流并解码成功时，触发此调用`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用远端视频接收解码回调
	 */
	firstRemoteVideoDecodedListener(params:agoraVideo_firstRemoteVideoDecodedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `其他用户停止/重启视频回调，**iOS 暂不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用其他用户停止/重启视频回调
	 */
	userMuteVideoListener(params:agoraVideo_userMuteVideoListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `其他用户启用/关闭视频回调，**iOS 暂不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用其他用户启用/关闭视频回调
	 */
	userEnableVideoListener(params:agoraVideo_userEnableVideoListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `本地视频统计回调，报告更新本地视频统计信息，该回调函数每两秒触发一次`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用本地视频统计回调
	 */
	localVideoStatListener(params:agoraVideo_localVideoStatListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `远端视频统计回调，报告更新远端视频统计信息，该回调函数每两秒触发一次。`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用远端视频统计回调
	 */
	remoteVideoStatListener(params:agoraVideo_remoteVideoStatListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `摄像头启用回调，提示已成功打开摄像头，可以开始捕获视频。如果摄像头打开失败，可在 onError()中处理相应错误。 **iOS 平台暂不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用摄像头启用回调
	 */
	cameraReadyListener(params:agoraVideo_cameraReadyListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `视频功能停止回调。 **iOS 平台暂不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用视频功能停止回调
	 */
	videoStoppedListener(params:agoraVideo_videoStoppedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `接收到对方数据流消息的回调`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用接收到对方数据流消息的回调
	 */
	streamMessageListener(params:agoraVideo_streamMessageListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `接收对方数据流消息错误的回调`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用接收对方数据流消息错误的回调
	 */
	streamMessageErrorListener(params:agoraVideo_streamMessageErrorListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `伴奏已播放结束的回调，**iOS 平台暂不支持本接口**`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用伴奏已播放结束的回调
	 */
	audioMixingFinishedListener(params:agoraVideo_audioMixingFinishedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `在加入频道前， 用户需要通过本方法设置观众或主播模式（默认）。`
	 * ========params==========
	 *
	 * `role` :string : 直播的用户角色
	 *
	 * `permissionKey` :string : （可选项）permission key of role change
	 */
	setClientRole(params:agoraVideo_setClientRole_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭视频预览区域`
	 * ========params==========
	 *
	 * `uid` :number : 指定用户id
	 */
	closePreview(params:agoraVideo_closePreview_Params):void

	/**
	 * `重设视频预览区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频区域的位置及尺寸
	 *
	 * `animation` :boolean : 重设过程中是否带0.3秒的动画
	 *
	 * `uid` :number : 指定用户id
	 */
	resetVideoRect(params:agoraVideo_resetVideoRect_Params):void

	/**
	 * `设置远程视频流质量`
	 * ========params==========
	 *
	 * `uid` :number : 指定用户id
	 *
	 * `type` :string : 视频质量
	 */
	setRemoteVideoStream(params:agoraVideo_setRemoteVideoStream_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开与Web SDK的互通`
	 * ========params==========
	 *
	 * `enabled` :boolean : 是否已打开与Agora Web SDK的互通:
	 */
	enableWebSdkInteroperability(params:agoraVideo_enableWebSdkInteroperability_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置音频参数和应用场景`
	 * ========params==========
	 *
	 * `profile` :string : 音频参数
	 *
	 * `scenario` :string : 应用场景
	 */
	setAudioProfile(params:agoraVideo_setAudioProfile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `提供基础变声功能`
	 * ========params==========
	 *
	 * `pitch` :number : 频率
	 */
	setLocalVoicePitch(params:agoraVideo_setLocalVoicePitch_Params, callback?: (ret:JSON) => void):void

	/**
	 * `提供调节耳返音量功能`
	 * ========params==========
	 *
	 * `volume` :number : 音量
	 */
	setInEarMonitoringVolume(params:agoraVideo_setInEarMonitoringVolume_Params, callback?: (ret:JSON) => void):void

}
interface agoraVideo_init_Params {
	/**在声网注册账号创建app后获取的id*/ 
	appId:string,

}

interface agoraVideo_joinChannel_Params {
	/**（可选项）本参数为可选项，可不传。Agora 为应用程序开发者额外签发一个AppCertificate，开发者结合 Agora 提供的算法生成此ChannelKey，用于服务器端用户验证。一般来说使用AppID即可，对于安全有极高要求的使用者需要使用ChannelKey。*/ 
	channelKey?:string,

	/**标识通话的频道名称，长度在64字节以内的字符串，以下为支持的字符集范围（共89个字     符）：a-z A-Z 0-9 空格 ! #$%& ()+, - :;<=. >? @[] ^_` {|} ~*/ 
	channelName:string,

	/**(可选项) 用户ID，32位无符号整数。建议设置范围：1到(2^32-1)，并保证唯一性。如果不指定（即设为 0），SDK会自动分配一个，并在 onJoinChannelSuccess 回调方法中返*/ 
	uid?:number,

}

interface agoraVideo_renewChannelKey_Params {
	/**要更新的 ChannelKey*/ 
	channelKey:string,

}

interface agoraVideo_muteLocalAudioStream_Params {
	/**（可选项）是否静音*/ 
	muted?:boolean,

}

interface agoraVideo_muteAllRemoteAudioStreams_Params {
	/**（可选项）是否静音*/ 
	muted?:boolean,

}

interface agoraVideo_muteRemoteAudioStream_Params {
	/**指定用户id*/ 
	uid:number,

	/**（可选项）是否静音*/ 
	muted?:boolean,

}

interface agoraVideo_setEnableSpeakerphone_Params {
	/**（可选项）是否为扬声器*/ 
	enabled?:boolean,

}

interface agoraVideo_setSpeakerphoneVolume_Params {
	/**音量，最小为 0，最大为 255*/ 
	volume:number,

}

interface agoraVideo_startAudioRecording_Params {
	/**录音文件的路径（包含后缀，如：fs://agoraVideo/audio.wav），要求本地路径协议：fs://*/ 
	filePath:string,

}

interface agoraVideo_rate_Params {
	/**通过 getCallId 函数获取的通话 ID*/ 
	callId:string,

	/**给通话的评分，取值范围：1-10*/ 
	rating:number,

	/**（可选项）评分本次通话的描述，小于 800 字节*/ 
	description?:string,

}

interface agoraVideo_complain_Params {
	/**通过 getCallId 函数获取的通话 ID*/ 
	callId:string,

	/**（可选项）本次通话投诉的描述，小于 800 字节*/ 
	description?:string,

}

interface agoraVideo_monitorHeadsetEvent_Params {
	/**是否开启/关闭监听耳机插拔事件*/ 
	monitor:boolean,

}

interface agoraVideo_monitorBluetoothHeadsetEvent_Params {
	/**是否开启/关闭监听蓝牙耳机插拔事件*/ 
	monitor:boolean,

}

interface agoraVideo_setPreferHeadset_Params {
	/**当本参数为 true 时表示耳机优先：插入耳机时，无论当前设置为耳机还是扬声器输出，都切换到耳机输出；当本参数为 false 时表示外放优先：插入耳机时，如果当前设置为耳机输出，则切换到耳机，如果当前设置为外放输出，则保留外放输出*/ 
	enabled:boolean,

}

interface agoraVideo_enableAudioVolumeIndication_Params {
	/**指定音量提示的时间间隔，建议设置大于 200 毫秒。小于等于零时表示禁用音量提示功能，大于零时表示设置的提示间隔，单位为毫秒*/ 
	interval:number,

	/**（可选项）平滑系数*/ 
	smooth?:number,

}

interface agoraVideo_setEncryptionSecret_Params {
	/**加密密码*/ 
	secret:string,

}

interface agoraVideo_setEncryptionMode_Params {
	/**加密方式*/ 
	encryptionMode:string,

}

interface agoraVideo_startRecordingService_Params {
	/**录音KEY*/ 
	recordingKey:string,

}

interface agoraVideo_stopRecordingService_Params {
	/**录音KEY*/ 
	recordingKey:string,

}

interface agoraVideo_setChannelProfile_Params {
	/**指定频道的通话模式*/ 
	profile:string,

}

interface agoraVideo_startAudioMixing_Params {
	/**需要混音的本地音频文件名和文件路径，支持格式：mp3，aac，m4a，3gp，wav，flac*/ 
	filePath:string,

	/**（可选项）是否只有本地可以听到混音或替换后的音频流*/ 
	loopback?:boolean,

	/**（可选项）是否将音频文件内容替换本地录音的音频流*/ 
	replace?:boolean,

	/**（可选项）指定音频文件循环播放的次数，为-1时表示无限循环*/ 
	cycle?:number,

}

interface agoraVideo_setParameters_Params {
	/**将特有参数组装为 json 字符串设置给 Agroa 引擎*/ 
	options:string,

}

interface agoraVideo_getParameters_Params {
	/**sdk options in json format*/ 
	parameter:string,

	/**sdk options in json format*/ 
	args:string,

}

interface agoraVideo_warningListener_Params {
	/**（可选项）是否启动警告监听*/ 
	enable?:boolean,

}

interface agoraVideo_errorListener_Params {
	/**（可选项）是否启动错误监听*/ 
	enable?:boolean,

}

interface agoraVideo_audioQualityListener_Params {
	/**（可选项）是否启动声音质量监听*/ 
	enable?:boolean,

}

interface agoraVideo_audioVolumeListener_Params {
	/**（可选项）是否启动声音音量监听*/ 
	enable?:boolean,

}

interface agoraVideo_userJoinedListener_Params {
	/**（可选项）是否启动用户加入频道监听*/ 
	enable?:boolean,

}

interface agoraVideo_rejoinChannelListener_Params {
	/**（可选项）是否启用再次进入频道监听*/ 
	enable?:boolean,

}

interface agoraVideo_userOfflineListener_Params {
	/**（可选项）是否启用户离开频道监听*/ 
	enable?:boolean,

}

interface agoraVideo_userMuteAudioListener_Params {
	/**（可选项）是否启用户静音监听*/ 
	enable?:boolean,

}

interface agoraVideo_rtcStatsListener_Params {
	/**（可选项）是否启统计数据监听*/ 
	enable?:boolean,

}

interface agoraVideo_lastmileQualityListener_Params {
	/**（可选项）是否启用报告网络质量监听*/ 
	enable?:boolean,

}

interface agoraVideo_connectionInterruptedListener_Params {
	/**（可选项）是否启用网络连接中断监听*/ 
	enable?:boolean,

}

interface agoraVideo_connectionLostListener_Params {
	/**（可选项）是否启用网络连接丢失监听*/ 
	enable?:boolean,

}

interface agoraVideo_networkQualityListener_Params {
	/**（可选项）是否启用报告网络质量监听*/ 
	enable?:boolean,

}

interface agoraVideo_setLogFile_Params {
	/**日志文件的全路径（包含后缀，如：fs://agoraVideo/log.txt），要求本地路径协议：fs://*/ 
	filePath:string,

}

interface agoraVideo_initVideoRect_Params {
	/**用户id，当为 0 时表示打开本地视频播放区域*/ 
	uid:number,

	/**（可选项）视频区域的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface agoraVideo_setVideoProfile_Params {
	/**视频属性*/ 
	profile:string,

	/**是否交换宽和高*/ 
	swapWidthAndHeight:number,

}

interface agoraVideo_setupLocalVideo_Params {
	/**视频显示模式*/ 
	renderMode:string,

	/**本地用户id，与 joinchannel 方法中的 uid 保持一致*/ 
	uid:number,

}

interface agoraVideo_setupRemoteVideo_Params {
	/**视频显示模式*/ 
	renderMode:string,

	/**远端用户id*/ 
	uid:number,

}

interface agoraVideo_enableLocalVideo_Params {
	/**是否启用本地视频*/ 
	enabled:boolean,

}

interface agoraVideo_muteLocalVideoStream_Params {
	/**是否禁止发送本地视频流*/ 
	muted:boolean,

}

interface agoraVideo_muteAllRemoteVideoStreams_Params {
	/**是否停止播放接收到的所有视频流*/ 
	muted:boolean,

}

interface agoraVideo_muteRemoteVideoStream_Params {
	/**用户id*/ 
	uid:number,

	/**是否停止播放接收到的视频流*/ 
	muted:boolean,

}

interface agoraVideo_firstLocalVideoFrameListener_Params {
	/**（可选项）是否启用第一帧本地视频画面已经显示在屏幕上的回调监听*/ 
	enable?:boolean,

}

interface agoraVideo_firstRemoteVideoFrameListener_Params {
	/**（可选项）是否启用第一帧远程视频显示在视图回调监听*/ 
	enable?:boolean,

}

interface agoraVideo_firstRemoteVideoDecodedListener_Params {
	/**（可选项）是否启用远端视频接收解码回调*/ 
	enable?:boolean,

}

interface agoraVideo_userMuteVideoListener_Params {
	/**（可选项）是否启用其他用户停止/重启视频回调*/ 
	enable?:boolean,

}

interface agoraVideo_userEnableVideoListener_Params {
	/**（可选项）是否启用其他用户启用/关闭视频回调*/ 
	enable?:boolean,

}

interface agoraVideo_localVideoStatListener_Params {
	/**（可选项）是否启用本地视频统计回调*/ 
	enable?:boolean,

}

interface agoraVideo_remoteVideoStatListener_Params {
	/**（可选项）是否启用远端视频统计回调*/ 
	enable?:boolean,

}

interface agoraVideo_cameraReadyListener_Params {
	/**（可选项）是否启用摄像头启用回调*/ 
	enable?:boolean,

}

interface agoraVideo_videoStoppedListener_Params {
	/**（可选项）是否启用视频功能停止回调*/ 
	enable?:boolean,

}

interface agoraVideo_streamMessageListener_Params {
	/**（可选项）是否启用接收到对方数据流消息的回调*/ 
	enable?:boolean,

}

interface agoraVideo_streamMessageErrorListener_Params {
	/**（可选项）是否启用接收对方数据流消息错误的回调*/ 
	enable?:boolean,

}

interface agoraVideo_audioMixingFinishedListener_Params {
	/**（可选项）是否启用伴奏已播放结束的回调*/ 
	enable?:boolean,

}

interface agoraVideo_setClientRole_Params {
	/**直播的用户角色*/ 
	role:string,

	/**（可选项）permission key of role change*/ 
	permissionKey?:string,

}

interface agoraVideo_closePreview_Params {
	/**指定用户id*/ 
	uid:number,

}

interface agoraVideo_resetVideoRect_Params {
	/**（可选项）视频区域的位置及尺寸*/ 
	rect?:JSON,

	/**重设过程中是否带0.3秒的动画*/ 
	animation:boolean,

	/**指定用户id*/ 
	uid:number,

}

interface agoraVideo_setRemoteVideoStream_Params {
	/**指定用户id*/ 
	uid:number,

	/**视频质量*/ 
	type:string,

}

interface agoraVideo_enableWebSdkInteroperability_Params {
	/**是否已打开与Agora Web SDK的互通:*/ 
	enabled:boolean,

}

interface agoraVideo_setAudioProfile_Params {
	/**音频参数*/ 
	profile:string,

	/**应用场景*/ 
	scenario:string,

}

interface agoraVideo_setLocalVoicePitch_Params {
	/**频率*/ 
	pitch:number,

}

interface agoraVideo_setInEarMonitoringVolume_Params {
	/**音量*/ 
	volume:number,

}

interface sskCapture {
}
interface baiduOCRRecognizer {
	/**
	 * `初始化sdk,先调用此接口进行授权`
	 * ========params==========
	 *
	 * `appKey` :string : 应用的appkey
	 *
	 * `appSecret` :boolean : 应用的appSecret
	 */
	init(params:baiduOCRRecognizer_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通用文字识别`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 *
	 * `DetectDirection` :boolean : 默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:true：检测朝向； false：不检测朝向。
	 *
	 * `languageType` :string : 识别语言类型，默认为CHN_ENG。可选值包括： CHN_ENG：中英文混合； ENG：英文； POR：葡萄牙语；FRE：法语；GER：德语； ITA：意大利语；SPA：西班牙语；RUS：俄语；JAP：日语
	 *
	 * `detectLanguage` :boolean : 是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）
	 */
	recognizeGeneralbase(params:baiduOCRRecognizer_recognizeGeneralbase_Params, callback?: (ret:JSON) => void):void

	/** 通用文字识别(高精度版)*/ 
	recognizeAccurateBasic():void

	/**
	 * `通用文字识别(含位置信息)`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 *
	 * `DetectDirection` :boolean : 是否返回文字外接多边形顶点位置，不支持单字位置。默认为false
	 */
	recognizeGeneral(params:baiduOCRRecognizer_recognizeGeneral_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通用文字识别(含位置信息高精度版)`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 *
	 * `DetectDirection` :boolean : 是否返回文字外接多边形顶点位置，不支持单字位置。默认为false
	 */
	recognizeAccurate(params:baiduOCRRecognizer_recognizeAccurate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通用文字识别(通用文字识别含生僻字版)`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 *
	 * `DetectDirection` :boolean : 默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:true：检测朝向； false：不检测朝向。
	 */
	recognizeGeneralEnhanced(params:baiduOCRRecognizer_recognizeGeneralEnhanced_Params, callback?: (ret:JSON) => void):void

	/**
	 * `网络图片文字识别`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 *
	 * `DetectDirection` :boolean : 默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:true：检测朝向； false：不检测朝向。
	 *
	 * `detectLanguage` :boolean : 是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）
	 */
	recognizeWebimage(params:baiduOCRRecognizer_recognizeWebimage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `银行卡识别`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 */
	recognizeBankCard(params:baiduOCRRecognizer_recognizeBankCard_Params, callback?: (ret:JSON) => void):void

	/**
	 * `身份证识别`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 *
	 * `DetectDirection` :boolean : 默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:true：检测朝向； false：不检测朝向。
	 *
	 * `accuracy` :string : 精准度  取值 auto、normal、high 精度越高，速度越慢。
	 *
	 * `isFront` :boolean : true：身份证正面，false：身份证背面
	 */
	recognizeIDCard(params:baiduOCRRecognizer_recognizeIDCard_Params, callback?: (ret:JSON) => void):void

	/**
	 * `行驶证识别`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 *
	 * `DetectDirection` :boolean : 默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:true：检测朝向； false：不检测朝向。
	 */
	recognizeVehicleLicense(params:baiduOCRRecognizer_recognizeVehicleLicense_Params, callback?: (ret:JSON) => void):void

	/**
	 * `驾驶证识别`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 *
	 * `DetectDirection` :boolean : 默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:true：检测朝向； false：不检测朝向。
	 */
	recognizeDrivingLicense(params:baiduOCRRecognizer_recognizeDrivingLicense_Params, callback?: (ret:JSON) => void):void

	/**
	 * `车牌识别`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 */
	recognizeLicensePlate(params:baiduOCRRecognizer_recognizeLicensePlate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `营业执照识别`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 */
	recognizeBusinessLicense(params:baiduOCRRecognizer_recognizeBusinessLicense_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通用票据识别`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 */
	recognizeReceipt(params:baiduOCRRecognizer_recognizeReceipt_Params, callback?: (ret:JSON) => void):void

	/**
	 * `增值税票据识别`
	 * ========params==========
	 *
	 * `path` :string : 图片路径，支持fs://、widget://等文件路径协议或绝对路径。
	 *
	 * `accuracy` :string : normal对应普通精度模型，识别速度较快，high对应高精度识别模型，
	 */
	recognizeVatInvoice(params:baiduOCRRecognizer_recognizeVatInvoice_Params, callback?: (ret:JSON) => void):void

}
interface baiduOCRRecognizer_init_Params {
	/**应用的appkey*/ 
	appKey:string,

	/**应用的appSecret*/ 
	appSecret:boolean,

}

interface baiduOCRRecognizer_recognizeGeneralbase_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

	/**默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:true：检测朝向； false：不检测朝向。*/ 
	DetectDirection?:boolean,

	/**识别语言类型，默认为CHN_ENG。可选值包括： CHN_ENG：中英文混合； ENG：英文； POR：葡萄牙语；FRE：法语；GER：德语； ITA：意大利语；SPA：西班牙语；RUS：俄语；JAP：日语*/ 
	languageType?:string,

	/**是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）*/ 
	detectLanguage:boolean,

}

interface baiduOCRRecognizer_recognizeGeneral_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

	/**是否返回文字外接多边形顶点位置，不支持单字位置。默认为false*/ 
	DetectDirection:boolean,

}

interface baiduOCRRecognizer_recognizeAccurate_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

	/**是否返回文字外接多边形顶点位置，不支持单字位置。默认为false*/ 
	DetectDirection:boolean,

}

interface baiduOCRRecognizer_recognizeGeneralEnhanced_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

	/**默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:true：检测朝向； false：不检测朝向。*/ 
	DetectDirection?:boolean,

}

interface baiduOCRRecognizer_recognizeWebimage_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

	/**默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:true：检测朝向； false：不检测朝向。*/ 
	DetectDirection?:boolean,

	/**是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）*/ 
	detectLanguage:boolean,

}

interface baiduOCRRecognizer_recognizeBankCard_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

}

interface baiduOCRRecognizer_recognizeIDCard_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

	/**默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:true：检测朝向； false：不检测朝向。*/ 
	DetectDirection?:boolean,

	/**精准度  取值 auto、normal、high 精度越高，速度越慢。*/ 
	accuracy:string,

	/**true：身份证正面，false：身份证背面*/ 
	isFront:boolean,

}

interface baiduOCRRecognizer_recognizeVehicleLicense_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

	/**默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:true：检测朝向； false：不检测朝向。*/ 
	DetectDirection?:boolean,

}

interface baiduOCRRecognizer_recognizeDrivingLicense_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

	/**默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:true：检测朝向； false：不检测朝向。*/ 
	DetectDirection?:boolean,

}

interface baiduOCRRecognizer_recognizeLicensePlate_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

}

interface baiduOCRRecognizer_recognizeBusinessLicense_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

}

interface baiduOCRRecognizer_recognizeReceipt_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

}

interface baiduOCRRecognizer_recognizeVatInvoice_Params {
	/**图片路径，支持fs://、widget://等文件路径协议或绝对路径。*/ 
	path:string,

	/**normal对应普通精度模型，识别速度较快，high对应高精度识别模型，*/ 
	accuracy:string,

}

interface zyPangolinAd {
}
interface bdAR {
	/**
	 * `初始化AR`
	 * ========params==========
	 *
	 * `appID` :string : 在[百度AR](https://ar.baidu.com/)平台前台网站申请创建应用以获取的appID
	 *
	 * `apiKey` :string : 在[百度AR](https://ar.baidu.com/)平台前台网站申请创建应用以获取的apiKey
	 *
	 * `secretKey` :string : 在[百度AR](https://ar.baidu.com/)平台前台网站申请创建应用以获取的secretKey
	 */
	initAR(params:bdAR_initAR_Params):void

	/** 添加AR监听（iOS必须在openAR接口调用以后调用才会生效）*/ 
	addARListener():void

	/** 打开AR页面*/ 
	openAR():void

	/** 清除AR（仅iOS支持）*/ 
	cleanARKitModule():void

	/**
	 * `下载AR资源包（iOS必须在openAR接口调用以后调用才会生效）`
	 * ========params==========
	 *
	 * `arKey` :string : arkey
	 */
	downloadARCase(params:bdAR_downloadARCase_Params, callback?: (ret:JSON) => void):void

	/** 取消下载AR资源包*/ 
	cancelDownLoadArCase():void

	/**
	 * `预下载AR（仅iOS支持）`
	 * ========params==========
	 *
	 * `arKey` :string : arkey
	 */
	downloadAR(params:bdAR_downloadAR_Params):void

	/** 下载AR资源包监听（仅iOS支持）*/ 
	addDownloadARListener():void

	/** 取消所有预下载（仅iOS支持）*/ 
	cancelAllTask():void

	/**
	 * `从网络加载AR（仅iOS支持，android在openAR中设置，iOS必须在openAR接口调用以后调用才会生效）`
	 * ========params==========
	 *
	 * `arKey` :string : arkey
	 */
	loadAR(params:bdAR_loadAR_Params, callback?: (ret:JSON) => void):void

	/** 启动AR（仅iOS支持）*/ 
	startAR():void

	/** 暂停AR*/ 
	pauseAR():void

	/** 恢复AR*/ 
	resumeAR():void

	/** 停止AR，停止AR后会关闭AR页面，调用此方法后，需要开发者调用API对象的bringFrameToFront方法将加载在AR页面上的view调整 frame 到前面（仅iOS支持）*/ 
	stopAR():void

	/** 销毁AR（仅iOS支持）*/ 
	destroyCase():void

	/**
	 * `从本地加载AR（仅iOS支持，android在openAR中设置，iOS必须在openAR接口调用以后调用才会生效，必须设置addARListener接口后才能调用此接口，不然会照成崩溃）`
	 * ========params==========
	 *
	 * `arType` :string : case对应的artype
	 *
	 * `path` :string : case资源包路径,下载并解压完后的路径：比如 ../bar_10070173/ar/...，传递的参数filePath为../bar_10070173
	 */
	loadLocalAR(params:bdAR_loadLocalAR_Params, callback?: (ret:JSON) => void):void

	/**
	 * `初始化识图组件（iOS必须在加载AR完成以后调用才会生效）`
	 * ========params==========
	 *
	 * `type` :number : （可选项）识图类型（仅iOS支持）
	 */
	initSameSearch(params:bdAR_initSameSearch_Params, callback?: (ret:JSON) => void):void

	/** 加载识图组件（仅iOS支持，android通过loadLocalAR或loadAR接口load）*/ 
	loadSameSearch():void

	/** 开始识图（仅iOS支持）*/ 
	startImageSearch():void

	/** 停止识图（仅iOS支持）*/ 
	stopSameSearch():void

	/** 添加识图监听（仅iOS支持，android在addARListener接口回调）*/ 
	addSameSearchListener():void

	/** 销毁当前已经加载的case，重新调起识图（仅iOS支持）*/ 
	destroyCaseForSameSearch():void

	/**
	 * `设置是否是前置摄像头（iOS必须在openAR接口调用以后调用才会生效）`
	 * ========params==========
	 *
	 * `isFront` :boolean : 是否是前置摄像头
	 */
	changeToFrontCamera(params:bdAR_changeToFrontCamera_Params):void

	/** 拍照（iOS必须在加载AR完成以后调用才会生效）*/ 
	takePicture():void

	/**
	 * `开始录制`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否带音频（仅iOS支持）
	 *
	 * `path` :string : 拍照后图片保存路径，支持原生路径以及fs路径（仅android支持）
	 *
	 * `maxTime` :number : 最大录制时间，毫秒（仅android支持）
	 *
	 * `ret` :JSON : null
	 */
	startRecordingWithAudioTrack(params:bdAR_startRecordingWithAudioTrack_Params):void

	/** 停止录制*/ 
	stopRecording():void

	/** 初始化语音识别（仅iOS支持，android可使用模块[bvRecognizer](https://docs.apicloud.com/Client-API/Open-SDK/bvRecognizer)）*/ 
	initVoice():void

	/** 添加语音识别监听（仅iOS支持，android可使用模块[bvRecognizer](https://docs.apicloud.com/Client-API/Open-SDK/bvRecognizer)）*/ 
	addVoiceListener():void

	/**  启动语音识别（仅iOS支持，android可使用模块[bvRecognizer](https://docs.apicloud.com/Client-API/Open-SDK/bvRecognizer)）*/ 
	startVoice():void

	/** 结束语音识别（仅iOS支持，android可使用模块[bvRecognizer](https://docs.apicloud.com/Client-API/Open-SDK/bvRecognizer)）*/ 
	stopVoice():void

	/** 判断当前设备是否支持AR功能（仅iOS支持，android在addARListener接口返回evenType为‘uiStateChange’ state为30001 时 即当前设备硬件不支持）*/ 
	isSupportAR():void

	/** 关闭AR页面*/ 
	closeAR():void

}
interface bdAR_initAR_Params {
	/**在[百度AR](https://ar.baidu.com/)平台前台网站申请创建应用以获取的appID*/ 
	appID:string,

	/**在[百度AR](https://ar.baidu.com/)平台前台网站申请创建应用以获取的apiKey*/ 
	apiKey:string,

	/**在[百度AR](https://ar.baidu.com/)平台前台网站申请创建应用以获取的secretKey*/ 
	secretKey:string,

}

interface bdAR_downloadARCase_Params {
	/**arkey*/ 
	arKey:string,

}

interface bdAR_downloadAR_Params {
	/**arkey*/ 
	arKey:string,

}

interface bdAR_loadAR_Params {
	/**arkey*/ 
	arKey:string,

}

interface bdAR_loadLocalAR_Params {
	/**case对应的artype*/ 
	arType:string,

	/**case资源包路径,下载并解压完后的路径：比如 ../bar_10070173/ar/...，传递的参数filePath为../bar_10070173*/ 
	path:string,

}

interface bdAR_initSameSearch_Params {
	/**（可选项）识图类型（仅iOS支持）*/ 
	type?:number,

}

interface bdAR_changeToFrontCamera_Params {
	/**是否是前置摄像头*/ 
	isFront:boolean,

}

interface bdAR_startRecordingWithAudioTrack_Params {
	/**（可选项）是否带音频（仅iOS支持）*/ 
	enable?:boolean,

	/**拍照后图片保存路径，支持原生路径以及fs路径（仅android支持）*/ 
	path:string,

	/**最大录制时间，毫秒（仅android支持）*/ 
	maxTime:number,

	/**null*/ 
	ret:JSON,

}

interface fuQianLa {
}
interface ajpush {
}
interface snUIWeex {
	/**
	 * `打开weex视图`
	 * ========params==========
	 *
	 * `url` :string : 指定weex的视图文件地址，支持协议如下
	 *
	 * `pageParam` :JSON : （可选项）视图参数，可以通过 api.pageParam 获取
	 *
	 * `rect` :JSON : （可选项）设置页面的位置和大小。如果要固定宽高则使用x、y、w、h等参数；如果要自适应状态栏高度变化、横竖屏切换等，则需要使用margin相关参数，不能使用w、h固定宽高。推荐使用margin相关参数来布局。
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:snUIWeex_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭weex视图`
	 * ========params==========
	 *
	 * `id` :number : 需要关闭的weex视图id
	 */
	close(params:snUIWeex_close_Params):void

	/**
	 * `显示weex视图`
	 * ========params==========
	 *
	 * `id` :number : 需要显示的weex视图id
	 */
	show(params:snUIWeex_show_Params):void

	/**
	 * `隐藏weex视图`
	 * ========params==========
	 *
	 * `id` :number : 需要隐藏的weex视图id
	 */
	hide(params:snUIWeex_hide_Params):void

	/** 打开weex页面*/ 
	openWeex(callback?: (ret:JSON) => void):void

}
interface snUIWeex_open_Params {
	/**指定weex的视图文件地址，支持协议如下*/ 
	url:string,

	/**（可选项）视图参数，可以通过 api.pageParam 获取*/ 
	pageParam?:JSON,

	/**（可选项）设置页面的位置和大小。如果要固定宽高则使用x、y、w、h等参数；如果要自适应状态栏高度变化、横竖屏切换等，则需要使用margin相关参数，不能使用w、h固定宽高。推荐使用margin相关参数来布局。*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface snUIWeex_close_Params {
	/**需要关闭的weex视图id*/ 
	id:number,

}

interface snUIWeex_show_Params {
	/**需要显示的weex视图id*/ 
	id:number,

}

interface snUIWeex_hide_Params {
	/**需要隐藏的weex视图id*/ 
	id:number,

}

interface geeTest {
}
interface bmLocation {
	/** 获取授权验证码*/ 
	getPermissionState():void

	/**
	 * `配置定位参数`
	 * ========params==========
	 *
	 * `coordinateType` :string : （可选项）坐标系类型
	 *
	 * `filter` :number : （可选项）位置更新所需最小距离（单位米）(android不支持)
	 *
	 * `accuracy` :string : （可选项）定位精度，**信号不稳定时，定位精度过高，在 iOS 平台上会偶现定位失败的问题**
	 *
	 * `activityType` :string : （可选项）定位类型 (android不支持)
	 *
	 * `locationTimeout` :number : （可选项）单次定位超时时间，单位秒（s）。最小值是2s
	 *
	 * `reGeocodeTimeout` :number : （可选项）单次定位逆地理超时时间，单位秒（s）。最小值是2s (android不支持)
	 */
	configManager(params:bmLocation_configManager_Params):void

	/** 单次定位。如果当前正在连续定位，调用此方法将会失败.*/ 
	singleLocation():void

	/** 开始连续定位*/ 
	start():void

	/** 停止定位，连续定位和单次定位都会被停止*/ 
	stopLocation():void

	/**
	 * `经纬度坐标转换`
	 * ========params==========
	 *
	 * `srcType` :string : （可选项）原坐标系类型
	 *
	 * `desType` :string : （可选项）转换后的坐标系类型
	 *
	 * `latitude` :number : 原纬度值
	 *
	 * `longitude` :number : 原经度值
	 */
	trans(params:bmLocation_trans_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断经纬度确定的位置是否在中国大陆`
	 * ========params==========
	 *
	 * `coordinateType` :string : （可选项）坐标系类型
	 *
	 * `latitude` :number : 纬度值
	 *
	 * `longitude` :number : 经度值
	 */
	judge(params:bmLocation_judge_Params, callback?: (ret:JSON) => void):void

}
interface bmLocation_configManager_Params {
	/**（可选项）坐标系类型*/ 
	coordinateType?:string,

	/**（可选项）位置更新所需最小距离（单位米）(android不支持)*/ 
	filter?:number,

	/**（可选项）定位精度，**信号不稳定时，定位精度过高，在 iOS 平台上会偶现定位失败的问题***/ 
	accuracy?:string,

	/**（可选项）定位类型 (android不支持)*/ 
	activityType?:string,

	/**（可选项）单次定位超时时间，单位秒（s）。最小值是2s*/ 
	locationTimeout?:number,

	/**（可选项）单次定位逆地理超时时间，单位秒（s）。最小值是2s (android不支持)*/ 
	reGeocodeTimeout?:number,

}

interface bmLocation_trans_Params {
	/**（可选项）原坐标系类型*/ 
	srcType?:string,

	/**（可选项）转换后的坐标系类型*/ 
	desType?:string,

	/**原纬度值*/ 
	latitude:number,

	/**原经度值*/ 
	longitude:number,

}

interface bmLocation_judge_Params {
	/**（可选项）坐标系类型*/ 
	coordinateType?:string,

	/**纬度值*/ 
	latitude:number,

	/**经度值*/ 
	longitude:number,

}

interface jdapp {
	/**
	 * `初始化sdk`
	 * ========params==========
	 *
	 * `ext` :string : 计费到另外一个账号体系的appkey
	 *
	 * `params` :string : 第三方应用自定义参数，可以为页面，频道标示，实现统计，打点等需求，在订单维度会存储此字段。
	 *
	 * `position` :string : 计费参数
	 */
	init(params:jdapp_init_Params, callback?: (ret:JSON) => void):void

	/** 授权登录*/ 
	login(callback?: (ret:JSON) => void):void

	/** 退出授权登录*/ 
	logout(callback?: (ret:JSON) => void):void

}
interface jdapp_init_Params {
	/**计费到另外一个账号体系的appkey*/ 
	ext:string,

	/**第三方应用自定义参数，可以为页面，频道标示，实现统计，打点等需求，在订单维度会存储此字段。*/ 
	params:string,

	/**计费参数*/ 
	position:string,

}

interface aliPay {
	/**
	 * `支付宝授权登录，**参数及其回调详细说明参考 [App支付宝登录授权SDK调用方法](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.GRGqgT&treeId=218&articleId=105325&docType=1)**`
	 * ========params==========
	 *
	 * `appId` :string : 支付宝分配给开发者的应用ID
	 *
	 * `targetId` :string : 商户标识该次用户授权请求的ID，该值在商户端应保持唯一
	 *
	 * `partner` :string : （可选项）签约的支付宝账号对应的支付宝唯一用户号，以2088开头的16位纯数字组成，若不传则模块从 `key.xml` 文件读取该参数
	 *
	 * `rsaPriKey` :string : （可选项）商户私钥，若不传则模块从 `key.xml` 文件读取该参数
	 */
	auth(params:aliPay_auth_Params, callback?: (ret:JSON) => void):void

}
interface aliPay_auth_Params {
	/**支付宝分配给开发者的应用ID*/ 
	appId:string,

	/**商户标识该次用户授权请求的ID，该值在商户端应保持唯一*/ 
	targetId:string,

	/**（可选项）签约的支付宝账号对应的支付宝唯一用户号，以2088开头的16位纯数字组成，若不传则模块从 `key.xml` 文件读取该参数*/ 
	partner?:string,

	/**（可选项）商户私钥，若不传则模块从 `key.xml` 文件读取该参数*/ 
	rsaPriKey?:string,

}

interface mobSharePlus {
	/**
	 * `开始分享`
	 * ========params==========
	 *
	 * `title` :string : （可选项）要分享的文本标题
	 *
	 * `titleUrl` :string : 要分享的标题的url，**在 Android 平台上，如果是分享到 qq 或 qq空间，该参数不能缺省。iOS 忽略本参数**
	 *
	 * `text` :string : （可选项）要分享的文本信息
	 *
	 * `imgPaths` :Array : （可选项）要分享的图片地址集合，传入参数可以为单张图片信息，也可以为多张图片信息，要求本地路径 (widget://、fs://、http://)，  除腾讯微博外，其他平台只支持单张图片的分享，默认分享数组的第一张图片。**新浪微博分享网络图片需要申请高级权限**。单张图片太大会分享不成功。建议小于1M。
	 *
	 * `url` :string : （可选项）要分享网页路径/应用路径
	 */
	share(params:mobSharePlus_share_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享到指定平台`
	 * ========params==========
	 *
	 * `target` :string : （可选项）要分享到平台的名字，取值范围如下：
	 *
	 * `title` :string : （可选项）要分享的文本标题
	 *
	 * `titleUrl` :string : 要分享的标题的url，**在 Android 平台上，如果是分享到 qq 或 qq空间，该参数不能缺省。iOS 忽略本参数**
	 *
	 * `text` :string : （可选项）要分享的文本信息
	 *
	 * `imgPaths` :Array : （可选项）要分享的图片地址集合，传入参数可以为单张图片信息，也可以为多张图片信息，要求本地路径（widget://、fs://、http://），除腾讯微博外，其他平台只支持单张图片的分享，默认分享数组的第一张图片。**新浪微博分享网络图片需要申请高级权限**。
	 *
	 * `url` :string : （可选项）要分享网页路径/应用路径
	 */
	shareTo(params:mobSharePlus_shareTo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `第三方登录`
	 * ========params==========
	 *
	 * `name` :string : 第三方登录平台的名字，取值范围如下：
	 */
	login(params:mobSharePlus_login_Params, callback?: (ret:JSON) => void):void

}
interface mobSharePlus_share_Params {
	/**（可选项）要分享的文本标题*/ 
	title?:string,

	/**要分享的标题的url，**在 Android 平台上，如果是分享到 qq 或 qq空间，该参数不能缺省。iOS 忽略本参数***/ 
	titleUrl:string,

	/**（可选项）要分享的文本信息*/ 
	text?:string,

	/**（可选项）要分享的图片地址集合，传入参数可以为单张图片信息，也可以为多张图片信息，要求本地路径 (widget://、fs://、http://)，  除腾讯微博外，其他平台只支持单张图片的分享，默认分享数组的第一张图片。**新浪微博分享网络图片需要申请高级权限**。单张图片太大会分享不成功。建议小于1M。*/ 
	imgPaths?:Array,

	/**（可选项）要分享网页路径/应用路径*/ 
	url?:string,

}

interface mobSharePlus_shareTo_Params {
	/**（可选项）要分享到平台的名字，取值范围如下：*/ 
	target?:string,

	/**（可选项）要分享的文本标题*/ 
	title?:string,

	/**要分享的标题的url，**在 Android 平台上，如果是分享到 qq 或 qq空间，该参数不能缺省。iOS 忽略本参数***/ 
	titleUrl:string,

	/**（可选项）要分享的文本信息*/ 
	text?:string,

	/**（可选项）要分享的图片地址集合，传入参数可以为单张图片信息，也可以为多张图片信息，要求本地路径（widget://、fs://、http://），除腾讯微博外，其他平台只支持单张图片的分享，默认分享数组的第一张图片。**新浪微博分享网络图片需要申请高级权限**。*/ 
	imgPaths?:Array,

	/**（可选项）要分享网页路径/应用路径*/ 
	url?:string,

}

interface mobSharePlus_login_Params {
	/**第三方登录平台的名字，取值范围如下：*/ 
	name:string,

}

interface unionPay {
	/**
	 * `按交易流水号支付订单`
	 * ========params==========
	 *
	 * `tn` :string : 交易流水号信息，银联后台生成，通过商户后台返回到客户端
	 *
	 * `devMode` :boolean : 接入模式设定，值为 false 代表接入生成环境
	 *
	 * `seType` :string : （可选项）手机pay支付类别（仅android支持）
	 */
	pay(params:unionPay_pay_Params, callback?: (ret:JSON) => void):void

	/** 检测是否安装云闪付客户端*/ 
	checkWalletInstalled(callback?: (ret:JSON) => void):void

}
interface unionPay_pay_Params {
	/**交易流水号信息，银联后台生成，通过商户后台返回到客户端*/ 
	tn:string,

	/**接入模式设定，值为 false 代表接入生成环境*/ 
	devMode:boolean,

	/**（可选项）手机pay支付类别（仅android支持）*/ 
	seType?:string,

}

interface iscpClient {
	/** 初始化*/ 
	initSDK(callback?: (ret:JSON) => void):void

	/**
	 * `查询本地监听端口；通过业务目的地址查找本地监听端口。`
	 * ========params==========
	 *
	 * `address` :string : 业务系统的公网地址
	 *
	 * `port` :string : 业务系统的公网端口
	 */
	queryLocalPortFromAddress(params:iscpClient_queryLocalPortFromAddress_Params, callback?: (ret:JSON) => void):void

	/**
	 * `建立安全连接(启动后台线程，连接交互网关，得到访控列表，开启监听端口。)`
	 * ========params==========
	 *
	 * `host` :string : 外网交互网关的公网地址
	 *
	 * `port` :string : 外网交互网关的公网端口
	 *
	 * `sslThreadNum` :number : 安全线程
	 */
	connectToIscpServerWithHost(params:iscpClient_connectToIscpServerWithHost_Params, callback?: (ret:JSON) => void):void

	/**
	 * `建立应用连接`
	 * ========params==========
	 *
	 * `host` :string : 业务系统地址（公网地址或信息外网地址）
	 *
	 * `port` :string : 业务系统端口
	 *
	 * `reqThreadNum` :number : 应用线程
	 */
	connectSocket(params:iscpClient_connectSocket_Params, callback?: (ret:JSON) => void):void

	/**
	 * `URL地址改造(异步接口)`
	 * ========params==========
	 *
	 * `urlString` :string : 需要访问的URL地址。
	 *
	 * `ret` :JSON : null
	 */
	urlAnalysedByISCPWithUrlString(params:iscpClient_urlAnalysedByISCPWithUrlString_Params):void

	/**
	 * `URL地址改造(同步接口)`
	 * ========params==========
	 *
	 * `urlString` :string : 需要访问的URL地址。
	 */
	urlAnalysedByISCPWithUrlStringSync(params:iscpClient_urlAnalysedByISCPWithUrlStringSync_Params):JSON;

	/** 断开安全连接*/ 
	disconnectServer():void

	/** 添加log监听*/ 
	addLogListener():void

}
interface iscpClient_queryLocalPortFromAddress_Params {
	/**业务系统的公网地址*/ 
	address:string,

	/**业务系统的公网端口*/ 
	port:string,

}

interface iscpClient_connectToIscpServerWithHost_Params {
	/**外网交互网关的公网地址*/ 
	host:string,

	/**外网交互网关的公网端口*/ 
	port:string,

	/**安全线程*/ 
	sslThreadNum:number,

}

interface iscpClient_connectSocket_Params {
	/**业务系统地址（公网地址或信息外网地址）*/ 
	host:string,

	/**业务系统端口*/ 
	port:string,

	/**应用线程*/ 
	reqThreadNum:number,

}

interface iscpClient_urlAnalysedByISCPWithUrlString_Params {
	/**需要访问的URL地址。*/ 
	urlString:string,

	/**null*/ 
	ret:JSON,

}

interface iscpClient_urlAnalysedByISCPWithUrlStringSync_Params {
	/**需要访问的URL地址。*/ 
	urlString:string,

}

interface qiniuLive {
	/** 初始化直播流的运行环境，不调用该方法将导致推流对象无法初始化*/ 
	initStreamingEnv():void

	/**
	 * `请求直播流信息 JSON 字符串，`
	 * ========params==========
	 *
	 * `requestUrl` :string : 请求url
	 */
	requestStreamJson(params:qiniuLive_requestStreamJson_Params, callback?: (ret:JSON) => void):void

	/**
	 * `配置直播流参数，初始化推流预览区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）推流画面的位置及尺寸
	 *
	 * `remoteWindowRect` :Array<JSON> : （可选项）连麦时弹出小窗口的位置及尺寸（如果不使用连麦功能可忽略此参数），连麦窗口接通顺序与本数组一一自动对应。
	 *
	 * `pushUrl` :string : (可选项)推流地址（若未调用[requestStreamJson](#a3)接口，此参数必填）
	 *
	 * `videoCapture` :JSON : （可选项）视频采集相关参数
	 *
	 * `previewSetting` :JSON : 相机预览设置（该参数只适用于Android）
	 *
	 * `videoEncodeHeight` :string : 视频编码高度（该参数只适用于Android）
	 *
	 * `videoStream` :JSON : （可选项）视频流相关参数
	 *
	 * `audioQuality` :string : （可选项）音频质量
	 *
	 * `face` :JSON : （可选项）美颜相关参数
	 *
	 * `localWinPosition` :JSON : 设置合流后的视频尺寸，以及主播画面在合流图像中的位置和大小 （如果不调用此方法，SDK 在合流时，默认会将主播的视频窗口置于最下层并将其大小设置为最终的推流大小，副主播的窗口置于主播视频之上）
	 *
	 * `continuousFocus` :boolean : （可选项）是否持续对焦
	 *
	 * `encodeOritation` :string : 视频编码方向
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	setStreamingProfile(params:qiniuLive_setStreamingProfile_Params, callback?: (ret:JSON) => void):void

	/** 当前设备是否支持设置录音音量 **注意：该方法仅支持ios***/ 
	inputgainEnable():void

	/** 设置麦克风音量大小，取值范围：0-1 **注意：该方法仅支持ios***/ 
	setInputgain():void

	/** 获取麦克风音量大小，取值范围：0-1 **注意：该方法仅支持ios***/ 
	getInputgain():void

	/** 切换前后摄像头*/ 
	toggleCamera():void

	/** 开始推流，当播放异常时亦可通过此接口发起重链请求，刷新视频播放器，(注：android只有在收到streamStatus状态为17(准备就绪)后才允许调用此方法)*/ 
	startStream():void

	/** 结束推流*/ 
	stopStream():void

	/** 销毁推流，释放资源*/ 
	destroyStream():void

	/** 打开闪光灯*/ 
	turnLightOn():void

	/** 关闭闪光灯*/ 
	turnLightOff():void

	/**
	 * `初始化连麦参数，设置服务器区域`
	 * ========params==========
	 *
	 * `serverRegionID` :number : （可选项）服务器区域的 ID
	 *
	 * `serverRegionName` :string : （可选项）服务器区域扩展标识，如果没有特殊需求，可不传
	 */
	setWithServerRegion(params:qiniuLive_setWithServerRegion_Params):void

	/**
	 * `设置是否推流的音频静音`
	 * ========params==========
	 *
	 * `muteMixedAudio` :boolean : （可选项）是否静音
	 */
	setMuteMixedAudio(params:qiniuLive_setMuteMixedAudio_Params):void

	/**
	 * `配置连麦`
	 * ========params==========
	 *
	 * `videoEncodingSizeRatio` :string : 视频编码比例
	 *
	 * `videoEncodingSize` :number : 视频编码高度分辨率
	 *
	 * `mixVideoSize` :JSON : （可选项）设置连麦的合流分辨率，默认跟setStreamingProfile接口的videoStream ->videoSize参数保持一致
	 *
	 * `localVideoRect` :JSON : （可选项）设置本地视频在连麦合流的画面中的大小和位置，默认与mixVideoSize一致
	 *
	 * `videoBitrateRange` :JSON : 比特率范围设置
	 *
	 * `fps` :number : （可选项）帧率，暂仅支持 android 平台
	 *
	 * `mixOverlayRectArray` :Array : 使用精确坐标位置来配置该窗口在合流画面中的位置和大小，该位置是指连麦的窗口在推出来流的画面中的位置，并非在本地预览的位置。需要在连麦开始前设置好，连麦过程中更新无效。
	 *
	 * `mixOverlayRatios` :Array : 使用相对值来配置该窗口在合流画面中的位置和大小，主窗口的原点坐标在左上角
	 *
	 * `rejoinTimes` :number : （可选项）断线后自动重新加入房间的重试次数
	 *
	 * `connetTimeout` :number : （可选项）连接的超时时间，最小为 3000 ms，单位是 ms；默认：5000 ms
	 */
	configConference(params:qiniuLive_configConference_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始连麦。可通过 addRtcStateDidChangeListener、addRtcDidFailListener、addRoomOIListener 得到连麦的状态`
	 * ========params==========
	 *
	 * `userId` :string : 连麦的的用户 ID，需要保证在同一房间的不同用户 ID 是不同的
	 *
	 * `roomName` :string : 连麦的房间名
	 *
	 * `roomToken` :string : 连麦房间的 roomToken
	 */
	startConference(params:qiniuLive_startConference_Params):void

	/** 停止连麦，结束连麦后，会停止推送本地音视频流，同时停止拉取房间中的音视频流。可通过 addRtcStateDidChangeListener、addRtcDidFailListener、addRoomOIListener 得到连麦的状态*/ 
	stopConference(callback?: (ret:JSON) => void):void

	/**
	 * `踢出指定 userID 的用户，只有主播才有踢人的权限。`
	 * ========params==========
	 *
	 * `userId` :string : userID 的用户
	 */
	kickoutUser(params:qiniuLive_kickoutUser_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置静音模式，推流的静音模式`
	 * ========params==========
	 *
	 * `isMute` :boolean : 是否静音
	 */
	mute(params:qiniuLive_mute_Params):void

	/** 连麦状态已变更的回调*/ 
	addRtcStateDidChangeListener():void

	/** 连麦产生了某个 error 的回调*/ 
	addRtcDidFailListener():void

	/** 进出房间事件监听*/ 
	addRoomOIListener():void

	/**
	 * `重设渲染到制定窗口上的连麦小窗口的位置和大小`
	 * ========params==========
	 *
	 * `userId` :string : 要重设的连麦小窗口的用户 ID
	 *
	 * `rect` :JSON : 重设的rect信息
	 */
	resetRemoteWindowRect(params:qiniuLive_resetRemoteWindowRect_Params):void

	/** 切换预览窗口和指定（通过userId）的连麦窗口的位置和大小*/ 
	switchView():void

	/** 获取当前所有连麦小窗口的userID*/ 
	getRtcViewUserIds():void

	/**
	 * `初始化视频播放器（拉流，直播观看端）`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）播放器的位置及尺寸
	 *
	 * `dataUrl` :string : 媒体源（支持： 本地文件绝对路径，或 HLS URL，或 RTMP URL）
	 *
	 * `codec` :number : （可选项）解码方式
	 *
	 * `prepareTimeout` :number : （可选项)准备超时时间（单位：ms）
	 *
	 * `readTimeout` :number : （可选项)读取视频帧超时（单位：ms）(android不支持)
	 *
	 * `isLiveStream` :boolean : （可选项)是否是直播流  (android不支持)
	 *
	 * `isDelayOptimization` :boolean : （可选项)是否进行延时优化（该参数只在直播流情况下生效）
	 *
	 * `cacheBufferDuration` :number : （可选项)缓存大小（单位:ms）
	 *
	 * `maxCacheBufferDuration` :number : （可选项)最大缓存大小（单位:ms）
	 *
	 * `contentMode` :any : （可选项)内容模式 （**本参数暂仅支持 iOS 平台**）
	 *
	 * `fixedOn` :string : （可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	initPMediaPlayer(params:qiniuLive_initPMediaPlayer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `重设播放器的 rotationsMode`
	 * ========params==========
	 *
	 * `mode` :string : （可选项）播放器的mode
	 */
	setPLayerRotationsMode(params:qiniuLive_setPLayerRotationsMode_Params):void

	/**
	 * `重设播放器的 rect`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）播放器的位置及尺寸
	 */
	resetPlayerRect(params:qiniuLive_resetPlayerRect_Params):void

	/** 开始播放拉流视频*/ 
	start(callback?: (ret:JSON) => void):void

	/** 停止拉流端视频播放器*/ 
	stop():void

	/** 暂停拉流端视频播放器*/ 
	pause(callback?: (ret:JSON) => void):void

	/** 恢复拉流端视频播放*/ 
	resume(callback?: (ret:JSON) => void):void

	/** 释放拉流端视频播放器占用的资源*/ 
	release():void

	/** 截屏*/ 
	getScreenShot():void

	/**
	 * `**注意：此方法需要添加悬浮窗权限，需要到手机设置 -> 权限管理 -> 找到相应程序 ->打开悬浮窗权限**`
	 * ========params==========
	 *
	 * `rect` :JSON : 悬浮窗的初始位置及尺寸
	 */
	addFloatWindow(params:qiniuLive_addFloatWindow_Params, callback?: (ret:JSON) => void):void

	/** 从后台唤醒本app*/ 
	startMainApp():void

	/**
	 * `快速定位到指定播放时间点`
	 * ========params==========
	 *
	 * `seconds` :number : 跳转到音视频播放的秒数
	 */
	seekTo(params:qiniuLive_seekTo_Params):void

	/**
	 * `设置音量`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）音量大小，取值范围：0-1
	 */
	setVolume(params:qiniuLive_setVolume_Params):void

	/** 获取当前播放音量*/ 
	getVolume():void

	/**
	 * `设置屏幕亮度`
	 * ========params==========
	 *
	 * `brightness` :number : （可选项）设置的屏幕的亮度，取值范围：0-100，**在 iOS 平台上设置的是系统屏幕亮度。Android 平台上设置的本应用内的屏幕亮度**
	 */
	setBrightness(params:qiniuLive_setBrightness_Params):void

	/** 获取当前屏幕亮度值*/ 
	getBrightness():void

	/** 获取视频的时长*/ 
	getDuration():void

	/** 获取已经播放的时长*/ 
	getCurrentPosition():void

	/**
	 * `倍速播放`
	 * ========params==========
	 *
	 * `speed` :number : （可选项）设置视频播放倍速(取值范围 0.2-32)
	 */
	setSpeed(params:qiniuLive_setSpeed_Params):void

	/**
	 * `添加推流/拉流音视频状态监听`
	 * ========params==========
	 *
	 * `name` :string : 事件名称
	 */
	addEventListener(params:qiniuLive_addEventListener_Params, callback?: (ret:JSON) => void):void

}
interface qiniuLive_requestStreamJson_Params {
	/**请求url*/ 
	requestUrl:string,

}

interface qiniuLive_setStreamingProfile_Params {
	/**（可选项）推流画面的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）连麦时弹出小窗口的位置及尺寸（如果不使用连麦功能可忽略此参数），连麦窗口接通顺序与本数组一一自动对应。*/ 
	remoteWindowRect?:Array<JSON>,

	/**(可选项)推流地址（若未调用[requestStreamJson](#a3)接口，此参数必填）*/ 
	pushUrl?:string,

	/**（可选项）视频采集相关参数*/ 
	videoCapture?:JSON,

	/**相机预览设置（该参数只适用于Android）*/ 
	previewSetting:JSON,

	/**视频编码高度（该参数只适用于Android）*/ 
	videoEncodeHeight:string,

	/**（可选项）视频流相关参数*/ 
	videoStream?:JSON,

	/**（可选项）音频质量*/ 
	audioQuality?:string,

	/**（可选项）美颜相关参数*/ 
	face?:JSON,

	/**设置合流后的视频尺寸，以及主播画面在合流图像中的位置和大小 （如果不调用此方法，SDK 在合流时，默认会将主播的视频窗口置于最下层并将其大小设置为最终的推流大小，副主播的窗口置于主播视频之上）*/ 
	localWinPosition:JSON,

	/**（可选项）是否持续对焦*/ 
	continuousFocus?:boolean,

	/**视频编码方向*/ 
	encodeOritation:string,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface qiniuLive_setWithServerRegion_Params {
	/**（可选项）服务器区域的 ID*/ 
	serverRegionID?:number,

	/**（可选项）服务器区域扩展标识，如果没有特殊需求，可不传*/ 
	serverRegionName?:string,

}

interface qiniuLive_setMuteMixedAudio_Params {
	/**（可选项）是否静音*/ 
	muteMixedAudio?:boolean,

}

interface qiniuLive_configConference_Params {
	/**视频编码比例*/ 
	videoEncodingSizeRatio:string,

	/**视频编码高度分辨率*/ 
	videoEncodingSize:number,

	/**（可选项）设置连麦的合流分辨率，默认跟setStreamingProfile接口的videoStream ->videoSize参数保持一致*/ 
	mixVideoSize?:JSON,

	/**（可选项）设置本地视频在连麦合流的画面中的大小和位置，默认与mixVideoSize一致*/ 
	localVideoRect?:JSON,

	/**比特率范围设置*/ 
	videoBitrateRange:JSON,

	/**（可选项）帧率，暂仅支持 android 平台*/ 
	fps?:number,

	/**使用精确坐标位置来配置该窗口在合流画面中的位置和大小，该位置是指连麦的窗口在推出来流的画面中的位置，并非在本地预览的位置。需要在连麦开始前设置好，连麦过程中更新无效。*/ 
	mixOverlayRectArray:Array,

	/**使用相对值来配置该窗口在合流画面中的位置和大小，主窗口的原点坐标在左上角*/ 
	mixOverlayRatios:Array,

	/**（可选项）断线后自动重新加入房间的重试次数*/ 
	rejoinTimes?:number,

	/**（可选项）连接的超时时间，最小为 3000 ms，单位是 ms；默认：5000 ms*/ 
	connetTimeout?:number,

}

interface qiniuLive_startConference_Params {
	/**连麦的的用户 ID，需要保证在同一房间的不同用户 ID 是不同的*/ 
	userId:string,

	/**连麦的房间名*/ 
	roomName:string,

	/**连麦房间的 roomToken*/ 
	roomToken:string,

}

interface qiniuLive_kickoutUser_Params {
	/**userID 的用户*/ 
	userId:string,

}

interface qiniuLive_mute_Params {
	/**是否静音*/ 
	isMute:boolean,

}

interface qiniuLive_resetRemoteWindowRect_Params {
	/**要重设的连麦小窗口的用户 ID*/ 
	userId:string,

	/**重设的rect信息*/ 
	rect:JSON,

}

interface qiniuLive_initPMediaPlayer_Params {
	/**（可选项）播放器的位置及尺寸*/ 
	rect?:JSON,

	/**媒体源（支持： 本地文件绝对路径，或 HLS URL，或 RTMP URL）*/ 
	dataUrl:string,

	/**（可选项）解码方式*/ 
	codec?:number,

	/**（可选项)准备超时时间（单位：ms）*/ 
	prepareTimeout?:number,

	/**（可选项)读取视频帧超时（单位：ms）(android不支持)*/ 
	readTimeout?:number,

	/**（可选项)是否是直播流  (android不支持)*/ 
	isLiveStream?:boolean,

	/**（可选项)是否进行延时优化（该参数只在直播流情况下生效）*/ 
	isDelayOptimization?:boolean,

	/**（可选项)缓存大小（单位:ms）*/ 
	cacheBufferDuration?:number,

	/**（可选项)最大缓存大小（单位:ms）*/ 
	maxCacheBufferDuration?:number,

	/**（可选项)内容模式 （**本参数暂仅支持 iOS 平台**）*/ 
	contentMode?:any,

	/**（可选项）模块添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface qiniuLive_setPLayerRotationsMode_Params {
	/**（可选项）播放器的mode*/ 
	mode?:string,

}

interface qiniuLive_resetPlayerRect_Params {
	/**（可选项）播放器的位置及尺寸*/ 
	rect?:JSON,

}

interface qiniuLive_addFloatWindow_Params {
	/**悬浮窗的初始位置及尺寸*/ 
	rect:JSON,

}

interface qiniuLive_seekTo_Params {
	/**跳转到音视频播放的秒数*/ 
	seconds:number,

}

interface qiniuLive_setVolume_Params {
	/**（可选项）音量大小，取值范围：0-1*/ 
	volume?:number,

}

interface qiniuLive_setBrightness_Params {
	/**（可选项）设置的屏幕的亮度，取值范围：0-100，**在 iOS 平台上设置的是系统屏幕亮度。Android 平台上设置的本应用内的屏幕亮度***/ 
	brightness?:number,

}

interface qiniuLive_setSpeed_Params {
	/**（可选项）设置视频播放倍速(取值范围 0.2-32)*/ 
	speed?:number,

}

interface qiniuLive_addEventListener_Params {
	/**事件名称*/ 
	name:string,

}

interface agoraRtc {
}
interface acBugtags {
	/**
	 * `设置 Bugtags 呼出方式`
	 * ========params==========
	 *
	 * `invocationEvent` :number : （可选项）呼出方式
	 */
	setInvocationEvent(params:acBugtags_setInvocationEvent_Params):void

	/** 获取 Bugtags 当前的呼出方式*/ 
	currentInvocationEvent():void

	/**
	 * `添加自定义日志`
	 * ========params==========
	 *
	 * `content` :string : 自定义日志
	 */
	log(params:acBugtags_log_Params):void

	/**
	 * `设置是否收集 Crash 信息`
	 * ========params==========
	 *
	 * `trackingCrashes` :boolean : 是否收集 Crash 信息
	 */
	setTrackingCrashes(params:acBugtags_setTrackingCrashes_Params):void

	/**
	 * `设置是否跟踪用户操作步骤`
	 * ========params==========
	 *
	 * `trackingUserSteps` :boolean : 是否跟踪用户操作步骤
	 */
	setTrackingUserSteps(params:acBugtags_setTrackingUserSteps_Params):void

	/**
	 * `设置是否收集控制台日志`
	 * ========params==========
	 *
	 * `trackingConsoleLog` :boolean : 是否收集控制台日志
	 */
	setTrackingConsoleLog(params:acBugtags_setTrackingConsoleLog_Params):void

	/**
	 * `设置是否收集用户位置信息`
	 * ========params==========
	 *
	 * `trackingUserLocation` :boolean : 是否收集用户位置信息（仅ios支持）
	 */
	setTrackingUserLocation(params:acBugtags_setTrackingUserLocation_Params):void

	/**
	 * `设置自定义数据，会与问题一起提交`
	 * ========params==========
	 *
	 * `key` :string : key
	 *
	 * `data` :string : 用户数据
	 */
	setUserData(params:acBugtags_setUserData_Params):void

	/**
	 * `移除指定 key 的自定义数据`
	 * ========params==========
	 *
	 * `key` :string : key
	 */
	removeUserDataForKey(params:acBugtags_removeUserDataForKey_Params):void

	/** 移除所有自定义数据*/ 
	removeAllUserData():void

	/**
	 * `手动发送Exception`
	 * ========params==========
	 *
	 * `name` :any : 异常名字（仅ios支持）
	 *
	 * `reason` :any : 异常原因
	 *
	 * `userInfo` :any : （可选项）异常信息（仅ios支持）
	 */
	sendException(params:acBugtags_sendException_Params):void

	/**
	 * `发送用户反馈`
	 * ========params==========
	 *
	 * `content` :any : 反馈内容
	 *
	 * `image` :any : （可选项）附图的本地路径，支持fs、widget
	 */
	sendFeedback(params:acBugtags_sendFeedback_Params):void

	/**
	 * `添加自定义用户步骤`
	 * ========params==========
	 *
	 * `content` :any : 步骤内容
	 */
	addUserStep(params:acBugtags_addUserStep_Params):void

	/**
	 * `设置是否仅在 WiFi 模式下才上传数据`
	 * ========params==========
	 *
	 * `onlyViaWiFi` :boolean : 是否仅在 WiFi 模式下才上传数据
	 */
	setUploadDataOnlyViaWiFi(params:acBugtags_setUploadDataOnlyViaWiFi_Params):void

	/** 手动调用截屏界面*/ 
	invoke():void

	/**
	 * `获取远程配置`
	 * ========params==========
	 *
	 * `key` :string : 指定的 key
	 *
	 * `type` :number : （可选项）获取内容的类型；0：字符串，1：布尔，2：数字
	 */
	remoteConfig(params:acBugtags_remoteConfig_Params, callback?: (ret:JSON) => void):void

	/**
	 * `手动同步远程配置`
	 * ========params==========
	 *
	 * `force` :boolean : 是否清除本地缓存后重新拉取数据
	 */
	sync(params:acBugtags_sync_Params):void

	/** 添加监听*/ 
	addtListener():void

}
interface acBugtags_setInvocationEvent_Params {
	/**（可选项）呼出方式*/ 
	invocationEvent?:number,

}

interface acBugtags_log_Params {
	/**自定义日志*/ 
	content:string,

}

interface acBugtags_setTrackingCrashes_Params {
	/**是否收集 Crash 信息*/ 
	trackingCrashes:boolean,

}

interface acBugtags_setTrackingUserSteps_Params {
	/**是否跟踪用户操作步骤*/ 
	trackingUserSteps:boolean,

}

interface acBugtags_setTrackingConsoleLog_Params {
	/**是否收集控制台日志*/ 
	trackingConsoleLog:boolean,

}

interface acBugtags_setTrackingUserLocation_Params {
	/**是否收集用户位置信息（仅ios支持）*/ 
	trackingUserLocation:boolean,

}

interface acBugtags_setUserData_Params {
	/**key*/ 
	key:string,

	/**用户数据*/ 
	data:string,

}

interface acBugtags_removeUserDataForKey_Params {
	/**key*/ 
	key:string,

}

interface acBugtags_sendException_Params {
	/**异常名字（仅ios支持）*/ 
	name:any,

	/**异常原因*/ 
	reason:any,

	/**（可选项）异常信息（仅ios支持）*/ 
	userInfo?:any,

}

interface acBugtags_sendFeedback_Params {
	/**反馈内容*/ 
	content:any,

	/**（可选项）附图的本地路径，支持fs、widget*/ 
	image?:any,

}

interface acBugtags_addUserStep_Params {
	/**步骤内容*/ 
	content:any,

}

interface acBugtags_setUploadDataOnlyViaWiFi_Params {
	/**是否仅在 WiFi 模式下才上传数据*/ 
	onlyViaWiFi:boolean,

}

interface acBugtags_remoteConfig_Params {
	/**指定的 key*/ 
	key:string,

	/**（可选项）获取内容的类型；0：字符串，1：布尔，2：数字*/ 
	type?:number,

}

interface acBugtags_sync_Params {
	/**是否清除本地缓存后重新拉取数据*/ 
	force:boolean,

}

interface google {
	/**
	 * `添加显示登录按钮`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `style` :string : （可选项）按钮类型
	 *
	 * `colorScheme` :string : （可选项）按钮颜色
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动）
	 */
	showSignInButton(params:google_showSignInButton_Params, callback?: (ret:JSON) => void):void

	/** 判断是否已登录*/ 
	hasAuth():void

	/**
	 * `获取用户照片的 URL`
	 * ========params==========
	 *
	 * `dimension` :number : （可选项）照片的大小  【注意】:android端不支持该参数
	 */
	getProfileImage(params:google_getProfileImage_Params, callback?: (ret:JSON) => void):void

	/** - 类型：JSON 对象*/ 
	signInSilently():void

	/** - 类型：JSON 对象*/ 
	getScopes(callback?: (ret:JSON) => void):void

	/**
	 * `设置权限范围 。`
	 * ========params==========
	 *
	 * `scopes` :Array : 权限组成的数组
	 */
	setScopes(params:google_setScopes_Params):void

	/** 获取授权 token（**需要登录授权成功**）*/ 
	getTokens(callback?: (ret:JSON) => void):void

	/** 刷新token*/ 
	refreshTokens(callback?: (ret:JSON) => void):void

	/** 登出*/ 
	signOut():void

	/** ##示例代码*/ 
	disconnect():void

	/** 直接登录*/ 
	signIn(callback?: (ret:JSON) => void):void

}
interface google_showSignInButton_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）按钮类型*/ 
	style?:string,

	/**（可选项）按钮颜色*/ 
	colorScheme?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上（不跟随窗口上下滚动）*/ 
	fixed?:boolean,

}

interface google_getProfileImage_Params {
	/**（可选项）照片的大小  【注意】:android端不支持该参数*/ 
	dimension?:number,

}

interface google_setScopes_Params {
	/**权限组成的数组*/ 
	scopes:Array,

}

interface ksisdk {
}
interface FaceIdDetect {
	/** SDK网络授权*/ 
	auth(callback?: (ret:JSON) => void):void

}
interface rongCloud {
}
interface itppayPlus {
	/** 调起支付*/ 
	dlPay():void

}
interface iflyRecognition {
	/** 创建科大讯飞引擎*/ 
	createUtility(callback?: (ret:JSON) => void):void

	/**
	 * `识别语音返回文字`
	 * ========params==========
	 *
	 * `vadbos` :number : （可选项）前断点时间（静音时间，即用户多长时间不说话做超时处理），范围是0-10000单位ms
	 *
	 * `vadeos` :number : （可选项）后断点时间（静音时间，即用户多长时间不说话做超时处理），单位ms，范围是0-10000
	 *
	 * `rate` :number : （可选项）采样率（支持16000，8000）
	 *
	 * `asrptt` :number : （可选项）返回的语句是否有标点符号，取值范围：0-无，1-有
	 *
	 * `audioPath` :string : （可选项）录制的音频文件保存路径（如fs://123.pcm,一定要加后缀名;一定要加后缀名;只允许一级目录,不允许二级机二级以上的目录,例如不允许fs://test/123/pcm），不支持widget 协议。**注意：在 iOS 平台上由于科大讯飞 SDK 限制，只支持 pcm 格式音频保存**
	 */
	record(params:iflyRecognition_record_Params, callback?: (ret:JSON) => void):void

	/** 停止录音*/ 
	stopRecord():void

	/** 取消语音识别*/ 
	cancelRecord():void

	/**
	 * `添加录音音量显示器`
	 * ========params==========
	 *
	 * `centerX` :number : （可选项）录音音量标识的圆心坐标
	 *
	 * `centerY` :number : （可选项）录音音量标识的圆心坐标
	 *
	 * `radius` :number : （可选项）录音音量标识的圆心半径
	 *
	 * `transparentR` :number : （可选项）中间透明区域的半径
	 *
	 * `bg` :string : （可选项）录音标识的背景色，支持 rgb，rgba，#
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	addRecordHUD(params:iflyRecognition_addRecordHUD_Params):void

	/** 显示录音音量显示器*/ 
	showRecordHUD():void

	/** 隐藏录音音量显示器*/ 
	hideRecordHUD():void

	/**
	 * `用语音读取文字信息，**最大的字节数为1k**`
	 * ========params==========
	 *
	 * `readStr` :string : 要读取的文字信息
	 *
	 * `speed` :number : （可选项）朗读的语速，范围是0-100
	 *
	 * `volume` :number : （可选项）朗读的声音大小，范围是0-100
	 *
	 * `voice` :string : （可选项）朗读人（兼容旧版本：0-xiaoyan；1-xiaoyu；）
	 *
	 * `rate` :number : （可选项）采样率(支持16000，8000)
	 *
	 * `audioPath` :string : （可选项）朗读的音频保存路径（如fs://123.pcm，一定要加后缀名;只允许一级目录,不允许二级机二级以上的目录,例如不允许fs://test/123/pcm），不支持widget 协议。**注意：在 iOS 平台上由于科大讯飞 SDK 限制，只支持 pcm 格式音频保存**
	 *
	 * `disableDefaultSettings` :boolean : （可选项）是否禁用讯飞 SDK 默认设置。禁用后可避免与音视频录制模块冲突问题
	 */
	read(params:iflyRecognition_read_Params, callback?: (ret:JSON) => void):void

	/** 停止朗读*/ 
	stopRead():void

	/** 暂停朗读（用 resumeRead 接口恢复朗读）*/ 
	pauseRead():void

	/** 恢复朗读*/ 
	resumeRead():void

	/**
	 * `识别音频文件`
	 * ========params==========
	 *
	 * `filePath` :string : 需要识别的音频文件的路径（支持fs:// 和 widget://）
	 */
	fileIdentify(params:iflyRecognition_fileIdentify_Params, callback?: (ret:JSON) => void):void

}
interface iflyRecognition_record_Params {
	/**（可选项）前断点时间（静音时间，即用户多长时间不说话做超时处理），范围是0-10000单位ms*/ 
	vadbos?:number,

	/**（可选项）后断点时间（静音时间，即用户多长时间不说话做超时处理），单位ms，范围是0-10000*/ 
	vadeos?:number,

	/**（可选项）采样率（支持16000，8000）*/ 
	rate?:number,

	/**（可选项）返回的语句是否有标点符号，取值范围：0-无，1-有*/ 
	asrptt?:number,

	/**（可选项）录制的音频文件保存路径（如fs://123.pcm,一定要加后缀名;一定要加后缀名;只允许一级目录,不允许二级机二级以上的目录,例如不允许fs://test/123/pcm），不支持widget 协议。**注意：在 iOS 平台上由于科大讯飞 SDK 限制，只支持 pcm 格式音频保存***/ 
	audioPath?:string,

}

interface iflyRecognition_addRecordHUD_Params {
	/**（可选项）录音音量标识的圆心坐标*/ 
	centerX?:number,

	/**（可选项）录音音量标识的圆心坐标*/ 
	centerY?:number,

	/**（可选项）录音音量标识的圆心半径*/ 
	radius?:number,

	/**（可选项）中间透明区域的半径*/ 
	transparentR?:number,

	/**（可选项）录音标识的背景色，支持 rgb，rgba，#*/ 
	bg?:string,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface iflyRecognition_read_Params {
	/**要读取的文字信息*/ 
	readStr:string,

	/**（可选项）朗读的语速，范围是0-100*/ 
	speed?:number,

	/**（可选项）朗读的声音大小，范围是0-100*/ 
	volume?:number,

	/**（可选项）朗读人（兼容旧版本：0-xiaoyan；1-xiaoyu；）*/ 
	voice?:string,

	/**（可选项）采样率(支持16000，8000)*/ 
	rate?:number,

	/**（可选项）朗读的音频保存路径（如fs://123.pcm，一定要加后缀名;只允许一级目录,不允许二级机二级以上的目录,例如不允许fs://test/123/pcm），不支持widget 协议。**注意：在 iOS 平台上由于科大讯飞 SDK 限制，只支持 pcm 格式音频保存***/ 
	audioPath?:string,

	/**（可选项）是否禁用讯飞 SDK 默认设置。禁用后可避免与音视频录制模块冲突问题*/ 
	disableDefaultSettings?:boolean,

}

interface iflyRecognition_fileIdentify_Params {
	/**需要识别的音频文件的路径（支持fs:// 和 widget://）*/ 
	filePath:string,

}

interface faceidLiveDetect {
	/**
	 * `获取 bizToken`
	 * ========params==========
	 *
	 * `path` :string : （可选项）由客户提供的参照人脸照片的路径，要求本地路径（仅android支持，此参数有效时userName、idcardNumber无效）
	 *
	 * `type` :number : 活体类型
	 *
	 * `userName` :string : 姓名
	 *
	 * `idcardNumber` :string : 身份证号码
	 *
	 * `apiKey` :string : 从FACE++平台获取得apiKey
	 *
	 * `apiSecret` :string : 从FACE++平台获取得apiSecret
	 */
	getBizToken(params:faceidLiveDetect_getBizToken_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始检测，检测完成后发给[服务器端](https://faceid.com/faceid-open-doc/docs/idverify-api-verify.html)验证。`
	 * ========params==========
	 *
	 * `language` :string : 活体类型
	 *
	 * `livenessHomeBackgroundColor` :string : 背景色(ios)
	 *
	 * `livenessHomeRingColor` :string : 检测中圆环背景色(ios)
	 *
	 * `livenessHomeProcessBarColor` :string : 圆环进度颜色(ios)
	 *
	 * `livenessHomePromptColor` :string : 提示文本字体颜色(ios)
	 *
	 * `livenessHomePromptSize` :number : 提示文本字体大小(ios)
	 *
	 * `bizToken` :string : 服务器端从 faceID 获取的 token
	 */
	startDetect(params:faceidLiveDetect_startDetect_Params, callback?: (ret:JSON) => void):void

}
interface faceidLiveDetect_getBizToken_Params {
	/**（可选项）由客户提供的参照人脸照片的路径，要求本地路径（仅android支持，此参数有效时userName、idcardNumber无效）*/ 
	path?:string,

	/**活体类型*/ 
	type:number,

	/**姓名*/ 
	userName:string,

	/**身份证号码*/ 
	idcardNumber:string,

	/**从FACE++平台获取得apiKey*/ 
	apiKey:string,

	/**从FACE++平台获取得apiSecret*/ 
	apiSecret:string,

}

interface faceidLiveDetect_startDetect_Params {
	/**活体类型*/ 
	language:string,

	/**背景色(ios)*/ 
	livenessHomeBackgroundColor:string,

	/**检测中圆环背景色(ios)*/ 
	livenessHomeRingColor:string,

	/**圆环进度颜色(ios)*/ 
	livenessHomeProcessBarColor:string,

	/**提示文本字体颜色(ios)*/ 
	livenessHomePromptColor:string,

	/**提示文本字体大小(ios)*/ 
	livenessHomePromptSize:number,

	/**服务器端从 faceID 获取的 token*/ 
	bizToken:string,

}

interface txShortVideo {
	/**
	 * `设置授权`
	 * ========params==========
	 *
	 * `licenceURL` :string : （必填项）从腾讯云平台获取的LicenseUrl。[参考腾讯官方申请说明](https://cloud.tencent.com/document/product/584/20333#1.-.E7.94.B3.E8.AF.B7.E6.B5.8B.E8.AF.95license)
	 *
	 * `licenceKey` :string : （必填项）从腾讯云平台获取的Key。[参考腾讯官方申请说明](https://cloud.tencent.com/document/product/584/20333#1.-.E7.94.B3.E8.AF.B7.E6.B5.8B.E8.AF.95license)
	 */
	setLicence(params:txShortVideo_setLicence_Params, callback?: (ret:JSON) => void):void

	/** 获取授权信息，仅支持 iOS 端。*/ 
	getLicence():void

	/**
	 * `短视频录制`
	 * ========params==========
	 *
	 * `videoResolution` :number : （可选项）录制分辨率
	 *
	 * `videoBitratePIN` :number : （可选项）自定义码率   建议值：600~12000 (SDK上限不再做限制)  单位kbps/s,这里需要注意的是，这里设置的码率只是给编码器一个参考值，实际出来视频的码率是会在这个参考值上下波动的（
	 *
	 * `videoFPS` :number : （可选项）帧率 （范围：15-30）。
	 *
	 * `gop` :number : （可选项）关键帧间隔 （范围：1-10）。
	 *
	 * `logo` :string : （可选项）视频尾部水印logo( ios视频拍摄完成后,预览以及保存后的水印会一直存在)（支持fs:// widget://路径）。
	 *
	 * `minDuration` :number : （可选项）视频最短时长(秒)。
	 *
	 * `maxDuration` :number : （可选项）视频最长时间（秒）。
	 *
	 * `isFront` :boolean : （可选项）是否前置摄像头 （true 前置 fasle 后置）
	 *
	 * `localMusicAddress` :string : （可选项）背景音乐库（json文件）
	 *
	 * `serverBgMusicUrl` :string : （可选项）背景音乐库服务器端URL， 本参数与localMusicAddress互斥，同时传时以本参数为准
	 *
	 * `defaultBgMusic` :string : （可选项）默认背景音乐路径，要求本地路径（fs://），不传则无默认背景音乐
	 */
	videoRecord(params:txShortVideo_videoRecord_Params, callback?: (ret:JSON) => void):void

	/** videoRecord接口打开的短视频录像机背景音乐切换监听接口*/ 
	videoRecordBgMusicListener():void

	/**
	 * `上传本地视频`
	 * ========params==========
	 *
	 * `signature` :string : 签名
	 *
	 * `videoPath` :string : 视频地址，支持fs以及原生路径
	 *
	 * `coverPath` :string : （可选项）预览图路径，支持fs以及原生路径
	 *
	 * `customKey` :string : 用户userId（仅android有效）
	 */
	uploadLocalVideo(params:txShortVideo_uploadLocalVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将多个多个短视频合并、编辑。若只传单个视频，则直接编辑。`
	 * ========params==========
	 *
	 * `videoPaths` :Array : （可选项）视频路径，要求本地路径，支持fs。
	 *
	 * `defaultBgMusic` :string : （可选项）默认背景音乐路径，要求本地路径（fs://），不传则无默认背景音乐
	 *
	 * `bitrate` :number : （可选项）自定义码率，值为0时为不设置自定义码率（仅android支持）
	 *
	 * `resolution` :number : （可选项）分辨率，如果源视频的分辨率小于设置的常量对应的分辨率，按照原视频的分辨率。如果源视频的分辨率大于设置的常量对象的分辨率，进行视频压缩至相应分辨率。不设置自定义码率时有效（仅android支持）
	 *
	 * `compressed` :string : （可选项）合并后的视频分辨率(仅ios支持），如果源视频的分辨率小于设置的常量对应的分辨率，按照原视频的分辨率。
	 */
	videoEditor(params:txShortVideo_videoEditor_Params, callback?: (ret:JSON) => void):void

	/**
	 * `视频合并，仅支持 iOS 平台`
	 * ========params==========
	 *
	 * `videoPaths` :Array : 视频路径，要求本地路径，支持fs、widget
	 *
	 * `outFilePath` :string : （可选项）合并后的视频路径
	 *
	 * `compressed` :string : （可选项）合并后的视频分辨率
	 */
	videoCombine(params:txShortVideo_videoCombine_Params, callback?: (ret:JSON) => void):void

	/**
	 * `视频编辑，仅支持 iOS 平台`
	 * ========params==========
	 *
	 * `path` :string : 视频路径，要求本地路径，支持fs、widget
	 *
	 * `videoOutFilePath` :string : （可选项）编辑后的视频保存路径
	 *
	 * `gifOutFilePath` :string : （可选项）编辑后的 gif 图片保存路径
	 *
	 * `waterMark` :JSON : （可选项）水印
	 *
	 * `compressed` :string : （可选项）编辑后的视频分辨率
	 *
	 * `defaultBgMusic` :string : （可选项）默认背景音乐路径，要求本地路径（fs://），不传则无默认背景音乐
	 */
	videoEdit(params:txShortVideo_videoEdit_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取视频文件信息，仅支持 iOS 平台`
	 * ========params==========
	 *
	 * `path` :string : 视频路径，要求本地路径，支持fs、widget以及绝对路径
	 *
	 * `coverImgPath` :string : （可选项）视频截图保存路径，要求本地路径，支持fs协议
	 */
	getVideoInfo(params:txShortVideo_getVideoInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `视频压缩，仅支持 iOS 平台`
	 * ========params==========
	 *
	 * `path` :string : 视频路径，要求本地路径，支持fs、widget
	 *
	 * `outFilePath` :string : （可选项）压缩后的视频路径
	 *
	 * `bitrate` :number : （可选项）视频码率 单位:kbps
	 *
	 * `compressed` :string : （可选项）合并后的视频分辨率
	 */
	videoCompress(params:txShortVideo_videoCompress_Params, callback?: (ret:JSON) => void):void

	/** 视频压缩监听，仅支持 iOS 平台*/ 
	addVideoCompressListener():void

}
interface txShortVideo_setLicence_Params {
	/**（必填项）从腾讯云平台获取的LicenseUrl。[参考腾讯官方申请说明](https://cloud.tencent.com/document/product/584/20333#1.-.E7.94.B3.E8.AF.B7.E6.B5.8B.E8.AF.95license)*/ 
	licenceURL:string,

	/**（必填项）从腾讯云平台获取的Key。[参考腾讯官方申请说明](https://cloud.tencent.com/document/product/584/20333#1.-.E7.94.B3.E8.AF.B7.E6.B5.8B.E8.AF.95license)*/ 
	licenceKey:string,

}

interface txShortVideo_videoRecord_Params {
	/**（可选项）录制分辨率*/ 
	videoResolution?:number,

	/**（可选项）自定义码率   建议值：600~12000 (SDK上限不再做限制)  单位kbps/s,这里需要注意的是，这里设置的码率只是给编码器一个参考值，实际出来视频的码率是会在这个参考值上下波动的（*/ 
	videoBitratePIN?:number,

	/**（可选项）帧率 （范围：15-30）。*/ 
	videoFPS?:number,

	/**（可选项）关键帧间隔 （范围：1-10）。*/ 
	gop?:number,

	/**（可选项）视频尾部水印logo( ios视频拍摄完成后,预览以及保存后的水印会一直存在)（支持fs:// widget://路径）。*/ 
	logo?:string,

	/**（可选项）视频最短时长(秒)。*/ 
	minDuration?:number,

	/**（可选项）视频最长时间（秒）。*/ 
	maxDuration?:number,

	/**（可选项）是否前置摄像头 （true 前置 fasle 后置）*/ 
	isFront?:boolean,

	/**（可选项）背景音乐库（json文件）*/ 
	localMusicAddress?:string,

	/**（可选项）背景音乐库服务器端URL， 本参数与localMusicAddress互斥，同时传时以本参数为准*/ 
	serverBgMusicUrl?:string,

	/**（可选项）默认背景音乐路径，要求本地路径（fs://），不传则无默认背景音乐*/ 
	defaultBgMusic?:string,

}

interface txShortVideo_uploadLocalVideo_Params {
	/**签名*/ 
	signature:string,

	/**视频地址，支持fs以及原生路径*/ 
	videoPath:string,

	/**（可选项）预览图路径，支持fs以及原生路径*/ 
	coverPath?:string,

	/**用户userId（仅android有效）*/ 
	customKey:string,

}

interface txShortVideo_videoEditor_Params {
	/**（可选项）视频路径，要求本地路径，支持fs。*/ 
	videoPaths?:Array,

	/**（可选项）默认背景音乐路径，要求本地路径（fs://），不传则无默认背景音乐*/ 
	defaultBgMusic?:string,

	/**（可选项）自定义码率，值为0时为不设置自定义码率（仅android支持）*/ 
	bitrate?:number,

	/**（可选项）分辨率，如果源视频的分辨率小于设置的常量对应的分辨率，按照原视频的分辨率。如果源视频的分辨率大于设置的常量对象的分辨率，进行视频压缩至相应分辨率。不设置自定义码率时有效（仅android支持）*/ 
	resolution?:number,

	/**（可选项）合并后的视频分辨率(仅ios支持），如果源视频的分辨率小于设置的常量对应的分辨率，按照原视频的分辨率。*/ 
	compressed?:string,

}

interface txShortVideo_videoCombine_Params {
	/**视频路径，要求本地路径，支持fs、widget*/ 
	videoPaths:Array,

	/**（可选项）合并后的视频路径*/ 
	outFilePath?:string,

	/**（可选项）合并后的视频分辨率*/ 
	compressed?:string,

}

interface txShortVideo_videoEdit_Params {
	/**视频路径，要求本地路径，支持fs、widget*/ 
	path:string,

	/**（可选项）编辑后的视频保存路径*/ 
	videoOutFilePath?:string,

	/**（可选项）编辑后的 gif 图片保存路径*/ 
	gifOutFilePath?:string,

	/**（可选项）水印*/ 
	waterMark?:JSON,

	/**（可选项）编辑后的视频分辨率*/ 
	compressed?:string,

	/**（可选项）默认背景音乐路径，要求本地路径（fs://），不传则无默认背景音乐*/ 
	defaultBgMusic?:string,

}

interface txShortVideo_getVideoInfo_Params {
	/**视频路径，要求本地路径，支持fs、widget以及绝对路径*/ 
	path:string,

	/**（可选项）视频截图保存路径，要求本地路径，支持fs协议*/ 
	coverImgPath?:string,

}

interface txShortVideo_videoCompress_Params {
	/**视频路径，要求本地路径，支持fs、widget*/ 
	path:string,

	/**（可选项）压缩后的视频路径*/ 
	outFilePath?:string,

	/**（可选项）视频码率 单位:kbps*/ 
	bitrate?:number,

	/**（可选项）合并后的视频分辨率*/ 
	compressed?:string,

}

interface polyvVideo {
}
interface hanvonCloudIdCardReader {
	/**
	 * `识别身份证`
	 * ========params==========
	 *
	 * `androidkey` :string : 在汉王云官网申请的android key
	 *
	 * `ioskey` :string : 在汉王云官网申请的ios key
	 *
	 * `picpath` :string : 身份证的存放路径
	 */
	recognitionIdCard(params:hanvonCloudIdCardReader_recognitionIdCard_Params, callback?: (ret:JSON) => void):void

}
interface hanvonCloudIdCardReader_recognitionIdCard_Params {
	/**在汉王云官网申请的android key*/ 
	androidkey:string,

	/**在汉王云官网申请的ios key*/ 
	ioskey:string,

	/**身份证的存放路径*/ 
	picpath:string,

}

interface qiniuRTC {
	/** 初始化 SDK 及 RTC 引擎*/ 
	init():void

	/** 创建本地预览窗口或远端视频窗口*/ 
	renderVideoFrame(callback?: (ret:JSON) => void):void

	/** 移除窗口*/ 
	closeVideoFrame():void

	/** 开启摄像头采集。打开本地预览时，开启采集才会显示。*/ 
	startCapture():void

	/** 关闭摄像头采集*/ 
	stopCapture():void

	/** 切换前后摄像头。*/ 
	toggleCamera():void

	/** 设置视频填充模式*/ 
	setFillMode():void

	/** 设置视频填充模式*/ 
	setSessionPreset():void

	/** 设置采集的视频数据的帧率*/ 
	setVideoFrameRate():void

	/** 后置摄像头，预览是否开启镜像*/ 
	setPreviewMirrorRearFacing():void

	/** 后置摄像头，对方观看时是否开启镜像*/ 
	setEncodeMirrorRearFacing():void

	/** 前置摄像头，对方观看时是否开启镜像*/ 
	setEncodeMirrorFrontFacing():void

	/**  连续自动对焦*/ 
	setContinuousAutofocusEnable():void

	/** 手动点击屏幕进行对焦*/ 
	setTouchToFocusEnable():void

	/** 设置美颜*/ 
	setBeautify():void

	/** 是否静音远端的声音*/ 
	setMuteSpeaker():void

	/** 检查获取摄像头权限*/ 
	checkAndRequestCamera():void

	/** 检查获取麦克风权限*/ 
	checkAndRequestMicrophone():void

	/** 发布本地的音视频到服务器。*/ 
	publish():void

	/** 发布本地的音频到服务器。*/ 
	publishAudio():void

	/** 发布本地的视频到服务器。*/ 
	publishVideo():void

	/** 将本地音频置为 muted 状态。*/ 
	muteAudio():void

	/** 将本地视频置为 muted 状态。*/ 
	muteVideo():void

	/** 取消发布本地的音视频到服务器。*/ 
	unpublish():void

	/** 取消发布本地的音频到服务器。*/ 
	unpublishAudio():void

	/** 取消发布本地的视频到服务器。*/ 
	unpublishVideo():void

	/** 发送消息给 users 数组中的所有 userId*/ 
	sendMessage():void

	/** 添加消息监听*/ 
	addMessageListener():void

	/** 运行过程中发生错误的监听*/ 
	addFailListener():void

	/** 进入房间*/ 
	joinRoom():void

	/** 离开房间*/ 
	leaveRoom():void

	/** 踢出房间*/ 
	kickoutUser():void

	/** 创建合流任务*/ 
	createMergeJob(callback?: (ret:JSON) => void):void

	/** 设置合流布局*/ 
	setMergeStreamLayouts():void

	/** 停止合流*/ 
	stopMergeStream():void

	/** 取消合流布局*/ 
	removeMergeStreamLayouts():void

	/** 远端用户视频首帧解码后的回调*/ 
	addRemoteUserVideoListener():void

	/** 远端用户加入房间的监听*/ 
	addDidJoinListener():void

	/** 房间状态监听*/ 
	addRoomStateListener():void

	/** 自己被踢掉的监听*/ 
	addKickoutListener():void

	/** 有人离开房间的监听*/ 
	addDidLeaveListener():void

	/** 订阅事件*/ 
	addSubscribeListener():void

	/** 初始化美颜功能*/ 
	initEffect():void

	/**
	 * `获取滤镜和贴纸`
	 * ========params==========
	 *
	 * `type` :string : 获取的类型
	 */
	getStickers(params:qiniuRTC_getStickers_Params, callback?: (ret:JSON) => void):void

	/** 设置贴纸*/ 
	setSticker():void

	/** 设置滤镜*/ 
	setFillter():void

	/**
	 * `获取美颜、美型、美体、口红、腮红、修容、美瞳、染发、眼影、眉毛`
	 * ========params==========
	 *
	 * `type` :string : 获取的类型
	 */
	getMakeUp(params:qiniuRTC_getMakeUp_Params, callback?: (ret:JSON) => void):void

	/** 设置多个效果*/ 
	updateMakeups():void

	/** 更新美颜美妆及其强度*/ 
	updateMakeupIntensity():void

	/** 设置特效组合，目前仅支持美颜、美型两种特效的任意叠加*/ 
	setComposeNodes():void

	/** 设置 composer 类型特效（美颜、美妆）是否可以与贴纸特效叠加*/ 
	setComposerMode():void

	/** 更新某个特效的强度*/ 
	updateComposeNode():void

	/** 更新某个特效的强度*/ 
	updateIntensity():void

	/** 获得已经开启的特效节点*/ 
	getComposeNodes():void

	/** 恢复特效设置*/ 
	recoverStatus():void

	/** 释放特效资源*/ 
	destroyEffectSDK():void

	/** 获取支持的滤镜列表*/ 
	getFilterList():void

	/** 获取支持的美型列表*/ 
	getShapeList():void

	/** 获取支持的美妆类型列表*/ 
	getMakeUpList():void

	/** 获取支持的美妆效果集合*/ 
	getMakeUpOptionItems():void

	/** 获取支持的美体列表*/ 
	getBodyList():void

	/** 更新 compose 类型特效列表*/ 
	updateComposeList():void

	/** 更新滤镜列表*/ 
	updateFilterList():void

	/** 更新动态贴纸列表*/ 
	updateStickerList():void

	/** 更新全部特效列表*/ 
	updateAllList():void

	/** 判断是否正在使用特效*/ 
	isUsingEffect():void

	/** 检测 SDK 是否已经初始化完毕*/ 
	isEffectSDKInited():void

}
interface qiniuRTC_getStickers_Params {
	/**获取的类型*/ 
	type:string,

}

interface qiniuRTC_getMakeUp_Params {
	/**获取的类型*/ 
	type:string,

}

interface tslLed {
	/** 初始化串口*/ 
	init(callback?: (ret:JSON) => void):void

	/** 开启心跳*/ 
	startHeart(callback?: (ret:JSON) => void):void

	/** 关闭心跳*/ 
	stopHeart(callback?: (ret:JSON) => void):void

	/** 重启电机板*/ 
	reset(callback?: (ret:JSON) => void):void

	/** 电机转动*/ 
	rotating(callback?: (ret:JSON) => void):void

	/** 电机停止*/ 
	powerStop(callback?: (ret:JSON) => void):void

	/** 电机使能*/ 
	powerRun(callback?: (ret:JSON) => void):void

	/** 电机失能*/ 
	powerDisable(callback?: (ret:JSON) => void):void

	/** 点亮屏幕*/ 
	openScreen(callback?: (ret:JSON) => void):void

	/** 清空屏幕*/ 
	cleanScreen(callback?: (ret:JSON) => void):void

	/** 关闭屏幕*/ 
	closeScreen(callback?: (ret:JSON) => void):void

	/** 显示文字*/ 
	showText(callback?: (ret:JSON) => void):void

	/** 显示文字*/ 
	showImg(callback?: (ret:JSON) => void):void

}
interface aliTradePlus {
	/**
	 * `初始化SDK（调用优先级最高，只需要调用一次）`
	 * ========params==========
	 *
	 * `isVVersion` :string : (可选)设置App版本,可用于标识App版本,服务器若不做处理，可不传
	 *
	 * `isVCode` :string : (可选)设置App标识字段,和isvcode同义,可用于区分使用本SDK的具体App,服务器若不做处理，可不传
	 */
	initSDK(params:aliTradePlus_initSDK_Params, callback?: (ret:JSON) => void):void

	/** 授权登录*/ 
	showLogin():void

	/** 注销*/ 
	logout():void

	/**
	 * `显示商品详情`
	 * ========params==========
	 *
	 * `itemId` :string : 商品id
	 *
	 * `taokePid` :string : 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `openType` :string : 打开页面的方式：拉起手淘和h5打开页面，默认值：auto
	 */
	showItemDetailPage(params:aliTradePlus_showItemDetailPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用url打开商品页面`
	 * ========params==========
	 *
	 * `url` :string : 页面url地址
	 *
	 * `taokePid` :string : 淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）
	 *
	 * `openType` :string : 打开页面的方式：拉起手淘和h5打开页面，默认值：auto
	 */
	showPage(params:aliTradePlus_showPage_Params, callback?: (ret:JSON) => void):void

	/** 打开购物车*/ 
	showCartsPage():void

	/** 打开我的订单*/ 
	showMyOrders():void

	/** 打开店铺*/ 
	showShopPage(callback?: (ret:JSON) => void):void

}
interface aliTradePlus_initSDK_Params {
	/**(可选)设置App版本,可用于标识App版本,服务器若不做处理，可不传*/ 
	isVVersion?:string,

	/**(可选)设置App标识字段,和isvcode同义,可用于区分使用本SDK的具体App,服务器若不做处理，可不传*/ 
	isVCode?:string,

}

interface aliTradePlus_showItemDetailPage_Params {
	/**商品id*/ 
	itemId:string,

	/**淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	taokePid:string,

	/**打开页面的方式：拉起手淘和h5打开页面，默认值：auto*/ 
	openType:string,

}

interface aliTradePlus_showPage_Params {
	/**页面url地址*/ 
	url:string,

	/**淘客 pid （需登录阿里妈妈，实名认证后可获取 pid）*/ 
	taokePid:string,

	/**打开页面的方式：拉起手淘和h5打开页面，默认值：auto*/ 
	openType:string,

}

interface scrollVideo {
	/** 滑动播放器监听*/ 
	addEventListener():void

	/**
	 * `打开滑动播放器`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `userData` :JSON : （必填项）视频播放列表（最少传入1条记录）。
	 *
	 * `position` :number : （可选项）指定从播放列表中的第几条开始播放。
	 */
	openScrollVideo(params:scrollVideo_openScrollVideo_Params, callback?: (ret:JSON) => void):void

	/** 隐藏滑动播放器*/ 
	hideScrollVideo(callback?: (ret:JSON) => void):void

	/** 显示滑动播放器*/ 
	showScrollVideo():void

	/** 关闭滑动播放器*/ 
	closeScrollVideo(callback?: (ret:JSON) => void):void

	/**
	 * `更新当前播放器样式`
	 * ========params==========
	 *
	 * `styles` :Array : （必填项）当前播放器播放的按钮样式更新。
	 */
	updateVideoStyle(params:scrollVideo_updateVideoStyle_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加一条记录`
	 * ========params==========
	 *
	 * `uid` :string : （必填项）播放ID
	 *
	 * `imageUrl` :string : （必填项）播放前的预览图片
	 *
	 * `videoUrl` :any : （必填项）播放的视频地址(支持http,https)
	 *
	 * `isLocalCache` :boolean : （可选项）是否本地缓存视频,音频;直播类不能缓存,开发者自行控制;(备注:iOS虽然缓存在本地了,但是不能完全离线播放;缓存文件在cache://文件目录下). (开启:true ; 不开启:false)
	 *
	 * `scalingMode` :number : （可选项）视频播放显示铺满模式（1:无缩放, 2:适应大小模式, 3:充满可视范围，可能会被裁剪, 4:缩放到充满视图）
	 *
	 * `placeholderColor` :string : （可选项）背景图的背景色。
	 *
	 * `placeholderImage` :string : （可选项）背景图未加载时显示的图片,当该值存在时，placeholderColor无效。
	 *
	 * `imageType` :number : （可选项）背景图渲染类型 0:图片拉伸填充(图片可能会变形) 1:图片拉伸至完全显示(图片不会变形) 2:图片拉伸至完全铺满填充(图片不会变形)
	 *
	 * `styles` :Array : （可选项）当前播放器播放的按钮样式更新。
	 */
	addVideoData(params:scrollVideo_addVideoData_Params, callback?: (ret:JSON) => void):void

	/** 暂停当前视频播放*/ 
	pause(callback?: (ret:JSON) => void):void

	/** 暂停后恢复播放当前视频*/ 
	play(callback?: (ret:JSON) => void):void

	/** 是否播放状态*/ 
	isPlaying():void

	/** 获取播放item总数*/ 
	itemCount():void

	/** 获取视频的时长*/ 
	getDuration():void

	/** 获取已经播放的时长*/ 
	getCurrentPosition():void

	/**
	 * `设置音量`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）播放视频音量0-100。
	 */
	setVolume(params:scrollVideo_setVolume_Params, callback?: (ret:JSON) => void):void

	/** 删除当前播放item(当删除到最后剩余1条记录的时候就不能删除了)*/ 
	delCurrentItem(callback?: (ret:JSON) => void):void

}
interface scrollVideo_openScrollVideo_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）视频播放列表（最少传入1条记录）。*/ 
	userData:JSON,

	/**（可选项）指定从播放列表中的第几条开始播放。*/ 
	position?:number,

}

interface scrollVideo_updateVideoStyle_Params {
	/**（必填项）当前播放器播放的按钮样式更新。*/ 
	styles:Array,

}

interface scrollVideo_addVideoData_Params {
	/**（必填项）播放ID*/ 
	uid:string,

	/**（必填项）播放前的预览图片*/ 
	imageUrl:string,

	/**（必填项）播放的视频地址(支持http,https)*/ 
	videoUrl:any,

	/**（可选项）是否本地缓存视频,音频;直播类不能缓存,开发者自行控制;(备注:iOS虽然缓存在本地了,但是不能完全离线播放;缓存文件在cache://文件目录下). (开启:true ; 不开启:false)*/ 
	isLocalCache?:boolean,

	/**（可选项）视频播放显示铺满模式（1:无缩放, 2:适应大小模式, 3:充满可视范围，可能会被裁剪, 4:缩放到充满视图）*/ 
	scalingMode?:number,

	/**（可选项）背景图的背景色。*/ 
	placeholderColor?:string,

	/**（可选项）背景图未加载时显示的图片,当该值存在时，placeholderColor无效。*/ 
	placeholderImage?:string,

	/**（可选项）背景图渲染类型 0:图片拉伸填充(图片可能会变形) 1:图片拉伸至完全显示(图片不会变形) 2:图片拉伸至完全铺满填充(图片不会变形)*/ 
	imageType?:number,

	/**（可选项）当前播放器播放的按钮样式更新。*/ 
	styles?:Array,

}

interface scrollVideo_setVolume_Params {
	/**（可选项）播放视频音量0-100。*/ 
	volume?:number,

}

interface mgFace {
	/**
	 * `调用联网授权代码进行授权`
	 * ========params==========
	 *
	 * `key` :string : apiKey，访问 [Face++](https://www.faceplusplus.com.cn)官网，登录后在控制台生成对应的key
	 *
	 * `secret` :string : apiSecret，访问 [Face++](https://www.faceplusplus.com.cn)官网，登录后在控制台生成对应的secret
	 *
	 * `url` :string : （可选项）url
	 *
	 * `duration` :string : （可选项）appKey有效期
	 *
	 * `uuid` :string : 手机唯一序号。(有些设备会无法获取，导致授权失败，需要随机写一个值)
	 */
	licenseForNetwork(params:mgFace_licenseForNetwork_Params, callback?: (ret:JSON) => void):void

	/**
	 * `初始化人脸检测器`
	 * ========params==========
	 *
	 * `maxFaceCount` :number : （可选项）一张图像中识别的最大人脸数，设置为1即为单脸跟踪
	 *
	 * `minFaceSize` :number : （可选项）人脸大小,低于 100*100像素的⼈人脸将不不会被检测到
	 *
	 * `orientation` :number : （可选项）旋转⻆角度，取值：0、90、180、270、360, 和视频帧的⽅方向保持一致
	 *
	 * `detectionMode` :number : （可选项）检测类型
	 *
	 * `pixelFormatType` :number : （可选项）视频流格式，注意要和你的视频流格式保持⼀致（仅iOS支持）
	 *
	 * `faceConfidenceFilter` :number : （可选项）置信度低于该值的人脸将会被忽略略, 防⽌止误检
	 *
	 * `ret` :JSON : null
	 */
	initFace(params:mgFace_initFace_Params):void

	/**
	 * `打开视频检测页面`
	 * ========params==========
	 *
	 * `isAlign` :boolean : （可选项）是否绘制脸部关键点
	 */
	openVideoDetection(params:mgFace_openVideoDetection_Params, callback?: (ret:JSON) => void):void

	/** 关闭视频检测页面*/ 
	closeVideoDetection():void

	/** 切换摄像头，当前为前摄像头，切换为后摄像头，当前为后摄像头，切换为前摄像头*/ 
	switchCamera():void

	/**
	 * `检测图片`
	 * ========params==========
	 *
	 * `imagePath` :string : 检测图片路径，支持fs、widget
	 */
	detectImage(params:mgFace_detectImage_Params, callback?: (ret:JSON) => void):void

}
interface mgFace_licenseForNetwork_Params {
	/**apiKey，访问 [Face++](https://www.faceplusplus.com.cn)官网，登录后在控制台生成对应的key*/ 
	key:string,

	/**apiSecret，访问 [Face++](https://www.faceplusplus.com.cn)官网，登录后在控制台生成对应的secret*/ 
	secret:string,

	/**（可选项）url*/ 
	url?:string,

	/**（可选项）appKey有效期*/ 
	duration?:string,

	/**手机唯一序号。(有些设备会无法获取，导致授权失败，需要随机写一个值)*/ 
	uuid:string,

}

interface mgFace_initFace_Params {
	/**（可选项）一张图像中识别的最大人脸数，设置为1即为单脸跟踪*/ 
	maxFaceCount?:number,

	/**（可选项）人脸大小,低于 100*100像素的⼈人脸将不不会被检测到*/ 
	minFaceSize?:number,

	/**（可选项）旋转⻆角度，取值：0、90、180、270、360, 和视频帧的⽅方向保持一致*/ 
	orientation?:number,

	/**（可选项）检测类型*/ 
	detectionMode?:number,

	/**（可选项）视频流格式，注意要和你的视频流格式保持⼀致（仅iOS支持）*/ 
	pixelFormatType?:number,

	/**（可选项）置信度低于该值的人脸将会被忽略略, 防⽌止误检*/ 
	faceConfidenceFilter?:number,

	/**null*/ 
	ret:JSON,

}

interface mgFace_openVideoDetection_Params {
	/**（可选项）是否绘制脸部关键点*/ 
	isAlign?:boolean,

}

interface mgFace_detectImage_Params {
	/**检测图片路径，支持fs、widget*/ 
	imagePath:string,

}

interface pingpp {
	/** 调用 Ping++ SDK*/ 
	createPayment():void

	/** 获取版本号*/ 
	getVersion():void

	/** 设置是否开启 Debug 模式*/ 
	setDebugMode():void

	/** 获取版本号*/ 
	getPingppVersion():void

	/** 设置是否允许使用手机 Pay*/ 
	setSEPay():void

	/** 设置微信支付的 Universal Link*/ 
	setUniversalLink():void

}
interface wapsAd {
	/** 初始化接口，该接口是所有其他接口能正常使用的基础，在每次应用启动时，必须调用该接口进行初始化操作，*/ 
	initInstance(callback?: (ret:JSON) => void):void

	/**
	 * `花费（扣减）用户虚拟货币`
	 * ========params==========
	 *
	 * `amount` :any : 扣减虚拟货币数。
	 */
	spendPoints(params:wapsAd_spendPoints_Params, callback?: (ret:JSON) => void):void

	/**
	 * `奖励（增加）用户虚拟货币`
	 * ========params==========
	 *
	 * `amount` :any : 扣减虚拟货币数。
	 */
	awardPoints(params:wapsAd_awardPoints_Params, callback?: (ret:JSON) => void):void

	/** 积分墙接口，积分墙（也称 Offer，广告墙）是万普平台提供的一种集中展示型广告。开发者可在应用中合适的位*/ 
	showOffers(callback?: (ret:JSON) => void):void

	/** 游戏积分墙接口*/ 
	showGameOffers(callback?: (ret:JSON) => void):void

	/** 设置关闭积分墙的监听接口，必须在showOffers接口之前调用*/ 
	setOffersCloseListener(callback?: (ret:JSON) => void):void

	/** 互动广告接口，互动广告是一个显示在应用内固定位置高度为 50 像素广告条，将自动显示万普平台提供的广告。结*/ 
	showBannerAd(callback?: (ret:JSON) => void):void

	/** 插屏广告是推出的一种新型广告形式，以全屏对话框的新式显示广告，支持透明*/ 
	showPopAd(callback?: (ret:JSON) => void):void

	/** 自定义广告接口，<font color=#DC143C size=3>初始化（预先加载）广告数据，必须首先调用</font>，开发者可通过自定义广告，广告接口获取所有可用广告的元数据，自定义广告的展现方式，便于让广告内容完全和您的应用 UI 融合，可显著提升广告效果。*/ 
	initAdInfo():void

	/** 归属自定义广告接口，获取所有可用广告的元数据，<font color=#DC143C size=3>必须在初始化（initAdInfo）方法后使用</font>*/ 
	getAdInfoList(callback?: (ret:JSON) => void):void

	/** 归属自定义广告接口，随机获取一条广告的元数据，<font color=#DC143C size=3>必须在初始化（initAdInfo）方法后使用</font>*/ 
	getAdInfo(callback?: (ret:JSON) => void):void

	/**
	 * `归属自定义广告接口，当广告被点击时，显示广告详情`
	 * ========params==========
	 *
	 * `adId` :string : 广告ID。
	 */
	clickAd(params:wapsAd_clickAd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `当用户确认要下载广告应用时，启动下载（仅适用于应用下载类广告）`
	 * ========params==========
	 *
	 * `adId` :string : 广告ID。
	 */
	downloadAd(params:wapsAd_downloadAd_Params, callback?: (ret:JSON) => void):void

}
interface wapsAd_spendPoints_Params {
	/**扣减虚拟货币数。*/ 
	amount:any,

}

interface wapsAd_awardPoints_Params {
	/**扣减虚拟货币数。*/ 
	amount:any,

}

interface wapsAd_clickAd_Params {
	/**广告ID。*/ 
	adId:string,

}

interface wapsAd_downloadAd_Params {
	/**广告ID。*/ 
	adId:string,

}

interface clSDKShanYanSDKModule {
	/** 初始化方法<br />init({appid:'loXN4jDs'},function(ret,err))*/ 
	init():void

	/** 预取号方法<br />preLogin(function(ret, err){});*/ 
	preLogin():void

	/** 拉起授权页方法<br />openActivity(param,function(ret, err){})*/ 
	openActivity():void

	/** 销毁授权页方法<br />finishAuthActivity()<br />*/ 
	finishAuthActivity():void

	/** 本机号校验方法<br />startAuthentication(function(ret, err){})*/ 
	startAuthentication():void

	/** ios预取号方法<br /> preGetPhonenumber(callBack:function)*/ 
	preGetPhonenumber():void

	/** ios拉起授权页方法<br />quickAuthLoginWithConfigure(clUIConfigure)*/ 
	quickAuthLoginWithConfigure():void

	/** 销毁授权页方法<br />finishAuthControllerCompletion()<br />*/ 
	finishAuthControllerCompletion():void

	/** 本机号校验方法<br />startAuthentication(function(ret, err){})*/ 
	startAuthentication():void

}
interface qiniuShortVideo {
	/**
	 * `视频拍摄配置。`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）播放器的位置及尺寸
	 *
	 * `beauty` :JSON : (可选项)美颜设置 （暂仅支持Android）
	 *
	 * `fixedOn` :string : （可选项）摄像头的预览视图添加到指定窗口的名字
	 *
	 * `fixed` :boolean : （可选项）摄像头的预览视图是否随所属 window 或 frame 滚动
	 *
	 * `maxDuration` :number : （可选项）视频录制的最大时长，单位为秒
	 *
	 * `minDuration` :number : （可选项）视频录制的最短时间，单位为秒；(android不支持)
	 *
	 * `innerFocusViewShowEnable` :boolean : （可选项）手动对焦的视图动画；(android不支持)
	 *
	 * `continuousAutofocusEnable` :boolean : （可选项）连续自动对焦；(android不支持)
	 *
	 * `touchToFocusEnable` :boolean : （可选项）手动点击屏幕进行对焦；(android不支持)
	 *
	 * `smoothAutoFocusEnabled` :boolean : （可选项）该属性适用于视频拍摄过程中用来减缓因自动对焦产生的镜头伸缩，使画面不因快速的对焦而产生抖动感；(android暂不支持)
	 *
	 * `outputFileType` :string : （可选项）视频的文件类型;android只支持mp4
	 *
	 * `videoFrameRate` :number : （可选项）采集的视频数据的帧率
	 *
	 * `cameraPreviewSizeLevel` :string : （可选项）设置采集画面的分辨率 (ios不支持)
	 *
	 * `cameraPreviewSizeRatio` :string : （可选项）设置采集画面的长宽比 (ios不支持)
	 *
	 * `videoSize` :string : （可选项）设置编码视频的分辨率
	 *
	 * `encodingBitrate` :number : （可选项）视频编码码率；单位Kbps；(ios不支持)
	 *
	 * `hwCodeEnable` :boolean : （可选项）是否开启 H.264 硬编  (ios不支持)
	 *
	 * `channelConfig` :number : （可选项）音频声道  (ios不支持)
	 *
	 * `channels` :number : （可选项）音频声道数量；目前只支持 1 (默认) 和 2，分别对应 channelConfig 声道设置的 1 与 2  (ios不支持)
	 *
	 * `fillMode` :string : (可选项)预览比例；(ios不支持)
	 *
	 * `fileName` :string : (可选项)生成文件的名称,只是一个名称，不是路径，如果不写，模块随机生成一个,(ios不支持)
	 *
	 * `sessionPreset` :number : (可选项)采集时的画幅分辨率大小，需要注意的是指定分辨率的 sessionPreset 例如 1920x1080 并非所有机型的所有摄像头均支持，在设置相应的采集分辨率之前请务必保证做过充分的机型适配测试，避免在某些机型使用该机型摄像头不支持的 sessionPreset。另外，如果使用只指定采集质量的 sessionPreset，例如 medium，那系统会根据当前摄像头的支持情况使用相应质量等级的分辨率进行采集。此参数仅支持iOS
	 */
	configuration(params:qiniuShortVideo_configuration_Params):void

	/** 开启音视频采集。*/ 
	startCaptureSession():void

	/** 停止音视频采集（Android 不支持该方法）*/ 
	stopCaptureSession():void

	/** 开始录制视频。*/ 
	startRecording():void

	/** 停止录制视频。*/ 
	stopRecording():void

	/** 取消录制会停止视频录制并删除已经录制的视频段文件(包括本地视频文件)，可以再调用startRecording和stopRecording进行录制，录制时间从零算起。*/ 
	cancelRecording():void

	/** 显示摄像头的预览视图。*/ 
	showPreviewView():void

	/** 隐藏摄像头的预览视图。*/ 
	hidePreviewView():void

	/** 关闭视频拍摄功能，并移除摄像头的预览视图，如需启用视频拍摄功能需要重新调用configuration接口。*/ 
	closeVideoRecorder():void

	/**
	 * `设置摄像头的预览视图的坐标。`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）播放器的位置及尺寸
	 */
	setPreviewViewRect(params:qiniuShortVideo_setPreviewViewRect_Params):void

	/** 获取录制的视频段的总数目（从调用configuration接口算起）。*/ 
	getFilesCount():void

	/** 获取所有录制的视频段加起来的总时长（从调用configuration接口算起）。*/ 
	getTotalDuration():void

	/** 获取所有录制的视频段的地址（从调用configuration接口算起）。*/ 
	getAllFiles():void

	/** 删除所有录制的视频段，从调用configuration接口算起(也会将本地存储的视频删除，如再次调用startRecording进行录制，录制时间从零算起)。*/ 
	deleteAllFiles():void

	/** 删除上一个录制的视频段(也会将本地存储的视频删除，删除的视频段的时长也会从总时长中减去）。*/ 
	deleteLastFile():void

	/** 获取是否开启闪光灯状态。*/ 
	isTorchOn():void

	/**
	 * `开启或关闭闪光灯。`
	 * ========params==========
	 *
	 * `torchOn` :boolean : （可选项）开启或关闭闪光灯
	 */
	torchOn(params:qiniuShortVideo_torchOn_Params):void

	/** 切换前置／后置摄像头。*/ 
	toggleCamera():void

	/**
	 * `开启或关闭美颜功能。`
	 * ========params==========
	 *
	 * `on` :boolean : （可选项）开启或关闭美颜功能
	 */
	setBeautifyModeOn(params:qiniuShortVideo_setBeautifyModeOn_Params):void

	/**
	 * `设置对应 Beauty 的程度参数。`
	 * ========params==========
	 *
	 * `beautify` :number : （可选项）设置对应 Beauty 的程度参数，beautify 范围从 0 ~ 1，0 为不美颜
	 */
	setBeautify(params:qiniuShortVideo_setBeautify_Params):void

	/**
	 * `设置美白程度（注意：如果美颜不开启，设置美白程度参数无效）。`
	 * ========params==========
	 *
	 * `whiten` :number : （可选项）设置美白程度，范围是从 0 ~ 1，0 为不美白
	 */
	setWhiten(params:qiniuShortVideo_setWhiten_Params):void

	/**
	 * `设置红润的程度参数（注意：如果美颜不开启，设置美白程度参数无效）。`
	 * ========params==========
	 *
	 * `redden` :number : （可选项）设置红润的程度参数，范围是从 0 ~ 1，0 为不红润
	 */
	setRedden(params:qiniuShortVideo_setRedden_Params):void

	/**
	 * `开启水印。`
	 * ========params==========
	 *
	 * `origin` :JSON : （可选项）水印图片位置
	 *
	 * `path` :string : 用于设置水印的图片路径，要求本地路径（widget://、fs://）
	 */
	setWaterMark(params:qiniuShortVideo_setWaterMark_Params):void

	/** 移除水印。*/ 
	clearWaterMark():void

	/** 是否处于录制状态。*/ 
	isRecording():void

	/**
	 * `设置视频拍摄速率，处于录制状态时，设置该值无效。`
	 * ========params==========
	 *
	 * `recoderRate` :string : （可选项）设置视频拍摄速率
	 */
	recoderRate(params:qiniuShortVideo_recoderRate_Params):void

	/**
	 * `摄像头预览视图中视频的填充方式。`
	 * ========params==========
	 *
	 * `fillMode` :string : （可选项）填充方式
	 */
	fillMode(params:qiniuShortVideo_fillMode_Params):void

	/**
	 * `获取视频／音频文件的总时长。`
	 * ========params==========
	 *
	 * `path` :string : 视频／音频文件的路径，要求本地路径（widget://、fs://）(android不支持widget)
	 */
	getFileDuration(params:qiniuShortVideo_getFileDuration_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开滤镜选择视图。`
	 * ========params==========
	 *
	 * `y` :number : （可选项）滤镜左上角的 y 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `useChinese` :boolean : 滤镜名称是否使用中文
	 *
	 * `fixedOn` :string : （可选项）滤镜选择视图添加到指定窗口的名字
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openFilterSelectView(params:qiniuShortVideo_openFilterSelectView_Params):void

	/** 显示滤镜选择视图。*/ 
	showFilterSelectView():void

	/** 隐藏滤镜选择视图。*/ 
	hideFilterSelectView():void

	/** 关闭滤镜选择视图。*/ 
	closeFilterSelectView():void

	/** 获取滤镜视图的高度。*/ 
	getFilterViewHeight():void

	/** 获取滤镜信息。*/ 
	getFilterInfo():void

	/**
	 * `根据索引给摄像头预览视图设置滤镜。`
	 * ========params==========
	 *
	 * `index` :number : （可选项）滤镜索引,(android不支持)
	 */
	addFilter(params:qiniuShortVideo_addFilter_Params):void

	/**
	 * `配置视频编辑预览视图。`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）播放器的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）视频编辑预览视图添加到指定窗口的名字
	 *
	 * `fixed` :boolean : （可选项）视频编辑预览视图是否随所属 window 或 frame 滚动
	 *
	 * `videoSize` :JSON : （可选项）编辑时的预览分辨率；(android不支持，可以设置填充模式来改变预览大小)
	 *
	 * `timeRange` :JSON : （可选项）播放文件的 timeRange 范围
	 *
	 * `loopEnabled` :boolean : （可选项）循环播放
	 *
	 * `path` :string : （可选项）视频文件的路径，要求本地路径（widget://、fs://）(android不支持widget)
	 *
	 * `fileName` :string : (可选项)生成文件的名称,只是一个名称，不是路径，如果不写，模块随机生成一个,(ios不支持)
	 *
	 * `rateType` :number : (可选项)设置编辑后生成视频的倍速；（ios不支持）
	 *
	 * `fillMode` :string : (可选项)预览比例；(ios不支持)
	 */
	configurationVideoEditor(params:qiniuShortVideo_configurationVideoEditor_Params):void

	/** 加载编辑信息，实时预览编辑效果。*/ 
	startEditing():void

	/** 停止实时预览编辑效果，效果上相当于暂停，调用startEditing可继续。*/ 
	stopEditing():void

	/** 显示视频编辑预览视图。*/ 
	showVideoEditor():void

	/** 隐藏视频编辑预览视图。*/ 
	hideVideoEditor():void

	/** 关闭视频编辑预览视图,若再次使用此功能需要重新调用configurationVideoEditor接口。*/ 
	closeVideoEditor():void

	/**
	 * `设置视频编辑预览视图的坐标。`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）视频编辑预览视图的位置及尺寸
	 */
	setVideoEditorRect(params:qiniuShortVideo_setVideoEditorRect_Params):void

	/**
	 * `视频编辑预览视图的填充方式。`
	 * ========params==========
	 *
	 * `fillMode` :string : （可选项）填充方式
	 */
	editorFillMode(params:qiniuShortVideo_editorFillMode_Params):void

	/**
	 * `设置视频的预览分辨率。`
	 * ========params==========
	 *
	 * `videoSize` :JSON : （可选项）视频的预览分辨率
	 */
	setVideoSize(params:qiniuShortVideo_setVideoSize_Params):void

	/**
	 * `视频编辑时设置原音（前景）和混音（背景）音量。`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）音量 取值范围：0.0 - 1.0
	 *
	 * `bgVolume` :number : （可选项）背景音量 取值范围：0.0 - 1.0
	 */
	setVolume(params:qiniuShortVideo_setVolume_Params):void

	/** 视频编辑时获取原视频的音量。*/ 
	getVolume():void

	/**
	 * `视频编辑时开启水印。`
	 * ========params==========
	 *
	 * `origin` :JSON : （可选项）水印图片位置
	 *
	 * `path` :string : 用于设置水印的图片路径，要求本地路径（widget://、fs://）
	 */
	editorSetWaterMark(params:qiniuShortVideo_editorSetWaterMark_Params):void

	/** 视频编辑时移除水印。*/ 
	editorClearWaterMark():void

	/**
	 * `视频编辑时添加背景音乐。`
	 * ========params==========
	 *
	 * `timeRange` :JSON : （可选项）播放文件的 timeRange 范围
	 *
	 * `musicPath` :string : 音频文件的路径，要求本地路径（widget://、fs://）(android只支持fs)
	 */
	addMusic(params:qiniuShortVideo_addMusic_Params):void

	/**
	 * `视频编辑时更新背景音乐。`
	 * ========params==========
	 *
	 * `timeRange` :JSON : （可选项）播放文件的 timeRange 范围
	 *
	 * `volume` :number : （可选项）音量
	 */
	updateMusic(params:qiniuShortVideo_updateMusic_Params):void

	/** 视频编辑时获取背景音乐的音量。*/ 
	getMusicVolume():void

	/**
	 * `视频编辑时添加 MV 图层。`
	 * ========params==========
	 *
	 * `colorPath` :string : (可选项)彩色层视频的路径，要求本地路径（widget://、fs://）(android只支持fs)
	 *
	 * `alphaPath` :string : (可选项)被彩色层当作透明层的视频的路径，要求本地路径（widget://、fs://）(android只支持fs)
	 */
	addMVLayer(params:qiniuShortVideo_addMVLayer_Params):void

	/**
	 * `视频编辑时添加滤镜。`
	 * ========params==========
	 *
	 * `colorImagePath` :string : (可选项)当前使用的滤镜的颜色表图的路径，要求本地路径（widget://、fs://）(android只支持fs)
	 */
	editorAddFilter(params:qiniuShortVideo_editorAddFilter_Params):void

	/**
	 * `视频编辑时替换当前编辑的视频。`
	 * ========params==========
	 *
	 * `timeRange` :JSON : （可选项）视频的 timeRange 范围
	 *
	 * `path` :string : 视频文件的路径，要求本地路径（widget://、fs://）
	 */
	replaceCurrentAsset(params:qiniuShortVideo_replaceCurrentAsset_Params):void

	/** 保存编辑的视频。*/ 
	saveVideo():void

	/**
	 * `时光倒流初始化。`
	 * ========params==========
	 *
	 * `path` :string : （可选项）视频文件的路径，要求本地路径（widget://、fs://）
	 */
	configurationReverserEffect(params:qiniuShortVideo_configurationReverserEffect_Params):void

	/** 执行时光倒流。*/ 
	startReversing():void

	/** 是否处于执行时光倒流状态。*/ 
	isReversing():void

	/**
	 * `倍速特效，并显示在实时预览编辑窗口上，必须调用过configurationVideoEditor接口。`
	 * ========params==========
	 *
	 * `timeRange` :JSON : （可选项）倍数处理时间段
	 *
	 * `path` :string : （可选项）视频文件的路径，要求本地路径（widget://、fs://）
	 *
	 * `rateType` :string : （可选项）倍数处理的类型
	 */
	scaleAsset(params:qiniuShortVideo_scaleAsset_Params, callback?: (ret:JSON) => void):void

	/**
	 * `视频合成导出。（android不支持视频合成的功能，视频合成的功能由视频编辑接口来完成）`
	 * ========params==========
	 *
	 * `isExportMovieToPhotosAlbum` :boolean : （可选项）是否将视频导出到相册
	 *
	 * `outputFileType` :string : （可选项）视频导出的文件类型
	 *
	 * `outputVideoSize` :JSON : （可选项）视频导出的分辨率
	 *
	 * `colorPath` :string : (可选项)彩色层视频的路径，要求本地路径（widget://、fs://）
	 *
	 * `alphaPath` :string : (可选项)被彩色层当作透明层的视频的路径，要求本地路径（widget://、fs://）
	 *
	 * `colorImagePath` :string : (可选项)当前使用的滤镜的颜色表图的路径，要求本地路径（widget://、fs://）
	 *
	 * `path` :string : （可选项）视频文件的路径，要求本地路径（widget://、fs://）
	 *
	 * `rateType` :string : （可选项）倍速特效，倍数处理的类型
	 *
	 * `scaleTimeRange` :JSON : （可选项）倍速特效，倍数处理时间段。设置rateType参数后此参数才有效
	 *
	 * `movieSettings` :JSON : （可选项）视频信息
	 *
	 * `audioSettings` :JSON : （可选项）背景音乐设置
	 *
	 * `waterMarkSettings` :JSON : （可选项）水印设置
	 */
	assetExport(params:qiniuShortVideo_assetExport_Params):void

	/** 取消视频导出。（android不支持视频合成的功能，视频合成的功能由视频编辑接口来完成）*/ 
	cancelAssetExport():void

	/** 获取视频导出的进度。（android不支持视频合成的功能，视频合成的功能由视频编辑接口来完成）*/ 
	getAssetExportProgress():void

	/**
	 * `视频转码。（android获取保存结果请添加transcoder监听）`
	 * ========params==========
	 *
	 * `path` :string : 视频文件的路径，要求本地路径（widget://、fs://）(android只支持fs)
	 *
	 * `isExportMovieToPhotosAlbum` :boolean : （可选项）是否将视频导出到相册；(android不支持)
	 *
	 * `outputFileType` :string : （可选项）视频导出的文件类型；(android只支持mp4)
	 *
	 * `outputFilePreset` :string : （可选项）转码后视频的质量；(android不支持)
	 *
	 * `timeRange` :JSON : （可选项）需要转码的视频时间段；(android不支持)
	 *
	 * `destSize` :JSON : (可选项)转码后的视频分辨率；(ios不支持)
	 *
	 * `destBitrate` :number : (可选项)视频转码后的码率；单位：Kbps；(ios不支持)
	 *
	 * `fileName` :string : (可选项)生成文件的名称,只是一个名称，不是路径，如果不写，模块随机生成一个,(ios不支持)
	 *
	 * `reverse ` :boolean : (可选项)是否进行时光倒流（视频倒置）(ios不支持)
	 */
	transcoder(params:qiniuShortVideo_transcoder_Params):void

	/** 取消转码流程。*/ 
	cancelTranscoding():void

	/** 获取视频转码的进度。(android不支持，获取进度请添加transcoder监听)*/ 
	transcodingProgress():void

	/**
	 * `多个视频拼接。`
	 * ========params==========
	 *
	 * `paths` :Array : 存放视频文件路径的数组，视频个数需要一个以上
	 *
	 * `isExportMovieToPhotosAlbum` :boolean : （可选项）是否将视频导出到相册（android不支持）
	 *
	 * `outputFileType` :string : （可选项）视频导出的文件类型；（android只支持mp4）
	 *
	 * `videoSize` :JSON : （可选项）拼接后视频的分辨率;(由于SDK的限制，android暂不支持自定义分辨率，开发者请从sizeLevel属性中选择分辨率)
	 *
	 * `sizeLevel ` :string : 拼接后视频的分辨率;（ios不支持）
	 *
	 * `videoFrameRate` :number : （可选项）拼接后视频数据的帧率
	 *
	 * `bitrate` :number : （可选项）拼接后视频的码率
	 *
	 * `fileName` :string : (可选项)生成文件的名称,只是一个名称，不是路径，如果不写，模块随机生成一个,(ios不支持)
	 */
	movieCompose(params:qiniuShortVideo_movieCompose_Params):void

	/** 停止视频拼接。*/ 
	stopComposing():void

	/**
	 * `视频帧／图片生成 GIF 动图。`
	 * ========params==========
	 *
	 * `images` :Array : 存放图片路径的数组，图片个数需要2个或以上（android此字段可以存放视频路径，如果有多个只取第一个路径，只支持mp4类型的视频）
	 *
	 * `gifName` :string : （可选项）Gif 的名称；
	 *
	 * `interval` :number : （可选项）Gif 动图每帧间隔设置
	 *
	 * `isLoop` :boolean : （可选项）gif是否循环；（ios不支持）
	 */
	composeGif(params:qiniuShortVideo_composeGif_Params):void

	/** 取消合成 Gif 动图。*/ 
	cancelComposeGif():void

	/**
	 * `展示 GIF 图。`
	 * ========params==========
	 *
	 * `images` :Array : 存放图片路径的数组，图片个数需要2个或以上
	 *
	 * `interval` :number : （可选项）Gif 动图每帧间隔设置
	 *
	 * `rect` :JSON : （可选项）Gif展示视图的位置及尺寸
	 *
	 * `repeatCount` :number : （可选项）gif播放重复次数，0 为无限循环
	 *
	 * `fixedOn` :string : （可选项）Gif展示视图添加到指定窗口的名字
	 *
	 * `fixed` :boolean : （可选项）Gif展示视图是否随所属 window 或 frame 滚动
	 */
	loadGif(params:qiniuShortVideo_loadGif_Params):void

	/** 移除展示的 GIF 图。*/ 
	removeGif():void

	/**
	 * `录屏。(由于七牛短视频sdk和引擎的原因，录屏功能android暂不支持)`
	 * ========params==========
	 *
	 * `maxDuration` :number : （可选项）录屏的最大时长，单位为秒
	 *
	 * `fixedOn` :string : （可选项） 录屏的窗口的名称
	 *
	 * `videoFrameRate` :number : （可选项）帧率
	 */
	viewRecorder(params:qiniuShortVideo_viewRecorder_Params, callback?: (ret:JSON) => void):void

	/** 停止录屏。*/ 
	stopViewRecorder():void

	/**
	 * `视频上传。`
	 * ========params==========
	 *
	 * `path` :string : 视频文件的路径，要求本地路径（widget://、fs://）(android不支持widget)
	 *
	 * `token` :string : 上传视频空间 token
	 *
	 * `videoKey` :string : （可选项）上传视频空间设置的 key
	 *
	 * `https` :boolean : （可选项）上传视频空间是否需要设置为 https 上传, true 为 https 上传，false 为 http 上传
	 */
	uploadVideoFile(params:qiniuShortVideo_uploadVideoFile_Params):void

	/** 取消上传。*/ 
	cancelUpload():void

	/**
	 * `添加监听。`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件的名字
	 */
	addEventListener(params:qiniuShortVideo_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除监听。`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件的名称
	 */
	removeEventListener(params:qiniuShortVideo_removeEventListener_Params):void

	/** 清除保存在本地的所有视频文件。(android只是清除本模块生成的视频文件，生成的视频文件都保存在sd卡根目录下面的ShortVideo文件夹中)*/ 
	clearCache():void

	/**
	 * `打开贴图页面（该功能需要七牛授权）。`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）贴图页面的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）摄像头的预览视图添加到指定窗口的名字
	 *
	 * `fixed` :boolean : （可选项）摄像头的预览视图是否随所属 window 或 frame 滚动
	 */
	openStickerPanelView(params:qiniuShortVideo_openStickerPanelView_Params):void

	/** 关闭贴图页面。*/ 
	closeStickerPanelView():void

	/**
	 * `剪辑视频。`
	 * ========params==========
	 *
	 * `path` :string : 源视频文件路径。支持fs,widget（android只支持fs）
	 *
	 * `begin` :number : 起始时间戳；单位：秒
	 *
	 * `end` :number : 结束时间戳；单位：秒
	 *
	 * `outPath` :string : 目标视频文件路径；iOS不支持此参，iOS根据outputFileType参数自动返回对应格式视频文件路径
	 *
	 * `mode` :string : 剪辑模式； 取值范围：ACCURATE(精准模式)、 FAST(快速模式)，iOS不支持此参数
	 *
	 * `isExportMovieToPhotosAlbum` :boolean : （可选项）是否将视频导出到相册，android不支持此参数
	 *
	 * `outputFileType` :string : （可选项）视频导出的文件类型，android不支持此参数
	 *
	 * `outputVideoSize` :JSON : （可选项）视频导出的分辨率，android不支持此参数
	 */
	cutVideo(params:qiniuShortVideo_cutVideo_Params, callback?: (ret:JSON) => void):void

	/** 取消剪辑视频。*/ 
	cancelCutVideo():void

	/**
	 * `获取视频帧。`
	 * ========params==========
	 *
	 * `path` :string : 源视频文件路径。支持fs,widget（android只支持fs）
	 *
	 * `outPath` :string : 图片保存路径；支持fs,widget（android只支持fs）
	 *
	 * `count` :number : 返回多少张图片,数字根据视频质量可能不大准确,张数如果大于视频帧数则返回数小于count设定的值, android不支持此参数
	 *
	 * `keyFrame` :boolean : 是否限定返回关键帧,iOS不支持此参数
	 *
	 * `width` :number : 帧宽度,iOS不支持此参数
	 *
	 * `height` :number : 帧高度
	 */
	getVideoFrame(params:qiniuShortVideo_getVideoFrame_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通过时间获取视频帧。`
	 * ========params==========
	 *
	 * `path` :string : 源视频文件路径。支持fs
	 *
	 * `outPath` :string : 图片保存路径；支持fs
	 *
	 * `time` :number : 要获取的视频帧所在的时间；单位：毫秒
	 *
	 * `keyFrame` :boolean : 是否限定返回关键帧
	 *
	 * `width` :number : 帧宽度
	 *
	 * `height` :number : 帧高度
	 */
	getVideoFrameByTime(params:qiniuShortVideo_getVideoFrameByTime_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加载视频草稿（即拍摄了一段视频保存到了草稿箱，在下次拍摄时，可以从草稿箱读取视频继续拍摄或编辑）`
	 * ========params==========
	 *
	 * `path` :string : 视频草稿文件路径。支持fs,widget（android只支持fs）
	 */
	insertVideo(params:qiniuShortVideo_insertVideo_Params):void

	/**
	 * `微整形。`
	 * ========params==========
	 *
	 * `key` :string : （可选项）参数 key
	 *
	 * `precent` :number : 参数值
	 */
	microPlastic(params:qiniuShortVideo_microPlastic_Params):void

	/** 取消所有微整形。*/ 
	cancelMicroPlastic():void

	/**
	 * `设置预览屏幕大小和分辨率（注意，录制的时候不可设置）。`
	 * ========params==========
	 *
	 * `size` :JSON : （可选项）预览屏幕原大小
	 *
	 * `videoSize` :JSON : （可选项）编码视频的视频的分辨率,需要注意的是，这个参数影响的是视频编码时的分辨率，而非摄像头采集到数据的预览大小，传递给编码器的图像尺寸与此尺寸不同时，会按照AVVideoScalingModeResizeAspectFill对图像做剪切，从而确保图像不会出现压缩的现象。
	 */
	previewSize(params:qiniuShortVideo_previewSize_Params):void

	/**
	 * `图片、GIF 图和视频混排。`
	 * ========params==========
	 *
	 * `medias` :Array : 存放图片、GIF 图和视频的数组
	 *
	 * `videoSize` :JSON : （可选项）合成视频文件的分辨率（仅iOS支持）
	 *
	 * `androidVideoSize` :number : （可选项）合成文件分辨率
	 *
	 * `outputFileType` :string : （可选项）视频导出的文件类型（仅iOS支持）
	 *
	 * `videoFrameRate` :number : （可选项）合成视频文件的帧率
	 *
	 * `bitrate` :number : （可选项）合成视频文件的码率
	 *
	 * `isExportMovieToPhotosAlbum` :boolean : （可选项）是否将视频导出到相册（仅iOS支持）
	 *
	 * `disableTransition` :boolean : （可选项）是否禁用转场（仅iOS支持）
	 *
	 * `transitionDuration` :number : （可选项）转场动画持续的时长，默认为 1.0，即 1 秒. 如果 transitionDuration 的值大于合并的视频中最短时长，则将使用合并的视频中最短视频的时长作为转场动画的时长。仅当 disableTransition 为 false 的时候，transitionDuration 才生效
	 *
	 * `musicURL` :string : （可选项）背景音乐的路径，要求本地路径，支持fs、widget
	 *
	 * `musicVolume` :number : （可选项）背景音乐音量，取值范围(0 ~ 1.0)
	 *
	 * `movieVolume` :number : （可选项）原视频的音量，取值范围(0 ~ 1.0)
	 *
	 * `transitionType` :number : （可选项）转场类型。仅当 disableTransition 为 false 的时候，transitionType 才生效（仅iOS支持）
	 *
	 * `composerPriorityType` :number : （可选项）拼接策略. 仅当 disableTransition 为 false 的时候，composerPriorityType 才生效
	 *
	 * `outVideoPath` :string : 输出视频路径，支持fs路径（仅android支持）
	 */
	imageVideoComposer(params:qiniuShortVideo_imageVideoComposer_Params):void

	/** 停止图片、GIF 图和视频混排。*/ 
	stopImageVideoComposer():void

}
interface qiniuShortVideo_configuration_Params {
	/**（可选项）播放器的位置及尺寸*/ 
	rect?:JSON,

	/**(可选项)美颜设置 （暂仅支持Android）*/ 
	beauty?:JSON,

	/**（可选项）摄像头的预览视图添加到指定窗口的名字*/ 
	fixedOn?:string,

	/**（可选项）摄像头的预览视图是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）视频录制的最大时长，单位为秒*/ 
	maxDuration?:number,

	/**（可选项）视频录制的最短时间，单位为秒；(android不支持)*/ 
	minDuration?:number,

	/**（可选项）手动对焦的视图动画；(android不支持)*/ 
	innerFocusViewShowEnable?:boolean,

	/**（可选项）连续自动对焦；(android不支持)*/ 
	continuousAutofocusEnable?:boolean,

	/**（可选项）手动点击屏幕进行对焦；(android不支持)*/ 
	touchToFocusEnable?:boolean,

	/**（可选项）该属性适用于视频拍摄过程中用来减缓因自动对焦产生的镜头伸缩，使画面不因快速的对焦而产生抖动感；(android暂不支持)*/ 
	smoothAutoFocusEnabled?:boolean,

	/**（可选项）视频的文件类型;android只支持mp4*/ 
	outputFileType?:string,

	/**（可选项）采集的视频数据的帧率*/ 
	videoFrameRate?:number,

	/**（可选项）设置采集画面的分辨率 (ios不支持)*/ 
	cameraPreviewSizeLevel?:string,

	/**（可选项）设置采集画面的长宽比 (ios不支持)*/ 
	cameraPreviewSizeRatio?:string,

	/**（可选项）设置编码视频的分辨率*/ 
	videoSize?:string,

	/**（可选项）视频编码码率；单位Kbps；(ios不支持)*/ 
	encodingBitrate?:number,

	/**（可选项）是否开启 H.264 硬编  (ios不支持)*/ 
	hwCodeEnable?:boolean,

	/**（可选项）音频声道  (ios不支持)*/ 
	channelConfig?:number,

	/**（可选项）音频声道数量；目前只支持 1 (默认) 和 2，分别对应 channelConfig 声道设置的 1 与 2  (ios不支持)*/ 
	channels?:number,

	/**(可选项)预览比例；(ios不支持)*/ 
	fillMode?:string,

	/**(可选项)生成文件的名称,只是一个名称，不是路径，如果不写，模块随机生成一个,(ios不支持)*/ 
	fileName?:string,

	/**(可选项)采集时的画幅分辨率大小，需要注意的是指定分辨率的 sessionPreset 例如 1920x1080 并非所有机型的所有摄像头均支持，在设置相应的采集分辨率之前请务必保证做过充分的机型适配测试，避免在某些机型使用该机型摄像头不支持的 sessionPreset。另外，如果使用只指定采集质量的 sessionPreset，例如 medium，那系统会根据当前摄像头的支持情况使用相应质量等级的分辨率进行采集。此参数仅支持iOS*/ 
	sessionPreset?:number,

}

interface qiniuShortVideo_setPreviewViewRect_Params {
	/**（可选项）播放器的位置及尺寸*/ 
	rect?:JSON,

}

interface qiniuShortVideo_torchOn_Params {
	/**（可选项）开启或关闭闪光灯*/ 
	torchOn?:boolean,

}

interface qiniuShortVideo_setBeautifyModeOn_Params {
	/**（可选项）开启或关闭美颜功能*/ 
	on?:boolean,

}

interface qiniuShortVideo_setBeautify_Params {
	/**（可选项）设置对应 Beauty 的程度参数，beautify 范围从 0 ~ 1，0 为不美颜*/ 
	beautify?:number,

}

interface qiniuShortVideo_setWhiten_Params {
	/**（可选项）设置美白程度，范围是从 0 ~ 1，0 为不美白*/ 
	whiten?:number,

}

interface qiniuShortVideo_setRedden_Params {
	/**（可选项）设置红润的程度参数，范围是从 0 ~ 1，0 为不红润*/ 
	redden?:number,

}

interface qiniuShortVideo_setWaterMark_Params {
	/**（可选项）水印图片位置*/ 
	origin?:JSON,

	/**用于设置水印的图片路径，要求本地路径（widget://、fs://）*/ 
	path:string,

}

interface qiniuShortVideo_recoderRate_Params {
	/**（可选项）设置视频拍摄速率*/ 
	recoderRate?:string,

}

interface qiniuShortVideo_fillMode_Params {
	/**（可选项）填充方式*/ 
	fillMode?:string,

}

interface qiniuShortVideo_getFileDuration_Params {
	/**视频／音频文件的路径，要求本地路径（widget://、fs://）(android不支持widget)*/ 
	path:string,

}

interface qiniuShortVideo_openFilterSelectView_Params {
	/**（可选项）滤镜左上角的 y 坐标（相对于所属的 Window 或 Frame）*/ 
	y?:number,

	/**滤镜名称是否使用中文*/ 
	useChinese:boolean,

	/**（可选项）滤镜选择视图添加到指定窗口的名字*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface qiniuShortVideo_addFilter_Params {
	/**（可选项）滤镜索引,(android不支持)*/ 
	index?:number,

}

interface qiniuShortVideo_configurationVideoEditor_Params {
	/**（可选项）播放器的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）视频编辑预览视图添加到指定窗口的名字*/ 
	fixedOn?:string,

	/**（可选项）视频编辑预览视图是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）编辑时的预览分辨率；(android不支持，可以设置填充模式来改变预览大小)*/ 
	videoSize?:JSON,

	/**（可选项）播放文件的 timeRange 范围*/ 
	timeRange?:JSON,

	/**（可选项）循环播放*/ 
	loopEnabled?:boolean,

	/**（可选项）视频文件的路径，要求本地路径（widget://、fs://）(android不支持widget)*/ 
	path?:string,

	/**(可选项)生成文件的名称,只是一个名称，不是路径，如果不写，模块随机生成一个,(ios不支持)*/ 
	fileName?:string,

	/**(可选项)设置编辑后生成视频的倍速；（ios不支持）*/ 
	rateType?:number,

	/**(可选项)预览比例；(ios不支持)*/ 
	fillMode?:string,

}

interface qiniuShortVideo_setVideoEditorRect_Params {
	/**（可选项）视频编辑预览视图的位置及尺寸*/ 
	rect?:JSON,

}

interface qiniuShortVideo_editorFillMode_Params {
	/**（可选项）填充方式*/ 
	fillMode?:string,

}

interface qiniuShortVideo_setVideoSize_Params {
	/**（可选项）视频的预览分辨率*/ 
	videoSize?:JSON,

}

interface qiniuShortVideo_setVolume_Params {
	/**（可选项）音量 取值范围：0.0 - 1.0*/ 
	volume?:number,

	/**（可选项）背景音量 取值范围：0.0 - 1.0*/ 
	bgVolume?:number,

}

interface qiniuShortVideo_editorSetWaterMark_Params {
	/**（可选项）水印图片位置*/ 
	origin?:JSON,

	/**用于设置水印的图片路径，要求本地路径（widget://、fs://）*/ 
	path:string,

}

interface qiniuShortVideo_addMusic_Params {
	/**（可选项）播放文件的 timeRange 范围*/ 
	timeRange?:JSON,

	/**音频文件的路径，要求本地路径（widget://、fs://）(android只支持fs)*/ 
	musicPath:string,

}

interface qiniuShortVideo_updateMusic_Params {
	/**（可选项）播放文件的 timeRange 范围*/ 
	timeRange?:JSON,

	/**（可选项）音量*/ 
	volume?:number,

}

interface qiniuShortVideo_addMVLayer_Params {
	/**(可选项)彩色层视频的路径，要求本地路径（widget://、fs://）(android只支持fs)*/ 
	colorPath?:string,

	/**(可选项)被彩色层当作透明层的视频的路径，要求本地路径（widget://、fs://）(android只支持fs)*/ 
	alphaPath?:string,

}

interface qiniuShortVideo_editorAddFilter_Params {
	/**(可选项)当前使用的滤镜的颜色表图的路径，要求本地路径（widget://、fs://）(android只支持fs)*/ 
	colorImagePath?:string,

}

interface qiniuShortVideo_replaceCurrentAsset_Params {
	/**（可选项）视频的 timeRange 范围*/ 
	timeRange?:JSON,

	/**视频文件的路径，要求本地路径（widget://、fs://）*/ 
	path:string,

}

interface qiniuShortVideo_configurationReverserEffect_Params {
	/**（可选项）视频文件的路径，要求本地路径（widget://、fs://）*/ 
	path?:string,

}

interface qiniuShortVideo_scaleAsset_Params {
	/**（可选项）倍数处理时间段*/ 
	timeRange?:JSON,

	/**（可选项）视频文件的路径，要求本地路径（widget://、fs://）*/ 
	path?:string,

	/**（可选项）倍数处理的类型*/ 
	rateType?:string,

}

interface qiniuShortVideo_assetExport_Params {
	/**（可选项）是否将视频导出到相册*/ 
	isExportMovieToPhotosAlbum?:boolean,

	/**（可选项）视频导出的文件类型*/ 
	outputFileType?:string,

	/**（可选项）视频导出的分辨率*/ 
	outputVideoSize?:JSON,

	/**(可选项)彩色层视频的路径，要求本地路径（widget://、fs://）*/ 
	colorPath?:string,

	/**(可选项)被彩色层当作透明层的视频的路径，要求本地路径（widget://、fs://）*/ 
	alphaPath?:string,

	/**(可选项)当前使用的滤镜的颜色表图的路径，要求本地路径（widget://、fs://）*/ 
	colorImagePath?:string,

	/**（可选项）视频文件的路径，要求本地路径（widget://、fs://）*/ 
	path?:string,

	/**（可选项）倍速特效，倍数处理的类型*/ 
	rateType?:string,

	/**（可选项）倍速特效，倍数处理时间段。设置rateType参数后此参数才有效*/ 
	scaleTimeRange?:JSON,

	/**（可选项）视频信息*/ 
	movieSettings?:JSON,

	/**（可选项）背景音乐设置*/ 
	audioSettings?:JSON,

	/**（可选项）水印设置*/ 
	waterMarkSettings?:JSON,

}

interface qiniuShortVideo_transcoder_Params {
	/**视频文件的路径，要求本地路径（widget://、fs://）(android只支持fs)*/ 
	path:string,

	/**（可选项）是否将视频导出到相册；(android不支持)*/ 
	isExportMovieToPhotosAlbum?:boolean,

	/**（可选项）视频导出的文件类型；(android只支持mp4)*/ 
	outputFileType?:string,

	/**（可选项）转码后视频的质量；(android不支持)*/ 
	outputFilePreset?:string,

	/**（可选项）需要转码的视频时间段；(android不支持)*/ 
	timeRange?:JSON,

	/**(可选项)转码后的视频分辨率；(ios不支持)*/ 
	destSize?:JSON,

	/**(可选项)视频转码后的码率；单位：Kbps；(ios不支持)*/ 
	destBitrate?:number,

	/**(可选项)生成文件的名称,只是一个名称，不是路径，如果不写，模块随机生成一个,(ios不支持)*/ 
	fileName?:string,

	/**(可选项)是否进行时光倒流（视频倒置）(ios不支持)*/ 
	reverse ?:boolean,

}

interface qiniuShortVideo_movieCompose_Params {
	/**存放视频文件路径的数组，视频个数需要一个以上*/ 
	paths:Array,

	/**（可选项）是否将视频导出到相册（android不支持）*/ 
	isExportMovieToPhotosAlbum?:boolean,

	/**（可选项）视频导出的文件类型；（android只支持mp4）*/ 
	outputFileType?:string,

	/**（可选项）拼接后视频的分辨率;(由于SDK的限制，android暂不支持自定义分辨率，开发者请从sizeLevel属性中选择分辨率)*/ 
	videoSize?:JSON,

	/**拼接后视频的分辨率;（ios不支持）*/ 
	sizeLevel :string,

	/**（可选项）拼接后视频数据的帧率*/ 
	videoFrameRate?:number,

	/**（可选项）拼接后视频的码率*/ 
	bitrate?:number,

	/**(可选项)生成文件的名称,只是一个名称，不是路径，如果不写，模块随机生成一个,(ios不支持)*/ 
	fileName?:string,

}

interface qiniuShortVideo_composeGif_Params {
	/**存放图片路径的数组，图片个数需要2个或以上（android此字段可以存放视频路径，如果有多个只取第一个路径，只支持mp4类型的视频）*/ 
	images:Array,

	/**（可选项）Gif 的名称；*/ 
	gifName?:string,

	/**（可选项）Gif 动图每帧间隔设置*/ 
	interval?:number,

	/**（可选项）gif是否循环；（ios不支持）*/ 
	isLoop?:boolean,

}

interface qiniuShortVideo_loadGif_Params {
	/**存放图片路径的数组，图片个数需要2个或以上*/ 
	images:Array,

	/**（可选项）Gif 动图每帧间隔设置*/ 
	interval?:number,

	/**（可选项）Gif展示视图的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）gif播放重复次数，0 为无限循环*/ 
	repeatCount?:number,

	/**（可选项）Gif展示视图添加到指定窗口的名字*/ 
	fixedOn?:string,

	/**（可选项）Gif展示视图是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface qiniuShortVideo_viewRecorder_Params {
	/**（可选项）录屏的最大时长，单位为秒*/ 
	maxDuration?:number,

	/**（可选项） 录屏的窗口的名称*/ 
	fixedOn?:string,

	/**（可选项）帧率*/ 
	videoFrameRate?:number,

}

interface qiniuShortVideo_uploadVideoFile_Params {
	/**视频文件的路径，要求本地路径（widget://、fs://）(android不支持widget)*/ 
	path:string,

	/**上传视频空间 token*/ 
	token:string,

	/**（可选项）上传视频空间设置的 key*/ 
	videoKey?:string,

	/**（可选项）上传视频空间是否需要设置为 https 上传, true 为 https 上传，false 为 http 上传*/ 
	https?:boolean,

}

interface qiniuShortVideo_addEventListener_Params {
	/**监听的事件的名字*/ 
	name:string,

}

interface qiniuShortVideo_removeEventListener_Params {
	/**监听的事件的名称*/ 
	name:string,

}

interface qiniuShortVideo_openStickerPanelView_Params {
	/**（可选项）贴图页面的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）摄像头的预览视图添加到指定窗口的名字*/ 
	fixedOn?:string,

	/**（可选项）摄像头的预览视图是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface qiniuShortVideo_cutVideo_Params {
	/**源视频文件路径。支持fs,widget（android只支持fs）*/ 
	path:string,

	/**起始时间戳；单位：秒*/ 
	begin:number,

	/**结束时间戳；单位：秒*/ 
	end:number,

	/**目标视频文件路径；iOS不支持此参，iOS根据outputFileType参数自动返回对应格式视频文件路径*/ 
	outPath:string,

	/**剪辑模式； 取值范围：ACCURATE(精准模式)、 FAST(快速模式)，iOS不支持此参数*/ 
	mode:string,

	/**（可选项）是否将视频导出到相册，android不支持此参数*/ 
	isExportMovieToPhotosAlbum?:boolean,

	/**（可选项）视频导出的文件类型，android不支持此参数*/ 
	outputFileType?:string,

	/**（可选项）视频导出的分辨率，android不支持此参数*/ 
	outputVideoSize?:JSON,

}

interface qiniuShortVideo_getVideoFrame_Params {
	/**源视频文件路径。支持fs,widget（android只支持fs）*/ 
	path:string,

	/**图片保存路径；支持fs,widget（android只支持fs）*/ 
	outPath:string,

	/**返回多少张图片,数字根据视频质量可能不大准确,张数如果大于视频帧数则返回数小于count设定的值, android不支持此参数*/ 
	count:number,

	/**是否限定返回关键帧,iOS不支持此参数*/ 
	keyFrame:boolean,

	/**帧宽度,iOS不支持此参数*/ 
	width:number,

	/**帧高度*/ 
	height:number,

}

interface qiniuShortVideo_getVideoFrameByTime_Params {
	/**源视频文件路径。支持fs*/ 
	path:string,

	/**图片保存路径；支持fs*/ 
	outPath:string,

	/**要获取的视频帧所在的时间；单位：毫秒*/ 
	time:number,

	/**是否限定返回关键帧*/ 
	keyFrame:boolean,

	/**帧宽度*/ 
	width:number,

	/**帧高度*/ 
	height:number,

}

interface qiniuShortVideo_insertVideo_Params {
	/**视频草稿文件路径。支持fs,widget（android只支持fs）*/ 
	path:string,

}

interface qiniuShortVideo_microPlastic_Params {
	/**（可选项）参数 key*/ 
	key?:string,

	/**参数值*/ 
	precent:number,

}

interface qiniuShortVideo_previewSize_Params {
	/**（可选项）预览屏幕原大小*/ 
	size?:JSON,

	/**（可选项）编码视频的视频的分辨率,需要注意的是，这个参数影响的是视频编码时的分辨率，而非摄像头采集到数据的预览大小，传递给编码器的图像尺寸与此尺寸不同时，会按照AVVideoScalingModeResizeAspectFill对图像做剪切，从而确保图像不会出现压缩的现象。*/ 
	videoSize?:JSON,

}

interface qiniuShortVideo_imageVideoComposer_Params {
	/**存放图片、GIF 图和视频的数组*/ 
	medias:Array,

	/**（可选项）合成视频文件的分辨率（仅iOS支持）*/ 
	videoSize?:JSON,

	/**（可选项）合成文件分辨率*/ 
	androidVideoSize?:number,

	/**（可选项）视频导出的文件类型（仅iOS支持）*/ 
	outputFileType?:string,

	/**（可选项）合成视频文件的帧率*/ 
	videoFrameRate?:number,

	/**（可选项）合成视频文件的码率*/ 
	bitrate?:number,

	/**（可选项）是否将视频导出到相册（仅iOS支持）*/ 
	isExportMovieToPhotosAlbum?:boolean,

	/**（可选项）是否禁用转场（仅iOS支持）*/ 
	disableTransition?:boolean,

	/**（可选项）转场动画持续的时长，默认为 1.0，即 1 秒. 如果 transitionDuration 的值大于合并的视频中最短时长，则将使用合并的视频中最短视频的时长作为转场动画的时长。仅当 disableTransition 为 false 的时候，transitionDuration 才生效*/ 
	transitionDuration?:number,

	/**（可选项）背景音乐的路径，要求本地路径，支持fs、widget*/ 
	musicURL?:string,

	/**（可选项）背景音乐音量，取值范围(0 ~ 1.0)*/ 
	musicVolume?:number,

	/**（可选项）原视频的音量，取值范围(0 ~ 1.0)*/ 
	movieVolume?:number,

	/**（可选项）转场类型。仅当 disableTransition 为 false 的时候，transitionType 才生效（仅iOS支持）*/ 
	transitionType?:number,

	/**（可选项）拼接策略. 仅当 disableTransition 为 false 的时候，composerPriorityType 才生效*/ 
	composerPriorityType?:number,

	/**输出视频路径，支持fs路径（仅android支持）*/ 
	outVideoPath:string,

}

interface adhub {
}
interface aMapLBS {
	/**
	 * `配置定位信息`
	 * ========params==========
	 *
	 * `accuracy` :string : 设定定位精度
	 *
	 * `filter` :number : 位置更新所需最小距离（单位米）
	 */
	configManager(params:aMapLBS_configManager_Params, callback?: (ret:JSON) => void):void

	/**
	 * `单次地理定位，可以通过 stopUpdatingLocation 方法去取消正在进行的单次定位请求。**如果当前正在连续定位，调用此方法将会失败**`
	 * ========params==========
	 *
	 * `timeout` :number : 指定单次定位超时时间，单位为妙（s）。最小值是2s
	 */
	singleLocation(params:aMapLBS_singleLocation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `单次逆地理定位，可以通过 stopUpdatingLocation 方法去取消正在进行的单次定位请求。**如果当前正在连续定位，调用此方法将会失败**`
	 * ========params==========
	 *
	 * `timeout` :number : 指定单次定位逆地理超时时间，单位为妙（s）。最小值是2s
	 */
	singleAddress(params:aMapLBS_singleAddress_Params, callback?: (ret:JSON) => void):void

	/** 开始连续定位，可以通过 stopUpdatingLocation 方法去取消。**调用此方法会cancel掉所有的单次定位请求***/ 
	startLocation():void

	/** 停止连续定位，调用此方法会cancel掉所有的单次定位请求，可以用来取消单次定位*/ 
	stopUpdatingLocation():void

}
interface aMapLBS_configManager_Params {
	/**设定定位精度*/ 
	accuracy:string,

	/**位置更新所需最小距离（单位米）*/ 
	filter:number,

}

interface aMapLBS_singleLocation_Params {
	/**指定单次定位超时时间，单位为妙（s）。最小值是2s*/ 
	timeout:number,

}

interface aMapLBS_singleAddress_Params {
	/**指定单次定位逆地理超时时间，单位为妙（s）。最小值是2s*/ 
	timeout:number,

}

interface txLivex {
	/** 监听统一接口*/ 
	addEventListener():void

	/** 设置直播推流licence 请到腾讯云官方申请*/ 
	setLicence():void

	/** 获取直播推流licence*/ 
	getLicence():void

	/** 设置小视频录制licence 请到腾讯云官方申请*/ 
	setUgcLicence():void

	/** 获取小视频录制licence*/ 
	getUgcLicence():void

	/** 开启推流*/ 
	push():void

	/** 开始推流*/ 
	startPush():void

	/** 停止推流*/ 
	stopPush():void

	/** 拉流播放器*/ 
	player():void

	/** 开始播放*/ 
	startPlayer():void

	/** 停止播放*/ 
	stopPlayer():void

	/** 设置全局音乐列表地址*/ 
	setMusicUrl():void

	/** 视频编辑常用配置*/ 
	setEditConfig():void

	/** 视频录制*/ 
	record():void

	/** 选择器 视频合成*/ 
	picker():void

}
interface UIYunxinIM {
	/** 登陆*/ 
	login(callback?: (ret:JSON) => void):void

	/** 自动登陆，启动APP如果已经保存了用户帐号和令牌,建议使用这个登录方式*/ 
	autoLogin():void

	/** 退出登陆*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 当前登录状态*/ 
	isLogined(callback?: (ret:JSON) => void):void

	/** 获取当前登录帐号，当前登录帐号,如果没有登录成功,这个地方会返回空字符串''*/ 
	currentAccount():void

	/** 账号相关监听*/ 
	addAccountListen(callback?: (ret:JSON) => void):void

	/** 从本地获取用户资料*/ 
	localUserInfo(callback?: (ret:JSON) => void):void

	/** 从云信服务器批量获取用户资料，需要将用户信息交给云信托管，此接口才有效。调用此接口，不会触发 onUserInfoChanged 回调，该接口会将获取到的用户信息缓存在本地，所以需要避免此接口的滥调，导致存储过多无用数据到本地而撑爆缓存：如在聊天室请求请求每个聊天室用户数据将造成缓存过大而影响程序性能，本接口一次最多支持 150 个用户信息获取*/ 
	fetchUserInfos(callback?: (ret:JSON) => void):void

	/** 修改自己的用户资料*/ 
	updateMyUserInfo(callback?: (ret:JSON) => void):void

	/** 上传头像*/ 
	upload(callback?: (ret:JSON) => void):void

	/** 文件资源下载*/ 
	download(callback?: (ret:JSON) => void):void

	/** 取消上传/下载任务*/ 
	cancelTask():void

	/**
	 * `发送文本消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `text` :string : 发送的消息
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 */
	sendText(params:UIYunxinIM_sendText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `path` :string : 要发送的图片的路径，要求本地路径（fs://、widget://）
	 *
	 * `displayName` :string : （可选项）文件展示名
	 *
	 * `compressQuality` :number : （可选项）压缩参数，可传入0.0-1.0的值，如果传入非法参数，则按照 0.5 进行压缩
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 */
	sendImage(params:UIYunxinIM_sendImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送语音消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `path` :string : 要发送的语音的路径，要求本地路径（fs://、widget://）
	 *
	 * `duration` :number : （可选项）语音时长，毫秒为单位
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 */
	sendVoice(params:UIYunxinIM_sendVoice_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送视频消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `path` :string : 要发送的视频的路径，要求本地路径（fs://、widget://）
	 *
	 * `displayName` :string : 视频展示名
	 *
	 * `duration` :number : （可选项）视频时长，毫秒为单位
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 */
	sendVideo(params:UIYunxinIM_sendVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文件消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `path` :string : 要发送的文件的路径，要求本地路径（fs://、widget://）
	 *
	 * `displayName` :string : 文件显示名
	 *
	 * `extension` :string : 文件拓展名
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 */
	sendFile(params:UIYunxinIM_sendFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `address` :string : 要发送的地址
	 *
	 * `latitude` :number : 纬度
	 *
	 * `longitude` :number : 经度
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 */
	sendLocation(params:UIYunxinIM_sendLocation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送提示消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `text` :string : 要发送的消息
	 *
	 * `from` :string : （可选项）消息来源
	 *
	 * `ext` :JSON : （可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K
	 */
	sendTip(params:UIYunxinIM_sendTip_Params, callback?: (ret:JSON) => void):void

	/**
	 * `消息取消发送，只能取消正在发送中的消息（如大文件发送），通常配合异步发送消息接口，接口返回值成功时消息的状态为发送失败状态`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageId` :string : 消息Id
	 */
	cancelSendingMessage(params:UIYunxinIM_cancelSendingMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `消息重发`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageId` :string : 消息Id
	 */
	resendMessage(params:UIYunxinIM_resendMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `消息转发，除了通知消息之外，其他类型消息均支持转发给其他会话`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `toSessionId` :string : 转发的会话ID
	 *
	 * `toChatType` :number : （可选项）转发的会话类型
	 *
	 * `messageId` :string : 消息Id
	 */
	forwardMessage(params:UIYunxinIM_forwardMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `消息撤回，允许用户撤回一定时间内发送过的消息，允许撤回时长默认2分钟，可在网易云信控制台配置`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageId` :string : 消息Id
	 */
	revokeMessage(params:UIYunxinIM_revokeMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `单聊消息已读回执，在会话界面中调用发送已读回执的接口并传入当前会话的最后一条消息，即表示这之前的消息本方都已读`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageId` :string : 当前会话的最后一条消息Id
	 */
	sendMessageReceipt(params:UIYunxinIM_sendMessageReceipt_Params, callback?: (ret:JSON) => void):void

	/**
	 * `群聊消息已读回执，群消息已读回执功能，需要联系商务顾问申请开通后才能使用。同时，使用该功能时需要将群成员控制在100人以内。需要config配置teamReceiptEnabled为true`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageIds` :Array : 条消息Id数组
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageIds` :Array : 条消息Id数组
	 */
	sendTeamMessageReceipts(params:UIYunxinIM_sendTeamMessageReceipts_Params, callback?: (ret:JSON) => void):void

	/**
	 * `群聊消息已读回执，群消息已读回执功能，需要联系商务顾问申请开通后才能使用。同时，使用该功能时需要将群成员控制在100人以内。需要config配置teamReceiptEnabled为true`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageIds` :Array : 条消息Id数组
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageIds` :Array : 条消息Id数组
	 */
	sendTeamMessageReceipts(params:UIYunxinIM_sendTeamMessageReceipts_Params, callback?: (ret:JSON) => void):void

	/** 消息相关监听*/ 
	addMessageListen():void

	/** 获取所有最近会话*/ 
	allRecentSessions():void

	/**
	 * `创建最近会话`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 */
	creatRecentSession(params:UIYunxinIM_creatRecentSession_Params):void

	/**
	 * `删除最近会话`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 */
	deleteRecentSession(params:UIYunxinIM_deleteRecentSession_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新最近会话的本地扩展`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 */
	updateRecentLocalExt(params:UIYunxinIM_updateRecentLocalExt_Params, callback?: (ret:JSON) => void):void

	/** 获取会话未读消息数*/ 
	allUnreadCount():void

	/**
	 * `设置一个会话里所有消息置为已读`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 */
	markAllMessagesReadInSession(params:UIYunxinIM_markAllMessagesReadInSession_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除服务器端最近会话`
	 * ========params==========
	 *
	 * `sessions` :Array : 会话列表
	 */
	deleteRemoteSessions(params:UIYunxinIM_deleteRemoteSessions_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从本地db读取一个会话里某条消息之前的若干条的消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageId` :string : 消息Id
	 */
	messagesInSession(params:UIYunxinIM_messagesInSession_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据消息Id获取消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageIds` :Array : 消息Id数组
	 */
	messagesInSessionWithMessageIds(params:UIYunxinIM_messagesInSessionWithMessageIds_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除某条消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `messageId` :string : 消息Id
	 */
	deleteMessage(params:UIYunxinIM_deleteMessage_Params):void

	/**
	 * `删除某个会话的所有消息`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 *
	 * `removeSession` :boolean : （可选项）是否移除对应最近会话，设置为 true 时将同时删除最近会话信息
	 *
	 * `removeTable` :boolean : （可选项）是否删除消息表，默认情况下云信采用标记的方式进行消息删除，如果设置为 true，将一并移除对应的消息表，进而减少消息表数量，加快 I/O
	 */
	deleteAllmessagesInSession(params:UIYunxinIM_deleteAllmessagesInSession_Params):void

	/**
	 * `删除所有会话消息`
	 * ========params==========
	 *
	 * `removeSession` :boolean : （可选项）是否移除对应最近会话，设置为 true 时将同时删除最近会话信息
	 *
	 * `removeTable` :boolean : （可选项）是否删除消息表，默认情况下云信采用标记的方式进行消息删除，如果设置为 true，将一并移除对应的消息表，进而减少消息表数量，加快 I/O
	 */
	deleteAllMessages(params:UIYunxinIM_deleteAllMessages_Params):void

	/** 会话相关监听*/ 
	addSessionListen(callback?: (ret:JSON) => void):void

	/** 获取好友列表*/ 
	myFriends():void

	/**
	 * `处理好友关系`
	 * ========params==========
	 *
	 * `userId` :string : 目标用户ID
	 *
	 * `operation` :number : （可选项）操作类型
	 *
	 * `message` :string : 附言
	 */
	requestFriend(params:UIYunxinIM_requestFriend_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除好友`
	 * ========params==========
	 *
	 * `userId` :string : 好友Id
	 *
	 * `removeAlias` :boolean : （可选项）是否同时删除备注
	 */
	deleteFriend(params:UIYunxinIM_deleteFriend_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断是否是我的好友`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 */
	isMyFriend(params:UIYunxinIM_isMyFriend_Params, callback?: (ret:JSON) => void):void

	/** 获取黑名单中的用户列表*/ 
	myBlackList():void

	/**
	 * `添加用户到黑名单`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 */
	addToBlackList(params:UIYunxinIM_addToBlackList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将用户从黑名单移除`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 */
	removeFromBlackList(params:UIYunxinIM_removeFromBlackList_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断用户是否已被拉黑`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 */
	isUserInBlackList(params:UIYunxinIM_isUserInBlackList_Params, callback?: (ret:JSON) => void):void

	/** 获取免打扰列表*/ 
	myMuteUserList():void

	/**
	 * `设置免打扰`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 *
	 * `isNotify` :boolean : （可选项）是否免打扰
	 */
	setMute(params:UIYunxinIM_setMute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断是否免打扰`
	 * ========params==========
	 *
	 * `userId` :string : 用户Id
	 */
	isMute(params:UIYunxinIM_isMute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户检索`
	 * ========params==========
	 *
	 * `searchContent` :string : 搜索文本
	 *
	 * `ignoreingCase` :boolean : （可选项）忽略大小写
	 *
	 * `searchRange` :number : （可选项）搜索文本的搜索范围
	 *
	 * `searchContentOption` :number : （可选项）搜索文本的搜索范围
	 */
	searchUser(params:UIYunxinIM_searchUser_Params, callback?: (ret:JSON) => void):void

	/** 好友相关监听*/ 
	addFriendListen(callback?: (ret:JSON) => void):void

	/**
	 * `获取本地存储的系统通知（本接口配合limit参数采取分页获取）`
	 * ========params==========
	 *
	 * `limit` :number : 最大获取数
	 */
	fetchSystemNotifications(params:UIYunxinIM_fetchSystemNotifications_Params, callback?: (ret:JSON) => void):void

	/** 获取未读系统消息数*/ 
	allNotificationsUnreadCount():void

	/** 标记所有系统消息为已读*/ 
	markAllNotificationsAsRead():void

	/** 删除所有系统消息*/ 
	deleteAllNotifications():void

	/** 通知相关监听*/ 
	addNotificationListen(callback?: (ret:JSON) => void):void

	/**
	 * `创建群组`
	 * ========params==========
	 *
	 * `users` :Array : 用户ID列表
	 *
	 * `option` :JSON : 创建群选项
	 */
	createTeam(params:UIYunxinIM_createTeam_Params, callback?: (ret:JSON) => void):void

	/** 从本地获取所有群组*/ 
	allMyTeams():void

	/**
	 * `解散群组`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 */
	dismissTeam(params:UIYunxinIM_dismissTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `申请加入群组`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `message` :string : （可选项）申请消息
	 */
	applyToTeam(params:UIYunxinIM_applyToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通过申请(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `userId` :string : 申请的用户 ID
	 */
	passApplyToTeam(params:UIYunxinIM_passApplyToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝申请(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `userId` :string : 申请的用户 ID
	 *
	 * `reason` :string : （可选项）拒绝理由
	 */
	rejectApplyToTeam(params:UIYunxinIM_rejectApplyToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `邀请加入群组`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `users` :Array : 用户ID列表
	 *
	 * `postscript` :string : （可选项）邀请附言
	 *
	 * `attach` :string : （可选项）扩展消息
	 */
	invitationToTeam(params:UIYunxinIM_invitationToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `接受入群邀请(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `invitorId` :string : 邀请者 ID
	 */
	acceptInviteWithTeam(params:UIYunxinIM_acceptInviteWithTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝入群邀请(仅限高级群)`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `invitorId` :string : 邀请者 ID
	 *
	 * `reason` :string : （可选项）拒绝原因
	 */
	rejectInviteWithTeam(params:UIYunxinIM_rejectInviteWithTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从群组内移除成员`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `users` :string : 需要移除的用户ID列表
	 */
	kickUsersFromTeam(params:UIYunxinIM_kickUsersFromTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `退出群组`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 */
	quitTeam(params:UIYunxinIM_quitTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取群组成员，绝大多数情况这个请求都是从本地读取缓存并同步返回，但是由于群成员信息量较大， SDK 采取的是登录后延迟拉取的策略，考虑到用户网络等问题, SDK 有可能没有及时缓存群成员信息,那么这个请求将是个带网络请求的异步操作(增量请求)。 同时这个接口会去请求本地没有缓存的群用户的资料信息，但不会触发 onUserInfoChanged 回调`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 */
	fetchTeamMembers(params:UIYunxinIM_fetchTeamMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取单个群成员信息，返回本地缓存的群成员信息，如果本地没有相应数据则返回空`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `userId` :string : 用户ID
	 */
	teamMember(params:UIYunxinIM_teamMember_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新成员群昵称`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `userId` :string : 群成员ID
	 *
	 * `newNick` :string : 新的群成员昵称
	 */
	updateUserNick(params:UIYunxinIM_updateUserNick_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据群组ID判断是否是我所在的群`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 */
	isMyTeam(params:UIYunxinIM_isMyTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移交群主`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `newOwnerId` :string : 新群主ID
	 *
	 * `isLeave` :boolean : （可选项）是否同时离开群组
	 */
	transferManagerWithTeam(params:UIYunxinIM_transferManagerWithTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加管理员`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `users` :string : 需要添加为管理员的用户ID列表
	 */
	addManagersToTeam(params:UIYunxinIM_addManagersToTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除管理员`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `users` :Array : 需要移除管理员的用户ID列表
	 */
	removeManagersFromTeam(params:UIYunxinIM_removeManagersFromTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `禁言指定成员`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `userId` :string : 用户ID
	 *
	 * `isMute` :boolean : （可选项）是否禁言
	 */
	muteUserFromTeam(params:UIYunxinIM_muteUserFromTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `禁言全体普通成员`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `isMute` :boolean : （可选项）是否禁言
	 */
	muteAllFromTeam(params:UIYunxinIM_muteAllFromTeam_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取群内被禁言的成员列表，绝大多数情况这个请求都是从本地读取缓存并同步返回，但是由于群成员信息量较大， SDK 采取的是登录后延迟拉取的策略，考虑到用户网络等问题, SDK 有可能没有及时缓存群成员信息,那么这个请求将是个带网络请求的异步操作(增量请求)。同时这个接口会去请求本地没有缓存的群用户的资料信息，但不会触发 onUserInfoChanged 回调`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 */
	fetchTeamMutedMembers(params:UIYunxinIM_fetchTeamMutedMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群组名称`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `teamName` :string : 群组名称
	 */
	updateTeamName(params:UIYunxinIM_updateTeamName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群组头像`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `teamAvatarUrl` :string : 群组头像 Url
	 */
	updateTeamAvatar(params:UIYunxinIM_updateTeamAvatar_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群介绍`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `intro` :string : 群介绍
	 */
	updateTeamIntro(params:UIYunxinIM_updateTeamIntro_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群公告`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `announcement` :string : 群公告
	 */
	updateTeamAnnouncement(params:UIYunxinIM_updateTeamAnnouncement_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群组验证方式`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `joinMode` :number : 验证方式
	 */
	updateTeamJoinMode(params:UIYunxinIM_updateTeamJoinMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群组被邀请人验证方式`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `beInviteMode` :number : 邀请方式
	 */
	updateTeamBeInviteMode(params:UIYunxinIM_updateTeamBeInviteMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群组邀请他人方式`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `inviteMode` :number : 邀请方式
	 */
	updateTeamInviteMode(params:UIYunxinIM_updateTeamInviteMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更改群组更新信息的权限`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `infoMode` :number : 群信息修改权限
	 */
	updateTeamUpdateInfoMode(params:UIYunxinIM_updateTeamUpdateInfoMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更改群组更新自定义字段的权限`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `clientCustomMode` :number : 修改谁有权限更新群组自定义字段
	 */
	updateTeamUpdateClientCustomMode(params:UIYunxinIM_updateTeamUpdateClientCustomMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `更新群自定义信息`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `customInfo` :string : 群自定义信息
	 */
	updateTeamCustomInfo(params:UIYunxinIM_updateTeamCustomInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群通知状态`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 *
	 * `notifyState` :number : 群通知状态
	 */
	updateTeamNotifyState(params:UIYunxinIM_updateTeamNotifyState_Params, callback?: (ret:JSON) => void):void

	/**
	 * `查询群通知状态`
	 * ========params==========
	 *
	 * `teamId` :string : 群组ID
	 */
	fetchTeamNotifyState(params:UIYunxinIM_fetchTeamNotifyState_Params, callback?: (ret:JSON) => void):void

	/** 群组相关监听*/ 
	addTeamListen(callback?: (ret:JSON) => void):void

	/**
	 * `UI设置`
	 * ========params==========
	 *
	 * `navigationStyle` :JSON : 导航条样式配置
	 *
	 * `navigationTitle` :JSON : 导航条样式配置
	 */
	configure(params:UIYunxinIM_configure_Params):void

	/**
	 * `根据会话 ID 和类型创建并打开聊天页面`
	 * ========params==========
	 *
	 * `sessionId` :string : 会话ID
	 *
	 * `chatType` :number : （可选项）会话类型
	 */
	chat(params:UIYunxinIM_chat_Params):void

	/**
	 * `打开最近会话页面`
	 * ========params==========
	 *
	 * `navigationTitle` :JSON : 导航条样式配置
	 */
	chatList(params:UIYunxinIM_chatList_Params):void

	/**
	 * `打开好友列表页面`
	 * ========params==========
	 *
	 * `navigationTitle` :JSON : 导航条样式配置
	 */
	contactsList(params:UIYunxinIM_contactsList_Params):void

	/** 聊天页面内头像点击事件监听*/ 
	addAvatarListener():void

}
interface UIYunxinIM_sendText_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**发送的消息*/ 
	text:string,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

}

interface UIYunxinIM_sendImage_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**要发送的图片的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**（可选项）文件展示名*/ 
	displayName?:string,

	/**（可选项）压缩参数，可传入0.0-1.0的值，如果传入非法参数，则按照 0.5 进行压缩*/ 
	compressQuality?:number,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

}

interface UIYunxinIM_sendVoice_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**要发送的语音的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**（可选项）语音时长，毫秒为单位*/ 
	duration?:number,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

}

interface UIYunxinIM_sendVideo_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**要发送的视频的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**视频展示名*/ 
	displayName:string,

	/**（可选项）视频时长，毫秒为单位*/ 
	duration?:number,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

}

interface UIYunxinIM_sendFile_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**要发送的文件的路径，要求本地路径（fs://、widget://）*/ 
	path:string,

	/**文件显示名*/ 
	displayName:string,

	/**文件拓展名*/ 
	extension:string,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

}

interface UIYunxinIM_sendLocation_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**要发送的地址*/ 
	address:string,

	/**纬度*/ 
	latitude:number,

	/**经度*/ 
	longitude:number,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

}

interface UIYunxinIM_sendTip_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**要发送的消息*/ 
	text:string,

	/**（可选项）消息来源*/ 
	from?:string,

	/**（可选项）扩展信息，需要保证可以转换为 JSON，长度限制 1K*/ 
	ext?:JSON,

}

interface UIYunxinIM_cancelSendingMessage_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**消息Id*/ 
	messageId:string,

}

interface UIYunxinIM_resendMessage_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**消息Id*/ 
	messageId:string,

}

interface UIYunxinIM_forwardMessage_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**转发的会话ID*/ 
	toSessionId:string,

	/**（可选项）转发的会话类型*/ 
	toChatType?:number,

	/**消息Id*/ 
	messageId:string,

}

interface UIYunxinIM_revokeMessage_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**消息Id*/ 
	messageId:string,

}

interface UIYunxinIM_sendMessageReceipt_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**当前会话的最后一条消息Id*/ 
	messageId:string,

}

interface UIYunxinIM_sendTeamMessageReceipts_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**条消息Id数组*/ 
	messageIds:Array,

	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**条消息Id数组*/ 
	messageIds:Array,

}

interface UIYunxinIM_sendTeamMessageReceipts_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**条消息Id数组*/ 
	messageIds:Array,

	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**条消息Id数组*/ 
	messageIds:Array,

}

interface UIYunxinIM_creatRecentSession_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

}

interface UIYunxinIM_deleteRecentSession_Params {
	/**会话ID*/ 
	sessionId:string,

}

interface UIYunxinIM_updateRecentLocalExt_Params {
	/**会话ID*/ 
	sessionId:string,

}

interface UIYunxinIM_markAllMessagesReadInSession_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

}

interface UIYunxinIM_deleteRemoteSessions_Params {
	/**会话列表*/ 
	sessions:Array,

}

interface UIYunxinIM_messagesInSession_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**消息Id*/ 
	messageId:string,

}

interface UIYunxinIM_messagesInSessionWithMessageIds_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**消息Id数组*/ 
	messageIds:Array,

}

interface UIYunxinIM_deleteMessage_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**消息Id*/ 
	messageId:string,

}

interface UIYunxinIM_deleteAllmessagesInSession_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

	/**（可选项）是否移除对应最近会话，设置为 true 时将同时删除最近会话信息*/ 
	removeSession?:boolean,

	/**（可选项）是否删除消息表，默认情况下云信采用标记的方式进行消息删除，如果设置为 true，将一并移除对应的消息表，进而减少消息表数量，加快 I/O*/ 
	removeTable?:boolean,

}

interface UIYunxinIM_deleteAllMessages_Params {
	/**（可选项）是否移除对应最近会话，设置为 true 时将同时删除最近会话信息*/ 
	removeSession?:boolean,

	/**（可选项）是否删除消息表，默认情况下云信采用标记的方式进行消息删除，如果设置为 true，将一并移除对应的消息表，进而减少消息表数量，加快 I/O*/ 
	removeTable?:boolean,

}

interface UIYunxinIM_requestFriend_Params {
	/**目标用户ID*/ 
	userId:string,

	/**（可选项）操作类型*/ 
	operation?:number,

	/**附言*/ 
	message:string,

}

interface UIYunxinIM_deleteFriend_Params {
	/**好友Id*/ 
	userId:string,

	/**（可选项）是否同时删除备注*/ 
	removeAlias?:boolean,

}

interface UIYunxinIM_isMyFriend_Params {
	/**用户Id*/ 
	userId:string,

}

interface UIYunxinIM_addToBlackList_Params {
	/**用户Id*/ 
	userId:string,

}

interface UIYunxinIM_removeFromBlackList_Params {
	/**用户Id*/ 
	userId:string,

}

interface UIYunxinIM_isUserInBlackList_Params {
	/**用户Id*/ 
	userId:string,

}

interface UIYunxinIM_setMute_Params {
	/**用户Id*/ 
	userId:string,

	/**（可选项）是否免打扰*/ 
	isNotify?:boolean,

}

interface UIYunxinIM_isMute_Params {
	/**用户Id*/ 
	userId:string,

}

interface UIYunxinIM_searchUser_Params {
	/**搜索文本*/ 
	searchContent:string,

	/**（可选项）忽略大小写*/ 
	ignoreingCase?:boolean,

	/**（可选项）搜索文本的搜索范围*/ 
	searchRange?:number,

	/**（可选项）搜索文本的搜索范围*/ 
	searchContentOption?:number,

}

interface UIYunxinIM_fetchSystemNotifications_Params {
	/**最大获取数*/ 
	limit:number,

}

interface UIYunxinIM_createTeam_Params {
	/**用户ID列表*/ 
	users:Array,

	/**创建群选项*/ 
	option:JSON,

}

interface UIYunxinIM_dismissTeam_Params {
	/**群组ID*/ 
	teamId:string,

}

interface UIYunxinIM_applyToTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**（可选项）申请消息*/ 
	message?:string,

}

interface UIYunxinIM_passApplyToTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**申请的用户 ID*/ 
	userId:string,

}

interface UIYunxinIM_rejectApplyToTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**申请的用户 ID*/ 
	userId:string,

	/**（可选项）拒绝理由*/ 
	reason?:string,

}

interface UIYunxinIM_invitationToTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**用户ID列表*/ 
	users:Array,

	/**（可选项）邀请附言*/ 
	postscript?:string,

	/**（可选项）扩展消息*/ 
	attach?:string,

}

interface UIYunxinIM_acceptInviteWithTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**邀请者 ID*/ 
	invitorId:string,

}

interface UIYunxinIM_rejectInviteWithTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**邀请者 ID*/ 
	invitorId:string,

	/**（可选项）拒绝原因*/ 
	reason?:string,

}

interface UIYunxinIM_kickUsersFromTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**需要移除的用户ID列表*/ 
	users:string,

}

interface UIYunxinIM_quitTeam_Params {
	/**群组ID*/ 
	teamId:string,

}

interface UIYunxinIM_fetchTeamMembers_Params {
	/**群组ID*/ 
	teamId:string,

}

interface UIYunxinIM_teamMember_Params {
	/**群组ID*/ 
	teamId:string,

	/**用户ID*/ 
	userId:string,

}

interface UIYunxinIM_updateUserNick_Params {
	/**群组ID*/ 
	teamId:string,

	/**群成员ID*/ 
	userId:string,

	/**新的群成员昵称*/ 
	newNick:string,

}

interface UIYunxinIM_isMyTeam_Params {
	/**群组ID*/ 
	teamId:string,

}

interface UIYunxinIM_transferManagerWithTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**新群主ID*/ 
	newOwnerId:string,

	/**（可选项）是否同时离开群组*/ 
	isLeave?:boolean,

}

interface UIYunxinIM_addManagersToTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**需要添加为管理员的用户ID列表*/ 
	users:string,

}

interface UIYunxinIM_removeManagersFromTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**需要移除管理员的用户ID列表*/ 
	users:Array,

}

interface UIYunxinIM_muteUserFromTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**用户ID*/ 
	userId:string,

	/**（可选项）是否禁言*/ 
	isMute?:boolean,

}

interface UIYunxinIM_muteAllFromTeam_Params {
	/**群组ID*/ 
	teamId:string,

	/**（可选项）是否禁言*/ 
	isMute?:boolean,

}

interface UIYunxinIM_fetchTeamMutedMembers_Params {
	/**群组ID*/ 
	teamId:string,

}

interface UIYunxinIM_updateTeamName_Params {
	/**群组ID*/ 
	teamId:string,

	/**群组名称*/ 
	teamName:string,

}

interface UIYunxinIM_updateTeamAvatar_Params {
	/**群组ID*/ 
	teamId:string,

	/**群组头像 Url*/ 
	teamAvatarUrl:string,

}

interface UIYunxinIM_updateTeamIntro_Params {
	/**群组ID*/ 
	teamId:string,

	/**群介绍*/ 
	intro:string,

}

interface UIYunxinIM_updateTeamAnnouncement_Params {
	/**群组ID*/ 
	teamId:string,

	/**群公告*/ 
	announcement:string,

}

interface UIYunxinIM_updateTeamJoinMode_Params {
	/**群组ID*/ 
	teamId:string,

	/**验证方式*/ 
	joinMode:number,

}

interface UIYunxinIM_updateTeamBeInviteMode_Params {
	/**群组ID*/ 
	teamId:string,

	/**邀请方式*/ 
	beInviteMode:number,

}

interface UIYunxinIM_updateTeamInviteMode_Params {
	/**群组ID*/ 
	teamId:string,

	/**邀请方式*/ 
	inviteMode:number,

}

interface UIYunxinIM_updateTeamUpdateInfoMode_Params {
	/**群组ID*/ 
	teamId:string,

	/**群信息修改权限*/ 
	infoMode:number,

}

interface UIYunxinIM_updateTeamUpdateClientCustomMode_Params {
	/**群组ID*/ 
	teamId:string,

	/**修改谁有权限更新群组自定义字段*/ 
	clientCustomMode:number,

}

interface UIYunxinIM_updateTeamCustomInfo_Params {
	/**群组ID*/ 
	teamId:string,

	/**群自定义信息*/ 
	customInfo:string,

}

interface UIYunxinIM_updateTeamNotifyState_Params {
	/**群组ID*/ 
	teamId:string,

	/**群通知状态*/ 
	notifyState:number,

}

interface UIYunxinIM_fetchTeamNotifyState_Params {
	/**群组ID*/ 
	teamId:string,

}

interface UIYunxinIM_configure_Params {
	/**导航条样式配置*/ 
	navigationStyle:JSON,

	/**导航条样式配置*/ 
	navigationTitle:JSON,

}

interface UIYunxinIM_chat_Params {
	/**会话ID*/ 
	sessionId:string,

	/**（可选项）会话类型*/ 
	chatType?:number,

}

interface UIYunxinIM_chatList_Params {
	/**导航条样式配置*/ 
	navigationTitle:JSON,

}

interface UIYunxinIM_contactsList_Params {
	/**导航条样式配置*/ 
	navigationTitle:JSON,

}

interface zhuge {
}
interface uifaceIDCard {
	/**
	 * `打开身份证识别UI界面`
	 * ========params==========
	 *
	 * `side` :number : （必填项）身份证正反面 0（身份证正面） 1（身份证反面）
	 *
	 * `orientation` :number : （必填项）拍摄模式 0(竖屏模式) 1:(横屏模式)
	 *
	 * `imgtype` :number : （必填项）输出结果类型 0:文件形式 1:base64形式
	 */
	cardinfo(params:uifaceIDCard_cardinfo_Params, callback?: (ret:JSON) => void):void

}
interface uifaceIDCard_cardinfo_Params {
	/**（必填项）身份证正反面 0（身份证正面） 1（身份证反面）*/ 
	side:number,

	/**（必填项）拍摄模式 0(竖屏模式) 1:(横屏模式)*/ 
	orientation:number,

	/**（必填项）输出结果类型 0:文件形式 1:base64形式*/ 
	imgtype:number,

}

interface falconAd {
	/**
	 * `打开Banner广告页面`
	 * ========params==========
	 *
	 * `appId` :string : appId
	 *
	 * `spaceId` :string : iOS广告位id
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	openBanner(params:falconAd_openBanner_Params, callback?: (ret:JSON) => void):void

	/** 关闭Banner广告页面*/ 
	closeBanner():void

	/** 隐藏Banner广告页面*/ 
	hideBanner():void

	/** 显示Banner广告页面*/ 
	showBanner():void

	/**
	 * `打开插屏广告页面`
	 * ========params==========
	 *
	 * `appId` :string : appId
	 *
	 * `spaceId` :string : iOS广告位id
	 */
	openInterstitial(params:falconAd_openInterstitial_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开开屏广告页面`
	 * ========params==========
	 *
	 * `appId` :string : appId
	 *
	 * `spaceId` :string : iOS广告位id
	 */
	openSplash(params:falconAd_openSplash_Params, callback?: (ret:JSON) => void):void

}
interface falconAd_openBanner_Params {
	/**appId*/ 
	appId:string,

	/**iOS广告位id*/ 
	spaceId:string,

	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface falconAd_openInterstitial_Params {
	/**appId*/ 
	appId:string,

	/**iOS广告位id*/ 
	spaceId:string,

}

interface falconAd_openSplash_Params {
	/**appId*/ 
	appId:string,

	/**iOS广告位id*/ 
	spaceId:string,

}

interface aMapReportLocationG {
	/**
	 * `开始定位并上报指定服务器`
	 * ========params==========
	 *
	 * `accuracy` :string : （可选项）定位精度，**信号不稳定时，定位精度过高，在 iOS 平台上会偶现定位失败的问题**
	 *
	 * `filter` :number : （可选项）位置更新所需最小距离（单位米）
	 *
	 * `autoStop` :boolean : （可选项）获取到位置信息后是否自动停止定位
	 *
	 * `geocode` :boolean : （可选项）定位回调和上报数据是否带有逆地理信息(android不支持此字段，逆地理信息始终返回，开发者可根据需要自行取值)
	 *
	 * `report` :JSON : （可选项）当 autoStop 为 false 时，本参数表示将当前位置信息上报的配置，若 autoStop 为 true，则本参数无意义。
	 */
	startLocation(params:aMapReportLocationG_startLocation_Params, callback?: (ret:JSON) => void):void

	/** 停止定位，当调用 startLocation 接口时 autoStop 参数传 false，则调用本接口可停止定位功能*/ 
	stopLocation():void

}
interface aMapReportLocationG_startLocation_Params {
	/**（可选项）定位精度，**信号不稳定时，定位精度过高，在 iOS 平台上会偶现定位失败的问题***/ 
	accuracy?:string,

	/**（可选项）位置更新所需最小距离（单位米）*/ 
	filter?:number,

	/**（可选项）获取到位置信息后是否自动停止定位*/ 
	autoStop?:boolean,

	/**（可选项）定位回调和上报数据是否带有逆地理信息(android不支持此字段，逆地理信息始终返回，开发者可根据需要自行取值)*/ 
	geocode?:boolean,

	/**（可选项）当 autoStop 为 false 时，本参数表示将当前位置信息上报的配置，若 autoStop 为 true，则本参数无意义。*/ 
	report?:JSON,

}

interface flymePush {
	/** 订阅*/ 
	register():void

	/** 取消订阅*/ 
	unRegister():void

	/** 标签订阅*/ 
	subScribeTags():void

	/** 取消标签订阅*/ 
	unSubScribeTags():void

	/** 取消所有标签订阅*/ 
	unSubScribeAllTags():void

	/** 获取所有标签*/ 
	checkSubScribeTags():void

	/** 别名订阅*/ 
	subScribeAlias():void

	/** 取消别名订阅*/ 
	unSubScribeAlias():void

	/** 获取别名*/ 
	checkSubScribeAlias():void

	/** 获取已订阅pushId*/ 
	getPushId():void

	/** 清除所有通知栏消息*/ 
	clearNotification():void

	/** 清除所有通知栏消息*/ 
	clearByNotifyId():void

	/** 清除所有通知栏消息*/ 
	setMsgArrivedListener():void

	/** 设置通知栏消息点击监听*/ 
	setNotifyClickListener():void

}
interface beecloud {
}
interface CCShortVideo {
	/**
	 * `添加预览控件，录制视频前需要先添加预览控件`
	 * ========params==========
	 *
	 * `rect` :JSON : 预览控件位置
	 *
	 * `type` :number : 显示分辨率；（仅支持iOS）
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	openView(params:CCShortVideo_openView_Params, callback?: (ret:JSON) => void):void

	/** 移除预览控件*/ 
	closeView(callback?: (ret:JSON) => void):void

	/**
	 * `开始录制`
	 * ========params==========
	 *
	 * `width` :number : （可选项）录制宽； (只支持安卓)
	 *
	 * `height` :number : （可选项）录制高； (只支持安卓)
	 *
	 * `size` :number : （可选项）视频输出尺寸比例 ；(只支持iOS)
	 *
	 * `videoPath` :string : 视频存储位置，支持fs路径； (只支持安卓)
	 *
	 * `recordTime` :number : （可选项）录制时长（毫秒）；(只支持安卓)
	 *
	 * `beautySkinValue` :number : （可选项）磨皮程度； (只支持安卓)
	 *
	 * `beautyWhiteValue` :number : （可选项）美白程度；(只支持安卓)
	 *
	 * `filter` :string : （可选项）滤镜；(只支持安卓)
	 */
	startRecord(params:CCShortVideo_startRecord_Params):void

	/** 停止录制*/ 
	stopRecord(callback?: (ret:JSON) => void):void

	/**
	 * `合并视频，已录制多段视频合并`
	 * ========params==========
	 *
	 * `videoPath` :string : 视频路径，支持fs路径 ；（仅支持安卓）
	 *
	 * `pathArray` :Array : 被合并的视频路径数组；大于等于2个视频路径（仅支持iOS）
	 */
	combineVideo(params:CCShortVideo_combineVideo_Params, callback?: (ret:JSON) => void):void

	/** 镜头切换*/ 
	switchCamera():void

	/** 视频剪辑*/ 
	cutVideo(callback?: (ret:JSON) => void):void

}
interface CCShortVideo_openView_Params {
	/**预览控件位置*/ 
	rect:JSON,

	/**显示分辨率；（仅支持iOS）*/ 
	type:number,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

}

interface CCShortVideo_startRecord_Params {
	/**（可选项）录制宽； (只支持安卓)*/ 
	width?:number,

	/**（可选项）录制高； (只支持安卓)*/ 
	height?:number,

	/**（可选项）视频输出尺寸比例 ；(只支持iOS)*/ 
	size?:number,

	/**视频存储位置，支持fs路径； (只支持安卓)*/ 
	videoPath:string,

	/**（可选项）录制时长（毫秒）；(只支持安卓)*/ 
	recordTime?:number,

	/**（可选项）磨皮程度； (只支持安卓)*/ 
	beautySkinValue?:number,

	/**（可选项）美白程度；(只支持安卓)*/ 
	beautyWhiteValue?:number,

	/**（可选项）滤镜；(只支持安卓)*/ 
	filter?:string,

}

interface CCShortVideo_combineVideo_Params {
	/**视频路径，支持fs路径 ；（仅支持安卓）*/ 
	videoPath:string,

	/**被合并的视频路径数组；大于等于2个视频路径（仅支持iOS）*/ 
	pathArray:Array,

}

interface mapnavn {
	/** 开启导航*/ 
	StartNavigation():void

}
interface bLogin {
}
interface mogoAdsGDT {
}
interface tunnel {
	/**
	 * `初始化 log 文件`
	 * ========params==========
	 *
	 * `path` :string : 文件路径
	 */
	initLog(params:tunnel_initLog_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始`
	 * ========params==========
	 *
	 * `path` :string : 文件路径
	 */
	start(params:tunnel_start_Params):void

	/** 关闭*/ 
	close():void

	/**
	 * `重新开始`
	 * ========params==========
	 *
	 * `path` :string : 文件路径
	 */
	restart(params:tunnel_restart_Params):void

}
interface tunnel_initLog_Params {
	/**文件路径*/ 
	path:string,

}

interface tunnel_start_Params {
	/**文件路径*/ 
	path:string,

}

interface tunnel_restart_Params {
	/**文件路径*/ 
	path:string,

}

interface ISBCD {
	/**
	 * `初始化并验证ak的正确性`
	 * ========params==========
	 *
	 * `savePath` :string : 外存设备上的绝对路径，用于存放返回的切边名片图片和数据模板文件,支持fs路径, (Android端)
	 *
	 * `BCRAllTempletePath` :string : 数据模板文件路径,sdk包中提供的如:BCRAllTemplete.dat 名字不可更改sdk提供的是哪个名字就用那个名字 (Android端)
	 *
	 * `BCRAllTempletePath` :string : 数据模板文件路径,sdk包中提供的如:IS_BCRTemplete_AddressParse.dat 名字不可更改 (Android端)
	 */
	verificationAppkey(params:ISBCD_verificationAppkey_Params, callback?: (ret:JSON) => void):void

	/**
	 * `识别图片，返回文字信息`
	 * ========params==========
	 *
	 * `path` :string : 要识别的图片的路径，要求本地路径（widget://、fs://）
	 *
	 * `languages` :Array : （可选项）识别结果语音设置
	 *
	 * `needImageProcess` :boolean : （可选项）是否返回名片抠图(Android此字段无效,Android一定返回名片抠图)
	 */
	recognizeImage(params:ISBCD_recognizeImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `事件监听`
	 * ========params==========
	 *
	 * `target` :string : （可选项）监听事件名
	 */
	addEventListener(params:ISBCD_addEventListener_Params, callback?: (ret:JSON) => void):void

}
interface ISBCD_verificationAppkey_Params {
	/**外存设备上的绝对路径，用于存放返回的切边名片图片和数据模板文件,支持fs路径, (Android端)*/ 
	savePath:string,

	/**数据模板文件路径,sdk包中提供的如:BCRAllTemplete.dat 名字不可更改sdk提供的是哪个名字就用那个名字 (Android端)*/ 
	BCRAllTempletePath:string,

	/**数据模板文件路径,sdk包中提供的如:IS_BCRTemplete_AddressParse.dat 名字不可更改 (Android端)*/ 
	BCRAllTempletePath:string,

}

interface ISBCD_recognizeImage_Params {
	/**要识别的图片的路径，要求本地路径（widget://、fs://）*/ 
	path:string,

	/**（可选项）识别结果语音设置*/ 
	languages?:Array,

	/**（可选项）是否返回名片抠图(Android此字段无效,Android一定返回名片抠图)*/ 
	needImageProcess?:boolean,

}

interface ISBCD_addEventListener_Params {
	/**（可选项）监听事件名*/ 
	target?:string,

}

interface agoraVoice {
	/**
	 * `初始化声网引擎`
	 * ========params==========
	 *
	 * `appId` :string : Agora为应用程序开发者签发的AppID。如果没有，请向Agora申请。
	 */
	init(params:agoraVoice_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入通话频道`
	 * ========params==========
	 *
	 * `channelKey` :string : （可选项）此为程序生成的ChannelKey；当用户只使用AppID时，该参数是可选的，传NULL即可；当用户使用ChannelKey时， Agora 为应用程序开发者额外签发一个AppCertificate，开发者结合 Agora 提供的算法生成此ChannelKey，用于服务器端用户验证。一般来说使用AppID即可，对于安全有极高要求的使用者需要使用ChannelKey。
	 *
	 * `channelName` :string : 标识通话的频道名称，长度在64字节以内的字符串，以下为支持的字符集范围（共89个字     符）：a-z A-Z 0-9 空格 ! #$%& ()+, - :;<=. >? @[] ^_` {|} ~
	 *
	 * `uid` :number : (可选项) 用户ID，32位无符号整数。建议设置范围：1到(2^32-1)，并保证唯一性。如果不指定（即设为 0），SDK会自动分配一个，并在 onJoinChannelSuccess 回调方法中返
	 */
	joinChannel(params:agoraVoice_joinChannel_Params, callback?: (ret:JSON) => void):void

	/** 离开通话频道*/ 
	leaveChannel():void

	/**
	 * `更新ChannelKey，如果启用了ChannelKey机制，过一段时间后Key会失效。当 errorListener 回调 109 时，应用程序应重新获取Key，然后调用该 API 更新 Key，否则 SDK 无法和服务器建立连接。`
	 * ========params==========
	 *
	 * `channelKey` :string : 指定要更新的ChannelKey。
	 */
	renewChannelKey(params:agoraVoice_renewChannelKey_Params, callback?: (ret:JSON) => void):void

	/**
	 * `静音/取消静音。该方法用于允许/禁止往网络发送本地音频流。`
	 * ========params==========
	 *
	 * `muted` :boolean : （可选项）是否静音
	 */
	muteLocalAudioStream(params:agoraVoice_muteLocalAudioStream_Params, callback?: (ret:JSON) => void):void

	/**
	 * `静音所有远端用户/对所有远端用户取消静音。本方法用于允许/禁止播放远端用户的音频流。`
	 * ========params==========
	 *
	 * `muted` :boolean : （可选项）是否静音
	 */
	muteAllRemoteAudioStreams(params:agoraVoice_muteAllRemoteAudioStreams_Params, callback?: (ret:JSON) => void):void

	/**
	 * `静音指定远端用户/对指定远端用户取消静音。本方法用于允许/禁止播放远端用户的音频流。`
	 * ========params==========
	 *
	 * `uid` :number : 指定用户id
	 *
	 * `muted` :boolean : （可选项）是否静音
	 */
	muteRemoteAudioStream(params:agoraVoice_muteRemoteAudioStream_Params, callback?: (ret:JSON) => void):void

	/**
	 * `切换音频输出方式：扬声器或听筒`
	 * ========params==========
	 *
	 * `enabled` :boolean : （可选项）是否为扬声器
	 */
	setEnableSpeakerphone(params:agoraVoice_setEnableSpeakerphone_Params, callback?: (ret:JSON) => void):void

	/** 是否是扬声器状态*/ 
	isSpeakerphoneEnabled():void

	/**
	 * `设定扬声器音量`
	 * ========params==========
	 *
	 * `volume` :number : 音量，最小为 0，最大为 255
	 */
	setSpeakerphoneVolume(params:agoraVoice_setSpeakerphoneVolume_Params, callback?: (ret:JSON) => void):void

	/**
	 * `在通话中进行录音，录音文件的格式为 wav,该接口需要在 joinChannel 之后调用；在leaveChannel 时如果还在录音，会自动停止`
	 * ========params==========
	 *
	 * `filePath` :string : 存储录音文件的文件路径（包含文件名及其后缀，如：fs://audio.wav），支持协议：fs://
	 */
	startAudioRecording(params:agoraVoice_startAudioRecording_Params, callback?: (ret:JSON) => void):void

	/** 停止录音*/ 
	stopAudioRecording(callback?: (ret:JSON) => void):void

	/** 获取当前的通话 ID，客户端在每次 joinChannel 后会生成一个对应的 CallId，标识该客户端的此次通话*/ 
	getCallId(callback?: (ret:JSON) => void):void

	/**
	 * `该方法能够让用户为通话评分，一般在通话结束后调用`
	 * ========params==========
	 *
	 * `callId` :string : 通过 getCallId 函数获取的通话 ID
	 *
	 * `rating` :number : 给通话的评分，最低 1 分，最高 10 分
	 *
	 * `description` :string : （可选项）给通话的描述，长度应小于 800 字节
	 */
	rate(params:agoraVoice_rate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `该方法让用户就通话质量进行投诉。一般在通话结束后调用`
	 * ========params==========
	 *
	 * `callId` :string : 通过 getCallId 函数获取的通话 ID
	 *
	 * `description` :string : （可选项）给通话的描述，长度应小于 800 字节
	 */
	complain(params:agoraVoice_complain_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听耳机插拔事件，在加入通话前调用。若不监听，则拔掉耳机时不会自动停止播放声音。**iOS 暂不支持本接口，默认拔掉耳机即自动停止声音外放**`
	 * ========params==========
	 *
	 * `monitor` :boolean : 是否监听耳机插拔事件
	 */
	monitorHeadsetEvent(params:agoraVoice_monitorHeadsetEvent_Params):void

	/**
	 * `监听蓝牙耳机事件，在加入通话前调用。**iOS 暂不支持本接口，默认拔掉耳机即自动停止声音外放**`
	 * ========params==========
	 *
	 * `monitor` :boolean : 是否监听蓝牙耳机插拔事件
	 */
	monitorBluetoothHeadsetEvent(params:agoraVoice_monitorBluetoothHeadsetEvent_Params):void

	/**
	 * `设置插入耳机时的音频输出设备切换逻辑，应在通话前调用，**iOS 暂不支持本接口**`
	 * ========params==========
	 *
	 * `enabled` :boolean : True：耳机优先。插入耳机时，无论当前设置为耳机还是扬声器输出，都切换到耳机输     出。False：外放优先。插入耳机时，如果当前设置为耳机输出，则切换到耳机；如果当前设置为外放输出，则保留外放输出
	 */
	setPreferHeadset(params:agoraVoice_setPreferHeadset_Params):void

	/**
	 * `启用说话者音量提示`
	 * ========params==========
	 *
	 * `interval` :number : 指定音量提示的时间间隔，建议设置到大于 200 毫秒
	 *
	 * `smooth` :number : 平滑系数
	 */
	enableAudioVolumeIndication(params:agoraVoice_enableAudioVolumeIndication_Params, callback?: (ret:JSON) => void):void

	/**
	 * `启用内置的加密密码，在加入频道之前，应用程序需调用 setEncryptionSecret 指定 secret 来启用内置的加密功能，同一频道内的所有用户应设置相同的 secret。 当用户离开频道时，该频道的 secret 会自动清除。如果未指定 secret 或将 secret 设置为空，则无法激活加密功能。`
	 * ========params==========
	 *
	 * `secret` :string : 加密密码
	 */
	setEncryptionSecret(params:agoraVoice_setEncryptionSecret_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置内置的加密方案，Agora Native SDK 支持内置加密功能，默认使用 AES-128-XTS 加密方式。如需使用其他加密方式，可以调用该 API 设置。同一频道内的所有用户必须设置相同的加密方式和 secret 才能进行通话`
	 * ========params==========
	 *
	 * `encryptionMode` :string : 加密方式
	 */
	setEncryptionMode(params:agoraVoice_setEncryptionMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `启动服务端录音功能。启用该服务需要正确的 Recording Key。`
	 * ========params==========
	 *
	 * `recordingKey` :string : 录音KEY
	 */
	startRecordingService(params:agoraVoice_startRecordingService_Params, callback?: (ret:JSON) => void):void

	/**
	 * `停止服务端录音功能。启用该服务需要正确的 RecordingKey。`
	 * ========params==========
	 *
	 * `recordingKey` :string : 录音KEY
	 */
	stopRecordingService(params:agoraVoice_stopRecordingService_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置频道通话模式,该方法用于设置频道模式(Profile)。 Agora RtcEngine 需知道应用程序的使用场景(例如群聊模式或主播模式),从而使用不同的优化手段。`
	 * ========params==========
	 *
	 * `profile` :string : 指定频道的通话模式
	 */
	setChannelProfile(params:agoraVoice_setChannelProfile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始客户端本地混音，指定本地音频文件来和麦克风采集的音频流进行混音和替换(用音频文件替换麦克风采集的音频流)，可以通过参数选择是否让对方听到本地播放的音频和指定循环播放的次数。`
	 * ========params==========
	 *
	 * `filePath` :string : 指定需要混音的本地音频文件名和文件路径。支持以下音频格式：mp3，aac，m4a，3gp，wav，flac
	 *
	 * `loopback` :boolean : （可选项）是否只有本地可以听到混音或替换后的音频流
	 *
	 * `replace` :boolean : （可选项）是否音频文件内容将会替换本地录音的音频流
	 *
	 * `cycle` :number : （可选项）指定音频文件循环播放的次数，-1时为无限循环
	 */
	startAudioMixing(params:agoraVoice_startAudioMixing_Params, callback?: (ret:JSON) => void):void

	/** 停止客户端本地混音*/ 
	stopAudioMixing():void

	/**
	 * `- 类型：字符串`
	 * ========params==========
	 *
	 * `options` :string : sdk options in json format
	 */
	setParameters(params:agoraVoice_setParameters_Params, callback?: (ret:JSON) => void):void

	/**
	 * `- 类型：字符串`
	 * ========params==========
	 *
	 * `parameter` :string : sdk options in json format
	 *
	 * `args` :string : sdk options in json format
	 */
	getParameters(params:agoraVoice_getParameters_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听警告信息`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动警告监听
	 */
	warningListener(params:agoraVoice_warningListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `监听错误信息`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动错误监听
	 */
	errorListener(params:agoraVoice_errorListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `声音质量监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动声音质量监听
	 */
	audioQualityListener(params:agoraVoice_audioQualityListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `说话声音音量监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动声音音量监听
	 */
	audioVolumeListener(params:agoraVoice_audioVolumeListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户加入频道监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启动用户加入频道监听
	 */
	userJoinedListener(params:agoraVoice_userJoinedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `再次进入频道监听，有时候由于网络原因，客户端可能会和服务器失去连接， SDK 会进行自动重连，自动重连成功后触发此监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用再次进入频道监听
	 */
	rejoinChannelListener(params:agoraVoice_rejoinChannelListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户离开频道监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用户离开频道监听
	 */
	userOfflineListener(params:agoraVoice_userOfflineListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户静音监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用户静音监听
	 */
	userMuteAudioListener(params:agoraVoice_userMuteAudioListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `统计数据监听，每两秒触发一次`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启统计数据监听
	 */
	rtcStatsListener(params:agoraVoice_rtcStatsListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `报告网络质量监听，不在通话中时，不定期触发，向应用程序上报当前网络连接质量`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用报告网络质量监听
	 */
	lastmileQualityListener(params:agoraVoice_lastmileQualityListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `网络连接中断监听，与 onConnectionLost 回调的区别是：`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用网络连接中断监听
	 */
	connectionInterruptedListener(params:agoraVoice_connectionInterruptedListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `网络连接丢失监听，SDK 和服务器失去了网络连接，并且尝试自动重连一段时间（默认 10 秒）`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用网络连接丢失监听
	 */
	connectionLostListener(params:agoraVoice_connectionLostListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `报告网络质量监听`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否启用报告网络质量监听
	 */
	networkQualityListener(params:agoraVoice_networkQualityListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置日志文件,设置 SDK 的输出 log 文件。 SDK 运行时产生的所有 log 将写入该文件。应用程序必须保证指定的目录存在而且可写。`
	 * ========params==========
	 *
	 * `filePath` :string : log 文件的全路径名（包含文件名及其后缀，如：fs://log.txt），支持协议：fs://
	 */
	setLogFile(params:agoraVoice_setLogFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `在加入频道前， 用户需要通过本方法设置观众或主播模式（默认）。`
	 * ========params==========
	 *
	 * `role` :string : 直播的用户角色
	 *
	 * `permissionKey` :string : （可选项）permission key of role change
	 */
	setClientRole(params:agoraVoice_setClientRole_Params, callback?: (ret:JSON) => void):void

	/**
	 * `该方法设置单流（默认）或者双流直播模式，仅在直播模式有效。`
	 * ========params==========
	 *
	 * `enabled` :boolean : （可选项）是否设置为双流
	 */
	enableDualStreamMode(params:agoraVoice_enableDualStreamMode_Params, callback?: (ret:JSON) => void):void

}
interface agoraVoice_init_Params {
	/**Agora为应用程序开发者签发的AppID。如果没有，请向Agora申请。*/ 
	appId:string,

}

interface agoraVoice_joinChannel_Params {
	/**（可选项）此为程序生成的ChannelKey；当用户只使用AppID时，该参数是可选的，传NULL即可；当用户使用ChannelKey时， Agora 为应用程序开发者额外签发一个AppCertificate，开发者结合 Agora 提供的算法生成此ChannelKey，用于服务器端用户验证。一般来说使用AppID即可，对于安全有极高要求的使用者需要使用ChannelKey。*/ 
	channelKey?:string,

	/**标识通话的频道名称，长度在64字节以内的字符串，以下为支持的字符集范围（共89个字     符）：a-z A-Z 0-9 空格 ! #$%& ()+, - :;<=. >? @[] ^_` {|} ~*/ 
	channelName:string,

	/**(可选项) 用户ID，32位无符号整数。建议设置范围：1到(2^32-1)，并保证唯一性。如果不指定（即设为 0），SDK会自动分配一个，并在 onJoinChannelSuccess 回调方法中返*/ 
	uid?:number,

}

interface agoraVoice_renewChannelKey_Params {
	/**指定要更新的ChannelKey。*/ 
	channelKey:string,

}

interface agoraVoice_muteLocalAudioStream_Params {
	/**（可选项）是否静音*/ 
	muted?:boolean,

}

interface agoraVoice_muteAllRemoteAudioStreams_Params {
	/**（可选项）是否静音*/ 
	muted?:boolean,

}

interface agoraVoice_muteRemoteAudioStream_Params {
	/**指定用户id*/ 
	uid:number,

	/**（可选项）是否静音*/ 
	muted?:boolean,

}

interface agoraVoice_setEnableSpeakerphone_Params {
	/**（可选项）是否为扬声器*/ 
	enabled?:boolean,

}

interface agoraVoice_setSpeakerphoneVolume_Params {
	/**音量，最小为 0，最大为 255*/ 
	volume:number,

}

interface agoraVoice_startAudioRecording_Params {
	/**存储录音文件的文件路径（包含文件名及其后缀，如：fs://audio.wav），支持协议：fs://*/ 
	filePath:string,

}

interface agoraVoice_rate_Params {
	/**通过 getCallId 函数获取的通话 ID*/ 
	callId:string,

	/**给通话的评分，最低 1 分，最高 10 分*/ 
	rating:number,

	/**（可选项）给通话的描述，长度应小于 800 字节*/ 
	description?:string,

}

interface agoraVoice_complain_Params {
	/**通过 getCallId 函数获取的通话 ID*/ 
	callId:string,

	/**（可选项）给通话的描述，长度应小于 800 字节*/ 
	description?:string,

}

interface agoraVoice_monitorHeadsetEvent_Params {
	/**是否监听耳机插拔事件*/ 
	monitor:boolean,

}

interface agoraVoice_monitorBluetoothHeadsetEvent_Params {
	/**是否监听蓝牙耳机插拔事件*/ 
	monitor:boolean,

}

interface agoraVoice_setPreferHeadset_Params {
	/**True：耳机优先。插入耳机时，无论当前设置为耳机还是扬声器输出，都切换到耳机输     出。False：外放优先。插入耳机时，如果当前设置为耳机输出，则切换到耳机；如果当前设置为外放输出，则保留外放输出*/ 
	enabled:boolean,

}

interface agoraVoice_enableAudioVolumeIndication_Params {
	/**指定音量提示的时间间隔，建议设置到大于 200 毫秒*/ 
	interval:number,

	/**平滑系数*/ 
	smooth:number,

}

interface agoraVoice_setEncryptionSecret_Params {
	/**加密密码*/ 
	secret:string,

}

interface agoraVoice_setEncryptionMode_Params {
	/**加密方式*/ 
	encryptionMode:string,

}

interface agoraVoice_startRecordingService_Params {
	/**录音KEY*/ 
	recordingKey:string,

}

interface agoraVoice_stopRecordingService_Params {
	/**录音KEY*/ 
	recordingKey:string,

}

interface agoraVoice_setChannelProfile_Params {
	/**指定频道的通话模式*/ 
	profile:string,

}

interface agoraVoice_startAudioMixing_Params {
	/**指定需要混音的本地音频文件名和文件路径。支持以下音频格式：mp3，aac，m4a，3gp，wav，flac*/ 
	filePath:string,

	/**（可选项）是否只有本地可以听到混音或替换后的音频流*/ 
	loopback?:boolean,

	/**（可选项）是否音频文件内容将会替换本地录音的音频流*/ 
	replace?:boolean,

	/**（可选项）指定音频文件循环播放的次数，-1时为无限循环*/ 
	cycle?:number,

}

interface agoraVoice_setParameters_Params {
	/**sdk options in json format*/ 
	options:string,

}

interface agoraVoice_getParameters_Params {
	/**sdk options in json format*/ 
	parameter:string,

	/**sdk options in json format*/ 
	args:string,

}

interface agoraVoice_warningListener_Params {
	/**（可选项）是否启动警告监听*/ 
	enable?:boolean,

}

interface agoraVoice_errorListener_Params {
	/**（可选项）是否启动错误监听*/ 
	enable?:boolean,

}

interface agoraVoice_audioQualityListener_Params {
	/**（可选项）是否启动声音质量监听*/ 
	enable?:boolean,

}

interface agoraVoice_audioVolumeListener_Params {
	/**（可选项）是否启动声音音量监听*/ 
	enable?:boolean,

}

interface agoraVoice_userJoinedListener_Params {
	/**（可选项）是否启动用户加入频道监听*/ 
	enable?:boolean,

}

interface agoraVoice_rejoinChannelListener_Params {
	/**（可选项）是否启用再次进入频道监听*/ 
	enable?:boolean,

}

interface agoraVoice_userOfflineListener_Params {
	/**（可选项）是否启用户离开频道监听*/ 
	enable?:boolean,

}

interface agoraVoice_userMuteAudioListener_Params {
	/**（可选项）是否启用户静音监听*/ 
	enable?:boolean,

}

interface agoraVoice_rtcStatsListener_Params {
	/**（可选项）是否启统计数据监听*/ 
	enable?:boolean,

}

interface agoraVoice_lastmileQualityListener_Params {
	/**（可选项）是否启用报告网络质量监听*/ 
	enable?:boolean,

}

interface agoraVoice_connectionInterruptedListener_Params {
	/**（可选项）是否启用网络连接中断监听*/ 
	enable?:boolean,

}

interface agoraVoice_connectionLostListener_Params {
	/**（可选项）是否启用网络连接丢失监听*/ 
	enable?:boolean,

}

interface agoraVoice_networkQualityListener_Params {
	/**（可选项）是否启用报告网络质量监听*/ 
	enable?:boolean,

}

interface agoraVoice_setLogFile_Params {
	/**log 文件的全路径名（包含文件名及其后缀，如：fs://log.txt），支持协议：fs://*/ 
	filePath:string,

}

interface agoraVoice_setClientRole_Params {
	/**直播的用户角色*/ 
	role:string,

	/**（可选项）permission key of role change*/ 
	permissionKey?:string,

}

interface agoraVoice_enableDualStreamMode_Params {
	/**（可选项）是否设置为双流*/ 
	enabled?:boolean,

}

interface neteasePlayer {
	/** 播放器监听事件*/ 
	addEventListener():void

	/** 弹出提醒信息（暂仅支持Android）*/ 
	showAlert():void

}
interface jdPay {
	/**
	 * `注册`
	 * ========params==========
	 *
	 * `appId` :string : 商户入驻获取的appID
	 *
	 * `merchantID` :string : 商户入驻时分配的merchantID
	 */
	register(params:jdPay_register_Params, callback?: (ret:JSON) => void):void

	/**
	 * `京东支付`
	 * ========params==========
	 *
	 * `orderId` :string : 订单号
	 *
	 * `signData` :string : 验签数据
	 */
	pay(params:jdPay_pay_Params, callback?: (ret:JSON) => void):void

}
interface jdPay_register_Params {
	/**商户入驻获取的appID*/ 
	appId:string,

	/**商户入驻时分配的merchantID*/ 
	merchantID:string,

}

interface jdPay_pay_Params {
	/**订单号*/ 
	orderId:string,

	/**验签数据*/ 
	signData:string,

}

interface cchelperModule {
}
interface pdBot {
	/**
	 * `启动智能客服页面`
	 * ========params==========
	 *
	 * `userId` :string : （可选项）用户唯一标识，用于区分用户及管理历史消息
	 *
	 * `userName` :string : （可选项）用户名，接入人工客服后会在服工作台展示
	 *
	 * `nickName` :string : （可选项）用户昵称，接入人工客服后会在服工作台展示
	 *
	 * `phone` :string : （可选项）用户联系电话，接入人工客服后会在服工作台展示
	 *
	 * `mail` :string : （可选项）用户邮箱，接入人工客服后会在服工作台展示
	 *
	 * `qq` :string : （可选项）用户QQ号码，接入人工客服后会在服工作台展示
	 *
	 * `company` :string : （可选项）所属公司，接入人工客服后会在服工作台展示
	 *
	 * `remarks` :string : （可选项）备注，接入人工客服后会在服工作台展示
	 */
	startChat(params:pdBot_startChat_Params):void

	/**
	 * `删除指定时间戳之前的历史消息`
	 * ========params==========
	 *
	 * `userId` :number : （可选项）要指定的时间戳，如果传空则全部删除
	 */
	removeMessage(params:pdBot_removeMessage_Params):void

}
interface pdBot_startChat_Params {
	/**（可选项）用户唯一标识，用于区分用户及管理历史消息*/ 
	userId?:string,

	/**（可选项）用户名，接入人工客服后会在服工作台展示*/ 
	userName?:string,

	/**（可选项）用户昵称，接入人工客服后会在服工作台展示*/ 
	nickName?:string,

	/**（可选项）用户联系电话，接入人工客服后会在服工作台展示*/ 
	phone?:string,

	/**（可选项）用户邮箱，接入人工客服后会在服工作台展示*/ 
	mail?:string,

	/**（可选项）用户QQ号码，接入人工客服后会在服工作台展示*/ 
	qq?:string,

	/**（可选项）所属公司，接入人工客服后会在服工作台展示*/ 
	company?:string,

	/**（可选项）备注，接入人工客服后会在服工作台展示*/ 
	remarks?:string,

}

interface pdBot_removeMessage_Params {
	/**（可选项）要指定的时间戳，如果传空则全部删除*/ 
	userId?:number,

}

interface oppoPush {
	/** 判断是否手机平台是否支持PUSH*/ 
	isSupportPush():void

	/** 注册*/ 
	register(callback?: (ret:JSON) => void):void

	/** 解注册OPush推送服务*/ 
	unRegister():void

	/** 获取注册OPush推送服务的注册ID*/ 
	getRegisterID():void

	/** 暂停推送服务*/ 
	pausePush():void

	/** 恢复推送服务*/ 
	resumePush():void

	/** 获取推送状态 （在register方法中回调）*/ 
	getPushState():void

	/** 获取OPush推送服务MCS版本*/ 
	getSDKVersion():void

	/** 设置允许推送时间*/ 
	setPushTime():void

}
interface qiniuUpfile {
}
interface dkSDK {
	/**
	 * `注册key:开发者需要在http://www.alldk.com/index.php?action=main.register      注册key,注册成功后才能使用模块`
	 * ========params==========
	 *
	 * `h` :string : 高度设置,用于设置高度,
	 *
	 * `w` :string : 宽度设置,用于设置宽度
	 *
	 * `x` :string : banner左上角横坐标
	 *
	 * `y` :string : banner左上角纵坐标
	 *
	 * `hideDate` :any : 经过多长时间再次调用广告,单位毫秒
	 *
	 * `height` :string : iOS设置int广告的高度,android 已经实现了根据屏幕自适应可任意填写
	 *
	 * `width` :string : iOS设置int广告的宽度和高度,android 已经实现了根据屏幕自适应可任意填写
	 */
	registerKey(params:dkSDK_registerKey_Params):void

}
interface dkSDK_registerKey_Params {
	/**高度设置,用于设置高度,*/ 
	h:string,

	/**宽度设置,用于设置宽度*/ 
	w:string,

	/**banner左上角横坐标*/ 
	x:string,

	/**banner左上角纵坐标*/ 
	y:string,

	/**经过多长时间再次调用广告,单位毫秒*/ 
	hideDate:any,

	/**iOS设置int广告的高度,android 已经实现了根据屏幕自适应可任意填写*/ 
	height:string,

	/**iOS设置int广告的宽度和高度,android 已经实现了根据屏幕自适应可任意填写*/ 
	width:string,

}

interface JGsms {
}
interface smsVerify {
	/** 注册应用*/ 
	register(callback?: (ret:JSON) => void):void

	/**
	 * `发送短信验证码`
	 * ========params==========
	 *
	 * `phone` :string : 需要验证的手机号码
	 *
	 * `country` :string : （可选项）国际区号。前面不要有 + 号
	 */
	sms(params:smsVerify_sms_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送语音验证码`
	 * ========params==========
	 *
	 * `phone` :string : 需要验证的手机号码
	 *
	 * `country` :string : （可选项）国际区号。前面不要有 + 号
	 */
	voice(params:smsVerify_voice_Params, callback?: (ret:JSON) => void):void

	/**
	 * `校验验证码`
	 * ========params==========
	 *
	 * `phone` :string : 需要验证的手机号码
	 *
	 * `code` :string : 收到的验证码
	 *
	 * `country` :string : （可选项）国际区号。前面不要有 + 号
	 */
	verify(params:smsVerify_verify_Params, callback?: (ret:JSON) => void):void

}
interface smsVerify_sms_Params {
	/**需要验证的手机号码*/ 
	phone:string,

	/**（可选项）国际区号。前面不要有 + 号*/ 
	country?:string,

}

interface smsVerify_voice_Params {
	/**需要验证的手机号码*/ 
	phone:string,

	/**（可选项）国际区号。前面不要有 + 号*/ 
	country?:string,

}

interface smsVerify_verify_Params {
	/**需要验证的手机号码*/ 
	phone:string,

	/**收到的验证码*/ 
	code:string,

	/**（可选项）国际区号。前面不要有 + 号*/ 
	country?:string,

}

interface mapleRTC {
}
interface gyPrint {
	/** 搜索打印机*/ 
	searchUSBDevice(callback?: (ret:JSON) => void):void

	/** 链接打印机*/ 
	connectUSBDevice(callback?: (ret:JSON) => void):void

	/** 检查打印机纸张*/ 
	checkUSBDevicePaper(callback?: (ret:JSON) => void):void

	/** 打印文字*/ 
	usbPrintText(callback?: (ret:JSON) => void):void

	/** 打印条形码*/ 
	usbPrintBarcode(callback?: (ret:JSON) => void):void

	/** 打印二维码*/ 
	usbPrintQR(callback?: (ret:JSON) => void):void

	/** 打印图片*/ 
	usbPrintImage(callback?: (ret:JSON) => void):void

	/** 切断印纸*/ 
	usbPaperCut(callback?: (ret:JSON) => void):void

	/** 打印多行*/ 
	usbPrintArray(callback?: (ret:JSON) => void):void

}
interface bugTags {
	/**
	 * `bugTags初始化，默认初始化之后，是不会显示悬浮窗的。需要手动设置呼出模式。`
	 * ========params==========
	 *
	 * `appKey` :string : 在bugTags官网申请的AppKey(分android 和 iOS)
	 *
	 * `showMsg` :boolean : 是否显示提示窗口
	 */
	doSDKInit(params:bugTags_doSDKInit_Params, callback?: (ret:JSON) => void):void

	/**
	 * `截图提交信息，(bug 改进等等)，编辑完之后，点击悬浮图标，点击打钩按钮进行提交`
	 * ========params==========
	 *
	 * `UserData` :JSON : （可选项）自定义用户数据 (默认自定用户数据为空，以key-value的形式存储)
	 */
	doSDKCapture(params:bugTags_doSDKCapture_Params, callback?: (ret:JSON) => void):void

	/**
	 * `手动发送 崩溃Exception`
	 * ========params==========
	 *
	 * `exName` :string : 异常名
	 *
	 * `exReason` :string : 异常发生的原因
	 *
	 * `UserData` :JSON : （可选项）自定义用户数据 (默认自定用户数据为空，以key-value的形式存储)
	 *
	 * `ret` :JSON : null
	 */
	doSDKSendException(params:bugTags_doSDKSendException_Params):void

	/**
	 * `发送文字 反馈信息`
	 * ========params==========
	 *
	 * `msg` :string : 反馈信息
	 *
	 * `UserData` :JSON : （可选项）自定义用户数据 (默认自定用户数据为空，以key-value的形式存储)
	 */
	doSDKSendFeedback(params:bugTags_doSDKSendFeedback_Params, callback?: (ret:JSON) => void):void

	/**
	 * `Bugtags 日志,调用该方法之后，bugTags后台会看Log消息。`
	 * ========params==========
	 *
	 * `msg` :string : 反馈信息
	 *
	 * `UserData` :JSON : （可选项）自定义用户数据 (默认自定用户数据为空，以key-value的形式存储)
	 */
	doSDKLog(params:bugTags_doSDKLog_Params):void

	/** 是否只允许在 Wifi 下上传数据*/ 
	doSDKSetUploadDataOnlyViaWiFi():void

	/**
	 * `设置 Bugtags 所处的呼出模式`
	 * ========params==========
	 *
	 * `invocationEvent` :any : 设置 Bugtags 所处的呼出模式 (0:静默模式，只收集 Crash 信息（如果允许，默认为允许; 1:通过摇一摇呼出 Bugtags;2:通过悬浮小球呼出 Bugtags)
	 */
	doSDKsetInvocationEvent(params:bugTags_doSDKsetInvocationEvent_Params, callback?: (ret:JSON) => void):void

	/** 获取 Bugtags 当前的呼出模式*/ 
	doSDKGetCurrentInvocationEvent():void

}
interface bugTags_doSDKInit_Params {
	/**在bugTags官网申请的AppKey(分android 和 iOS)*/ 
	appKey:string,

	/**是否显示提示窗口*/ 
	showMsg:boolean,

}

interface bugTags_doSDKCapture_Params {
	/**（可选项）自定义用户数据 (默认自定用户数据为空，以key-value的形式存储)*/ 
	UserData?:JSON,

}

interface bugTags_doSDKSendException_Params {
	/**异常名*/ 
	exName:string,

	/**异常发生的原因*/ 
	exReason:string,

	/**（可选项）自定义用户数据 (默认自定用户数据为空，以key-value的形式存储)*/ 
	UserData?:JSON,

	/**null*/ 
	ret:JSON,

}

interface bugTags_doSDKSendFeedback_Params {
	/**反馈信息*/ 
	msg:string,

	/**（可选项）自定义用户数据 (默认自定用户数据为空，以key-value的形式存储)*/ 
	UserData?:JSON,

}

interface bugTags_doSDKLog_Params {
	/**反馈信息*/ 
	msg:string,

	/**（可选项）自定义用户数据 (默认自定用户数据为空，以key-value的形式存储)*/ 
	UserData?:JSON,

}

interface bugTags_doSDKsetInvocationEvent_Params {
	/**设置 Bugtags 所处的呼出模式 (0:静默模式，只收集 Crash 信息（如果允许，默认为允许; 1:通过摇一摇呼出 Bugtags;2:通过悬浮小球呼出 Bugtags)*/ 
	invocationEvent:any,

}

interface sangforvpn {
	/** 初始化vpn连接*/ 
	init(callback?: (ret:JSON) => void):void

	/**
	 * `登陆vpn`
	 * ========params==========
	 *
	 * `userName` :string : （必填项）vpn账号；
	 *
	 * `password` :string : （必填项）vpn登陆密码
	 */
	login(params:sangforvpn_login_Params, callback?: (ret:JSON) => void):void

	/** 退出vpn*/ 
	logout(callback?: (ret:JSON) => void):void

}
interface sangforvpn_login_Params {
	/**（必填项）vpn账号；*/ 
	userName:string,

	/**（必填项）vpn登陆密码*/ 
	password:string,

}

interface bdFace {
	/**
	 * `人脸功能配置`
	 * ========params==========
	 *
	 * `minFaceSize` :number : （可选项）最小检测人脸阈值
	 *
	 * `cropFaceSizeWidth` :number : （可选项）截取人脸图片大小
	 *
	 * `occluThreshold` :number : （可选项）人脸遮挡阀值
	 *
	 * `illumThreshold` :number : （可选项）亮度阀值
	 *
	 * `blurThreshold` :number : （可选项）图像模糊阀值
	 *
	 * `eulurAngle` :JSON : （可选项）头部姿态角度
	 *
	 * `isCheckQuality` :boolean : （可选项）是否进行人脸图片质量检测
	 *
	 * `timeout` :number : （可选项）超时时间
	 *
	 * `threshold` :number : （可选项）人脸检测精度阀值
	 *
	 * `maxCropImageNum` :number : （可选项）照片采集张数
	 *
	 * `maxCropImageNum` :number : （可选项）照片采集张数
	 *
	 * `sound` :boolean : （可选项）是否播放语音(仅Android支持)
	 */
	configuration(params:bdFace_configuration_Params):void

	/**
	 * `进行活体检测`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）活体检测视频流的位置及尺寸
	 *
	 * `actions` :Array : （可选项）活体检测动作
	 *
	 * `isByOrder` :boolean : （可选项）是否按顺序进行活体动作
	 *
	 * `numOfLiveness` :number : （可选项）活体动作数目（actions为空时起作用）
	 *
	 * `previewRect` :JSON : （可选项）人脸检测区域大小
	 *
	 * `fixedOn` :string : （可选项）摄像头的预览视图添加到指定窗口的名字
	 *
	 * `fixed` :boolean : （可选项）摄像头的预览视图是否随所属 window 或 frame 滚动
	 */
	livenessAction(params:bdFace_livenessAction_Params, callback?: (ret:JSON) => void):void

	/**
	 * `人脸图像采集`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）活体检测视频流的位置及尺寸
	 *
	 * `previewRect` :JSON : （可选项）人脸检测区域大小
	 *
	 * `fixedOn` :string : （可选项）摄像头的预览视图添加到指定窗口的名字
	 *
	 * `fixed` :boolean : （可选项）摄像头的预览视图是否随所属 window 或 frame 滚动
	 */
	detectSilent(params:bdFace_detectSilent_Params, callback?: (ret:JSON) => void):void

	/** 关闭活体检测页面*/ 
	closeLiveness():void

	/** 隐藏活体检测页面*/ 
	hideLiveness():void

	/** 显示活体检测页面*/ 
	showLiveness():void

	/** 关闭人脸图像采集页面*/ 
	closeDetect():void

	/** 隐藏人脸图像采集页面*/ 
	hideDetect():void

	/** 显示人脸图像采集页面*/ 
	showDetects():void

}
interface bdFace_configuration_Params {
	/**（可选项）最小检测人脸阈值*/ 
	minFaceSize?:number,

	/**（可选项）截取人脸图片大小*/ 
	cropFaceSizeWidth?:number,

	/**（可选项）人脸遮挡阀值*/ 
	occluThreshold?:number,

	/**（可选项）亮度阀值*/ 
	illumThreshold?:number,

	/**（可选项）图像模糊阀值*/ 
	blurThreshold?:number,

	/**（可选项）头部姿态角度*/ 
	eulurAngle?:JSON,

	/**（可选项）是否进行人脸图片质量检测*/ 
	isCheckQuality?:boolean,

	/**（可选项）超时时间*/ 
	timeout?:number,

	/**（可选项）人脸检测精度阀值*/ 
	threshold?:number,

	/**（可选项）照片采集张数*/ 
	maxCropImageNum?:number,

	/**（可选项）照片采集张数*/ 
	maxCropImageNum?:number,

	/**（可选项）是否播放语音(仅Android支持)*/ 
	sound?:boolean,

}

interface bdFace_livenessAction_Params {
	/**（可选项）活体检测视频流的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）活体检测动作*/ 
	actions?:Array,

	/**（可选项）是否按顺序进行活体动作*/ 
	isByOrder?:boolean,

	/**（可选项）活体动作数目（actions为空时起作用）*/ 
	numOfLiveness?:number,

	/**（可选项）人脸检测区域大小*/ 
	previewRect?:JSON,

	/**（可选项）摄像头的预览视图添加到指定窗口的名字*/ 
	fixedOn?:string,

	/**（可选项）摄像头的预览视图是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface bdFace_detectSilent_Params {
	/**（可选项）活体检测视频流的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）人脸检测区域大小*/ 
	previewRect?:JSON,

	/**（可选项）摄像头的预览视图添加到指定窗口的名字*/ 
	fixedOn?:string,

	/**（可选项）摄像头的预览视图是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface qq {
}
interface appNestAgent {
	/** 检测是否某一个scheme 可以被打开。*/ 
	canOpenUrlWithScheme():void

	/**  注册AppNest终端注册第三方程序应用。*/ 
	registerApp():void

	/** 可以获得当前sdk的版本号，以用于版本管理。*/ 
	getVersion(callback?: (ret:JSON) => void):void

	/** 检测AppNest是否安装*/ 
	isAppNestInstalled():void

	/** 获取token*/ 
	getToken(callback?: (ret:JSON) => void):void

	/** 获取param*/ 
	getParam(callback?: (ret:JSON) => void):void

	/** 手势密码判断*/ 
	isSetGesture(callback?: (ret:JSON) => void):void

	/** 显示手势密码界面；以下方法为直接显示在keywindow上*/ 
	showGesture(callback?: (ret:JSON) => void):void

	/** 显示手势密码界面 ；该方法通过present方式由target显示 （该方法仅支持ios）*/ 
	showGesturePresent(callback?: (ret:JSON) => void):void

	/**  手势密码界面消失方法，在用户输入次数过多时，需要自主关闭 （该方法仅支持ios）*/ 
	disMissGestureView(callback?: (ret:JSON) => void):void

	/**  使用手势密码功能时，界面切换到后台需调用的函数(该方法仅支持 Android)*/ 
	onPause():void

	/** 使用手势密码功能时，界面切换到前台唤起手势密码界面需调用的函数(该方法仅支持 Android)*/ 
	onResume():void

}
interface zhiChiSobotMall {
	/** 启动智齿客服*/ 
	startZhiChiSobot():void

}
interface bvRecognizer {
	/**
	 * `长语音识别`
	 * ========params==========
	 *
	 * `language` :number : (可选项)(在线)根据识别语种，搜索或输入法模型及是否需要在线语义，来选择PID。 默认：cmn-Hans-CN
	 *
	 * `type` :string : (可选项）识别检测类型；默认‘ModelVAD’类型
	 */
	longVoiceListening(params:bvRecognizer_longVoiceListening_Params, callback?: (ret:JSON) => void):void

	/**
	 * `语音文件识别`
	 * ========params==========
	 *
	 * `language` :number : (可选项)(在线)根据识别语种，搜索或输入法模型及是否需要在线语义，来选择PID。 默认：cmn-Hans-CN
	 *
	 * `infile` :string : 音频源文件路径 （只支持 fs://）文件格式pcm
	 */
	sourceFileListening(params:bvRecognizer_sourceFileListening_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始语音识别`
	 * ========params==========
	 *
	 * `infile` :string : (仅支持安卓)（可选项）音频源文件路径 （只支持 fs://）文件格式pcm
	 *
	 * `VadEndPoint` :number : (可选项)静音超时断句及长语音 ,0:开启长语音。即无静音超时断句。手动调用stopListening停止录音,>0:不开启长语音。开启VAD尾点检   测，即静音判断的毫秒数。建议设置800ms-3000ms,默认开启长语音;
	 *
	 * `language` :number : (可选项)(在线)根据识别语种，搜索或输入法模型及是否需要在线语义，来选择PID。 默认：cmn-Hans-CN
	 *
	 * `outfile` :string : (仅支持安卓)（可选项）保存识别过程产生的录音文件的路径 （只支持 fs://）文件格式pcm
	 *
	 * `volume` :boolean : (仅支持安卓)（可选项）是否需要音量的回调,true是需要,false是不需要;默认false.
	 *
	 * `offLineSet` :JSON : （可选项）离线语音识别设置，无此参数则为在线识别.
	 */
	startListening(params:bvRecognizer_startListening_Params, callback?: (ret:JSON) => void):void

	/** 停止语音识别;*/ 
	stopListening():void

	/** 取消语音识别;*/ 
	cancel():void

	/** 设置音量监听*/ 
	setVolumeChangeListener():void

	/**
	 * `开始唤醒`
	 * ========params==========
	 *
	 * `wakeupFilePath` :string : (可选项)唤醒语言模型文件路径 (在http://ai.baidu.com/tech/speech/wake页面下载唤醒词WakeUp.bin文件 ，可直接使用)
	 */
	startWakeup(params:bvRecognizer_startWakeup_Params, callback?: (ret:JSON) => void):void

	/** 结束唤醒*/ 
	stopWakeup():void

}
interface bvRecognizer_longVoiceListening_Params {
	/**(可选项)(在线)根据识别语种，搜索或输入法模型及是否需要在线语义，来选择PID。 默认：cmn-Hans-CN*/ 
	language?:number,

	/**(可选项）识别检测类型；默认‘ModelVAD’类型*/ 
	type?:string,

}

interface bvRecognizer_sourceFileListening_Params {
	/**(可选项)(在线)根据识别语种，搜索或输入法模型及是否需要在线语义，来选择PID。 默认：cmn-Hans-CN*/ 
	language?:number,

	/**音频源文件路径 （只支持 fs://）文件格式pcm*/ 
	infile:string,

}

interface bvRecognizer_startListening_Params {
	/**(仅支持安卓)（可选项）音频源文件路径 （只支持 fs://）文件格式pcm*/ 
	infile?:string,

	/**(可选项)静音超时断句及长语音 ,0:开启长语音。即无静音超时断句。手动调用stopListening停止录音,>0:不开启长语音。开启VAD尾点检   测，即静音判断的毫秒数。建议设置800ms-3000ms,默认开启长语音;*/ 
	VadEndPoint?:number,

	/**(可选项)(在线)根据识别语种，搜索或输入法模型及是否需要在线语义，来选择PID。 默认：cmn-Hans-CN*/ 
	language?:number,

	/**(仅支持安卓)（可选项）保存识别过程产生的录音文件的路径 （只支持 fs://）文件格式pcm*/ 
	outfile?:string,

	/**(仅支持安卓)（可选项）是否需要音量的回调,true是需要,false是不需要;默认false.*/ 
	volume?:boolean,

	/**（可选项）离线语音识别设置，无此参数则为在线识别.*/ 
	offLineSet?:JSON,

}

interface bvRecognizer_startWakeup_Params {
	/**(可选项)唤醒语言模型文件路径 (在http://ai.baidu.com/tech/speech/wake页面下载唤醒词WakeUp.bin文件 ，可直接使用)*/ 
	wakeupFilePath?:string,

}

interface aMapNavi {
	/** 打开导航后的一些事件监听*/ 
	addEventListener():void

	/**
	 * `开始导航`
	 * ========params==========
	 *
	 * `start` :JSON : （可选项）起点信息。
	 *
	 * `wayPoint` :Array : （可选项）途经点位置信息,最多支持3条，请开发者自行控制。
	 *
	 * `end` :JSON : （可选项）终点信息。
	 *
	 * `carInfo` :JSON : （可选项）车辆信息。
	 *
	 * `theme` :number : （可选项）导航样式。(0:蓝色系 1:浅色系 2:暗色系)
	 *
	 * `showExitNaviDialog` :boolean : （可选项）设置退出导航组件是否显示退出弹框。(true 显示 false 不显示)
	 */
	startNavi(params:aMapNavi_startNavi_Params):void

}
interface aMapNavi_startNavi_Params {
	/**（可选项）起点信息。*/ 
	start?:JSON,

	/**（可选项）途经点位置信息,最多支持3条，请开发者自行控制。*/ 
	wayPoint?:Array,

	/**（可选项）终点信息。*/ 
	end?:JSON,

	/**（可选项）车辆信息。*/ 
	carInfo?:JSON,

	/**（可选项）导航样式。(0:蓝色系 1:浅色系 2:暗色系)*/ 
	theme?:number,

	/**（可选项）设置退出导航组件是否显示退出弹框。(true 显示 false 不显示)*/ 
	showExitNaviDialog?:boolean,

}

interface aeetest {
}
interface baiduTextReader {
}
interface bMap {
	/** 初始化百度地图引擎，**本接口仅支持 iOS 平台，android平台不需要初始化***/ 
	initMapSDK(callback?: (ret:JSON) => void):void

	/**
	 * `打开百度地图`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 *
	 * `center` :number : （可选项）打开地图时设置的中心点经纬度，若不传则默认打开北京市为中心的地图
	 *
	 * `zoomLevel` :number : （可选项）设置百度地图缩放等级，取值范围：3-18级
	 *
	 * `showUserLocation` :boolean : （可选项）是否在地图上显示用户位置
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 window 或 frame 滚动
	 */
	open(params:bMap_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `定制地图主题，需要在open接口调用前调用`
	 * ========params==========
	 *
	 * `configPath` :string : （可选项）主图文件路径，要求本地路径（widget://、fs://）(android不支持widget)，configPath优先级高于customConfig
	 *
	 * `customConfig` :string : （可选项）模块内置主题
	 */
	customStyle(params:bMap_customStyle_Params):void

	/**
	 * `打开/关闭定制主题，需要在open接口调用后才生效`
	 * ========params==========
	 *
	 * `enable` :boolean : （可选项）是否打开定制主题
	 */
	enableCustom(params:bMap_enableCustom_Params):void

	/** 关闭百度地图*/ 
	close():void

	/** 显示百度地图*/ 
	show():void

	/** 隐藏百度地图*/ 
	hide():void

	/**
	 * `重设地图的显示区域`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）模块的位置及尺寸
	 */
	setRect(params:bMap_setRect_Params):void

	/**
	 * `开始定位，若要支持后台定位需配置 [config.xml](/APICloud/技术专题/app-config-manual) 文件 location 字段，**无需调用 open 接口即可定位。在 android 平台上，离线定位功能需要手动打开GPS，并在无遮挡物的室外**`
	 * ========params==========
	 *
	 * `accuracy` :string : （可选项）定位精度
	 *
	 * `autoStop` :boolean : （可选项）获取到位置信息后是否自动停止定位
	 *
	 * `filter` :number : （可选项）位置更新所需的最小距离（单位米），autoStop 为 true 时，此参数有效
	 *
	 * `enableLocInForeground` :boolean : (可选项) 开发者应用如果有后台定位需求，在退到后台的时候，为了保证定位可以在后台一直运行，可以设置为true，适配android 8后台无法定位问题，其他版本下也会提高定位进程存活率(ios不支持)
	 *
	 * `notification` :JSON : (必选项) 通知栏的提示，此字段只有在enableLocInForeground设置为true时有效。(百度为了app能够在后台持续定位，就得需要开启一个前台服务，要开启一个前台服务就得开启通知栏提示)(ios不支持)
	 */
	getLocation(params:bMap_getLocation_Params, callback?: (ret:JSON) => void):void

	/** 停止定位*/ 
	stopLocation():void

	/** 获取定位是否开启，及当前 app 获取的定位权限*/ 
	getLocationServices():void

	/**
	 * `根据地址查找经纬度，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `city` :string : （可选项）地址所在城市
	 *
	 * `address` :string : 地址信息
	 */
	getCoordsFromName(params:bMap_getCoordsFromName_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据经纬度查找地址信息，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `lon` :number : 经度
	 *
	 * `lat` :number : 纬度
	 */
	getNameFromCoords(params:bMap_getNameFromCoords_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取地图两点之间的距离，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `start` :JSON : 起点经纬度
	 *
	 * `end` :JSON : 终点经纬度
	 */
	getDistance(params:bMap_getDistance_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否在地图上显示用户位置，**会自动移动地图可视区域中心点到用户当前坐标位置，自带地图移动动画效果**`
	 * ========params==========
	 *
	 * `isShow` :boolean : （可选项）是否显示用户位置
	 *
	 * `trackingMode` :string : （可选项）用户当前位置显示形式
	 *
	 * `imageName` :string : （可选项）自定义当前位置图标的图片名称 (android不支持)
	 *
	 * `imagePath` :string : (可选项)当前位置显示图标的图片，支持fs,widget (ios不支持)
	 */
	showUserLocation(params:bMap_showUserLocation_Params):void

	/**
	 * `根据经纬度设置百度地图中心点，**此接口可带动画效果**`
	 * ========params==========
	 *
	 * `coords` :JSON : 中心点的经纬度
	 *
	 * `animation` :boolean : （可选项）设置地图的中心点时，是否带动画效果
	 */
	setCenter(params:bMap_setCenter_Params):void

	/** 获取百度地图中心点坐标*/ 
	getCenter():void

	/**
	 * `设置百度地图缩放等级，**此接口自带动画效果**`
	 * ========params==========
	 *
	 * `level` :number : （可选项）地图比例尺级别，取值范围：3-18级
	 */
	setZoomLevel(params:bMap_setZoomLevel_Params):void

	/** 获取百度地图比例尺级别，取值范围：3-18级*/ 
	getZoomLevel():void

	/**
	 * `设置最大缩放比例，取值范围：3-18级`
	 * ========params==========
	 *
	 * `maxLevel` :number : （可选项）设置的最大缩放比例
	 *
	 * `minLevel` :number : （可选项）设置的最小缩放比例
	 */
	setMaxAndMinZoomLevel(params:bMap_setMaxAndMinZoomLevel_Params):void

	/** 获取地图是否显示底图 poi 标注(不包含室内图标注)，Android系统（不支持）*/ 
	getShowMapPoi():void

	/**
	 * `设定地图是否显示底图 poi 标注(不包含室内图标注)`
	 * ========params==========
	 *
	 * `showMapPoi` :boolean : （可选项）是否显示地图 poi
	 */
	setShowMapPoi(params:bMap_setShowMapPoi_Params):void

	/**
	 * `设置百度地图相关属性`
	 * ========params==========
	 *
	 * `type` :string : （可选项）设置地图类型
	 *
	 * `zoomEnable` :boolean : （可选项）捏合手势是否可以缩放地图
	 *
	 * `scrollEnable` :boolean : （可选项）拖动手势是否可以移动地图
	 *
	 * `rotateEnabled` :boolean : （可选项）拖动手势是否可以旋转地图
	 *
	 * `overlookEnabled` :boolean : （可选项）拖动手势是否可以改变地图俯视角度
	 */
	setMapAttr(params:bMap_setMapAttr_Params):void

	/**
	 * `设置百度地图旋转角度，**此接口自带动画效果**`
	 * ========params==========
	 *
	 * `degree` :number : （可选项）地图旋转角度，取值范围：-180° - 180°
	 */
	setRotation(params:bMap_setRotation_Params):void

	/**
	 * `设置百度地图俯视角度，**此接口自带动画效果**`
	 * ========params==========
	 *
	 * `degree` :number : （可选项）地图俯视角度，取值范围：-45° - 0°
	 */
	setOverlook(params:bMap_setOverlook_Params):void

	/**
	 * `设置百度地图比例尺`
	 * ========params==========
	 *
	 * `show` :boolean : （可选项）是否显示比例尺
	 *
	 * `position` :JSON : （可选项）比例尺的位置，设定坐标以地图左上角为原点
	 */
	setScaleBar(params:bMap_setScaleBar_Params):void

	/**
	 * `设置百度地图指南针位置，**只有地图旋转或视角变化时才显示指南针**`
	 * ========params==========
	 *
	 * `position` :JSON : （可选项）指南针的位置，设定坐标以地图左上角为原点
	 */
	setCompass(params:bMap_setCompass_Params):void

	/**
	 * `设置百度地图城市热力图`
	 * ========params==========
	 *
	 * `heatMap` :boolean : （可选项）是否显示城市热力图
	 */
	setHeatMap(params:bMap_setHeatMap_Params):void

	/**
	 * `设定地图是否现实 3D 楼块效果，**地图放大，才会有 3D 楼快效果，倾斜视角 3D 效果会更明显**`
	 * ========params==========
	 *
	 * `building` :boolean : （可选项）是否现实3D楼块效果
	 */
	setBuilding(params:bMap_setBuilding_Params):void

	/**
	 * `设置地图显示范围（矩形区域），**此接口可带动画效果**`
	 * ========params==========
	 *
	 * `lbLon` :number : 矩形区域左下角的经度
	 *
	 * `lbLat` :number : 矩形区域左下角的纬度
	 *
	 * `rtLon` :number : 矩形区域右上角的经度
	 *
	 * `rtLat` :number : 矩形区域右上角的纬度
	 *
	 * `animation` :boolean : （可选项）设置地图的区域时，是否带动画效果
	 */
	setRegion(params:bMap_setRegion_Params):void

	/** 获取地图显示范围（矩形区域）*/ 
	getRegion():void

	/**
	 * `将其它类型的地理坐标转换为百度坐标。**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `type` :string : 原始地理坐标类型
	 *
	 * `lon` :number : 原始地理坐标经度
	 *
	 * `lat` :number : 原始地理坐标纬度
	 *
	 * `mcode` :string : 到[百度地图开放平台](http://lbsyun.baidu.com/apiconsole/key)获取的安全码（Android端），点击应用的设置按钮 -> 设置界面 -> 安全码（数字签名+;+包名）
	 */
	transCoords(params:bMap_transCoords_Params, callback?: (ret:JSON) => void):void

	/** 缩小地图，放大视角，放大一级比例尺，**此接口自带动画效果***/ 
	zoomIn():void

	/** 放大地图，缩小视角，缩小一级比例尺，**此接口自带动画效果***/ 
	zoomOut():void

	/**
	 * `判断已知点是否在指定的多边形区域内`
	 * ========params==========
	 *
	 * `point` :JSON : 已知点的地理坐标
	 *
	 * `points` :Array : 多边形的各个点组成的数组
	 *
	 * `ret` :JSON : null
	 */
	isPolygonContantsPoint(params:bMap_isPolygonContantsPoint_Params):void

	/**
	 * `监听地图相关事件`
	 * ========params==========
	 *
	 * `name` :string : 地图相关事件名称
	 */
	addEventListener(params:bMap_addEventListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `停止监听地图相关事件`
	 * ========params==========
	 *
	 * `name` :string : 地图相关事件名称
	 */
	removeEventListener(params:bMap_removeEventListener_Params):void

	/** 开始搜索GPS信息（卫星个数，以及每个卫星的信噪比数组），本接口仅支持 android 平台*/ 
	startSearchGPS():void

	/** 停止搜索GPS信息，本接口仅支持 android 平台*/ 
	stopSearchGPS():void

	/** 获取当前定位，**需调用 open 接口，且showUserLocation为true时，才可定位。***/ 
	getCurrentLocation():void

	/**
	 * `截图 **需调用 open 接口**`
	 * ========params==========
	 *
	 * `path` :string : 图片保存的路径 支持fs://
	 *
	 * `rect` :JSON : 截图区域；如果不写此参数，截全屏；注：开发者要确保rect的x <= w and y <= h，否则截屏失败
	 *
	 * `pointArray` :Array : 地标点数组
	 */
	snapshotMap(params:bMap_snapshotMap_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开关闭室内地图`
	 * ========params==========
	 *
	 * `draggable` :boolean : （可选项）是否打开室内地图
	 */
	setIndoorMap(params:bMap_setIndoorMap_Params):void

	/** 添加进出室内地图的监听*/ 
	addIndoorListener():void

	/**
	 * `切换楼层`
	 * ========params==========
	 *
	 * `strID` :string : 室内ID
	 *
	 * `strFloor` :string : 楼层
	 */
	switchIndoorMapFloor(params:bMap_switchIndoorMapFloor_Params, callback?: (ret:JSON) => void):void

	/**
	 * `搜索室内地图内容`
	 * ========params==========
	 *
	 * `strID` :string : 室内ID
	 *
	 * `keyword` :string : 关键字
	 *
	 * `pageIndex` :number : 分页索引，可选，默认为0
	 *
	 * `pageCapacity` :number : 分页数量，可选，默认为10，最多为50
	 */
	indoorSearch(params:bMap_indoorSearch_Params, callback?: (ret:JSON) => void):void

	/**
	 * `在地图上添加标注信息`
	 * ========params==========
	 *
	 * `annotations` :Array : 图标标注信息组成的数组
	 *
	 * `icon` :string : （可选项）公用的标注图标，要求本地路径（fs://、widget://）
	 *
	 * `draggable` :boolean : （可选项）所添加的标注是否可被拖动
	 */
	addAnnotations(params:bMap_addAnnotations_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取指定标注的经纬度`
	 * ========params==========
	 *
	 * `id` :number : 指定的标注 id
	 */
	getAnnotationCoords(params:bMap_getAnnotationCoords_Params, callback?: (ret:JSON) => void):void

	/** 设置某个已添加标注的经纬度*/ 
	setAnnotationCoords():void

	/**
	 * `判断标注是否存在`
	 * ========params==========
	 *
	 * `id` :number : 指定的标注 id
	 */
	annotationExist(params:bMap_annotationExist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置点击标注时弹出的气泡信息`
	 * ========params==========
	 *
	 * `id` :number : 要设置气泡的标注 id
	 *
	 * `bgImg` :string : （可选项）弹出气泡的背景图片（160*90规格），要求本地路径（fs://、widget://）
	 *
	 * `rect` :JSON : null
	 *
	 * `content` :JSON : 弹出气泡的内容
	 *
	 * `styles` :JSON : 弹出气泡的样式
	 */
	setBubble(params:bMap_setBubble_Params, callback?: (ret:JSON) => void):void

	/**
	 * `弹出指定标注的气泡`
	 * ========params==========
	 *
	 * `id` :number : 气泡的 id
	 */
	popupBubble(params:bMap_popupBubble_Params):void

	/**
	 * `关闭已弹出的气泡`
	 * ========params==========
	 *
	 * `id` :number : 气泡的 id
	 */
	closeBubble(params:bMap_closeBubble_Params):void

	/**
	 * `在地图上添加布告牌`
	 * ========params==========
	 *
	 * `id` :number : 布告牌的 id，**注意：本 id 不可与 addAnnotations 接口内的 id 相同**
	 *
	 * `coords` :JSON : 布告牌所在位置的坐标
	 *
	 * `bgImg` :string : 布告牌的背景图片（160*75规格），要求本地路径（fs://、widget://）
	 *
	 * `content` :JSON : 布告牌的内容
	 *
	 * `styles` :JSON : 布告牌的样式
	 *
	 * `ret` :JSON : null
	 */
	addBillboard(params:bMap_addBillboard_Params):void

	/**
	 * `在地图上添加可移动、旋转的标注图标，**注意：本 id 不可与 addAnnotations、addBillboard 接口内的 id 相同**`
	 * ========params==========
	 *
	 * `annotations` :Array : 图标标注信息组成的数组
	 */
	addMobileAnnotations(params:bMap_addMobileAnnotations_Params):void

	/**
	 * `移动地图上已添加的可移动、旋转的标注图标，**在移动动画开始前，会先做 0.3 秒的旋转动画，使所移动的图标中间轴线顶端对准终点坐标点。由于百度官方 SDK 的 bug 限制，在 Android 平台上，如果标注添加到地图当前可视区域以外的区域，则不可以移动该标注**`
	 * ========params==========
	 *
	 * `id` :number : 要移动的标注的 id
	 *
	 * `duration` :number : （可选项）标注图标移动动画的时间，单位为秒（s），**不包括旋转动画时间**
	 *
	 * `end` :JSON : 终点经纬度
	 */
	moveAnnotation(params:bMap_moveAnnotation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除指定 id 的标注（可移动、不可移动）或布告牌`
	 * ========params==========
	 *
	 * `ids` :Array : （可选项）要移除的标注或布告牌id（数字），若不传或传空则移除所有addAnnotations、addBillboard、addMobileAnnotations接口添加的标注
	 */
	removeAnnotations(params:bMap_removeAnnotations_Params):void

	/**
	 * `往地图上添加聚合点`
	 * ========params==========
	 *
	 * `styles` :JSON : （可选项）聚合点的样式配置
	 *
	 * `data` :Array : 为字符串类型时表示点信息文件路径，要求本地路径（widget://、fs://）；若传数组类型则表示直接将点数据传给模块
	 */
	addCluster(params:bMap_addCluster_Params):void

	/** 移除本次添加的聚合点*/ 
	removeCluster():void

	/** 添加聚合点点击事件的监听*/ 
	addClusterListener():void

	/**
	 * `设置点击标注时弹出的气泡信息`
	 * ========params==========
	 *
	 * `id` :number : 要设置气泡的标注 id
	 *
	 * `url` :string : （可选项）弹出气泡的网页地址，用户点击标注时，模块在标注上弹出窗口（类似open一个frame，模块会用webview去加载此url的网页显示出来）,当data参数不为空时，url将做为baseUrl，data中的html引用的资源文件根路径以该url为基础。
	 *
	 * `data` :string : （可选项）页面加载的数据内容，可以为html片段或者整张html文件的数据,当data为空或者不传的时候， 会将url地址作为整个加载进去
	 *
	 * `size` :JSON : （可选项）气泡的大小配置
	 *
	 * `bg` :string : （可选项）弹出气泡的背景设置，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）(android不支持rgb、rgba、#)
	 */
	setWebBubble(params:bMap_setWebBubble_Params):void

	/** 添加网页气泡点击监听*/ 
	addWebBubbleListener():void

	/** 移除网页气泡点击监听*/ 
	removeWebBubbleListener():void

	/**
	 * `在地图上添加折线`
	 * ========params==========
	 *
	 * `id` :number : 折线的 id
	 *
	 * `styles` :JSON : （可选项）折线的样式
	 *
	 * `points` :Array : 折线的多个点组成的数组
	 */
	addLine(params:bMap_addLine_Params):void

	/**
	 * `在地图上添加多边形`
	 * ========params==========
	 *
	 * `id` :number : 多边形的 id，**不可与 addLine 接口内的 id 相同**
	 *
	 * `styles` :JSON : （可选项）多边形的样式
	 *
	 * `points` :Array : 多边形的各个点组成的数组
	 */
	addPolygon(params:bMap_addPolygon_Params):void

	/**
	 * `在地图上添加弧形`
	 * ========params==========
	 *
	 * `id` :number : 多边形的 id，**不可与 addLine、addPolygon 接口内的 id 相同**
	 *
	 * `styles` :JSON : （可选项）弧形的样式
	 *
	 * `points` :Array : 弧形的各个点（弧形两端点和弧形中间点）组成的数组
	 */
	addArc(params:bMap_addArc_Params):void

	/**
	 * `在地图上添加圆形`
	 * ========params==========
	 *
	 * `id` :number : 圆形的 id,**不可与 addLine、addPolygon、addArc 接口的 id 相同**
	 *
	 * `center` :JSON : 圆形中心点的经纬度
	 *
	 * `radius` :number : 圆形的半径
	 *
	 * `styles` :JSON : （可选项）圆形的样式
	 */
	addCircle(params:bMap_addCircle_Params):void

	/** 在地图上添加图片*/ 
	addImg():void

	/**
	 * `移除指定 id 的覆盖物（addLine、addPolygon、addArc、addCircle、addImg添加的覆盖物）`
	 * ========params==========
	 *
	 * `ids` :Array : 要移除的 id（数字）组成的数组
	 */
	removeOverlay(params:bMap_removeOverlay_Params):void

	/**
	 * `搜索路线方案，**无需调用 open 接口即可使用**`
	 * ========params==========
	 *
	 * `id` :number : 搜索的路线 id ，drawRoute 时使用
	 *
	 * `type` :string : （可选项）路线类型
	 *
	 * `policy` :string : （可选项）路线策略，**type 为 walk（步行）或 riding（骑行）时，此参数可不传**
	 *
	 * `start` :JSON : 起点信息
	 *
	 * `waypoints` :Array : （可选项）途经点信息组成的数组，仅当 type 为 drive 时有效，在 iOS端最多支持10个。
	 *
	 * `end` :JSON : 终点信息
	 *
	 * `isSameCity` :boolean : 起点和终点是否是同一城市，仅支持Android端
	 */
	searchRoute(params:bMap_searchRoute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `在地图上显示指定路线，**调用本接口前，必须保证已经调用过接口 open 和 searchRoute**`
	 * ========params==========
	 *
	 * `id` :number : 路线 id （searchRoute 时传的 id），removeRoute 时使用此 id 移除路线
	 *
	 * `autoresizing` :boolean : 路线渲染结束是否自动调整地图可视区域
	 *
	 * `index` :number : 路线方案的索引，在 searchRoute 时返回的多个路线方案组成的数组中的索引
	 *
	 * `styles` :JSON : 路线样式设置
	 */
	drawRoute(params:bMap_drawRoute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除指定 id 的路线`
	 * ========params==========
	 *
	 * `ids` :Array : 所要移除的 id（数字）组成的数组
	 */
	removeRoute(params:bMap_removeRoute_Params):void

	/**
	 * `根据关键字搜索公交、地铁线路，**无需调用 open 接口即可搜索**`
	 * ========params==========
	 *
	 * `city` :string : 城市
	 *
	 * `line` :string : 公交、地铁线路号（例如：1路，1号线）
	 */
	searchBusRoute(params:bMap_searchBusRoute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据 searchBusRoute 搜索返回的 uid 查询线路详情并绘制在地图上`
	 * ========params==========
	 *
	 * `id` :number : 地图上显示的公交、地铁路线的 id，**removeBusRoute 时使用此 id**
	 *
	 * `autoresizing` :boolean : 路线渲染结束是否自动调整地图可视区域
	 *
	 * `city` :string : 城市
	 *
	 * `uid` :string : searchBusRoute 接口获取到的目标兴趣点的 uid
	 */
	drawBusRoute(params:bMap_drawBusRoute_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除地图上显示的公交、地铁线路`
	 * ========params==========
	 *
	 * `ids` :Array : 所要移除的公交、地铁线路的 id（数字）组成的数组
	 */
	removeBusRoute(params:bMap_removeBusRoute_Params):void

	/**
	 * `根据单个关键字搜索兴趣点，**无需调用 open 接口即可搜索**`
	 * ========params==========
	 *
	 * `city` :string : 要搜索的城市
	 *
	 * `keyword` :string : 搜索的关键字
	 *
	 * `pageIndex` :number : （可选项）分页索引
	 *
	 * `pageCapacity` :number : （可选项）每页包含数据条数，最多为50
	 */
	searchInCity(params:bMap_searchInCity_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据单个关键字在圆形区域内搜索兴趣点，**无需调用 open 接口即可搜索**`
	 * ========params==========
	 *
	 * `keyword` :string : 搜索关键字
	 *
	 * `lon` :number : 指定区域中心点的经度
	 *
	 * `lat` :number : 指定区域中心点的纬度
	 *
	 * `radius` :number : 指定区域的半径，单位为 m（米）
	 *
	 * `pageIndex` :number : （可选项）分页索引
	 *
	 * `pageCapacity` :number : （可选项）每页包含数据条数，最多为20
	 */
	searchNearby(params:bMap_searchNearby_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据单个关键字在方形区域内搜索兴趣点，**无需调用 open 接口即可搜索**`
	 * ========params==========
	 *
	 * `keyword` :string : 搜索关键字
	 *
	 * `lbLon` :number : 矩形左下角的经度
	 *
	 * `lbLat` :number : 矩形左下角的纬度
	 *
	 * `rtLon` :number : 矩形右上角的经度
	 *
	 * `rtLat` :number : 矩形右上角的纬度
	 *
	 * `pageIndex` :number : （可选项）分页索引
	 *
	 * `pageCapacity` :number : （可选项）每页包含数据条数，最多为50
	 */
	searchInBounds(params:bMap_searchInBounds_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据关键字返回建议搜索关键字，**无需调用 open 接口即可搜索**`
	 * ========params==========
	 *
	 * `keyword` :string : 关键字
	 *
	 * `city` :string : （可选项）要搜索的城市
	 */
	autocomplete(params:bMap_autocomplete_Params, callback?: (ret:JSON) => void):void

	/**
	 * `行政区边界检索绘制，**需要先调用 open 接口**`
	 * ========params==========
	 *
	 * `id` :string : 搜索的行政区id,removeDistrict时使用
	 *
	 * `city` :string : 城市名字
	 *
	 * `district` :string : （可选项）区县名字
	 *
	 * `style` :JSON : 边界样式设置
	 */
	searchDistrict(params:bMap_searchDistrict_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除行政区边界`
	 * ========params==========
	 *
	 * `id` :string : searchDistrict传入的id
	 */
	removeDistrict(params:bMap_removeDistrict_Params):void

	/** 获取热门城市列表，**无需调用 open 接口***/ 
	getHotCityList():void

	/** 获取支持离线下载城市列表，**无需调用 open 接口***/ 
	getOfflineCityList():void

	/**
	 * `根据城市名搜索该城市离线地图记录，**无需调用 open 接口**`
	 * ========params==========
	 *
	 * `name` :string : 指定搜索的城市名
	 */
	searchCityByName(params:bMap_searchCityByName_Params, callback?: (ret:JSON) => void):void

	/** 获取各城市离线地图更新信息，**无需调用 open 接口***/ 
	getAllUpdateInfo():void

	/**
	 * `获取指定城市id离线地图更新信息，**无需调用 open 接口**`
	 * ========params==========
	 *
	 * `cityID` :number : 指定的城市id
	 */
	getUpdateInfoByID(params:bMap_getUpdateInfoByID_Params, callback?: (ret:JSON) => void):void

	/**
	 * `启动下载指定城市 id 的离线地图，**无需调用 open 接口**`
	 * ========params==========
	 *
	 * `cityID` :number : 指定的城市id
	 */
	start(params:bMap_start_Params, callback?: (ret:JSON) => void):void

	/**
	 * `启动更新指定城市 id 的离线地图，**无需调用 open 接口**`
	 * ========params==========
	 *
	 * `cityID` :number : 指定的城市id
	 */
	update(params:bMap_update_Params, callback?: (ret:JSON) => void):void

	/**
	 * `暂停下载指定城市 id 的离线地图，**无需调用 open 接口**`
	 * ========params==========
	 *
	 * `cityID` :number : 指定的城市id
	 */
	pause(params:bMap_pause_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除下载指定城市 id 的离线地图，**无需调用 open 接口**`
	 * ========params==========
	 *
	 * `cityID` :number : 指定的城市id
	 */
	remove(params:bMap_remove_Params, callback?: (ret:JSON) => void):void

	/** 监听离线地图相关事件*/ 
	addOfflineListener():void

	/** 移除监听离线地图事件*/ 
	removeOfflineListener():void

	/**
	 * `步行导航`
	 * ========params==========
	 *
	 * `currentPosition` :JSON : 起始位置
	 *
	 * `destination` :JSON : 终点位置
	 */
	walkNavi(params:bMap_walkNavi_Params, callback?: (ret:JSON) => void):void

	/**
	 * `骑行导航`
	 * ========params==========
	 *
	 * `currentPosition` :JSON : 起始位置
	 *
	 * `destination` :JSON : 终点位置
	 */
	cyclingNavi(params:bMap_cyclingNavi_Params, callback?: (ret:JSON) => void):void

	/** 监听语音播报文本*/ 
	addTTSListening(callback?: (ret:JSON) => void):void

}
interface bMap_open_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

	/**（可选项）打开地图时设置的中心点经纬度，若不传则默认打开北京市为中心的地图*/ 
	center?:number,

	/**（可选项）设置百度地图缩放等级，取值范围：3-18级*/ 
	zoomLevel?:number,

	/**（可选项）是否在地图上显示用户位置*/ 
	showUserLocation?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 window 或 frame 滚动*/ 
	fixed?:boolean,

}

interface bMap_customStyle_Params {
	/**（可选项）主图文件路径，要求本地路径（widget://、fs://）(android不支持widget)，configPath优先级高于customConfig*/ 
	configPath?:string,

	/**（可选项）模块内置主题*/ 
	customConfig?:string,

}

interface bMap_enableCustom_Params {
	/**（可选项）是否打开定制主题*/ 
	enable?:boolean,

}

interface bMap_setRect_Params {
	/**（可选项）模块的位置及尺寸*/ 
	rect?:JSON,

}

interface bMap_getLocation_Params {
	/**（可选项）定位精度*/ 
	accuracy?:string,

	/**（可选项）获取到位置信息后是否自动停止定位*/ 
	autoStop?:boolean,

	/**（可选项）位置更新所需的最小距离（单位米），autoStop 为 true 时，此参数有效*/ 
	filter?:number,

	/**(可选项) 开发者应用如果有后台定位需求，在退到后台的时候，为了保证定位可以在后台一直运行，可以设置为true，适配android 8后台无法定位问题，其他版本下也会提高定位进程存活率(ios不支持)*/ 
	enableLocInForeground?:boolean,

	/**(必选项) 通知栏的提示，此字段只有在enableLocInForeground设置为true时有效。(百度为了app能够在后台持续定位，就得需要开启一个前台服务，要开启一个前台服务就得开启通知栏提示)(ios不支持)*/ 
	notification:JSON,

}

interface bMap_getCoordsFromName_Params {
	/**（可选项）地址所在城市*/ 
	city?:string,

	/**地址信息*/ 
	address:string,

}

interface bMap_getNameFromCoords_Params {
	/**经度*/ 
	lon:number,

	/**纬度*/ 
	lat:number,

}

interface bMap_getDistance_Params {
	/**起点经纬度*/ 
	start:JSON,

	/**终点经纬度*/ 
	end:JSON,

}

interface bMap_showUserLocation_Params {
	/**（可选项）是否显示用户位置*/ 
	isShow?:boolean,

	/**（可选项）用户当前位置显示形式*/ 
	trackingMode?:string,

	/**（可选项）自定义当前位置图标的图片名称 (android不支持)*/ 
	imageName?:string,

	/**(可选项)当前位置显示图标的图片，支持fs,widget (ios不支持)*/ 
	imagePath?:string,

}

interface bMap_setCenter_Params {
	/**中心点的经纬度*/ 
	coords:JSON,

	/**（可选项）设置地图的中心点时，是否带动画效果*/ 
	animation?:boolean,

}

interface bMap_setZoomLevel_Params {
	/**（可选项）地图比例尺级别，取值范围：3-18级*/ 
	level?:number,

}

interface bMap_setMaxAndMinZoomLevel_Params {
	/**（可选项）设置的最大缩放比例*/ 
	maxLevel?:number,

	/**（可选项）设置的最小缩放比例*/ 
	minLevel?:number,

}

interface bMap_setShowMapPoi_Params {
	/**（可选项）是否显示地图 poi*/ 
	showMapPoi?:boolean,

}

interface bMap_setMapAttr_Params {
	/**（可选项）设置地图类型*/ 
	type?:string,

	/**（可选项）捏合手势是否可以缩放地图*/ 
	zoomEnable?:boolean,

	/**（可选项）拖动手势是否可以移动地图*/ 
	scrollEnable?:boolean,

	/**（可选项）拖动手势是否可以旋转地图*/ 
	rotateEnabled?:boolean,

	/**（可选项）拖动手势是否可以改变地图俯视角度*/ 
	overlookEnabled?:boolean,

}

interface bMap_setRotation_Params {
	/**（可选项）地图旋转角度，取值范围：-180° - 180°*/ 
	degree?:number,

}

interface bMap_setOverlook_Params {
	/**（可选项）地图俯视角度，取值范围：-45° - 0°*/ 
	degree?:number,

}

interface bMap_setScaleBar_Params {
	/**（可选项）是否显示比例尺*/ 
	show?:boolean,

	/**（可选项）比例尺的位置，设定坐标以地图左上角为原点*/ 
	position?:JSON,

}

interface bMap_setCompass_Params {
	/**（可选项）指南针的位置，设定坐标以地图左上角为原点*/ 
	position?:JSON,

}

interface bMap_setHeatMap_Params {
	/**（可选项）是否显示城市热力图*/ 
	heatMap?:boolean,

}

interface bMap_setBuilding_Params {
	/**（可选项）是否现实3D楼块效果*/ 
	building?:boolean,

}

interface bMap_setRegion_Params {
	/**矩形区域左下角的经度*/ 
	lbLon:number,

	/**矩形区域左下角的纬度*/ 
	lbLat:number,

	/**矩形区域右上角的经度*/ 
	rtLon:number,

	/**矩形区域右上角的纬度*/ 
	rtLat:number,

	/**（可选项）设置地图的区域时，是否带动画效果*/ 
	animation?:boolean,

}

interface bMap_transCoords_Params {
	/**原始地理坐标类型*/ 
	type:string,

	/**原始地理坐标经度*/ 
	lon:number,

	/**原始地理坐标纬度*/ 
	lat:number,

	/**到[百度地图开放平台](http://lbsyun.baidu.com/apiconsole/key)获取的安全码（Android端），点击应用的设置按钮 -> 设置界面 -> 安全码（数字签名+;+包名）*/ 
	mcode:string,

}

interface bMap_isPolygonContantsPoint_Params {
	/**已知点的地理坐标*/ 
	point:JSON,

	/**多边形的各个点组成的数组*/ 
	points:Array,

	/**null*/ 
	ret:JSON,

}

interface bMap_addEventListener_Params {
	/**地图相关事件名称*/ 
	name:string,

}

interface bMap_removeEventListener_Params {
	/**地图相关事件名称*/ 
	name:string,

}

interface bMap_snapshotMap_Params {
	/**图片保存的路径 支持fs://*/ 
	path:string,

	/**截图区域；如果不写此参数，截全屏；注：开发者要确保rect的x <= w and y <= h，否则截屏失败*/ 
	rect:JSON,

	/**地标点数组*/ 
	pointArray:Array,

}

interface bMap_setIndoorMap_Params {
	/**（可选项）是否打开室内地图*/ 
	draggable?:boolean,

}

interface bMap_switchIndoorMapFloor_Params {
	/**室内ID*/ 
	strID:string,

	/**楼层*/ 
	strFloor:string,

}

interface bMap_indoorSearch_Params {
	/**室内ID*/ 
	strID:string,

	/**关键字*/ 
	keyword:string,

	/**分页索引，可选，默认为0*/ 
	pageIndex?:number,

	/**分页数量，可选，默认为10，最多为50*/ 
	pageCapacity?:number,

}

interface bMap_addAnnotations_Params {
	/**图标标注信息组成的数组*/ 
	annotations:Array,

	/**（可选项）公用的标注图标，要求本地路径（fs://、widget://）*/ 
	icon?:string,

	/**（可选项）所添加的标注是否可被拖动*/ 
	draggable?:boolean,

}

interface bMap_getAnnotationCoords_Params {
	/**指定的标注 id*/ 
	id:number,

}

interface bMap_annotationExist_Params {
	/**指定的标注 id*/ 
	id:number,

}

interface bMap_setBubble_Params {
	/**要设置气泡的标注 id*/ 
	id:number,

	/**（可选项）弹出气泡的背景图片（160*90规格），要求本地路径（fs://、widget://）*/ 
	bgImg?:string,

	/**null*/ 
	rect:JSON,

	/**弹出气泡的内容*/ 
	content:JSON,

	/**弹出气泡的样式*/ 
	styles:JSON,

}

interface bMap_popupBubble_Params {
	/**气泡的 id*/ 
	id:number,

}

interface bMap_closeBubble_Params {
	/**气泡的 id*/ 
	id:number,

}

interface bMap_addBillboard_Params {
	/**布告牌的 id，**注意：本 id 不可与 addAnnotations 接口内的 id 相同***/ 
	id:number,

	/**布告牌所在位置的坐标*/ 
	coords:JSON,

	/**布告牌的背景图片（160*75规格），要求本地路径（fs://、widget://）*/ 
	bgImg:string,

	/**布告牌的内容*/ 
	content:JSON,

	/**布告牌的样式*/ 
	styles:JSON,

	/**null*/ 
	ret:JSON,

}

interface bMap_addMobileAnnotations_Params {
	/**图标标注信息组成的数组*/ 
	annotations:Array,

}

interface bMap_moveAnnotation_Params {
	/**要移动的标注的 id*/ 
	id:number,

	/**（可选项）标注图标移动动画的时间，单位为秒（s），**不包括旋转动画时间***/ 
	duration?:number,

	/**终点经纬度*/ 
	end:JSON,

}

interface bMap_removeAnnotations_Params {
	/**（可选项）要移除的标注或布告牌id（数字），若不传或传空则移除所有addAnnotations、addBillboard、addMobileAnnotations接口添加的标注*/ 
	ids?:Array,

}

interface bMap_addCluster_Params {
	/**（可选项）聚合点的样式配置*/ 
	styles?:JSON,

	/**为字符串类型时表示点信息文件路径，要求本地路径（widget://、fs://）；若传数组类型则表示直接将点数据传给模块*/ 
	data:Array,

}

interface bMap_setWebBubble_Params {
	/**要设置气泡的标注 id*/ 
	id:number,

	/**（可选项）弹出气泡的网页地址，用户点击标注时，模块在标注上弹出窗口（类似open一个frame，模块会用webview去加载此url的网页显示出来）,当data参数不为空时，url将做为baseUrl，data中的html引用的资源文件根路径以该url为基础。*/ 
	url?:string,

	/**（可选项）页面加载的数据内容，可以为html片段或者整张html文件的数据,当data为空或者不传的时候， 会将url地址作为整个加载进去*/ 
	data?:string,

	/**（可选项）气泡的大小配置*/ 
	size?:JSON,

	/**（可选项）弹出气泡的背景设置，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）(android不支持rgb、rgba、#)*/ 
	bg?:string,

}

interface bMap_addLine_Params {
	/**折线的 id*/ 
	id:number,

	/**（可选项）折线的样式*/ 
	styles?:JSON,

	/**折线的多个点组成的数组*/ 
	points:Array,

}

interface bMap_addPolygon_Params {
	/**多边形的 id，**不可与 addLine 接口内的 id 相同***/ 
	id:number,

	/**（可选项）多边形的样式*/ 
	styles?:JSON,

	/**多边形的各个点组成的数组*/ 
	points:Array,

}

interface bMap_addArc_Params {
	/**多边形的 id，**不可与 addLine、addPolygon 接口内的 id 相同***/ 
	id:number,

	/**（可选项）弧形的样式*/ 
	styles?:JSON,

	/**弧形的各个点（弧形两端点和弧形中间点）组成的数组*/ 
	points:Array,

}

interface bMap_addCircle_Params {
	/**圆形的 id,**不可与 addLine、addPolygon、addArc 接口的 id 相同***/ 
	id:number,

	/**圆形中心点的经纬度*/ 
	center:JSON,

	/**圆形的半径*/ 
	radius:number,

	/**（可选项）圆形的样式*/ 
	styles?:JSON,

}

interface bMap_removeOverlay_Params {
	/**要移除的 id（数字）组成的数组*/ 
	ids:Array,

}

interface bMap_searchRoute_Params {
	/**搜索的路线 id ，drawRoute 时使用*/ 
	id:number,

	/**（可选项）路线类型*/ 
	type?:string,

	/**（可选项）路线策略，**type 为 walk（步行）或 riding（骑行）时，此参数可不传***/ 
	policy?:string,

	/**起点信息*/ 
	start:JSON,

	/**（可选项）途经点信息组成的数组，仅当 type 为 drive 时有效，在 iOS端最多支持10个。*/ 
	waypoints?:Array,

	/**终点信息*/ 
	end:JSON,

	/**起点和终点是否是同一城市，仅支持Android端*/ 
	isSameCity:boolean,

}

interface bMap_drawRoute_Params {
	/**路线 id （searchRoute 时传的 id），removeRoute 时使用此 id 移除路线*/ 
	id:number,

	/**路线渲染结束是否自动调整地图可视区域*/ 
	autoresizing:boolean,

	/**路线方案的索引，在 searchRoute 时返回的多个路线方案组成的数组中的索引*/ 
	index:number,

	/**路线样式设置*/ 
	styles:JSON,

}

interface bMap_removeRoute_Params {
	/**所要移除的 id（数字）组成的数组*/ 
	ids:Array,

}

interface bMap_searchBusRoute_Params {
	/**城市*/ 
	city:string,

	/**公交、地铁线路号（例如：1路，1号线）*/ 
	line:string,

}

interface bMap_drawBusRoute_Params {
	/**地图上显示的公交、地铁路线的 id，**removeBusRoute 时使用此 id***/ 
	id:number,

	/**路线渲染结束是否自动调整地图可视区域*/ 
	autoresizing:boolean,

	/**城市*/ 
	city:string,

	/**searchBusRoute 接口获取到的目标兴趣点的 uid*/ 
	uid:string,

}

interface bMap_removeBusRoute_Params {
	/**所要移除的公交、地铁线路的 id（数字）组成的数组*/ 
	ids:Array,

}

interface bMap_searchInCity_Params {
	/**要搜索的城市*/ 
	city:string,

	/**搜索的关键字*/ 
	keyword:string,

	/**（可选项）分页索引*/ 
	pageIndex?:number,

	/**（可选项）每页包含数据条数，最多为50*/ 
	pageCapacity?:number,

}

interface bMap_searchNearby_Params {
	/**搜索关键字*/ 
	keyword:string,

	/**指定区域中心点的经度*/ 
	lon:number,

	/**指定区域中心点的纬度*/ 
	lat:number,

	/**指定区域的半径，单位为 m（米）*/ 
	radius:number,

	/**（可选项）分页索引*/ 
	pageIndex?:number,

	/**（可选项）每页包含数据条数，最多为20*/ 
	pageCapacity?:number,

}

interface bMap_searchInBounds_Params {
	/**搜索关键字*/ 
	keyword:string,

	/**矩形左下角的经度*/ 
	lbLon:number,

	/**矩形左下角的纬度*/ 
	lbLat:number,

	/**矩形右上角的经度*/ 
	rtLon:number,

	/**矩形右上角的纬度*/ 
	rtLat:number,

	/**（可选项）分页索引*/ 
	pageIndex?:number,

	/**（可选项）每页包含数据条数，最多为50*/ 
	pageCapacity?:number,

}

interface bMap_autocomplete_Params {
	/**关键字*/ 
	keyword:string,

	/**（可选项）要搜索的城市*/ 
	city?:string,

}

interface bMap_searchDistrict_Params {
	/**搜索的行政区id,removeDistrict时使用*/ 
	id:string,

	/**城市名字*/ 
	city:string,

	/**（可选项）区县名字*/ 
	district?:string,

	/**边界样式设置*/ 
	style:JSON,

}

interface bMap_removeDistrict_Params {
	/**searchDistrict传入的id*/ 
	id:string,

}

interface bMap_searchCityByName_Params {
	/**指定搜索的城市名*/ 
	name:string,

}

interface bMap_getUpdateInfoByID_Params {
	/**指定的城市id*/ 
	cityID:number,

}

interface bMap_start_Params {
	/**指定的城市id*/ 
	cityID:number,

}

interface bMap_update_Params {
	/**指定的城市id*/ 
	cityID:number,

}

interface bMap_pause_Params {
	/**指定的城市id*/ 
	cityID:number,

}

interface bMap_remove_Params {
	/**指定的城市id*/ 
	cityID:number,

}

interface bMap_walkNavi_Params {
	/**起始位置*/ 
	currentPosition:JSON,

	/**终点位置*/ 
	destination:JSON,

}

interface bMap_cyclingNavi_Params {
	/**起始位置*/ 
	currentPosition:JSON,

	/**终点位置*/ 
	destination:JSON,

}

interface NTalker {
	/** 登陆*/ 
	login():void

	/** 退出登陆*/ 
	logout():void

	/** 打开聊天页面*/ 
	startChat():void

	/** 未读消息的监听*/ 
	addUnreadMsgListener():void

}
interface ttAd {
	/** 初始化网盟 sdk。*/ 
	init():void

	/** 开屏广告建议为用户在进入 App 时展示的全屏广告。*/ 
	splash():void

	/** Banner 广告*/ 
	banner():void

	/** 个性化模板 Banner 广告*/ 
	bannerExp():void

	/** 插屏广告*/ 
	interaction():void

	/** 个性化模板插屏*/ 
	interactionExp():void

	/** 激励视频广告，该广告的效果为观看完毕视频广告，发放奖励给用户。*/ 
	rewardVideo():void

	/** 全屏视频是全屏展示视频广告的广告形式，用户可选择在不同场景插入对应广告*/ 
	fullScreenVideo():void

	/** 移除所有广告视图，释放内存。*/ 
	close():void

}
interface miniQuPaiPlus {
	/** 摄像头、麦克风权限验证*/ 
	permissionCheck(callback?: (ret:JSON) => void):void

	/**
	 * `录制视频`
	 * ========params==========
	 *
	 * `minDuration` :number : （必填项）允许拍摄的最小时长；
	 *
	 * `maxDuration` :number : （必填项）允许拍摄的最大时长，时长越大，产生的视频文件越大；
	 *
	 * `isBackCamera` :boolean : （可选项）是否默认后置摄像头: true 后置摄像头 false 前置摄像头
	 *
	 * `flashText` :any : （可选项）闪光灯按钮文字描述.
	 *
	 * `cameraText` :any : （可选项）相机切换按钮文字描述.
	 *
	 * `recordText` :any : （可选项）录制按钮文字描述.
	 *
	 * `recordHint` :any : （可选项）有录制视频时退出提示标题.
	 *
	 * `exitDialogMessage` :any : （可选项）有录制视频时退出提示内容.
	 *
	 * `dialogYes` :any : （可选项）有录制视频时退出提示选择按钮.
	 *
	 * `dialogNo` :any : （可选项）有录制视频时退出提示取消按钮.
	 *
	 * `progressMessage` :any : （可选项）录制完成后视频处理进度提示文字.
	 *
	 * `isFullScreen` :boolean : （可选项）相机预览是否全屏,解决安卓预览变形的问题(仅安卓有效)
	 */
	record(params:miniQuPaiPlus_record_Params, callback?: (ret:JSON) => void):void

	/** 获取视频存放文件夹大小*/ 
	getCacheSize(callback?: (ret:JSON) => void):void

	/** 清除存放视频文件夹所有视频*/ 
	clearCache(callback?: (ret:JSON) => void):void

}
interface miniQuPaiPlus_record_Params {
	/**（必填项）允许拍摄的最小时长；*/ 
	minDuration:number,

	/**（必填项）允许拍摄的最大时长，时长越大，产生的视频文件越大；*/ 
	maxDuration:number,

	/**（可选项）是否默认后置摄像头: true 后置摄像头 false 前置摄像头*/ 
	isBackCamera?:boolean,

	/**（可选项）闪光灯按钮文字描述.*/ 
	flashText?:any,

	/**（可选项）相机切换按钮文字描述.*/ 
	cameraText?:any,

	/**（可选项）录制按钮文字描述.*/ 
	recordText?:any,

	/**（可选项）有录制视频时退出提示标题.*/ 
	recordHint?:any,

	/**（可选项）有录制视频时退出提示内容.*/ 
	exitDialogMessage?:any,

	/**（可选项）有录制视频时退出提示选择按钮.*/ 
	dialogYes?:any,

	/**（可选项）有录制视频时退出提示取消按钮.*/ 
	dialogNo?:any,

	/**（可选项）录制完成后视频处理进度提示文字.*/ 
	progressMessage?:any,

	/**（可选项）相机预览是否全屏,解决安卓预览变形的问题(仅安卓有效)*/ 
	isFullScreen?:boolean,

}

interface telegram {
	/** 判断当前设备是否安装telegram客户端*/ 
	isInstalled():void

	/**
	 * `telegram 登录授权`
	 * ========params==========
	 *
	 * `botId` :number : Unique identifier for the bot.详情参考 telegram [官方文档](https://core.telegram.org/passport#request-parameters)
	 *
	 * `publicKey` :string : Public key of the bot.详情参考 telegram [官方文档](https://core.telegram.org/passport#request-parameters)
	 *
	 * `scope` :string : A JSON-serialized object describing the data you want to request.详情参考 telegram [官方文档](https://core.telegram.org/passport#request-parameters)
	 *
	 * `nonce` :string : Bot-specified nonce. Important: For security purposes it should be a cryptographically secure unique identifier of the request. In particular, it should be long enough and it should be generated using a cryptographically secure pseudorandom number generator. You should never accept credentials with the same nonce twice.详情参考 telegram [官方文档](https://core.telegram.org/passport#request-parameters)
	 */
	passportRequest(params:telegram_passportRequest_Params, callback?: (ret:JSON) => void):void

}
interface telegram_passportRequest_Params {
	/**Unique identifier for the bot.详情参考 telegram [官方文档](https://core.telegram.org/passport#request-parameters)*/ 
	botId:number,

	/**Public key of the bot.详情参考 telegram [官方文档](https://core.telegram.org/passport#request-parameters)*/ 
	publicKey:string,

	/**A JSON-serialized object describing the data you want to request.详情参考 telegram [官方文档](https://core.telegram.org/passport#request-parameters)*/ 
	scope:string,

	/**Bot-specified nonce. Important: For security purposes it should be a cryptographically secure unique identifier of the request. In particular, it should be long enough and it should be generated using a cryptographically secure pseudorandom number generator. You should never accept credentials with the same nonce twice.详情参考 telegram [官方文档](https://core.telegram.org/passport#request-parameters)*/ 
	nonce:string,

}

interface openIM {
	/**
	 * `初始化阿里百川即时通信`
	 * ========params==========
	 *
	 * `title` :JSON : （可选项）自带聊天UI顶部菜单颜色配置。
	 *
	 * `userid` :string : （必填项）初始化当前登陆账号。
	 */
	initYWIMKit(params:openIM_initYWIMKit_Params, callback?: (ret:JSON) => void):void

	/**
	 * `即时通信登陆`
	 * ========params==========
	 *
	 * `password` :string : （必填项）用户密码。
	 */
	login(params:openIM_login_Params, callback?: (ret:JSON) => void):void

	/** 打开会话列表*/ 
	openConversationActivity(callback?: (ret:JSON) => void):void

	/**
	 * `打开普通单聊界面`
	 * ========params==========
	 *
	 * `target` :string : （可选项）消息接收着账号ID。
	 */
	openChattingActivity(params:openIM_openChattingActivity_Params, callback?: (ret:JSON) => void):void

	/**
	 * `打开群聊天界面`
	 * ========params==========
	 *
	 * `tribeId` :string : （必填项）群ID号。
	 */
	openTribeChattingActivity(params:openIM_openTribeChattingActivity_Params, callback?: (ret:JSON) => void):void

	/** 登出*/ 
	logout(callback?: (ret:JSON) => void):void

}
interface openIM_initYWIMKit_Params {
	/**（可选项）自带聊天UI顶部菜单颜色配置。*/ 
	title?:JSON,

	/**（必填项）初始化当前登陆账号。*/ 
	userid:string,

}

interface openIM_login_Params {
	/**（必填项）用户密码。*/ 
	password:string,

}

interface openIM_openChattingActivity_Params {
	/**（可选项）消息接收着账号ID。*/ 
	target?:string,

}

interface openIM_openTribeChattingActivity_Params {
	/**（必填项）群ID号。*/ 
	tribeId:string,

}

interface IDataScan {
	/** 打开扫描设置界面*/ 
	showUI():void

	/** 给扫描头进行上电，扫描前一定要先执行此操作再启动扫描*/ 
	open():void

	/** 给扫描头进行断电，与open()功能相反*/ 
	close():void

	/** 启动扫描操作，此操作执行后，扫描头会出光*/ 
	startScan():void

	/** 停止扫描操作，此操作执行后，扫描头光会灭掉*/ 
	stopScan():void

	/** 锁定设备的扫描按键。使用iScan定义扫描键扫描，用户程序也可以自定义按键控制扫描。*/ 
	lockScanKey():void

	/** 解除对扫描按键的锁定。无法通过iScan定义扫描键扫描，用户可以自定义按键控制扫描。*/ 
	unlockScanKey():void

	/**
	 * `设置扫描头的输出模式`
	 * ========params==========
	 *
	 * `mode` :string : 输出模式
	 */
	setOutputMode(params:IDataScan_setOutputMode_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扫描成功后是否播放声音`
	 * ========params==========
	 *
	 * `enable` :boolean : 扫描成功后是否播放声音
	 */
	enablePlayBeep(params:IDataScan_enablePlayBeep_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扫描失败后是否播放声音`
	 * ========params==========
	 *
	 * `enable` :boolean : 扫描失败后是否播放声音
	 */
	enableFailurePlayBeep(params:IDataScan_enableFailurePlayBeep_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扫描成功后是否振动`
	 * ========params==========
	 *
	 * `enable` :boolean : 扫描成功后是否振动
	 */
	enablePlayVibrate(params:IDataScan_enablePlayVibrate_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否设置为省电模式，该模式下屏幕锁屏后将无法扫描`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否设置为省电模式
	 */
	enablePower(params:IDataScan_enablePower_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扫描数据后附加回车、TAB、换行等格式`
	 * ========params==========
	 *
	 * `value` :string : 附加的格式
	 */
	enableAddKeyValue(params:IDataScan_enableAddKeyValue_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扫描成功后，为扫描结果字符串添加前缀`
	 * ========params==========
	 *
	 * `prefix` :string : 前缀
	 */
	addPrefix(params:IDataScan_addPrefix_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扫描成功后，为扫描结果字符串添加后缀`
	 * ========params==========
	 *
	 * `suffix` :string : 后缀
	 */
	addSuffix(params:IDataScan_addSuffix_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扫描成功后，删除扫描结果字符串前几个字符`
	 * ========params==========
	 *
	 * `num` :number : 删除的字符个数
	 */
	interceptTrimleft(params:IDataScan_interceptTrimleft_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扫描成功后，删除扫描结果字符串后几个字符`
	 * ========params==========
	 *
	 * `num` :number : 删除的字符个数
	 */
	interceptTrimright(params:IDataScan_interceptTrimright_Params, callback?: (ret:JSON) => void):void

	/**
	 * `右侧Led灯光是否显示`
	 * ========params==========
	 *
	 * `enable` :boolean : 右侧Led灯光是否显示
	 */
	lightSet(params:IDataScan_lightSet_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置超时时间`
	 * ========params==========
	 *
	 * `time` :number : 超时时间，单位s
	 */
	timeOutSet(params:IDataScan_timeOutSet_Params, callback?: (ret:JSON) => void):void

	/**
	 * `过滤特定字符`
	 * ========params==========
	 *
	 * `text` :string : 扫码结果过滤掉的字符串
	 */
	filterCharacter(params:IDataScan_filterCharacter_Params, callback?: (ret:JSON) => void):void

	/**
	 * `是否连续扫描`
	 * ========params==========
	 *
	 * `enable` :boolean : 是否连续扫描
	 */
	continceScan(params:IDataScan_continceScan_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置连续扫描间隔时间`
	 * ========params==========
	 *
	 * `interval` :number : 连续扫描间隔时间
	 */
	intervalSet(params:IDataScan_intervalSet_Params, callback?: (ret:JSON) => void):void

	/**
	 * `扫描失败是否回调`
	 * ========params==========
	 *
	 * `enable` :boolean : 扫描失败是否回调
	 */
	setErrorBroadCast(params:IDataScan_setErrorBroadCast_Params, callback?: (ret:JSON) => void):void

	/** 恢复默认设置*/ 
	reset():void

	/**
	 * `自定义按键设置`
	 * ========params==========
	 *
	 * `key` :string : 按键名称
	 *
	 * `value` :string : 按键操作
	 */
	scanKeySet(params:IDataScan_scanKeySet_Params, callback?: (ret:JSON) => void):void

}
interface IDataScan_setOutputMode_Params {
	/**输出模式*/ 
	mode:string,

}

interface IDataScan_enablePlayBeep_Params {
	/**扫描成功后是否播放声音*/ 
	enable:boolean,

}

interface IDataScan_enableFailurePlayBeep_Params {
	/**扫描失败后是否播放声音*/ 
	enable:boolean,

}

interface IDataScan_enablePlayVibrate_Params {
	/**扫描成功后是否振动*/ 
	enable:boolean,

}

interface IDataScan_enablePower_Params {
	/**是否设置为省电模式*/ 
	enable:boolean,

}

interface IDataScan_enableAddKeyValue_Params {
	/**附加的格式*/ 
	value:string,

}

interface IDataScan_addPrefix_Params {
	/**前缀*/ 
	prefix:string,

}

interface IDataScan_addSuffix_Params {
	/**后缀*/ 
	suffix:string,

}

interface IDataScan_interceptTrimleft_Params {
	/**删除的字符个数*/ 
	num:number,

}

interface IDataScan_interceptTrimright_Params {
	/**删除的字符个数*/ 
	num:number,

}

interface IDataScan_lightSet_Params {
	/**右侧Led灯光是否显示*/ 
	enable:boolean,

}

interface IDataScan_timeOutSet_Params {
	/**超时时间，单位s*/ 
	time:number,

}

interface IDataScan_filterCharacter_Params {
	/**扫码结果过滤掉的字符串*/ 
	text:string,

}

interface IDataScan_continceScan_Params {
	/**是否连续扫描*/ 
	enable:boolean,

}

interface IDataScan_intervalSet_Params {
	/**连续扫描间隔时间*/ 
	interval:number,

}

interface IDataScan_setErrorBroadCast_Params {
	/**扫描失败是否回调*/ 
	enable:boolean,

}

interface IDataScan_scanKeySet_Params {
	/**按键名称*/ 
	key:string,

	/**按键操作*/ 
	value:string,

}

interface txyunPlayer {
	/** 播放器初始化*/ 
	init(callback?: (ret:JSON) => void):void

	/** 设置水印*/ 
	setWaterMark(callback?: (ret:JSON) => void):void

	/** 设置封面*/ 
	setCoverImg(callback?: (ret:JSON) => void):void

	/** 播放视频地址*/ 
	playWithURL(callback?: (ret:JSON) => void):void

	/** 播放云端视频*/ 
	playWithCloud(callback?: (ret:JSON) => void):void

	/** 开始播放*/ 
	play():void

	/** 重新播放*/ 
	replay():void

	/** 显示播放器*/ 
	show():void

	/** 隐藏播放器*/ 
	hide():void

	/** 暂停播放*/ 
	pause():void

	/** 关闭播放器*/ 
	close():void

	/** 弹幕开关*/ 
	onDanmuku(callback?: (ret:JSON) => void):void

	/** 发送弹窗*/ 
	addDanmaku():void

	/** 获取视频时长*/ 
	getDuration():void

}
interface zkFinger {
	/**
	 * `开启设备连接`
	 * ========params==========
	 *
	 * `autoVerify` :string : （可选项）开启设备后，是否自动验证指纹，异步回调，填1时，自动检测指纹，不需要单独调用verify接口。默认0，不自动检测，需要时检测时，单独调用verify接口。
	 */
	open(params:zkFinger_open_Params, callback?: (ret:JSON) => void):void

	/**
	 * `初始化指纹图片（因为指纹采集器重新连接后，会清除指纹缓存，所以需要每次启动app时，导入进去）`
	 * ========params==========
	 *
	 * `datastr` :JSON : （必填项）json数组,数据保护id和指纹的base64字符串（从上一个接口的异步回调中得到），例如 [{'id':'1','img':'base64Str1'},{'id':'2','img':'base64Str1'}]
	 */
	initFingerImg(params:zkFinger_initFingerImg_Params, callback?: (ret:JSON) => void):void

	/**
	 * `采集登记指纹,(指纹开始采集，此时模块会使用toast提示按压3次指纹，成功后，异步回调到open接口的回调函数中。)`
	 * ========params==========
	 *
	 * `uid` :string : （必填项）用户id唯一标识，用于区分指纹
	 */
	inroll(params:zkFinger_inroll_Params):void

	/** 开启验证模式*/ 
	verify(callback?: (ret:JSON) => void):void

	/** 关闭验证模式*/ 
	closeVerify(callback?: (ret:JSON) => void):void

	/** 关闭设备*/ 
	close(callback?: (ret:JSON) => void):void

}
interface zkFinger_open_Params {
	/**（可选项）开启设备后，是否自动验证指纹，异步回调，填1时，自动检测指纹，不需要单独调用verify接口。默认0，不自动检测，需要时检测时，单独调用verify接口。*/ 
	autoVerify?:string,

}

interface zkFinger_initFingerImg_Params {
	/**（必填项）json数组,数据保护id和指纹的base64字符串（从上一个接口的异步回调中得到），例如 [{'id':'1','img':'base64Str1'},{'id':'2','img':'base64Str1'}]*/ 
	datastr:JSON,

}

interface zkFinger_inroll_Params {
	/**（必填项）用户id唯一标识，用于区分指纹*/ 
	uid:string,

}

interface jpushVip {
	/** 初始化推送服务，只Android有效，iOS上会自动初始化*/ 
	init(callback?: (ret:JSON) => void):void

	/** 设置推送监听。*/ 
	setListener(callback?: (ret:JSON) => void):void

	/** 移除消息监听*/ 
	removeListener():void

	/**
	 * `绑定用户别名和标签。服务端可以指定别名和标签进行消息推送`
	 * ========params==========
	 *
	 * `alias` :string : 别名
	 *
	 * `tags` :Array : 标签列表
	 */
	bindAliasAndTags(params:jpushVip_bindAliasAndTags_Params, callback?: (ret:JSON) => void):void

	/** 通知极光推送SDK当前应用恢复到前台。*/ 
	onResume():void

	/**
	 * `清除极光推送发送到状态栏的通知。`
	 * ========params==========
	 *
	 * `id` :number : 待清除的通知id（等同于消息ID），为-1时清除所有，iOS只支持清除所有，不能为空
	 */
	clearNotification(params:jpushVip_clearNotification_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置允许推送时间，只Android有效`
	 * ========params==========
	 *
	 * `days` :Array : 允许推送的日期，0表示星期天，1表示星期一，以此类推，（7天制，数组里面的每项范围为0到6），不能为空
	 *
	 * `startHour` :number : 允许推送的开始时间（24小时制：startHour的范围为0到23），不能为空
	 *
	 * `endHour` :number : 允许推送的结束时间（24小时制：endHour的范围为0到23），不能为空
	 */
	setPushTime(params:jpushVip_setPushTime_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置通知静默时间，只Android有效`
	 * ========params==========
	 *
	 * `startHour` :number : 静音时段的开始小时（24小时制，范围：0~23），不能为空
	 *
	 * `startMinute` :number : 静音时段的开始分钟（范围：0~59），不能为空
	 *
	 * `endHour` :number : 静音时段的结束小时（24小时制，范围：0~23），不能为空
	 *
	 * `endMinute` :number : 静音时段的结束分钟（范围：0~59），不能为空
	 */
	setSilenceTime(params:jpushVip_setSilenceTime_Params, callback?: (ret:JSON) => void):void

	/** 停止Push推送。*/ 
	stopPush(callback?: (ret:JSON) => void):void

	/** 恢复Push推送。*/ 
	resumePush(callback?: (ret:JSON) => void):void

	/** 查询当前推送服务是否停止。*/ 
	isPushStopped(callback?: (ret:JSON) => void):void

	/**
	 * `设置应用图标右上角数字，只iOS有效。`
	 * ========params==========
	 *
	 * `badge` :number : 为0时清除应用图标数字，大于0时设置应用图标数字，同时该值会更新到激光推送服务器，不能为空
	 */
	setBadge(params:jpushVip_setBadge_Params):void

	/** 集成了JPush SDK的应用程序在第一次成功注册到JPush服务器时，JPush服务器会给客户端返回一个唯一的该设备的标识RegistrationID。JPush SDK会以广播的形式发送RegistrationID到应用程序。应用程序可以把此RegistrationID保存于自己的应用服务器上，然后就可以根据 RegistrationID来向设备推送消息或者通知*/ 
	getRegistrationId(callback?: (ret:JSON) => void):void

}
interface jpushVip_bindAliasAndTags_Params {
	/**别名*/ 
	alias:string,

	/**标签列表*/ 
	tags:Array,

}

interface jpushVip_clearNotification_Params {
	/**待清除的通知id（等同于消息ID），为-1时清除所有，iOS只支持清除所有，不能为空*/ 
	id:number,

}

interface jpushVip_setPushTime_Params {
	/**允许推送的日期，0表示星期天，1表示星期一，以此类推，（7天制，数组里面的每项范围为0到6），不能为空*/ 
	days:Array,

	/**允许推送的开始时间（24小时制：startHour的范围为0到23），不能为空*/ 
	startHour:number,

	/**允许推送的结束时间（24小时制：endHour的范围为0到23），不能为空*/ 
	endHour:number,

}

interface jpushVip_setSilenceTime_Params {
	/**静音时段的开始小时（24小时制，范围：0~23），不能为空*/ 
	startHour:number,

	/**静音时段的开始分钟（范围：0~59），不能为空*/ 
	startMinute:number,

	/**静音时段的结束小时（24小时制，范围：0~23），不能为空*/ 
	endHour:number,

	/**静音时段的结束分钟（范围：0~59），不能为空*/ 
	endMinute:number,

}

interface jpushVip_setBadge_Params {
	/**为0时清除应用图标数字，大于0时设置应用图标数字，同时该值会更新到激光推送服务器，不能为空*/ 
	badge:number,

}

interface lBCast {
	/** 初始化乐播投屏模块。*/ 
	initLBCast(callback?: (ret:JSON) => void):void

	/** 搜索投屏设备，使用前需要先初始化模块，默认方法会每隔一段时间刷新一次设备数据，在适当的时候调用stopSearch方法即可停止搜索。*/ 
	searchDevice(callback?: (ret:JSON) => void):void

	/** 停止搜索设备*/ 
	stopSearch(callback?: (ret:JSON) => void):void

	/**
	 * `链接投屏设备，使用前需先搜索投屏设备`
	 * ========params==========
	 *
	 * `name` :string : （必须项）搜索投屏设备成功后返回的设备名称。
	 *
	 * `ip` :string : （必须项）搜索投屏设备成功后返回的设备ip地址。
	 */
	connectDevice(params:lBCast_connectDevice_Params, callback?: (ret:JSON) => void):void

	/** 断开链接*/ 
	stopConnect(callback?: (ret:JSON) => void):void

	/** 投屏，需要先链接设备*/ 
	castStart():void

	/** 退出投屏*/ 
	castStop(callback?: (ret:JSON) => void):void

	/** 播放进度信息，*/ 
	progressInfo(callback?: (ret:JSON) => void):void

	/** 增加音量*/ 
	addVolume(callback?: (ret:JSON) => void):void

	/** 减少音量*/ 
	reduceVolume(callback?: (ret:JSON) => void):void

	/**
	 * `设置音量`
	 * ========params==========
	 *
	 * `volume` :number : （可选项）需要调节的音量值。
	 */
	setVolume(params:lBCast_setVolume_Params, callback?: (ret:JSON) => void):void

	/** 暂停或继续*/ 
	pauseOrResume(callback?: (ret:JSON) => void):void

	/** 暂停*/ 
	pause(callback?: (ret:JSON) => void):void

	/** 继续播放*/ 
	resume(callback?: (ret:JSON) => void):void

	/**
	 * `设置播放进度`
	 * ========params==========
	 *
	 * `seekTime` :number : （可选项）播放进度位置（秒）。
	 */
	setSeekTo(params:lBCast_setSeekTo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送弹幕`
	 * ========params==========
	 *
	 * `text` :string : 弹幕内容
	 *
	 * `textColor` :string : （非必须）弹幕文字颜色
	 *
	 * `textSize` :number : （非必须）字体大小
	 */
	pushBarrage(params:lBCast_pushBarrage_Params, callback?: (ret:JSON) => void):void

	/** 开始投屏，由于系统原因，此方法只支持Android系统，IOS系统需要从系统控制中心打开/关闭屏幕镜像*/ 
	startMirror(callback?: (ret:JSON) => void):void

	/** 结束投屏，由于系统原因，此方法只支持Android系统，IOS系统需要从系统控制中心打开/关闭屏幕镜像*/ 
	stopMirror(callback?: (ret:JSON) => void):void

	/** 是否支持弹幕功能*/ 
	canBarrage(callback?: (ret:JSON) => void):void

	/** 现在是否可以发送弹幕*/ 
	canPushBarrageNow(callback?: (ret:JSON) => void):void

}
interface lBCast_connectDevice_Params {
	/**（必须项）搜索投屏设备成功后返回的设备名称。*/ 
	name:string,

	/**（必须项）搜索投屏设备成功后返回的设备ip地址。*/ 
	ip:string,

}

interface lBCast_setVolume_Params {
	/**（可选项）需要调节的音量值。*/ 
	volume?:number,

}

interface lBCast_setSeekTo_Params {
	/**（可选项）播放进度位置（秒）。*/ 
	seekTime?:number,

}

interface lBCast_pushBarrage_Params {
	/**弹幕内容*/ 
	text:string,

	/**（非必须）弹幕文字颜色*/ 
	textColor:string,

	/**（非必须）字体大小*/ 
	textSize:number,

}

interface wxSubscribe {
	/** 微信一次性订阅授权*/ 
	subscribe():void

}
interface iPlat4M {
	/** 当从基座跳转到当前应用时会有回调，可在此时获取用户信息。*/ 
	appOpen():void

	/** 从当前应用跳转基座请求授权信息。*/ 
	baseAuth():void

	/** 获取用户信息。*/ 
	getUserInfo():void

}
interface adView {
	/** 初始化SDK*/ 
	initsdk():void

	/** 隐藏横幅广告*/ 
	hideBanner():void

	/** 销毁广告*/ 
	Destory():void

	/** 开屏广告*/ 
	showSplash():void

}
interface facebookAds {
	/**
	 * `展示横幅广告`
	 * ========params==========
	 *
	 * `rect` :null : null
	 *
	 * `fixedOn` :null : null
	 *
	 * `fixed` :null : null
	 *
	 * `fbPlacementId` :null : null
	 *
	 * `type` :null : null
	 */
	showBanner(params:facebookAds_showBanner_Params, callback?: (ret:JSON) => void):void

	/**
	 * `初始化插屏广告，初始化成功后才可以展示插屏广告`
	 * ========params==========
	 *
	 * `fbPlacementId` :null : null
	 */
	initInterstitial(params:facebookAds_initInterstitial_Params, callback?: (ret:JSON) => void):void

	/** 展示插屏广告，需配合initInterstitial一起使用，初始化成功后才可以展示插屏广告*/ 
	showInterstitial():void

}
interface facebookAds_showBanner_Params {
	/**null*/ 
	rect:null,

	/**null*/ 
	fixedOn:null,

	/**null*/ 
	fixed:null,

	/**null*/ 
	fbPlacementId:null,

	/**null*/ 
	type:null,

}

interface facebookAds_initInterstitial_Params {
	/**null*/ 
	fbPlacementId:null,

}

interface hkplayer {
	/**
	 * `打开摄像头rtsp地址`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `url` :string : （必填项）仅支持rtsp地址(请开发者自行控制).
	 */
	openPlayer(params:hkplayer_openPlayer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭摄像头预览。`
	 * ========params==========
	 *
	 * `index` :number : （必填项）预览视频序号
	 */
	closePlayer(params:hkplayer_closePlayer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除打开的所有摄像头预览`
	 * ========params==========
	 *
	 * `index` :number : （必填项）预览视频序号
	 */
	cleanPlayer(params:hkplayer_cleanPlayer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开启摄像头声音`
	 * ========params==========
	 *
	 * `index` :number : （必填项）预览视频序号
	 */
	openAudio(params:hkplayer_openAudio_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭摄像头声音`
	 * ========params==========
	 *
	 * `index` :number : （必填项）预览视频序号
	 */
	closeAudio(params:hkplayer_closeAudio_Params, callback?: (ret:JSON) => void):void

}
interface hkplayer_openPlayer_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）仅支持rtsp地址(请开发者自行控制).*/ 
	url:string,

}

interface hkplayer_closePlayer_Params {
	/**（必填项）预览视频序号*/ 
	index:number,

}

interface hkplayer_cleanPlayer_Params {
	/**（必填项）预览视频序号*/ 
	index:number,

}

interface hkplayer_openAudio_Params {
	/**（必填项）预览视频序号*/ 
	index:number,

}

interface hkplayer_closeAudio_Params {
	/**（必填项）预览视频序号*/ 
	index:number,

}

interface UIEaseChat {
	/**
	 * `- 类型：字符串`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `password` :string : 密码
	 */
	easeRegister(params:UIEaseChat_easeRegister_Params, callback?: (ret:JSON) => void):void

	/**
	 * `登录接口`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `password` :string : 密码
	 *
	 * `autoLogin` :boolean : 是否开启自动登录（仅支持ios）
	 */
	login(params:UIEaseChat_login_Params, callback?: (ret:JSON) => void):void

	/** 是否设置了自动登录（仅支持ios）*/ 
	isAutoLogin():void

	/** 退出登录*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 连接服务器的状态变化事件的监听*/ 
	addConnectionListener():void

	/** 自动登录完成时的回调事件监听（仅支持ios）*/ 
	addAutoLoginListener(callback?: (ret:JSON) => void):void

	/** 账号异常事件的监听*/ 
	addAccountListener():void

	/**
	 * `设置音视频通话的监听`
	 * ========params==========
	 *
	 * `name` :string : 监听事件名字
	 */
	addCallEventListener(params:UIEaseChat_addCallEventListener_Params, callback?: (ret:JSON) => void):void

	/** 设置音视频通话状态的监听*/ 
	addCallStateListener():void

	/** 添加单聊语音和视频通话结束监听*/ 
	addCallEndListener():void

	/** 添加聊天页面右边按钮监听*/ 
	addRightButtonListener():void

	/** 添加聊天页面监听*/ 
	addChatListener():void

	/**
	 * `打开群聊邀请页面，用户接受邀请后模块自动跳转到群聊界面`
	 * ========params==========
	 *
	 * `type` :string : （可选项）群聊类型
	 *
	 * `confId` :string : （可选项）群聊id
	 *
	 * `creater` :string : 群聊创建者用户id
	 *
	 * `groupId` :string : （可选项）由群聊打开的会议时群聊的id，不传会议记录无法在群聊记录显示。非群聊页面打开的会议，可忽略本参数
	 *
	 * `createrNickname` :string : （可选项）群聊创建者昵称，若不传或传空则显示creater（用户id）
	 *
	 * `userList` :Array : 群聊成员username组成的数组，如：['huanxinUser1','huanxinUser2']
	 *
	 * `bg` :string : （可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）
	 *
	 * `avatar` :JSON : 头像信息，以username为key，头像图片地址（要求本地路径：widget://、fs://）为value的JSON对象
	 */
	groupInvite(params:UIEaseChat_groupInvite_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建群聊并打开群聊界面，同时添加邀请群聊成员`
	 * ========params==========
	 *
	 * `type` :string : （可选项）群聊类型
	 *
	 * `userList` :Array : 群聊成员username组成的数组，如：['huanxinUser2','huanxinUser3']
	 *
	 * `bg` :string : （可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）
	 *
	 * `avatar` :JSON : 头像信息，以username为key，头像图片地址（要求本地路径：widget://、fs://）为value的JSON对象
	 *
	 * `createrNickname` :string : （可选项）群聊创建者昵称，若不传或传空则显示creater（用户id）
	 */
	groupChat(params:UIEaseChat_groupChat_Params):void

	/**
	 * `打开群聊邀请页面，用户接受邀请后模块自动跳转到音视频聊天界面`
	 * ========params==========
	 *
	 * `type` :string : （可选项）群聊类型
	 *
	 * `username` :string : 邀请者的用户id
	 *
	 * `nickname` :string : （可选项）邀请者的用户昵称，若不传或传空则显示username（用户id）
	 *
	 * `bg` :string : （可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）
	 *
	 * `avatar` :string : （可选项）头像图片地址，支持widget://、fs://
	 */
	chatInvite(params:UIEaseChat_chatInvite_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发起音视频单聊`
	 * ========params==========
	 *
	 * `username` :string : 会话对方的用户id
	 *
	 * `nickname` :JSON : （可选项）发起者和被邀请者的昵称
	 *
	 * `type` :string : （可选项）群聊类型
	 *
	 * `avatar` :JSON : 头像样式配置
	 *
	 * `bg` :string : （可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）
	 *
	 * `recordOnServer` :boolean : （可选项）是否在服务器端录制该通话
	 *
	 * `mergeStream` :boolean : （可选项）服务器端录制时是否合并流
	 */
	makeCall(params:UIEaseChat_makeCall_Params):void

	/** 暂停音视频单聊*/ 
	pauseCall():void

	/** 恢复音视频通话*/ 
	resumeCall():void

	/**
	 * `挂断音视频通话`
	 * ========params==========
	 *
	 * `chatType` :string : （可选项）发送回执消息的会话类型
	 */
	closeCall(params:UIEaseChat_closeCall_Params):void

	/**
	 * `根据会话 ID 和类型创建并打开聊天页面`
	 * ========params==========
	 *
	 * `conversationId` :string : 会话对方的用户名. 如果是群聊, 则是群组的id
	 *
	 * `chatType` :string : （可选项）发送回执消息的会话类型
	 *
	 * `callishidden` :boolean : 是否隐藏视频和语音通话按钮
	 *
	 * `hideVideo` :boolean : 是否隐藏聊天页面中发送视频文件的按钮
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 *
	 * `avatar` :JSON : 头像样式配置
	 *
	 * `text` :JSON : 消息样式配置
	 *
	 * `location` :JSON : 位置消息样式配置
	 *
	 * `callbg` :string : （可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）
	 *
	 * `avatarInfo` :JSON : （可选项）群聊时，各成员头像信息，以username为key，头像图片地址（要求本地路径：widget://、fs://）为value的JSON对象，单聊时忽略本参数
	 *
	 * `nickname` :JSON : （可选项）各成员昵称信息，以username为key，昵称为value的JSON对象
	 *
	 * `userList` :Array : （可选项）群聊时群组成员username组成的数组，如：['huanxinUser2','huanxinUser3']。单聊时忽略本参数。
	 */
	chat(params:UIEaseChat_chat_Params):void

	/** 关闭会话页面*/ 
	closeConversation():void

	/** 聊天页面底部录音按钮监听*/ 
	addRecordButtonListener():void

	/** 聊天页面内头像点击事件监听*/ 
	addAvatarListener():void

	/**
	 * `打开聊天列表页面`
	 * ========params==========
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 *
	 * `callbg` :string : （可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）
	 *
	 * `avatar` :JSON : 头像信息，以username为key，头像图片地址（支持：widget://、fs://）为value的JSON对象
	 *
	 * `nickname` :JSON : （可选项）各联系人昵称信息，以username为key，昵称为value的JSON对象
	 *
	 * `callishidden` :boolean : 是否隐藏视频和语音通话按钮
	 *
	 * `hideVideo` :boolean : 是否隐藏聊天页面中发送视频文件的按钮
	 */
	chatList(params:UIEaseChat_chatList_Params):void

	/** 刷新聊天列表*/ 
	refreshChatList():void

	/**
	 * `打开联系人列表页面`
	 * ========params==========
	 *
	 * `navigationBar` :JSON : 导航条样式配置
	 *
	 * `callbg` :string : （可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）
	 *
	 * `avatar` :JSON : 头像信息，以username为key，头像图片地址（要求本地路径：widget://、fs://）为value的JSON对象
	 *
	 * `nickname` :JSON : （可选项）各联系人昵称信息，以username为key，昵称为value的JSON对象
	 *
	 * `callishidden` :boolean : 是否隐藏视频和语音通话按钮
	 *
	 * `hideVideo` :boolean : 是否隐藏聊天页面中发送视频文件的按钮
	 */
	contactsList(params:UIEaseChat_contactsList_Params):void

	/** 刷新联系人列表*/ 
	refreshContactsList():void

	/**
	 * `环信相关配置`
	 * ========params==========
	 *
	 * `navigationBar` :JSON : 配置聊天页面导（优先级低于调用chat接口时配置,都不设置采用默认值）
	 *
	 * `msgNotify` :boolean : app处于后台时，有新消息时是否在通知栏提醒(注:此参数不影响第三方的其他推送)(仅在android端有效)
	 *
	 * `msgVoice` :boolean : (可选项) 有新消息后，是否有声音提醒(仅在android端有效)
	 *
	 * `msgVibrate` :boolean : (可选项) 有新消息后，是否有震动提醒(仅在android端有效)
	 *
	 * `input` :boolean : (可选项) 退出聊天页面后，是否保留输入框输入的内容
	 *
	 * `rightButtonInfo` :JSON : （可选项）会话页面右边第一个按钮相关设置
	 *
	 * `historyButtonInfo` :JSON : （可选项）会话页面右边消息历史记录按钮设置，本按钮无回掉监听
	 *
	 * `callHint` :JSON : （可选项）音视频通话状态提示文字，不填写此参数将没有提示
	 *
	 * `panelUrls` :JSON : （可选项）聊天面板按钮的图片路径，仅支持本地图片（支持widget、fs），不填则默认模块自带图片
	 *
	 * `hideLocation` :boolean : （可选项）是否隐藏聊天页面面板上位置发送按钮
	 *
	 * `hideImage` :boolean : （可选项）是否隐藏聊天页面面板上图片发送按钮
	 *
	 * `hideTaking` :boolean : （可选项）是否隐藏聊天页面面板上拍照按钮
	 *
	 * `hideSendFile` :boolean : （可选项）是否隐藏聊天页面面板上发送文件按钮（仅android支持）
	 *
	 * `hanguptime` :number : （可选项）自动挂断等待时长
	 *
	 * `netDisConnectedAutoExit` :boolean : (可选项) 在单聊的语音视频通话中，网络中断后是否自动挂断(ios不支持)
	 *
	 * `hideEmoticon` :boolean : 是否隐藏会话页面发送表情功能
	 *
	 * `msgExt` :JSON : 会话页面发送消息携带的扩展信息，如：{"em_apns_ext":{"extern":"自定义推送扩展"}};如果无，则不携带扩展信息
	 */
	configureChat(params:UIEaseChat_configureChat_Params):void

	/**
	 * `设置语音/视频通话界面免提按钮是否可用`
	 * ========params==========
	 *
	 * `enable` :boolean : (可选项)免提按钮是否可用
	 */
	setHandsFreeEnable(params:UIEaseChat_setHandsFreeEnable_Params):void

	/**
	 * `创建群组`
	 * ========params==========
	 *
	 * `name` :string : 群组名
	 *
	 * `description` :string : 群组描述
	 *
	 * `message` :string : 邀请消息
	 *
	 * `userCount` :number : （可选项）群组容纳的人数，群组的最大成员数(3 - 2000)
	 *
	 * `invitees` :Array : 群组成员（不包括创建者自己）
	 *
	 * `style` :string : 群组类型
	 *
	 * `IsInviteNeedConfirm` :boolean : （可选项）邀请群成员时，是否需要发送邀请通知.若false，被邀请的人自动加入群组
	 */
	createGroup(params:UIEaseChat_createGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解散群组 ，需要owner/admin权限`
	 * ========params==========
	 *
	 * `id` :string : 群组 id
	 */
	destroyGroup(params:UIEaseChat_destroyGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取制定 id 的群组信息 ，需要owner/admin权限`
	 * ========params==========
	 *
	 * `id` :string : 群组 id
	 *
	 * `id` :string : 群组 id
	 */
	getGroupInfo(params:UIEaseChat_getGroupInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加好友`
	 * ========params==========
	 *
	 * `name` :string : 要添加的用户
	 *
	 * `message` :string : 邀请消息
	 */
	addContact(params:UIEaseChat_addContact_Params, callback?: (ret:JSON) => void):void

	/** 添加好友状态监听*/ 
	addContactListener():void

	/**
	 * `设置是否自动同意好友申请`
	 * ========params==========
	 *
	 * `isAutoAcceptFriendInvitation` :boolean : 是否自动同意好友申请
	 */
	setAutoAcceptFriendInvitation(params:UIEaseChat_setAutoAcceptFriendInvitation_Params):void

	/**
	 * `同意加好友的申请`
	 * ========params==========
	 *
	 * `name` :string : 申请者
	 */
	approveFriendRequest(params:UIEaseChat_approveFriendRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝加好友的申请`
	 * ========params==========
	 *
	 * `name` :string : 申请者
	 */
	declineFriendRequest(params:UIEaseChat_declineFriendRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除好友`
	 * ========params==========
	 *
	 * `name` :string : 要删除的好友
	 *
	 * `isDeleteConversation` :boolean : （可选项）是否删除会话（仅ios有效）
	 */
	deleteContact(params:UIEaseChat_deleteContact_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取好友列表（仅支持ios）`
	 * ========params==========
	 *
	 * `original` :string : （可选项）数据源（仅ios有效）
	 */
	getContacts(params:UIEaseChat_getContacts_Params, callback?: (ret:JSON) => void):void

	/**
	 * `邀请单人或多人进入群组, (注：android如果是群主加人可以调用此接口)`
	 * ========params==========
	 *
	 * `names` :Array : 要邀请的用户名列表
	 *
	 * `groupId` :string : 群组id
	 *
	 * `message` :string : （可选项）欢迎信息（仅支持ios）
	 */
	addMembersToGroup(params:UIEaseChat_addMembersToGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `私有群里，如果开放了群成员邀请，群成员邀请调用该接口邀请成员`
	 * ========params==========
	 *
	 * `names` :Array : 要邀请的用户名列表
	 *
	 * `groupId` :string : 群组id
	 *
	 * `message` :string : （可选项）欢迎信息
	 */
	inviteUser(params:UIEaseChat_inviteUser_Params, callback?: (ret:JSON) => void):void

	/**
	 * `把单人或多人移出群组`
	 * ========params==========
	 *
	 * `names` :Array : 要移除的用户名列表(注：android不支持一次删除多个人，即如果数组的长度大于1，只会删除第一个)
	 *
	 * `groupId` :string : 群组id
	 */
	removeMembersFromGroup(params:UIEaseChat_removeMembersFromGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `修改群组群名称`
	 * ========params==========
	 *
	 * `groupName` :string : 要修改的名称
	 *
	 * `groupId` :string : 群组id
	 */
	changeGroupSubject(params:UIEaseChat_changeGroupSubject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `用户主动退出群组`
	 * ========params==========
	 *
	 * `groupId` :string : 群组id
	 */
	leaveGroup(params:UIEaseChat_leaveGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入一个公开群组`
	 * ========params==========
	 *
	 * `groupId` :string : 群组id
	 */
	joinPublicGroup(params:UIEaseChat_joinPublicGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `申请加入一个需批准的公开群组`
	 * ========params==========
	 *
	 * `groupId` :string : 群组id
	 *
	 * `aMessage` :string : (可选项)请求加入的信息
	 */
	requestToJoinPublicGroup(params:UIEaseChat_requestToJoinPublicGroup_Params, callback?: (ret:JSON) => void):void

	/**
	 * `批准入群申请`
	 * ========params==========
	 *
	 * `groupId` :string : 所申请的群组ID
	 *
	 * `username` :string : 申请人
	 */
	approveJoinGroupRequest(params:UIEaseChat_approveJoinGroupRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `拒绝入群申请`
	 * ========params==========
	 *
	 * `groupId` :string : 被拒绝的群组ID
	 *
	 * `username` :string : 申请人
	 *
	 * `reason` :string : 拒绝理由
	 */
	declineJoinGroupRequest(params:UIEaseChat_declineJoinGroupRequest_Params, callback?: (ret:JSON) => void):void

	/**
	 * `接受入群邀请`
	 * ========params==========
	 *
	 * `groupId` :string : 接受的群组ID
	 *
	 * `username` :string : 邀请者
	 */
	acceptInvitationFromGroup(params:UIEaseChat_acceptInvitationFromGroup_Params, callback?: (ret:JSON) => void):void

	/** 群组状态监听*/ 
	addGroupListener():void

	/**
	 * `将一组成员禁言，需要Owner / Admin权限`
	 * ========params==========
	 *
	 * `muteMembers` :Array : 要禁言的成员列表
	 *
	 * `muteMilliseconds` :number : 禁言时长，单位秒(android注意：目前muteMilliseconds参数不起作用，暂时只支持永久禁言和解除禁言两种操作, muteMilliseconds建议输入12*30*24*60*60)
	 *
	 * `groupId` :any : 群组ID
	 */
	muteMembers(params:UIEaseChat_muteMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将一组成员解除禁言，需要Owner / Admin权限`
	 * ========params==========
	 *
	 * `muteMembers` :Array : 要解除禁言的成员列表
	 *
	 * `groupId` :any : 群组ID
	 */
	unmuteMembers(params:UIEaseChat_unmuteMembers_Params, callback?: (ret:JSON) => void):void

	/**
	 * `新建/获取一个会话`
	 * ========params==========
	 *
	 * `conversationId` :string : （可选项）会话的id，若创建时可不传此参数
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `ifCreate` :boolean : （可选项） 如果会话不存在是否创建会话
	 */
	getConversation(params:UIEaseChat_getConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除会话`
	 * ========params==========
	 *
	 * `conversationId` :string : 要删除的会话的id
	 *
	 * `isDeleteMessages` :boolean : （可选项） 是否删除会话中的消息
	 */
	deleteConversation(params:UIEaseChat_deleteConversation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除一组会话`
	 * ========params==========
	 *
	 * `conversationIds` :Array : 要删除的会话的id 组成的数组
	 *
	 * `isDeleteMessages` :boolean : （可选项） 是否删除会话中的消息
	 */
	deleteConversations(params:UIEaseChat_deleteConversations_Params, callback?: (ret:JSON) => void):void

	/** 获取所有会话，如果内存中不存在会从DB中加载*/ 
	getAllConversations(callback?: (ret:JSON) => void):void

	/**
	 * `根据会话id 及其类型，获取指定消息 ID 的消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要获取信息的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `messageId` :string : 指定的消息的 ID
	 */
	loadMessageWithId(params:UIEaseChat_loadMessageWithId_Params, callback?: (ret:JSON) => void):void

	/**
	 * `根据会话id 及其类型，获取收到的对方发送的最后一条消息（仅支持ios）`
	 * ========params==========
	 *
	 * `conversationId` :string : 要获取信息的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 */
	lastReceivedMessage(params:UIEaseChat_lastReceivedMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文本消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `text` :string : 发送的消息
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}
	 */
	sendText(params:UIEaseChat_sendText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送图片消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的图片的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 *
	 * `displayName` :string : 附件显示名（不包含路径）（仅支持ios）
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendImage(params:UIEaseChat_sendImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送位置消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `address` :string : 要发送的地址
	 *
	 * `latitude` :number : 纬度
	 *
	 * `longitude` :number : 经度
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendLocation(params:UIEaseChat_sendLocation_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送声音消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的音频的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 *
	 * `displayName` :string : 附件显示名（不包含路径）
	 *
	 * `length` :number : 录音时间(秒)
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendVoice(params:UIEaseChat_sendVoice_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送视频消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的视频的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 *
	 * `displayName` :string : 附件显示名（不包含路径）
	 *
	 * `length` :number : 视频时间长度(秒)
	 *
	 * `thumbPath` :string : 视频预览图路径，要求本地路径（fs://、widget://）(android只支持fs)
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendVideo(params:UIEaseChat_sendVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送文件消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `path` :string : 要发送的文件的路径，要求本地路径（fs://、widget://）(android只支持fs)
	 *
	 * `displayName` :string : 附件显示名（不包含路径）
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendFile(params:UIEaseChat_sendFile_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送命令消息`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `action` :string : 要发送的命令
	 *
	 * `from` :string : （可选项）发送方
	 *
	 * `to` :string : 接收方
	 *
	 * `ext` :JSON : 扩展信息
	 */
	sendCmd(params:UIEaseChat_sendCmd_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载缩略图（图片消息的缩略图或视频消息的第一帧图片），`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）要发送消息的会话类型
	 *
	 * `messageId` :string : 要下载的信息的 id
	 */
	downloadMessageThumbnail(params:UIEaseChat_downloadMessageThumbnail_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载消息附件（语音，视频，图片原图，文件），`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送消息的会话的 id
	 *
	 * `chatType` :string : （可选项）发送消息的会话类型
	 *
	 * `messageId` :string : 要下载的信息的 id
	 */
	downloadMessageAttachments(params:UIEaseChat_downloadMessageAttachments_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送消息已读回执`
	 * ========params==========
	 *
	 * `conversationId` :string : 要发送回执消息的会话的 id
	 *
	 * `chatType` :string : （可选项）发送回执消息的会话类型
	 *
	 * `messageId` :string : 要发送回执的信息的 id
	 */
	sendMessageReadAck(params:UIEaseChat_sendMessageReadAck_Params, callback?: (ret:JSON) => void):void

	/**
	 * `添加消息相关事件监听`
	 * ========params==========
	 *
	 * `name` :string : 要监听的消息相关事件名称
	 */
	addMessageListener(params:UIEaseChat_addMessageListener_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除消息相关事件监听`
	 * ========params==========
	 *
	 * `name` :string : 要移除的消息相关事件名称
	 */
	removeMessageListener(params:UIEaseChat_removeMessageListener_Params):void

	/**
	 * `从数据库中获取消息，获取到的消息是startMsgId之前的pagesize条消息；`
	 * ========params==========
	 *
	 * `conversationId` :string : （必选项）会话的id，若创建时可不传此参数
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `startMsgId` :string : (可选项）消息id，如果不写此项，从数据库中读取最新的记录
	 *
	 * `pagesize` :number : (可选项) 获取startMsgId之前的消息数
	 */
	loadMessageFromDB(params:UIEaseChat_loadMessageFromDB_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将会话指定消息置为已读`
	 * ========params==========
	 *
	 * `conversationId` :string : 要设置的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `messageId` :string : 要设置为已读的信息的 id
	 */
	markMessageAsRead(params:UIEaseChat_markMessageAsRead_Params, callback?: (ret:JSON) => void):void

	/**
	 * `将会话所有消息置为已读`
	 * ========params==========
	 *
	 * `conversationId` :string : 要设置的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 */
	markAllMessagesAsRead(params:UIEaseChat_markAllMessagesAsRead_Params, callback?: (ret:JSON) => void):void

	/**
	 * `从服务器获取指定会话的历史消息；此接口需要开通环信增值服务，未开通不会返回数据`
	 * ========params==========
	 *
	 * `conversationId` :string : （必选项）会话的id，若创建时可不传此参数
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `startMsgId` :string : 参考起始消息的ID
	 *
	 * `pagesize` :number : (可选项) 获取startMsgId之前的消息数
	 */
	fetchHistoryMessagesFromServer(params:UIEaseChat_fetchHistoryMessagesFromServer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `撤回一条消息（此接口必须开通增值服务）`
	 * ========params==========
	 *
	 * `conversationId` :string : 要设置的会话的 id
	 *
	 * `type` :string : （可选项）会话类型
	 *
	 * `messageId` :string : 要撤回消息的 id
	 */
	recallMessage(params:UIEaseChat_recallMessage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `加入聊天室`
	 * ========params==========
	 *
	 * `conversationId` :string : 聊天室id
	 */
	joinChatroom(params:UIEaseChat_joinChatroom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `离开聊天室`
	 * ========params==========
	 *
	 * `conversationId` :string : 聊天室id
	 */
	leaveChatroom(params:UIEaseChat_leaveChatroom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解散聊天室（需要owner权限）`
	 * ========params==========
	 *
	 * `conversationId` :string : 聊天室id
	 */
	destroyChatroom(params:UIEaseChat_destroyChatroom_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开启关闭本地通知`
	 * ========params==========
	 *
	 * `enable` :string : （可选项）是否开启本地通知
	 *
	 * `title` :string : （可选项）本地推送提示语
	 */
	setLocalNotification(params:UIEaseChat_setLocalNotification_Params):void

	/**
	 * `设置推送全局属性`
	 * ========params==========
	 *
	 * `displayName` :string : （可选项）推送消息显示的昵称，不传则不设置
	 *
	 * `displayStyle` :string : （可选项）推送消息显示的类型
	 *
	 * `noDisturbStatus` :string : （可选项）消息推送的免打扰设置
	 *
	 * `noDisturbingStartH` :number : （可选项）消息推送免打扰开始时间，小时，暂时只支持整点（小时），不传则不设置
	 *
	 * `noDisturbingEndH` :number : （可选项）消息推送免打扰结束时间，小时，暂时只支持整点（小时），不传则不设置
	 */
	setPushOption(params:UIEaseChat_setPushOption_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置推送昵称`
	 * ========params==========
	 *
	 * `nickname` :string : 推送消息显示的昵称
	 */
	setApnsNickname(params:UIEaseChat_setApnsNickname_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置群组忽略推送`
	 * ========params==========
	 *
	 * `groupId` :string : 群组id
	 */
	ignoreGroupPush(params:UIEaseChat_ignoreGroupPush_Params, callback?: (ret:JSON) => void):void

	/**
	 * `批量设置忽略推送的群组`
	 * ========params==========
	 *
	 * `groupIds` :Array : 群组id组成的数组
	 */
	ignoreGroupsPush(params:UIEaseChat_ignoreGroupsPush_Params, callback?: (ret:JSON) => void):void

	/** 获取忽略推送消息的群组id*/ 
	getAllIgnoredGroupIds():void

}
interface UIEaseChat_easeRegister_Params {
	/**用户名*/ 
	username:string,

	/**密码*/ 
	password:string,

}

interface UIEaseChat_login_Params {
	/**用户名*/ 
	username:string,

	/**密码*/ 
	password:string,

	/**是否开启自动登录（仅支持ios）*/ 
	autoLogin:boolean,

}

interface UIEaseChat_addCallEventListener_Params {
	/**监听事件名字*/ 
	name:string,

}

interface UIEaseChat_groupInvite_Params {
	/**（可选项）群聊类型*/ 
	type?:string,

	/**（可选项）群聊id*/ 
	confId?:string,

	/**群聊创建者用户id*/ 
	creater:string,

	/**（可选项）由群聊打开的会议时群聊的id，不传会议记录无法在群聊记录显示。非群聊页面打开的会议，可忽略本参数*/ 
	groupId?:string,

	/**（可选项）群聊创建者昵称，若不传或传空则显示creater（用户id）*/ 
	createrNickname?:string,

	/**群聊成员username组成的数组，如：['huanxinUser1','huanxinUser2']*/ 
	userList:Array,

	/**（可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）*/ 
	bg?:string,

	/**头像信息，以username为key，头像图片地址（要求本地路径：widget://、fs://）为value的JSON对象*/ 
	avatar:JSON,

}

interface UIEaseChat_groupChat_Params {
	/**（可选项）群聊类型*/ 
	type?:string,

	/**群聊成员username组成的数组，如：['huanxinUser2','huanxinUser3']*/ 
	userList:Array,

	/**（可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）*/ 
	bg?:string,

	/**头像信息，以username为key，头像图片地址（要求本地路径：widget://、fs://）为value的JSON对象*/ 
	avatar:JSON,

	/**（可选项）群聊创建者昵称，若不传或传空则显示creater（用户id）*/ 
	createrNickname?:string,

}

interface UIEaseChat_chatInvite_Params {
	/**（可选项）群聊类型*/ 
	type?:string,

	/**邀请者的用户id*/ 
	username:string,

	/**（可选项）邀请者的用户昵称，若不传或传空则显示username（用户id）*/ 
	nickname?:string,

	/**（可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）*/ 
	bg?:string,

	/**（可选项）头像图片地址，支持widget://、fs://*/ 
	avatar?:string,

}

interface UIEaseChat_makeCall_Params {
	/**会话对方的用户id*/ 
	username:string,

	/**（可选项）发起者和被邀请者的昵称*/ 
	nickname?:JSON,

	/**（可选项）群聊类型*/ 
	type?:string,

	/**头像样式配置*/ 
	avatar:JSON,

	/**（可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）*/ 
	bg?:string,

	/**（可选项）是否在服务器端录制该通话*/ 
	recordOnServer?:boolean,

	/**（可选项）服务器端录制时是否合并流*/ 
	mergeStream?:boolean,

}

interface UIEaseChat_closeCall_Params {
	/**（可选项）发送回执消息的会话类型*/ 
	chatType?:string,

}

interface UIEaseChat_chat_Params {
	/**会话对方的用户名. 如果是群聊, 则是群组的id*/ 
	conversationId:string,

	/**（可选项）发送回执消息的会话类型*/ 
	chatType?:string,

	/**是否隐藏视频和语音通话按钮*/ 
	callishidden:boolean,

	/**是否隐藏聊天页面中发送视频文件的按钮*/ 
	hideVideo:boolean,

	/**导航条样式配置*/ 
	navigationBar:JSON,

	/**头像样式配置*/ 
	avatar:JSON,

	/**消息样式配置*/ 
	text:JSON,

	/**位置消息样式配置*/ 
	location:JSON,

	/**（可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）*/ 
	callbg?:string,

	/**（可选项）群聊时，各成员头像信息，以username为key，头像图片地址（要求本地路径：widget://、fs://）为value的JSON对象，单聊时忽略本参数*/ 
	avatarInfo?:JSON,

	/**（可选项）各成员昵称信息，以username为key，昵称为value的JSON对象*/ 
	nickname?:JSON,

	/**（可选项）群聊时群组成员username组成的数组，如：['huanxinUser2','huanxinUser3']。单聊时忽略本参数。*/ 
	userList?:Array,

}

interface UIEaseChat_chatList_Params {
	/**导航条样式配置*/ 
	navigationBar:JSON,

	/**（可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）*/ 
	callbg?:string,

	/**头像信息，以username为key，头像图片地址（支持：widget://、fs://）为value的JSON对象*/ 
	avatar:JSON,

	/**（可选项）各联系人昵称信息，以username为key，昵称为value的JSON对象*/ 
	nickname?:JSON,

	/**是否隐藏视频和语音通话按钮*/ 
	callishidden:boolean,

	/**是否隐藏聊天页面中发送视频文件的按钮*/ 
	hideVideo:boolean,

}

interface UIEaseChat_contactsList_Params {
	/**导航条样式配置*/ 
	navigationBar:JSON,

	/**（可选项）音视频通话界面背景，支持rgb、rgba、#、img（要求本地路径，如：widget://、fs://）*/ 
	callbg?:string,

	/**头像信息，以username为key，头像图片地址（要求本地路径：widget://、fs://）为value的JSON对象*/ 
	avatar:JSON,

	/**（可选项）各联系人昵称信息，以username为key，昵称为value的JSON对象*/ 
	nickname?:JSON,

	/**是否隐藏视频和语音通话按钮*/ 
	callishidden:boolean,

	/**是否隐藏聊天页面中发送视频文件的按钮*/ 
	hideVideo:boolean,

}

interface UIEaseChat_configureChat_Params {
	/**配置聊天页面导（优先级低于调用chat接口时配置,都不设置采用默认值）*/ 
	navigationBar:JSON,

	/**app处于后台时，有新消息时是否在通知栏提醒(注:此参数不影响第三方的其他推送)(仅在android端有效)*/ 
	msgNotify:boolean,

	/**(可选项) 有新消息后，是否有声音提醒(仅在android端有效)*/ 
	msgVoice?:boolean,

	/**(可选项) 有新消息后，是否有震动提醒(仅在android端有效)*/ 
	msgVibrate?:boolean,

	/**(可选项) 退出聊天页面后，是否保留输入框输入的内容*/ 
	input?:boolean,

	/**（可选项）会话页面右边第一个按钮相关设置*/ 
	rightButtonInfo?:JSON,

	/**（可选项）会话页面右边消息历史记录按钮设置，本按钮无回掉监听*/ 
	historyButtonInfo?:JSON,

	/**（可选项）音视频通话状态提示文字，不填写此参数将没有提示*/ 
	callHint?:JSON,

	/**（可选项）聊天面板按钮的图片路径，仅支持本地图片（支持widget、fs），不填则默认模块自带图片*/ 
	panelUrls?:JSON,

	/**（可选项）是否隐藏聊天页面面板上位置发送按钮*/ 
	hideLocation?:boolean,

	/**（可选项）是否隐藏聊天页面面板上图片发送按钮*/ 
	hideImage?:boolean,

	/**（可选项）是否隐藏聊天页面面板上拍照按钮*/ 
	hideTaking?:boolean,

	/**（可选项）是否隐藏聊天页面面板上发送文件按钮（仅android支持）*/ 
	hideSendFile?:boolean,

	/**（可选项）自动挂断等待时长*/ 
	hanguptime?:number,

	/**(可选项) 在单聊的语音视频通话中，网络中断后是否自动挂断(ios不支持)*/ 
	netDisConnectedAutoExit?:boolean,

	/**是否隐藏会话页面发送表情功能*/ 
	hideEmoticon:boolean,

	/**会话页面发送消息携带的扩展信息，如：{"em_apns_ext":{"extern":"自定义推送扩展"}};如果无，则不携带扩展信息*/ 
	msgExt:JSON,

}

interface UIEaseChat_setHandsFreeEnable_Params {
	/**(可选项)免提按钮是否可用*/ 
	enable?:boolean,

}

interface UIEaseChat_createGroup_Params {
	/**群组名*/ 
	name:string,

	/**群组描述*/ 
	description:string,

	/**邀请消息*/ 
	message:string,

	/**（可选项）群组容纳的人数，群组的最大成员数(3 - 2000)*/ 
	userCount?:number,

	/**群组成员（不包括创建者自己）*/ 
	invitees:Array,

	/**群组类型*/ 
	style:string,

	/**（可选项）邀请群成员时，是否需要发送邀请通知.若false，被邀请的人自动加入群组*/ 
	IsInviteNeedConfirm?:boolean,

}

interface UIEaseChat_destroyGroup_Params {
	/**群组 id*/ 
	id:string,

}

interface UIEaseChat_getGroupInfo_Params {
	/**群组 id*/ 
	id:string,

	/**群组 id*/ 
	id:string,

}

interface UIEaseChat_addContact_Params {
	/**要添加的用户*/ 
	name:string,

	/**邀请消息*/ 
	message:string,

}

interface UIEaseChat_setAutoAcceptFriendInvitation_Params {
	/**是否自动同意好友申请*/ 
	isAutoAcceptFriendInvitation:boolean,

}

interface UIEaseChat_approveFriendRequest_Params {
	/**申请者*/ 
	name:string,

}

interface UIEaseChat_declineFriendRequest_Params {
	/**申请者*/ 
	name:string,

}

interface UIEaseChat_deleteContact_Params {
	/**要删除的好友*/ 
	name:string,

	/**（可选项）是否删除会话（仅ios有效）*/ 
	isDeleteConversation?:boolean,

}

interface UIEaseChat_getContacts_Params {
	/**（可选项）数据源（仅ios有效）*/ 
	original?:string,

}

interface UIEaseChat_addMembersToGroup_Params {
	/**要邀请的用户名列表*/ 
	names:Array,

	/**群组id*/ 
	groupId:string,

	/**（可选项）欢迎信息（仅支持ios）*/ 
	message?:string,

}

interface UIEaseChat_inviteUser_Params {
	/**要邀请的用户名列表*/ 
	names:Array,

	/**群组id*/ 
	groupId:string,

	/**（可选项）欢迎信息*/ 
	message?:string,

}

interface UIEaseChat_removeMembersFromGroup_Params {
	/**要移除的用户名列表(注：android不支持一次删除多个人，即如果数组的长度大于1，只会删除第一个)*/ 
	names:Array,

	/**群组id*/ 
	groupId:string,

}

interface UIEaseChat_changeGroupSubject_Params {
	/**要修改的名称*/ 
	groupName:string,

	/**群组id*/ 
	groupId:string,

}

interface UIEaseChat_leaveGroup_Params {
	/**群组id*/ 
	groupId:string,

}

interface UIEaseChat_joinPublicGroup_Params {
	/**群组id*/ 
	groupId:string,

}

interface UIEaseChat_requestToJoinPublicGroup_Params {
	/**群组id*/ 
	groupId:string,

	/**(可选项)请求加入的信息*/ 
	aMessage?:string,

}

interface UIEaseChat_approveJoinGroupRequest_Params {
	/**所申请的群组ID*/ 
	groupId:string,

	/**申请人*/ 
	username:string,

}

interface UIEaseChat_declineJoinGroupRequest_Params {
	/**被拒绝的群组ID*/ 
	groupId:string,

	/**申请人*/ 
	username:string,

	/**拒绝理由*/ 
	reason:string,

}

interface UIEaseChat_acceptInvitationFromGroup_Params {
	/**接受的群组ID*/ 
	groupId:string,

	/**邀请者*/ 
	username:string,

}

interface UIEaseChat_muteMembers_Params {
	/**要禁言的成员列表*/ 
	muteMembers:Array,

	/**禁言时长，单位秒(android注意：目前muteMilliseconds参数不起作用，暂时只支持永久禁言和解除禁言两种操作, muteMilliseconds建议输入12*30*24*60*60)*/ 
	muteMilliseconds:number,

	/**群组ID*/ 
	groupId:any,

}

interface UIEaseChat_unmuteMembers_Params {
	/**要解除禁言的成员列表*/ 
	muteMembers:Array,

	/**群组ID*/ 
	groupId:any,

}

interface UIEaseChat_getConversation_Params {
	/**（可选项）会话的id，若创建时可不传此参数*/ 
	conversationId?:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**（可选项） 如果会话不存在是否创建会话*/ 
	ifCreate?:boolean,

}

interface UIEaseChat_deleteConversation_Params {
	/**要删除的会话的id*/ 
	conversationId:string,

	/**（可选项） 是否删除会话中的消息*/ 
	isDeleteMessages?:boolean,

}

interface UIEaseChat_deleteConversations_Params {
	/**要删除的会话的id 组成的数组*/ 
	conversationIds:Array,

	/**（可选项） 是否删除会话中的消息*/ 
	isDeleteMessages?:boolean,

}

interface UIEaseChat_loadMessageWithId_Params {
	/**要获取信息的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**指定的消息的 ID*/ 
	messageId:string,

}

interface UIEaseChat_lastReceivedMessage_Params {
	/**要获取信息的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

}

interface UIEaseChat_sendText_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**发送的消息*/ 
	text:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息，自定义推送扩展，如：{"em_apns_ext":{"extern":"自定义推送扩展"}}*/ 
	ext:JSON,

}

interface UIEaseChat_sendImage_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的图片的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

	/**附件显示名（不包含路径）（仅支持ios）*/ 
	displayName:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface UIEaseChat_sendLocation_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的地址*/ 
	address:string,

	/**纬度*/ 
	latitude:number,

	/**经度*/ 
	longitude:number,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface UIEaseChat_sendVoice_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的音频的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

	/**附件显示名（不包含路径）*/ 
	displayName:string,

	/**录音时间(秒)*/ 
	length:number,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface UIEaseChat_sendVideo_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的视频的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

	/**附件显示名（不包含路径）*/ 
	displayName:string,

	/**视频时间长度(秒)*/ 
	length:number,

	/**视频预览图路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	thumbPath:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface UIEaseChat_sendFile_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的文件的路径，要求本地路径（fs://、widget://）(android只支持fs)*/ 
	path:string,

	/**附件显示名（不包含路径）*/ 
	displayName:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface UIEaseChat_sendCmd_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要发送的命令*/ 
	action:string,

	/**（可选项）发送方*/ 
	from?:string,

	/**接收方*/ 
	to:string,

	/**扩展信息*/ 
	ext:JSON,

}

interface UIEaseChat_downloadMessageThumbnail_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）要发送消息的会话类型*/ 
	chatType?:string,

	/**要下载的信息的 id*/ 
	messageId:string,

}

interface UIEaseChat_downloadMessageAttachments_Params {
	/**要发送消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）发送消息的会话类型*/ 
	chatType?:string,

	/**要下载的信息的 id*/ 
	messageId:string,

}

interface UIEaseChat_sendMessageReadAck_Params {
	/**要发送回执消息的会话的 id*/ 
	conversationId:string,

	/**（可选项）发送回执消息的会话类型*/ 
	chatType?:string,

	/**要发送回执的信息的 id*/ 
	messageId:string,

}

interface UIEaseChat_addMessageListener_Params {
	/**要监听的消息相关事件名称*/ 
	name:string,

}

interface UIEaseChat_removeMessageListener_Params {
	/**要移除的消息相关事件名称*/ 
	name:string,

}

interface UIEaseChat_loadMessageFromDB_Params {
	/**（必选项）会话的id，若创建时可不传此参数*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**(可选项）消息id，如果不写此项，从数据库中读取最新的记录*/ 
	startMsgId?:string,

	/**(可选项) 获取startMsgId之前的消息数*/ 
	pagesize?:number,

}

interface UIEaseChat_markMessageAsRead_Params {
	/**要设置的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**要设置为已读的信息的 id*/ 
	messageId:string,

}

interface UIEaseChat_markAllMessagesAsRead_Params {
	/**要设置的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

}

interface UIEaseChat_fetchHistoryMessagesFromServer_Params {
	/**（必选项）会话的id，若创建时可不传此参数*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**参考起始消息的ID*/ 
	startMsgId:string,

	/**(可选项) 获取startMsgId之前的消息数*/ 
	pagesize?:number,

}

interface UIEaseChat_recallMessage_Params {
	/**要设置的会话的 id*/ 
	conversationId:string,

	/**（可选项）会话类型*/ 
	type?:string,

	/**要撤回消息的 id*/ 
	messageId:string,

}

interface UIEaseChat_joinChatroom_Params {
	/**聊天室id*/ 
	conversationId:string,

}

interface UIEaseChat_leaveChatroom_Params {
	/**聊天室id*/ 
	conversationId:string,

}

interface UIEaseChat_destroyChatroom_Params {
	/**聊天室id*/ 
	conversationId:string,

}

interface UIEaseChat_setLocalNotification_Params {
	/**（可选项）是否开启本地通知*/ 
	enable?:string,

	/**（可选项）本地推送提示语*/ 
	title?:string,

}

interface UIEaseChat_setPushOption_Params {
	/**（可选项）推送消息显示的昵称，不传则不设置*/ 
	displayName?:string,

	/**（可选项）推送消息显示的类型*/ 
	displayStyle?:string,

	/**（可选项）消息推送的免打扰设置*/ 
	noDisturbStatus?:string,

	/**（可选项）消息推送免打扰开始时间，小时，暂时只支持整点（小时），不传则不设置*/ 
	noDisturbingStartH?:number,

	/**（可选项）消息推送免打扰结束时间，小时，暂时只支持整点（小时），不传则不设置*/ 
	noDisturbingEndH?:number,

}

interface UIEaseChat_setApnsNickname_Params {
	/**推送消息显示的昵称*/ 
	nickname:string,

}

interface UIEaseChat_ignoreGroupPush_Params {
	/**群组id*/ 
	groupId:string,

}

interface UIEaseChat_ignoreGroupsPush_Params {
	/**群组id组成的数组*/ 
	groupIds:Array,

}

interface baiXing {
}
interface aliPayPlus {
	/**
	 * `调用支付宝客户端支付`
	 * ========params==========
	 *
	 * `orderInfo` :string : 支付信息（由订单信息，签名，签名类型组成），支付信息生成（此过程可放在服务器端）可参照支付宝官方文档[请求参数说明](https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.x7kkCI&treeId=204&articleId=105465&docType=1)
	 *
	 * `sandbox` :boolean : (可选项) 是否是沙箱环境；沙箱环境是一个测试环境，项目上线时请务必接入正式环境；（ios不支持）具体的接入方法请参照[沙箱接入文档](https://docs.open.alipay.com/200/105311)
	 */
	payOrder(params:aliPayPlus_payOrder_Params, callback?: (ret:JSON) => void):void

	/**
	 * `配置支付宝信息，**适用于支付方案二**`
	 * ========params==========
	 *
	 * `appId` :string : 申请的APP ID
	 *
	 * `rsaPriKey` :string : 商户私钥
	 */
	config(params:aliPayPlus_config_Params, callback?: (ret:JSON) => void):void

	/**
	 * `调用支付宝客户端支付，**适用于支付方案二**`
	 * ========params==========
	 *
	 * `subject` :string : 交易商品名
	 *
	 * `body` :string : 交易商品的简介
	 *
	 * `amount` :string : 交易商品的价钱。单位为元，精确到分如：10.29（元）
	 *
	 * `tradeNO` :boolean : （可选项）是否是rsa2签名方式
	 *
	 * `sandbox` :boolean : (可选项) 是否是沙箱环境；沙箱环境是一个测试环境，项目上线时请务必接入正式环境；（ios不支持）具体的接入方法请参照[沙箱接入文档](https://docs.open.alipay.com/200/105311)
	 */
	pay(params:aliPayPlus_pay_Params, callback?: (ret:JSON) => void):void

	/**
	 * `支付宝授权登录，**参数及其回调详细说明参考 [App支付宝登录授权SDK调用方法](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.GRGqgT&treeId=218&articleId=105325&docType=1)**`
	 * ========params==========
	 *
	 * `authInfoStr` :string : 登录信息字符串，**参数及其签名详细说明参考 [App支付宝登录授权SDK调用方法](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.GRGqgT&treeId=218&articleId=105325&docType=1)**
	 */
	authDirect(params:aliPayPlus_authDirect_Params, callback?: (ret:JSON) => void):void

}
interface aliPayPlus_payOrder_Params {
	/**支付信息（由订单信息，签名，签名类型组成），支付信息生成（此过程可放在服务器端）可参照支付宝官方文档[请求参数说明](https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.x7kkCI&treeId=204&articleId=105465&docType=1)*/ 
	orderInfo:string,

	/**(可选项) 是否是沙箱环境；沙箱环境是一个测试环境，项目上线时请务必接入正式环境；（ios不支持）具体的接入方法请参照[沙箱接入文档](https://docs.open.alipay.com/200/105311)*/ 
	sandbox?:boolean,

}

interface aliPayPlus_config_Params {
	/**申请的APP ID*/ 
	appId:string,

	/**商户私钥*/ 
	rsaPriKey:string,

}

interface aliPayPlus_pay_Params {
	/**交易商品名*/ 
	subject:string,

	/**交易商品的简介*/ 
	body:string,

	/**交易商品的价钱。单位为元，精确到分如：10.29（元）*/ 
	amount:string,

	/**（可选项）是否是rsa2签名方式*/ 
	tradeNO?:boolean,

	/**(可选项) 是否是沙箱环境；沙箱环境是一个测试环境，项目上线时请务必接入正式环境；（ios不支持）具体的接入方法请参照[沙箱接入文档](https://docs.open.alipay.com/200/105311)*/ 
	sandbox?:boolean,

}

interface aliPayPlus_authDirect_Params {
	/**登录信息字符串，**参数及其签名详细说明参考 [App支付宝登录授权SDK调用方法](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.GRGqgT&treeId=218&articleId=105325&docType=1)***/ 
	authInfoStr:string,

}

interface recordVideo {
}
interface tencentSimpleIM {
	/**
	 * `初始化IM`
	 * ========params==========
	 *
	 * `sdkAppID` :string : (必填项)应用ID, 可以在控制台中获取; 腾讯云 IM 服务用于区分客户帐号的唯一标识
	 *
	 * `logLevel` :any : (可选项)日志级别
	 *
	 * `ret` :boolean : 初始化是否成功; true表示操作成功, false表示操作失败
	 */
	init(params:tencentSimpleIM_init_Params):void

	/** 设置SDK监听*/ 
	setSDKListener():void

	/** 移除SDK监听*/ 
	removeSDKListener():void

	/** 销毁模块*/ 
	destroy():void

	/**
	 * `登录`
	 * ========params==========
	 *
	 * `userID` :string : (必填项)用户ID, 建议只包含大小写英文字母、数字、下划线和连词符集中类型的字符，长度最大不超过32字节
	 *
	 * `userSig` :string : (必填项)用户签名, 登录票据，由您的业务服务器进行计算以保证安全[生成UserSig](https://cloud.tencent.com/document/product/269/32688)
	 *
	 * `ret` :boolean : true表示操作成功
	 *
	 * `err` :string : 错误信息
	 */
	login(params:tencentSimpleIM_login_Params):void

	/** 登出*/ 
	logout():void

	/** 获取登录用户*/ 
	getLoginUser():void

	/** 获取登录状态*/ 
	getLoginStatus():void

	/** 除基本消息(文本消息和自定义消息)的事件监听器*/ 
	removeSimpleMsgListener():void

	/**
	 * `发送群聊自定义(信令)消息(最大支持 8KB)`
	 * ========params==========
	 *
	 * `customMsg` :string : (必填项)要发送的自定义消息
	 *
	 * `groupID` :string : (必填项)指定目标群组的 groupID，该群中的所有用户均能收到消息
	 *
	 * `priority` :any : (可选项)设置消息的优先级，我们没有办法所有消息都能 100% 送达每一个用户，但高优先级的消息会有更高的送达成功率
	 *
	 * `ret` :boolean : 表示操作成功
	 *
	 * `err` :JSON : null
	 */
	sendGroupCustomMessage(params:tencentSimpleIM_sendGroupCustomMessage_Params):void

	/** 设置群组监听器*/ 
	setGroupListener():void

	/** 移除群组监听器*/ 
	removeGroupListener():void

	/**
	 * `加入群组`
	 * ========params==========
	 *
	 * `groupID` :string : (必填项)要加入的群组ID
	 *
	 * `message` :string : (必填项)加入群的信息
	 *
	 * `ret` :boolean : 表示操作成功
	 *
	 * `err` :JSON : null
	 */
	joinGroup(params:tencentSimpleIM_joinGroup_Params):void

	/**
	 * `退出群组`
	 * ========params==========
	 *
	 * `groupID` :string : (必填项)要退出的群组ID
	 *
	 * `ret` :boolean : 表示操作成功
	 *
	 * `err` :JSON : null
	 */
	quitGroup(params:tencentSimpleIM_quitGroup_Params):void

	/**
	 * `解散群组`
	 * ========params==========
	 *
	 * `groupID` :string : (必填项)要解散的群组ID
	 *
	 * `ret` :boolean : 表示操作成功
	 *
	 * `err` :JSON : null
	 */
	dismissGroup(params:tencentSimpleIM_dismissGroup_Params):void

	/** 获取用户资料*/ 
	getUsersInfo():void

	/**
	 * `修改个人资料`
	 * ========params==========
	 *
	 * `selfSignature` :string : (可选项)个性签名
	 *
	 * `gender` :any : (可选项)性别
	 *
	 * `allowType` :any : (可选项)设置好友验证方式，只能针对本人设置
	 *
	 * `nickName` :string : (可选项)用户昵称
	 *
	 * `faceUrl` :string : (可选项)用户头像
	 *
	 * `ret` :boolean : 表示操作成功
	 *
	 * `err` :JSON : null
	 */
	setSelfInfo(params:tencentSimpleIM_setSelfInfo_Params):void

}
interface tencentSimpleIM_init_Params {
	/**(必填项)应用ID, 可以在控制台中获取; 腾讯云 IM 服务用于区分客户帐号的唯一标识*/ 
	sdkAppID:string,

	/**(可选项)日志级别*/ 
	logLevel?:any,

	/**初始化是否成功; true表示操作成功, false表示操作失败*/ 
	ret:boolean,

}

interface tencentSimpleIM_login_Params {
	/**(必填项)用户ID, 建议只包含大小写英文字母、数字、下划线和连词符集中类型的字符，长度最大不超过32字节*/ 
	userID:string,

	/**(必填项)用户签名, 登录票据，由您的业务服务器进行计算以保证安全[生成UserSig](https://cloud.tencent.com/document/product/269/32688)*/ 
	userSig:string,

	/**true表示操作成功*/ 
	ret:boolean,

	/**错误信息*/ 
	err:string,

}

interface tencentSimpleIM_sendGroupCustomMessage_Params {
	/**(必填项)要发送的自定义消息*/ 
	customMsg:string,

	/**(必填项)指定目标群组的 groupID，该群中的所有用户均能收到消息*/ 
	groupID:string,

	/**(可选项)设置消息的优先级，我们没有办法所有消息都能 100% 送达每一个用户，但高优先级的消息会有更高的送达成功率*/ 
	priority?:any,

	/**表示操作成功*/ 
	ret:boolean,

	/**null*/ 
	err:JSON,

}

interface tencentSimpleIM_joinGroup_Params {
	/**(必填项)要加入的群组ID*/ 
	groupID:string,

	/**(必填项)加入群的信息*/ 
	message:string,

	/**表示操作成功*/ 
	ret:boolean,

	/**null*/ 
	err:JSON,

}

interface tencentSimpleIM_quitGroup_Params {
	/**(必填项)要退出的群组ID*/ 
	groupID:string,

	/**表示操作成功*/ 
	ret:boolean,

	/**null*/ 
	err:JSON,

}

interface tencentSimpleIM_dismissGroup_Params {
	/**(必填项)要解散的群组ID*/ 
	groupID:string,

	/**表示操作成功*/ 
	ret:boolean,

	/**null*/ 
	err:JSON,

}

interface tencentSimpleIM_setSelfInfo_Params {
	/**(可选项)个性签名*/ 
	selfSignature?:string,

	/**(可选项)性别*/ 
	gender?:any,

	/**(可选项)设置好友验证方式，只能针对本人设置*/ 
	allowType?:any,

	/**(可选项)用户昵称*/ 
	nickName?:string,

	/**(可选项)用户头像*/ 
	faceUrl?:string,

	/**表示操作成功*/ 
	ret:boolean,

	/**null*/ 
	err:JSON,

}

interface ytylive {
	/** 开始视频推流，video_url为推地址url，video_name为推流实例名称，如果使用第三方推流服务，则推流地址跟推流实例名称需要到第三方平台获取，如果自建直播服务器，则使用自建服务器的推流地址跟实例名称。*/ 
	startVideo(callback?: (ret:JSON) => void):void

}
interface aliPayTradePlus {
	/**
	 * `调用支付宝客户端支付`
	 * ========params==========
	 *
	 * `orderInfo` :string : 支付信息（由订单信息，签名，签名类型组成），支付信息生成（此过程可放在服务器端）可参照支付宝官方文档[请求参数说明](http://doc.open.alipay.com/doc2/detail?treeId=59&articleId=103663&docType=1)
	 *
	 * `sandbox` :boolean : (可选项) 是否是沙箱环境；沙箱环境是一个测试环境，项目上线时请务必接入正式环境；（ios不支持）具体的接入方法请参照[沙箱接入文档](https://docs.open.alipay.com/200/105311)
	 */
	payOrder(params:aliPayTradePlus_payOrder_Params, callback?: (ret:JSON) => void):void

	/**
	 * `配置支付宝信息，**适用于支付方案二**`
	 * ========params==========
	 *
	 * `appId` :string : 申请的APP ID
	 *
	 * `rsaPriKey` :string : 商户私钥
	 */
	config(params:aliPayTradePlus_config_Params, callback?: (ret:JSON) => void):void

	/**
	 * `调用支付宝客户端支付，**适用于支付方案二**`
	 * ========params==========
	 *
	 * `subject` :string : 交易商品名
	 *
	 * `body` :string : 交易商品的简介
	 *
	 * `amount` :string : 交易商品的价钱。单位为元，精确到分如：10.29（元）
	 *
	 * `tradeNO` :boolean : （可选项）是否是rsa2签名方式
	 *
	 * `sandbox` :boolean : (可选项) 是否是沙箱环境；沙箱环境是一个测试环境，项目上线时请务必接入正式环境；（ios不支持）具体的接入方法请参照[沙箱接入文档](https://docs.open.alipay.com/200/105311)
	 */
	pay(params:aliPayTradePlus_pay_Params, callback?: (ret:JSON) => void):void

	/**
	 * `支付宝授权登录，**参数及其回调详细说明参考 [App支付宝登录授权SDK调用方法](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.GRGqgT&treeId=218&articleId=105325&docType=1)**`
	 * ========params==========
	 *
	 * `appId` :string : 支付宝分配给开发者的应用ID
	 *
	 * `targetId` :string : 商户标识该次用户授权请求的ID，该值在商户端应保持唯一
	 *
	 * `partner` :string : （可选项）签约的支付宝账号对应的支付宝唯一用户号，以2088开头的16位纯数字组成，若不传则模块从 `key.xml` 文件读取该参数
	 *
	 * `rsaPriKey` :string : （可选项）商户私钥，若不传则模块从 `key.xml` 文件读取该参数
	 *
	 * `authType` :boolean : （可选项）是否是rsa2签名方式
	 */
	auth(params:aliPayTradePlus_auth_Params, callback?: (ret:JSON) => void):void

	/**
	 * `支付宝授权登录 **参数及其回调详细说明参考 [App支付宝登录授权SDK调用方法](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.GRGqgT&treeId=218&articleId=105325&docType=1)**  <b>注意：新版模块中，Android 不支持该方法</b>`
	 * ========params==========
	 *
	 * `authInfoStr` :string : 登录信息字符串，**参数及其签名详细说明参考 [App支付宝登录授权SDK调用方法](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.GRGqgT&treeId=218&articleId=105325&docType=1)**
	 */
	authDirect(params:aliPayTradePlus_authDirect_Params, callback?: (ret:JSON) => void):void

}
interface aliPayTradePlus_payOrder_Params {
	/**支付信息（由订单信息，签名，签名类型组成），支付信息生成（此过程可放在服务器端）可参照支付宝官方文档[请求参数说明](http://doc.open.alipay.com/doc2/detail?treeId=59&articleId=103663&docType=1)*/ 
	orderInfo:string,

	/**(可选项) 是否是沙箱环境；沙箱环境是一个测试环境，项目上线时请务必接入正式环境；（ios不支持）具体的接入方法请参照[沙箱接入文档](https://docs.open.alipay.com/200/105311)*/ 
	sandbox?:boolean,

}

interface aliPayTradePlus_config_Params {
	/**申请的APP ID*/ 
	appId:string,

	/**商户私钥*/ 
	rsaPriKey:string,

}

interface aliPayTradePlus_pay_Params {
	/**交易商品名*/ 
	subject:string,

	/**交易商品的简介*/ 
	body:string,

	/**交易商品的价钱。单位为元，精确到分如：10.29（元）*/ 
	amount:string,

	/**（可选项）是否是rsa2签名方式*/ 
	tradeNO?:boolean,

	/**(可选项) 是否是沙箱环境；沙箱环境是一个测试环境，项目上线时请务必接入正式环境；（ios不支持）具体的接入方法请参照[沙箱接入文档](https://docs.open.alipay.com/200/105311)*/ 
	sandbox?:boolean,

}

interface aliPayTradePlus_auth_Params {
	/**支付宝分配给开发者的应用ID*/ 
	appId:string,

	/**商户标识该次用户授权请求的ID，该值在商户端应保持唯一*/ 
	targetId:string,

	/**（可选项）签约的支付宝账号对应的支付宝唯一用户号，以2088开头的16位纯数字组成，若不传则模块从 `key.xml` 文件读取该参数*/ 
	partner?:string,

	/**（可选项）商户私钥，若不传则模块从 `key.xml` 文件读取该参数*/ 
	rsaPriKey?:string,

	/**（可选项）是否是rsa2签名方式*/ 
	authType?:boolean,

}

interface aliPayTradePlus_authDirect_Params {
	/**登录信息字符串，**参数及其签名详细说明参考 [App支付宝登录授权SDK调用方法](https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.GRGqgT&treeId=218&articleId=105325&docType=1)***/ 
	authInfoStr:string,

}

interface tinyPlayer {
	/** 监听统一接口 取消原来的api.addEventListener*/ 
	addEventListener():void

	/** 指定区域显示播放器,点播，可分集播放*/ 
	showInView():void

	/** 更新索引 播放数据*/ 
	updateAtIndex():void

	/** 更新所有视频数据*/ 
	updateAll():void

	/** 播放下一集，只对fixdPlay接口有效*/ 
	next():void

	/** 播放上一集，只对fixdPlay接口有效*/ 
	prev():void

	/** 播放索引集视频，只对fixdPlay接口有效*/ 
	playIndex():void

	/** 开始播放*/ 
	start():void

	/** 停止播放*/ 
	stop():void

	/** 重新播放*/ 
	replay():void

	/** 视频时长*/ 
	duration():void

	/** 指定位置播放*/ 
	seekTo():void

	/** 播放位置*/ 
	position():void

	/** 截屏*/ 
	screenShot():void

	/** 移除播放器*/ 
	remove():void

	/** 显示播放器*/ 
	showPlay():void

	/** 隐藏播放器*/ 
	hidePlay():void

	/** 是否全屏*/ 
	isFull():void

	/** 设置音量*/ 
	setVolume():void

	/** 设置倍速*/ 
	setSpeed():void

	/** 退出全屏*/ 
	exitFullScreen():void

	/** 进入全屏*/ 
	enterFullScreen():void

	/** 清理缓存*/ 
	clearCache():void

	/** 是否锁屏  fixdPlay fixePlay 有效*/ 
	isLock():void

}
interface facebookLogin {
	/** Facebook登录授权*/ 
	login(callback?: (ret:JSON) => void):void

}
interface youZan {
	/**
	 * `打开商城页面。`
	 * ========params==========
	 *
	 * `url` :string : （必填）商城url地址。
	 *
	 * `userid` :string : （必填）自己系统定义的用户唯一标识。（仅IOS有效）
	 *
	 * `title` :string : （选填）新打开页面的标题。（仅IOS有效）
	 */
	openWin(params:youZan_openWin_Params, callback?: (ret:JSON) => void):void

}
interface youZan_openWin_Params {
	/**（必填）商城url地址。*/ 
	url:string,

	/**（必填）自己系统定义的用户唯一标识。（仅IOS有效）*/ 
	userid:string,

	/**（选填）新打开页面的标题。（仅IOS有效）*/ 
	title:string,

}

interface xinyanFaceCheck {
}
interface customshare {
	/** 分享入口:*/ 
	wxshare():void

}
interface ximalayaT {
	/**
	 * `初始化SDK`
	 * ========params==========
	 *
	 * `appKey` :string : 􏷦􏷽􏺓􏰹􏶙􏶣􏰽􏺔􏷦􏷽􏺓􏰹􏶙􏶣􏰽􏺔开放平台应用公钥
	 *
	 * `appSecret` :string : 开放平台应用私钥
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	init(params:ximalayaT_init_Params):void

	/** 获取喜马拉雅内容分类，如："有声小说"、"相声评书"*/ 
	getCategoriesList():void

	/** 获取专辑标签或者声音标签*/ 
	getTagsList():void

	/**
	 * `根据分类和标签获取某个分类某个标签下的热门专辑列表/最新专辑列表/最多播放专辑列表`
	 * ========params==========
	 *
	 * `categoryId` :number : 分类ID，指定分类，为0时表示热门分类
	 *
	 * `tagName` :string : 分类下对应专辑标签
	 *
	 * `calcDimension` :number : 计算维度，现支持最火􏶓􏷩􏷪􏵽􏻑(1)，最新(2)，经典或播放最多 􏰨􏻦􏵒􏵋􏷽􏵽􏸘(3)
	 *
	 * `page` :number : 返回第几页，必须大于等于1，不填默认为1
	 *
	 * `count` :number : 每页多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getAlbumsList(params:ximalayaT_getAlbumsList_Params):void

	/**
	 * `根据专辑ID获取专辑下的声音列表，即专辑浏览`
	 * ========params==========
	 *
	 * `albumId` :string : (必传项)专辑ID
	 *
	 * `sort` :string : 'asc'表示喜马拉雅正序；'desc'表示喜马拉雅倒序；'time_asc'表示时间升序；'time_desc'表示时间降序
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页有多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getAlbumsBrowse(params:ximalayaT_getAlbumsBrowse_Params):void

	/**
	 * `批量获取专辑列表`
	 * ========params==========
	 *
	 * `ids` :string : (必填项)专辑ID列表，传参时用英文逗号分隔
	 *
	 * `type` :number : 1代表批量获取专辑列表；2代表根据专辑ID列表获取批量专辑更新提醒信息列表；3代表批量获取声音
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getAlbumsBatch(params:ximalayaT_getAlbumsBatch_Params):void

	/**
	 * `根据分类和标签获取某个分类下某个标签的热门声音列表`
	 * ========params==========
	 *
	 * `categoryId` :string : 分类ID，指定分类，为'0'时表示热门分类
	 *
	 * `tagName` :string : 分类下对应声音标签
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页有多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getTracksHot(params:ximalayaT_getTracksHot_Params):void

	/**
	 * `根据上一次所听声音的id，获取从那条声音开始往前一页声音`
	 * ========params==========
	 *
	 * `albumId` :number : (必填项)专辑id
	 *
	 * `trackId` :number : (必填项)声音id
	 *
	 * `count` :number : (可选项)分页请求参数，表示每页多少条记录，
	 *
	 * `sort` :boolean : (可选项)是否输入付费内容(即参数是付费内容时是否需要数据)
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getTrackGetLastPlay(params:ximalayaT_getTrackGetLastPlay_Params):void

	/**
	 * `获取某个分类下的元数据列表`
	 * ========params==========
	 *
	 * `categoryId` :number : 分类ID，指定分类
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getMetadataList(params:ximalayaT_getMetadataList_Params):void

	/**
	 * `获取某个分类的元数据属性键值组合下包含的热门专辑列表/最新专辑列表/最多播放专辑列表`
	 * ========params==========
	 *
	 * `categoryId` :number : (可选项)分类ID，指定分类
	 *
	 * `page` :number : (可选项)返回第几页，必须大于等于1
	 *
	 * `count` :string : (可选项)元数据属性列表，格式：attr_key1:attr_value1;attr_key2:attr_value2;attr_key3:attr_value3   注意：此字段可为空，为空表示获取此分类下全部的最火、最新或者播放最多的专辑列表
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getMetadataAlbums(params:ximalayaT_getMetadataAlbums_Params):void

	/**
	 * `获取直播省份列表`
	 * ========params==========
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getLiveProvince(params:ximalayaT_getLiveProvince_Params):void

	/**
	 * `获取直播电台列表`
	 * ========params==========
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页有多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getLiveRadio(params:ximalayaT_getLiveRadio_Params):void

	/**
	 * `获取某个直播电台某一天的节目排期表`
	 * ========params==========
	 *
	 * `weekday` :number : 表示星期几，不填则取今天的星期；0代表星期天，1代表星期一，2代表星期二，3代表星期三，4代表星期四，5代表星期五，6代表星期六
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getLiveSchedule(params:ximalayaT_getLiveSchedule_Params):void

	/**
	 * `获取当前直播的节目`
	 * ========params==========
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getLiveProgram(params:ximalayaT_getLiveProgram_Params):void

	/**
	 * `获取某个城市下的电台列表`
	 * ========params==========
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页有多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getLiveRadioOfCity(params:ximalayaT_getLiveRadioOfCity_Params):void

	/**
	 * `根据电台ID，批量获取电台列表`
	 * ========params==========
	 *
	 * `ids` :string : 电台ID列表，传参时用英文逗号隔开
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getRadioByID(params:ximalayaT_getRadioByID_Params):void

	/** 获取电台分类*/ 
	getRadioCategory():void

	/**
	 * `根据电台分类获取直播电台数据`
	 * ========params==========
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页有多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getLiveGetRadiosByCategory(params:ximalayaT_getLiveGetRadiosByCategory_Params):void

	/**
	 * `搜索专辑或者搜索声音`
	 * ========params==========
	 *
	 * `type` :number : 搜索类型；1代表搜索专辑，2代表搜索声音
	 *
	 * `q` :number : 分类ID，限定在某个分类下进行搜索，不填或者为0时表示在热门分类下搜索
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 排序条件: 2代表最新 ，3代表最多播放 ，4代表最相关
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getSearchAlbums(params:ximalayaT_getSearchAlbums_Params):void

	/**
	 * `获取最新热搜词`
	 * ========params==========
	 *
	 * `top` :number : 获取前top长度的热搜词 (1<=top<=20:目前top只支持最多20个)
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getSearchHotWords(params:ximalayaT_getSearchHotWords_Params):void

	/**
	 * `获取某个关键词的联想词`
	 * ========params==========
	 *
	 * `kw` :string : 搜索查询词参数
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getSearchSuggestWords(params:ximalayaT_getSearchSuggestWords_Params):void

	/**
	 * `按照关键词搜索直播或搜索全部内容(搜索指定数量的专辑，声音和直播电台)`
	 * ========params==========
	 *
	 * `type` :number : 搜索类型；1代表按照关键词搜索直播，2代表搜索全部内容(搜索指定数量的专辑，声音和直播电台)（仅ios有效，android全部返回）
	 *
	 * `q` :string : 搜索查询词参数
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页有多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getSearchRadios(params:ximalayaT_getSearchRadios_Params):void

	/**
	 * `用于搜索主播`
	 * ========params==========
	 *
	 * `q` :string : 搜索查询词参数
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 排序条件: 4代表最相关，5粉丝最多，6声音最多
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getSearchAnnouncers(params:ximalayaT_getSearchAnnouncers_Params):void

	/**
	 * `获取某个专辑的相关推荐`
	 * ========params==========
	 *
	 * `albumId` :number : 要获得相关推荐的专辑ID
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getAlbumsRelative(params:ximalayaT_getAlbumsRelative_Params):void

	/**
	 * `获取某个声音列表的相关专辑`
	 * ========params==========
	 *
	 * `trackId` :number : 要获得相关推荐的声音id
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getTracksRelativeAlbum(params:ximalayaT_getTracksRelativeAlbum_Params):void

	/**
	 * `获取下载听模块的推荐下载专辑`
	 * ========params==========
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页有多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getAlbumsRecommendDownload(params:ximalayaT_getAlbumsRecommendDownload_Params):void

	/**
	 * `猜你喜欢`
	 * ========params==========
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getAlbumsGuessLike(params:ximalayaT_getAlbumsGuessLike_Params):void

	/**
	 * `获取运营人员在发现页配置的分类维度专辑推荐模块的列表`
	 * ========params==========
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getDiscoveryRecommendAlbums(params:ximalayaT_getDiscoveryRecommendAlbums_Params):void

	/** 获取运营人员为某个分类配置的标签维度专辑推荐模块列表*/ 
	getCategoryRecommendAlbums():void

	/**
	 * `根据榜单类型获取榜单首页的榜单列表`
	 * ========params==========
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getRankList(params:ximalayaT_getRankList_Params):void

	/**
	 * `根据rank_list_id获取某个榜单下的专辑列表`
	 * ========params==========
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getRankAlbum(params:ximalayaT_getRankAlbum_Params):void

	/**
	 * `根据rank_key获取某个榜单下的声音列表`
	 * ========params==========
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getRankTrack(params:ximalayaT_getRankTrack_Params):void

	/**
	 * `获取直播电台排行榜`
	 * ========params==========
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getRankRadio(params:ximalayaT_getRankRadio_Params):void

	/**
	 * `获取精品听单列表`
	 * ========params==========
	 *
	 * `page` :number : 返回第几页，必须大于等于1
	 *
	 * `count` :number : 每页多少条，最多不超过200
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getColumnList(params:ximalayaT_getColumnList_Params):void

	/**
	 * `获取某个听单详情，每个听单包含听单简介信息和专辑或声音的列表`
	 * ========params==========
	 *
	 * `id` :number : (必填项)听单ID
	 *
	 * `ret` :JSON : null
	 *
	 * `err` :JSON : null
	 */
	getColumnDetail(params:ximalayaT_getColumnDetail_Params):void

}
interface ximalayaT_init_Params {
	/**􏷦􏷽􏺓􏰹􏶙􏶣􏰽􏺔􏷦􏷽􏺓􏰹􏶙􏶣􏰽􏺔开放平台应用公钥*/ 
	appKey:string,

	/**开放平台应用私钥*/ 
	appSecret:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getAlbumsList_Params {
	/**分类ID，指定分类，为0时表示热门分类*/ 
	categoryId:number,

	/**分类下对应专辑标签*/ 
	tagName:string,

	/**计算维度，现支持最火􏶓􏷩􏷪􏵽􏻑(1)，最新(2)，经典或播放最多 􏰨􏻦􏵒􏵋􏷽􏵽􏸘(3)*/ 
	calcDimension:number,

	/**返回第几页，必须大于等于1，不填默认为1*/ 
	page:number,

	/**每页多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getAlbumsBrowse_Params {
	/**(必传项)专辑ID*/ 
	albumId:string,

	/**'asc'表示喜马拉雅正序；'desc'表示喜马拉雅倒序；'time_asc'表示时间升序；'time_desc'表示时间降序*/ 
	sort:string,

	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页有多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getAlbumsBatch_Params {
	/**(必填项)专辑ID列表，传参时用英文逗号分隔*/ 
	ids:string,

	/**1代表批量获取专辑列表；2代表根据专辑ID列表获取批量专辑更新提醒信息列表；3代表批量获取声音*/ 
	type:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getTracksHot_Params {
	/**分类ID，指定分类，为'0'时表示热门分类*/ 
	categoryId:string,

	/**分类下对应声音标签*/ 
	tagName:string,

	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页有多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getTrackGetLastPlay_Params {
	/**(必填项)专辑id*/ 
	albumId:number,

	/**(必填项)声音id*/ 
	trackId:number,

	/**(可选项)分页请求参数，表示每页多少条记录，*/ 
	count?:number,

	/**(可选项)是否输入付费内容(即参数是付费内容时是否需要数据)*/ 
	sort?:boolean,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getMetadataList_Params {
	/**分类ID，指定分类*/ 
	categoryId:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getMetadataAlbums_Params {
	/**(可选项)分类ID，指定分类*/ 
	categoryId?:number,

	/**(可选项)返回第几页，必须大于等于1*/ 
	page?:number,

	/**(可选项)元数据属性列表，格式：attr_key1:attr_value1;attr_key2:attr_value2;attr_key3:attr_value3   注意：此字段可为空，为空表示获取此分类下全部的最火、最新或者播放最多的专辑列表*/ 
	count?:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getLiveProvince_Params {
	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getLiveRadio_Params {
	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页有多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getLiveSchedule_Params {
	/**表示星期几，不填则取今天的星期；0代表星期天，1代表星期一，2代表星期二，3代表星期三，4代表星期四，5代表星期五，6代表星期六*/ 
	weekday:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getLiveProgram_Params {
	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getLiveRadioOfCity_Params {
	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页有多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getRadioByID_Params {
	/**电台ID列表，传参时用英文逗号隔开*/ 
	ids:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getLiveGetRadiosByCategory_Params {
	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页有多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getSearchAlbums_Params {
	/**搜索类型；1代表搜索专辑，2代表搜索声音*/ 
	type:number,

	/**分类ID，限定在某个分类下进行搜索，不填或者为0时表示在热门分类下搜索*/ 
	q:number,

	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**排序条件: 2代表最新 ，3代表最多播放 ，4代表最相关*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getSearchHotWords_Params {
	/**获取前top长度的热搜词 (1<=top<=20:目前top只支持最多20个)*/ 
	top:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getSearchSuggestWords_Params {
	/**搜索查询词参数*/ 
	kw:string,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getSearchRadios_Params {
	/**搜索类型；1代表按照关键词搜索直播，2代表搜索全部内容(搜索指定数量的专辑，声音和直播电台)（仅ios有效，android全部返回）*/ 
	type:number,

	/**搜索查询词参数*/ 
	q:string,

	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页有多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getSearchAnnouncers_Params {
	/**搜索查询词参数*/ 
	q:string,

	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**排序条件: 4代表最相关，5粉丝最多，6声音最多*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getAlbumsRelative_Params {
	/**要获得相关推荐的专辑ID*/ 
	albumId:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getTracksRelativeAlbum_Params {
	/**要获得相关推荐的声音id*/ 
	trackId:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getAlbumsRecommendDownload_Params {
	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页有多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getAlbumsGuessLike_Params {
	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getDiscoveryRecommendAlbums_Params {
	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getRankList_Params {
	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getRankAlbum_Params {
	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getRankTrack_Params {
	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getRankRadio_Params {
	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getColumnList_Params {
	/**返回第几页，必须大于等于1*/ 
	page:number,

	/**每页多少条，最多不超过200*/ 
	count:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface ximalayaT_getColumnDetail_Params {
	/**(必填项)听单ID*/ 
	id:number,

	/**null*/ 
	ret:JSON,

	/**null*/ 
	err:JSON,

}

interface txBugly {
	/**
	 * `设置关键数据，随崩溃信息上报`
	 * ========params==========
	 *
	 * `key` :string : 关键数据的key
	 *
	 * `value` :string : 关键数据的value
	 */
	setUserValue(params:txBugly_setUserValue_Params):void

	/** 获取关键数据*/ 
	allUserValues():void

	/**
	 * `设置标签`
	 * ========params==========
	 *
	 * `tag` :number : 标签
	 */
	setTag(params:txBugly_setTag_Params):void

	/** 获取当前设置标签*/ 
	currentTag():void

	/**
	 * `上报自定义异常`
	 * ========params==========
	 *
	 * `name` :any : （仅ios支持）异常名字
	 *
	 * `reason` :any : 异常原因
	 *
	 * `userInfo` :any : （可选项）（仅ios支持）异常信息
	 */
	reportException(params:txBugly_reportException_Params):void

	/**
	 * `上报错误（仅ios支持）`
	 * ========params==========
	 *
	 * `domain` :any : 错误域
	 *
	 * `code` :number : 错误码
	 *
	 * `userInfo` :any : （可选项）异常信息
	 */
	reportError(params:txBugly_reportError_Params):void

	/** 获取 SDK 版本信息*/ 
	sdkVersion():void

	/** 获取设备ID（仅ios支持）*/ 
	deviceId():void

}
interface txBugly_setUserValue_Params {
	/**关键数据的key*/ 
	key:string,

	/**关键数据的value*/ 
	value:string,

}

interface txBugly_setTag_Params {
	/**标签*/ 
	tag:number,

}

interface txBugly_reportException_Params {
	/**（仅ios支持）异常名字*/ 
	name:any,

	/**异常原因*/ 
	reason:any,

	/**（可选项）（仅ios支持）异常信息*/ 
	userInfo?:any,

}

interface txBugly_reportError_Params {
	/**错误域*/ 
	domain:any,

	/**错误码*/ 
	code:number,

	/**（可选项）异常信息*/ 
	userInfo?:any,

}

interface douyin {
	/** 打开抖音授权页面*/ 
	auth():void

	/** 分享图片  (传入图片要求:宽高都大于360;高宽比需满足区间 1/2.2-2.2;分享内容带水印可能会受到限制或被删除，请勿携带水印)*/ 
	shareImg():void

	/** 分享视频 (传入视频要求:1、时长要求在3s以上;2、格式要求mp4文件，且文件支持解析;3、画幅会根据机型白名单判断是否支持更高分辨率的，非白名单最短边不大于1100px，机型白名单以内是4096*2160;4、多图/多视频数量不能超过12)*/ 
	shareVideo():void

}
interface JMLink {
	/** 针对指定jmlink key注册路由回调，与页面绑定。当下发的jmlink key与此处指定的jmlinkKey匹配时，将触发此处JMLinkCallback回调。开发者可以在回调中触发实际页面的跳转*/ 
	openWithKey():void

	/** 无码邀请跳转，获取参数*/ 
	openWithMLinkParam():void

	/** 注册默认路由回调，与页面绑定。当下发的jmlink key没有任何页面匹配时，将触发此处回调。*/ 
	openWithDefaultHandler():void

	/** 反注册默认路由，执行该方法会删除已注册的默认路由。（仅android支持）*/ 
	unregisterDefault(callback?: (ret:JSON) => void):void

	/** 反注册默认路由，执行该方法会删除已注册的默认路由。（仅android支持）*/ 
	unregister(callback?: (ret:JSON) => void):void

	/** 检查是否是从应用宝跳转拉起的应用。（仅android支持）*/ 
	checkYYB(callback?: (ret:JSON) => void):void

}
interface ccVideo {
	/** sdk初始化*/ 
	init():void

	/** 打开一个直播。注：这个方法一定要在init返回之后调用*/ 
	playGS():void

	/** 关闭直播或者点播*/ 
	close():void

	/** 设置视频区域和文档区域的显示与隐藏*/ 
	changeVisible():void

	/**
	 * `发送聊天消息。`
	 * ========params==========
	 *
	 * `content` :string : 聊天消息纯文本。
	 */
	sendMsg(params:ccVideo_sendMsg_Params):void

	/** 文档区域全屏显示*/ 
	fullscreen():void

	/** 文档区域取消全屏*/ 
	cancelFullscreen():void

	/**
	 * `设置文档或者摄像头区域的位置及大小`
	 * ========params==========
	 *
	 * `type` :string : 要设置的区域，video为摄像头区域，doc文档区域。
	 *
	 * `rect` :JSON : （可选项）文档或摄像头区域的位置及尺寸
	 */
	setRect(params:ccVideo_setRect_Params):void

	/** 文档和摄像头区域互换位置大小,仅当playGS（）中switchFlag==true时有效*/ 
	switchDV():void

}
interface ccVideo_sendMsg_Params {
	/**聊天消息纯文本。*/ 
	content:string,

}

interface ccVideo_setRect_Params {
	/**要设置的区域，video为摄像头区域，doc文档区域。*/ 
	type:string,

	/**（可选项）文档或摄像头区域的位置及尺寸*/ 
	rect?:JSON,

}

interface magicWindow {
	/** - 类型：JSON 对象*/ 
	registerApp():void

	/**  获得最近一次的mLink短链接的渠道来源*/ 
	getLastChannelForMLink(callback?: (ret:JSON) => void):void

	/** 注册一个的mLink handler，当接收到URL，并且所有的mLink key都没有匹配成功，就会调用默认的mLink handler*/ 
	registerMLinkHandler(callback?: (ret:JSON) => void):void

	/**  A跳B，B判断是否需要返回A*/ 
	callbackEnable(callback?: (ret:JSON) => void):void

	/** A跳B，B返回A的时候，调用此方法。*/ 
	returnOriginAppWithParams(callback?: (ret:JSON) => void):void

}
interface leChange {
	/** SDK的demo体验界面*/ 
	demo():void

	/** 初始化SDK。（申请帐号并注册应用可获得appId、appSecret）*/ 
	init(callback?: (ret:JSON) => void):void

	/**
	 * `用户登录。`
	 * ========params==========
	 *
	 * `phoneNumber` :string : （必填）注册的手机号码。
	 */
	userlogin(params:leChange_userlogin_Params, callback?: (ret:JSON) => void):void

	/**
	 * `发送手机验证码。`
	 * ========params==========
	 *
	 * `phoneNumber` :string : （必填）需要注册的手机号码。
	 */
	getUserSms(params:leChange_getUserSms_Params, callback?: (ret:JSON) => void):void

	/**
	 * `检查验证码。`
	 * ========params==========
	 *
	 * `phoneNumber` :string : （必填）需要注册的手机号码。
	 *
	 * `smsCode` :string : （必填）验证码。
	 */
	checkSms(params:leChange_checkSms_Params, callback?: (ret:JSON) => void):void

	/** 获取当前手机连的wifi的ssid。（下一步smartConfig需要用到这个参数）*/ 
	getSSID():void

	/**
	 * `smartConfig配网，把你家的wifi密码告诉给设备使用。`
	 * ========params==========
	 *
	 * `sn` :string : （必填）设备的sn序列码。
	 *
	 * `ssid` :string : （必填）路由器的ssid。
	 *
	 * `pwd` :string : （必填）路由器的wifi密码。
	 */
	smartConfig(params:leChange_smartConfig_Params, callback?: (ret:JSON) => void):void

	/** 停止配网。*/ 
	stopConfig():void

	/** 检查设备是否上线。*/ 
	checkOnline():void

	/**
	 * `搜索设备。`
	 * ========params==========
	 *
	 * `sn` :string : （必填）设备的sn序列码。
	 */
	searchDevice(params:leChange_searchDevice_Params, callback?: (ret:JSON) => void):void

	/**
	 * `初始化设备。`
	 * ========params==========
	 *
	 * `sn` :string : （必填）设备的sn序列码。
	 *
	 * `key` :string : （必填）安全码key不能为空,产品说明书上有安全码。
	 */
	initDevice(params:leChange_initDevice_Params, callback?: (ret:JSON) => void):void

	/**
	 * `绑定设备。`
	 * ========params==========
	 *
	 * `sn` :string : （必填）设备的sn序列码。
	 *
	 * `key` :string : （必填）安全码key不能为空,产品说明书上有安全码。
	 */
	bindDevice(params:leChange_bindDevice_Params, callback?: (ret:JSON) => void):void

	/**
	 * `解除设备绑定。`
	 * ========params==========
	 *
	 * `sn` :string : （必填）设备的sn序列码。
	 */
	unBindDevice(params:leChange_unBindDevice_Params, callback?: (ret:JSON) => void):void

	/** 获取设备列表。*/ 
	getChannelList():void

	/**
	 * `打开监控视频。`
	 * ========params==========
	 *
	 * `uuid` :string : （必填）设备的uuid，getChannelList方法可以获取uuid。
	 *
	 * `rect` :JSON : （选填）模块的位置及尺寸。
	 *
	 * `fixedOn` :string : （选填）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （选填）模块是否随所属 window 或 frame 滚动
	 *
	 * `reverse` :boolean : （选填）感觉默认sdk控制摄像向转动的方向不符合app的操作习惯，所以我加了这个参数，如果为true,就是反转方向。
	 */
	open(params:leChange_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭回收资源。*/ 
	close():void

	/** 开启声音。*/ 
	playAudio():void

	/** 关闭声音。*/ 
	stopAudio():void

}
interface leChange_userlogin_Params {
	/**（必填）注册的手机号码。*/ 
	phoneNumber:string,

}

interface leChange_getUserSms_Params {
	/**（必填）需要注册的手机号码。*/ 
	phoneNumber:string,

}

interface leChange_checkSms_Params {
	/**（必填）需要注册的手机号码。*/ 
	phoneNumber:string,

	/**（必填）验证码。*/ 
	smsCode:string,

}

interface leChange_smartConfig_Params {
	/**（必填）设备的sn序列码。*/ 
	sn:string,

	/**（必填）路由器的ssid。*/ 
	ssid:string,

	/**（必填）路由器的wifi密码。*/ 
	pwd:string,

}

interface leChange_searchDevice_Params {
	/**（必填）设备的sn序列码。*/ 
	sn:string,

}

interface leChange_initDevice_Params {
	/**（必填）设备的sn序列码。*/ 
	sn:string,

	/**（必填）安全码key不能为空,产品说明书上有安全码。*/ 
	key:string,

}

interface leChange_bindDevice_Params {
	/**（必填）设备的sn序列码。*/ 
	sn:string,

	/**（必填）安全码key不能为空,产品说明书上有安全码。*/ 
	key:string,

}

interface leChange_unBindDevice_Params {
	/**（必填）设备的sn序列码。*/ 
	sn:string,

}

interface leChange_open_Params {
	/**（必填）设备的uuid，getChannelList方法可以获取uuid。*/ 
	uuid:string,

	/**（选填）模块的位置及尺寸。*/ 
	rect:JSON,

	/**（选填）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn:string,

	/**（选填）模块是否随所属 window 或 frame 滚动*/ 
	fixed:boolean,

	/**（选填）感觉默认sdk控制摄像向转动的方向不符合app的操作习惯，所以我加了这个参数，如果为true,就是反转方向。*/ 
	reverse:boolean,

}

interface daniuPlayer {
	/** 播放器监听*/ 
	addPlayerListener():void

	/**
	 * `打开播放器`
	 * ========params==========
	 *
	 * `rect` :JSON : （可选项）浏览器窗口的位置和大小，设置margin后，在不同手机上面会保持与父页面的各方向边距一致，而中间区域会自动扩充。建议使用margin布局，可以完美适配带smartBar的手机。
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `playBuffer` :number : （可选项）设置播放端缓存数据 buffer，如不需 buffer， 设置为 0 。
	 *
	 * `isLowLatency` :boolean : （可选项）针对类似于直播娃娃机等期待超低 延迟的使用场景，超低延迟播放模式下，延迟可达到 200~400ms;
	 *
	 * `isFastStartup` :boolean : （可选项）设置 快速启动后，如果 CDN 缓存 GOP，daniulive player 可快速出帧;
	 *
	 * `isMute` :boolean : （可选项）设置播放过程中，实时静音/取消静音;
	 *
	 * `isHardwareDecoder` :boolean : （可选项）设置是否用硬解码播放，硬解码/软解码;
	 *
	 * `url` :string : （必填项）支持 rtmp、rtsp地址类型(类型控制请开发者自行判断，模块不做地址限制判断逻辑);
	 *
	 * `timeout` :boolean : （可选项）设置RTSP超时时间, timeout单位为秒，必须大于0;
	 *
	 * `isAutoSwitchTcpUdp` :boolean : （可选项）设置是否RTSP TCP/UDP自动切换;
	 */
	openPlayer(params:daniuPlayer_openPlayer_Params, callback?: (ret:JSON) => void):void

	/** 隐藏播放器*/ 
	hidePlayer(callback?: (ret:JSON) => void):void

	/** 显示播放器*/ 
	showPlayer():void

	/** 关闭播放器*/ 
	closePlayer(callback?: (ret:JSON) => void):void

	/**
	 * `切换播放器视频地址`
	 * ========params==========
	 *
	 * `url` :string : （必填项）支持 rtmp、rtsp地址类型(类型控制请开发者自行判断，模块不做地址限制判断逻辑);
	 */
	switchUrl(params:daniuPlayer_switchUrl_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置是否静音`
	 * ========params==========
	 *
	 * `isMute` :boolean : （可选项）设置播放过程中，实时静音/取消静音;
	 */
	switchMute(params:daniuPlayer_switchMute_Params, callback?: (ret:JSON) => void):void

	/** 保存快照*/ 
	saveImage(callback?: (ret:JSON) => void):void

	/**
	 * `开始录像`
	 * ========params==========
	 *
	 * `fileMaxSize` :number : （可选项）设置每个录像文件最大 size， 以兆(M)为单位，范围(5M~500M);
	 */
	startRecorder(params:daniuPlayer_startRecorder_Params, callback?: (ret:JSON) => void):void

	/** 停止录像*/ 
	stopRecorder(callback?: (ret:JSON) => void):void

}
interface daniuPlayer_openPlayer_Params {
	/**（可选项）浏览器窗口的位置和大小，设置margin后，在不同手机上面会保持与父页面的各方向边距一致，而中间区域会自动扩充。建议使用margin布局，可以完美适配带smartBar的手机。*/ 
	rect?:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（可选项）设置播放端缓存数据 buffer，如不需 buffer， 设置为 0 。*/ 
	playBuffer?:number,

	/**（可选项）针对类似于直播娃娃机等期待超低 延迟的使用场景，超低延迟播放模式下，延迟可达到 200~400ms;*/ 
	isLowLatency?:boolean,

	/**（可选项）设置 快速启动后，如果 CDN 缓存 GOP，daniulive player 可快速出帧;*/ 
	isFastStartup?:boolean,

	/**（可选项）设置播放过程中，实时静音/取消静音;*/ 
	isMute?:boolean,

	/**（可选项）设置是否用硬解码播放，硬解码/软解码;*/ 
	isHardwareDecoder?:boolean,

	/**（必填项）支持 rtmp、rtsp地址类型(类型控制请开发者自行判断，模块不做地址限制判断逻辑);*/ 
	url:string,

	/**（可选项）设置RTSP超时时间, timeout单位为秒，必须大于0;*/ 
	timeout?:boolean,

	/**（可选项）设置是否RTSP TCP/UDP自动切换;*/ 
	isAutoSwitchTcpUdp?:boolean,

}

interface daniuPlayer_switchUrl_Params {
	/**（必填项）支持 rtmp、rtsp地址类型(类型控制请开发者自行判断，模块不做地址限制判断逻辑);*/ 
	url:string,

}

interface daniuPlayer_switchMute_Params {
	/**（可选项）设置播放过程中，实时静音/取消静音;*/ 
	isMute?:boolean,

}

interface daniuPlayer_startRecorder_Params {
	/**（可选项）设置每个录像文件最大 size， 以兆(M)为单位，范围(5M~500M);*/ 
	fileMaxSize?:number,

}

interface hkIvms {
	/**
	 * `打开摄像头rtsp地址`
	 * ========params==========
	 *
	 * `rect` :JSON : （必填项）模块的位置及尺寸
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `url` :string : （必填项）仅支持rtsp地址(请开发者自行控制).
	 */
	openPlayer(params:hkIvms_openPlayer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭摄像头预览。`
	 * ========params==========
	 *
	 * `index` :number : （必填项）预览视频序号
	 */
	closePlayer(params:hkIvms_closePlayer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `清除打开的所有摄像头预览`
	 * ========params==========
	 *
	 * `index` :number : （必填项）预览视频序号
	 */
	cleanPlayer(params:hkIvms_cleanPlayer_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开启摄像头声音`
	 * ========params==========
	 *
	 * `index` :number : （必填项）预览视频序号
	 */
	openAudio(params:hkIvms_openAudio_Params, callback?: (ret:JSON) => void):void

	/**
	 * `关闭摄像头声音`
	 * ========params==========
	 *
	 * `index` :number : （必填项）预览视频序号
	 */
	closeAudio(params:hkIvms_closeAudio_Params, callback?: (ret:JSON) => void):void

}
interface hkIvms_openPlayer_Params {
	/**（必填项）模块的位置及尺寸*/ 
	rect:JSON,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）仅支持rtsp地址(请开发者自行控制).*/ 
	url:string,

}

interface hkIvms_closePlayer_Params {
	/**（必填项）预览视频序号*/ 
	index:number,

}

interface hkIvms_cleanPlayer_Params {
	/**（必填项）预览视频序号*/ 
	index:number,

}

interface hkIvms_openAudio_Params {
	/**（必填项）预览视频序号*/ 
	index:number,

}

interface hkIvms_closeAudio_Params {
	/**（必填项）预览视频序号*/ 
	index:number,

}

interface faceID {
	/** SDK网络授权*/ 
	auth(callback?: (ret:JSON) => void):void

	/** 活体检测成功后获取图片*/ 
	getImagePath():void

}
interface tpns {
	/**
	 * `调用此接口上报当前 App 角标数到腾讯移动推送服务器，客户端配置完成即可使用“ 角标自动加1”的功能，此功能在管理台位置（创建推送 > 通知栏消息 > 常用设置 > 角标数字）。`
	 * ========params==========
	 *
	 * `badge` :number : （可选项）角标数
	 */
	setBadge(params:tpns_setBadge_Params):void

	/**
	 * `设置 App 显示的角标数量。`
	 * ========params==========
	 *
	 * `badge` :number : （可选项）角标数
	 */
	setApplicationBadgeNumber(params:tpns_setApplicationBadgeNumber_Params):void

	/** 获取 App 显示的角标数量。*/ 
	getApplicationBadgeNumber():void

	/** 获取 token。*/ 
	getToken():void

	/**
	 * `绑定标签和账号。`
	 * ========params==========
	 *
	 * `type` :number : （可选项）绑定类型，设备token绑定的类型，绑定指定类型之后，就可以在TPNS前端按照指定的类型进行指定范围的推送
	 *
	 * `identifiers` :Array : 指定绑定标识，标签字符串不允许有空格或者是tab字符，对于账号操作，需要使用字典数组且key是固定要求
	 */
	bindWithIdentifiers(params:tpns_bindWithIdentifiers_Params):void

	/**
	 * `解绑标签和账号。`
	 * ========params==========
	 *
	 * `type` :number : （可选项）绑定类型，设备token绑定的类型，绑定指定类型之后，就可以在TPNS前端按照指定的类型进行指定范围的推送
	 *
	 * `identifiers` :Array : 指定绑定标识，标签字符串不允许有空格或者是tab字符，对于账号操作，需要使用字典数组且key是固定要求
	 */
	unbindWithIdentifers(params:tpns_unbindWithIdentifers_Params):void

	/**
	 * `覆盖原有的标识（标签/账号），若之前没有绑定标识，则会执行新增标识。`
	 * ========params==========
	 *
	 * `type` :number : （可选项）绑定类型，设备token绑定的类型，绑定指定类型之后，就可以在TPNS前端按照指定的类型进行指定范围的推送
	 *
	 * `identifiers` :Array : 指定绑定标识，标签字符串不允许有空格或者是tab字符，对于账号操作，需要使用字典数组且key是固定要求
	 */
	updateBindedIdentifiers(params:tpns_updateBindedIdentifiers_Params):void

	/**
	 * `清除全部标签/账号。`
	 * ========params==========
	 *
	 * `type` :number : （可选项）绑定类型，设备token绑定的类型，绑定指定类型之后，就可以在TPNS前端按照指定的类型进行指定范围的推送
	 */
	clearAllIdentifiers(params:tpns_clearAllIdentifiers_Params):void

	/** 查询设备通知权限是否被用户允许。*/ 
	deviceNotificationIsAllowed():void

	/** 监听推送事件*/ 
	addEventlistener():void

}
interface tpns_setBadge_Params {
	/**（可选项）角标数*/ 
	badge?:number,

}

interface tpns_setApplicationBadgeNumber_Params {
	/**（可选项）角标数*/ 
	badge?:number,

}

interface tpns_bindWithIdentifiers_Params {
	/**（可选项）绑定类型，设备token绑定的类型，绑定指定类型之后，就可以在TPNS前端按照指定的类型进行指定范围的推送*/ 
	type?:number,

	/**指定绑定标识，标签字符串不允许有空格或者是tab字符，对于账号操作，需要使用字典数组且key是固定要求*/ 
	identifiers:Array,

}

interface tpns_unbindWithIdentifers_Params {
	/**（可选项）绑定类型，设备token绑定的类型，绑定指定类型之后，就可以在TPNS前端按照指定的类型进行指定范围的推送*/ 
	type?:number,

	/**指定绑定标识，标签字符串不允许有空格或者是tab字符，对于账号操作，需要使用字典数组且key是固定要求*/ 
	identifiers:Array,

}

interface tpns_updateBindedIdentifiers_Params {
	/**（可选项）绑定类型，设备token绑定的类型，绑定指定类型之后，就可以在TPNS前端按照指定的类型进行指定范围的推送*/ 
	type?:number,

	/**指定绑定标识，标签字符串不允许有空格或者是tab字符，对于账号操作，需要使用字典数组且key是固定要求*/ 
	identifiers:Array,

}

interface tpns_clearAllIdentifiers_Params {
	/**（可选项）绑定类型，设备token绑定的类型，绑定指定类型之后，就可以在TPNS前端按照指定的类型进行指定范围的推送*/ 
	type?:number,

}

interface aliYunRtVoice {
	/** 添加监听*/ 
	addEventListener():void

	/**
	 * `移除已添加的监听`
	 * ========params==========
	 *
	 * `name` :string : 监听的事件的名字
	 */
	removeEventListener(params:aliYunRtVoice_removeEventListener_Params):void

	/** 配置语音识别的参数*/ 
	recognizeConfig():void

	/** 打开语音识别引擎*/ 
	recognizeStart():void

	/** 关闭语音识别引擎*/ 
	recognizeStop():void

	/** 返回当前引擎是否已启动*/ 
	recognizeIsStarted():void

	/** 取消此次语音识别*/ 
	recognizeCancel():void

	/** 清除录音文件缓存，由于实时语音识别的sdk，不支持获取录音数据，也就不能存储文件，所以此方法只支持ios*/ 
	clearCache():void

}
interface aliYunRtVoice_removeEventListener_Params {
	/**监听的事件的名字*/ 
	name:string,

}

interface aliPushNoUtdId {
	/** 获取是否注册阿里移动推送成功*/ 
	isRegister(callback?: (ret:JSON) => void):void

	/** app启动时，进行启动信息统计*/ 
	onAppStart(callback?: (ret:JSON) => void):void

	/**
	 * `客户端自定义标签`
	 * ========params==========
	 *
	 * `target` :number : （可选项）目标类型，1：本设备； 2：本设备绑定账号； 3：别名。
	 *
	 * `tag` :string : （可选项）标签名，支持多个标签，用空格隔开。
	 *
	 * `alias` :string : （可选项）别名（仅当target = 3时生效）。
	 */
	addTag(params:aliPushNoUtdId_addTag_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移除客户端自定义标签`
	 * ========params==========
	 *
	 * `target` :number : （可选项）移除目标类型，1：本设备； 2：本设备绑定账号； 3：别名。
	 *
	 * `tag` :string : （可选项）移除标签名，支持多个标签，用空格隔开。
	 *
	 * `alias` :string : （可选项）移除别名（仅当target = 3时生效）。
	 */
	removeTag(params:aliPushNoUtdId_removeTag_Params, callback?: (ret:JSON) => void):void

	/** 查询目标绑定标签，当前仅支持查询设备标签；*/ 
	listTags(callback?: (ret:JSON) => void):void

	/**
	 * `添加别名`
	 * ========params==========
	 *
	 * `alias` :string : （必填项）别名。
	 */
	addAlias(params:aliPushNoUtdId_addAlias_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除设备别名；`
	 * ========params==========
	 *
	 * `alias` :string : （可选项）移除别名（为空则删除全部别名）。
	 */
	removeAlias(params:aliPushNoUtdId_removeAlias_Params, callback?: (ret:JSON) => void):void

	/** 查询设备别名*/ 
	listAliases(callback?: (ret:JSON) => void):void

	/**
	 * `将本设备和指定账号做绑定`
	 * ========params==========
	 *
	 * `account` :string : （必填项）账号名称。
	 */
	bindAccount(params:aliPushNoUtdId_bindAccount_Params, callback?: (ret:JSON) => void):void

	/** 解绑和指定账号的本设备的绑定*/ 
	unbindAccount(callback?: (ret:JSON) => void):void

	/**
	 * `设置免打扰时间段`
	 * ========params==========
	 *
	 * `startHour` :number : （可选项）免打扰的起始时间（小时），24小时制，取值范围：0-23。
	 *
	 * `startMinute` :number : （可选项）免打扰起始时间（分钟），取值范围：0-59。
	 *
	 * `endHour` :number : （可选项）免打扰的结束时间（小时），24小时制，取值范围：0-23。
	 *
	 * `endMinute` :number : （可选项）免打扰结束时间（分钟），取值范围：0-59。
	 */
	setDoNotDisturb(params:aliPushNoUtdId_setDoNotDisturb_Params, callback?: (ret:JSON) => void):void

	/** 拦截通知，接收消息，获取推送中的扩展字段*/ 
	addEventListener(callback?: (ret:JSON) => void):void

	/** 获取设备DeviceId*/ 
	getDeviceId(callback?: (ret:JSON) => void):void

	/**
	 * `绑定电话号码（多个设备可以绑定同一电话，一个设备只能绑定一个号码，多次绑定不同号码，以最后一次绑定号码为准。）`
	 * ========params==========
	 *
	 * `phoneNumber` :string : （必填项）电话号码。
	 */
	bindPhoneNumber(params:aliPushNoUtdId_bindPhoneNumber_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置推送通知声音文件路径（若不调用本接口，默认获取资源id为R.raw.alicloud_notification_sound的资源文件；若没有获取到指定声音文件，取设备设置的消息声音）`
	 * ========params==========
	 *
	 * `filePath` :string : （必填项）通知声音文件路径。(支持fs://路径)。
	 */
	setNotificationSoundFilePath(params:aliPushNoUtdId_setNotificationSoundFilePath_Params, callback?: (ret:JSON) => void):void

	/** 关闭免打扰功能(关闭后，先前设置的免打扰时段失效)*/ 
	closeDoNotDisturbMode():void

	/** 删除推送SDK创建的所有通知*/ 
	clearNotifications():void

	/** 删除推送SDK创建的所有通知*/ 
	clearNotifications():void

}
interface aliPushNoUtdId_addTag_Params {
	/**（可选项）目标类型，1：本设备； 2：本设备绑定账号； 3：别名。*/ 
	target?:number,

	/**（可选项）标签名，支持多个标签，用空格隔开。*/ 
	tag?:string,

	/**（可选项）别名（仅当target = 3时生效）。*/ 
	alias?:string,

}

interface aliPushNoUtdId_removeTag_Params {
	/**（可选项）移除目标类型，1：本设备； 2：本设备绑定账号； 3：别名。*/ 
	target?:number,

	/**（可选项）移除标签名，支持多个标签，用空格隔开。*/ 
	tag?:string,

	/**（可选项）移除别名（仅当target = 3时生效）。*/ 
	alias?:string,

}

interface aliPushNoUtdId_addAlias_Params {
	/**（必填项）别名。*/ 
	alias:string,

}

interface aliPushNoUtdId_removeAlias_Params {
	/**（可选项）移除别名（为空则删除全部别名）。*/ 
	alias?:string,

}

interface aliPushNoUtdId_bindAccount_Params {
	/**（必填项）账号名称。*/ 
	account:string,

}

interface aliPushNoUtdId_setDoNotDisturb_Params {
	/**（可选项）免打扰的起始时间（小时），24小时制，取值范围：0-23。*/ 
	startHour?:number,

	/**（可选项）免打扰起始时间（分钟），取值范围：0-59。*/ 
	startMinute?:number,

	/**（可选项）免打扰的结束时间（小时），24小时制，取值范围：0-23。*/ 
	endHour?:number,

	/**（可选项）免打扰结束时间（分钟），取值范围：0-59。*/ 
	endMinute?:number,

}

interface aliPushNoUtdId_bindPhoneNumber_Params {
	/**（必填项）电话号码。*/ 
	phoneNumber:string,

}

interface aliPushNoUtdId_setNotificationSoundFilePath_Params {
	/**（必填项）通知声音文件路径。(支持fs://路径)。*/ 
	filePath:string,

}

interface leCloudPlay {
	/**
	 * `标准直播播放`
	 * ========params==========
	 *
	 * `pageType` :string : （必输项）播放器当前挂载的页面类型,openWin:'Window',openFrame:'Frame';(备注：在win和frame上面进行全屏控制实现不一样，win要流畅很多，frame全屏时会卡，请注意。);(该参数仅安卓有效)
	 *
	 * `x` :number : （必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；
	 *
	 * `y` :number : （必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0
	 *
	 * `w` :number : （可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度
	 *
	 * `h` :number : （可选项）模块的高度；默认：所属的 Window 或 Frame 的高度
	 *
	 * `ActivityId` :string : （必填项）标准直播活动id，在乐视标准直播后台管理中获取。
	 *
	 * `hasSkin` :boolean : （可选项）是否开启皮肤模式
	 *
	 * `hasTopView` :boolean : （可选项）是否显示顶部菜单(该参数仅在 hasSkin:true 有效)
	 *
	 * `hasBackBtn` :boolean : （可选项）是否开启全屏模式下的返回按钮(该参数仅在 hasSkin:true 和 hasTopView:true 有效)
	 *
	 * `hasStartBtn` :boolean : （可选项）是否显示开始和暂停按钮(仅安卓有效)
	 *
	 * `isSensor` :boolean : （可选项）是否开启重力感应 （仅UI界面下有效）
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	playLeCloudActivity(params:leCloudPlay_playLeCloudActivity_Params, callback?: (ret:JSON) => void):void

	/**
	 * `标准点播播放`
	 * ========params==========
	 *
	 * `pageType` :string : （必输项）播放器当前挂载的页面类型,openWin:'Window',openFrame:'Frame';(备注：在win和frame上面进行全屏控制实现不一样，frame模式下全屏切换进度不能保持，会从头开始播放，请注意。);(该参数仅安卓有效)
	 *
	 * `x` :number : （必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；
	 *
	 * `y` :number : （必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0
	 *
	 * `w` :number : （可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度
	 *
	 * `h` :number : （可选项）模块的高度；默认：所属的 Window 或 Frame 的高度
	 *
	 * `uuid` :string : （必填项）用户的uuid，请在乐视标后台用户私钥中获取。(该参数可以在config.xml中配置，此处接口设置可省略)
	 *
	 * `vuid` :string : （必填项）标准点播的vuid，请在乐视标准点播的后台中获取。
	 *
	 * `puid` :string : （必填项）播放器的puid，请在乐视播放器配置界面中获取。
	 *
	 * `hasSkin` :boolean : （可选项）是否开启皮肤模式
	 *
	 * `hasTopView` :boolean : （可选项）是否显示顶部菜单(该参数仅在 hasSkin:true 有效)
	 *
	 * `hasBackBtn` :boolean : （可选项）是否开启全屏模式下的返回按钮(该参数仅在 hasSkin:true 和 hasTopView:true 有效)
	 *
	 * `hasStartBtn` :boolean : （可选项）是否显示开始和暂停按钮(仅安卓有效)
	 *
	 * `autoPlay` :boolean : （可选项）视频加载成功后是否自动播放
	 *
	 * `isSensor` :boolean : （可选项）是否开启重力感应 （仅UI界面下有效）
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	playLeCloudVod(params:leCloudPlay_playLeCloudVod_Params, callback?: (ret:JSON) => void):void

	/**
	 * `移动直播播放`
	 * ========params==========
	 *
	 * `pageType` :string : （必输项）播放器当前挂载的页面类型,openWin:'Window',openFrame:'Frame';(备注：在win和frame上面进行全屏控制实现不一样，当播放的url不是直播流，在frame模式下全屏切换进度不能保持，会从头开始播放，请注意。);(该参数仅安卓有效)
	 *
	 * `x` :number : （必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；
	 *
	 * `y` :number : （必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0
	 *
	 * `w` :number : （可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度
	 *
	 * `h` :number : （可选项）模块的高度；默认：所属的 Window 或 Frame 的高度
	 *
	 * `uuid` :string : （必填项）用户的uuid，请在乐视标后台用户私钥中获取。(该参数可以在config.xml中配置，此处接口设置可省略)
	 *
	 * `playUrl` :string : （必填项）直播播放地址,rtmp://格式 (备注：仅支持乐视直播地址，参考在模块leCloudLive中获取播放的地址)。
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （可选项）模块是否随所属 Window 或 Frame 滚动
	 */
	playUrl(params:leCloudPlay_playUrl_Params, callback?: (ret:JSON) => void):void

	/** 开始播放*/ 
	start(callback?: (ret:JSON) => void):void

	/** 暂停播放*/ 
	pause(callback?: (ret:JSON) => void):void

	/** 暂停直播*/ 
	stop():void

	/** 播放器相关监听*/ 
	addEventListener(callback?: (ret:JSON) => void):void

	/**
	 * `上传视频文件到乐视平台(支持断点续传)`
	 * ========params==========
	 *
	 * `uuid` :string : （必填项）用户的uuid，请在乐视标后台用户私钥中获取。(该参数可以在config.xml中配置，此处接口设置可省略)
	 *
	 * `secretKey` :string : （必填项）用户私钥，请在乐视标后台用户私钥中获取。(该参数可以在config.xml中配置，此处接口设置可省略)
	 *
	 * `token` :string : （非必填）断点续传的token，在第一次上传接口中返回。
	 *
	 * `uploadFile` :string : （必填项）上传视频的文件地址：iOS支持 widget:// fs://、安卓支持 fs://或者直接传转换后的文件物理路径。
	 */
	uploader(params:leCloudPlay_uploader_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开启或者关闭重力感应`
	 * ========params==========
	 *
	 * `isSensor` :boolean : （可选项）是否开启重力感应 （仅UI界面下有效）
	 */
	setSensor(params:leCloudPlay_setSensor_Params):void

}
interface leCloudPlay_playLeCloudActivity_Params {
	/**（必输项）播放器当前挂载的页面类型,openWin:'Window',openFrame:'Frame';(备注：在win和frame上面进行全屏控制实现不一样，win要流畅很多，frame全屏时会卡，请注意。);(该参数仅安卓有效)*/ 
	pageType:string,

	/**（必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；*/ 
	x:number,

	/**（必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0*/ 
	y:number,

	/**（可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度*/ 
	w?:number,

	/**（可选项）模块的高度；默认：所属的 Window 或 Frame 的高度*/ 
	h?:number,

	/**（必填项）标准直播活动id，在乐视标准直播后台管理中获取。*/ 
	ActivityId:string,

	/**（可选项）是否开启皮肤模式*/ 
	hasSkin?:boolean,

	/**（可选项）是否显示顶部菜单(该参数仅在 hasSkin:true 有效)*/ 
	hasTopView?:boolean,

	/**（可选项）是否开启全屏模式下的返回按钮(该参数仅在 hasSkin:true 和 hasTopView:true 有效)*/ 
	hasBackBtn?:boolean,

	/**（可选项）是否显示开始和暂停按钮(仅安卓有效)*/ 
	hasStartBtn?:boolean,

	/**（可选项）是否开启重力感应 （仅UI界面下有效）*/ 
	isSensor?:boolean,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface leCloudPlay_playLeCloudVod_Params {
	/**（必输项）播放器当前挂载的页面类型,openWin:'Window',openFrame:'Frame';(备注：在win和frame上面进行全屏控制实现不一样，frame模式下全屏切换进度不能保持，会从头开始播放，请注意。);(该参数仅安卓有效)*/ 
	pageType:string,

	/**（必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；*/ 
	x:number,

	/**（必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0*/ 
	y:number,

	/**（可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度*/ 
	w?:number,

	/**（可选项）模块的高度；默认：所属的 Window 或 Frame 的高度*/ 
	h?:number,

	/**（必填项）用户的uuid，请在乐视标后台用户私钥中获取。(该参数可以在config.xml中配置，此处接口设置可省略)*/ 
	uuid:string,

	/**（必填项）标准点播的vuid，请在乐视标准点播的后台中获取。*/ 
	vuid:string,

	/**（必填项）播放器的puid，请在乐视播放器配置界面中获取。*/ 
	puid:string,

	/**（可选项）是否开启皮肤模式*/ 
	hasSkin?:boolean,

	/**（可选项）是否显示顶部菜单(该参数仅在 hasSkin:true 有效)*/ 
	hasTopView?:boolean,

	/**（可选项）是否开启全屏模式下的返回按钮(该参数仅在 hasSkin:true 和 hasTopView:true 有效)*/ 
	hasBackBtn?:boolean,

	/**（可选项）是否显示开始和暂停按钮(仅安卓有效)*/ 
	hasStartBtn?:boolean,

	/**（可选项）视频加载成功后是否自动播放*/ 
	autoPlay?:boolean,

	/**（可选项）是否开启重力感应 （仅UI界面下有效）*/ 
	isSensor?:boolean,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface leCloudPlay_playUrl_Params {
	/**（必输项）播放器当前挂载的页面类型,openWin:'Window',openFrame:'Frame';(备注：在win和frame上面进行全屏控制实现不一样，当播放的url不是直播流，在frame模式下全屏切换进度不能保持，会从头开始播放，请注意。);(该参数仅安卓有效)*/ 
	pageType:string,

	/**（必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；*/ 
	x:number,

	/**（必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0*/ 
	y:number,

	/**（可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度*/ 
	w?:number,

	/**（可选项）模块的高度；默认：所属的 Window 或 Frame 的高度*/ 
	h?:number,

	/**（必填项）用户的uuid，请在乐视标后台用户私钥中获取。(该参数可以在config.xml中配置，此处接口设置可省略)*/ 
	uuid:string,

	/**（必填项）直播播放地址,rtmp://格式 (备注：仅支持乐视直播地址，参考在模块leCloudLive中获取播放的地址)。*/ 
	playUrl:string,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

}

interface leCloudPlay_uploader_Params {
	/**（必填项）用户的uuid，请在乐视标后台用户私钥中获取。(该参数可以在config.xml中配置，此处接口设置可省略)*/ 
	uuid:string,

	/**（必填项）用户私钥，请在乐视标后台用户私钥中获取。(该参数可以在config.xml中配置，此处接口设置可省略)*/ 
	secretKey:string,

	/**（非必填）断点续传的token，在第一次上传接口中返回。*/ 
	token:string,

	/**（必填项）上传视频的文件地址：iOS支持 widget:// fs://、安卓支持 fs://或者直接传转换后的文件物理路径。*/ 
	uploadFile:string,

}

interface leCloudPlay_setSensor_Params {
	/**（可选项）是否开启重力感应 （仅UI界面下有效）*/ 
	isSensor?:boolean,

}

interface cchelperCaiHongIM {
	/**
	 * `启动服务。`
	 * ========params==========
	 *
	 * `appKey` :string : 领通科技CChelper SDK平台为应用生产的appKey，不可以为空
	 *
	 * `workNumber` :string : （可选项）客服工号
	 *
	 * `onlyNumber` :boolean : （可选项）是否仅连接指定客服，false：指定客服无法服务，可以连接其他客服。该参数仅在workNumber有值时有效
	 *
	 * `customData` :any : （可选项）自定义信息
	 *
	 * `userId` :string : （可选项）用户id
	 */
	start(params:cchelperCaiHongIM_start_Params):void

	/** 结束服务。*/ 
	stop():void

}
interface cchelperCaiHongIM_start_Params {
	/**领通科技CChelper SDK平台为应用生产的appKey，不可以为空*/ 
	appKey:string,

	/**（可选项）客服工号*/ 
	workNumber?:string,

	/**（可选项）是否仅连接指定客服，false：指定客服无法服务，可以连接其他客服。该参数仅在workNumber有值时有效*/ 
	onlyNumber?:boolean,

	/**（可选项）自定义信息*/ 
	customData?:any,

	/**（可选项）用户id*/ 
	userId?:string,

}

interface authorize {
	/**
	 * `登录接口（仅iOS支持）`
	 * ========params==========
	 *
	 * `username` :string : 用户名
	 *
	 * `password` :string : 密码
	 *
	 * `mobileDeviceId` :string : 设备ID
	 */
	login(params:authorize_login_Params):void

	/** 添加authNet监听（仅iOS支持）*/ 
	addAuthNetListener():void

	/** EMV 交易（在initAnetEMVTransactionRequest之后调用该接口）（仅iOS支持）*/ 
	emvTransaction():void

	/**
	 * `启动快速卡片交易（仅iOS支持）`
	 * ========params==========
	 *
	 * `emvTransactionType` :number : （可选项）EMV交易类型
	 */
	readQuickChipCard(params:authorize_readQuickChipCard_Params, callback?: (ret:JSON) => void):void

	/**
	 * `开始快速芯片交易（在initAnetEMVTransactionRequest之后调用该接口）（仅iOS支持）`
	 * ========params==========
	 *
	 * `paperReceipt` :boolean : （可选项）是否需要纸质收据
	 */
	startQuickChip(params:authorize_startQuickChip_Params, callback?: (ret:JSON) => void):void

	/**
	 * `带有提示选项的快速筹码交易（在initAnetEMVTransactionRequest之后调用该接口）（仅iOS支持）`
	 * ========params==========
	 *
	 * `tipOptions` :Array : tipOptions
	 */
	startQuickChipWithTipOptions(params:authorize_startQuickChipWithTipOptions_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建客户资料并通过EMV请求启动快速筹码交易（在initAnetEMVTransactionRequest之后调用该接口）（仅iOS支持）`
	 * ========params==========
	 *
	 * `paperReceipt` :boolean : （可选项）是否需要纸质收据
	 *
	 * `isConsentBefore` :boolean : （可选项）iConsentBefore
	 */
	createCustomerProfile(params:authorize_createCustomerProfile_Params, callback?: (ret:JSON) => void):void

	/** Apple Pay（仅iOS支持）*/ 
	applePay():void

	/**
	 * `初始化AcceptSDK（仅android支持）`
	 * ========params==========
	 *
	 * `environment` :number : 环境；1：沙盒环境，2：线上环境
	 *
	 * `timeOut` :number : 连接超时时间，ms
	 */
	initAcceptClient(params:authorize_initAcceptClient_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取令牌（仅android支持）`
	 * ========params==========
	 *
	 * `loginId` :string : 商户id
	 *
	 * `clientKey` :string : 密钥，[密钥获取](https://developer.authorize.net/api/reference/features/in-app.html)请查看相关资料
	 *
	 * `cardNumber` :string : 卡片账号
	 *
	 * `expirationMonth` :string : 截至日期-月
	 *
	 * `expirationYear` :string : 截至日期-年
	 *
	 * `cvv` :string : （可选项）信用卡验证号码
	 */
	getTokenWithRequest(params:authorize_getTokenWithRequest_Params, callback?: (ret:JSON) => void):void

}
interface authorize_login_Params {
	/**用户名*/ 
	username:string,

	/**密码*/ 
	password:string,

	/**设备ID*/ 
	mobileDeviceId:string,

}

interface authorize_readQuickChipCard_Params {
	/**（可选项）EMV交易类型*/ 
	emvTransactionType?:number,

}

interface authorize_startQuickChip_Params {
	/**（可选项）是否需要纸质收据*/ 
	paperReceipt?:boolean,

}

interface authorize_startQuickChipWithTipOptions_Params {
	/**tipOptions*/ 
	tipOptions:Array,

}

interface authorize_createCustomerProfile_Params {
	/**（可选项）是否需要纸质收据*/ 
	paperReceipt?:boolean,

	/**（可选项）iConsentBefore*/ 
	isConsentBefore?:boolean,

}

interface authorize_initAcceptClient_Params {
	/**环境；1：沙盒环境，2：线上环境*/ 
	environment:number,

	/**连接超时时间，ms*/ 
	timeOut:number,

}

interface authorize_getTokenWithRequest_Params {
	/**商户id*/ 
	loginId:string,

	/**密钥，[密钥获取](https://developer.authorize.net/api/reference/features/in-app.html)请查看相关资料*/ 
	clientKey:string,

	/**卡片账号*/ 
	cardNumber:string,

	/**截至日期-月*/ 
	expirationMonth:string,

	/**截至日期-年*/ 
	expirationYear:string,

	/**（可选项）信用卡验证号码*/ 
	cvv?:string,

}

interface SPlayer {
	/**
	 * `打开播放器界面`
	 * ========params==========
	 *
	 * `appID` :string : 申请的 appid，注意在iOS端此参数跟bundle id（包名）是绑定的（仅ios有效）
	 *
	 * `key` :string : 申请的 key（仅ios有效）
	 *
	 * `userName` :string : 用户名
	 *
	 * `password` :string : 密码
	 */
	open(params:SPlayer_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭播放器界面*/ 
	close():void

}
interface SPlayer_open_Params {
	/**申请的 appid，注意在iOS端此参数跟bundle id（包名）是绑定的（仅ios有效）*/ 
	appID:string,

	/**申请的 key（仅ios有效）*/ 
	key:string,

	/**用户名*/ 
	userName:string,

	/**密码*/ 
	password:string,

}

interface itppay {
	/** 调起支付*/ 
	dlPay():void

}
interface citconPay {
	/**
	 * `配置运行环境`
	 * ========params==========
	 *
	 * `token` :string : （可选项）联系 [CITCON](https://www.citcon.com/contact/) 与之签约获得 token。或者访问 [文档中心](https://doc.citconpay.com/citconAPI/#) 申请测试 token。若为空则从 `key.xml` 或 `config.xml` 文件读取，优先读取 `key.xml`。
	 *
	 * `mode` :boolean : (可选项) 运行模式：DEV、UAT、PROD。若为空则从 `key.xml` 或 `config.xml` 文件读取，优先读取 `key.xml`。
	 */
	setEnvironment(params:citconPay_setEnvironment_Params):void

	/**
	 * `支付`
	 * ========params==========
	 *
	 * `referenceId` :string : referenceId
	 *
	 * `currency` :string : 货币代号：USD, CNY
	 *
	 * `vendor` :string : 支付平台：wechatpay、alipay
	 *
	 * `amount` :string : 支付金额
	 *
	 * `subject` :string : 商品主题
	 *
	 * `body` :string : 商品简介
	 *
	 * `ipnUrl` :string : IPN Url
	 *
	 * `callbackUrl` :string : 回调url
	 *
	 * `transactionId` :string : transactionId
	 *
	 * `allowDuplicate` :boolean : （可选项）是否允许重复
	 */
	requestOrder(params:citconPay_requestOrder_Params, callback?: (ret:JSON) => void):void

	/** checkOrder({params}, callback(ret)) **Android 暂不支持该方法***/ 
	checkOrder():void

	/** 支付完成事件监听*/ 
	paymentFinishedLisetner():void

}
interface citconPay_setEnvironment_Params {
	/**（可选项）联系 [CITCON](https://www.citcon.com/contact/) 与之签约获得 token。或者访问 [文档中心](https://doc.citconpay.com/citconAPI/#) 申请测试 token。若为空则从 `key.xml` 或 `config.xml` 文件读取，优先读取 `key.xml`。*/ 
	token?:string,

	/**(可选项) 运行模式：DEV、UAT、PROD。若为空则从 `key.xml` 或 `config.xml` 文件读取，优先读取 `key.xml`。*/ 
	mode?:boolean,

}

interface citconPay_requestOrder_Params {
	/**referenceId*/ 
	referenceId:string,

	/**货币代号：USD, CNY*/ 
	currency:string,

	/**支付平台：wechatpay、alipay*/ 
	vendor:string,

	/**支付金额*/ 
	amount:string,

	/**商品主题*/ 
	subject:string,

	/**商品简介*/ 
	body:string,

	/**IPN Url*/ 
	ipnUrl:string,

	/**回调url*/ 
	callbackUrl:string,

	/**transactionId*/ 
	transactionId:string,

	/**（可选项）是否允许重复*/ 
	allowDuplicate?:boolean,

}

interface playRtsp {
	/**
	 * `初始化设置`
	 * ========params==========
	 *
	 * `doubleClick` :boolean : （可选项）是否双机视频播放界面进行横屏切换。
	 *
	 * `isLocked` :boolean : （可选项）是否锁住屏幕，锁住屏幕后，执行全屏和退出全屏接口会无效。
	 */
	init(params:playRtsp_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `播放rtsp://格式直播流`
	 * ========params==========
	 *
	 * `x` :number : （必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；
	 *
	 * `y` :number : （必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0
	 *
	 * `w` :number : （可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度
	 *
	 * `h` :number : （可选项）模块的高度；默认：所属的 Window 或 Frame 的高度
	 *
	 * `fixedOn` :string : （可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window
	 *
	 * `fixed` :boolean : （（可选项）模块是否随所属 Window 或 Frame 滚动
	 *
	 * `url` :string : （必填项）视频资源地址，仅支持rtsp://
	 *
	 * `options` :Array : （可选项）vlc配置
	 */
	play(params:playRtsp_play_Params, callback?: (ret:JSON) => void):void

	/** 暂停播放*/ 
	pause():void

	/** 暂停后开始播放*/ 
	start():void

	/** 停止播放*/ 
	stop():void

	/** 获取是否全屏播放状态*/ 
	isFullScreen(callback?: (ret:JSON) => void):void

	/** 全屏播放*/ 
	full():void

	/** 退出全屏*/ 
	unfull():void

	/**
	 * `设置音量大小（1、ios设置的是系统音量，请退出播放后，将音量进行恢复操作。2、安卓设置的是视频音量，和安卓系统的本身音量大小有关。）`
	 * ========params==========
	 *
	 * `volume` :number : （必填项）设置音量(0-100)
	 */
	setVolume(params:playRtsp_setVolume_Params):void

	/**
	 * `切换视频播放地址`
	 * ========params==========
	 *
	 * `url` :string : （必填项）视频资源地址，仅支持rtsp://
	 */
	playUrl(params:playRtsp_playUrl_Params, callback?: (ret:JSON) => void):void

	/** 截图*/ 
	saveSnap(callback?: (ret:JSON) => void):void

}
interface playRtsp_init_Params {
	/**（可选项）是否双机视频播放界面进行横屏切换。*/ 
	doubleClick?:boolean,

	/**（可选项）是否锁住屏幕，锁住屏幕后，执行全屏和退出全屏接口会无效。*/ 
	isLocked?:boolean,

}

interface playRtsp_play_Params {
	/**（必填项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）；*/ 
	x:number,

	/**（必填项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）；默认：0*/ 
	y:number,

	/**（可选项）模块的宽度；默认：所属的 Window 或 Frame 的宽度*/ 
	w?:number,

	/**（可选项）模块的高度；默认：所属的 Window 或 Frame 的高度*/ 
	h?:number,

	/**（可选项）模块所属 Frame 的名字，若不传则模块归属于当前 Window*/ 
	fixedOn?:string,

	/**（（可选项）模块是否随所属 Window 或 Frame 滚动*/ 
	fixed?:boolean,

	/**（必填项）视频资源地址，仅支持rtsp://*/ 
	url:string,

	/**（可选项）vlc配置*/ 
	options?:Array,

}

interface playRtsp_setVolume_Params {
	/**（必填项）设置音量(0-100)*/ 
	volume:number,

}

interface playRtsp_playUrl_Params {
	/**（必填项）视频资源地址，仅支持rtsp://*/ 
	url:string,

}

interface qiyuSdk {
}
interface iDCardORC {
	/** 识别身份证正面*/ 
	takePictureIDCardFrontFace():void

	/** 识别身份证发面*/ 
	takePictureIDCardOppositeSide():void

}
interface ipaynow {
}
interface weiboPlus {
	/**
	 * `分享文本内容`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取
	 *
	 * `text` :string : 分享的文本，**长度小于140个汉字**
	 */
	shareText(params:weiboPlus_shareText_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享图片内容`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取
	 *
	 * `text` :string : （可选项）分享的文本，**长度小于140个汉字**
	 *
	 * `imageUrl` :string : 分享的图片路径，要求本地路径（fs://、widget://），**大小不能超过10M**
	 */
	shareImage(params:weiboPlus_shareImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享本地视频资源（需要微博7.8.0 以及以后客户端支持）`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取
	 *
	 * `text` :string : 分享的文本，**长度小于140个汉字**
	 *
	 * `contentUrl` :string : 分享本地视频的本地路径（fs://、widget://）
	 */
	shareVideo(params:weiboPlus_shareVideo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享网页`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取
	 *
	 * `text` :string : （可选项）分享的文本，**长度小于140个汉字**
	 *
	 * `title` :string : 分享网页的标题，**不能为空且长度小于1k**
	 *
	 * `description` :string : （可选项）分享网页的描述，**长度小于1k**
	 *
	 * `thumb` :string : 分享网页的缩略图地址，要求本地路径（fs://、widget://），**大小小于32k**
	 *
	 * `contentUrl` :string : 分享网页的 url 地址，**不能为空且长度不能超过255**
	 */
	shareWebPage(params:weiboPlus_shareWebPage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `授权登录（**用于实现第三方登录**）`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪微博开放平台申请的 App Key，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取，不传或传入错误的 apiKey，则无法打开新浪微博进行登录。
	 *
	 * `registUrl` :string : （可选项）在新浪微博开放平台创建应用时（应用信息 -> 高级信息 -> 授权设置）自定义填写的回调 url，若为空则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取
	 */
	auth(params:weiboPlus_auth_Params, callback?: (ret:JSON) => void):void

	/** 取消授权，退出登录状态*/ 
	cancelAuth(callback?: (ret:JSON) => void):void

	/**
	 * `获取用户账户信息，**调用本接口前，需要先调用  auth 接口授权**`
	 * ========params==========
	 *
	 * `token` :string : （可选项）登录账号获取的token值
	 *
	 * `userId` :string : （可选项）登录账号获取的 userId
	 */
	getUserInfo(params:weiboPlus_getUserInfo_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断是否已安装新浪微博客户端`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪微博开放平台申请的 App Key，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取，不传或传入错误的 apiKey，则无法判断是否已安装新浪微博客户端。
	 */
	isInstalled(params:weiboPlus_isInstalled_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享多图`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取
	 *
	 * `text` :string : （可选项）分享的文本，**长度小于140个汉字**
	 *
	 * `mulitImage` :Array : 图片本地地址集合，只能分享本地图片，支持widget路径、fs路径
	 */
	shareMulitImage(params:weiboPlus_shareMulitImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `分享微博故事`
	 * ========params==========
	 *
	 * `apiKey` :string : （可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取
	 *
	 * `image` :string : 分享图片地址，要求本地路径（fs://、widget://）（与video 二选一，都存在优先image）
	 *
	 * `video` :string : 分享视频的地址，要求本地路径（fs://、widget://）（与image 二选一，都存在优先image）
	 */
	shareStory(params:weiboPlus_shareStory_Params, callback?: (ret:JSON) => void):void

}
interface weiboPlus_shareText_Params {
	/**（可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取*/ 
	apiKey?:string,

	/**分享的文本，**长度小于140个汉字***/ 
	text:string,

}

interface weiboPlus_shareImage_Params {
	/**（可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取*/ 
	apiKey?:string,

	/**（可选项）分享的文本，**长度小于140个汉字***/ 
	text?:string,

	/**分享的图片路径，要求本地路径（fs://、widget://），**大小不能超过10M***/ 
	imageUrl:string,

}

interface weiboPlus_shareVideo_Params {
	/**（可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取*/ 
	apiKey?:string,

	/**分享的文本，**长度小于140个汉字***/ 
	text:string,

	/**分享本地视频的本地路径（fs://、widget://）*/ 
	contentUrl:string,

}

interface weiboPlus_shareWebPage_Params {
	/**（可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取*/ 
	apiKey?:string,

	/**（可选项）分享的文本，**长度小于140个汉字***/ 
	text?:string,

	/**分享网页的标题，**不能为空且长度小于1k***/ 
	title:string,

	/**（可选项）分享网页的描述，**长度小于1k***/ 
	description?:string,

	/**分享网页的缩略图地址，要求本地路径（fs://、widget://），**大小小于32k***/ 
	thumb:string,

	/**分享网页的 url 地址，**不能为空且长度不能超过255***/ 
	contentUrl:string,

}

interface weiboPlus_auth_Params {
	/**（可选项）从新浪微博开放平台申请的 App Key，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取，不传或传入错误的 apiKey，则无法打开新浪微博进行登录。*/ 
	apiKey?:string,

	/**（可选项）在新浪微博开放平台创建应用时（应用信息 -> 高级信息 -> 授权设置）自定义填写的回调 url，若为空则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取*/ 
	registUrl?:string,

}

interface weiboPlus_getUserInfo_Params {
	/**（可选项）登录账号获取的token值*/ 
	token?:string,

	/**（可选项）登录账号获取的 userId*/ 
	userId?:string,

}

interface weiboPlus_isInstalled_Params {
	/**（可选项）从新浪微博开放平台申请的 App Key，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 中读取，不传或传入错误的 apiKey，则无法判断是否已安装新浪微博客户端。*/ 
	apiKey?:string,

}

interface weiboPlus_shareMulitImage_Params {
	/**（可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取*/ 
	apiKey?:string,

	/**（可选项）分享的文本，**长度小于140个汉字***/ 
	text?:string,

	/**图片本地地址集合，只能分享本地图片，支持widget路径、fs路径*/ 
	mulitImage:Array,

}

interface weiboPlus_shareStory_Params {
	/**（可选项）从新浪开放平台申请的 App Key ，若不传则从当前 widget 的 [config.xml](/APICloud/技术专题/app-config-manual) 文件读取*/ 
	apiKey?:string,

	/**分享图片地址，要求本地路径（fs://、widget://）（与video 二选一，都存在优先image）*/ 
	image:string,

	/**分享视频的地址，要求本地路径（fs://、widget://）（与image 二选一，都存在优先image）*/ 
	video:string,

}

interface aliOSS {
	/**
	 * `初始化 调用其它接口之前必须先初始化，支持`明文模式`、`自签名模式`、`STS鉴权模式` ，明文模式鉴权必须设置 accessKeyId 和 accessKeySecret，此方式建议只在本地测试时使用，正式环境请使用自签名模式或 STS 鉴权模式。`
	 * ========params==========
	 *
	 * `accessKeyId` :string : （可选项）从阿里云获取的 accessKeyId
	 *
	 * `accessKeySecret` :string : （可选项）从阿里云获取的 accessKeySecret
	 *
	 * `endpoint` :string : OSS 区域地址，如：`https://oss-cn-beijing.aliyuncs.com`
	 *
	 * `bucketName` :string : Bucket 名称，该参数设置默认操作的 Bucket。如您有多个 Bucket 要操作，使用其它方法时有参数可动态改变 Bucket。
	 *
	 * `params` :any : （可选项）自签名/STS 鉴权模式时向 signUrl/stsUrl 发送（POST 方式）的自定义数据，注：只支持一级 JSON，并且不能包含键为 content 的字段。
	 *
	 * `headers` :any : （可选项）自签名/STS 鉴权模式时向 signUrl/stsUrl 发送（POST 方式）的自定义头信息。
	 *
	 * `timeout` :any : （可选项）连接超时，默认 15 秒
	 *
	 * `socketTimeout` :any : （可选项）传输文件最大允许时间，默认 15 秒
	 *
	 * `concurrent` :any : （可选项）最大并发请求数，默认 5 个
	 *
	 * `retry` :any : （可选项）失败后最大重试次数，默认 2 次
	 *
	 * `signUrl` :string : （可选项）自签名 URL 地址，POST 请求，使用自签名模式时设置。该地址接收名为 content 的参数，按阿里云自签名算法返回加签后的字符串即可。
	 *
	 * `stsUrl` :string : （可选项）STS 鉴权地址，POST 请求，使用 STS 鉴权模式时设置。该地址访问后需返回如下格式的 JSON 字符串（参数名称必须和下面的一致） ：
	 */
	init(params:aliOSS_init_Params, callback?: (ret:JSON) => void):void

	/**
	 * `文件上传`
	 * ========params==========
	 *
	 * `file` :string : 要上传的文件，支持 fs://、cache://等文件路径协议及真实路径。
	 *
	 * `name` :string : 上传 OSS 后保存的文件名
	 *
	 * `bucketName` :string : （可选项）上传至的 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 *
	 * `verify` :string : （可选项）文件完整性检验，目前只支持参数 CRC。
	 */
	upload(params:aliOSS_upload_Params, callback?: (ret:JSON) => void):void

	/**
	 * `断点续传`
	 * ========params==========
	 *
	 * `file` :string : 要上传的文件，支持 fs://、cache://等文件路径协议及真实路径。
	 *
	 * `name` :string : 上传 OSS 后保存的文件名
	 *
	 * `bucketName` :string : （可选项）上传至的 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 *
	 * `verify` :string : （可选项）文件完整性检验，目前只支持参数 CRC。
	 */
	resumableUpload(params:aliOSS_resumableUpload_Params, callback?: (ret:JSON) => void):void

	/**
	 * `下载文件，当下载图片并且传入 process 参数时可以处理图片。`
	 * ========params==========
	 *
	 * `objectKey` :string : 待下载的阿里 OSS 文件名
	 *
	 * `saveAs` :string : 下载到本地保存的文件名，支持 fs://,cache://等文件路径协议及真实路径。
	 *
	 * `process` :string : （可选项）下载图片时对图片进行处理的命令。处理命令参见阿里文档：[图片处理](https://help.aliyun.com/document_detail/44686.html?spm=5176.doc44686.6.933.I5FsuS)
	 *
	 * `bucketName` :string : （可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 *
	 * `verify` :string : （可选项）文件完整性检验，目前只支持参数 CRC。
	 */
	getObject(params:aliOSS_getObject_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取文件元信息`
	 * ========params==========
	 *
	 * `objectKey` :string : 阿里云 OSS 文件名
	 *
	 * `bucketName` :string : （可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 */
	getHead(params:aliOSS_getHead_Params, callback?: (ret:JSON) => void):void

	/**
	 * `判断文件是否存在于 OSS 服务器`
	 * ========params==========
	 *
	 * `objectKey` :string : 阿里云 OSS 文件名
	 *
	 * `bucketName` :string : （可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 */
	exist(params:aliOSS_exist_Params, callback?: (ret:JSON) => void):void

	/**
	 * `删除 OSS 服务器中的文件，要求对 Bucket 有写权限。注：删除时并不会对文件存在与否进行检测，即文件不存在于 OSS 服务器中也会返回成功。`
	 * ========params==========
	 *
	 * `objectKey` :string : 阿里云 OSS 文件名
	 *
	 * `bucketName` :string : （可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 */
	delete(params:aliOSS_delete_Params, callback?: (ret:JSON) => void):void

	/**
	 * `获取 OSS 服务器中的文件列表。`
	 * ========params==========
	 *
	 * `prefix` :string : （可选项）文件名前辍，即以该参数开始的文件才会被返回。设置后可以用于获取某个目录下的文件。注：返回的文件名仍然包含该前辍。
	 *
	 * `maxKeys` :number : （可选项）文件最大数量限制。默认为 100，阿里限制不能超过 1000。
	 *
	 * `marker` :string : （可选项）获取文件列表时的起始偏移位置。该参数的值由第一次使用该方法后返回，通过循环调用该接口并设置此参数，可实现分页。
	 *
	 * `current` :boolean : （可选项）只获取请求路径下的文件及文件夹，文件夹将排在前边，其只含 `key`, `isDir`属性。
	 *
	 * `bucketName` :string : （可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 */
	listObjects(params:aliOSS_listObjects_Params, callback?: (ret:JSON) => void):void

	/**
	 * `复制 OSS 服务器内文件。不能复制超过 1G 的文件，不能在不同数据中心间复制。`
	 * ========params==========
	 *
	 * `bucketName` :string : （可选项）源 Bucket 名称。默认为接口初始化时的 Bucket。
	 *
	 * `objectKey` :string : 源文件。
	 *
	 * `toBucketName` :string : （可选项）目标 Bucket 名称。默认和源 Bucket 相同。
	 *
	 * `toObjectKey` :string : 复制后保存的文件名。
	 */
	copy(params:aliOSS_copy_Params, callback?: (ret:JSON) => void):void

	/** 新建 Bucket，需要相应权限。*/ 
	createBucket():void

	/**
	 * `文档预览，支持 ppt、xls、doc、pdf 等格式文档进行在线预览，具体配置及开通请参考[阿里云智能媒体管理（IMM）](https://help.aliyun.com/document_detail/99384.html)`
	 * ========params==========
	 *
	 * `bucketName` :string : （可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 *
	 * `objectKey` :string : 要预览的文件，需是阿里云支持的文件类型。
	 *
	 * `expired` :any : 链接失效秒数，默认 3600 秒。
	 *
	 * `copy` :any : （可选项）指定预览文件是否能够复制文档内容。
	 */
	previewDoc(params:aliOSS_previewDoc_Params, callback?: (ret:JSON) => void):void

	/**
	 * `人脸识别，具体配置及开通请参考[阿里云智能媒体管理（IMM）](https://help.aliyun.com/document_detail/99384.html)`
	 * ========params==========
	 *
	 * `bucketName` :string : （可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 *
	 * `objectKey` :string : 要识别的文件，需是阿里云支持的图片类型。
	 */
	detectFace(params:aliOSS_detectFace_Params, callback?: (ret:JSON) => void):void

	/**
	 * `图片内容识别、打标，识别图片中的元素，可识别图片中的场景、食物、交通工具等，[具体参考](https://help.aliyun.com/document_detail/64791.html)，具体配置及开通请参考[阿里云智能媒体管理（IMM）](https://help.aliyun.com/document_detail/99384.html)`
	 * ========params==========
	 *
	 * `bucketName` :string : （可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 *
	 * `objectKey` :string : 要处理的文件，需是阿里云支持的图片类型。
	 */
	tagImage(params:aliOSS_tagImage_Params, callback?: (ret:JSON) => void):void

	/**
	 * `授权第三方访问，可授权第三方访问文件。`
	 * ========params==========
	 *
	 * `bucketName` :string : （可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 *
	 * `objectKey` :string : 要授权访问的文件。
	 *
	 * `expired` :any : （可选项）链接失效时间，单位：秒，默认 3600 秒
	 *
	 * `process` :string : （可选项）文件为图片时对图片的处理（如缩放等），具体参数请参考[阿里云文档](https://help.aliyun.com/document_detail/44686.html)。
	 */
	url(params:aliOSS_url_Params, callback?: (ret:JSON) => void):void

	/**
	 * `文件重命名。`
	 * ========params==========
	 *
	 * `bucketName` :string : （可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 *
	 * `name` :string : 原文件名。
	 *
	 * `newName` :string : 新文件名。
	 */
	rename(params:aliOSS_rename_Params, callback?: (ret:JSON) => void):void

	/**
	 * `创建文件夹。`
	 * ========params==========
	 *
	 * `bucketName` :string : （可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。
	 *
	 * `name` :string : 文件夹名称。
	 */
	createFolder(params:aliOSS_createFolder_Params, callback?: (ret:JSON) => void):void

}
interface aliOSS_init_Params {
	/**（可选项）从阿里云获取的 accessKeyId*/ 
	accessKeyId?:string,

	/**（可选项）从阿里云获取的 accessKeySecret*/ 
	accessKeySecret?:string,

	/**OSS 区域地址，如：`https://oss-cn-beijing.aliyuncs.com`*/ 
	endpoint:string,

	/**Bucket 名称，该参数设置默认操作的 Bucket。如您有多个 Bucket 要操作，使用其它方法时有参数可动态改变 Bucket。*/ 
	bucketName:string,

	/**（可选项）自签名/STS 鉴权模式时向 signUrl/stsUrl 发送（POST 方式）的自定义数据，注：只支持一级 JSON，并且不能包含键为 content 的字段。*/ 
	params?:any,

	/**（可选项）自签名/STS 鉴权模式时向 signUrl/stsUrl 发送（POST 方式）的自定义头信息。*/ 
	headers?:any,

	/**（可选项）连接超时，默认 15 秒*/ 
	timeout?:any,

	/**（可选项）传输文件最大允许时间，默认 15 秒*/ 
	socketTimeout?:any,

	/**（可选项）最大并发请求数，默认 5 个*/ 
	concurrent?:any,

	/**（可选项）失败后最大重试次数，默认 2 次*/ 
	retry?:any,

	/**（可选项）自签名 URL 地址，POST 请求，使用自签名模式时设置。该地址接收名为 content 的参数，按阿里云自签名算法返回加签后的字符串即可。*/ 
	signUrl?:string,

	/**（可选项）STS 鉴权地址，POST 请求，使用 STS 鉴权模式时设置。该地址访问后需返回如下格式的 JSON 字符串（参数名称必须和下面的一致） ：*/ 
	stsUrl?:string,

}

interface aliOSS_upload_Params {
	/**要上传的文件，支持 fs://、cache://等文件路径协议及真实路径。*/ 
	file:string,

	/**上传 OSS 后保存的文件名*/ 
	name:string,

	/**（可选项）上传至的 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

	/**（可选项）文件完整性检验，目前只支持参数 CRC。*/ 
	verify?:string,

}

interface aliOSS_resumableUpload_Params {
	/**要上传的文件，支持 fs://、cache://等文件路径协议及真实路径。*/ 
	file:string,

	/**上传 OSS 后保存的文件名*/ 
	name:string,

	/**（可选项）上传至的 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

	/**（可选项）文件完整性检验，目前只支持参数 CRC。*/ 
	verify?:string,

}

interface aliOSS_getObject_Params {
	/**待下载的阿里 OSS 文件名*/ 
	objectKey:string,

	/**下载到本地保存的文件名，支持 fs://,cache://等文件路径协议及真实路径。*/ 
	saveAs:string,

	/**（可选项）下载图片时对图片进行处理的命令。处理命令参见阿里文档：[图片处理](https://help.aliyun.com/document_detail/44686.html?spm=5176.doc44686.6.933.I5FsuS)*/ 
	process?:string,

	/**（可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

	/**（可选项）文件完整性检验，目前只支持参数 CRC。*/ 
	verify?:string,

}

interface aliOSS_getHead_Params {
	/**阿里云 OSS 文件名*/ 
	objectKey:string,

	/**（可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

}

interface aliOSS_exist_Params {
	/**阿里云 OSS 文件名*/ 
	objectKey:string,

	/**（可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

}

interface aliOSS_delete_Params {
	/**阿里云 OSS 文件名*/ 
	objectKey:string,

	/**（可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

}

interface aliOSS_listObjects_Params {
	/**（可选项）文件名前辍，即以该参数开始的文件才会被返回。设置后可以用于获取某个目录下的文件。注：返回的文件名仍然包含该前辍。*/ 
	prefix?:string,

	/**（可选项）文件最大数量限制。默认为 100，阿里限制不能超过 1000。*/ 
	maxKeys?:number,

	/**（可选项）获取文件列表时的起始偏移位置。该参数的值由第一次使用该方法后返回，通过循环调用该接口并设置此参数，可实现分页。*/ 
	marker?:string,

	/**（可选项）只获取请求路径下的文件及文件夹，文件夹将排在前边，其只含 `key`, `isDir`属性。*/ 
	current?:boolean,

	/**（可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

}

interface aliOSS_copy_Params {
	/**（可选项）源 Bucket 名称。默认为接口初始化时的 Bucket。*/ 
	bucketName?:string,

	/**源文件。*/ 
	objectKey:string,

	/**（可选项）目标 Bucket 名称。默认和源 Bucket 相同。*/ 
	toBucketName?:string,

	/**复制后保存的文件名。*/ 
	toObjectKey:string,

}

interface aliOSS_previewDoc_Params {
	/**（可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

	/**要预览的文件，需是阿里云支持的文件类型。*/ 
	objectKey:string,

	/**链接失效秒数，默认 3600 秒。*/ 
	expired:any,

	/**（可选项）指定预览文件是否能够复制文档内容。*/ 
	copy?:any,

}

interface aliOSS_detectFace_Params {
	/**（可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

	/**要识别的文件，需是阿里云支持的图片类型。*/ 
	objectKey:string,

}

interface aliOSS_tagImage_Params {
	/**（可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

	/**要处理的文件，需是阿里云支持的图片类型。*/ 
	objectKey:string,

}

interface aliOSS_url_Params {
	/**（可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

	/**要授权访问的文件。*/ 
	objectKey:string,

	/**（可选项）链接失效时间，单位：秒，默认 3600 秒*/ 
	expired?:any,

	/**（可选项）文件为图片时对图片的处理（如缩放等），具体参数请参考[阿里云文档](https://help.aliyun.com/document_detail/44686.html)。*/ 
	process?:string,

}

interface aliOSS_rename_Params {
	/**（可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

	/**原文件名。*/ 
	name:string,

	/**新文件名。*/ 
	newName:string,

}

interface aliOSS_createFolder_Params {
	/**（可选项）目标 Bucket 名称，如不设置将使用初始化时的默认 Bucket。该参数用于操作多个 Bucket 时，动态改变目标 Bucket。*/ 
	bucketName?:string,

	/**文件夹名称。*/ 
	name:string,

}

interface line {
	/** line 登录授权*/ 
	login(callback?: (ret:JSON) => void):void

	/**
	 * `网页形式登录，本接口仅支持 ios 平台`
	 * ========params==========
	 *
	 * `startWebLoginWithSafari` :boolean : 是否用 app 内置浏览器登录
	 */
	webLogin(params:line_webLogin_Params, callback?: (ret:JSON) => void):void

	/** 应用登出，模块会清空当前 app 内保存的 token 等信息*/ 
	logout(callback?: (ret:JSON) => void):void

	/** 刷新当前 app 内的 token*/ 
	refreshToken():void

	/** 获取当前token*/ 
	getCurrentToken():void

	/** 验证token*/ 
	verifyToken(callback?: (ret:JSON) => void):void

	/** 获取用户信息*/ 
	getProfile(callback?: (ret:JSON) => void):void

	/**
	 * `分享文字接口.`
	 * ========params==========
	 *
	 * `content` :string : （必填）分享的内容。
	 */
	shareText(params:line_shareText_Params):void

	/**
	 * `分享图片接口.`
	 * ========params==========
	 *
	 * `imageUrl` :string : （必填）分享的图片地址。
	 */
	shareImage(params:line_shareImage_Params):void

}
interface line_webLogin_Params {
	/**是否用 app 内置浏览器登录*/ 
	startWebLoginWithSafari:boolean,

}

interface line_shareText_Params {
	/**（必填）分享的内容。*/ 
	content:string,

}

interface line_shareImage_Params {
	/**（必填）分享的图片地址。*/ 
	imageUrl:string,

}

interface meisheVideo {
	/** 打开视频录制页面*/ 
	open():void

	/** 关闭录制页面*/ 
	close():void

	/** 打开视频编辑页面*/ 
	openClipView():void

	/** 关闭编辑视频页面*/ 
	closeClipView():void

	/** 打开视频预览页面*/ 
	openPreviewView():void

	/** 关闭视频预览页面*/ 
	closePreviewView():void

	/** 打开手电筒*/ 
	flashOn():void

	/** 关闭手电筒*/ 
	flashOff():void

	/** 设置背景音乐*/ 
	setMusic():void

	/** 设置背景音乐音量和原声音量*/ 
	setVolumn():void

	/**
	 * `生成视频`
	 * ========params==========
	 *
	 * `savePath` :string : 保存路径(仅支持fs:// 和 Android本地路径)
	 *
	 * `resolution` :number : 分辨率
	 *
	 * `bitrateGrade` :string : 码率级别（码率越高视频越清晰，视频文件也越大）
	 */
	generateVideo(params:meisheVideo_generateVideo_Params, callback?: (ret:JSON) => void):void

	/** 添加监听*/ 
	addEventListener(callback?: (ret:JSON) => void):void

	/**
	 * `视频转换（仅支持iOS）`
	 * ========params==========
	 *
	 * `localIdentifier` :string : 视频文件在相册中的标识符
	 *
	 * `bitrateGrade` :string : （可选项）码率级别（码率越高视频越清晰，视频文件也越大）
	 */
	conversion(params:meisheVideo_conversion_Params, callback?: (ret:JSON) => void):void

}
interface meisheVideo_generateVideo_Params {
	/**保存路径(仅支持fs:// 和 Android本地路径)*/ 
	savePath:string,

	/**分辨率*/ 
	resolution:number,

	/**码率级别（码率越高视频越清晰，视频文件也越大）*/ 
	bitrateGrade:string,

}

interface meisheVideo_conversion_Params {
	/**视频文件在相册中的标识符*/ 
	localIdentifier:string,

	/**（可选项）码率级别（码率越高视频越清晰，视频文件也越大）*/ 
	bitrateGrade?:string,

}

interface mitt {
	/** 初始化*/ 
	initEntry():void

	/** 是否支持*/ 
	isSupported(callback?: (ret:JSON) => void):void

	/** 获取OAID*/ 
	getOAID(callback?: (ret:JSON) => void):void

	/** 获取AAID*/ 
	getAAID(callback?: (ret:JSON) => void):void

	/** 获取VAID*/ 
	getVAID(callback?: (ret:JSON) => void):void

}
interface pinke {
	/** 初始化模块*/ 
	init():void

}
interface UIBdOcr {
	/**
	 * `授权`
	 * ========params==========
	 *
	 * `ak` :string : Api Key，[百度管理后](https://login.bce.baidu.com/?account=&redirect=http%3A%2F%2Fconsole.bce.baidu.com%2Fai%2F#/ai/face/client/index)台获取
	 *
	 * `sk` :string : Secret Key，[百度管理后](https://login.bce.baidu.com/?account=&redirect=http%3A%2F%2Fconsole.bce.baidu.com%2Fai%2F#/ai/face/client/index)台获取
	 */
	auth(params:UIBdOcr_auth_Params):void

	/**
	 * `通用文字识别(不含位置信息版)`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	generalBasicOCR(params:UIBdOcr_generalBasicOCR_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通用文字识别，高精度，不带位置信息`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	generalAccurateBasicOCR(params:UIBdOcr_generalAccurateBasicOCR_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通用文字识别（含位置信息）`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	generalOCR(params:UIBdOcr_generalOCR_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通用文字识别，高精度，带位置信息`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	generalAccurateOCR(params:UIBdOcr_generalAccurateOCR_Params, callback?: (ret:JSON) => void):void

	/**
	 * `通用文字识别（含生僻字版）`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	generalEnchancedOCR(params:UIBdOcr_generalEnchancedOCR_Params, callback?: (ret:JSON) => void):void

	/**
	 * `网图识别`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	webImageOCR(params:UIBdOcr_webImageOCR_Params, callback?: (ret:JSON) => void):void

	/**
	 * `身份证正面拍照识别`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	idcardOCROnlineFront(params:UIBdOcr_idcardOCROnlineFront_Params, callback?: (ret:JSON) => void):void

	/**
	 * `身份证反面拍照识别`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	idcardOCROnlineBack(params:UIBdOcr_idcardOCROnlineBack_Params, callback?: (ret:JSON) => void):void

	/**
	 * `身份证正面(嵌入式质量控制+云端识别)`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	localIdcardOCROnlineFront(params:UIBdOcr_localIdcardOCROnlineFront_Params, callback?: (ret:JSON) => void):void

	/**
	 * `身份证反面(嵌入式质量控制+云端识别)`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	localIdcardOCROnlineBack(params:UIBdOcr_localIdcardOCROnlineBack_Params, callback?: (ret:JSON) => void):void

	/** 银行卡正面拍照识别*/ 
	bankCardOCROnline(callback?: (ret:JSON) => void):void

	/**
	 * `驾驶证识别`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	drivingLicenseOCR(params:UIBdOcr_drivingLicenseOCR_Params, callback?: (ret:JSON) => void):void

	/**
	 * `行驶证证识别`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	vehicleLicenseOCR(params:UIBdOcr_vehicleLicenseOCR_Params, callback?: (ret:JSON) => void):void

	/**
	 * `车牌证识别`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	plateLicenseOCR(params:UIBdOcr_plateLicenseOCR_Params, callback?: (ret:JSON) => void):void

	/**
	 * `营业执照识别`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	businessLicenseOCR(params:UIBdOcr_businessLicenseOCR_Params, callback?: (ret:JSON) => void):void

	/**
	 * `票据识别`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	receiptOCR(params:UIBdOcr_receiptOCR_Params, callback?: (ret:JSON) => void):void

	/**
	 * `自定义模板识别`
	 * ========params==========
	 *
	 * `options` :any : 识别参数，详情见附件：options参数详情
	 */
	iOCR(params:UIBdOcr_iOCR_Params, callback?: (ret:JSON) => void):void

}
interface UIBdOcr_auth_Params {
	/**Api Key，[百度管理后](https://login.bce.baidu.com/?account=&redirect=http%3A%2F%2Fconsole.bce.baidu.com%2Fai%2F#/ai/face/client/index)台获取*/ 
	ak:string,

	/**Secret Key，[百度管理后](https://login.bce.baidu.com/?account=&redirect=http%3A%2F%2Fconsole.bce.baidu.com%2Fai%2F#/ai/face/client/index)台获取*/ 
	sk:string,

}

interface UIBdOcr_generalBasicOCR_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_generalAccurateBasicOCR_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_generalOCR_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_generalAccurateOCR_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_generalEnchancedOCR_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_webImageOCR_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_idcardOCROnlineFront_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_idcardOCROnlineBack_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_localIdcardOCROnlineFront_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_localIdcardOCROnlineBack_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_drivingLicenseOCR_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_vehicleLicenseOCR_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_plateLicenseOCR_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_businessLicenseOCR_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_receiptOCR_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface UIBdOcr_iOCR_Params {
	/**识别参数，详情见附件：options参数详情*/ 
	options:any,

}

interface jdFace {
	/**
	 * `进行交互活体检测`
	 * ========params==========
	 *
	 * `actions` :Array<JSON> : 活体检测动作以及排序，数组内item必须为取值范围内容
	 *
	 * `complexity` :number : 活体检测困难程度（可选）
	 *
	 * `voice` :boolean : 声音提示；true/开启声音提示，false/关闭声音提示（可选）
	 *
	 * `immersion` :boolean : 设置页面沉浸式；true/沉浸式，false/非沉浸式（可选）（仅Android支持）
	 */
	detectActive(params:jdFace_detectActive_Params, callback?: (ret:JSON) => void):void

	/**
	 * `进行静默活体检测`
	 * ========params==========
	 *
	 * `duration` :number : 最短检测时常；建议至少为1s, 0表示无最小时间限制，不得小于0（可选）
	 *
	 * `frames` :number : 最少检测贞数；0表示无最小帧数限制，不得小于0（可选）
	 *
	 * `timeOut` :number : 设置超时时间；等于0时为不超时，大于0时为设置的值，不得小于0（可选）
	 *
	 * `farRate` :any : 人脸高度/宽度占图像短边的比例；参数设置越靠近0，代表人脸距离屏幕越远，如果设置为0，则无过远提示。（可选）
	 *
	 * `closeRate` :any : 人脸高度/宽度占图像短边的比例；参数设置越靠近1，代表人脸距离屏幕越近，如果设置为0，则无过近提示。（可选）
	 *
	 * `immersion` :boolean : 设置页面沉浸式；true/沉浸式，false/非沉浸式（可选）（仅Android支持）
	 */
	detectSilent(params:jdFace_detectSilent_Params, callback?: (ret:JSON) => void):void

	/** 取消交互活体检测*/ 
	cancleActive(callback?: (ret:JSON) => void):void

	/** 取消静默活体检测*/ 
	cancleSilent(callback?: (ret:JSON) => void):void

}
interface jdFace_detectActive_Params {
	/**活体检测动作以及排序，数组内item必须为取值范围内容*/ 
	actions:Array<JSON>,

	/**活体检测困难程度（可选）*/ 
	complexity?:number,

	/**声音提示；true/开启声音提示，false/关闭声音提示（可选）*/ 
	voice?:boolean,

	/**设置页面沉浸式；true/沉浸式，false/非沉浸式（可选）（仅Android支持）*/ 
	immersion?:boolean,

}

interface jdFace_detectSilent_Params {
	/**最短检测时常；建议至少为1s, 0表示无最小时间限制，不得小于0（可选）*/ 
	duration?:number,

	/**最少检测贞数；0表示无最小帧数限制，不得小于0（可选）*/ 
	frames?:number,

	/**设置超时时间；等于0时为不超时，大于0时为设置的值，不得小于0（可选）*/ 
	timeOut?:number,

	/**人脸高度/宽度占图像短边的比例；参数设置越靠近0，代表人脸距离屏幕越远，如果设置为0，则无过远提示。（可选）*/ 
	farRate?:any,

	/**人脸高度/宽度占图像短边的比例；参数设置越靠近1，代表人脸距离屏幕越近，如果设置为0，则无过近提示。（可选）*/ 
	closeRate?:any,

	/**设置页面沉浸式；true/沉浸式，false/非沉浸式（可选）（仅Android支持）*/ 
	immersion?:boolean,

}

interface tulingapi {
}
interface talkFun {
	/** 获取房间信息*/ 
	getRoomInfo():void

	/** 获取直播状态*/ 
	getInitLiveStatus():void

	/** 直播事件监听*/ 
	setLiveListener():void

	/** 初始化播放器和白板*/ 
	init():void

	/** 重置frame*/ 
	resetView():void

	/** 视频播放器窗口和白板窗口互换*/ 
	bringToFront():void

	/** 关闭直播或点播播放器*/ 
	close():void

	/** 播放器状态监听事件*/ 
	setOnVideoChangeListener():void

	/** 播放器状态监听事件*/ 
	setOnUserEventListener():void

	/** 发送聊天*/ 
	chatSend():void

	/** 聊天事件监听*/ 
	setOnChatEventListener():void

	/** 数据接收接口*/ 
	setHtDispatchChatMessageListener():void

	/** 提问*/ 
	questionAsk():void

	/** 回答提问*/ 
	questionReply():void

	/** 接收问答*/ 
	setHtDispatchQuestionListener():void

	/** 发送投票*/ 
	sendVote():void

	/** 投票监听*/ 
	setHtVoteListener():void

	/** 抽奖监听*/ 
	setHtLotteryListener():void

	/** 送花*/ 
	sendFlower():void

	/** 花朵事件监听*/ 
	setHtDispatchFlowerListener():void

	/** 发布公告事件监听*/ 
	setHtDispatchNoticeListener():void

	/** 发布广播公告事件监听*/ 
	setHtBroadcastListener():void

	/** 获取未收到的广播数据*/ 
	getBroadcastsUnreceived():void

	/** 获取全部的广播数据*/ 
	getAllBroadcasts():void

	/** 发送评分*/ 
	sendScore():void

	/** rtc状态监听*/ 
	setRtcStatusListener():void

	/** 直播时长监听*/ 
	setLiveDurationListener():void

	/** 设置画笔颜色*/ 
	setPaintColor():void

	/** 设置画笔粗细*/ 
	setStrokeWidth():void

	/** 文字大小*/ 
	setTextSize():void

	/** 涂鸦类型*/ 
	setDrawType():void

	/** 撤销*/ 
	undoDrawable():void

	/** 还原*/ 
	redoDrawable():void

	/** 涂鸦权限监听*/ 
	setWhiteboardPowerListener():void

	/** 初始化小班（RTC）播放器*/ 
	RTCinit():void

	/** 人员上麦监听*/ 
	setRtcMemberListener():void

	/** 申请上讲台*/ 
	apply():void

	/** 主动下讲台*/ 
	down():void

	/** 取消上讲台申请*/ 
	cancel():void

	/** 关闭摄像头*/ 
	closeVideo():void

	/** 打开摄像头*/ 
	openVideo():void

	/** 麦克风 关闭静音*/ 
	openAudio():void

	/** 麦克风 打开静音*/ 
	closeAudio():void

	/** 邀请上讲台响应*/ 
	respondInvite():void

	/** Rtc错误监听*/ 
	setRtcErrorListener():void

	/** 播放*/ 
	playbackResume():void

	/** 暂停*/ 
	playbackPause():void

	/**  跳转的时间*/ 
	playbackSeekTo():void

	/** 获取点播信息（需要在初始化成功后调用即 initSuccess 事件后调用）*/ 
	getPlaybackInfo():void

	/** 获取聊天列表*/ 
	getChatList():void

	/** 获取问答数据*/ 
	getRawQuestionList():void

	/** 获取专辑信息*/ 
	getAlbumList():void

	/** 倍数播放*/ 
	setPlaybackPlaySpeed():void

	/** 添加广告容器*/ 
	setADVideoContainer():void

	/** 跳过广告*/ 
	skipAD():void

	/** 广告视频监听*/ 
	setADVideoListener():void

	/** 设置广播监听*/ 
	setBroadcastListener():void

}
interface baiduFaceRec {
}
interface aMapReportLocation {
	/**
	 * `开始定位并上报指定服务器`
	 * ========params==========
	 *
	 * `accuracy` :string : （可选项）定位精度，**信号不稳定时，定位精度过高，在 iOS 平台上会偶现定位失败的问题**
	 *
	 * `filter` :number : （可选项）位置更新所需最小距离（单位米）
	 *
	 * `autoStop` :boolean : （可选项）获取到位置信息后是否自动停止定位
	 *
	 * `geocode` :boolean : （可选项）定位回调和上报数据是否带有逆地理信息(android不支持此字段，逆地理信息始终返回，开发者可根据需要自行取值)
	 *
	 * `report` :JSON : （可选项）当 autoStop 为 false 时，本参数表示将当前位置信息上报的配置，若 autoStop 为 true，则本参数无意义。
	 */
	startLocation(params:aMapReportLocation_startLocation_Params, callback?: (ret:JSON) => void):void

	/** 停止定位，当调用 startLocation 接口时 autoStop 参数传 false，则调用本接口可停止定位功能*/ 
	stopLocation():void

}
interface aMapReportLocation_startLocation_Params {
	/**（可选项）定位精度，**信号不稳定时，定位精度过高，在 iOS 平台上会偶现定位失败的问题***/ 
	accuracy?:string,

	/**（可选项）位置更新所需最小距离（单位米）*/ 
	filter?:number,

	/**（可选项）获取到位置信息后是否自动停止定位*/ 
	autoStop?:boolean,

	/**（可选项）定位回调和上报数据是否带有逆地理信息(android不支持此字段，逆地理信息始终返回，开发者可根据需要自行取值)*/ 
	geocode?:boolean,

	/**（可选项）当 autoStop 为 false 时，本参数表示将当前位置信息上报的配置，若 autoStop 为 true，则本参数无意义。*/ 
	report?:JSON,

}

interface mipush {
	/**
	 * `注册 miPush 推送服务。`
	 * ========params==========
	 *
	 * `appId` :string : 在小米消息推送平台应用的appid
	 *
	 * `appKey` :Array : 在小米消息推送平台应用的appkey
	 */
	registerPush(params:mipush_registerPush_Params, callback?: (ret:JSON) => void):void

	/** 设置消息监听*/ 
	setListener():void

	/** 关闭 miPush 推送服务。*/ 
	unregisterPush():void

	/**
	 * `设置别名，服务端可以指定别名进行消息推送`
	 * ========params==========
	 *
	 * `alias` :string : 别名(length:128)
	 */
	setAlias(params:mipush_setAlias_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消指定用户的某个别名，服务端对指定别名不再进行消息推送`
	 * ========params==========
	 *
	 * `alias` :string : 别名
	 */
	unsetAlias(params:mipush_unsetAlias_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置用户名，服务端可以指定用户名进行消息推送。`
	 * ========params==========
	 *
	 * `account` :string : 用户名(length:128)
	 */
	setUserAccount(params:mipush_setUserAccount_Params):void

	/**
	 * `取消指定用户的某个用户名，服务端对指定用户名不再进行消息推送`
	 * ========params==========
	 *
	 * `account` :string : 用户名
	 */
	unsetUserAccount(params:mipush_unsetUserAccount_Params):void

	/**
	 * `设置订阅的主题，服务端可以根据订阅的主题实现分组群发。`
	 * ========params==========
	 *
	 * `topic` :string : 订阅的主题描述，支持同时设置多个topic， 中间使用 "," 分隔
	 */
	subscribe(params:mipush_subscribe_Params, callback?: (ret:JSON) => void):void

	/**
	 * `取消指定用户订阅的主题`
	 * ========params==========
	 *
	 * `topic` :string : 用户名
	 */
	unsubscribe(params:mipush_unsubscribe_Params, callback?: (ret:JSON) => void):void

	/**
	 * `设置接收miPush服务推送的时段，不在该时段的推送消息会被缓存起来，到了合适的时段再向app推送原先被缓存的消息，**本接口不支持 iOS 平台**`
	 * ========params==========
	 *
	 * `startHour` :number : 接收时段开始时间的小时（24小时制：startHour的范围为0到23）
	 *
	 * `startMin` :number : 接收时段开始时间的分钟（startMin的范围为0到59）
	 *
	 * `endHour` :number : 接收时段结束时间的小时（24小时制：endHour的范围为0到23）
	 *
	 * `endMin` :number : 接收时段结束时间的分钟（endMin的范围为0到59）
	 */
	setAcceptTime(params:mipush_setAcceptTime_Params, callback?: (ret:JSON) => void):void

	/** 暂停接收miPush服务推送的消息，app在恢复miPush推送服务之前，不接收任何推送消息*/ 
	pausePush():void

	/** 恢复接收miPush服务推送的消息*/ 
	resumePush():void

	/**
	 * `清除 miPush 发送到状态栏的通知`
	 * ========params==========
	 *
	 * `id` :number : 待清除的通知id（notifyId），不填时清除所有
	 */
	clearNotification(params:mipush_clearNotification_Params):void

	/** 获取客户端的RegId*/ 
	getRegId():void

	/** 上报点击的消息，用于统计开发者获取消息的点击率，你想使用服务器帮你统计你app的点击率请自行调用此方法，可在 setListener 的回调函数中调用此方法*/ 
	reportMessageClicked():void

	/** 获取客户端所有设置的别名*/ 
	getAllAlias():void

	/** 获取客户端所有订阅的主题。*/ 
	getAllTopic():void

	/** 获取客户端所有设置的帐号*/ 
	getAllUserAccount():void

}
interface mipush_registerPush_Params {
	/**在小米消息推送平台应用的appid*/ 
	appId:string,

	/**在小米消息推送平台应用的appkey*/ 
	appKey:Array,

}

interface mipush_setAlias_Params {
	/**别名(length:128)*/ 
	alias:string,

}

interface mipush_unsetAlias_Params {
	/**别名*/ 
	alias:string,

}

interface mipush_setUserAccount_Params {
	/**用户名(length:128)*/ 
	account:string,

}

interface mipush_unsetUserAccount_Params {
	/**用户名*/ 
	account:string,

}

interface mipush_subscribe_Params {
	/**订阅的主题描述，支持同时设置多个topic， 中间使用 "," 分隔*/ 
	topic:string,

}

interface mipush_unsubscribe_Params {
	/**用户名*/ 
	topic:string,

}

interface mipush_setAcceptTime_Params {
	/**接收时段开始时间的小时（24小时制：startHour的范围为0到23）*/ 
	startHour:number,

	/**接收时段开始时间的分钟（startMin的范围为0到59）*/ 
	startMin:number,

	/**接收时段结束时间的小时（24小时制：endHour的范围为0到23）*/ 
	endHour:number,

	/**接收时段结束时间的分钟（endMin的范围为0到59）*/ 
	endMin:number,

}

interface mipush_clearNotification_Params {
	/**待清除的通知id（notifyId），不填时清除所有*/ 
	id:number,

}

interface cloudwiseMAgent {
}
interface wxImageRecognizer {
	/**
	 * `模块相关配置。`
	 * ========params==========
	 *
	 * `appId` :string : 微信开放平台分配给移动应用的AppID。
	 */
	configuration(params:wxImageRecognizer_configuration_Params):void

	/**
	 * `图像识别。`
	 * ========params==========
	 *
	 * `path` :string : 本地图片路径，支持fs://、widget://等文件路径协议。
	 */
	imageRecognizer(params:wxImageRecognizer_imageRecognizer_Params, callback?: (ret:JSON) => void):void

	/** 取消识别。*/ 
	cancel():void

}
interface wxImageRecognizer_configuration_Params {
	/**微信开放平台分配给移动应用的AppID。*/ 
	appId:string,

}

interface wxImageRecognizer_imageRecognizer_Params {
	/**本地图片路径，支持fs://、widget://等文件路径协议。*/ 
	path:string,

}

interface detuPanorama {
	/**
	 * `打开全景播放器`
	 * ========params==========
	 *
	 * `x` :number : （可选项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `y` :number : （可选项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）
	 *
	 * `w` :number : （可选项）模块的宽度
	 *
	 * `h` :number : （可选项）模块的高度
	 *
	 * `type` :string : （可选项）展示类型
	 *
	 * `imgPath` :string : 要展示的 360 度全景图片的路径（支持widget://（Android暂不支持） fs:// http://）
	 *
	 * `useGyro` :boolean : （可选项）是否使用陀螺仪
	 *
	 * `fixedOn` :string : （可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）
	 *
	 * `fixed` :boolean : （可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动
	 */
	open(params:detuPanorama_open_Params, callback?: (ret:JSON) => void):void

	/** 关闭全景展示视图*/ 
	close():void

	/** 隐藏全景展示视图。隐藏视图，并没有从内存里清除*/ 
	hide():void

	/** 显示全景展示视图，显示已隐藏的视图*/ 
	show():void

}
interface detuPanorama_open_Params {
	/**（可选项）模块左上角的 x 坐标（相对于所属的 Window 或 Frame）*/ 
	x?:number,

	/**（可选项）模块左上角的 y 坐标（相对于所属的 Window 或 Frame）*/ 
	y?:number,

	/**（可选项）模块的宽度*/ 
	w?:number,

	/**（可选项）模块的高度*/ 
	h?:number,

	/**（可选项）展示类型*/ 
	type?:string,

	/**要展示的 360 度全景图片的路径（支持widget://（Android暂不支持） fs:// http://）*/ 
	imgPath:string,

	/**（可选项）是否使用陀螺仪*/ 
	useGyro?:boolean,

	/**（可选项）模块视图添加到指定 frame 的名字（只指 frame，传 window 无效）*/ 
	fixedOn?:string,

	/**（可选项）是否将模块视图固定到窗口上，不跟随窗口上下滚动*/ 
	fixed?:boolean,

}

